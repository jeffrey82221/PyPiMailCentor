ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiQWR5YWtzYSBXaXNhbmdnZW5pIiw=
ICAgICJhdXRob3JfZW1haWwiOiAiYWR5YWtzYUB4ZW5kaXQuY28iLA==
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgi
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIFhlbmRpdCBQeXRob24gTGlicmFyeVxuXG5UaGlzIGxpYnJhcnkgaXMgdGhlIGFic3RyYWN0aW9uIG9mIFhlbmRpdCBBUEkgZm9yIGFjY2VzcyBmcm9tIGFwcGxpY2F0aW9ucyB3cml0dGVuIHdpdGggUHl0aG9uLlxuXG4jIyBUYWJsZSBvZiBDb250ZW50c1xuXG48IS0tIFNUQVJUIGRvY3RvYyBnZW5lcmF0ZWQgVE9DIHBsZWFzZSBrZWVwIGNvbW1lbnQgaGVyZSB0byBhbGxvdyBhdXRvIHVwZGF0ZSAtLT5cbjwhLS0gRE9OJ1QgRURJVCBUSElTIFNFQ1RJT04sIElOU1RFQUQgUkUtUlVOIGRvY3RvYyBUTyBVUERBVEUgLS0+XG5cbi0gW1hlbmRpdCBQeXRob24gTGlicmFyeV0oI3hlbmRpdC1weXRob24tbGlicmFyeSlcbiAgLSBbVGFibGUgb2YgQ29udGVudHNdKCN0YWJsZS1vZi1jb250ZW50cylcbiAgLSBbQVBJIERvY3VtZW50YXRpb25dKCNhcGktZG9jdW1lbnRhdGlvbilcbiAgLSBbUmVxdWlyZW1lbnRzXSgjcmVxdWlyZW1lbnRzKVxuICAtIFtJbnN0YWxsYXRpb25dKCNpbnN0YWxsYXRpb24pXG4gIC0gW1VzYWdlXSgjdXNhZ2UpXG4gICAgLSBbQVBJIEtleV0oI2FwaS1rZXkpXG4gICAgICAtIFtHbG9iYWwgVmFyaWFibGVdKCNnbG9iYWwtdmFyaWFibGUpXG4gICAgICAtIFtVc2UgWGVuZGl0IEluc3RhbmNlXSgjdXNlLXhlbmRpdC1pbnN0YW5jZSlcbiAgICAtIFtIZWFkZXJzXSgjaGVhZGVycylcbiAgICAtIFtPYmplY3QgQ3JlYXRpb25dKCNvYmplY3QtY3JlYXRpb24pXG4gICAgLSBbQmFsYW5jZSBTZXJ2aWNlXSgjYmFsYW5jZS1zZXJ2aWNlKVxuICAgICAgLSBbR2V0IEJhbGFuY2VdKCNnZXQtYmFsYW5jZSlcbiAgICAtIFtDcmVkaXQgQ2FyZF0oI2NyZWRpdC1jYXJkKVxuICAgICAgLSBbQ3JlYXRlIEF1dGhvcml6YXRpb25dKCNjcmVhdGUtYXV0aG9yaXphdGlvbilcbiAgICAgIC0gW1JldmVyc2UgQXV0aG9yaXphdGlvbl0oI3JldmVyc2UtYXV0aG9yaXphdGlvbilcbiAgICAgIC0gW0NyZWF0ZSBDaGFyZ2VdKCNjcmVhdGUtY2hhcmdlKVxuICAgICAgLSBbQ2FwdHVyZSBDaGFyZ2VdKCNjYXB0dXJlLWNoYXJnZSlcbiAgICAgIC0gW0dldCBDaGFyZ2VdKCNnZXQtY2hhcmdlKVxuICAgICAgLSBbQ3JlYXRlIFJlZnVuZF0oI2NyZWF0ZS1yZWZ1bmQpXG4gICAgICAtIFtDcmVhdGUgUHJvbW90aW9uXSgjY3JlYXRlLXByb21vdGlvbilcbiAgICAtIFtlV2FsbGV0c10oI2V3YWxsZXRzKVxuICAgICAgLSBbQ3JlYXRlIE9WTyBQYXltZW50XSgjY3JlYXRlLW92by1wYXltZW50KVxuICAgICAgLSBbQ3JlYXRlIERBTkEgUGF5bWVudF0oI2NyZWF0ZS1kYW5hLXBheW1lbnQpXG4gICAgICAtIFtDcmVhdGUgTGlua0FqYSBQYXltZW50XSgjY3JlYXRlLWxpbmthamEtcGF5bWVudClcbiAgICAgIC0gW0dldCBQYXltZW50IFN0YXR1c10oI2dldC1wYXltZW50LXN0YXR1cylcbiAgICAtIFtEaXJlY3QgRGViaXRdKCNkaXJlY3QtZGViaXQpXG4gICAgICAtIFtDcmVhdGUgQ3VzdG9tZXJdKCNjcmVhdGUtY3VzdG9tZXIpXG4gICAgICAtIFtHZXQgQ3VzdG9tZXIgYnkgUmVmZXJlbmNlIElEXSgjZ2V0LWN1c3RvbWVyLWJ5LXJlZmVyZW5jZS1pZClcbiAgICAgIC0gW0luaXRpYWxpemUgTGlua2VkIEFjY291bnQgVG9rZW5pemF0aW9uXSgjaW5pdGlhbGl6ZS1saW5rZWQtYWNjb3VudC10b2tlbml6YXRpb24pXG4gICAgICAtIFtWYWxpZGF0ZSBPVFAgZm9yIExpbmtlZCBBY2NvdW50IFRva2VuXSgjdmFsaWRhdGUtb3RwLWZvci1saW5rZWQtYWNjb3VudC10b2tlbilcbiAgICAgIC0gW1JldHJpZXZlIEFjY2Vzc2libGUgQWNjb3VudHMgYnkgTGlua2VkIEFjY291bnQgVG9rZW5dKCNyZXRyaWV2ZS1hY2Nlc3NpYmxlLWFjY291bnRzLWJ5LWxpbmtlZC1hY2NvdW50LXRva2VuKVxuICAgICAgLSBbQ3JlYXRlIFBheW1lbnQgTWV0aG9kXSgjY3JlYXRlLXBheW1lbnQtbWV0aG9kKVxuICAgICAgLSBbR2V0IFBheW1lbnQgTWV0aG9kcyBieSBDdXN0b21lciBJRF0oI2dldC1wYXltZW50LW1ldGhvZHMtYnktY3VzdG9tZXItaWQpXG4gICAgICAtIFtDcmVhdGUgRGlyZWN0IERlYml0IFBheW1lbnRdKCNjcmVhdGUtZGlyZWN0LWRlYml0LXBheW1lbnQpXG4gICAgICAtIFtDcmVhdGUgUmVjdXJyaW5nIFBheW1lbnQgd2l0aCBEaXJlY3QgRGViaXRdKCNjcmVhdGUtcmVjdXJyaW5nLXBheW1lbnQtd2l0aC1kaXJlY3QtZGViaXQpXG4gICAgICAtIFtWYWxpZGF0ZSBPVFAgZm9yIERpcmVjdCBEZWJpdCBQYXltZW50XSgjdmFsaWRhdGUtb3RwLWZvci1kaXJlY3QtZGViaXQtcGF5bWVudClcbiAgICAgIC0gW0dldCBEaXJlY3QgRGViaXQgUGF5bWVudCBTdGF0dXMgYnkgSURdKCNnZXQtZGlyZWN0LWRlYml0LXBheW1lbnQtc3RhdHVzLWJ5LWlkKVxuICAgICAgLSBbR2V0IERpcmVjdCBEZWJpdCBQYXltZW50IFN0YXR1cyBieSBSZWZlcmVuY2UgSURdKCNnZXQtZGlyZWN0LWRlYml0LXBheW1lbnQtc3RhdHVzLWJ5LXJlZmVyZW5jZS1pZClcbiAgICAtIFtWaXJ0dWFsIEFjY291bnQgU2VydmljZV0oI3ZpcnR1YWwtYWNjb3VudC1zZXJ2aWNlKVxuICAgICAgLSBbQ3JlYXRlIFZpcnR1YWwgQWNjb3VudF0oI2NyZWF0ZS12aXJ0dWFsLWFjY291bnQpXG4gICAgICAtIFtHZXQgVmlydHVhbCBBY2NvdW50IEJhbmtzXSgjZ2V0LXZpcnR1YWwtYWNjb3VudC1iYW5rcylcbiAgICAgIC0gW0dldCBWaXJ0dWFsIEFjY291bnRdKCNnZXQtdmlydHVhbC1hY2NvdW50KVxuICAgICAgLSBbVXBkYXRlIFZpcnR1YWwgQWNjb3VudF0oI3VwZGF0ZS12aXJ0dWFsLWFjY291bnQpXG4gICAgICAtIFtHZXQgVmlydHVhbCBBY2NvdW50IFBheW1lbnRdKCNnZXQtdmlydHVhbC1hY2NvdW50LXBheW1lbnQpXG4gICAgLSBbUmV0YWlsIE91dGxldCBTZXJ2aWNlXSgjcmV0YWlsLW91dGxldC1zZXJ2aWNlKVxuICAgICAgLSBbQ3JlYXRlIEZpeGVkIFBheW1lbnQgQ29kZV0oI2NyZWF0ZS1maXhlZC1wYXltZW50LWNvZGUpXG4gICAgICAtIFtVcGRhdGUgRml4ZWQgUGF5bWVudCBDb2RlXSgjdXBkYXRlLWZpeGVkLXBheW1lbnQtY29kZSlcbiAgICAgIC0gW0dldCBGaXhlZCBQYXltZW50IENvZGVdKCNnZXQtZml4ZWQtcGF5bWVudC1jb2RlKVxuICAgIC0gW0ludm9pY2UgU2VydmljZV0oI2ludm9pY2Utc2VydmljZSlcbiAgICAgIC0gW0NyZWF0ZSBJbnZvaWNlXSgjY3JlYXRlLWludm9pY2UpXG4gICAgICAtIFtHZXQgSW52b2ljZV0oI2dldC1pbnZvaWNlKVxuICAgICAgLSBbRXhwaXJlIEludm9pY2VdKCNleHBpcmUtaW52b2ljZSlcbiAgICAgIC0gW0xpc3QgQWxsIEludm9pY2VdKCNsaXN0LWFsbC1pbnZvaWNlKVxuICAgIC0gW1JlY3VycmluZyBQYXltZW50XSgjcmVjdXJyaW5nLXBheW1lbnQpXG4gICAgICAtIFtDcmVhdGUgUmVjdXJyaW5nIFBheW1lbnRdKCNjcmVhdGUtcmVjdXJyaW5nLXBheW1lbnQpXG4gICAgICAtIFtHZXQgUmVjdXJyaW5nIFBheW1lbnRdKCNnZXQtcmVjdXJyaW5nLXBheW1lbnQpXG4gICAgICAtIFtFZGl0IFJlY3VycmluZyBQYXltZW50XSgjZWRpdC1yZWN1cnJpbmctcGF5bWVudClcbiAgICAgIC0gW1N0b3AgUmVjdXJyaW5nIFBheW1lbnRdKCNzdG9wLXJlY3VycmluZy1wYXltZW50KVxuICAgICAgLSBbUGF1c2UgUmVjdXJyaW5nIFBheW1lbnRdKCNwYXVzZS1yZWN1cnJpbmctcGF5bWVudClcbiAgICAgIC0gW1Jlc3VtZSBSZWN1cnJpbmcgUGF5bWVudF0oI3Jlc3VtZS1yZWN1cnJpbmctcGF5bWVudClcbiAgICAtIFtEaXNidXJzZW1lbnQgU2VydmljZV0oI2Rpc2J1cnNlbWVudC1zZXJ2aWNlKVxuICAgICAgLSBbQ3JlYXRlIERpc2J1cnNlbWVudF0oI2NyZWF0ZS1kaXNidXJzZW1lbnQpXG4gICAgICAtIFtHZXQgRGlzYnVyc2VtZW50IGJ5IElEXSgjZ2V0LWRpc2J1cnNlbWVudC1ieS1pZClcbiAgICAgIC0gW0dldCBEaXNidXJzZW1lbnQgYnkgRXh0ZXJuYWwgSURdKCNnZXQtZGlzYnVyc2VtZW50LWJ5LWV4dGVybmFsLWlkKVxuICAgICAgLSBbR2V0IEF2YWlsYWJsZSBCYW5rc10oI2dldC1hdmFpbGFibGUtYmFua3MpXG4gIC0gW0NvbnRyaWJ1dGluZ10oI2NvbnRyaWJ1dGluZylcbiAgICAtIFtUZXN0c10oI3Rlc3RzKVxuICAgICAgLSBbUnVubmluZyB0aGUgVGVzdF0oI3J1bm5pbmctdGhlLXRlc3QpXG4gICAgICAtIFtDcmVhdGluZyBDdXN0b20gSFRUUCBDbGllbnRdKCNjcmVhdGluZy1jdXN0b20taHR0cC1jbGllbnQpXG5cbjwhLS0gRU5EIGRvY3RvYyBnZW5lcmF0ZWQgVE9DIHBsZWFzZSBrZWVwIGNvbW1lbnQgaGVyZSB0byBhbGxvdyBhdXRvIHVwZGF0ZSAtLT5cblxuIyMgQVBJIERvY3VtZW50YXRpb25cblBsZWFzZSBjaGVjayBbWGVuZGl0IEFQSSBSZWZlcmVuY2VdKGh0dHBzOi8veGVuZGl0LmdpdGh1Yi5pby9hcGlyZWZlcmVuY2UvKS5cblxuIyMgUmVxdWlyZW1lbnRzXG5cblB5dGhvbiAzLjcgb3IgbGF0ZXJcblxuIyMgSW5zdGFsbGF0aW9uXG5cblRvIHVzZSB0aGUgcGFja2FnZSwgcnVuIGBgYHBpcCBpbnN0YWxsIHhlbmRpdC1weXRob25gYGBcblxuIyMgVXNhZ2VcblxuIyMjIEFQSSBLZXlcblxuVG8gYWRkIEFQSSBLZXksIHlvdSBoYXZlIDIgb3B0aW9uOiBVc2UgZ2xvYmFsIHZhcmlhYmxlIG9yIHVzZSBYZW5kaXQgaW5zdGFuY2VcblxuIyMjIyBHbG9iYWwgVmFyaWFibGVcblxuYGBgcHl0aG9uXG5pbXBvcnQgeGVuZGl0XG54ZW5kaXQuYXBpX2tleSA9IFwidGVzdC1rZXkxMjNcIlxuXG4jIFRoZW4ganVzdCBydW4gZWFjaCBjbGFzcyBhcyBzdGF0aWNcbmZyb20geGVuZGl0IGltcG9ydCBCYWxhbmNlXG5CYWxhbmNlLmdldCgpXG5gYGBcblxuIyMjIyBVc2UgWGVuZGl0IEluc3RhbmNlXG5gYGBweXRob25cbmltcG9ydCB4ZW5kaXRcbnggPSB4ZW5kaXQuWGVuZGl0KGFwaV9rZXk9XCJ0ZXN0LWtleTEyM1wiKVxuXG4jIFRoZW4gYWNjZXNzIGVhY2ggY2xhc3MgZnJvbSB4IGF0dHJpYnV0ZVxuQmFsYW5jZSA9IHguQmFsYW5jZVxuQmFsYW5jZS5nZXQoKVxuYGBgXG5cbiMjIyBIZWFkZXJzXG5cbllvdSBjYW4gYWRkIGhlYWRlcnMgYnkgdXNpbmcgdGhlIGZvbGxvd2luZyBrZXl3b3JkIHBhcmFtZXRlcnNcbi0gWC1JREVNUE9URU5DWS1LRVk6IGB4X2lkZW1wb3RlbmN5X2tleWBcblxuYGBgXG5WaXJ0dWFsQWNjb3VudC5jcmVhdGUoeF9pZGVtcG90ZW5jeV9rZXk9XCJ5b3VyLWlkZW1wLWtleVwiKVxuYGBgXG5cbi0gZm9yLXVzZXItaWQ6IGBmb3JfdXNlcl9pZGBcblxuYGBgXG5CYWxhbmNlLmdldChmb3JfdXNlcl9pZD0nc3ViYWNjb3VudC11c2VyLWlkJylcbmBgYFxuXG4tIFgtQVBJLVZFUlNJT046IGB4X2FwaV92ZXJzaW9uYFxuXG5gYGBcbkJhbGFuY2UuZ2V0KHhfYXBpX3ZlcnNpb249JzIwMjAtMDEtMDEnKVxuYGBgXG5cbiMjIyBPYmplY3QgQ3JlYXRpb25cblxuSWYgYW4gQVBJIG5lZWQgYW4gb2JqZWN0IGFzIGl0cyBwYXJhbWV0ZXIsIHlvdSBjYW4gdXNlIGVpdGhlciBkaWN0aW9uYXJ5IGZvciB0aGF0IGNsYXNzIG9yIGEgaGVscGVyIG1ldGhvZCBlLmc6XG5cbmBgYHB5dGhvblxuaXRlbXMgPSBbXVxuaXRlbSA9IHtcbiAgICBpZDogXCIxMjMxMjNcIixcbiAgICBuYW1lOiBcIlBob25lIENhc2VcIixcbiAgICBwcmljZTogMTAwMDAwLFxuICAgIHF1YW50aXR5OiAxXG59XG5pdGVtcy5hcHBlbmQoaXRlbSlcbkVXYWxsZXQuY3JlYXRlX2xpbmthamFfcGF5bWVudChcbiAgICBleHRlcm5hbF9pZD1cImxpbmthamEtZXdhbGxldC10ZXN0LTE1OTM2NjM0OThcIixcbiAgICBwaG9uZT1cIjA4OTkxMTExMTExMVwiLFxuICAgIGl0ZW1zPWl0ZW1zLFxuICAgIGFtb3VudD0zMDAwMDAsXG4gICAgY2FsbGJhY2tfdXJsPVwiaHR0cHM6Ly9teS1zaG9wLmNvbS9jYWxsYmFja3NcIixcbiAgICByZWRpcmVjdF91cmw9XCJodHRwczovL3hlbmRpdC5jby9cIixcbilcbmBgYFxuXG5pcyBlcXVpdmFsZW50IHdpdGhcblxuYGBgcHl0aG9uXG5pdGVtcyA9IFtdXG5pdGVtID0geGVuZGl0LkVXYWxsZXQuaGVscGVyX2NyZWF0ZV9saW5rYWphX2l0ZW0oXG4gICAgaWQ9XCIxMjMxMjNcIiwgbmFtZT1cIlBob25lIENhc2VcIiwgcHJpY2U9MTAwMDAwLCBxdWFudGl0eT0xXG4pXG5pdGVtcy5hcHBlbmQoaXRlbSlcbkVXYWxsZXQuY3JlYXRlX2xpbmthamFfcGF5bWVudChcbiAgICBleHRlcm5hbF9pZD1cImxpbmthamEtZXdhbGxldC10ZXN0LTE1OTM2NjM0OThcIixcbiAgICBwaG9uZT1cIjA4OTkxMTExMTExMVwiLFxuICAgIGl0ZW1zPWl0ZW1zLFxuICAgIGFtb3VudD0zMDAwMDAsXG4gICAgY2FsbGJhY2tfdXJsPVwiaHR0cHM6Ly9teS1zaG9wLmNvbS9jYWxsYmFja3NcIixcbiAgICByZWRpcmVjdF91cmw9XCJodHRwczovL3hlbmRpdC5jby9cIixcbilcbmBgYFxuXG4jIyMgQmFsYW5jZSBTZXJ2aWNlXG5cbiMjIyMgR2V0IEJhbGFuY2VcblxuVGhlIGBhY2NvdW50X3R5cGVgIHBhcmFtZXRlciBpcyBvcHRpb25hbC5cblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgQmFsYW5jZVxuQmFsYW5jZS5nZXQoKVxuXG5CYWxhbmNlLkFjY291bnRUeXBlKFxuICAgIGFjY291bnRfdHlwZT1CYWxhbmNlQWNjb3VudFR5cGUuQ0FTSCxcbilcbmBgYFxuXG5Vc2FnZSBleGFtcGxlOlxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBCYWxhbmNlLCBCYWxhbmNlQWNjb3VudFR5cGVcbkJhbGFuY2UgYmFsYW5jZSA9IEJhbGFuY2UuZ2V0KFxuICAgIGFjY291bnRfdHlwZT1CYWxhbmNlQWNjb3VudFR5cGUuQ0FTSCxcbilcblxuIyBUbyBnZXQgdGhlIEpTT04gdmlld1xucHJpbnQoYmFsYW5jZSlcblxuIyBUbyBnZXQgb25seSB0aGUgdmFsdWVcbnByaW50KGJhbGFuY2UuYmFsYW5jZSlcbmBgYCBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57J2JhbGFuY2UnOiAxMDAwMDAwMDAwfVxuMTAwMDAwMDAwMFxuYGBgXG5cbiMjIyBDcmVkaXQgQ2FyZFxuXG4jIyMjIENyZWF0ZSBBdXRob3JpemF0aW9uXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IENyZWRpdENhcmRcblxuY2hhcmdlID0gQ3JlZGl0Q2FyZC5jcmVhdGVfYXV0aG9yaXphdGlvbihcbiAgICB0b2tlbl9pZD1cIjVmMDQxMDg5OGJjZjdhMDAxYTAwODc5ZFwiLFxuICAgIGV4dGVybmFsX2lkPVwiY2FyZF9wcmVBdXRoLTE1OTQxMDYzNTZcIixcbiAgICBhbW91bnQ9NzUwMDAsXG4gICAgY2FyZF9jdm49XCIxMjNcIixcbilcbnByaW50KGNoYXJnZSlcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInN0YXR1c1wiOiBcIkFVVEhPUklaRURcIixcbiAgICBcImF1dGhvcml6ZWRfYW1vdW50XCI6IDc1MDAwLFxuICAgIFwiY2FwdHVyZV9hbW91bnRcIjogMCxcbiAgICBcImN1cnJlbmN5XCI6IFwiSURSXCIsXG4gICAgXCJidXNpbmVzc19pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwibWVyY2hhbnRfaWRcIjogXCJ4ZW5kaXRfY3R2X2FnZ1wiLFxuICAgIFwibWVyY2hhbnRfcmVmZXJlbmNlX2NvZGVcIjogXCI1ZjA0MjFmYWE5ODgxNWE0ZjRjOTJhMGRcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwiY2FyZF9wcmVBdXRoLTE1OTQxMDYzNTZcIixcbiAgICBcImVjaVwiOiBcIjA3XCIsXG4gICAgXCJjaGFyZ2VfdHlwZVwiOiBcIk1VTFRJUExFX1VTRV9UT0tFTlwiLFxuICAgIFwibWFza2VkX2NhcmRfbnVtYmVyXCI6IFwiNDAwMDAwWFhYWFhYMDAwMlwiLFxuICAgIFwiY2FyZF9icmFuZFwiOiBcIlZJU0FcIixcbiAgICBcImNhcmRfdHlwZVwiOiBcIkNSRURJVFwiLFxuICAgIFwiZGVzY3JpcHRvclwiOiBcIlhFTkRJVCpYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICBcImJhbmtfcmVjb25jaWxpYXRpb25faWRcIjogXCI1OTQxMDYzNjI1MTQ2ODI4MTAzMDExXCIsXG4gICAgXCJhcHByb3ZhbF9jb2RlXCI6IFwiODMxMDAwXCIsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0wN1QwNzoxOToyMi45MjFaXCIsXG4gICAgXCJpZFwiOiBcIjVmMDQyMWZhOGNjMWU4MDAxOTczYTFkNlwiXG59XG5gYGBcblxuIyMjIyBSZXZlcnNlIEF1dGhvcml6YXRpb25cblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgQ3JlZGl0Q2FyZFxuXG5yZXZlcnNlX2F1dGhvcml6YXRpb24gPSBDcmVkaXRDYXJkLnJldmVyc2VfYXV0aG9yaXphdGl0b24oXG4gICAgY3JlZGl0X2NhcmRfY2hhcmdlX2lkPVwiNWYwNDIxZmE4Y2MxZTgwMDE5NzNhMWQ2XCIsXG4gICAgZXh0ZXJuYWxfaWQ9XCJyZXZlcnNlLWF1dGhvcml6YXRpb24tMTU5NDEwNjM4N1wiLFxuKVxucHJpbnQocmV2ZXJzZV9hdXRob3JpemF0aW9uKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwic3RhdHVzXCI6IFwiU1VDQ0VFREVEXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiY3JlZGl0X2NhcmRfY2hhcmdlX2lkXCI6IFwiNWYwNDIxZmE4Y2MxZTgwMDE5NzNhMWQ2XCIsXG4gICAgXCJidXNpbmVzc19pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJjYXJkX3ByZUF1dGgtMTU5NDEwNjM1NlwiLFxuICAgIFwiYW1vdW50XCI6IDc1MDAwLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDdUMDc6MTk6NDguODk2WlwiLFxuICAgIFwiaWRcIjogXCI1ZjA0MjIxNDhjYzFlODAwMTk3M2ExZGNcIlxufVxuYGBgXG5cbiMjIyMgQ3JlYXRlIENoYXJnZVxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBDcmVkaXRDYXJkXG5cbmNoYXJnZSA9IENyZWRpdENhcmQuY3JlYXRlX2NoYXJnZShcbiAgICB0b2tlbl9pZD1cIjVmMDQxMDg5OGJjZjdhMDAxYTAwODc5ZFwiLFxuICAgIGV4dGVybmFsX2lkPVwiY2FyZF9jaGFyZ2UtMTU5NDEwNjQ3OFwiLFxuICAgIGFtb3VudD03NTAwMCxcbiAgICBjYXJkX2N2bj1cIjEyM1wiLFxuKVxucHJpbnQoY2hhcmdlKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwic3RhdHVzXCI6IFwiQ0FQVFVSRURcIixcbiAgICBcImF1dGhvcml6ZWRfYW1vdW50XCI6IDc1MDAwLFxuICAgIFwiY2FwdHVyZV9hbW91bnRcIjogNzUwMDAsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiYnVzaW5lc3NfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcIm1lcmNoYW50X2lkXCI6IFwieGVuZGl0X2N0dl9hZ2dcIixcbiAgICBcIm1lcmNoYW50X3JlZmVyZW5jZV9jb2RlXCI6IFwiNWYwNDIyNzQ2ZmMxZDI1YmQyMjJkZjJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImNhcmRfY2hhcmdlLTE1OTQxMDY0NzhcIixcbiAgICBcImVjaVwiOiBcIjA3XCIsXG4gICAgXCJjaGFyZ2VfdHlwZVwiOiBcIk1VTFRJUExFX1VTRV9UT0tFTlwiLFxuICAgIFwibWFza2VkX2NhcmRfbnVtYmVyXCI6IFwiNDAwMDAwWFhYWFhYMDAwMlwiLFxuICAgIFwiY2FyZF9icmFuZFwiOiBcIlZJU0FcIixcbiAgICBcImNhcmRfdHlwZVwiOiBcIkNSRURJVFwiLFxuICAgIFwiZGVzY3JpcHRvclwiOiBcIlhFTkRJVCpYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICBcImJhbmtfcmVjb25jaWxpYXRpb25faWRcIjogXCI1OTQxMDY0ODQ2NjQ2OTIzMzAzMDA4XCIsXG4gICAgXCJhcHByb3ZhbF9jb2RlXCI6IFwiODMxMDAwXCIsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0wN1QwNzoyMToyNS4wMjdaXCIsXG4gICAgXCJpZFwiOiBcIjVmMDQyMjc1MmJiYmU1MDAxOWEzNjhiNVwiXG59XG5gYGBcblxuIyMjIyBDYXB0dXJlIENoYXJnZVxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBDcmVkaXRDYXJkXG5cbmNoYXJnZSA9IENyZWRpdENhcmQuY2FwdHVyZV9jaGFyZ2UoXG4gICAgY3JlZGl0X2NhcmRfY2hhcmdlX2lkPVwiNWYwNDIyYWEyYmJiZTUwMDE5YTM2OGMyXCIsXG4gICAgYW1vdW50PTc1MDAwLFxuKVxucHJpbnQoY2hhcmdlKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwic3RhdHVzXCI6IFwiQ0FQVFVSRURcIixcbiAgICBcImF1dGhvcml6ZWRfYW1vdW50XCI6IDc1MDAwLFxuICAgIFwiY2FwdHVyZV9hbW91bnRcIjogNzUwMDAsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDdUMDc6MjI6MTguNzE5WlwiLFxuICAgIFwiYnVzaW5lc3NfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcIm1lcmNoYW50X2lkXCI6IFwieGVuZGl0X2N0dl9hZ2dcIixcbiAgICBcIm1lcmNoYW50X3JlZmVyZW5jZV9jb2RlXCI6IFwiNWYwNDIyYWE2ZmMxZDI1YmQyMjJkZjMyXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImNhcmRfcHJlQXV0aC0xNTk0MTA2NTMyXCIsXG4gICAgXCJlY2lcIjogXCIwN1wiLFxuICAgIFwiY2hhcmdlX3R5cGVcIjogXCJNVUxUSVBMRV9VU0VfVE9LRU5cIixcbiAgICBcIm1hc2tlZF9jYXJkX251bWJlclwiOiBcIjQwMDAwMFhYWFhYWDAwMDJcIixcbiAgICBcImNhcmRfYnJhbmRcIjogXCJWSVNBXCIsXG4gICAgXCJjYXJkX3R5cGVcIjogXCJDUkVESVRcIixcbiAgICBcImRlc2NyaXB0b3JcIjogXCJYRU5ESVQqWEVORElUJkFNUDsjWDI3O1MgSU5URVJOXCIsXG4gICAgXCJiYW5rX3JlY29uY2lsaWF0aW9uX2lkXCI6IFwiNTk0MTA2NTM4MzI5NjUyNTYwMzAwN1wiLFxuICAgIFwiYXBwcm92YWxfY29kZVwiOiBcIjgzMTAwMFwiLFxuICAgIFwibWlkX2xhYmVsXCI6IFwiQ1RWX1RFU1RcIixcbiAgICBcImlkXCI6IFwiNWYwNDIyYWEyYmJiZTUwMDE5YTM2OGMyXCJcbn1cbmBgYFxuXG4jIyMjIEdldCBDaGFyZ2VcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgQ3JlZGl0Q2FyZFxuXG5jaGFyZ2UgPSBDcmVkaXRDYXJkLmdldF9jaGFyZ2UoXG4gICAgY3JlZGl0X2NhcmRfY2hhcmdlX2lkPVwiNWYwNDIyYWEyYmJiZTUwMDE5YTM2OGMyXCIsXG4pXG5wcmludChjaGFyZ2UpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJzdGF0dXNcIjogXCJDQVBUVVJFRFwiLFxuICAgIFwiYXV0aG9yaXplZF9hbW91bnRcIjogNzUwMDAsXG4gICAgXCJjYXB0dXJlX2Ftb3VudFwiOiA3NTAwMCxcbiAgICBcImN1cnJlbmN5XCI6IFwiSURSXCIsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0wN1QwNzoyMjoxOC43MTlaXCIsXG4gICAgXCJidXNpbmVzc19pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwibWVyY2hhbnRfaWRcIjogXCJ4ZW5kaXRfY3R2X2FnZ1wiLFxuICAgIFwibWVyY2hhbnRfcmVmZXJlbmNlX2NvZGVcIjogXCI1ZjA0MjJhYTZmYzFkMjViZDIyMmRmMzJcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwiY2FyZF9wcmVBdXRoLTE1OTQxMDY1MzJcIixcbiAgICBcImVjaVwiOiBcIjA3XCIsXG4gICAgXCJjaGFyZ2VfdHlwZVwiOiBcIk1VTFRJUExFX1VTRV9UT0tFTlwiLFxuICAgIFwibWFza2VkX2NhcmRfbnVtYmVyXCI6IFwiNDAwMDAwWFhYWFhYMDAwMlwiLFxuICAgIFwiY2FyZF9icmFuZFwiOiBcIlZJU0FcIixcbiAgICBcImNhcmRfdHlwZVwiOiBcIkNSRURJVFwiLFxuICAgIFwiZGVzY3JpcHRvclwiOiBcIlhFTkRJVCpYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICBcImJhbmtfcmVjb25jaWxpYXRpb25faWRcIjogXCI1OTQxMDY1MzgzMjk2NTI1NjAzMDA3XCIsXG4gICAgXCJhcHByb3ZhbF9jb2RlXCI6IFwiODMxMDAwXCIsXG4gICAgXCJtaWRfbGFiZWxcIjogXCJDVFZfVEVTVFwiLFxuICAgIFwibWV0YWRhdGFcIjoge30sXG4gICAgXCJpZFwiOiBcIjVmMDQyMmFhMmJiYmU1MDAxOWEzNjhjMlwiXG59XG5gYGBcblxuIyMjIyBDcmVhdGUgUmVmdW5kXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IENyZWRpdENhcmRcblxucmVmdW5kID0gQ3JlZGl0Q2FyZC5jcmVhdGVfcmVmdW5kKFxuICAgIGNyZWRpdF9jYXJkX2NoYXJnZV9pZD1cIjVmMDQyMmFhMmJiYmU1MDAxOWEzNjhjMlwiLFxuICAgIGFtb3VudD0xMDAwMCxcbiAgICBleHRlcm5hbF9pZD1cImNhcmRfcmVmdW5kLTE1OTQxMDY3NTVcIixcbilcbnByaW50KHJlZnVuZClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInN0YXR1c1wiOiBcIlJFUVVFU1RFRFwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImNyZWRpdF9jYXJkX2NoYXJnZV9pZFwiOiBcIjVmMDQyMmFhMmJiYmU1MDAxOWEzNjhjMlwiLFxuICAgIFwidXNlcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiYW1vdW50XCI6IDEwMDAwLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJjYXJkX3JlZnVuZC0xNTk0MTA2NzU1XCIsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0wN1QwNzoyNTo1Ni44NzJaXCIsXG4gICAgXCJ1cGRhdGVkXCI6IFwiMjAyMC0wNy0wN1QwNzoyNTo1Ny43NDBaXCIsXG4gICAgXCJpZFwiOiBcIjVmMDQyMzg0OGJiOGRhNjAwYzU3YzQ0ZlwiLFxuICAgIFwiZmVlX3JlZnVuZF9hbW91bnRcIjogMjkwXG59XG5gYGBcblxuIyMjIyBDcmVhdGUgUHJvbW90aW9uXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IENyZWRpdENhcmRcblxucHJvbW90aW9uID0gQ3JlZGl0Q2FyZC5jcmVhdGVfcHJvbW90aW9uKFxuICAgIHJlZmVyZW5jZV9pZD1cIkJSSV8yMF9KQU4tMTU5NDE3NjYwMFwiLFxuICAgIGRlc2NyaXB0aW9uPVwiMjAlIGRpc2NvdW50IGFwcGxpZWQgZm9yIGFsbCBCUkkgY2FyZHNcIixcbiAgICBkaXNjb3VudF9hbW91bnQ9MTAwMDAsXG4gICAgYmluX2xpc3Q9Wyc0MDAwMDAnLCAnNDYwMDAwJ10sXG4gICAgc3RhcnRfdGltZT1cIjIwMjAtMDEtMDFUMDA6MDA6MDAuMDAwWlwiLFxuICAgIGVuZF90aW1lPVwiMjAyMS0wMS0wMVQwMDowMDowMC4wMDBaXCIsXG4pXG5wcmludChwcm9tb3Rpb24pXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJidXNpbmVzc19pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwicmVmZXJlbmNlX2lkXCI6IFwiQlJJXzIwX0pBTi0xNTk0MTc2NjAwXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIjIwJSBkaXNjb3VudCBhcHBsaWVkIGZvciBhbGwgQlJJIGNhcmRzXCIsXG4gICAgXCJzdGFydF90aW1lXCI6IFwiMjAyMC0wMS0wMVQwMDowMDowMC4wMDBaXCIsXG4gICAgXCJlbmRfdGltZVwiOiBcIjIwMjEtMDEtMDFUMDA6MDA6MDAuMDAwWlwiLFxuICAgIFwidHlwZVwiOiBcIkNBUkRfQklOXCIsXG4gICAgXCJkaXNjb3VudF9hbW91bnRcIjogMTAwMDAsXG4gICAgXCJiaW5fbGlzdFwiOiBbXG4gICAgICAgIFwiNDAwMDAwXCIsXG4gICAgICAgIFwiNDYwMDAwXCJcbiAgICBdLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImlkXCI6IFwiYzY1YTJhZTctY2U3NS00YTE1LWJiZWMtNTVkMDc2ZjQ2YmQwXCIsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0wOFQwMjo1MDowMi4yOTZaXCIsXG4gICAgXCJzdGF0dXNcIjogXCJBQ1RJVkVcIlxufVxuYGBgXG5cbiMjIyBlV2FsbGV0c1xuXG4jIyMjIENyZWF0ZSBPVk8gUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBFV2FsbGV0XG5cbm92b19wYXltZW50ID0gRVdhbGxldC5jcmVhdGVfb3ZvX3BheW1lbnQoXG4gICAgZXh0ZXJuYWxfaWQ9XCJvdm8tZXdhbGxldC10ZXN0aW5nLWlkLTE1OTM2NjM0MzBcIixcbiAgICBhbW91bnQ9XCI4MDAwMVwiLFxuICAgIHBob25lPVwiMDgxMjMxMjMxMjNcIixcbilcbnByaW50KG92b19wYXltZW50KVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwiYW1vdW50XCI6IDgwMDAxLFxuICAgIFwiYnVzaW5lc3NfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwib3ZvLWV3YWxsZXQtdGVzdGluZy1pZC0xNTkzNjYzNDMwXCIsXG4gICAgXCJld2FsbGV0X3R5cGVcIjogXCJPVk9cIixcbiAgICBcInBob25lXCI6IFwiMDgxMjMxMjMxMjNcIixcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTAyVDA0OjE3OjEyLjk3OVpcIixcbiAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIlxufVxuYGBgXG5cbiMjIyMgQ3JlYXRlIERBTkEgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBFV2FsbGV0XG5cbmRhbmFfcGF5bWVudCA9IEVXYWxsZXQuY3JlYXRlX2RhbmFfcGF5bWVudChcbiAgICBleHRlcm5hbF9pZD1cImRhbmEtZXdhbGxldC10ZXN0LTE1OTM2NjM0NDdcIixcbiAgICBhbW91bnQ9XCIxMDAxXCIsXG4gICAgY2FsbGJhY2tfdXJsPVwiaHR0cHM6Ly9teS1zaG9wLmNvbS9jYWxsYmFja3NcIixcbiAgICByZWRpcmVjdF91cmw9XCJodHRwczovL215LXNob3AuY29tL2hvbWVcIixcbilcbnByaW50KGRhbmFfcGF5bWVudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImV4dGVybmFsX2lkXCI6IFwiZGFuYS1ld2FsbGV0LXRlc3QtMTU5MzY2MzQ0N1wiLFxuICAgIFwiYW1vdW50XCI6IDEwMDEsXG4gICAgXCJjaGVja291dF91cmxcIjogXCJodHRwczovL3NhbmRib3gubS5kYW5hLmlkL20vcG9ydGFsL2Nhc2hpZXIvY2hlY2tvdXQ/Yml6Tm89MjAyMDA3MDIxMTEyMTI4MDAxMTAxNjY4MjAxMDA1NTA2MjAmdGltZXN0YW1wPTE1OTM2NjM0NTAzODkmbWlkPTIxNjYyMDAwMDAwMDI2MTY5MjMyOCZzaWduPVhTM0ZNS2oxb1pIa1RXdTBFWGs4UEJ3empSMVZ0d1NlZHFiS1glMkJnTUY2Q3ladmJBNXhoQW1NVVIlMkZsaEQ0UWtCT0RiYlRQY2p1MVlERm5IbVNkem1qYnFQZkdjUUd0a0NQZ0x3Vk9abzFFUlBtb1VoaEdKSWJRWGtmWjFaOGVBMXcxUlNxRHpkbURCJTJCJTJGbHZIYVRiWVBpVWx2anpzJTJCZmdrTTMzWUZGRWwwQkcxa1VGejAlMkZLYjlPb1QxUUt5b0h4dzZnZTRTV1BGM1BvNkJ3TnRqcVVaZTJuNDNzN3kwQ3ZTcmNOaU5MSFQzazJYSFNsSWRndXdDR2pOSGgyekNsZ3R2OVhiU0NlY25EOTZudUl1b2hZQVJYOEFpJTJCYVlvJTJGRURPMVZFY2g0WGRpdGZJWHZ5QmhMMFRvY3hoWXhkYTd5S05OamtaajU2Umw5ZHM4dTdXeXYxZVElM0QlM0RcIixcbiAgICBcImV3YWxsZXRfdHlwZVwiOiBcIkRBTkFcIlxufVxuYGBgXG5cbiMjIyMgQ3JlYXRlIExpbmtBamEgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBFV2FsbGV0LCBMaW5rQWphSXRlbVxuXG5pdGVtcyA9IFtdXG5pdGVtcy5hcHBlbmQoTGlua0FqYUl0ZW0oaWQ9XCIxMjMxMjNcIiwgbmFtZT1cIlBob25lIENhc2VcIiwgcHJpY2U9MTAwMDAwLCBxdWFudGl0eT0xKSlcbmxpbmthamFfcGF5bWVudCA9IEVXYWxsZXQuY3JlYXRlX2xpbmthamFfcGF5bWVudChcbiAgICBleHRlcm5hbF9pZD1cImxpbmthamEtZXdhbGxldC10ZXN0LTE1OTM2NjM0OThcIixcbiAgICBwaG9uZT1cIjA4OTkxMTExMTExMVwiLFxuICAgIGl0ZW1zPWl0ZW1zLFxuICAgIGFtb3VudD0zMDAwMDAsXG4gICAgY2FsbGJhY2tfdXJsPVwiaHR0cHM6Ly9teS1zaG9wLmNvbS9jYWxsYmFja3NcIixcbiAgICByZWRpcmVjdF91cmw9XCJodHRwczovL3hlbmRpdC5jby9cIixcbilcbnByaW50KGxpbmthamFfcGF5bWVudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImNoZWNrb3V0X3VybFwiOiBcImh0dHBzOi8vZXdhbGxldC1saW5rYWphLWRldi54ZW5kaXQuY28vY2hlY2tvdXRzL2M2MjdjZjFmLTA0NzAtNDIwZi1hMGY0LTM5MzFlZjM4NGJmNFwiLFxuICAgIFwidHJhbnNhY3Rpb25fZGF0ZVwiOiBcIjIwMjAtMDctMDJUMDQ6MTg6MjEuNzI5WlwiLFxuICAgIFwiYW1vdW50XCI6IDMwMDAwMCxcbiAgICBcImV4dGVybmFsX2lkXCI6IFwibGlua2FqYS1ld2FsbGV0LXRlc3QtMTU5MzY2MzQ5OFwiLFxuICAgIFwiZXdhbGxldF90eXBlXCI6IFwiTElOS0FKQVwiXG59XG5gYGBcblxuIyMjIyBHZXQgUGF5bWVudCBTdGF0dXNcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRVdhbGxldFxuXG5vdm9fcGF5bWVudF9zdGF0dXMgPSBFV2FsbGV0LmdldF9wYXltZW50X3N0YXR1cyhcbiAgICBld2FsbGV0X3R5cGU9RVdhbGxldFR5cGUuT1ZPLFxuICAgIGV4dGVybmFsX2lkPVwib3ZvLWV3YWxsZXQtdGVzdGluZy1pZC0xMjM0XCIsXG4pXG5wcmludChvdm9fcGF5bWVudF9zdGF0dXMpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJhbW91bnRcIjogXCI4ODg4XCIsXG4gICAgXCJidXNpbmVzc19pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXdhbGxldF90eXBlXCI6IFwiT1ZPXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcIm92by1ld2FsbGV0LXRlc3RpbmctaWQtMTIzNFwiLFxuICAgIFwic3RhdHVzXCI6IFwiQ09NUExFVEVEXCIsXG4gICAgXCJ0cmFuc2FjdGlvbl9kYXRlXCI6IFwiMjAyMC0wNi0zMFQwMTozMjoyOC4yNjdaXCJcbn1cbmBgYFxuXG4jIyMgRGlyZWN0IERlYml0XG5cbiMjIyMgQ3JlYXRlIEN1c3RvbWVyXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbmN1c3RvbWVyID0gRGlyZWN0RGViaXQuY3JlYXRlX2N1c3RvbWVyKFxuICAgIHJlZmVyZW5jZV9pZD1cIm1lcmMtMTU5NDI3OTAzN1wiLFxuICAgIGVtYWlsPVwidEB4LmNvXCIsXG4gICAgZ2l2ZW5fbmFtZXM9XCJBZHlha3NhXCIsXG4pXG5wcmludChjdXN0b21lcilcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImlkXCI6IFwiZWQyMGI1ZGItZGYwNC00MWZjLTgwMTgtOGVhNGFjNGQxMDMwXCIsXG4gICAgXCJyZWZlcmVuY2VfaWRcIjogXCJtZXJjLTE1OTQyNzkwMzdcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IG51bGwsXG4gICAgXCJnaXZlbl9uYW1lc1wiOiBcIkFkeWFrc2FcIixcbiAgICBcIm1pZGRsZV9uYW1lXCI6IG51bGwsXG4gICAgXCJzdXJuYW1lXCI6IG51bGwsXG4gICAgXCJtb2JpbGVfbnVtYmVyXCI6IG51bGwsXG4gICAgXCJwaG9uZV9udW1iZXJcIjogbnVsbCxcbiAgICBcImVtYWlsXCI6IFwidEB4LmNvXCIsXG4gICAgXCJuYXRpb25hbGl0eVwiOiBudWxsLFxuICAgIFwiYWRkcmVzc2VzXCI6IG51bGwsXG4gICAgXCJkYXRlX29mX2JpcnRoXCI6IG51bGwsXG4gICAgXCJlbXBsb3ltZW50XCI6IG51bGwsXG4gICAgXCJzb3VyY2Vfb2Zfd2VhbHRoXCI6IG51bGwsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsXG59XG5gYGBcblxuIyMjIyBHZXQgQ3VzdG9tZXIgYnkgUmVmZXJlbmNlIElEXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbmN1c3RvbWVyID0gRGlyZWN0RGViaXQuZ2V0X2N1c3RvbWVyX2J5X3JlZl9pZChcbiAgICByZWZlcmVuY2VfaWQ9XCJtZXJjLTE1OTQyNzkwMzdcIixcbilcbnByaW50KGN1c3RvbWVyKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxuW3tcbiAgICBcImlkXCI6IFwiZWQyMGI1ZGItZGYwNC00MWZjLTgwMTgtOGVhNGFjNGQxMDMwXCIsXG4gICAgXCJyZWZlcmVuY2VfaWRcIjogXCJtZXJjLTE1OTQyNzkwMzdcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IG51bGwsXG4gICAgXCJnaXZlbl9uYW1lc1wiOiBcIkFkeWFrc2FcIixcbiAgICBcIm1pZGRsZV9uYW1lXCI6IG51bGwsXG4gICAgXCJzdXJuYW1lXCI6IG51bGwsXG4gICAgXCJtb2JpbGVfbnVtYmVyXCI6IG51bGwsXG4gICAgXCJwaG9uZV9udW1iZXJcIjogbnVsbCxcbiAgICBcImVtYWlsXCI6IFwidEB4LmNvXCIsXG4gICAgXCJuYXRpb25hbGl0eVwiOiBudWxsLFxuICAgIFwiYWRkcmVzc2VzXCI6IG51bGwsXG4gICAgXCJkYXRlX29mX2JpcnRoXCI6IG51bGwsXG4gICAgXCJlbXBsb3ltZW50XCI6IG51bGwsXG4gICAgXCJzb3VyY2Vfb2Zfd2VhbHRoXCI6IG51bGwsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsXG59XVxuYGBgXG5cbiMjIyMgSW5pdGlhbGl6ZSBMaW5rZWQgQWNjb3VudCBUb2tlbml6YXRpb25cblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlyZWN0RGViaXRcblxuY2FyZF9saW5raW5nID0gRGlyZWN0RGViaXQuaGVscGVyX2NyZWF0ZV9jYXJkX2xpbmsoXG4gICAgYWNjb3VudF9tb2JpbGVfbnVtYmVyPVwiKzYyODE4NTU1OTg4XCIsXG4gICAgY2FyZF9sYXN0X2ZvdXI9XCI4ODg4XCIsXG4gICAgY2FyZF9leHBpcnk9XCIwNi8yNFwiLFxuICAgIGFjY291bnRfZW1haWw9XCJ0ZXN0LmVtYWlsQHhlbmRpdC5jb1wiLFxuKVxubGlua2VkX2FjY291bnQgPSBEaXJlY3REZWJpdC5pbml0aWFsaXplX3Rva2VuaXphdGlvbihcbiAgICBjdXN0b21lcl9pZD1cImVkMjBiNWRiLWRmMDQtNDFmYy04MDE4LThlYTRhYzRkMTAzMFwiLFxuICAgIGNoYW5uZWxfY29kZT1cIkRDX0JSSVwiLFxuICAgIHByb3BlcnRpZXM9Y2FyZF9saW5raW5nLCAgIFxuKVxucHJpbnQobGlua2VkX2FjY291bnQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJpZFwiOiBcImxhdC1mMzI1Yjc1Ny0wYWFlLTRjMjQtOTJjNS0zNjYxZTI5OWUxNTRcIixcbiAgICBcImN1c3RvbWVyX2lkXCI6IFwiZWQyMGI1ZGItZGYwNC00MWZjLTgwMTgtOGVhNGFjNGQxMDMwXCIsXG4gICAgXCJjaGFubmVsX2NvZGVcIjogXCJEQ19CUklcIixcbiAgICBcImF1dGhvcml6ZXJfdXJsXCI6IG51bGwsXG4gICAgXCJzdGF0dXNcIjogXCJQRU5ESU5HXCIsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsXG59XG5gYGBcblxuIyMjIyBWYWxpZGF0ZSBPVFAgZm9yIExpbmtlZCBBY2NvdW50IFRva2VuXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbmxpbmtlZF9hY2NvdW50ID0gRGlyZWN0RGViaXQudmFsaWRhdGVfdG9rZW5fb3RwKFxuICAgIGxpbmtlZF9hY2NvdW50X3Rva2VuX2lkPVwibGF0LWYzMjViNzU3LTBhYWUtNGMyNC05MmM1LTM2NjFlMjk5ZTE1NFwiLFxuICAgIG90cF9jb2RlPVwiMzMzMDAwXCIsXG4pXG5wcmludChsaW5rZWRfYWNjb3VudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImlkXCI6IFwibGF0LWYzMjViNzU3LTBhYWUtNGMyNC05MmM1LTM2NjFlMjk5ZTE1NFwiLFxuICAgIFwiY3VzdG9tZXJfaWRcIjogXCJlZDIwYjVkYi1kZjA0LTQxZmMtODAxOC04ZWE0YWM0ZDEwMzBcIixcbiAgICBcImNoYW5uZWxfY29kZVwiOiBcIkRDX0JSSVwiLFxuICAgIFwic3RhdHVzXCI6IFwiU1VDQ0VTU1wiLFxuICAgIFwibWV0YWRhdGFcIjogbnVsbFxufVxuYGBgXG5cbiMjIyMgUmV0cmlldmUgQWNjZXNzaWJsZSBBY2NvdW50cyBieSBMaW5rZWQgQWNjb3VudCBUb2tlblxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBEaXJlY3REZWJpdFxuXG5hY2Nlc3NpYmxlX2FjY291bnRzID0gRGlyZWN0RGViaXQuZ2V0X2FjY2Vzc2libGVfYWNjb3VudF9ieV90b2tlbihcbiAgICBsaW5rZWRfYWNjb3VudF90b2tlbl9pZD1cImxhdC1mMzI1Yjc1Ny0wYWFlLTRjMjQtOTJjNS0zNjYxZTI5OWUxNTRcIixcbilcbnByaW50KGFjY2Vzc2libGVfYWNjb3VudHMpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG5be1xuICAgIFwiY2hhbm5lbF9jb2RlXCI6IFwiRENfQlJJXCIsXG4gICAgXCJpZFwiOiBcImxhLTA4YjA4OWU4LTcwMzUtNGY1Zi1iZGQ5LTk0ZWRkOWRjOTQ4MFwiLFxuICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiY2FyZF9leHBpcnlcIjogXCIwNi8yNFwiLFxuICAgICAgICBcImNhcmRfbGFzdF9mb3VyXCI6IFwiODg4OFwiLFxuICAgICAgICBcImN1cnJlbmN5XCI6IFwiSURSXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIlxuICAgIH0sXG4gICAgXCJ0eXBlXCI6IFwiREVCSVRfQ0FSRFwiXG59XVxuYGBgXG5cbiMjIyMgQ3JlYXRlIFBheW1lbnQgTWV0aG9kXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbnBheW1lbnRfbWV0aG9kID0gRGlyZWN0RGViaXQuY3JlYXRlX3BheW1lbnRfbWV0aG9kKFxuICAgIGN1c3RvbWVyX2lkPVwiZWQyMGI1ZGItZGYwNC00MWZjLTgwMTgtOGVhNGFjNGQxMDMwXCIsXG4gICAgdHlwZT1EaXJlY3REZWJpdFBheW1lbnRNZXRob2RUeXBlLkRFQklUX0NBUkQsXG4gICAgcHJvcGVydGllcz17J2lkJzogJ2xhLWZhYzdlNzQ0LWFiNDAtNDEwMC1hNDQ3LWNiYmIxNmYyOWRlZCd9LFxuKVxuXG5wcmludChwYXltZW50X21ldGhvZClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImN1c3RvbWVyX2lkXCI6IFwiZWQyMGI1ZGItZGYwNC00MWZjLTgwMTgtOGVhNGFjNGQxMDMwXCIsXG4gICAgXCJ0eXBlXCI6IFwiREVCSVRfQ0FSRFwiLFxuICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiaWRcIjogXCJsYS1mYWM3ZTc0NC1hYjQwLTQxMDAtYTQ0Ny1jYmJiMTZmMjlkZWRcIixcbiAgICAgICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgICAgICBcImNhcmRfZXhwaXJ5XCI6IFwiMDYvMjRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICBcImNoYW5uZWxfY29kZVwiOiBcIkRDX0JSSVwiLFxuICAgICAgICBcImNhcmRfbGFzdF9mb3VyXCI6IFwiODg4OFwiXG4gICAgfSxcbiAgICBcInN0YXR1c1wiOiBcIkFDVElWRVwiLFxuICAgIFwibWV0YWRhdGFcIjoge30sXG4gICAgXCJpZFwiOiBcInBtLWI2MTE2YWVhLThjMjMtNDJkMC1hMWU2LTMzMjI3YjUyZmNjZFwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMTNUMDc6Mjg6NTcuNzE2WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMTNUMDc6Mjg6NTcuNzE2WlwiXG59XG5gYGBcblxuIyMjIyBHZXQgUGF5bWVudCBNZXRob2RzIGJ5IEN1c3RvbWVyIElEXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbnBheW1lbnRfbWV0aG9kcyA9IERpcmVjdERlYml0LmdldF9wYXltZW50X21ldGhvZHNfYnlfY3VzdG9tZXJfaWQoXG4gICAgY3VzdG9tZXJfaWQ9XCJlZDIwYjVkYi1kZjA0LTQxZmMtODAxOC04ZWE0YWM0ZDEwMzBcIixcbilcblxucHJpbnQocGF5bWVudF9tZXRob2RzKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxuW3tcbiAgICBcImlkXCI6IFwicG0tYjYxMTZhZWEtOGMyMy00MmQwLWExZTYtMzMyMjdiNTJmY2NkXCIsXG4gICAgXCJjdXN0b21lcl9pZFwiOiBcImVkMjBiNWRiLWRmMDQtNDFmYy04MDE4LThlYTRhYzRkMTAzMFwiLFxuICAgIFwic3RhdHVzXCI6IFwiQUNUSVZFXCIsXG4gICAgXCJ0eXBlXCI6IFwiREVCSVRfQ0FSRFwiLFxuICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiaWRcIjogXCJsYS1mYWM3ZTc0NC1hYjQwLTQxMDAtYTQ0Ny1jYmJiMTZmMjlkZWRcIixcbiAgICAgICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgICAgICBcImNhcmRfZXhwaXJ5XCI6IFwiMDYvMjRcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgICAgICBcImNoYW5uZWxfY29kZVwiOiBcIkRDX0JSSVwiLFxuICAgICAgICBcImNhcmRfbGFzdF9mb3VyXCI6IFwiODg4OFwiXG4gICAgfSxcbiAgICBcIm1ldGFkYXRhXCI6IHt9LFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMTNUMDc6Mjg6NTcuNzE2WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMTNUMDc6Mjg6NTcuNzE2WlwiXG59XVxuYGBgXG5cbiMjIyMgQ3JlYXRlIERpcmVjdCBEZWJpdCBQYXltZW50XG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbnBheW1lbnQgPSBEaXJlY3REZWJpdC5jcmVhdGVfcGF5bWVudChcbiAgICByZWZlcmVuY2VfaWQ9XCJkaXJlY3QtZGViaXQtcmVmLTE1OTQ3MTg5NDBcIixcbiAgICBwYXltZW50X21ldGhvZF9pZD1cInBtLWI2MTE2YWVhLThjMjMtNDJkMC1hMWU2LTMzMjI3YjUyZmNjZFwiLFxuICAgIGN1cnJlbmN5PVwiSURSXCIsXG4gICAgYW1vdW50PVwiNjAwMDBcIixcbiAgICBjYWxsYmFja191cmw9XCJodHRwOi8vd2ViaG9vay5zaXRlL1wiLFxuICAgIGVuYWJsZV9vdHA9VHJ1ZSxcbiAgICBpZGVtcG90ZW5jeV9rZXk9XCJpZGVtcF9rZXktMTU5NDcxODk0MFwiLFxuKVxuXG5wcmludChwYXltZW50KVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwiZmFpbHVyZV9jb2RlXCI6IG51bGwsXG4gICAgXCJvdHBfbW9iaWxlX251bWJlclwiOiBudWxsLFxuICAgIFwib3RwX2V4cGlyYXRpb25fdGltZXN0YW1wXCI6IG51bGwsXG4gICAgXCJpZFwiOiBcImRkcHktZWFhMDkzYjYtYjY2OS00MDFhLWJhMmUtNjFhYzY0NGIyYWZmXCIsXG4gICAgXCJyZWZlcmVuY2VfaWRcIjogXCJkaXJlY3QtZGViaXQtcmVmLTE1OTQ3MTg5NDBcIixcbiAgICBcInBheW1lbnRfbWV0aG9kX2lkXCI6IFwicG0tYjYxMTZhZWEtOGMyMy00MmQwLWExZTYtMzMyMjdiNTJmY2NkXCIsXG4gICAgXCJjaGFubmVsX2NvZGVcIjogXCJEQ19CUklcIixcbiAgICBcImN1cnJlbmN5XCI6IFwiSURSXCIsXG4gICAgXCJhbW91bnRcIjogNjAwMDAsXG4gICAgXCJpc19vdHBfcmVxdWlyZWRcIjogdHJ1ZSxcbiAgICBcImJhc2tldFwiOiBudWxsLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJcIixcbiAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICBcIm1ldGFkYXRhXCI6IG51bGwsXG4gICAgXCJjcmVhdGVkXCI6IFwiMjAyMC0wNy0xNFQwOToyOTowMi42MTQ0NDNaXCIsXG4gICAgXCJ1cGRhdGVkXCI6IFwiMjAyMC0wNy0xNFQwOToyOTowMi42MTQ0NDNaXCJcbn1cbmBgYFxuXG4jIyMjIENyZWF0ZSBSZWN1cnJpbmcgUGF5bWVudCB3aXRoIERpcmVjdCBEZWJpdFxuXG5Zb3UgY2FuIHVzZSBbQ3JlYXRlIFJlY3VycmluZyBQYXltZW50XSgjY3JlYXRlLXJlY3VycmluZy1wYXltZW50KSB0byB1c2UgdGhpcyBmZWF0dXJlLlxuXG4jIyMjIFZhbGlkYXRlIE9UUCBmb3IgRGlyZWN0IERlYml0IFBheW1lbnRcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlyZWN0RGViaXRcblxucGF5bWVudCA9IERpcmVjdERlYml0LnZhbGlkYXRlX3BheW1lbnRfb3RwKFxuICAgIGRpcmVjdF9kZWJpdF9pZD1cImRkcHktZWFhMDkzYjYtYjY2OS00MDFhLWJhMmUtNjFhYzY0NGIyYWZmXCIsXG4gICAgb3RwX2NvZGU9XCIyMjIwMDBcIixcbilcblxucHJpbnQocGF5bWVudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImZhaWx1cmVfY29kZVwiOiBudWxsLFxuICAgIFwib3RwX21vYmlsZV9udW1iZXJcIjogbnVsbCxcbiAgICBcIm90cF9leHBpcmF0aW9uX3RpbWVzdGFtcFwiOiBudWxsLFxuICAgIFwiaWRcIjogXCJkZHB5LWVhYTA5M2I2LWI2NjktNDAxYS1iYTJlLTYxYWM2NDRiMmFmZlwiLFxuICAgIFwicmVmZXJlbmNlX2lkXCI6IFwiZGlyZWN0LWRlYml0LXJlZi0xNTk0NzE4OTQwXCIsXG4gICAgXCJwYXltZW50X21ldGhvZF9pZFwiOiBcInBtLWI2MTE2YWVhLThjMjMtNDJkMC1hMWU2LTMzMjI3YjUyZmNjZFwiLFxuICAgIFwiY2hhbm5lbF9jb2RlXCI6IFwiRENfQlJJXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiYW1vdW50XCI6IDYwMDAwLFxuICAgIFwiaXNfb3RwX3JlcXVpcmVkXCI6IHRydWUsXG4gICAgXCJiYXNrZXRcIjogbnVsbCxcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJzdGF0dXNcIjogXCJQRU5ESU5HXCIsXG4gICAgXCJtZXRhZGF0YVwiOiBudWxsLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMTRUMDk6Mjk6MDIuNjE0NDQzWlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMTRUMDk6Mjk6MDIuNjE0NDQzWlwiXG59XG5gYGBcblxuIyMjIyBHZXQgRGlyZWN0IERlYml0IFBheW1lbnQgU3RhdHVzIGJ5IElEXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpcmVjdERlYml0XG5cbnBheW1lbnQgPSBEaXJlY3REZWJpdC5nZXRfcGF5bWVudF9zdGF0dXMoXG4gICAgZGlyZWN0X2RlYml0X2lkPVwiZGRweS0zOGVmNTBhOC0wMGYwLTQwMTktOGIyOC05YmNhODFmMmNiZjFcIixcbilcblxucHJpbnQocGF5bWVudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImZhaWx1cmVfY29kZVwiOiBudWxsLFxuICAgIFwib3RwX21vYmlsZV9udW1iZXJcIjogbnVsbCxcbiAgICBcIm90cF9leHBpcmF0aW9uX3RpbWVzdGFtcFwiOiBudWxsLFxuICAgIFwiaWRcIjogXCJkZHB5LTM4ZWY1MGE4LTAwZjAtNDAxOS04YjI4LTliY2E4MWYyY2JmMVwiLFxuICAgIFwicmVmZXJlbmNlX2lkXCI6IFwiZGlyZWN0LWRlYml0LXJlZi0xNTk0NzE3NDU4XCIsXG4gICAgXCJwYXltZW50X21ldGhvZF9pZFwiOiBcInBtLWI2MTE2YWVhLThjMjMtNDJkMC1hMWU2LTMzMjI3YjUyZmNjZFwiLFxuICAgIFwiY2hhbm5lbF9jb2RlXCI6IFwiRENfQlJJXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiYW1vdW50XCI6IDYwMDAwLFxuICAgIFwiaXNfb3RwX3JlcXVpcmVkXCI6IGZhbHNlLFxuICAgIFwiYmFza2V0XCI6IG51bGwsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIlwiLFxuICAgIFwic3RhdHVzXCI6IFwiUEVORElOR1wiLFxuICAgIFwibWV0YWRhdGFcIjogbnVsbCxcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTE0VDA5OjA0OjIwLjAzMTQ1MVpcIixcbiAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTE0VDA5OjA0OjIwLjAzMTQ1MVpcIlxufVxuYGBgXG5cbiMjIyMgR2V0IERpcmVjdCBEZWJpdCBQYXltZW50IFN0YXR1cyBieSBSZWZlcmVuY2UgSURcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlyZWN0RGViaXRcblxucGF5bWVudHMgPSBEaXJlY3REZWJpdC5nZXRfcGF5bWVudF9zdGF0dXNfYnlfcmVmX2lkKFxuICAgIHJlZmVyZW5jZV9pZD1cImRpcmVjdC1kZWJpdC1yZWYtMTU5NDcxNzQ1OFwiLFxuKVxuXG5wcmludChwYXltZW50cylcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcblt7XG4gICAgXCJhbW91bnRcIjogNjAwMDAsXG4gICAgXCJiYXNrZXRcIjogbnVsbCxcbiAgICBcImNoYW5uZWxfY29kZVwiOiBcIkRDX0JSSVwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMTRUMDk6MDQ6MjAuMDMxNDUxWlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXG4gICAgXCJmYWlsdXJlX2NvZGVcIjogbnVsbCxcbiAgICBcImlkXCI6IFwiZGRweS0zOGVmNTBhOC0wMGYwLTQwMTktOGIyOC05YmNhODFmMmNiZjFcIixcbiAgICBcImlzX290cF9yZXF1aXJlZFwiOiBmYWxzZSxcbiAgICBcIm1ldGFkYXRhXCI6IG51bGwsXG4gICAgXCJvdHBfZXhwaXJhdGlvbl90aW1lc3RhbXBcIjogbnVsbCxcbiAgICBcIm90cF9tb2JpbGVfbnVtYmVyXCI6IG51bGwsXG4gICAgXCJwYXltZW50X21ldGhvZF9pZFwiOiBcInBtLWI2MTE2YWVhLThjMjMtNDJkMC1hMWU2LTMzMjI3YjUyZmNjZFwiLFxuICAgIFwicmVmZXJlbmNlX2lkXCI6IFwiZGlyZWN0LWRlYml0LXJlZi0xNTk0NzE3NDU4XCIsXG4gICAgXCJzdGF0dXNcIjogXCJQRU5ESU5HXCIsXG4gICAgXCJ1cGRhdGVkXCI6IFwiMjAyMC0wNy0xNFQwOTowNDoyMC4wMzE0NTFaXCJcbn1dXG5gYGBcblxuIyMjIFZpcnR1YWwgQWNjb3VudCBTZXJ2aWNlXG5cbiMjIyMgQ3JlYXRlIFZpcnR1YWwgQWNjb3VudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBWaXJ0dWFsQWNjb3VudFxuXG52aXJ0dWFsX2FjY291bnQgPSBWaXJ0dWFsQWNjb3VudC5jcmVhdGUoXG4gICAgZXh0ZXJuYWxfaWQ9XCJkZW1vXzE0NzU0NTk3NzU4NzJcIixcbiAgICBiYW5rX2NvZGU9XCJCTklcIixcbiAgICBuYW1lPVwiUmlrYSBTdXRhbnRvXCIsXG4pXG5wcmludCh2aXJ0dWFsX2FjY291bnQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJvd25lcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJkZW1vXzE0NzU0NTk3NzU4NzJcIixcbiAgICBcImJhbmtfY29kZVwiOiBcIkJOSVwiLFxuICAgIFwibWVyY2hhbnRfY29kZVwiOiBcIjg4MDhcIixcbiAgICBcIm5hbWVcIjogXCJSaWthIFN1dGFudG9cIixcbiAgICBcImFjY291bnRfbnVtYmVyXCI6IFwiODgwODk5OTk1NjI3NTY1M1wiLFxuICAgIFwiaXNfc2luZ2xlX3VzZVwiOiBmYWxzZSxcbiAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBcIjIwNTEtMDYtMjJUMTc6MDA6MDAuMDAwWlwiLFxuICAgIFwiaXNfY2xvc2VkXCI6IGZhbHNlLFxuICAgIFwiaWRcIjogXCI1ZWYxNzRjNDhkZDllYTJmYzk3ZDZhMWVcIlxufVxuYGBgXG5cbiMjIyMgR2V0IFZpcnR1YWwgQWNjb3VudCBCYW5rc1xuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgVmlydHVhbEFjY291bnRcblxudmlydHVhbF9hY2NvdW50X2JhbmtzID0gVmlydHVhbEFjY291bnQuZ2V0X2JhbmtzKClcbnByaW50KHZpcnR1YWxfYWNjb3VudF9iYW5rcylcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcblt7XG4gICAgXCJuYW1lXCI6IFwiQmFuayBNYW5kaXJpXCIsXG4gICAgXCJjb2RlXCI6IFwiTUFORElSSVwiXG59LCB7XG4gICAgXCJuYW1lXCI6IFwiQmFuayBOZWdhcmEgSW5kb25lc2lhXCIsXG4gICAgXCJjb2RlXCI6IFwiQk5JXCJcbn0sIHtcbiAgICBcIm5hbWVcIjogXCJCYW5rIFJha3lhdCBJbmRvbmVzaWFcIixcbiAgICBcImNvZGVcIjogXCJCUklcIlxufSwge1xuICAgIFwibmFtZVwiOiBcIkJhbmsgUGVybWF0YVwiLFxuICAgIFwiY29kZVwiOiBcIlBFUk1BVEFcIlxufSwge1xuICAgIFwibmFtZVwiOiBcIkJhbmsgQ2VudHJhbCBBc2lhXCIsXG4gICAgXCJjb2RlXCI6IFwiQkNBXCJcbn1dXG5gYGBcbiMjIyMgR2V0IFZpcnR1YWwgQWNjb3VudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBWaXJ0dWFsQWNjb3VudFxuXG52aXJ0dWFsX2FjY291bnQgPSBWaXJ0dWFsQWNjb3VudC5nZXQoXG4gICAgaWQ9XCI1ZWVjM2EzZThkZDllYTJmYzk3ZDY3MjhcIixcbilcbnByaW50KHZpcnR1YWxfYWNjb3VudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcIm93bmVyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImRlbW9fMTQ3NTQ1OTc3NTg3MlwiLFxuICAgIFwiYmFua19jb2RlXCI6IFwiQk5JXCIsXG4gICAgXCJtZXJjaGFudF9jb2RlXCI6IFwiODgwOFwiLFxuICAgIFwibmFtZVwiOiBcIlJpa2EgU3V0YW50b1wiLFxuICAgIFwiYWNjb3VudF9udW1iZXJcIjogXCI4ODA4OTk5OTE3OTY1NjczXCIsXG4gICAgXCJpc19zaW5nbGVfdXNlXCI6IHRydWUsXG4gICAgXCJzdGF0dXNcIjogXCJBQ1RJVkVcIixcbiAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBcIjIwNTEtMDYtMThUMTc6MDA6MDAuMDAwWlwiLFxuICAgIFwiaXNfY2xvc2VkXCI6IGZhbHNlLFxuICAgIFwiaWRcIjogXCI1ZWVjM2EzZThkZDllYTJmYzk3ZDY3MjhcIlxufVxuYGBgXG5cbiMjIyMgVXBkYXRlIFZpcnR1YWwgQWNjb3VudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBWaXJ0dWFsQWNjb3VudFxuXG52aXJ0dWFsX2FjY291bnQgPSBWaXJ0dWFsQWNjb3VudC51cGRhdGUoXG4gICAgaWQ9XCI1ZWVjM2EzZThkZDllYTJmYzk3ZDY3MjhcIixcbiAgICBpc19zaW5nbGVfdXNlPVRydWUsXG4pXG5wcmludCh2aXJ0dWFsX2FjY291bnQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJvd25lcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJkZW1vXzE0NzU0NTk3NzU4NzJcIixcbiAgICBcImJhbmtfY29kZVwiOiBcIkJOSVwiLFxuICAgIFwibWVyY2hhbnRfY29kZVwiOiBcIjg4MDhcIixcbiAgICBcIm5hbWVcIjogXCJSaWthIFN1dGFudG9cIixcbiAgICBcImFjY291bnRfbnVtYmVyXCI6IFwiODgwODk5OTkxNzk2NTY3M1wiLFxuICAgIFwiaXNfc2luZ2xlX3VzZVwiOiB0cnVlLFxuICAgIFwic3RhdHVzXCI6IFwiUEVORElOR1wiLFxuICAgIFwiZXhwaXJhdGlvbl9kYXRlXCI6IFwiMjA1MS0wNi0xOFQxNzowMDowMC4wMDBaXCIsXG4gICAgXCJpc19jbG9zZWRcIjogZmFsc2UsXG4gICAgXCJpZFwiOiBcIjVlZWMzYTNlOGRkOWVhMmZjOTdkNjcyOFwiXG59XG5gYGBcblxuIyMjIyBHZXQgVmlydHVhbCBBY2NvdW50IFBheW1lbnRcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgVmlydHVhbEFjY291bnRcblxudmlydHVhbF9hY2NvdW50X3BheW1lbnQgPSBWaXJ0dWFsQWNjb3VudC5nZXQoXG4gICAgcGF5bWVudF9pZD1cIjVlZjE4ZWZjYTdkMTBkMWI0ZDYxZmI1MlwiLFxuKVxucHJpbnQodmlydHVhbF9hY2NvdW50KVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwiaWRcIjogXCI1ZWYxOGVmY2Y5Y2UzYjVmOGUxODhlZTRcIixcbiAgICBcInBheW1lbnRfaWRcIjogXCI1ZWYxOGVmY2E3ZDEwZDFiNGQ2MWZiNTJcIixcbiAgICBcImNhbGxiYWNrX3ZpcnR1YWxfYWNjb3VudF9pZFwiOiBcIjVlZjE4ZWNlOGRkOWVhMmZjOTdkNmE4NFwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJWQV9maXhlZC0xNTkyODg5MDM4XCIsXG4gICAgXCJtZXJjaGFudF9jb2RlXCI6IFwiODg2MDhcIixcbiAgICBcImFjY291bnRfbnVtYmVyXCI6IFwiOTk5OTMxNzgzN1wiLFxuICAgIFwiYmFua19jb2RlXCI6IFwiTUFORElSSVwiLFxuICAgIFwiYW1vdW50XCI6IDUwMDAwLFxuICAgIFwidHJhbnNhY3Rpb25fdGltZXN0YW1wXCI6IFwiMjAyMC0wNi0yM1QwNToxMToyNC4wMDBaXCJcbn1cbmBgYFxuXG4jIyMgUmV0YWlsIE91dGxldCBTZXJ2aWNlXG5cbiMjIyMgQ3JlYXRlIEZpeGVkIFBheW1lbnQgQ29kZVxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBSZXRhaWxPdXRsZXRcblxucmV0YWlsX291dGxldCA9IFJldGFpbE91dGxldC5jcmVhdGVfZml4ZWRfcGF5bWVudF9jb2RlKFxuICAgIGV4dGVybmFsX2lkPVwiZGVtb19maXhlZF9wYXltZW50X2NvZGVfMTIzXCIsXG4gICAgcmV0YWlsX291dGxldF9uYW1lPVwiQUxGQU1BUlRcIixcbiAgICBuYW1lPVwiUmlrYSBTdXRhbnRvXCIsXG4gICAgZXhwZWN0ZWRfYW1vdW50PTEwMDAwLFxuKVxucHJpbnQocmV0YWlsX291dGxldClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcIm93bmVyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImRlbW9fZml4ZWRfcGF5bWVudF9jb2RlXzEyM1wiLFxuICAgIFwicmV0YWlsX291dGxldF9uYW1lXCI6IFwiQUxGQU1BUlRcIixcbiAgICBcInByZWZpeFwiOiBcIlRFU1RcIixcbiAgICBcIm5hbWVcIjogXCJSaWthIFN1dGFudG9cIixcbiAgICBcInBheW1lbnRfY29kZVwiOiBcIlRFU1Q1NjE0N1wiLFxuICAgIFwiZXhwZWN0ZWRfYW1vdW50XCI6IDEwMDAwLFxuICAgIFwiaXNfc2luZ2xlX3VzZVwiOiBGYWxzZSxcbiAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBcIjIwNTEtMDYtMjNUMTc6MDA6MDAuMDAwWlwiLFxuICAgIFwiaWRcIjogXCI1ZWYyZjBmOGU3ZjVjMTQwNzcyNzU0OTNcIixcbn1cbmBgYFxuXG4jIyMjIFVwZGF0ZSBGaXhlZCBQYXltZW50IENvZGVcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgUmV0YWlsT3V0bGV0XG5cbnJldGFpbF9vdXRsZXQgPSBSZXRhaWxPdXRsZXQudXBkYXRlX2ZpeGVkX3BheW1lbnRfY29kZShcbiAgICBmaXhlZF9wYXltZW50X2NvZGVfaWQ9XCI1ZWYyZjBmOGU3ZjVjMTQwNzcyNzU0OTNcIixcbiAgICBuYW1lPVwiSm9lIENvbnRpbmlcIixcbilcbnByaW50KHJldGFpbF9vdXRsZXQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJvd25lcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJkZW1vX2ZpeGVkX3BheW1lbnRfY29kZV8xMjNcIixcbiAgICBcInJldGFpbF9vdXRsZXRfbmFtZVwiOiBcIkFMRkFNQVJUXCIsXG4gICAgXCJwcmVmaXhcIjogXCJURVNUXCIsXG4gICAgXCJuYW1lXCI6IFwiSm9lIENvbnRpbmlcIixcbiAgICBcInBheW1lbnRfY29kZVwiOiBcIlRFU1Q1NjE0N1wiLFxuICAgIFwiZXhwZWN0ZWRfYW1vdW50XCI6IDEwMDAwLFxuICAgIFwiaXNfc2luZ2xlX3VzZVwiOiBGYWxzZSxcbiAgICBcImV4cGlyYXRpb25fZGF0ZVwiOiBcIjIwNTEtMDYtMjNUMTc6MDA6MDAuMDAwWlwiLFxuICAgIFwiaWRcIjogXCI1ZWYyZjBmOGU3ZjVjMTQwNzcyNzU0OTNcIixcbn1cbmBgYFxuXG4jIyMjIEdldCBGaXhlZCBQYXltZW50IENvZGVcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgUmV0YWlsT3V0bGV0XG5cbnJldGFpbF9vdXRsZXQgPSBSZXRhaWxPdXRsZXQuZ2V0X2ZpeGVkX3BheW1lbnRfY29kZShcbiAgICBmaXhlZF9wYXltZW50X2NvZGVfaWQ9XCI1ZWYyZjBmOGU3ZjVjMTQwNzcyNzU0OTNcIixcbilcbnByaW50KHJldGFpbF9vdXRsZXQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJvd25lcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJkZW1vX2ZpeGVkX3BheW1lbnRfY29kZV8xMjNcIixcbiAgICBcInJldGFpbF9vdXRsZXRfbmFtZVwiOiBcIkFMRkFNQVJUXCIsXG4gICAgXCJwcmVmaXhcIjogXCJURVNUXCIsXG4gICAgXCJuYW1lXCI6IFwiUmlrYSBTdXRhbnRvXCIsXG4gICAgXCJwYXltZW50X2NvZGVcIjogXCJURVNUNTYxNDdcIixcbiAgICBcImV4cGVjdGVkX2Ftb3VudFwiOiAxMDAwMCxcbiAgICBcImlzX3NpbmdsZV91c2VcIjogRmFsc2UsXG4gICAgXCJleHBpcmF0aW9uX2RhdGVcIjogXCIyMDUxLTA2LTIzVDE3OjAwOjAwLjAwMFpcIixcbiAgICBcImlkXCI6IFwiNWVmMmYwZjhlN2Y1YzE0MDc3Mjc1NDkzXCIsXG59XG5gYGBcblxuIyMjIEludm9pY2UgU2VydmljZVxuXG4jIyMjIENyZWF0ZSBJbnZvaWNlXG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IEludm9pY2VcblxuaW52b2ljZSA9IEludm9pY2UuY3JlYXRlKFxuICAgIGV4dGVybmFsX2lkPVwiaW52b2ljZS0xNTkzNjg0MDAwXCIsXG4gICAgYW1vdW50PTIwMDAwLFxuICAgIHBheWVyX2VtYWlsPVwiY3VzdG9tZXJAZG9tYWluLmNvbVwiLFxuICAgIGRlc2NyaXB0aW9uPVwiSW52b2ljZSBEZW1vICMxMjNcIixcbilcbnByaW50KGludm9pY2UpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJpZFwiOiBcIjVlZmRiMDIxMDQyNWRiNjIwZWMzNWZiM1wiLFxuICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJpbnZvaWNlLTE1OTM2ODQwMDBcIixcbiAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICBcIm1lcmNoYW50X25hbWVcIjogXCJYZW5kaXQmYW1wOyN4Mjc7cyBJbnRlcm5cIixcbiAgICBcIm1lcmNoYW50X3Byb2ZpbGVfcGljdHVyZV91cmxcIjogXCJodHRwczovL3huZC1jb21wYW5pZXMuczMuYW1hem9uYXdzLmNvbS9wcm9kLzE1OTExNjk0NjkxNTJfMjc5LnBuZ1wiLFxuICAgIFwiYW1vdW50XCI6IDIwMDAwLFxuICAgIFwicGF5ZXJfZW1haWxcIjogXCJjdXN0b21lckBkb21haW4uY29tXCIsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkludm9pY2UgRGVtbyAjMTIzXCIsXG4gICAgXCJleHBpcnlfZGF0ZVwiOiBcIjIwMjAtMDctMDNUMTA6MDA6MDEuMTQ4WlwiLFxuICAgIFwiaW52b2ljZV91cmxcIjogXCJodHRwczovL2ludm9pY2Utc3RhZ2luZy54ZW5kaXQuY28vd2ViL2ludm9pY2VzLzVlZmRiMDIxMDQyNWRiNjIwZWMzNWZiM1wiLFxuICAgIFwiYXZhaWxhYmxlX2JhbmtzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJNQU5ESVJJXCIsXG4gICAgICAgICAgICBcImNvbGxlY3Rpb25fdHlwZVwiOiBcIlBPT0xcIixcbiAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjg4NjA4NDY4NTQzMzVcIixcbiAgICAgICAgICAgIFwidHJhbnNmZXJfYW1vdW50XCI6IDIwMDAwLFxuICAgICAgICAgICAgXCJiYW5rX2JyYW5jaFwiOiBcIlZpcnR1YWwgQWNjb3VudFwiLFxuICAgICAgICAgICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiWEVORElUJkFNUDsjWDI3O1MgSU5URVJOXCIsXG4gICAgICAgICAgICBcImlkZW50aXR5X2Ftb3VudFwiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYmFua19jb2RlXCI6IFwiQlJJXCIsXG4gICAgICAgICAgICBcImNvbGxlY3Rpb25fdHlwZVwiOiBcIlBPT0xcIixcbiAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjI2MjE1NTQ4MDc0OTJcIixcbiAgICAgICAgICAgIFwidHJhbnNmZXJfYW1vdW50XCI6IDIwMDAwLFxuICAgICAgICAgICAgXCJiYW5rX2JyYW5jaFwiOiBcIlZpcnR1YWwgQWNjb3VudFwiLFxuICAgICAgICAgICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiWEVORElUJkFNUDsjWDI3O1MgSU5URVJOXCIsXG4gICAgICAgICAgICBcImlkZW50aXR5X2Ftb3VudFwiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiYmFua19jb2RlXCI6IFwiQk5JXCIsXG4gICAgICAgICAgICBcImNvbGxlY3Rpb25fdHlwZVwiOiBcIlBPT0xcIixcbiAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjg4MDg1NDU5NzM4M1wiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJQRVJNQVRBXCIsXG4gICAgICAgICAgICBcImNvbGxlY3Rpb25fdHlwZVwiOiBcIlBPT0xcIixcbiAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjgyMTQ1NjY1OTc0NVwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJCQ0FcIixcbiAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgXCJiYW5rX2FjY291bnRfbnVtYmVyXCI6IFwiMTA3NjYxOTg0NDg1OVwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJhdmFpbGFibGVfcmV0YWlsX291dGxldHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInJldGFpbF9vdXRsZXRfbmFtZVwiOiBcIkFMRkFNQVJUXCIsXG4gICAgICAgICAgICBcInBheW1lbnRfY29kZVwiOiBcIlRFU1QzNDk1NlwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDBcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJhdmFpbGFibGVfZXdhbGxldHNcIjogW10sXG4gICAgXCJzaG91bGRfZXhjbHVkZV9jcmVkaXRfY2FyZFwiOiBmYWxzZSxcbiAgICBcInNob3VsZF9zZW5kX2VtYWlsXCI6IGZhbHNlLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDJUMTA6MDA6MDEuMjg1WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMDJUMTA6MDA6MDEuMjg1WlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIlxufVxuYGBgXG5cbiMjIyMgR2V0IEludm9pY2VcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgSW52b2ljZVxuXG5pbnZvaWNlID0gSW52b2ljZS5nZXQoXG4gICAgaW52b2ljZV9pZD1cIjVlZmRhOGEyMDQyNWRiNjIwZWMzNWY0M1wiLFxuKVxucHJpbnQoaW52b2ljZSlcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImlkXCI6IFwiNWVmZGE4YTIwNDI1ZGI2MjBlYzM1ZjQzXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImludm9pY2UtMTU5MzY4MjA4MFwiLFxuICAgIFwidXNlcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwic3RhdHVzXCI6IFwiRVhQSVJFRFwiLFxuICAgIFwibWVyY2hhbnRfbmFtZVwiOiBcIlhlbmRpdCZhbXA7I3gyNztzIEludGVyblwiLFxuICAgIFwibWVyY2hhbnRfcHJvZmlsZV9waWN0dXJlX3VybFwiOiBcImh0dHBzOi8veG5kLWNvbXBhbmllcy5zMy5hbWF6b25hd3MuY29tL3Byb2QvMTU5MTE2OTQ2OTE1Ml8yNzkucG5nXCIsXG4gICAgXCJhbW91bnRcIjogMjAwMDAsXG4gICAgXCJwYXllcl9lbWFpbFwiOiBcImN1c3RvbWVyQGRvbWFpbi5jb21cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW52b2ljZSBEZW1vICMxMjNcIixcbiAgICBcImV4cGlyeV9kYXRlXCI6IFwiMjAyMC0wNy0wMlQwOTo1NTo0Ny43OTRaXCIsXG4gICAgXCJpbnZvaWNlX3VybFwiOiBcImh0dHBzOi8vaW52b2ljZS1zdGFnaW5nLnhlbmRpdC5jby93ZWIvaW52b2ljZXMvNWVmZGE4YTIwNDI1ZGI2MjBlYzM1ZjQzXCIsXG4gICAgXCJhdmFpbGFibGVfYmFua3NcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImJhbmtfY29kZVwiOiBcIk1BTkRJUklcIixcbiAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgXCJiYW5rX2FjY291bnRfbnVtYmVyXCI6IFwiODg2MDg0Njg1MzExMVwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJCUklcIixcbiAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgXCJiYW5rX2FjY291bnRfbnVtYmVyXCI6IFwiMjYyMTU1NDgwNjI5MlwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJhdmFpbGFibGVfcmV0YWlsX291dGxldHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInJldGFpbF9vdXRsZXRfbmFtZVwiOiBcIkFMRkFNQVJUXCIsXG4gICAgICAgICAgICBcInBheW1lbnRfY29kZVwiOiBcIlRFU1QzNDk1MFwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDBcbiAgICAgICAgfVxuICAgIF0sXG4gICAgXCJhdmFpbGFibGVfZXdhbGxldHNcIjogW10sXG4gICAgXCJzaG91bGRfZXhjbHVkZV9jcmVkaXRfY2FyZFwiOiBmYWxzZSxcbiAgICBcInNob3VsZF9zZW5kX2VtYWlsXCI6IGZhbHNlLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDJUMDk6Mjg6MDIuMTkxWlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMDJUMDk6NTU6NDcuNzk0WlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIlxufVxuYGBgXG5cbiMjIyMgRXhwaXJlIEludm9pY2VcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgSW52b2ljZVxuXG5pbnZvaWNlID0gSW52b2ljZS5leHBpcmUoXG4gICAgaW52b2ljZV9pZD1cIjVlZmRhOGEyMDQyNWRiNjIwZWMzNWY0M1wiLFxuKVxucHJpbnQoaW52b2ljZSlcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcImlkXCI6IFwiNWVmZGE4YTIwNDI1ZGI2MjBlYzM1ZjQzXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImludm9pY2UtMTU5MzY4MjA4MFwiLFxuICAgIFwidXNlcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgIFwic3RhdHVzXCI6IFwiRVhQSVJFRFwiLFxuICAgIFwibWVyY2hhbnRfbmFtZVwiOiBcIlhlbmRpdCZhbXA7I3gyNztzIEludGVyblwiLFxuICAgIFwibWVyY2hhbnRfcHJvZmlsZV9waWN0dXJlX3VybFwiOiBcImh0dHBzOi8veG5kLWNvbXBhbmllcy5zMy5hbWF6b25hd3MuY29tL3Byb2QvMTU5MTE2OTQ2OTE1Ml8yNzkucG5nXCIsXG4gICAgXCJhbW91bnRcIjogMjAwMDAsXG4gICAgXCJwYXllcl9lbWFpbFwiOiBcImN1c3RvbWVyQGRvbWFpbi5jb21cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW52b2ljZSBEZW1vICMxMjNcIixcbiAgICBcImV4cGlyeV9kYXRlXCI6IFwiMjAyMC0wNy0wMlQwOTo1NTo0Ny43OTRaXCIsXG4gICAgXCJpbnZvaWNlX3VybFwiOiBcImh0dHBzOi8vaW52b2ljZS1zdGFnaW5nLnhlbmRpdC5jby93ZWIvaW52b2ljZXMvNWVmZGE4YTIwNDI1ZGI2MjBlYzM1ZjQzXCIsXG4gICAgXCJhdmFpbGFibGVfYmFua3NcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImJhbmtfY29kZVwiOiBcIk1BTkRJUklcIixcbiAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgXCJiYW5rX2FjY291bnRfbnVtYmVyXCI6IFwiODg2MDg0Njg1MzExMVwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJCUklcIixcbiAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgXCJiYW5rX2FjY291bnRfbnVtYmVyXCI6IFwiMjYyMTU1NDgwNjI5MlwiLFxuICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDAsXG4gICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJYRU5ESVQmQU1QOyNYMjc7UyBJTlRFUk5cIixcbiAgICAgICAgICAgIFwiaWRlbnRpdHlfYW1vdW50XCI6IDBcbiAgICAgICAgfVxuICAgIFwiYXZhaWxhYmxlX3JldGFpbF9vdXRsZXRzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJyZXRhaWxfb3V0bGV0X25hbWVcIjogXCJBTEZBTUFSVFwiLFxuICAgICAgICAgICAgXCJwYXltZW50X2NvZGVcIjogXCJURVNUMzQ5NTBcIixcbiAgICAgICAgICAgIFwidHJhbnNmZXJfYW1vdW50XCI6IDIwMDAwXG4gICAgICAgIH1cbiAgICBdLFxuICAgIFwiYXZhaWxhYmxlX2V3YWxsZXRzXCI6IFtdLFxuICAgIFwic2hvdWxkX2V4Y2x1ZGVfY3JlZGl0X2NhcmRcIjogZmFsc2UsXG4gICAgXCJzaG91bGRfc2VuZF9lbWFpbFwiOiBmYWxzZSxcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTAyVDA5OjI4OjAyLjE5MVpcIixcbiAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTAyVDA5OjU1OjQ3Ljc5NFpcIixcbiAgICBcImN1cnJlbmN5XCI6IFwiSURSXCJcbn1cbmBgYFxuXG4jIyMjIExpc3QgQWxsIEludm9pY2VcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgSW52b2ljZVxuXG5pbnZvaWNlcyA9IEludm9pY2UubGlzdF9hbGwoXG4gICAgbGltaXQ9MyxcbilcbnByaW50KGludm9pY2VzKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxuW1xuICAgIC4uLlxuICAgIHtcbiAgICAgICAgXCJpZFwiOiBcIjVlZmRhOGEyMDQyNWRiNjIwZWMzNWY0M1wiLFxuICAgICAgICBcImV4dGVybmFsX2lkXCI6IFwiaW52b2ljZS0xNTkzNjgyMDgwXCIsXG4gICAgICAgIFwidXNlcl9pZFwiOiBcIjVlZDc1MDg2YTg4Mzg1NjE3OGFmYzEyZVwiLFxuICAgICAgICBcInN0YXR1c1wiOiBcIkVYUElSRURcIixcbiAgICAgICAgXCJtZXJjaGFudF9uYW1lXCI6IFwiWGVuZGl0JmFtcDsjeDI3O3MgSW50ZXJuXCIsXG4gICAgICAgIFwibWVyY2hhbnRfcHJvZmlsZV9waWN0dXJlX3VybFwiOiBcImh0dHBzOi8veG5kLWNvbXBhbmllcy5zMy5hbWF6b25hd3MuY29tL3Byb2QvMTU5MTE2OTQ2OTE1Ml8yNzkucG5nXCIsXG4gICAgICAgIFwiYW1vdW50XCI6IDIwMDAwLFxuICAgICAgICBcInBheWVyX2VtYWlsXCI6IFwiY3VzdG9tZXJAZG9tYWluLmNvbVwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW52b2ljZSBEZW1vICMxMjNcIixcbiAgICAgICAgXCJleHBpcnlfZGF0ZVwiOiBcIjIwMjAtMDctMDJUMDk6NTU6NDcuNzk0WlwiLFxuICAgICAgICBcImludm9pY2VfdXJsXCI6IFwiaHR0cHM6Ly9pbnZvaWNlLXN0YWdpbmcueGVuZGl0LmNvL3dlYi9pbnZvaWNlcy81ZWZkYThhMjA0MjVkYjYyMGVjMzVmNDNcIixcbiAgICAgICAgXCJhdmFpbGFibGVfYmFua3NcIjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiYmFua19jb2RlXCI6IFwiTUFORElSSVwiLFxuICAgICAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjg4NjA4NDY4NTMxMTFcIixcbiAgICAgICAgICAgICAgICBcInRyYW5zZmVyX2Ftb3VudFwiOiAyMDAwMCxcbiAgICAgICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICAgICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiWEVORElUJkFNUDsjWDI3O1MgSU5URVJOXCIsXG4gICAgICAgICAgICAgICAgXCJpZGVudGl0eV9hbW91bnRcIjogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcImJhbmtfY29kZVwiOiBcIkJSSVwiLFxuICAgICAgICAgICAgICAgIFwiY29sbGVjdGlvbl90eXBlXCI6IFwiUE9PTFwiLFxuICAgICAgICAgICAgICAgIFwiYmFua19hY2NvdW50X251bWJlclwiOiBcIjI2MjE1NTQ4MDYyOTJcIixcbiAgICAgICAgICAgICAgICBcInRyYW5zZmVyX2Ftb3VudFwiOiAyMDAwMCxcbiAgICAgICAgICAgICAgICBcImJhbmtfYnJhbmNoXCI6IFwiVmlydHVhbCBBY2NvdW50XCIsXG4gICAgICAgICAgICAgICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiWEVORElUJkFNUDsjWDI3O1MgSU5URVJOXCIsXG4gICAgICAgICAgICAgICAgXCJpZGVudGl0eV9hbW91bnRcIjogMFxuICAgICAgICAgICAgfVxuICAgICAgICBcImF2YWlsYWJsZV9yZXRhaWxfb3V0bGV0c1wiOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZXRhaWxfb3V0bGV0X25hbWVcIjogXCJBTEZBTUFSVFwiLFxuICAgICAgICAgICAgICAgIFwicGF5bWVudF9jb2RlXCI6IFwiVEVTVDM0OTUwXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2Zlcl9hbW91bnRcIjogMjAwMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJhdmFpbGFibGVfZXdhbGxldHNcIjogW10sXG4gICAgICAgIFwic2hvdWxkX2V4Y2x1ZGVfY3JlZGl0X2NhcmRcIjogZmFsc2UsXG4gICAgICAgIFwic2hvdWxkX3NlbmRfZW1haWxcIjogZmFsc2UsXG4gICAgICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDJUMDk6Mjg6MDIuMTkxWlwiLFxuICAgICAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTAyVDA5OjU1OjQ3Ljc5NFpcIixcbiAgICAgICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiXG4gICAgfVxuICAgIC4uLlxuXVxuYGBgXG5cbiMjIyBSZWN1cnJpbmcgUGF5bWVudFxuXG4jIyMjIENyZWF0ZSBSZWN1cnJpbmcgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBSZWN1cnJpbmdQYXltZW50XG5cbnJlY3VycmluZ19wYXltZW50ID0gUmVjdXJyaW5nUGF5bWVudC5jcmVhdGVfcmVjdXJyaW5nX3BheW1lbnQoXG4gICAgZXh0ZXJuYWxfaWQ9XCJyZWN1cnJpbmdfMTIzNDVcIixcbiAgICBwYXllcl9lbWFpbD1cInRlc3RAeC5jb1wiLFxuICAgIGRlc2NyaXB0aW9uPVwiVGVzdCBDdXJyaW5nIFBheW1lbnRcIixcbiAgICBhbW91bnQ9MTAwMDAwLFxuICAgIGludGVydmFsPVwiTU9OVEhcIixcbiAgICBpbnRlcnZhbF9jb3VudD0xLFxuKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwic3RhdHVzXCI6IFwiQUNUSVZFXCIsXG4gICAgXCJzaG91bGRfc2VuZF9lbWFpbFwiOiBmYWxzZSxcbiAgICBcIm1pc3NlZF9wYXltZW50X2FjdGlvblwiOiBcIklHTk9SRVwiLFxuICAgIFwicmVjdXJyZW5jZV9wcm9ncmVzc1wiOiAxLFxuICAgIFwicmVjaGFyZ2VcIjogdHJ1ZSxcbiAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwicmVjdXJyaW5nXzEyMzQ1XCIsXG4gICAgXCJwYXllcl9lbWFpbFwiOiBcInRlc3RAeC5jb1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUZXN0IEN1cnJpbmcgUGF5bWVudFwiLFxuICAgIFwiYW1vdW50XCI6IDEwMDAwMCxcbiAgICBcImludGVydmFsXCI6IFwiTU9OVEhcIixcbiAgICBcImludGVydmFsX2NvdW50XCI6IDEsXG4gICAgXCJzdGFydF9kYXRlXCI6IFwiMjAyMC0wNy0wOFQwODoyMjo1NS44MTVaXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE3WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuOTk0WlwiLFxuICAgIFwiaWRcIjogXCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIixcbiAgICBcImxhc3RfY3JlYXRlZF9pbnZvaWNlX3VybFwiOiBcImh0dHBzOi8vaW52b2ljZS1zdGFnaW5nLnhlbmRpdC5jby93ZWIvaW52b2ljZXMvNWYwNTgyNWZmOWY1MmQzZWQyMDRjNjg4XCJcbn1cbmBgYFxuXG4jIyMjIEdldCBSZWN1cnJpbmcgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBSZWN1cnJpbmdQYXltZW50XG5cbnJlY3VycmluZ19wYXltZW50ID0gUmVjdXJyaW5nUGF5bWVudC5nZXRfcmVjdXJyaW5nX3BheW1lbnQoXG4gICAgaWQ9XCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIixcbilcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInN0YXR1c1wiOiBcIkFDVElWRVwiLFxuICAgIFwic2hvdWxkX3NlbmRfZW1haWxcIjogZmFsc2UsXG4gICAgXCJtaXNzZWRfcGF5bWVudF9hY3Rpb25cIjogXCJJR05PUkVcIixcbiAgICBcInJlY3VycmVuY2VfcHJvZ3Jlc3NcIjogMSxcbiAgICBcInJlY2hhcmdlXCI6IHRydWUsXG4gICAgXCJ1c2VyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcInJlY3VycmluZ18xMjM0NVwiLFxuICAgIFwicGF5ZXJfZW1haWxcIjogXCJ0ZXN0QHguY29cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGVzdCBDdXJyaW5nIFBheW1lbnRcIixcbiAgICBcImFtb3VudFwiOiAxMDAwMDAsXG4gICAgXCJpbnRlcnZhbFwiOiBcIk1PTlRIXCIsXG4gICAgXCJpbnRlcnZhbF9jb3VudFwiOiAxLFxuICAgIFwic3RhcnRfZGF0ZVwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE1WlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjIyOjU1LjgxN1pcIixcbiAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjIyOjU1Ljk5NFpcIixcbiAgICBcImlkXCI6IFwiNWYwNTgyNWZmOWY1MmQzZWQyMDRjNjg3XCIsXG4gICAgXCJsYXN0X2NyZWF0ZWRfaW52b2ljZV91cmxcIjogXCJodHRwczovL2ludm9pY2Utc3RhZ2luZy54ZW5kaXQuY28vd2ViL2ludm9pY2VzLzVmMDU4MjVmZjlmNTJkM2VkMjA0YzY4OFwiXG59XG5gYGBcblxuIyMjIyBFZGl0IFJlY3VycmluZyBQYXltZW50XG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IFJlY3VycmluZ1BheW1lbnRcblxucmVjdXJyaW5nX3BheW1lbnQgPSBSZWN1cnJpbmdQYXltZW50LmVkaXRfcmVjdXJyaW5nX3BheW1lbnQoXG4gICAgaWQ9XCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIixcbiAgICBpbnRlcnZhbF9jb3VudD0yLFxuKVxuYGBgXG5cbldpbGwgcmV0dXJuXG5cbmBgYFxue1xuICAgIFwic3RhdHVzXCI6IFwiQUNUSVZFXCIsXG4gICAgXCJzaG91bGRfc2VuZF9lbWFpbFwiOiBmYWxzZSxcbiAgICBcIm1pc3NlZF9wYXltZW50X2FjdGlvblwiOiBcIklHTk9SRVwiLFxuICAgIFwicmVjdXJyZW5jZV9wcm9ncmVzc1wiOiAxLFxuICAgIFwicmVjaGFyZ2VcIjogdHJ1ZSxcbiAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwicmVjdXJyaW5nXzEyMzQ1XCIsXG4gICAgXCJwYXllcl9lbWFpbFwiOiBcInRlc3RAeC5jb1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUZXN0IEN1cnJpbmcgUGF5bWVudFwiLFxuICAgIFwiYW1vdW50XCI6IDEwMDAwMCxcbiAgICBcImludGVydmFsXCI6IFwiTU9OVEhcIixcbiAgICBcImludGVydmFsX2NvdW50XCI6IDIsXG4gICAgXCJzdGFydF9kYXRlXCI6IFwiMjAyMC0wNy0wOFQwODoyMjo1NS44MTVaXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE3WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjQ6NTguMjk1WlwiLFxuICAgIFwiaWRcIjogXCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIlxufVxuYGBgXG5cbiMjIyMgU3RvcCBSZWN1cnJpbmcgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBSZWN1cnJpbmdQYXltZW50XG5cbnJlY3VycmluZ19wYXltZW50ID0gUmVjdXJyaW5nUGF5bWVudC5zdG9wX3JlY3VycmluZ19wYXltZW50KFxuICAgIGlkPVwiNWYwNTgyNWZmOWY1MmQzZWQyMDRjNjg3XCIsXG4pXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJzdGF0dXNcIjogXCJTVE9QUEVEXCIsXG4gICAgXCJzaG91bGRfc2VuZF9lbWFpbFwiOiBmYWxzZSxcbiAgICBcIm1pc3NlZF9wYXltZW50X2FjdGlvblwiOiBcIklHTk9SRVwiLFxuICAgIFwicmVjdXJyZW5jZV9wcm9ncmVzc1wiOiAxLFxuICAgIFwicmVjaGFyZ2VcIjogdHJ1ZSxcbiAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwicmVjdXJyaW5nXzEyMzQ1XCIsXG4gICAgXCJwYXllcl9lbWFpbFwiOiBcInRlc3RAeC5jb1wiLFxuICAgIFwiZGVzY3JpcHRpb25cIjogXCJUZXN0IEN1cnJpbmcgUGF5bWVudFwiLFxuICAgIFwiYW1vdW50XCI6IDEwMDAwMCxcbiAgICBcImludGVydmFsXCI6IFwiTU9OVEhcIixcbiAgICBcImludGVydmFsX2NvdW50XCI6IDIsXG4gICAgXCJzdGFydF9kYXRlXCI6IFwiMjAyMC0wNy0wOFQwODoyMjo1NS44MTVaXCIsXG4gICAgXCJjdXJyZW5jeVwiOiBcIklEUlwiLFxuICAgIFwiY3JlYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE3WlwiLFxuICAgIFwidXBkYXRlZFwiOiBcIjIwMjAtMDctMDhUMDg6MjY6MzIuNDY0WlwiLFxuICAgIFwiaWRcIjogXCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIlxufVxuYGBgXG5cbiMjIyMgUGF1c2UgUmVjdXJyaW5nIFBheW1lbnRcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgUmVjdXJyaW5nUGF5bWVudFxuXG5yZWN1cnJpbmdfcGF5bWVudCA9IFJlY3VycmluZ1BheW1lbnQucGF1c2VfcmVjdXJyaW5nX3BheW1lbnQoXG4gICAgaWQ9XCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIixcbilcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInN0YXR1c1wiOiBcIlBBVVNFRFwiLFxuICAgIFwic2hvdWxkX3NlbmRfZW1haWxcIjogZmFsc2UsXG4gICAgXCJtaXNzZWRfcGF5bWVudF9hY3Rpb25cIjogXCJJR05PUkVcIixcbiAgICBcInJlY3VycmVuY2VfcHJvZ3Jlc3NcIjogMSxcbiAgICBcInJlY2hhcmdlXCI6IHRydWUsXG4gICAgXCJ1c2VyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcInJlY3VycmluZ18xMjM0NVwiLFxuICAgIFwicGF5ZXJfZW1haWxcIjogXCJ0ZXN0QHguY29cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGVzdCBDdXJyaW5nIFBheW1lbnRcIixcbiAgICBcImFtb3VudFwiOiAxMDAwMDAsXG4gICAgXCJpbnRlcnZhbFwiOiBcIk1PTlRIXCIsXG4gICAgXCJpbnRlcnZhbF9jb3VudFwiOiAyLFxuICAgIFwic3RhcnRfZGF0ZVwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE1WlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjIyOjU1LjgxN1pcIixcbiAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjI1OjQ0LjU4MFpcIixcbiAgICBcImlkXCI6IFwiNWYwNTgyNWZmOWY1MmQzZWQyMDRjNjg3XCJcbn1cbmBgYFxuXG4jIyMjIFJlc3VtZSBSZWN1cnJpbmcgUGF5bWVudFxuXG5gYGBweXRob25cbmZyb20geGVuZGl0IGltcG9ydCBSZWN1cnJpbmdQYXltZW50XG5cbnJlY3VycmluZ19wYXltZW50ID0gUmVjdXJyaW5nUGF5bWVudC5yZXN1bWVfcmVjdXJyaW5nX3BheW1lbnQoXG4gICAgaWQ9XCI1ZjA1ODI1ZmY5ZjUyZDNlZDIwNGM2ODdcIixcbilcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInN0YXR1c1wiOiBcIkFDVElWRVwiLFxuICAgIFwic2hvdWxkX3NlbmRfZW1haWxcIjogZmFsc2UsXG4gICAgXCJtaXNzZWRfcGF5bWVudF9hY3Rpb25cIjogXCJJR05PUkVcIixcbiAgICBcInJlY3VycmVuY2VfcHJvZ3Jlc3NcIjogMSxcbiAgICBcInJlY2hhcmdlXCI6IHRydWUsXG4gICAgXCJ1c2VyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcInJlY3VycmluZ18xMjM0NVwiLFxuICAgIFwicGF5ZXJfZW1haWxcIjogXCJ0ZXN0QHguY29cIixcbiAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGVzdCBDdXJyaW5nIFBheW1lbnRcIixcbiAgICBcImFtb3VudFwiOiAxMDAwMDAsXG4gICAgXCJpbnRlcnZhbFwiOiBcIk1PTlRIXCIsXG4gICAgXCJpbnRlcnZhbF9jb3VudFwiOiAyLFxuICAgIFwic3RhcnRfZGF0ZVwiOiBcIjIwMjAtMDctMDhUMDg6MjI6NTUuODE1WlwiLFxuICAgIFwiY3VycmVuY3lcIjogXCJJRFJcIixcbiAgICBcImNyZWF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjIyOjU1LjgxN1pcIixcbiAgICBcInVwZGF0ZWRcIjogXCIyMDIwLTA3LTA4VDA4OjI2OjAzLjA4MlpcIixcbiAgICBcImlkXCI6IFwiNWYwNTgyNWZmOWY1MmQzZWQyMDRjNjg3XCJcbn1cbmBgYFxuXG4jIyMgRGlzYnVyc2VtZW50IFNlcnZpY2VcblxuIyMjIyBDcmVhdGUgRGlzYnVyc2VtZW50XG5cbmBgYHB5dGhvblxuZnJvbSB4ZW5kaXQgaW1wb3J0IERpc2J1cnNlbWVudFxuXG5kaXNidXJzZW1lbnQgPSBEaXNidXJzZW1lbnQuY3JlYXRlKFxuICAgIGV4dGVybmFsX2lkPVwiZGVtb18xNDc1NDU5Nzc1ODcyXCIsXG4gICAgYmFua19jb2RlPVwiQkNBXCIsXG4gICAgYWNjb3VudF9ob2xkZXJfbmFtZT1cIkJvYiBKb25lc1wiLFxuICAgIGFjY291bnRfbnVtYmVyPVwiMTIzMTI0MjMxMVwiLFxuICAgIGRlc2NyaXB0aW9uPVwiUmVpbWJ1cnNlbWVudCBmb3Igc2hvZXNcIixcbiAgICBhbW91bnQ9MTcwMDAsXG4pXG5wcmludChkaXNidXJzZW1lbnQpXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG57XG4gICAgXCJ1c2VyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgXCJleHRlcm5hbF9pZFwiOiBcImRlbW9fMTQ3NTQ1OTc3NTg3MlwiLFxuICAgIFwiYW1vdW50XCI6IDE3MDAwLFxuICAgIFwiYmFua19jb2RlXCI6IFwiQkNBXCIsXG4gICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiQm9iIEpvbmVzXCIsXG4gICAgXCJkaXNidXJzZW1lbnRfZGVzY3JpcHRpb25cIjogXCJSZWltYnVyc2VtZW50IGZvciBzaG9lc1wiLFxuICAgIFwic3RhdHVzXCI6IFwiUEVORElOR1wiLFxuICAgIFwiaWRcIjogXCI1ZWYxYzRmNDBjMmUxNTAwMTdjZTNiOTZcIixcbn1cbmBgYFxuXG4jIyMjIEdldCBEaXNidXJzZW1lbnQgYnkgSURcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlzYnVyc2VtZW50XG5cbmRpc2J1cnNlbWVudCA9IERpc2J1cnNlbWVudC5nZXQoXG4gICAgaWQ9XCI1ZWYxYmVmZWVjYjE2MTAwMTc5ZTFkMDVcIixcbilcbnByaW50KGRpc2J1cnNlbWVudClcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbntcbiAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICBcImV4dGVybmFsX2lkXCI6IFwiZGVtb18xNDc1NDU5Nzc1ODcyXCIsXG4gICAgXCJhbW91bnRcIjogMTcwMDAsXG4gICAgXCJiYW5rX2NvZGVcIjogXCJCQ0FcIixcbiAgICBcImFjY291bnRfaG9sZGVyX25hbWVcIjogXCJCb2IgSm9uZXNcIixcbiAgICBcImRpc2J1cnNlbWVudF9kZXNjcmlwdGlvblwiOiBcIkRpc2J1cnNlbWVudCBmcm9tIFBvc3RtYW5cIixcbiAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICBcImlkXCI6IFwiNWVmMWJlZmVlY2IxNjEwMDE3OWUxZDA1XCJcbn1cbmBgYFxuXG4jIyMjIEdldCBEaXNidXJzZW1lbnQgYnkgRXh0ZXJuYWwgSURcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlzYnVyc2VtZW50XG5cbmRpc2J1cnNlbWVudF9saXN0ID0gRGlzYnVyc2VtZW50LmdldF9ieV9leHRfaWQoXG4gICAgZXh0ZXJuYWxfaWQ9XCJkZW1vXzE0NzU0NTk3NzU4NzJcIixcbilcbnByaW50KGRpc2J1cnNlbWVudF9saXN0KVxuXG5gYGBcblxuV2lsbCByZXR1cm5cblxuYGBgXG5bXG4gICAge1xuICAgICAgICBcInVzZXJfaWRcIjogXCI1ZWQ3NTA4NmE4ODM4NTYxNzhhZmMxMmVcIixcbiAgICAgICAgXCJleHRlcm5hbF9pZFwiOiBcImRlbW9fMTQ3NTQ1OTc3NTg3MlwiLFxuICAgICAgICBcImFtb3VudFwiOiAxNzAwMCxcbiAgICAgICAgXCJiYW5rX2NvZGVcIjogXCJCQ0FcIixcbiAgICAgICAgXCJhY2NvdW50X2hvbGRlcl9uYW1lXCI6IFwiQm9iIEpvbmVzXCIsXG4gICAgICAgIFwiZGlzYnVyc2VtZW50X2Rlc2NyaXB0aW9uXCI6IFwiUmVpbWJ1cnNlbWVudCBmb3Igc2hvZXNcIixcbiAgICAgICAgXCJzdGF0dXNcIjogXCJQRU5ESU5HXCIsXG4gICAgICAgIFwiaWRcIjogXCI1ZWYxYzRmNDBjMmUxNTAwMTdjZTNiOTZcIixcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJ1c2VyX2lkXCI6IFwiNWVkNzUwODZhODgzODU2MTc4YWZjMTJlXCIsXG4gICAgICAgIFwiZXh0ZXJuYWxfaWRcIjogXCJkZW1vXzE0NzU0NTk3NzU4NzJcIixcbiAgICAgICAgXCJhbW91bnRcIjogMTcwMDAsXG4gICAgICAgIFwiYmFua19jb2RlXCI6IFwiQkNBXCIsXG4gICAgICAgIFwiYWNjb3VudF9ob2xkZXJfbmFtZVwiOiBcIkJvYiBKb25lc1wiLFxuICAgICAgICBcImRpc2J1cnNlbWVudF9kZXNjcmlwdGlvblwiOiBcIkRpc2J1cnNlbWVudCBmcm9tIFBvc3RtYW5cIixcbiAgICAgICAgXCJzdGF0dXNcIjogXCJQRU5ESU5HXCIsXG4gICAgICAgIFwiaWRcIjogXCI1ZWYxYmVmZWVjYjE2MTAwMTc5ZTFkMDVcIixcbiAgICB9LFxuICAgIC4uLlxuXVxuYGBgXG4jIyMjIEdldCBBdmFpbGFibGUgQmFua3NcblxuYGBgcHl0aG9uXG5mcm9tIHhlbmRpdCBpbXBvcnQgRGlzYnVyc2VtZW50XG5cbmRpc2J1cnNlbWVudF9iYW5rcyA9IERpc2J1cnNlbWVudC5nZXRfYXZhaWxhYmxlX2JhbmtzKClcbnByaW50KGRpc2J1cnNlbWVudF9iYW5rcylcbmBgYFxuXG5XaWxsIHJldHVyblxuXG5gYGBcbltcbiAgICAuLi5cbiAgICB7XG4gICAgICAgIFwibmFtZVwiOiBcIk1hbmRpcmkgVGFzcGVuIFBvcyAoZm9ybWVybHkgQmFuayBTaW5hciBIYXJhcGFuIEJhbGkpXCIsXG4gICAgICAgIFwiY29kZVwiOiBcIk1BTkRJUklfVEFTUEVOXCIsXG4gICAgICAgIFwiY2FuX2Rpc2J1cnNlXCI6IFRydWUsXG4gICAgICAgIFwiY2FuX25hbWVfdmFsaWRhdGVcIjogVHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJuYW1lXCI6IFwiQmFuayBRTkIgSW5kb25lc2lhIChmb3JtZXJseSBCYW5rIFFOQiBLZXNhd2FuKVwiLFxuICAgICAgICBcImNvZGVcIjogXCJRTkJfSU5ET05FU0lBXCIsXG4gICAgICAgIFwiY2FuX2Rpc2J1cnNlXCI6IFRydWUsXG4gICAgICAgIFwiY2FuX25hbWVfdmFsaWRhdGVcIjogVHJ1ZSxcbiAgICB9XG5dXG5gYGBcbiMjIENvbnRyaWJ1dGluZ1xuXG5Gb3IgYW55IHJlcXVlc3RzLCBidWdzLCBvciBjb21tZW50cywgcGxlYXNlIG9wZW4gYW4gW2lzc3VlXShodHRwczovL2dpdGh1Yi5jb20veGVuZGl0L3hlbmRpdC1weXRob24vaXNzdWVzKSBvciBbc3VibWl0IGEgcHVsbCByZXF1ZXN0XShodHRwczovL2dpdGh1Yi5jb20veGVuZGl0L3hlbmRpdC1weXRob24vcHVsbHMpLlxuXG5UbyBzdGFydCBkZXZlbG9waW5nIG9uIHRoaXMgcmVwb3NpdG9yeSwgeW91IG5lZWQgdG8gaGF2ZSBQb2V0cnkgaW5zdGFsbGVkIGZvciBwYWNrYWdlIGRlcGVuZGVuY3kuIEFmdGVyIHRoYXQsIHlvdSBjYW4gcnVuIGBgYHBvZXRyeSBpbnN0YWxsYGBgIHRvIGluc3RhbGwgdGhlIGRlcGVuZGVuY3kuIFRvIGVudGVyIHRoZSBlbnZpcm9ubWVudCwgcnVuIGBgYHBvZXRyeSBzaGVsbGBgYFxuXG4jIyMgVGVzdHNcblxuIyMjIyBSdW5uaW5nIHRoZSBUZXN0XG5cbk1ha2Ugc3VyZSB0aGUgdGhlIGNvZGUgcGFzc2VzIGFsbCB0ZXN0cy5cblxuUnVuIHRoZSB0ZXN0OlxuXG5gYGBcbnB5dGhvbiAtbSBweXRlc3QgdGVzdHMvXG5gYGBcblxuUnVuIHdpdGggY292ZXJhZ2U6XG5cbmBgYFxucHl0aG9uIC1tIHB5dGVzdCB0ZXN0cy8gLS1jb3Y9eGVuZGl0L1xuYGBgXG5cbiMjIyMgQ3JlYXRpbmcgQ3VzdG9tIEhUVFAgQ2xpZW50XG5cblRvIGNyZWF0ZSB5b3VyIG93biBIVFRQIENsaWVudCwgeW91IGNhbiBkbyBpdCBieSBpbXBsZW1lbnRpbmcgaW50ZXJmYWNlIGF0IGB4ZW5kaXQvbmV0d29yay9odHRwX2NsaWVudF9pbnRlcmZhY2UucHlgLiBPdXIgZGVmYXVsdCBIVFRQIENsaWVudCBhcmUgd3JhcHBlciBvZiBbcmVxdWVzdHNdKGh0dHBzOi8vZ2l0aHViLmNvbS9wc2YvcmVxdWVzdHMpLCB3aGljaCBjYW4gYmUgZm91bmQgYXQgYHhlbmRpdC9uZXR3b3JrL194ZW5kaXRfaHR0cF9jbGllbnQucHlgLiBUbyBhdHRhY2ggaXQgdG8geW91ciBpbnN0YW5jZSwgYWRkIGl0IHRvIHlvdXIgeGVuZGl0IHBhcmFtZXRlci5cblxuYGBgcHl0aG9uXG5pbXBvcnQgeGVuZGl0XG5cbnhlbmRpdF9pbnN0YW5jZSA9ICB4ZW5kaXQuWGVuZGl0KGFwaV9rZXk9JycsIGh0dHBfY2xpZW50PVlvdXJIVFRQQ2xpZW50Q2xhc3MpXG5gYGBcbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL3hlbmRpdC94ZW5kaXQtcHl0aG9uIiw=
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIk1JVCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogInhlbmRpdCIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QveGVuZGl0LyIs
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QveGVuZGl0LyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS94ZW5kaXQveGVuZGl0LXB5dGhvbiIs
ICAgICAgIlJlcG9zaXRvcnkiOiAiaHR0cHM6Ly9naXRodWIuY29tL3hlbmRpdC94ZW5kaXQtcHl0aG9uIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QveGVuZGl0LzAuMS4zLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgInJlcXVlc3RzICg+PTIuMjMuMCw8My4wLjApIiw=
ICAgICAgInB5dGVzdC1jb3YgKD49Mi4xMC4wLDwzLjAuMCki
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjcsPDQuMCIs
ICAgICJzdW1tYXJ5IjogIlhlbmRpdCBSRVNUIEFQSSBDbGllbnQgZm9yIFB5dGhvbiAtIENhcmQsIFZpcnR1YWwgQWNjb3VudCwgSW52b2ljZSwgRGlzYnVyc2VtZW50LCBSZWN1cnJpbmcgUGF5bWVudHMsIFBheW91dCwgRVdhbGxldCwgQmFsYW5jZSwgUmV0YWlsIE91dGxldHMgU2VydmljZXMgaHR0cHM6Ly94ZW5kaXQuZ2l0aHViLmlvL2FwaXJlZmVyZW5jZS8iLA==
ICAgICJ2ZXJzaW9uIjogIjAuMS4zIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxMzAwODY3Niw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjEuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwODIyZmUyMjBlY2JiOWQ1ZTI2ZWZjZTU4MTIyYTY3NDRlZDhlOTYwMjkxYzhhNDFjNjQ5MGFhMGM2ZWYxYTZjIiw=
ICAgICAgICAgICJtZDUiOiAiMWFhMjUyNTJhM2FlMWEyZmJkMmNkYTc0MzI5MmQ2MTAiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiM2Q4N2U4NWQwMWEwMzlhOTZmZDllNTE2NWYyNmQ3ZWM4NmI0MmFjNjk0NDUxY2Y0NDE2MzE3ZTFlYzMxNWZjYyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAieGVuZGl0LTAuMS4zLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxYWEyNTI1MmEzYWUxYTJmYmQyY2RhNzQzMjkyZDYxMCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LDw0LjAiLA==
ICAgICAgICAic2l6ZSI6IDUyMzE2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMC0wNy0xN1QwODo0NjozMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMC0wNy0xN1QwODo0NjozMC4yMjQ2NjRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wOC8yMi9mZTIyMGVjYmI5ZDVlMjZlZmNlNTgxMjJhNjc0NGVkOGU5NjAyOTFjOGE0MWM2NDkwYWEwYzZlZjFhNmMveGVuZGl0LTAuMS4zLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhYzdkNGZmYjU5YTY4NTAzZGE0M2MxOGU0YTZmOWQ0NGM5YzkxODQ2YzM0MjVkOGI2ZWVkNmQyYjViMmNkZDBmIiw=
ICAgICAgICAgICJtZDUiOiAiNTk2ZDJkODdhOGJjNDQyNzFhZjYxY2MzYjFiNzQ5MWYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTA5MmVhOGJlZDBkY2ZkY2Q4ZmNkYTU5Nzk1NGE4YWYxNzFmOTdhZDViNTExYThjNGIxM2RhM2IxY2QyNDAzMSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAieGVuZGl0LTAuMS4zLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1OTZkMmQ4N2E4YmM0NDI3MWFmNjFjYzNiMWI3NDkxZiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LDw0LjAiLA==
ICAgICAgICAic2l6ZSI6IDQ0NTU2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMC0wNy0xN1QwODo0NjozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMC0wNy0xN1QwODo0NjozNy43ODkzMzNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hYy83ZC80ZmZiNTlhNjg1MDNkYTQzYzE4ZTRhNmY5ZDQ0YzljOTE4NDZjMzQyNWQ4YjZlZWQ2ZDJiNWIyY2RkMGYveGVuZGl0LTAuMS4zLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMDgyMmZlMjIwZWNiYjlkNWUyNmVmY2U1ODEyMmE2NzQ0ZWQ4ZTk2MDI5MWM4YTQxYzY0OTBhYTBjNmVmMWE2YyIs
ICAgICAgICAibWQ1IjogIjFhYTI1MjUyYTNhZTFhMmZiZDJjZGE3NDMyOTJkNjEwIiw=
ICAgICAgICAic2hhMjU2IjogIjNkODdlODVkMDFhMDM5YTk2ZmQ5ZTUxNjVmMjZkN2VjODZiNDJhYzY5NDQ1MWNmNDQxNjMxN2UxZWMzMTVmY2Mi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInhlbmRpdC0wLjEuMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMWFhMjUyNTJhM2FlMWEyZmJkMmNkYTc0MzI5MmQ2MTAiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNyw8NC4wIiw=
ICAgICAgInNpemUiOiA1MjMxNiw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjAtMDctMTdUMDg6NDY6MzAiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjAtMDctMTdUMDg6NDY6MzAuMjI0NjY0WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMDgvMjIvZmUyMjBlY2JiOWQ1ZTI2ZWZjZTU4MTIyYTY3NDRlZDhlOTYwMjkxYzhhNDFjNjQ5MGFhMGM2ZWYxYTZjL3hlbmRpdC0wLjEuMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYWM3ZDRmZmI1OWE2ODUwM2RhNDNjMThlNGE2ZjlkNDRjOWM5MTg0NmMzNDI1ZDhiNmVlZDZkMmI1YjJjZGQwZiIs
ICAgICAgICAibWQ1IjogIjU5NmQyZDg3YThiYzQ0MjcxYWY2MWNjM2IxYjc0OTFmIiw=
ICAgICAgICAic2hhMjU2IjogIjkwOTJlYThiZWQwZGNmZGNkOGZjZGE1OTc5NTRhOGFmMTcxZjk3YWQ1YjUxMWE4YzRiMTNkYTNiMWNkMjQwMzEi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInhlbmRpdC0wLjEuMy50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiNTk2ZDJkODdhOGJjNDQyNzFhZjYxY2MzYjFiNzQ5MWYiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNyw8NC4wIiw=
ICAgICAgInNpemUiOiA0NDU1Niw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjAtMDctMTdUMDg6NDY6MzciLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjAtMDctMTdUMDg6NDY6MzcuNzg5MzMzWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYWMvN2QvNGZmYjU5YTY4NTAzZGE0M2MxOGU0YTZmOWQ0NGM5YzkxODQ2YzM0MjVkOGI2ZWVkNmQyYjViMmNkZDBmL3hlbmRpdC0wLjEuMy50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
