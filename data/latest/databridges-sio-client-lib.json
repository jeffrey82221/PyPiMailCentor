ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiBudWxsLA==
ICAgICJhdXRob3JfZW1haWwiOiAiXCJPcHRvbWF0ZSBUZWNobm9sb2dpZXMgUHJpdmF0ZSBMaW1pdGVkLlwiIDx0ZWNoQG9wdG9tYXRlLmlvPiIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIhW10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9iYWRnZS9MaWNlbmNlLUFwYWNoZSUyMDIuMC1ncmVlbi5zdmcpIVtdKGh0dHBzOi8vc2hpZWxkcy5pby9iYWRnZS9weXRob24tKzMuNi1ibHVlKVxuXG4jIERhdGFicmlkZ2VzIFB5dGhvbiBjbGllbnQgTGlicmFyeVxuXG5cbkRhdGFCcmlkZ2VzIG1ha2VzIGl0IGVhc3kgZm9yIGNvbm5lY3RlZCBkZXZpY2VzIGFuZCBhcHBsaWNhdGlvbnMgdG8gY29tbXVuaWNhdGUgd2l0aCBlYWNoIG90aGVyIGluIHJlYWx0aW1lIGluIGFuIGVmZmljaWVudCwgZmFzdCwgcmVsaWFibGUgYW5kIHRydXN0LXNhZmUgbWFubmVyLiBEYXRhYnJpZGdlcyBQeXRob24gY2xpZW50IGxpYnJhcnkgYWxsb3dzIHlvdSB0byBlYXNpbHkgYWRkIHJlYWx0aW1lIGNhcGFiaWxpdGllcyB0byB5b3VyIGFwcGxpY2F0aW9ucyBpbiByZWNvcmQgdGltZS5cblxuIyMgVXNhZ2UgT3ZlcnZpZXdcblxuVGhlIGZvbGxvd2luZyB0b3BpY3MgYXJlIGNvdmVyZWQ6XG4tIFtTdXBwb3J0ZWQgcGxhdGZvcm1zXSgjc3VwcG9ydGVkLXBsYXRmb3Jtcylcbi0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbi0gW0luaXRpYWxpemF0aW9uXSgjaW5pdGlhbGl6YXRpb24pXG4tIFtHbG9iYWwgQ29uZmlndXJhdGlvbl0oI2dsb2JhbC1jb25maWd1cmF0aW9uKVxuICAtIFtSZXF1aXJlZF0oI3JlcXVpcmVkKVxuICAtIFtPcHRpb25hbF0oI29wdGlvbmFsKVxuLSBbQ29ubmVjdGlvbl0oI2Nvbm5lY3Rpb24pXG4tIFtPYmplY3RzXSgjb2JqZWN0cylcbi0gW29iamVjdDpDb25uZWN0aW9uU3RhdGVdKCNvYmplY3Rjb25uZWN0aW9uc3RhdGUpXG4gIC0gW1Byb3BlcnRpZXNdKCNwcm9wZXJ0aWVzKVxuICAtIFtCaW5kIHRvIGNvbm5lY3Rpb25zdGF0ZSBldmVudHNdKCNiaW5kLXRvLWNvbm5lY3Rpb25zdGF0ZS1ldmVudHMpXG4gIC0gW0Z1bmN0aW9uc10oI2Z1bmN0aW9ucylcbi0gW29iamVjdDpDaGFubmVsXSgjb2JqZWN0Y2hhbm5lbClcbiAgLSBbU3Vic2NyaWJlIHRvIENoYW5uZWxdKCNzdWJzY3JpYmUtdG8tY2hhbm5lbClcbiAgLSBbQ29ubmVjdCB0byBDaGFubmVsXSgjY29ubmVjdC10by1jaGFubmVsKVxuICAtIFtDaGFubmVsIEluZm9ybWF0aW9uXSgjY2hhbm5lbC1pbmZvcm1hdGlvbilcbiAgLSBbUHVibGlzaCB0byBDaGFubmVsXSgjcHVibGlzaC10by1jaGFubmVsKVxuICAtIFtCaW5kaW5nIHRvIGV2ZW50c10oI2JpbmRpbmctdG8tZXZlbnRzKVxuICAtIFtTeXN0ZW0gZXZlbnRzIGZvciBjaGFubmVsIG9iamVjdF0oI3N5c3RlbS1ldmVudHMtZm9yLWNoYW5uZWwtb2JqZWN0KVxuLSBbb2JqZWN0OiBycGMgKFJlbW90ZSBQcm9jZWR1cmUgQ2FsbCldKCNvYmplY3QtcnBjLXJlbW90ZS1wcm9jZWR1cmUtY2FsbClcbiAgLSBbQ29ubmVjdCB0byBTZXJ2ZXJdKCNjb25uZWN0LXRvLXNlcnZlcilcbiAgLSBbU2VydmVyIEluZm9ybWF0aW9uXSgjc2VydmVyLWluZm9ybWF0aW9uKVxuICAtIFtFeGVjdXRlIFJlbW90ZSBQcm9jZWR1cmUgQ2FsbF0oI2V4ZWN1dGUtcmVtb3RlLXByb2NlZHVyZS1jYWxsKVxuICAtIFtTeXN0ZW0gZXZlbnRzIGZvciBycGMgb2JqZWN0XSgjc3lzdGVtLWV2ZW50cy1mb3ItcnBjLW9iamVjdClcbi0gW29iamVjdDpDZiAoQ2xpZW50IEZ1bmN0aW9uKV0oI29iamVjdGNmLWNsaWVudC1mdW5jdGlvbilcbiAgLSBbUHJvcGVydGllc10oI3Byb3BlcnRpZXMpXG4gIC0gW1N5c3RlbSBldmVudHMgZm9yIGNmIG9iamVjdF0oI3N5c3RlbS1ldmVudHMtZm9yLWNmLW9iamVjdClcbi0gW0NoYW5nZSBMb2ddKCNjaGFuZ2UtbG9nKVxuLSBbTGljZW5zZV0oI2xpY2Vuc2UpXG5cbiMjIFN1cHBvcnRlZCBwbGF0Zm9ybXNcblxuU3VwcG9ydHMgUHl0aG9uIHZlcnNpb25zICArMy42XG5cbiMjIEluc3RhbGxhdGlvblxuXG5Zb3UgY2FuIHVzZSBwaXAgcGFja2FnZSBtYW5hZ2VyIHRvIGluc3RhbGwgdGhlIHBhY2thZ2UuXG5cbmBgYGJhc2hcbnBpcDMgaW5zdGFsbCBkYXRhYnJpZGdlc19zaW9fY2xpZW50X2xpYlxuYGBgXG5cbj4gTm90ZSA6IERhdGFicmlkZ2VzIGxpYnJhcnkgdXNlcyBzb2NrZXQuaW8gZm9yIHdlYnNvY2tldCBwcm90b2NvbCBtYW5hZ2VtZW50LlxuXG4jIyBJbml0aWFsaXphdGlvblxuXG5gYGBweXRob25cbmZyb20gZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWIgaW1wb3J0IGRCcmlkZ2VzXG5mcm9tIGRhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliLmV4Y2VwdGlvbnMgaW1wb3J0IGRCRXJyb3JcbmRicmlkZ2UgPSBkQnJpZGdlcygpXG5gYGBcblxuIyMgR2xvYmFsIENvbmZpZ3VyYXRpb25cblxuIyMjIFJlcXVpcmVkXG5cblRoZSBmb2xsb3dpbmcgaXMgdGhlIGxpc3Qgb2YgcmVxdWlyZWQgY29ubmVjdGlvbiBwcm9wZXJ0aWVzIGJlZm9yZSBjb25uZWN0aW5nIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsuXG5cbmBgYHB5dGhvblxuZGJyaWRnZS5hdXRoX3VybCA9ICdVUkwnXG5kYnJpZGdlLmFwcGtleSA9ICdBUFBfS0VZJ1xuYGBgXG5cbllvdSBuZWVkIHRvIHJlcGxhY2UgYFVSTGAgYW5kIGBBUFBfS0VZYCB3aXRoIHRoZSBhY3R1YWwgVVJMIGFuZCBBcHBsaWNhdGlvbiBLZXkuXG5cbnwgUHJvcGVydGllcyB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEV4Y2VwdGlvbnMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYGF1dGhfdXJsYCB8ICooc3RyaW5nKSogQXV0aGVudGljYXRpb24gdXJsIGZyb20gIFtkYXRhQnJpZGdlcyBkYXNoYm9hcmRdKGh0dHBzOi8vZGFzaGJvYXJkLmRhdGFicmlkZ2VzLmlvLykuIHwgYHNvdXJjZTogREJMSUJfQ09OTkVDVGAgPGJyIC8+YGNvZGU6IElOVkFMSURfVVJMYCAgICAgICAgfFxufCBgYXBwa2V5YCAgIHwgKihzdHJpbmcpKiBBcHBsaWNhdGlvbiBLZXkgZnJvbSAgW2RhdGFCcmlkZ2VzIGRhc2hib2FyZF0oaHR0cHM6Ly9kYXNoYm9hcmQuZGF0YWJyaWRnZXMuaW8vKS4gfCBgc291cmNlOiBEQkxJQl9DT05ORUNUYCA8YnIgLz5gY29kZTogSU5WQUxJRF9BVVRIX1BBUkFNYCB8XG5cbiMjIyBPcHRpb25hbFxuXG5UaGUgZm9sbG93aW5nIGlzIHRoZSBsaXN0IG9mIG9wdGlvbmFsIGNvbm5lY3Rpb24gcHJvcGVydGllcyBiZWZvcmUgY29ubmVjdGluZyB0byBkYXRhQnJpZGdlcyBuZXR3b3JrLlxuXG5gYGBweXRob25cbmRicmlkZ2UubWF4UmVjb25uZWN0aW9uUmV0cmllcyA9IDEwXG5kYnJpZGdlLm1heFJlY29ubmVjdGlvbkRlbGF5ID0gMTIwMDAwIFxuZGJyaWRnZS5taW5SZWNvbm5lY3Rpb25EZWxheSA9IDEwMDAgKyBNYXRoLnJhbmRvbSgpICogNDAwMFxuZGJyaWRnZS5yZWNvbm5lY3Rpb25EZWxheUdyb3dGYWN0b3IgPSAxLjNcbmRicmlkZ2UubWluVXB0aW1lID0gMjAwXG5kYnJpZGdlLmNvbm5lY3Rpb25UaW1lb3V0ID0gMTAwMDBcbmRicmlkZ2UuYXV0b1JlY29ubmVjdCA9IFRydWVcbmRicmlkZ2UuY2YuZW5hYmxlID0gRmFsc2VcdFxuYGBgXG5cbnwgUHJvcGVydGllcyAgICAgICAgICAgICAgICAgICAgfCBEZWZhdWx0ICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgbWF4UmVjb25uZWN0aW9uRGVsYXlgICAgICAgICB8IGAxMGAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKihpbnRlZ2VyKSogVGhlIG1heGltdW0gZGVsYXkgYmV0d2VlbiB0d28gcmVjb25uZWN0aW9uIGF0dGVtcHRzIGluIHNlY29uZHMuIHxcbnwgYG1pblJlY29ubmVjdGlvbkRlbGF5YCAgICAgICAgfCBgMTAwMCArIE1hdGgucmFuZG9tKCkgKiA0MDAwYCB8ICooaW50ZWdlcikqIFRoZSBpbml0aWFsIGRlbGF5IGJlZm9yZSByZWNvbm5lY3Rpb24gaW4gbWlsbGlzZWNvbmRzIChhZmZlY3RlZCBieSB0aGUgYHJlY29ubmVjdGlvbkRlbGF5R3Jvd0ZhY3RvcmAgdmFsdWUpLiB8XG58IGByZWNvbm5lY3Rpb25EZWxheUdyb3dGYWN0b3JgIHwgYDEuM2AgICAgICAgICAgICAgICAgICAgICAgICAgfCAqKGZsb2F0KSogVGhlIHJhbmRvbWl6YXRpb24gZmFjdG9yIHVzZWQgd2hlbiByZWNvbm5lY3RpbmcgKHNvIHRoYXQgdGhlIGNsaWVudHMgZG8gbm90IHJlY29ubmVjdCBhdCB0aGUgZXhhY3Qgc2FtZSB0aW1lIGFmdGVyIGEgc2VydmVyIGNyYXNoKS4gfFxufCBgbWluVXB0aW1lYCAgICAgICAgICAgICAgICAgICB8IGAyMDBgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKihpbnRlZ2VyKSogVXB0aW1lIGJlZm9yZSBgY29ubmVjdGVkYCBldmVudCBpcyB0cmlnZ2VyZWQsIHZhbHVlIGluIG1pbGxpc2Vjb25kcy4gfFxufCBgY29ubmVjdGlvblRpbWVvdXRgICAgICAgICAgICB8IGAxMDAwMGAgICAgICAgICAgICAgICAgICAgICAgIHwgKihpbnRlZ2VyKSogTnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGUgYXBwbGljYXRpb24gd2lsbCB3YWl0IGZvciBhIGNvbm5lY3Rpb24gdG8gYmUgZXN0YWJsaXNoZWQuIElmIGl0IGZhaWxzIGl0IHdpbGwgZW1pdCBhIGBjb25uZWN0aW9uX2Vycm9yYCBldmVudC4gfFxufCBgbWF4UmVjb25uZWN0aW9uUmV0cmllc2AgICAgICB8IGAxMGAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKihpbnRlZ2VyKSogVGhlIG51bWJlciBvZiByZWNvbm5lY3Rpb24gYXR0ZW1wdHMgYmVmb3JlIGdpdmluZyB1cC4gfFxufCBgYXV0b1JlY29ubmVjdGAgICAgICAgICAgICAgICB8IGB0cnVlYCAgICAgICAgICAgICAgICAgICAgICAgIHwgKihib29sZWFuKikgSWYgZmFsc2UsIGFwcGxpY2F0aW9uIHdpbGwgbm90IGF0dGVtcHQgcmVjb25uZWN0aW5nLiB8XG58IGBjZi5lbmFibGVgICAgICAgICAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICAgICAgICAgICAgICAgICAgfCAqKGJvb2xlYW4pKiBFbmFibGUgZXhwb3NpbmcgKmNsaWVudCBmdW5jdGlvbiogZm9yIHRoaXMgY29ubmVjdGlvbi4gKENoZWNrICpDbGllbnQgRnVuY3Rpb24qIHNlY3Rpb24gZm9yIGRldGFpbHMuKSB8XG58IGBhY2Nlc3NfdG9rZW5gICAgICAgICAgICAgICAgIHwgYGZ1bmN0aW9uYCAgICAgICAgICAgICAgICAgICAgfCAqKGZ1bmN0aW9uKSogSWYgeW91IG5lZWQgY3VzdG9tIGF1dGhvcml6YXRpb24gYmVoYXZpb3IgZm9yICBnZW5lcmF0aW5nIHNpZ25hdHVyZXMgZm9yIHByaXZhdGUvIHByZXNlbmNlLyBzeXN0ZW0gY2hhbm5lbHMvcnBjIGZ1bmN0aW9ucywgeW91IGNhbiBwcm92aWRlIHlvdXIgb3duIGBhY2Nlc3NfdG9rZW5gIGZ1bmN0aW9uLiB8XG5cbiMjIENvbm5lY3Rpb25cblxuT25jZSB0aGUgcHJvcGVydGllcyBhcmUgc2V0LCB1c2UgYGNvbm5lY3QoKWAgZnVuY3Rpb24gdG8gY29ubmVjdCB0byBkYXRhQnJpZGdlcyBOZXR3b3JrLlxuXG5gYGBweXRob25cbnRyeTpcbiAgICBhd2FpdCBkYnJpZGdlLmNvbm5lY3QoKVxuZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuXHRwcmludChcInNvdXJjZTogezB9ICwgIGNvZGU6IHsxfSwgbWVzc2FnZTogezJ9XCIuZm9ybWF0KGUuc291cmNlICwgZS5jb2RlICwgZS5tZXNzYWdlKSlcbmBgYFxuXG4jIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgfCBDb2RlICAgICAgICAgICAgICAgICAgICAgICAgIHwgTWVzc2FnZSAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTElCX0NPTk5FQ1QgfCBJTlZBTElEX1VSTCAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFZhbHVlIG9mIGBkYnJpZGdlLmF1dGhfdXJsYCBpcyBub3QgYSB2YWxpZCBkYXRhQnJpZGdlcyBhdXRoZW50aWNhdGlvbiBVUkwuIHxcbnwgREJMSUJfQ09OTkVDVCB8IElOVkFMSURfQVVUSF9QQVJBTSAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVmFsdWUgb2YgYGRicmlkZ2UuYXBwa2V5YCBpcyBub3QgYSB2YWxpZCBkYXRhQnJpZGdlcyBhcHBsaWNhdGlvbiBrZXkuIHxcbnwgREJMSUJfQ09OTkVDVCB8IElOVkFMSURfQUNDRVNTVE9LRU5fRlVOQ1RJT04gfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSWYgKlwiY2FsbGJhY2sgZnVuY3Rpb25cIiogaXMgbm90IGRlY2xhcmVkIGZvciBhdXRoZW50aWNhdGlvbiAqKm9ubHkqKiB3aGlsZSB1c2luZyAgKipwcml2YXRlLCBwcmVzZW5jZSBvciBzeXN0ZW0qKiBjaGFubmVsL1JQQyBmdW5jdGlvbnMuICooQ2hlY2sgQ2hhbm5lbCBvciBSUEMgc2VjdGlvbiBmb3IgZGV0YWlscy4pKiB8XG58IERCTElCX0NPTk5FQ1QgfCBIVFRQXyAgICAgICAgICAgICAgICAgICAgICAgIHwgSFRUUCBwcm90b2NvbCByZXBvcnRlZCBtZXNzYWdlLiB8IEhUVFAgRXJyb3JzIHJldHVybmVkIGR1cmluZyBhdXRoZW50aWNhdGlvbiBwcm9jZXNzLiAqKipIVFRQIEVycm9yIGNvZGUqKiogd2lsbCBiZSBjb25jYXRlbmF0ZWQgd2l0aCBgSFRUUF9gIGluIHRoZSBgZXJyLmNvZGVgLiBgZWcuIEhUVFBfNTAxYCB8XG58IERCTElCX0NPTk5FQ1QgfCBJTlZBTElEX0NMSUVOVEZVTkNUSU9OICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElmICpcImNhbGxiYWNrIGZ1bmN0aW9uXCIqIGlzIG5vdCBkZWNsYXJlZCBmb3IgY2xpZW50IGZ1bmN0aW9uICoqb3IqKiBgdHlwZW9mKClgIHZhcmlhYmxlIGRlZmluZWQgaXMgbm90IGEgKlwiZnVuY3Rpb25cIiouIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGlmIGNsaWVudEZ1bmN0aW9uIGlzIGVuYWJsZWQuICooQ2hlY2sgQ2xpZW50IEZ1bmN0aW9uIHNlY3Rpb24gZm9yIGRldGFpbHMuKSogfFxuXG4jIyMjIHNlc3Npb25pZCAqKHN0cmluZykqXG5cbmBgYHB5dGhvblxucHJpbnQoXCJzZXNzaW9uaWQ6IHswfVwiLmZvcm1hdCggZGJyaWRnZS5zZXNzaW9uaWQpKVxuYGBgXG5cbk1ha2luZyBhIGNvbm5lY3Rpb24gcHJvdmlkZXMgdGhlIGFwcGxpY2F0aW9uIHdpdGggYSBuZXcgYHNlc3Npb25pZGAgdGhhdCBpcyBhc3NpZ25lZCBieSB0aGUgc2VydmVyLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGRpc3Rpbmd1aXNoIHRoZSBhcHBsaWNhdGlvbidzIG93biBldmVudHMuIEEgY2hhbmdlIG9mIHN0YXRlIG1pZ2h0IG90aGVyd2lzZSBiZSBkdXBsaWNhdGVkIGluIHRoZSBhcHBsaWNhdGlvbi4gSXQgaXMgYWxzbyBzdG9yZWQgd2l0aGluIHRoZSBjb25uZWN0aW9uLCBhbmQgdXNlZCBhcyBhIHRva2VuIGZvciBnZW5lcmF0aW5nIHNpZ25hdHVyZXMgZm9yIHByaXZhdGUvcHJlc2VuY2Uvc3lzdGVtIGNoYW5uZWxzL3JwYyBmdW5jdGlvbnMuXG5cbiMjIyMgZGlzY29ubmVjdCAqKGZ1bmN0aW9uKSpcblxuVG8gKipjbG9zZSBhIGNvbm5lY3Rpb24qKiB1c2UgZGlzY29ubmVjdCBmdW5jdGlvbi4gV2hlbiBhIGNvbm5lY3Rpb24gaGFzIGJlZW4gY2xvc2VkIGV4cGxpY2l0bHksIG5vIGF1dG9tYXRpYyByZWNvbm5lY3Rpb24gd2lsbCBoYXBwZW4uXG5cbmBgYHB5dGhvblxuYXdhaXQgZGJyaWRnZS5kaXNjb25uZWN0KClcbmBgYFxuXG4jIyBPYmplY3RzXG5cbnwgT2JqZWN0ICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBjb25uZWN0aW9uc3RhdGVgIHwgY29ubmVjdGlvbnN0YXRlIG9iamVjdCBleHBvc2UgcHJvcGVydGllcywgZnVuY3Rpb25zIGFuZCBldmVudHMgdG8gbW9uaXRvciBhbmQgbWFuYWdlIHRoZSBoZWFsdGggb2YgZGF0YUJyaWRnZXMgbmV0d29yayBjb25uZWN0aW9uLiB8XG58IGBjaGFubmVsYCAgICAgICAgIHwgY2hhbm5lbCBvYmplY3QgZXhwb3NlcyAqKnRydXN0LXNhZmUqKiBmbGV4aWJsZSBQdWIvU3ViIG1lc3NhZ2luZyBwcm9wZXJ0aWVzLCBmdW5jdGlvbnMgYW5kIGV2ZW50cyB0byBidWlsZCByZWFsdGltZSBldmVudCBtZXNzYWdpbmcgLyBldmVudCBkcml2ZW4gYXBwbGljYXRpb25zIGF0IHNjYWxlLiB8XG58IGBycGNgICAgICAgICAgICAgIHwgcnBjIG9iamVjdCBleHBvc2VzICoqdHJ1c3Qtc2FmZSoqIHByb3BlcnRpZXMsIGZ1bmN0aW9ucyBhbmQgZXZlbnRzIHRvIHByb3ZpZGUgcmVsaWFibGUgdHdvLXdheSBtZXNzYWdpbmcgYmV0d2VlbiBtdWx0aXBsZSBlbmRwb2ludHMgYWxsb3dpbmcgeW91IHRvIGJ1aWxkIHNvcGhpc3RpY2F0ZWQgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucy4gfFxufCBgY2ZgICAgICAgICAgICAgICB8IENGIChDbGllbnQtZnVuY3Rpb24pIG9iamVjdCBpcyBhIHNwZWNpYWwgcHVycG9zZSBSUEMgaW1wbGVtZW50YXRpb24gdG8gYnVpbGQgY29tbWFuZCBhbmQgY29udHJvbCBhcHBsaWNhdGlvbnMuIENGIG9iamVjdCBleHBvc2VzIHByb3BlcnRpZXMsIGZ1bmN0aW9ucyBhbmQgZXZlbnRzIGZvciBjb21tYW5kIGFuZCBjb250cm9sIHNlcnZlciBhcHBsaWNhdGlvbnMgdG8gc2VuZCBtZXNzYWdlcyB0byBkZXZpY2VzIGFuZCBhcHBsaWNhdGlvbiB1c2luZyBkYXRhQnJpZGdlcyBsaWJyYXJ5IGluICoqdHJ1c3Qtc2FmZSBtYW5uZXIgKiosIGJ1aWxkIHNtYXJ0IHVwZGF0ZSBjb25maWd1cmF0aW9uIHN5c3RlbSBhbmQgaW1wbGVtZW50ICoqdHJ1c3Qtc2FmZSAqKiBhY3Rpb25zIGZvciByZW1vdGUgYW5kIGF1dG9tYXRlZCBtYW5hZ2VtZW50LiB8XG5cblxuXG4jIyBvYmplY3Q6Q29ubmVjdGlvblN0YXRlXG5cbkNvbm5lY3Rpb25zdGF0ZSBvYmplY3QgZXhwb3NlIHByb3BlcnRpZXMsIGZ1bmN0aW9ucyBhbmQgZXZlbnRzIHRvIG1vbml0b3IgYW5kIG1hbmFnZSB0aGUgaGVhbHRoIG9mIGRhdGFCcmlkZ2VzIG5ldHdvcmsgY29ubmVjdGlvbi5cblxuIyMjIFByb3BlcnRpZXNcblxuVGhlIGZvbGxvd2luZyBpcyB0aGUgbGlzdCBvZiBjb25uZWN0aW9uIHN0YXRlIHByb3BlcnRpZXMuXG5cbmBgYHB5dGhvblxucHJpbnQoZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuc3RhdGUpXG5wcmludChkYnJpZGdlLmNvbm5lY3Rpb25zdGF0ZS5pc2Nvbm5lY3RlZClcbnByaW50KGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLnJ0dG1zKVxucHJpbnQoZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUucmVjb25uZWN0X2F0dGVtcHQpXG5gYGBcblxufCBQcm9wZXJ0eSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYGNvbm5lY3Rpb25zdGF0ZS5zdGF0ZWAgICAgICAgICAgICAgfCAqKFN0cmluZykqIEN1cnJlbnQgc3RhdGUgb2YgZGF0YUJyaWRnZXMgbmV0d29yayBjb25uZWN0aW9uIC4gTGlzdCBvZiBSZXR1cm4gVmFsdWVzIGFyZSBkZXRhaWxlZCBiZWxvdy4gfFxufCBgY29ubmVjdGlvbnN0YXRlLmlzY29ubmVjdGVkYCAgICAgICB8ICooQm9vbGVhbikqIFRvIHZlcmlmeSBpZiB0aGUgYXBwbGljYXRpb24gaXMgc3RpbGwgY29ubmVjdGVkIHRvIHRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrLiB8XG58IGBjb25uZWN0aW9uc3RhdGUucnR0bXNgICAgICAgICAgICAgIHwgKihpbnRlZ2VyKSogTGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHdoZXJlIHlvdXIgYXBwbGljYXRpb24gaXMgY29ubmVjdGVkLiB8XG58IGBjb25uZWN0aW9uc3RhdGUucmVjb25uZWN0X2F0dGVtcHRgIHwgKGludGVnZXIpIE51bWJlciBvZiByZWNvbm5lY3Rpb24gYXR0ZW1wdGVkIGFzIG9mIG5vdy4gICAgICAgIHxcblxuIyMjIyMgY29ubmVjdGlvbnN0YXRlLnN0YXRlXG5cbnwgUmV0dXJuIFZhbHVlcyAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgKmNvbm5lY3RpbmcqICAgICAgIHwgWW91ciBhcHBsaWNhdGlvbiBpcyBub3cgYXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIHxcbnwgKmNvbm5lY3RlZCogICAgICAgIHwgVGhlIGNvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBvcGVuIGFuZCBhdXRoZW50aWNhdGVkIHdpdGggeW91ciBgYXBwa2V5YC4gfFxufCAqY29ubmVjdGlvbl9icmVhayogfCBJbmRpY2F0ZXMgYSBuZXR3b3JrIGRpc2Nvbm5lY3Rpb24gYmV0d2VlbiBhcHBsaWNhdGlvbiBhbmQgZGF0YUJyaWRnZXMgbmV0d29yay4gVGhlIGxpYnJhcnkgd2lsbCBpbml0aWF0ZSBhbiBhdXRvbWF0aWMgcmVjb25uZWN0aW9uLCBpZiB0aGUgcmVjb25uZWN0aW9uIHByb3BlcnR5IGlzIHNldCBhcyB0cnVlLiB8XG58ICpjb25uZWN0X2Vycm9yKiAgICB8IFRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrIGNvbm5lY3Rpb24gd2FzIHByZXZpb3VzbHkgY29ubmVjdGVkIGFuZCBoYXMgbm93IGVycm9yZWQgYW5kIGNsb3NlZC4gfFxufCAqZGlzY29ubmVjdGVkKiAgICAgfCBUaGUgYXBwbGljYXRpb24gaXMgbm93IGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrLiBUaGUgYXBwbGljYXRpb24gd2lsbCB0aGFuIG5lZWQgdG8gaW5pdGlhdGUgZnJlc2ggY29ubmVjdGlvbiBhdHRlbXB0IGFnYWluLiB8XG58ICpyZWNvbm5lY3RpbmcqICAgICB8IFlvdXIgYXBwbGljYXRpb24gaXMgbm93IGF0dGVtcHRpbmcgdG8gcmVjb25uZWN0IHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgYXMgcGVyIHByb3BlcnRpZXMgc2V0IGZvciByZWNvbm5lY3Rpb24uIHxcbnwgKnJlY29ubmVjdF9lcnJvciogIHwgUmVjb25uZWN0aW9uIGF0dGVtcHQgaGFzIGVycm9yZWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgKnJlY29ubmVjdF9mYWlsZWQqIHwgVGhlIGFwcGxpY2F0aW9uIHdpbGwgZW50ZXIgcmVjb25uZWN0X2ZhaWxlZCBzdGF0ZSB3aGVuIGFsbCB0aGUgcmVjb25uZWN0aW9uIGF0dGVtcHRzIGhhdmUgYmVlbiBleGhhdXN0ZWQgdW5zdWNjZXNzZnVsbHkuIFRoZSBhcHBsaWNhdGlvbiBpcyBub3cgZGlzY29ubmVjdGVkIGZyb20gdGhlIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIFRoZSBhcHBsaWNhdGlvbiB3aWxsIHRoYW4gbmVlZCB0byBpbml0aWF0ZSBmcmVzaCBjb25uZWN0aW9uIGF0dGVtcHQgYWdhaW4gfFxufCAqcmVjb25uZWN0ZWQqICAgICAgfCAqVGhlIGFwcGxpY2F0aW9uIGhhcyBzdWNjZXNzZnVsbHkgcmUtY29ubmVjdGVkIHRvIHRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrLCogVGhpcyBzdGF0ZSB3aWxsIGZvbGxvdyBgY29ubmVjdF9lcnJvcmAgKipvcioqIGByZWNvbm5lY3RfZXJyb3JgLiB8XG5cbiMjIyBCaW5kIHRvIGNvbm5lY3Rpb25zdGF0ZSBldmVudHNcblxuQXBhcnQgZnJvbSByZXRyaWV2ZWluZyBzdGF0ZSBvZiBhIGRCcmlnZSBjb25uZWN0aW9uLCBhcHBsaWNhdGlvbiBjYW4gYmluZCB0byBjb25uZWN0aW9uc3RhdGUgZXZlbnRzLlxuXG5Zb3UgY2FuIHVzZSB0aGUgZm9sbG93aW5nIG1ldGhvZHMgb24gY29ubmVjdGlvbnN0YXRlIG9iamVjdCB0byBiaW5kIHRvIGV2ZW50cy5cblxuYGBgcHl0aG9uXG5kYnJpZGdlLmNvbm5lY3Rpb25zdGF0ZS5iaW5kKGV2ZW50TmFtZSwgY2FsbGFibGUpXG5kYnJpZGdlLmNvbm5lY3Rpb25zdGF0ZS51bmJpbmQoZXZlbnROYW1lKVxuZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUudW5iaW5kKClcbmBgYFxuXG5gYmluZCgpYCBvbiBgZXZlbnROYW1lYCBoYXMgY2FsbGJhY2sgZnVuY3Rpb25zIHRvIGJlIGRlZmluZWQgd2hlcmUgeW91IGNhbiB3cml0ZSB5b3VyIG93biBjb2RlIGFzIHBlciByZXF1aXJlbWVudC5cblxuVG8gc3RvcCBsaXN0ZW5pbmcgdG8gZXZlbnRzIHVzZSBgdW5iaW5kKGV2ZW50TmFtZSlgIGZ1bmN0aW9uLlxuXG5UbyBzdG9wIGxpc3RlbmluZyB0byBhbGwgZXZlbnRzIHVzZSBgdW5iaW5kKClgICpbd2l0aG91dCBldmVudE5hbWVdKiBmdW5jdGlvbi5cblxuQmVsb3cgYXJlIGxpYnJhcnkgZXZlbnRzIHdoaWNoIGNhbiBiZSBiaW5kIHRvIHJlY2VpdmUgaW5mb3JtYXRpb24gYWJvdXQgZGF0YUJyaWRnZXMgbmV0d29yay5cblxuIyMjIyBTeXN0ZW0gZXZlbnRzIGZvciBjb25uZWN0aW9uc3RhdGUgb2JqZWN0XG5cbmBgYHB5dGhvblxuYXN5bmMgZGVmIGNvbm5lY3RpbmcoKTpcbiAgICBwcmludChcImNvbm5lY3RpbmdcIilcblxuYXN5bmMgZGVmIHJlY29ubmVjdGluZygpOlxuICAgIHByaW50KFwicmVjb25uZWN0aW5nXCIpXG5cbmFzeW5jIGRlZiBjb25uZWN0aW9uX2JyZWFrKCk6XG4gICAgcHJpbnQoXCJjb25uZWN0aW9uX2JyZWFrXCIpXG5cbmFzeW5jIGRlZiBzdGF0ZV9jaGFuZ2UoIGRhdGEpOlxuICAgIHByaW50KFwic3RhdGVfY2hhbmdlOlwiLCBkYXRhKVxuXG5hc3luYyBkZWYgY29ubmVjdF9lcnJvciggZGF0YSk6XG4gICAgaWYgaXNpbnN0YW5jZShkYXRhLCBzdHIpOlxuICAgICAgICBwcmludChcImNvbm5lY3RfZXJyb3I6XCIgKyBzdHIoZGF0YSkpXG4gICAgaWYgaXNpbnN0YW5jZShkYXRhLCBkQkVycm9yLmRCRXJyb3IpOlxuICAgICAgICBwcmludChkYXRhLmNvZGUsIGRhdGEuc291cmNlLCBkYXRhLm1lc3NhZ2UpXG5cbmFzeW5jIGRlZiByZWNvbm5lY3RfZXJyb3IoZGF0YSk6XG4gICAgaWYgaXNpbnN0YW5jZShkYXRhLCBzdHIpOlxuICAgICAgICBwcmludChcInJlY29ubmVjdF9lcnJvcjpcIiArIHN0cihkYXRhKSlcbiAgICBpZiBpc2luc3RhbmNlKGRhdGEsIGRCRXJyb3IuZEJFcnJvcik6XG4gICAgICAgIHByaW50KGRhdGEuY29kZSwgZGF0YS5zb3VyY2UsIGRhdGEubWVzc2FnZSlcblxuYXN5bmMgZGVmIHJlY29ubmVjdF9mYWlsZWQoIGRhdGEpOlxuICAgIHByaW50KFwicmVjb25uZWN0X2ZhaWxlZDpcIiwgZGF0YSlcblxuYXN5bmMgZGVmIHJlY29ubmVjdGVkKCk6XG4gICAgcHJpbnQoXCJyZWNvbm5lY3RlZDpcIilcblxuYXN5bmMgZGVmIHJ0dHBvbmcoZGF0YT1Ob25lKTpcbiAgICBwcmludChcInJ0dHBvbmc6XCIsIC5kYnJpZGdlLmNvbm5lY3Rpb25zdGF0ZS5ydHRtcylcblxuYXN5bmMgZGVmIGRpc2Nvbm5lY3RlZCgpOlxuICAgIHByaW50KFwiZGlzY29ubmVjdGVkOlwiKVxuXG5hc3luYyBkZWYgY29ubmVjdGVkKCk6XG4gICAgcHJpbnQoXCJjb25uZWN0ZWQuLi5cIilcblxudHJ5OlxuICAgICAgZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuYmluZChcImNvbm5lY3RpbmdcIiwgY29ubmVjdGluZylcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJyZWNvbm5lY3RpbmdcIiwgcmVjb25uZWN0aW5nKVxuICAgICAgZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuYmluZChcImNvbm5lY3Rpb25fYnJlYWtcIiwgY29ubmVjdGlvbl9icmVhaylcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJzdGF0ZV9jaGFuZ2VcIiwgc3RhdGVfY2hhbmdlKVxuICAgICAgZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuYmluZChcImNvbm5lY3RfZXJyb3JcIiwgY29ubmVjdF9lcnJvcilcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgcmVjb25uZWN0X2Vycm9yKVxuICAgICAgZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuYmluZChcInJlY29ubmVjdF9mYWlsZWRcIiwgcmVjb25uZWN0X2ZhaWxlZClcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJyZWNvbm5lY3RlZFwiLCByZWNvbm5lY3RlZClcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJydHRwb25nXCIsIHJ0dHBvbmcpXG4gICAgICBkYnJpZGdlLmNvbm5lY3Rpb25zdGF0ZS5iaW5kKFwiY29ubmVjdGVkXCIsIGNvbm5lY3RlZClcbiAgICAgIGRicmlkZ2UuY29ubmVjdGlvbnN0YXRlLmJpbmQoXCJkaXNjb25uZWN0ZWRcIiwgZGlzY29ubmVjdGVkKVxuICAgICAgXG5leGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSAgIFxuYGBgXG4jIyMjIyMgcGF5bG9hZDogYChkYmVycm9yIG9iamVjdClgXG5cbmBgYHB5dGhvblxue1xuICAgIFwic291cmNlXCI6IFwiREJMSUJfQ09OTkVDVFwiICwgXHRcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlXG4gICAgXCJjb2RlXCI6IFwiUkVDT05ORUNUX0FUVEVNUFRfRVhDRUVERURcIixcdC8vIChzdHJpbmcpIEVycm9yIGNvZGUgXG4gICAgXCJtZXNzYWdlXCI6IFwiXCIgXHRcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG59XG5gYGBcblxufCBFdmVudHMgICAgICAgICAgICAgfCBQYXJhbWV0ZXJzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYGNvbm5lY3RpbmdgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIHlvdXIgYXBwbGljYXRpb24gaXMgYXR0ZW1wdGluZyB0byBjb25uZWN0IHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIHxcbnwgYGNvbm5lY3RlZCBgICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIGNvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBvcGVuIGFuZCBhdXRoZW50aWNhdGVkIHdpdGggeW91ciBgYXBwa2V5YC4gfFxufCBgY29ubmVjdGlvbl9icmVha2AgfCAqcGF5bG9hZCogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICooZGJlcnJvciBvYmplY3QpKiBJbmRpY2F0ZXMgYSBuZXR3b3JrIGRpc2Nvbm5lY3Rpb24gYmV0d2VlbiBhcHBsaWNhdGlvbiBhbmQgZGF0YUJyaWRnZXMgbmV0d29yay4gVGhlIGxpYnJhcnkgd2lsbCBpbml0aWF0ZSBhbiBhdXRvbWF0aWMgcmVjb25uZWN0aW9uLCBpZiB0aGUgcmVjb25uZWN0aW9uIHByb3BlcnR5IGlzIHNldCBhcyB0cnVlLiB8XG58IGBjb25uZWN0X2Vycm9yYCAgICB8ICpwYXlsb2FkKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKihkYmVycm9yIG9iamVjdCkqIFRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gdGhlIGRhdGFCcmlkZ2VzIG5ldHdvcmsgY29ubmVjdGlvbiB3YXMgcHJldmlvdXNseSBjb25uZWN0ZWQgYW5kIGhhcyBub3cgZXJyb3JlZCBhbmQgY2xvc2VkLiB8XG58IGBkaXNjb25uZWN0ZWRgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVGhlIGFwcGxpY2F0aW9uIGlzIG5vdyBkaXNjb25uZWN0ZWQgZnJvbSB0aGUgZGF0YUJyaWRnZXMgbmV0d29yay4gVGhlIGFwcGxpY2F0aW9uIHdpbGwgdGhhbiBuZWVkIHRvIGluaXRpYXRlIGZyZXNoIGNvbm5lY3Rpb24gYXR0ZW1wdCBhZ2Fpbi4gfFxufCBgcmVjb25uZWN0aW5nYCAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gIGFwcGxpY2F0aW9uIGlzIG5vdyBhdHRlbXB0aW5nIHRvIHJlY29ubmVjdCB0byBkYXRhQnJpZGdlcyBuZXR3b3JrIGFzIHBlciBwcm9wZXJ0aWVzIHNldCBmb3IgcmVjb25uZWN0aW9uLiB8XG58IGByZWNvbm5lY3RfZXJyb3JgICB8ICpwYXlsb2FkKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgKihkYmVycm9yIG9iamVjdCkqIFRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW4gcmVjb25uZWN0aW9uIGF0dGVtcHQgaGFzIGVycm9yZWQuIHxcbnwgYHJlY29ubmVjdF9mYWlsZWRgIHwgKnBheWxvYWQqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAqKGRiZXJyb3Igb2JqZWN0KSogcmVjb25uZWN0X2ZhaWxlZCBldmVudCBpcyB0cmlnZ2VyZWQgd2hlbiBhbGwgdGhlIHJlY29ubmVjdGlvbiBhdHRlbXB0cyBoYXZlIGJlZW4gZXhoYXVzZWQgdW5zdWNjZXNzZnVsbHkuIFRoZSBhcHBsaWNhdGlvbiBpcyBub3cgZGlzY29ubmVjdGVkIGZyb20gdGhlIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIFRoZSBhcHBsaWNhdGlvbiB3aWxsIHRoYW4gbmVlZCB0byBpbml0aWF0ZSBmcmVzaCBjb25uZWN0aW9uIGF0dGVtcHQgYWdhaW4uIHxcbnwgYHJlY29ubmVjdGVkYCAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUaGlzIGV2ZW50IGlzIHRyaWdnZXJlZCB3aGVuIHRoZSBjb25uZWN0aW9uIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgaXMgb3BlbiBhbmQgcmVjb25uZWN0ZWQgYWZ0ZXIgYGNvbm5lY3RfZXJyb3JgICoqb3IqKiBgcmVjb25uZWN0X2Vycm9yYC4gfFxufCBgc3RhdGVfY2hhbmdlYCAgICAgfCAqcGF5bG9hZCogd2l0aCBgcGF5bG9hZC5wcmV2aW91cywgcGF5bG9hZC5jdXJyZW50YCB8ICooZGljdCkqIFRoaXMgZXZlbnQgaXMgdHJpZ2dlcmVkIHdoZW5ldmVyIHRoZXJlIGlzIGFueSBzdGF0ZSBjaGFuZ2VzIGluIGRhdGFCcmlkZ2VzIG5ldHdvcmsgY29ubmVjdGlvbi4gUGF5bG9hZCB3aWxsIGhhdmUgcHJldmlvdXMgYW5kIGN1cnJlbnQgc3RhdGUgb2YgY29ubmVjdGlvbi4gfFxufCBgcnR0cG9uZ2AgICAgICAgICAgfCBgcGF5bG9hZGAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICooaW50ZWdlcikqIEluIFJlc3BvbnNlIHRvIGBydHRwaW5nKClgIGZ1bmN0aW9uIGNhbGwgdG8gZGF0YUJyaWRnZXMgbmV0d29yaywgcGF5bG9hZCBoYXMgbGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHdoZXJlIHlvdXIgYXBwbGljYXRpb24gaXMgY29ubmVjdGVkLiB8XG5cbiMjIyMgZGJlcnJvcjpcblxufCBTb3VyY2UgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICAgfCBNZXNzYWdlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgREJMSUJfQ09OTkVDVCB8IFJFQ09OTkVDVF9BVFRFTVBUX0VYQ0VFREVEICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVHJpZ2dlcmVkIHdoZW4gYHJlY29ubmVjdF9mYWlsZWRgIGV2ZW50IGlzIHJhaXNlZC4gICAgICAgICAgIHxcbnwgREJORVRfQ09OTkVDVCB8IERJU0NPTk5FQ1RfUkVRVUVTVCAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVHJpZ2dlcmVkIHdoZW4gYGNvbm5lY3RfZXJyb3JgIGV2ZW50IGlzIHJhaXNlZC4gICAgICAgICAgICAgIHxcbnwgREJORVRfQ09OTkVDVCB8IFJFQ09OTkVDVF9SRVFVRVNUICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVHJpZ2dlcmVkIHdoZW4gYGNvbm5lY3RfZXJyb3JgLCBgY29ubmVjdGlvbl9icmVha2AgIGV2ZW50IGlzIHJhaXNlZC4gfFxufCBEQkxJQl9DT05ORUNUIHwgTkVUV09SS19ESVNDT05ORUNURUQgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUcmlnZ2VyZWQgd2hlbiBgY29ubmVjdF9lcnJvcmAsIGByZWNvbm5lY3RfZXJyb3JgICBldmVudCBpcyByYWlzZWQuIHxcbnwgREJMSUJfQ09OTkVDVCB8IElOVkFMSURfVVJMICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgVmFsdWUgb2YgYGRicmlkZ2UuYXV0aF91cmxgIGlzIG5vdCBhIHZhbGlkIGRhdGFCcmlkZ2VzIGF1dGhlbnRpY2F0aW9uIFVSTC4gfFxufCBEQkxJQl9DT05ORUNUIHwgSU5WQUxJRF9BVVRIX1BBUkFNICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBWYWx1ZSBvZiBgZGJyaWRnZS5hcHBrZXlgIGlzIG5vdCBhIHZhbGlkIGRhdGFCcmlkZ2VzIGFwcGxpY2F0aW9uIGtleS4gfFxufCBEQkxJQl9DT05ORUNUIHwgSU5WQUxJRF9BQ0NFU1NUT0tFTl9GVU5DVElPTiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJZiAqXCJjYWxsYmFjayBmdW5jdGlvblwiKiBpcyBub3QgZGVjbGFyZWQgZm9yIGF1dGhlbnRpY2F0aW9uICAqKm9ubHkqKiB3aGlsZSB1c2luZyAgKipwcml2YXRlLCBwcmVzZW5jZSBvciBzeXN0ZW0qKiBjaGFubmVsL1JQQyBmdW5jdGlvbnMuICooQ2hlY2sgQ2hhbm5lbCBvciBSUEMgc2VjdGlvbiBmb3IgZGV0YWlscy4pKiB8XG58IERCTElCX0NPTk5FQ1QgfCBIVFRQXyAgICAgICAgICAgICAgICAgICAgICAgIHwgSFRUUCBwcm90b2NvbCByZXBvcnRlZCBtZXNzYWdlLiB8IEhUVFAgRXJyb3JzIHJldHVybmVkIGR1cmluZyBhdXRoZW50aWNhdGlvbiBwcm9jZXNzLiAqKipIVFRQIEVycm9yIGNvZGUqKiogd2lsbCBiZSBjb25jYXRlbmF0ZWQgd2l0aCBgSFRUUF9gIGluIHRoZSBgZXJyLmNvZGVgLiBgZWcuIEhUVFBfNTAxYCB8XG58IERCTElCX0NPTk5FQ1QgfCBJTlZBTElEX0NMSUVOVEZVTkNUSU9OICAgICAgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElmICpcImNhbGxiYWNrIGZ1bmN0aW9uXCIqIGlzIG5vdCBkZWNsYXJlZCBmb3IgY2xpZW50IGZ1bmN0aW9uICoqb3IqKiBgdHlwZW9mKClgIHZhcmlhYmxlIGRlZmluZWQgaXMgbm90IGEgKlwiZnVuY3Rpb25cIiouIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGlmIGNsaWVudEZ1bmN0aW9uIGlzIGVuYWJsZWQuICooQ2hlY2sgQ2xpZW50IEZ1bmN0aW9uIHNlY3Rpb24gZm9yIGRldGFpbHMuKSogfFxuXG4jIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgICAgICB8IENvZGUgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DT05ORUNUX0JJTkQgfCBJTlZBTElEX0VWRU5UTkFNRSB8IEludmFsaWQgRXZlbnQgbmFtZS4gTm90IGluIGRlZmluZWQgZXZlbnRzIGFzIGFib3ZlLiAgICAgICAgICB8XG58IERCTElCX0NPTk5FQ1RfQklORCB8IElOVkFMSURfQ0FMTEJBQ0sgIHwgSWYgKlwiY2FsbGJhY2sgZnVuY3Rpb25cIiogaXMgbm90IGRlY2xhcmVkICoqb3IqKiBgdHlwZW9mKClgIHZhcmlhYmxlIGRlZmluZWQgaXMgbm90IGEgKlwiZnVuY3Rpb25cIiouIHxcblxuIyMjIEZ1bmN0aW9uc1xuXG4jIyMjIHJ0dHBpbmcoKVxuXG5UaGlzIG1ldGhvZCBpcyB0byB1bmRlcnN0YW5kIHRoZSBsYXRlbmN5IGluIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHlvdXIgYXBwbGljYXRpb24gYW5kIHRoZSBkYXRhQnJpZGdlcyByb3V0ZXIgd2hlcmUgeW91ciBhcHBsaWNhdGlvbiBpcyBjb25uZWN0ZWQuIEV2ZW50IGBydHRwb25nYCBpcyB0cmlnZ2VyZWQgb25jZSByZXNwb25zZSAgaXMgcmVjZWl2ZWQgZnJvbSBkYXRhQnJpZGdlcyBuZXR3b3JrLiBCaW5kIHRvIGV2ZW50OmBydHRwb25nYCB0byByZXRyaWV2ZSB0aGUgbGF0ZW5jeSBpbiBtcy4gXG5cbmBgYHB5dGhvblxuIyBUbyBnZXQgdGhlIGxhc3Qga25vd24gTGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHdoZXJlIHlvdXIgYXBwbGljYXRpb24gaXMgY29ubmVjdGVkLlxuIyBUaGUgZGF0YUJyaWRnZXMgbGlicmFyeSBleGNoYW5nZXMgcnR0bXMgZHVyaW5nIHRoZSBpbml0aWFsIGRhdGFCcmlkZ2VzIG5ldHdvcmsgY29ubmVjdGlvbiByb3V0aW5lLlxucHJpbnQoZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUucnR0bXMpXG5cbiMgVG8gZ2V0IHRoZSBsYXRlc3QgTGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHdoZXJlIHlvdXIgYXBwbGljYXRpb24gaXMgY29ubmVjdGVkLlxuYXN5bmMgZGVmIHJ0dHBvbmcoc2VsZiwgIGRhdGE9Tm9uZSk6XG4gXHRwcmludChcInJ0dHBvbmc6XCIsIGRhdGEpIFxuICAgIFxudHJ5OlxuIFx0ZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUuYmluZChcInJ0dHBvbmdcIiwgcnR0cG9uZylcbmV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiBcdHByaW50KFwic291cmNlOiB7MH0gLCAgY29kZTogezF9LCBtZXNzYWdlOiB7Mn1cIi5mb3JtYXQoZS5zb3VyY2UgLCBlLmNvZGUgLCBlLm1lc3NhZ2UpKVxuXG4jIEJpbmQgdG8gcnR0cG9uZywgdG8gZ2V0IG5vdGlmaWVkIGFib3V0IHRoZSBsYXRlc3QgTGF0ZW5jeSBpbiBtaWxsaXNlY29uZHMgYmV0d2VlbiB5b3VyIGFwcGxpY2F0aW9uIGFuZCB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHdoZXJlIHlvdXIgYXBwbGljYXRpb24gaXMgY29ubmVjdGVkLlxudHJ5OlxuIFx0ZGJyaWRnZS5jb25uZWN0aW9uc3RhdGUucnR0cGluZygpXG5leGNlcHQgRXhjZXB0aW9uIGFzIGU6XG4gXHRwcmludChcInNvdXJjZTogezB9ICwgIGNvZGU6IHsxfSwgbWVzc2FnZTogezJ9XCIuZm9ybWF0KGUuc291cmNlICwgZS5jb2RlICwgZS5tZXNzYWdlKSlcbmBgYFxuXG4jIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgfCBDb2RlICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTElCX1JUVFBJTkcgfCBORVRXT1JLX0RJU0NPTk5FQ1RFRCB8IENvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBub3QgYWN0aXZlLiB8XG5cblxuXG4tLS0tLS1cblxuXG5cbiMjIG9iamVjdDpDaGFubmVsXG5cbmNoYW5uZWwgb2JqZWN0IGV4cG9zZXMgKip0cnVzdC1zYWZlKiogZmxleGlibGUgUHViL1N1YiBtZXNzYWdpbmcgcHJvcGVydGllcywgZnVuY3Rpb25zIGFuZCBldmVudHMgdG8gYnVpbGQgcmVhbHRpbWUgZXZlbnQgbWVzc2FnaW5nIC8gZXZlbnQgZHJpdmVuIGFwcGxpY2F0aW9ucyBhdCBzY2FsZS5cblxuQ29uY2VwdHNcblxuLSBBIG1lc3NhZ2UgaXMgYXR0YWNoZWQgdG8gYW4gZXZlbnRcbi0gR3JvdXAgc2ltaWxhciBldmVudHMgaW50byBhIGNoYW5uZWxcbi0gU3Vic2NyaWJlIHRvIGEgY2hhbm5lbCB0byByZWNlaXZlIGFsbCBjaGFubmVsIGV2ZW50IG1lc3NhZ2VzLiBcbi0gUHVibGlzaCBldmVudCBtZXNzYWdlIHRvIHRoZSBjaGFubmVsIGFuZCBpdCB3aWxsIGJlIHNlbnQgdG8gYWxsIHRoZSBjaGFubmVsIHN1YnNjcmliZXJzIHdobyBhcmUgY29ubmVjdGVkIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgYW5kIG9ubGluZS5cbi0gaWYgeW91IG5lZWQgdG8gaGF2ZSBhbiBhY2Nlc3MgY29udHJvbGxlZCBjaGFubmVsLCBwcmVmaXggdGhlIGNoYW5uZWwgbmFtZSB3aXRoIHB2dDogLCBwcnM6IGFuZCBzeXM6IC5UbyBzdWJzY3JpYmUgdG8gdGhlc2UgdHlwZSBvZiBjaGFubmVsLiB5b3Ugd2lsbCBuZWVkIHRvIHBhc3MgYSB0cnVzdC10b2tlbiB3aGVuIHlvdSBzdWJzY3JpYmUgdG8gdGhlIGNoYW5uZWwuIEEgdHJ1c3QtdG9rZW4gaXMgYSBKV1QgZG9jdW1lbnQgY3JlYXRlZCB1c2luZyBhIGNvbWJpbmF0aW9uIG9mIGNoYW5uZWxuYW1lICsgc2Vzc2lvbmlkICsgYXBwLnNlY3JldC4gXG4gIC0gVXNlIHlvdXIgZXhpc3RpbmcgYWNjZXNzIGNvbnRyb2wsICBhdXRob3JpemF0aW9uIGFuZCBzZXNzaW9uIGlkZW50aWZpY2F0aW9uIHJ1bGUtc2V0LCBwcm9jZXNzIGFuZCBtZXRob2RzIHRvIGNyZWF0ZSBhIHRydXN0LXRva2VuIGluc3RydWN0aW5nIHRoZSBkYXRhQnJpZGdlcyByb3V0ZXIgdG8gYWNjZXB0IHRoZSBwdnQ6IHByczogYW5kIHN5czogY2hhbm5lbCBzdWJzY3JpcHRpb24sIGNvbm5lY3Rpb24gb2YgZnJvbSBjbGllbnQgYXBwbGljYXRpb24uXG4tIFRydXN0LXRva2VucyBhbGxvd3MgeW91IHRvIGVuYWJsZSBzZWN1cmVkLCBhY2Nlc3MgY29udHJvbGxlZCBhbmQgY29tcGxpYW5jZSBkcml2ZW4gcmVhbHRpbWUgZXZlbnQgZHJpdmVuIG1lc3NhZ2luZyBpbiB5b3VyIGV4aXN0aW5nIGFuZCBuZXcgaW5pdGlhdGl2ZSBhcHBsaWNhdGlvbnMuXG5cbmRhdGFCcmlkZ2VzIGxpYnJhcnkgc3VwcG9ydHMgKio0KiogdHlwZXMgb2YgY2hhbm5lbC4gVGhlICpuYW1lc3BhY2UgaXMgdGhlICA0IGNoYXJhY3RlcnMqIHByZWNlZGluZyB0aGUgY2hhbm5lbE5hbWUgKGBwdnQ6LHByczosc3lzOmApLCBpZGVudGlmeWluZyB3aGljaCB0eXBlIG9mIGNoYW5uZWwgdGhlIGFwcGxpY2F0aW9uIGlzIGNvbm5lY3RpbmcgdG8uIElmIHRoZSBjaGFubmVsIHR5cGUgaXMgYHB2dDoscHJzOixzeXM6YCwgZGF0YUJyaWRnZXMgbGlicmFyeSB3aWxsIHVzZSB0aGUgYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gdG8gZ2V0IHRoZSBhY2Nlc3MgZW5jcnlwdGVkIHRva2VuIGFuZCB3aWxsIHVzZSBpdCBmb3IgYWxsIGNvbW11bmljYXRpb24gd2l0aCB0aGlzIGNoYW5uZWwuXG5cbnwgQ2hhbm5lbCBUeXBlIHwgQ2hhbm5lbCBOYW1lIFN0eWxlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgUHVibGljICAgICAgIHwgY2hhbm5lbE5hbWUgICAgICAgIHwgUHVibGljIGNoYW5uZWwgaXMgdXNlZCB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzIHRoYXQgYXJlIHRvIGJlIHB1YmxpY2x5IGF2YWlsYWJsZS4gVGhpcyBjaGFubmVsIHR5cGUgZG9lcyBub3QgcmVxdWlyZSBhbnkgdHJ1c3QgYXV0aG9yaXphdGlvbiB0b2tlbiB0byBzdWJzY3JpYmUuIDxiciAvPiplLmcgIGNoYW5uZWxOYW1lID0qIGBteWNoYW5uZWxgIHxcbnwgUHJpdmF0ZSAgICAgIHwgKipwdnQ6KipjaGFubmVOYW1lIHwgUHJpdmF0ZSBjaGFubmVscyBpcyByZXN0cmljdGVkIGNoYW5uZWwuIGFwcGxpY2F0aW9uIHdpbGwgbmVlZCB0byBwcm92aWRlIHRydXN0IGF1dGhvcml6YXRpb24gdG9rZW4gdG8gc3Vic2NyaWJlIGFuZCB1c2UgUHJpdmF0ZSBjaGFubmVsLiBUaGUgZGF0YUJyaWRnZXMgbGlicmFyeSB3aWxsIHVzZSB0aGUgYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gdG8gZ2V0IHRoZSB0cnVzdCBhdXRob3JpemF0aW9uIHRva2VuLiA8YnIgLz4qZS5nICBjaGFubmVsTmFtZSA9KiBgcHZ0Om15Y2hhbm5lbGAgfFxufCBQcmVzZW5jZSAgICAgfCAqKnByczoqKmNoYW5uZU5hbWUgfCBQcmVzZW5jZSBjaGFubmVscyBpcyBhIHNwZWNpYWxpemVkIHByaXZhdGUgY2hhbm5lbCB3aXRoIGFkZGl0aW9uYWwgZmVhdHVyZSBvZiBwcmVzZW5jZSBhd2FyZW5lc3MuIFN1YnNjcmliaW5nIHRvIHByZXNlbmNlIGNoYW5uZWwgYWxsb3dzIGFwcGxpY2F0aW9uIHRvIGJlIG5vdGlmaWVkIG9mIG1lbWJlcnMgam9pbmluZyAvIGxlYXZpbmcgdGhlIGNoYW5uZWwuIFNpbmNlIFByZXNlbmNlIGNoYW5uZWwgaXMgYSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIFByaXZhdGUgY2hhbm5lbCwgYXBwbGljYXRpb24gd2lsbCBuZWVkIHRvIHByb3ZpZGUgdHJ1c3QgYXV0aG9yaXphdGlvbiB0b2tlbiB0byBzdWJzY3JpYmUgYW5kIHVzZSBQcml2YXRlIGNoYW5uZWxzLiBUaGUgZGF0YUJyaWRnZXMgbGlicmFyeSB3aWxsIHVzZSB0aGUgYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gdG8gZ2V0IHRoZSB0cnVzdCBhdXRob3JpemF0aW9uIHRva2VuLjxiciAvPiplLmcgIGNoYW5uZWxOYW1lID0qIGBwcnM6bXljaGFubmVsYCB8XG58IFN5c3RlbSAgICAgICB8ICoqc3lzOioqY2hhbm5lTmFtZSB8IFN5c3RlbSBjaGFubmVsIGlzIGEgc3BlY2lhbGl6ZWQgUHJlc2VuY2UgY2hhbm5lbCB0byBidWlsZCBjb21tYW5kIGFuZCBjb250cm9sIGFwcGxpY2F0aW9ucy4gVXNpbmcgU3lzdGVtIGNoYW5uZWwgdG8gY3JlYXRlIGNvbW1hbmQgYW5kIGNvbnRyb2wgc2VydmVyIGFwcGxpY2F0aW9ucyB0byBzZW5kIG1lc3NhZ2VzIHRvIGRldmljZXMgYW5kIGFwcGxpY2F0aW9uIHVzaW5nIGRhdGFCcmlkZ2VzIGxpYnJhcnkgaW4gKip0cnVzdC1zYWZlIG1hbm5lciAqKiwgYnVpbGQgc21hcnQgdXBkYXRlIGNvbmZpZ3VyYXRpb24gc3lzdGVtIGFuZCBpbXBsZW1lbnQgKip0cnVzdC1zYWZlICoqIGFjdGlvbnMgZm9yIHJlbW90ZSBhbmQgYXV0b21hdGVkIG1hbmFnZW1lbnQuIFN5c3RlbSBjaGFubmVsIGFsbG93cyBhcHBsaWNhdGlvbiB0byBzZW5kIGFuZCByZWNlaXZlIG1lc3NhZ2VzIHdpdGggdGhlIHNlcnZlciBhcHBsaWNhdGlvbiAodXNpbmcgZGF0YUJyaWRnZXMgc2VydmVyIGxpYnJhcnkpLiAgU2luY2UgU3lzdGVtIGNoYW5uZWwgaXMgYSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIFByZXNlbmNlIGNoYW5uZWwsIGFwcGxpY2F0aW9uIHdpbGwgbmVlZCB0byBwcm92aWRlIHRydXN0IGF1dGhvcml6YXRpb24gdG9rZW4gdG8gc3Vic2NyaWJlIGFuZCB1c2UgUHJpdmF0ZSBjaGFubmVscy4gVGhlIGRhdGFCcmlkZ2VzIGxpYnJhcnkgd2lsbCB1c2UgdGhlIGBhY2Nlc3NfdG9rZW5gIGZ1bmN0aW9uIHRvIGdldCB0aGUgdHJ1c3QgYXV0aG9yaXphdGlvbiB0b2tlbi48YnIgLz4qZS5nICBjaGFubmVsTmFtZSA9KiBgc3lzOnN5c3RlbWluZm9gIHxcblxuZGF0YUJyaWRnZXMgbGlicmFyeSBwcm92aWRlcyAyIGRpZmZlcmVudCB3YXlzIHRvIGFjY2VzcyBhbnkgb2YgYWJvdmUgY2hhbm5lbCB0eXBlcyBiYXNlZCBvbiB1c2FnZS5cblxufCBDaGFubmVsIFR5cGUgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgU3Vic2NyaWJlIHRvIENoYW5uZWwgfCBhcHBsaWNhdGlvbiB0aGF0IHN1YnNjcmliZXMgdG8gYSBjaGFubmVsIHdpbGwgcmVjZWl2ZSBtZXNzYWdlcyBhbmQgY2FuIHNlbmQgbWVzc2FnZXMuIHxcbnwgQ29ubmVjdCB0byBDaGFubmVsICAgfCBXaGVyZSB3ZSBoYXZlIHVzZS1jYXNlcyB3aGVyZSBhcHBsaWNhdGlvbiBuZWVkcyB0byBvbmx5IHNlbmQgbWVzc2FnZXMgYW5kIG5vdCBpbnRlcmVzdGVkIHRvIGNvbnN1bWUgLyByZWNlaXZlIGNoYW5uZWwgbWVzc2FnZXMsIHNob3VsZCBjb25uZWN0IHRvIGNoYW5uZWwgaW5zdGVhZCBvZiBzdWJzY3JpYmluZyB0byB0aGUgY2hhbm5lbC4gfFxuXG4jIyMgU3Vic2NyaWJlIHRvIENoYW5uZWxcblxuQXBwbGljYXRpb24gdGhhdCBzdWJzY3JpYmVzIHRvIGEgY2hhbm5lbCB3aWxsIHJlY2VpdmUgbWVzc2FnZXMgYW5kIGNhbiBzZW5kIG1lc3NhZ2VzLlxuXG4jIyMjIHN1YnNjcmliZSgpXG5cblRoZSBkZWZhdWx0IG1ldGhvZCBmb3Igc3Vic2NyaWJpbmcgdG8gYSBjaGFubmVsIGludm9sdmVzIGludm9raW5nIHRoZSBgY2hhbm5lbC5zdWJzY3JpYmVgIGZ1bmN0aW9uIG9mIHlvdXIgZGF0YUJyaWRnZXMgb2JqZWN0OlxuXG5gYGBweXRob25cbnRyeTpcbiAgICBzdWJzY3JpYmVkX2NoYW5uZWwgPSAgYXdhaXQgZGJyaWRnZS5jaGFubmVsLnN1YnNjcmliZSgnbXljaGFubmVsJylcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKVxuYGBgXG5cbnwgUGFyYW1ldGVyIHwgUnVsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBzdHJpbmdgICB8ICpjaGFubmVsTmFtZSAqKk9SKio8YnIgLz4qKnB2dDoqKmNoYW5uZWxOYW1lICoqT1IqKjxiciAvPioqcHJzOioqY2hhbm5lbE5hbWUgKipPUioqPGJyIC8+KipzeXM6KipjaGFubmVsTmFtZSogfCAqY2hhbm5lbE5hbWUqIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiB0byBiZSBkb25lLiB8XG5cbnwgUmV0dXJuIFR5cGUgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBvYmplY3RgICAgIHwgKmNoYW5uZWwqIG9iamVjdCB3aGljaCBldmVudHMgYW5kIHJlbGF0ZWQgZnVuY3Rpb25zIGNhbiBiZSBib3VuZCB0by4gfFxuXG5BcHBsaWNhdGlvbiBjYW4gZGlyZWN0bHkgd29yayB3aXRoIGRhdGFCcmlkZ2VzIG9iamVjdCB3aXRob3V0IHVzaW5nIENoYW5uZWwgb2JqZWN0LiBVc2luZyB0aGlzIG1ldGhvZCBhcHBsaWNhdGlvbiAqKmNhbm5vdCBwdWJsaXNoKiogYW55IGV2ZW50cy5cblxuYGBgcHl0aG9uXG50cnk6XG4gICAgYXdhaXQgZGJyaWRnZS5jaGFubmVsLnN1YnNjcmliZSgnbXljaGFubmVsJylcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKVxuYGBgXG5cbiMjIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgREJMSUJfQ0hBTk5FTF9TVUJTQ1JJQkUgfCBORVRXT1JLX0RJU0NPTk5FQ1RFRCAgICAgICB8IENvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBub3QgYWN0aXZlLiAgICAgICAgICAgICB8XG58IERCTElCX0NIQU5ORUxfU1VCU0NSSUJFIHwgSU5WQUxJRF9DSEFOTkVMTkFNRSAgICAgICAgfCBBcHBsaWNhYmxlIGZvciBiZWxvdyBjb25kaXRpb25zIDxiciAvPjEuICpjaGFubmVsTmFtZSogaXMgbm90IGRlZmluZWQuPGJyIC8+Mi4gKmNoYW5uZWxOYW1lKiB2YWxpZGF0aW9uIGVycm9yLCBgdHlwZW9mKClgICAqY2hhbm5lbE5hbWUqICBpcyBub3QgdHlwZSBzdHJpbmc8YnIgLz4zLiAqY2hhbm5lbE5hbWUqIHZhbGlkYXRpb24gZXJyb3IsICpjaGFubmVsTmFtZSogZmFpbHMgYGEtekEtWjAtOVxcLjpfLWAgdmFsaWRhdGlvbi4gfFxufCBEQkxJQl9DSEFOTkVMX1NVQlNDUklCRSB8IElOVkFMSURfQ0hBTk5FTE5BTUVfTEVOR1RIIHwgKmNoYW5uZWxOYW1lKiB2YWxpZGF0aW9uIGVycm9yLCBsZW5ndGggb2YgKmNoYW5uZWxOYW1lKiAgZ3JlYXRlciB0aGFuICoqNjQqKiB8XG58IERCTElCX0NIQU5ORUxfU1VCU0NSSUJFIHwgQ0hBTk5FTF9BTFJFQURZX1NVQlNDUklCRUQgfCAqY2hhbm5lbE5hbWUqIGlzIGFscmVhZHkgc3Vic2NyaWJlZC4gICAgICAgICAgICAgICAgICAgICAgICAgfFxuXG4jIyMjIHVuc3Vic2NyaWJlKCkgXG5cblRvIHVuc3Vic2NyaWJlIGZyb20gYSBzdWJzY3JpYmVkIGNoYW5uZWwsIGludm9rZSB0aGUgYHVuc3Vic2NyaWJlYCBmdW5jdGlvbiBvZiB5b3VyIGRhdGFCcmlkZ2VzIG9iamVjdC4gYHVuc3Vic2NyaWJlYCBjYW5ub3QgYmUgZG9uZSBvbiBjaGFubmVsIG9iamVjdC5cblxuYGBgcHl0aG9uXG50cnk6XG4gICAgZGJyaWRnZS5jaGFubmVsLnVuc3Vic2NyaWJlKCdteWNoYW5uZWwnKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpXG5gYGBcblxufCBQYXJhbWV0ZXIgfCBSdWxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYHN0cmluZ2AgIHwgKmNoYW5uZWxOYW1lICoqT1IqKjxiciAvPioqcHZ0OioqY2hhbm5lbE5hbWUgKipPUioqPGJyIC8+KipwcnM6KipjaGFubmVsTmFtZSAqKk9SKio8YnIgLz4qKnN5czoqKmNoYW5uZWxOYW1lKiB8ICpjaGFubmVsKk5hbWUgdG8gd2hpY2ggdW4tc3Vic2NyaXB0aW9uIHRvIGJlIGRvbmUuIHxcblxufCBSZXR1cm4gVHlwZSB8IERlc2NyaXB0aW9uIHxcbnwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLSB8XG58IGBOQWAgICAgICAgIHwgICAgICAgICAgICAgfFxuXG4jIyMjIyBFeGNlcHRpb25zOiBcblxufCBTb3VyY2UgICAgICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DSEFOTkVMX1VOU1VCU0NSSUJFIHwgTkVUV09SS19ESVNDT05ORUNURUQgICAgICAgICAgfCBDb25uZWN0aW9uIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgaXMgbm90IGFjdGl2ZS4gICAgICAgICAgICAgfFxufCBEQkxJQl9DSEFOTkVMX1VOU1VCU0NSSUJFIHwgQ0hBTk5FTF9OT1RfU1VCU0NSSUJFRCAgICAgICAgfCAqY2hhbm5lbE5hbWUqIGlzIG5vdCBzdWJzY3JpYmVkLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCBEQkxJQl9DSEFOTkVMX1VOU1VCU0NSSUJFIHwgSU5WQUxJRF9DSEFOTkVMX1RZUEUgICAgICAgICAgfCAqY2hhbm5lbE5hbWUqIGlzIG5vdCBzdWJzY3JpYmVkLCBidXQgaXQgaXMgaW4gY29ubmVjdGVkIHN0YXRlLiB8XG58IERCTElCX0NIQU5ORUxfVU5TVUJTQ1JJQkUgfCBVTlNVQlNDUklCRV9BTFJFQURZX0lOSVRJQVRFRCB8IHVuc3Vic2NyaXB0aW9uIHRvIHRoZSBjaGFubmVsIGlzIGFscmVhZHkgaW5pdGlhdGVkIGFuZCBoZW5jZSB0aGUgY3VycmVudCB1bnN1YnNjcmliZSBjb21tYW5kIGV4aXRlZCB3aXRoIGV4Y2VwdGlvbi4gfFxuXG4jIyMgQ29ubmVjdCB0byBDaGFubmVsXG5cblVzZS1jYXNlcyB3aGVyZSBhcHBsaWNhdGlvbiBuZWVkcyB0byBvbmx5IHNlbmQgY2hhbm5lbCBtZXNzYWdlcyBhbmQgbm90IGludGVyZXN0ZWQgdG8gY29uc3VtZSAvIHJlY2VpdmUgY2hhbm5lbCBtZXNzYWdlcywgc2hvdWxkIGNvbm5lY3QgdG8gY2hhbm5lbCBpbnN0ZWFkIG9mIHN1YnNjcmliaW5nIHRvIHRoZSBjaGFubmVsLlxuXG4jIyMjIGNvbm5lY3QoKVxuXG5UaGUgZGVmYXVsdCBtZXRob2QgZm9yIGNvbm5lY3RpbmcgdG8gYSBjaGFubmVsIGludm9sdmVzIGludm9raW5nIHRoZSBgY2hhbm5lbC5jb25uZWN0YCBmdW5jdGlvbiBvZiB5b3VyIGRhdGFCcmlkZ2VzIG9iamVjdC4gQXBwbGljYXRpb24gY2Fubm90IHB1Ymxpc2ggc3lzdGVtIGV2ZW50cyBmb3Igd2hpY2ggaXQgaGFzIGNvbm5lY3RlZCB0by4gXG5cbmBgYHB5dGhvblxudHJ5OlxuICAgIGNvbm5lY3RlZF9jaGFubmVsID0gZGJyaWRnZS5jaGFubmVsLmNvbm5lY3QoJ215Y2hhbm5lbCcpXG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICBcdHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSlcbmBgYFxuXG58IFBhcmFtZXRlciB8IFJ1bGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBzdHJpbmdgICB8ICpjaGFubmVsTmFtZSAqKk9SKio8YnIgLz4qKnB2dDoqKmNoYW5uZWxOYW1lICoqT1IqKjxiciAvPioqcHJzOioqY2hhbm5lbE5hbWUgKipPUioqPGJyIC8+KipzeXM6KipjaGFubmVsTmFtZSogfCAqY2hhbm5lbCpOYW1lIHRvIHdoaWNoIGNvbm5lY3Rpb24gdG8gYmUgZG9uZS4gfFxuXG58IFJldHVybiBUeXBlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgb2JqZWN0YCAgICB8ICpjaGFubmVsKiBvYmplY3Qgd2hpY2ggZXZlbnRzIGFuZCByZWxhdGVkIGZ1bmN0aW9ucyBjYW4gYmUgYm91bmQgdG8uIHxcblxuIyMjIyMgRXhjZXB0aW9uczogXG5cbnwgU291cmNlICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DSEFOTkVMX0NPTk5FQ1QgfCBORVRXT1JLX0RJU0NPTk5FQ1RFRCAgICAgIHwgQ29ubmVjdGlvbiB0byBkYXRhQnJpZGdlcyBuZXR3b3JrIGlzIG5vdCBhY3RpdmUuICAgICAgICAgICAgIHxcbnwgREJMSUJfQ0hBTk5FTF9DT05ORUNUIHwgQ0hBTk5FTF9BTFJFQURZX0NPTk5FQ1RFRCB8ICpjaGFubmVsTmFtZSogaXMgYWxyZWFkeSBjb25uZWN0ZWQuICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IERCTElCX0NIQU5ORUxfQ09OTkVDVCB8IElOVkFMSURfQ0hBTk5FTE5BTUUgICAgICAgfCBBcHBsaWNhYmxlIGZvciBiZWxvdyBjb25kaXRpb25zPGJyIC8+MS4gKmNoYW5uZWxOYW1lKiBpcyBub3QgZGVmaW5lZC48YnIgLz4yLiAqY2hhbm5lbE5hbWUqIHZhbGlkYXRpb24gZXJyb3IsIGB0eXBlb2YoKWAgICpjaGFubmVsTmFtZSogIGlzIG5vdCB0eXBlIHN0cmluZzxiciAvPjMuICpjaGFubmVsTmFtZSogdmFsaWRhdGlvbiBlcnJvciwgbGVuZ3RoIG9mICpjaGFubmVsTmFtZSogIGdyZWF0ZXIgdGhhbiAqKjY0Kio8YnIgLz40LiAqY2hhbm5lbE5hbWUqIHZhbGlkYXRpb24gZXJyb3IsICpjaGFubmVsTmFtZSogZmFpbHMgYGEtekEtWjAtOVxcLjpfLWAgdmFsaWRhdGlvbi48YnIgLz41LiBpZiAqY2hhbm5lbE5hbWUqIGNvbnRhaW5zIGA6YCBhbmQgZmlyc3QgdG9rZW4gaXMgbm90IGBwdnQscHJzLHN5c2AgfFxuXG4jIyMjIGRpc2Nvbm5lY3QoKSBcblxuVG8gZGlzY29ubmVjdCBmcm9tIGEgY29ubmVjdGVkIGNoYW5uZWwsIGludm9rZSB0aGUgYGRpc2Nvbm5lY3RgIGZ1bmN0aW9uIG9mIHlvdXIgZGF0YUJyaWRnZXMgb2JqZWN0LiBgZGlzY29ubmVjdGAgY2Fubm90IGJlIGRvbmUgb24gY2hhbm5lbCBvYmplY3QuXG5cbmBgYHB5dGhvblxudHJ5OlxuICAgIGRicmlkZ2UuY2hhbm5lbC5kaXNjb25uZWN0KCdteWNoYW5uZWwnKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpXG5gYGBcbnwgUGFyYW1ldGVyIHwgUnVsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYHN0cmluZ2AgIHwgKmNoYW5uZWxOYW1lICoqT1IqKjxiciAvPioqcHZ0OioqY2hhbm5lbE5hbWUgKipPUioqPGJyIC8+KipwcnM6KipjaGFubmVsTmFtZSAqKk9SKio8YnIgLz4qKnN5czoqKmNoYW5uZWxOYW1lKiB8ICpjaGFubmVsKk5hbWUgdG8gd2hpY2ggZGlzY29ubmVjdGlvbiB0byBiZSBkb25lLiB8XG5cbnwgUmV0dXJuIFR5cGUgfCBEZXNjcmlwdGlvbiB8XG58IC0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0gfFxufCBgTkFgICAgICAgICB8ICAgICAgICAgICAgIHxcblxuIyMjIyMgRXhjZXB0aW9uczogXG5cbnwgU291cmNlICAgICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DSEFOTkVMX0RJU0NPTk5FQ1QgfCBORVRXT1JLX0RJU0NPTk5FQ1RFRCAgICAgICAgIHwgQ29ubmVjdGlvbiB0byBkYXRhQnJpZGdlcyBuZXR3b3JrIGlzIG5vdCBhY3RpdmUuICAgICAgICAgICAgIHxcbnwgREJMSUJfQ0hBTk5FTF9ESVNDT05ORUNUIHwgRElTQ09OTkVDVF9BTFJFQURZX0lOSVRJQVRFRCB8IGRpc2Nvbm5lY3QgdG8gdGhlIGNoYW5uZWwgaXMgYWxyZWFkeSBpbml0aWF0ZWQgYW5kIGhlbmNlIHRoZSBjdXJyZW50IGRpc2Nvbm5lY3QgY29tbWFuZCBleGl0ZWQgd2l0aCBleGNlcHRpb24uIHxcbnwgREJMSUJfQ0hBTk5FTF9ESVNDT05ORUNUIHwgSU5WQUxJRF9DSEFOTkVMICAgICAgICAgICAgICB8ICpjaGFubmVsTmFtZSogaXMgbm90IGNvbm5lY3RlZC4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IERCTElCX0NIQU5ORUxfRElTQ09OTkVDVCB8IElOVkFMSURfQ0hBTk5FTF9UWVBFICAgICAgICAgfCAqY2hhbm5lbE5hbWUqIGlzIG5vdCBjb25uZWN0ZWQsIGJ1dCBpdCBpcyBpbiBzdWJzY3JpYmVkIHN0YXRlLiB8XG5cbiMjIyBDaGFubmVsIEluZm9ybWF0aW9uXG5cbiMjIyMgaXNPbmxpbmUoKVxuXG4qPHU+ZEJyaWRnZU9iamVjdDwvdT4qIGFzIHdlbGwgYXMgKjx1PmNoYW5uZWxPYmplY3Q8L3U+KiBwcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBjaGFubmVsIGlzIG9ubGluZS4gVGhlIGJlc3QgcHJhY3RpY2UgaXMgdG8gY2hlY2sgdGhlIGNoYW5uZWwgaXMgb25saW5lIGJlZm9yZSBwdWJsaXNoaW5nIGFueSBtZXNzYWdlLlxuXG5gYGBweXRob25cbmlzb25saW5lID0gZGJyaWRnZS5jaGFubmVsLmlzT25saW5lKCdteWNoYW5uZWwnKVxuYGBgXG5cbmBgYHB5dGhvblxuaXNvbmxpbmUgPSBzdWJzY3JpYmVkX2NoYW5uZWwuaXNPbmxpbmUoKVxuYGBgXG5cbnwgUGFyYW1ldGVyIHwgUnVsZXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0gfFxufCBgc3RyaW5nYCAgfCAqY2hhbm5lbE5hbWUgKipPUioqPGJyIC8+KipwdnQ6KipjaGFubmVsTmFtZSAqKk9SKio8YnIgLz4qKnByczoqKmNoYW5uZWxOYW1lICoqT1IqKjxiciAvPioqc3lzOioqY2hhbm5lbE5hbWUqIHwgKmNoYW5uZWwqTmFtZSB8XG5cbnwgUmV0dXJuIFZhbHVlcyB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgYm9vbGVhbmAgICAgIHwgSXMgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIGNoYW5uZWwgb25saW5lIG9yIG9mZmxpbmUuIHxcblxuIyMjIyBsaXN0KClcblxuPHU+KmRCcmlkZ2VPYmplY3QqPC91PiAgcHJvdmlkZXMgYSBmdW5jdGlvbiB0byBnZXQgbGlzdCBvZiBzdWNjZXNzZnVsbHkgc3Vic2NyaWJlZCBvciBjb25uZWN0ZWQgY2hhbm5lbC4gXG5cbmBgYHB5dGhvblxuY2hhbm5lbHMgPSBkYnJpZGdlLmNoYW5uZWwubGlzdCgpXG4jPT4gW3tcIm5hbWVcIjogIFwibXljaGFubmVsXCIgLCBcInR5cGVcIjogXCJzdWJzY3JpYmVkL2Nvbm5lY3RcIiAsICBcImlzb25saW5lXCI6IFRydWUvRmFsc2UgfV1cbmBgYFxuXG58IFJldHVybiBUeXBlICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBhcnJheSBvZiBkaWN0YCB8IEFycmF5IG9mIGNoYW5uZWxzIHN1YnNjcmliZWQgb3IgY29ubmVjdGVkLiB8XG5cbkRpY3Rpb25hcnkgY29udGFpbnMgYmVsb3cgaW5mb3JtYXRpb24uXG5cbnwgS2V5ICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgbmFtZWAgICAgIHwgKihzdHJpbmcpKiAqY2hhbm5lbE5hbWUqIG9mIHN1YnNjcmliZWQgb3IgY29ubmVjdGVkIGNoYW5uZWwuIHxcbnwgYHR5cGVgICAgICB8ICooc3RyaW5nKSogYHN1YnNjcmliZWRgICoqb3IqKiBgY29ubmVjdGVkYCAgICAgICAgICAgICAgICAgICB8XG58IGBpc29ubGluZWAgfCAqKGJvb2xlYW4pKiBJcyB0aGUgY3VycmVudCBzdGF0dXMgb2YgY2hhbm5lbCBvbmxpbmUgb3Igb2ZmbGluZS4gfFxuXG4jIyMjIGdldENoYW5uZWxOYW1lKCkgXG5cbio8dT5jaGFubmVsT2JqZWN0PC91PiogcHJvdmlkZXMgYSBmdW5jdGlvbiB0byBnZXQgdGhlICpjaGFubmVsTmFtZSouIFxuXG5gYGBweXRob25cbmNoTmFtZSA9IGNoYW5uZWxvYmplY3QuZ2V0Q2hhbm5lbE5hbWUoKSAgXG5gYGBcblxufCBSZXR1cm4gVHlwZSB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgc3RyaW5nYCAgICB8ICpjaGFubmVsTmFtZSogb2Ygc3Vic2NyaWJlZCBvciBjb25uZWN0ZWQgY2hhbm5lbC4gfFxuXG4jIyMgUHVibGlzaCB0byBDaGFubmVsXG5cblB1Ymxpc2ggZXZlbnQtbWVzc2FnZSB1c2luZyB0aGUgYHB1Ymxpc2hgIGZ1bmN0aW9uIG9uIGFuIGluc3RhbmNlIG9mIHRoZSBgY2hhbm5lbGAgb2JqZWN0LlxuXG5BIG1lc3NhZ2UgaXMgbGlua2VkIHRvIGFuIGV2ZW50IGFuZCBoZW5jZSBldmVudC1tZXNzYWdlLiBkYXRhQnJpZGdlcyBhbGxvd3MgeW91IHRvIGJpbmQgdG8gdmFyaW91cyBldmVudHMgdG8gY3JlYXRlIHJpY2ggZXZlbnQgZHJpdmVuIHByb2Nlc3NpbmcgZmxvd3NcblxuIyMjIyBwdWJsaXNoKClcblxuVGhlIGRlZmF1bHQgbWV0aG9kIGZvciBwdWJsaXNoaW5nIHRvIGEgY2hhbm5lbCBpbnZvbHZlcyBpbnZva2luZyB0aGUgYGNoYW5uZWwucHVibGlzaGAgZnVuY3Rpb24gb2YgeW91ciAqY2hhbm5lbE9iamVjdCouIFxuXG5gYGBweXRob25cbnRyeTpcbiAgICBjaGFubmVsT2JqZWN0LnB1Ymxpc2goZXZlbnRuYW1lLCBwYXlsb2FkLCBleGNsdWRlU2Vzc2lvbklkLCBzb3VyY2VJZCwgc2Vxbm8pXG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICBcdHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5cbiMgQmVzdCBwcmFjdGljZSBpcyB0byBjaGVjayB0aGUgY2hhbm5lbCBpcyBvbmxpbmUgYmVmb3JlIHB1Ymxpc2hpbmcgYW55IG1lc3NhZ2UuXG5pZiBjaGFubmVsT2JqZWN0LmlzT25saW5lKCk6XG4gXHR0cnk6XG4gIFx0XHRjaGFubmVsT2JqZWN0LnB1Ymxpc2goZXZlbnRuYW1lLCBwYXlsb2FkLCBleGNsdWRlU2Vzc2lvbklkLCBzb3VyY2VJZCwgc2Vxbm8pXG4gXHRleGNlcHQgZEJFcnJvciBhcyBlOlxuICAgIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcbmBgYFxuXG58IFBhcmFtZXRlciB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBldmVudGAgICB8ICooc3RyaW5nKSogKmV2ZW50KiBOYW1lIHRvIHdoaWNoIHRoZSBtZXNzYWdlIHRvIGJlIHNlbnQuICpldmVudCogTmFtZSBjYW5ub3Qgc3RhcnQgd2l0aCBgZGJyaWRnZXM6YCB8XG58IGBwYXlsb2FkYCB8ICooc3RyaW5nKSogUGF5bG9hZCB0byBiZSBzZW50IHdpdGggdGhlIGV2ZW50LiAgICAgICAgICAgICAgICB8XG58IGBzZXFub2AgICB8ICooc3RyaW5nKSBbb3B0aW9uYWxdKiBNZXNzYWdlIHNlcXVlbmNlIG51bWJlci4gVGhpcyBpcyBvcHRpb25hbCBwYXJhbWV0ZXIuIGBzZXFub2AgY2FuIGJlIHVzZWQgYnkgYXBwbGljYXRpb25zIHRvIG1hbmFnZSBtZXNzYWdlIHF1ZXVlIHByb2Nlc3NpbmcgYnkgdGhlIHN1YnNjcmliZXJzLiB8XG5cbnwgUmV0dXJuIFZhbHVlcyB8IERlc2NyaXB0aW9uIHxcbnwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tIHxcbnwgYE5BYCAgICAgICAgICB8ICAgICAgICAgICAgIHxcblxuIyMjIyMgRXhjZXB0aW9uczogXG5cbnwgU291cmNlICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTElCX0NIQU5ORUxfUFVCTElTSCB8IElOVkFMSURfU1VCSkVDVCAgICAgIHwgQXBwbGljYWJsZSBmb3IgYmVsb3cgY29uZGl0aW9uczxiciAvPjEuICpldmVudCogdmFsaWRhdGlvbiBlcnJvciwgYHR5cGVvZigpYCAgKmV2ZW50KiAgaXMgbm90IHR5cGUgc3RyaW5nPGJyIC8+Mi4gICpldmVudCogdmFsaWRhdGlvbiBlcnJvciwgICpldmVudCogIGlzIG5vdCBkZWZpbmVkIHxcbnwgREJMSUJfQ0hBTk5FTF9QVUJMSVNIIHwgTkVUV09SS19ESVNDT05ORUNURUQgfCBDb25uZWN0aW9uIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgaXMgbm90IGFjdGl2ZS4gICAgICAgICAgICAgfFxuXG4jIyMgQmluZGluZyB0byBldmVudHNcblxuQSBtZXNzYWdlIGlzIGxpbmtlZCB0byBhbiBldmVudCBhbmQgaGVuY2UgZXZlbnQtbWVzc2FnZS4gZGF0YUJyaWRnZXMgYWxsb3dzIHlvdSB0byBiaW5kIHRvIHZhcmlvdXMgZXZlbnRzIHRvIGNyZWF0ZSByaWNoIGV2ZW50IHByb2Nlc3NpbmcgZmxvd3MuIEFuIGFwcGxpY2F0aW9uIG5lZWRzIHRvIGJpbmQgdG8gZXZlbnQgdG8gcHJvY2VzcyB0aGUgcmVjZWl2ZWQgbWVzc2FnZS4gXG5cbllvdSBjYW4gdXNlIHRoZSBmb2xsb3dpbmcgbWV0aG9kcyBlaXRoZXIgb24gYSAqY2hhbm5lbE9iamVjdCosIHRvIGJpbmQgdG8gZXZlbnRzIG9uIGEgcGFydGljdWxhciBjaGFubmVsOyBvciBvbiB0aGUgKmRicmlkZ2VPYmplY3QqLCB0byBiaW5kIHRvIGV2ZW50cyBvbiBhbGwgc3Vic2NyaWJlZCBjaGFubmVscyBzaW11bHRhbmVvdXNseS5cblxuIyMjIyBgYmluZGAgYW5kIGB1bmJpbmRgXG4qKkJpbmQqKiB0byBcImV2ZW50XCIgb24gY2hhbm5lbDogcGF5bG9hZCBhbmQgbWV0YWRhdGEgaXMgcmVjZWl2ZWQuXG5cbmBgYHB5dGhvblxuIyBCaW5kaW5nIHRvIGNoYW5uZWwgZXZlbnRzIG9uIGNoYW5uZWxPYmplY3QgIFxuZGVmIGV2ZW50RnVuY3Rpb24ocGF5bG9hZCAsICBtZXRhZGF0YSk6XG4gIFx0cHJpbnQocGF5bG9hZCAsIG1ldGFkYXRhKVxuXG50cnk6XG4gICAgY2hhbm5lbE9iamVjdC5iaW5kKCdldmVudE5hbWUnLCAgZXZlbnRGdW5jdGlvbilcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcblxuIyBCaW5kaW5nIHRvIGNoYW5uZWwgZXZlbnRzIG9uIGRicmlkZ2VPYmplY3QgXG50cnkge1xuICAgIGRicmlkZ2UuY2hhbm5lbC5iaW5kKCdldmVudE5hbWUnLCBldmVudEZ1bmN0aW9uKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuYGBgXG5cbnwgUGFyYW1ldGVyIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgZXZlbnRgICAgfCAqKHN0cmluZykqICpldmVudCogTmFtZSB0byB3aGljaCBiaW5kaW5nIHRvIGJlIGRvbmUuIHxcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmAoc3RyaW5nKWAgUGF5bG9hZCBkYXRhIHNlbnQgYnkgdGhlIHB1Ymxpc2hlci5cblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImV2ZW50XCIsXHRcdFx0XHQvLyAoc3RyaW5nKSBldmVudE5hbWUgXG4gICAgXCJzb3VyY2VzeXNpZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgU2VuZGVyIHN5c3RlbSBpZGVudGl0eSwgYXBwbGljYWJsZSBvbmx5IGZvciBwcmVzZW5jZSBvciBzeXN0ZW0gY2hhbm5lbC5cbiAgICBcInNxbnVtXCI6IFwiMVwiLFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIHVzZXIgZGVmaW5lZCwgc2VudCBkdXJpbmcgcHVibGlzaCBmdW5jdGlvbi5cbiAgICBcInNlc3Npb25pZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgU2VuZGVyIHNlc3Npb25pZCwgYXBwbGljYWJsZSBvbmx5IGZvciBwcmVzZW5jZSBvciBzeXN0ZW0gY2hhbm5lbC5cbiAgICBcImludGltZVwiOiAxNjQ1NTU0OTYwNzMyICBcdFx0XHQvLyAoc3RyaW5nKSBFUE9DIHRpbWUgb2YgdGhlIHNlbmRlciBhdCB0aW1lIG9mIHB1Ymxpc2guXG59XG5gYGBcblxuIyMjIyMgRXhjZXB0aW9uczogXG5cbnwgU291cmNlICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DT05ORUNUX0JJTkQgICAgfCBJTlZBTElEX0VWRU5UTkFNRSAgICAgICAgICAgIHwgKmV2ZW50TmFtZSogY2Fubm90IGJlIGJsYW5rIG9yIG51bGwuICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgREJMSUJfQ09OTkVDVF9CSU5EICAgIHwgSU5WQUxJRF9DQUxMQkFDSyAgICAgICAgICAgICB8IElmICpcImNhbGxiYWNrIGZ1bmN0aW9uXCIqIGlzIG5vdCBkZWNsYXJlZCAqKm9yKiogYHR5cGVvZigpYCB2YXJpYWJsZSBkZWZpbmVkIGlzIG5vdCBhICpcImZ1bmN0aW9uXCIqLiB8XG58IERCTElCX0NIQU5ORUxfQ09OTkVDVCB8IElOVkFMSURfQ0hBTk5FTF9UWVBFX0JJTkRJTkcgfCBJbnZhbGlkIEV2ZW50IG5hbWUuIFRoaXMgYmluZGluZyBpcyBub3QgYWxsb3dlZCBpbiBgY2hhbm5lbC5jb25uZWN0YC4gfFxuXG4qKlVuYmluZCoqIGJlaGF2aW9yIHZhcmllcyBkZXBlbmRpbmcgb24gd2hpY2ggcGFyYW1ldGVycyB5b3UgcHJvdmlkZSBpdCB3aXRoLiBGb3IgZXhhbXBsZTpcblxuYGBgcHl0aG9uXG4jICBSZW1vdmUganVzdCBgaGFuZGxlcmAgb2YgdGhlIGBldmVudGAgaW4gdGhlIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWwgXG5jaGFubmVsT2JqZWN0LnVuYmluZChcImV2ZW50TmFtZVwiLGhhbmRsZXIpXG5cbiMgIFJlbW92ZSBhbGwgYGhhbmRsZXJgIG9mIHRoZSBgZXZlbnRgIGluIHRoZSBzdWJzY3JpYmVkL2Nvbm5lY3RlZCBjaGFubmVsXG5jaGFubmVsT2JqZWN0LnVuYmluZChcImV2ZW50TmFtZVwiKVxuXG4jIFJlbW92ZSBhbGwgaGFuZGxlcnMgZm9yIHRoZSBhbGwgZXZlbnQgaW4gdGhlIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWxcbmNoYW5uZWxPYmplY3QudW5iaW5kKClcblxuIyAgUmVtb3ZlIGBoYW5kbGVyYCBvZiB0aGUgYGV2ZW50YCBmb3IgYWxsIGV2ZW50cyBhY3Jvc3MgYWxsIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWxzXG5kYnJpZGdlLmNoYW5uZWwudW5iaW5kKFwiZXZlbnROYW1lXCIsaGFuZGxlcilcblxuIyAgUmVtb3ZlIGFsbCBoYW5kbGVycyBvZiB0aGUgYGV2ZW50YCBmb3IgYWxsIGV2ZW50cyBhY3Jvc3MgYWxsIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWxzXG5kYnJpZGdlLmNoYW5uZWwudW5iaW5kKFwiZXZlbnROYW1lXCIpXG5cbiMgIFJlbW92ZSBhbGwgaGFuZGxlcnMgZm9yIGFsbCBldmVudHMgYWNyb3NzIGFsbCBzdWJzY3JpYmVkL2Nvbm5lY3RlZCBjaGFubmVsc1xuZGJyaWRnZS5jaGFubmVsLnVuYmluZCgpXG5gYGBcblxuIyMjIyBgYmluZF9hbGxgIGFuZCBgdW5iaW5kX2FsbGBcblxuYGJpbmRfYWxsYCBhbmQgYHVuYmluZF9hbGxgIHdvcmsgbXVjaCBsaWtlIGBiaW5kYCBhbmQgYHVuYmluZGAsIGJ1dCBpbnN0ZWFkIG9mIG9ubHkgZmlyaW5nIGNhbGxiYWNrcyBvbiBhIHNwZWNpZmljIGV2ZW50LCB0aGV5IGZpcmUgY2FsbGJhY2tzIG9uIGFueSBldmVudCwgYW5kIHByb3ZpZGUgdGhhdCBldmVudCBpbiB0aGUgbWV0YWRhdGEgIHRvIHRoZSBoYW5kbGVyIGFsb25nIHdpdGggdGhlIHBheWxvYWQuIGBiaW5kX2FsbGAgYW5kIGB1bmJpbmRfYWxsYCBpcyBub3QgYXZhaWxhYmxlIGZvciBgY29ubmVjdGVkX2NoYW5uZWxgIGkuZS4gYGRicmlkZ2UuY2hhbm5lbC5jb25uZWN0KClgIG9iamVjdC5cblxuYGBgcHl0aG9uXG4jIEJpbmRpbmcgdG8gY2hhbm5lbCBldmVudHMgb24gY2hhbm5lbE9iamVjdCAgXG5kZWYgZXZlbnRGdW5jdGlvbihwYXlsb2FkICwgIG1ldGFkYXRhKTpcbiAgXHRwcmludChwYXlsb2FkICwgbWV0YWRhdGEpXG5cbnRyeTpcbiAgICBjaGFubmVsT2JqZWN0LmJpbmRfYWxsKCdldmVudE5hbWUnLCAgZXZlbnRGdW5jdGlvbilcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcblxuIyBCaW5kaW5nIHRvIGNoYW5uZWwgZXZlbnRzIG9uIGRicmlkZ2VPYmplY3QgXG50cnkge1xuICAgIGRicmlkZ2UuY2hhbm5lbC5iaW5kX2FsbCgnZXZlbnROYW1lJywgZXZlbnRGdW5jdGlvbilcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcbmBgYFxuXG5DYWxsYmFjayBvdXQgcGFyYW1ldGVyIGBwYXlsb2FkLCBtZXRhZGF0YWAgZGV0YWlscyBhcmUgZXhwbGFpbmVkIHdpdGggZWFjaCBldmVudCBiZWxvdyBpbiB0aGlzIGRvY3VtZW50LlxuXG4jIyMjIyBFeGNlcHRpb25zOiBcblxufCBTb3VyY2UgICAgICAgICAgICAgfCBDb2RlICAgICAgICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTElCX0NPTk5FQ1RfQklORCB8IElOVkFMSURfQ0FMTEJBQ0sgfCBJZiAqXCJjYWxsYmFjayBmdW5jdGlvblwiKiBpcyBub3QgZGVjbGFyZWQgKipvcioqIGB0eXBlb2YoKWAgdmFyaWFibGUgZGVmaW5lZCBpcyBub3QgYSAqXCJmdW5jdGlvblwiKi4gfFxuXG5gdW5iaW5kX2FsbGAgd29ya3Mgc2ltaWxhcmx5IHRvIGB1bmJpbmRgLlxuXG5gYGBweXRob25cbiMgUmVtb3ZlIGp1c3QgYGhhbmRsZXJgIGFjcm9zcyB0aGUgY2hhbm5lbCBcbmNoYW5uZWxPYmplY3QudW5iaW5kX2FsbChoYW5kbGVyKVxuXG4jIFJlbW92ZSBhbGwgaGFuZGxlcnMgZm9yIHRoZSBhbGwgZXZlbnQgaW4gdGhlIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWxcbmNoYW5uZWxPYmplY3QudW5iaW5kX2FsbCgpXG5cbiMgUmVtb3ZlIGBoYW5kbGVyYCBhY3Jvc3MgdGhlIHN1YnNjcmliZWQvY29ubmVjdGVkIGNoYW5uZWxzXG5kYnJpZGdlLmNoYW5uZWwudW5iaW5kX2FsbChoYW5kbGVyKVxuXG4jIFJlbW92ZSBhbGwgaGFuZGxlcnMgZm9yIGFsbCBldmVudHMgYWNyb3NzIGFsbCBzdWJzY3JpYmVkL2Nvbm5lY3RlZCBjaGFubmVsc1xuZGJyaWRnZS5jaGFubmVsLnVuYmluZF9hbGwoKVxuYGBgXG5cbiMjIyBTeXN0ZW0gZXZlbnRzIGZvciBjaGFubmVsIG9iamVjdFxuXG5UaGVyZSBhcmUgYSBudW1iZXIgb2YgZXZlbnRzIHdoaWNoIGFyZSB0cmlnZ2VyZWQgaW50ZXJuYWxseSBieSB0aGUgbGlicmFyeSwgYnV0IGNhbiBhbHNvIGJlIG9mIHVzZSBlbHNld2hlcmUuIEJlbG93IGFyZSB0aGUgbGlzdCBvZiBhbGwgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGUgbGlicmFyeS5cblxuQmVsb3cgc3ludGF4IGlzIHNhbWUgZm9yIGFsbCBzeXN0ZW0gZXZlbnRzLlxuXG5gYGBweXRob25cbiMgQmluZGluZyB0byBzeXN0ZW1ldmVudCBvbiBjaGFubmVsT2JqZWN0ICBcbmRlZiBldmVudEZ1bmN0aW9uKHBheWxvYWQgLCAgbWV0YWRhdGEpOlxuICBcdHByaW50KHBheWxvYWQgLCBtZXRhZGF0YSlcbiAgICBcbnRyeTpcbiAgICBjaGFubmVsT2JqZWN0LmJpbmRfYWxsKCdkYnJpZGdlczpzdWJzY3JpYmUuc3VjY2VzcycsICBldmVudEZ1bmN0aW9uKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuXG4jIEJpbmRpbmcgdG8gc3lzdGVtZXZlbnQgb24gZGJyaWRnZU9iamVjdCBcblxudHJ5OlxuICAgIGRicmlkZ2UuY2hhbm5lbC5iaW5kX2FsbCgnZGJyaWRnZXM6c3Vic2NyaWJlLnN1Y2Nlc3MnLCBldmVudEZ1bmN0aW9uKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuYGBgXG5cbiMjIyMgZGJyaWRnZXM6c3Vic2NyaWJlLnN1Y2Nlc3MgXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IFxuXG5gbnVsbGAgXG5cbiMjIyMjIyBtZXRhZGF0YSBgKGRpY3QpYDpcblxuYGBgcHl0aG9uXG57XG4gICAgXCJjaGFubmVsbmFtZVwiOiBcImNoYW5uZWxOYW1lXCIgLCBcdFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOnN1YnNjcmliZS5zdWNjZXNzXCIsLy8gKHN0cmluZykgZXZlbnROYW1lIFxuICAgIFwic291cmNlc3lzaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFNlbmRlciBzeXN0ZW0gaWRlbnRpdHksIGFwcGxpY2FibGUgb25seSBmb3IgcHJlc2VuY2Ugb3Igc3lzdGVtIGNoYW5uZWwuXG4gICAgXCJzcW51bVwiOiBcIjFcIixcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSB1c2VyIGRlZmluZWQsIHNlbnQgZHVyaW5nIHB1Ymxpc2ggZnVuY3Rpb24uXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFNlbmRlciBzZXNzaW9uaWQsIGFwcGxpY2FibGUgb25seSBmb3IgcHJlc2VuY2Ugb3Igc3lzdGVtIGNoYW5uZWwuXG4gICAgXCJpbnRpbWVcIjogMTY0NTU1NDk2MDczMiAgXHRcdFx0Ly8gKHN0cmluZykgRVBPQyB0aW1lIG9mIHRoZSBzZW5kZXIgYXQgdGltZSBvZiBwdWJsaXNoLlxufVxuYGBgXG5cbiMjIyMgZGJyaWRnZXM6c3Vic2NyaWJlLmZhaWwgXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6ICBgKGRiZXJyb3Igb2JqZWN0KWBcblxuYGBgcHl0aG9uXG57XG4gICAgXCJzb3VyY2VcIjogXCJkYmVycm9yLlNvdXJjZVwiICwgXHRcdC8vIChzdHJpbmcpIEVycm9yIHNvdXJjZSwgUmVmZXIgZGJlcnJvcjogZm9yIGRldGFpbHNcbiAgICBcImNvZGVcIjogXCJkYmVycm9yLkNvZGVcIixcdFx0XHRcdC8vIChzdHJpbmcpIEVycm9yIGNvZGUsIFJlZmVyIGRiZXJyb3I6IGZvciBkZXRhaWxzXG4gICAgXCJtZXNzYWdlXCI6IFwiXCIgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgbWVzc2FnZSBpZiBhcHBsaWNhYmxlLlxufVxuYGBgXG5cbiMjIyMjIyBtZXRhZGF0YSBgKGRpY3QpYDpcblxuYGBgcHl0aG9uXG57XG4gICAgXCJjaGFubmVsbmFtZVwiOiBcImNoYW5uZWxOYW1lXCIgLCBcdFx0Ly8gKHN0cmluZykgY2hhbm5lbE5hbWUgdG8gd2hpY2ggc3Vic2NyaXB0aW9uIGlzIGRvbmUuXG4gICAgXCJldmVudG5hbWVcIjogXCJkYnJpZGdlczpzdWJzY3JpYmUuZmFpbFwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmNoYW5uZWwub25saW5lIFxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBcblxuYG51bGxgIFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6Y2hhbm5lbC5vbmxpbmVcIiwvLyAoc3RyaW5nKSBldmVudE5hbWUgXG4gICAgXCJzb3VyY2VzeXNpZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzcW51bVwiOiBcIlwiLFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic2Vzc2lvbmlkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcImludGltZVwiOiBcdCAgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG59XG5gYGBcblxuIyMjIyBkYnJpZGdlczpjaGFubmVsLm9mZmxpbmUgICBcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmBudWxsYCBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOmNoYW5uZWwub2ZmbGluZVwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmNoYW5uZWwucmVtb3ZlZFxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBcblxuYG51bGxgIFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6Y2hhbm5lbC5yZW1vdmVkXCIsLy8gKHN0cmluZykgZXZlbnROYW1lIFxuICAgIFwic291cmNlc3lzaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic3FudW1cIjogXCJcIixcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNlc3Npb25pZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJpbnRpbWVcIjogXHQgIFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxufVxuYGBgXG5cbiMjIyMgZGJyaWRnZXM6dW5zdWJzY3JpYmUuc3VjY2Vzc1xuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBcblxuYG51bGxgIFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6dW5zdWJzY3JpYmUuc3VjY2Vzc1wiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOnVuc3Vic2NyaWJlLmZhaWxcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogIGAoZGJlcnJvciBvYmplY3QpYFxuXG5gYGBweXRob25cbntcbiAgICBcInNvdXJjZVwiOiBcImRiZXJyb3IuU291cmNlXCIgLCBcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlLCBSZWZlciBkYmVycm9yOiBmb3IgZGV0YWlsc1xuICAgIFwiY29kZVwiOiBcImRiZXJyb3IuQ29kZVwiLFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgY29kZSwgUmVmZXIgZGJlcnJvcjogZm9yIGRldGFpbHNcbiAgICBcIm1lc3NhZ2VcIjogXCJcIiBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG59XG5gYGBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOnVuc3Vic2NyaWJlLmZhaWxcIiwvLyAoc3RyaW5nKSBldmVudE5hbWUgXG4gICAgXCJzb3VyY2VzeXNpZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzcW51bVwiOiBcIlwiLFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic2Vzc2lvbmlkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcImludGltZVwiOiBcdCAgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG59XG5gYGBcblxuIyMjIyBkYnJpZGdlczpyZXN1YnNjcmliZS5zdWNjZXNzIFxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBcblxuYG51bGxgIFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6cmVzdWJzY3JpYmUuc3VjY2Vzc1wiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOnJlc3Vic2NyaWJlLmZhaWxcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogYChkYmVycm9yIG9iamVjdClgXG5cbmBgYHB5dGhvblxue1xuICAgIFwic291cmNlXCI6IFwiZGJlcnJvci5Tb3VyY2VcIiAsIFx0XHQvLyAoc3RyaW5nKSBFcnJvciBzb3VyY2UsIFJlZmVyIGRiZXJyb3I6IGZvciBkZXRhaWxzXG4gICAgXCJjb2RlXCI6IFwiZGJlcnJvci5Db2RlXCIsXHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBjb2RlLCBSZWZlciBkYmVycm9yOiBmb3IgZGV0YWlsc1xuICAgIFwibWVzc2FnZVwiOiBcIlwiIFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIEVycm9yIG1lc3NhZ2UgaWYgYXBwbGljYWJsZS5cbn1cbmBgYFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6cmVzdWJzY3JpYmUuZmFpbFwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOnBhcnRpY2lwYW50LmpvaW5lZCAgXG5cblRoaXMgd2lsbCBiZSB0cmlnZ2VyZWQgb25seSBmb3IgKipwcmVzZW5jZSoqIGAocHJzOilgIGFuZCAqKnN5c3RlbSoqIGAoc3lzOilgIGNoYW5uZWwgc3Vic2NyaXB0aW9uLlxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBgKGRpY3QpYFxuXG5gYGBweXRob25cbntcbiAgXCJzZXNzaW9uaWRcIjogXCJ5ZFIyN3MzWjkyeVF3N3dqR1kybFhcIiwgXHQvLyAoc3RyaW5nKSBTZXNzaW9uIGlkIG9mIHRoZSBtZW1iZXIgd2hvIGhhcyBzdWJzY3JpYmVkL2Nvbm5lY3RlZCB0byBjaGFubmVsXG4gIFwibGlidHlwZVwiOiBcIm5vZGVqc1wiLCBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBMaWJyYXJ5IExhbmcgb2YgdGhlIG1lbWJlciB3aG8gaGFzIHN1YnNjcmliZWQvY29ubmVjdGVkIHRvIGNoYW5uZWxcbiAgXCJzb3VyY2VpcHY0XCI6IFwiMC4wLjAuMFwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgSVB2NCBvZiB0aGUgbWVtYmVyIHdobyBoYXMgc3Vic2NyaWJlZC9jb25uZWN0ZWQgdG8gY2hhbm5lbFxuICBcInNvdXJjZWlwdjZcIjogXCI6OjFcIiwgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgTm90IEFwcGxpY2FibGUgaW4gY3VycmVudCB2ZXJzaW9uLlxuICBcInN5c2luZm9cIjogJ3tcInN5c2lkXCI6XCJuYW1lb2ZjYWxsZXJcIn0nIFx0Ly8gKHN0cmluZykgU3lzdGVtIEluZm8gb2YgdGhlIG1lbWJlciB3aG8gaGFzIHN1YnNjcmliZWQvY29ubmVjdGVkIHRvIGNoYW5uZWxcbn1cbmBgYFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJwcnM6Y2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOnBhcnRpY2lwYW50LmpvaW5lZFwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwibmFtZW9mY2FsbGVyXCIsIFx0XHRcdC8vIChzdHJpbmcpIFN5cyBpZCBvZiB0aGUgbWVtYmVyIHdobyBoYXMgc3Vic2NyaWJlZC9jb25uZWN0ZWQgdG8gY2hhbm5lbFxuICAgIFwic3FudW1cIjogbnVsbCxcdFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic2Vzc2lvbmlkXCI6IFwieWRSMjdzM1o5MnlRdzd3akdZMmxYXCIsIFx0Ly8gKHN0cmluZykgU2Vzc2lvbiBpZCBvZiB0aGUgbWVtYmVyIHdobyBoYXMgc3Vic2NyaWJlZC9jb25uZWN0ZWQgdG8gY2hhbm5lbFxuICAgIFwiaW50aW1lXCI6IG51bGxcdCAgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG59XG5gYGBcblxuIyMjIyBkYnJpZGdlczpwYXJ0aWNpcGFudC5sZWZ0IFxuXG5UaGlzIHdpbGwgYmUgdHJpZ2dlcmVkIG9ubHkgZm9yICoqcHJlc2VuY2UqKiBgKHByczopYCBhbmQgKipzeXN0ZW0qKiBgKHN5czopYCBjaGFubmVsIHN1YnNjcmlwdGlvbi5cblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogYChkaWN0KWBcblxuYGBgcHl0aG9uXG57XG4gIFwic2Vzc2lvbmlkXCI6IFwieWRSMjdzM1o5MnlRdzd3akdZMmxYXCIsIFx0Ly8gKHN0cmluZykgU2Vzc2lvbiBpZCBvZiB0aGUgbWVtYmVyIHdobyBoYXMgc3Vic2NyaWJlZC9jb25uZWN0ZWQgdG8gY2hhbm5lbFxuICBcImxpYnR5cGVcIjogXCJub2RlanNcIiwgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgTGlicmFyeSBMYW5nIG9mIHRoZSBtZW1iZXIgd2hvIGhhcyBzdWJzY3JpYmVkL2Nvbm5lY3RlZCB0byBjaGFubmVsXG4gIFwic291cmNlaXB2NFwiOiBcIjAuMC4wLjBcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIElQdjQgb2YgdGhlIG1lbWJlciB3aG8gaGFzIHN1YnNjcmliZWQvY29ubmVjdGVkIHRvIGNoYW5uZWxcbiAgXCJzb3VyY2VpcHY2XCI6IFwiOjoxXCIsIFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIE5vdCBBcHBsaWNhYmxlIGluIGN1cnJlbnQgdmVyc2lvbi5cbiAgXCJzeXNpbmZvXCI6ICd7XCJzeXNpZFwiOlwibmFtZW9mY2FsbGVyXCJ9JyBcdC8vIChzdHJpbmcpIFN5c3RlbSBJbmZvIG9mIHRoZSBtZW1iZXIgd2hvIGhhcyBzdWJzY3JpYmVkL2Nvbm5lY3RlZCB0byBjaGFubmVsXG59XG5gYGBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwicHJzOmNoYW5uZWxOYW1lXCIgLCBcdFx0Ly8gKHN0cmluZykgY2hhbm5lbE5hbWUgdG8gd2hpY2ggc3Vic2NyaXB0aW9uIGlzIGRvbmUuXG4gICAgXCJldmVudG5hbWVcIjogXCJkYnJpZGdlczpwYXJ0aWNpcGFudC5sZWZ0XCIsLy8gKHN0cmluZykgZXZlbnROYW1lIFxuICAgIFwic291cmNlc3lzaWRcIjogXCJuYW1lb2ZjYWxsZXJcIiwgXHRcdFx0Ly8gKHN0cmluZykgU3lzIGlkIG9mIHRoZSBtZW1iZXIgd2hvIGhhcyBzdWJzY3JpYmVkL2Nvbm5lY3RlZCB0byBjaGFubmVsXG4gICAgXCJzcW51bVwiOiBudWxsLFx0XHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJ5ZFIyN3MzWjkyeVF3N3dqR1kybFhcIiwgXHQvLyAoc3RyaW5nKSBTZXNzaW9uIGlkIG9mIHRoZSBtZW1iZXIgd2hvIGhhcyBzdWJzY3JpYmVkL2Nvbm5lY3RlZCB0byBjaGFubmVsXG4gICAgXCJpbnRpbWVcIjogbnVsbFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmNvbm5lY3Quc3VjY2VzcyBcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmBudWxsYCBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOmNvbm5lY3Quc3VjY2Vzc1wiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmNvbm5lY3QuZmFpbCAgXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IGAoZGJlcnJvciBvYmplY3QpYFxuXG5gYGBweXRob25cbntcbiAgICBcInNvdXJjZVwiOiBcImRiZXJyb3IuU291cmNlXCIgLCBcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlLCBSZWZlciBkYmVycm9yOiBmb3IgZGV0YWlsc1xuICAgIFwiY29kZVwiOiBcImRiZXJyb3IuQ29kZVwiLFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgY29kZSwgUmVmZXIgZGJlcnJvcjogZm9yIGRldGFpbHNcbiAgICBcIm1lc3NhZ2VcIjogXCJcIiBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG59XG5gYGBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOmNvbm5lY3QuZmFpbFwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmRpc2Nvbm5lY3Quc3VjY2VzcyBcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmBudWxsYCBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOmRpc2Nvbm5lY3Quc3VjY2Vzc1wiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOmRpc2Nvbm5lY3QuZmFpbCAgXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IGAoZGJlcnJvciBvYmplY3QpYFxuXG5gYGBweXRob25cbntcbiAgICBcInNvdXJjZVwiOiBcImRiZXJyb3IuU291cmNlXCIgLCBcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlLCBSZWZlciBkYmVycm9yOiBmb3IgZGV0YWlsc1xuICAgIFwiY29kZVwiOiBcImRiZXJyb3IuQ29kZVwiLFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgY29kZSwgUmVmZXIgZGJlcnJvcjogZm9yIGRldGFpbHNcbiAgICBcIm1lc3NhZ2VcIjogXCJcIiBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG59XG5gYGBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOmRpc2Nvbm5lY3QuZmFpbFwiLC8vIChzdHJpbmcpIGV2ZW50TmFtZSBcbiAgICBcInNvdXJjZXN5c2lkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcInNxbnVtXCI6IFwiXCIsXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzZXNzaW9uaWRcIjogXCJcIiwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwiaW50aW1lXCI6IFx0ICBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbn1cbmBgYFxuXG4jIyMjIGRicmlkZ2VzOnJlY29ubmVjdC5zdWNjZXNzIFxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbiMjIyMjIyBwYXlsb2FkOiBcblxuYG51bGxgIFxuXG4jIyMjIyMgbWV0YWRhdGEgYChkaWN0KWA6XG5cbmBgYHB5dGhvblxue1xuICAgIFwiY2hhbm5lbG5hbWVcIjogXCJjaGFubmVsTmFtZVwiICwgXHRcdC8vIChzdHJpbmcpIGNoYW5uZWxOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6cmVjb25uZWN0LnN1Y2Nlc3NcIiwvLyAoc3RyaW5nKSBldmVudE5hbWUgXG4gICAgXCJzb3VyY2VzeXNpZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzcW51bVwiOiBcIlwiLFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic2Vzc2lvbmlkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcImludGltZVwiOiBcdCAgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG59XG5gYGBcblxuIyMjIyBkYnJpZGdlczpyZWNvbm5lY3QuZmFpbCAgXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IGAoZGJlcnJvciBvYmplY3QpYFxuXG5gYGBweXRob25cbntcbiAgICBcInNvdXJjZVwiOiBcImRiZXJyb3IuU291cmNlXCIgLCBcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlLCBSZWZlciBkYmVycm9yOiBmb3IgZGV0YWlsc1xuICAgIFwiY29kZVwiOiBcImRiZXJyb3IuQ29kZVwiLFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgY29kZSwgUmVmZXIgZGJlcnJvcjogZm9yIGRldGFpbHNcbiAgICBcIm1lc3NhZ2VcIjogXCJcIiBcdFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBtZXNzYWdlIGlmIGFwcGxpY2FibGUuXG59XG5gYGBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcImNoYW5uZWxuYW1lXCI6IFwiY2hhbm5lbE5hbWVcIiAsIFx0XHQvLyAoc3RyaW5nKSBjaGFubmVsTmFtZSB0byB3aGljaCBzdWJzY3JpcHRpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOnJlY29ubmVjdC5mYWlsXCIsXHRcdFx0XHQvLyAoc3RyaW5nKSBldmVudE5hbWUgXG4gICAgXCJzb3VyY2VzeXNpZFwiOiBcIlwiLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG4gICAgXCJzcW51bVwiOiBcIlwiLFx0XHRcdFx0XHRcdC8vIChzdHJpbmcpIFxuICAgIFwic2Vzc2lvbmlkXCI6IFwiXCIsIFx0XHRcdFx0XHQvLyAoc3RyaW5nKSBcbiAgICBcImludGltZVwiOiBcdCAgXHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgXG59XG5gYGBcblxuIyMjIyBTeXN0ZW0gZXZlbnRzIC0gcGF5bG9hZCAoZGJlcnJvciBvYmplY3QpIC0gZGV0YWlsczpcblxufCBTb3VyY2UgICAgICAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQk5FVF9DSEFOTkVMX1NVQlNDUklCRSAgIHwgRVJSX0ZBSUxfRVJST1IgICAgfCBkYXRhQnJpZGdlcyBuZXR3b3JrIGVuY291bnRlcmVkIGVycm9yIHdoZW4gc3Vic2NyaWJpbmcgdG8gdGhlIGNoYW5uZWwuIHxcbnwgREJORVRfQ0hBTk5FTF9TVUJTQ1JJQkUgICB8IEVSUl9BQ0NFU1NfREVOSUVEIHwgZEJyZGlnZSBuZXR3b3JrIHJlcG9ydGVkICoqYWNjZXNzIHZpb2xhdGlvbioqIHdpdGggYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gZHVyaW5nIHN1YnNjcmlwdGlvbiBvZiB0aGlzIGNoYW5uZWwuIDxiciAvPlZlcmlmeSBpZiBhcHBLZXkgaGFzIHN1ZmZpY2llbnQgcHVibGlzaCBncmFudHMuIExvZ2luIHRvIG1hbmFnZW1lbnQgcG9ydGFsLiBTZWxlY3QgYEVkaXQgS2V5YCBvcHRpb24gYW5kIGNoZWNrIGBBbGxvdyBrZXkgdG8gcHVibGlzaCBtZXNzYWdlcyB0byBwdWJsaWMgY2hhbm5lbHNgIGlzIHNlbGVjdGVkLiB8XG58IERCTElCX0NIQU5ORUxfU1VCU0NSSUJFICAgfCBBQ0NFU1NfVE9LRU4gICAgICB8IGBkYnJpZGdlLmFjY2Vzc190b2tlbmAgZnVuY3Rpb24gcmV0dXJuZWQgZXJyb3IuICAgICAgICAgICAgICB8XG58IERCTkVUX0NIQU5ORUxfVU5TVUJTQ1JJQkUgfCBFUlJfRkFJTF9FUlJPUiAgICB8IGRhdGFCcmlkZ2VzIG5ldHdvcmsgZW5jb3VudGVyZWQgZXJyb3Igd2hlbiB1bnN1YnNjcmliaW5nIHRvIHRoZSBjaGFubmVsLiB8XG58IERCTkVUX0NIQU5ORUxfVU5TVUJTQ1JJQkUgfCBFUlJfQUNDRVNTX0RFTklFRCB8IGRhdGFCcmlkZ2VzIG5ldHdvcmsgcmVwb3J0ZWQgKiphY2Nlc3MgdmlvbGF0aW9uKiogd2l0aCBgYWNjZXNzX3Rva2VuYCBmdW5jdGlvbiBkdXJpbmcgdW5zdWJzY3JpYmluZyBvZiB0aGlzIGNoYW5uZWwuIDxiciAvPlZlcmlmeSBpZiBhcHBLZXkgaGFzIHN1ZmZpY2llbnQgcHVibGlzaCBncmFudHMuIExvZ2luIHRvIG1hbmFnZW1lbnQgcG9ydGFsLiBTZWxlY3QgYEVkaXQgS2V5YCBvcHRpb24gYW5kIGNoZWNrIGBBbGxvdyBrZXkgdG8gcHVibGlzaCBtZXNzYWdlcyB0byBwdWJsaWMgY2hhbm5lbHNgIGlzIHNlbGVjdGVkLiB8XG58IERCTkVUX0NIQU5ORUxfQ09OTkVDVCAgICAgfCBFUlJfRkFJTF9FUlJPUiAgICB8IGRhdGFCcmlkZ2VzIG5ldHdvcmsgZW5jb3VudGVyZWQgZXJyb3Igd2hlbiBzdWJzY3JpYmluZyB0byB0aGUgY2hhbm5lbC4gfFxufCBEQk5FVF9DSEFOTkVMX0NPTk5FQ1QgICAgIHwgRVJSX0FDQ0VTU19ERU5JRUQgfCBkYXRhQnJpZGdlcyBuZXR3b3JrIHJlcG9ydGVkICoqYWNjZXNzIHZpb2xhdGlvbioqIHdpdGggYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gZHVyaW5nIHN1YnNjcmlwdGlvbiBvZiB0aGlzIGNoYW5uZWwuIDxiciAvPlZlcmlmeSBpZiBhcHBLZXkgaGFzIHN1ZmZpY2llbnQgcHVibGlzaCBncmFudHMuIExvZ2luIHRvIG1hbmFnZW1lbnQgcG9ydGFsLiBTZWxlY3QgYEVkaXQgS2V5YCBvcHRpb24gYW5kIGNoZWNrIGBBbGxvdyBrZXkgdG8gcHVibGlzaCBtZXNzYWdlcyB0byBwdWJsaWMgY2hhbm5lbHNgIGlzIHNlbGVjdGVkLiB8XG58IERCTElCX0NIQU5ORUxfQ09OTkVDVCAgICAgfCBBQ0NFU1NfVE9LRU4gICAgICB8IGBkYnJpZGdlLmFjY2Vzc190b2tlbmAgZnVuY3Rpb24gcmV0dXJuZWQgZXJyb3IuICAgICAgICAgICAgICB8XG58IERCTElCX0NIQU5ORUxfRElTQ09OTkVDVCAgfCBFUlJfRkFJTF9FUlJPUiAgICB8IGRhdGFCcmlkZ2VzIG5ldHdvcmsgZW5jb3VudGVyZWQgZXJyb3Igd2hlbiB1bnN1YnNjcmliaW5nIHRvIHRoZSBjaGFubmVsLi4gfFxufCBEQkxJQl9DSEFOTkVMX0RJU0NPTk5FQ1QgIHwgRVJSX0FDQ0VTU19ERU5JRUQgfCBkYXRhQnJpZGdlcyBuZXR3b3JrIHJlcG9ydGVkICoqYWNjZXNzIHZpb2xhdGlvbioqIHdpdGggYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gZHVyaW5nIHVuc3Vic2NyaWJpbmcgb2YgdGhpcyBjaGFubmVsLiA8YnIgLz5WZXJpZnkgaWYgYXBwS2V5IGhhcyBzdWZmaWNpZW50IHB1Ymxpc2ggZ3JhbnRzLiBMb2dpbiB0byBtYW5hZ2VtZW50IHBvcnRhbC4gU2VsZWN0IGBFZGl0IEtleWAgb3B0aW9uIGFuZCBjaGVjayBgQWxsb3cga2V5IHRvIHB1Ymxpc2ggbWVzc2FnZXMgdG8gcHVibGljIGNoYW5uZWxzYCBpcyBzZWxlY3RlZC4gfFxuXG5cblxuLS0tLS0tXG5cblxuXG4jIyBvYmplY3Q6IHJwYyAoUmVtb3RlIFByb2NlZHVyZSBDYWxsKVxuXG5ycGMgb2JqZWN0IGV4cG9zZXMgKip0cnVzdC1zYWZlKiogcHJvcGVydGllcywgZnVuY3Rpb25zIGFuZCBldmVudHMgdG8gcHJvdmlkZSByZWxpYWJsZSB0d28td2F5IG1lc3NhZ2luZyAocmVxdWVzdC1yZXNwb25zZSkgYmV0d2VlbiBtdWx0aXBsZSBlbmRwb2ludHMgYWxsb3dpbmcgeW91IHRvIGJ1aWxkIHNvcGhpc3RpY2F0ZWQgYXN5bmNocm9ub3VzIGludGVyYWN0aW9ucy5cblxuQ29uY2VwdHNcblxuLSBDbGllbnQgYXBwbGljYXRpb24gIGFsbG93cyB5b3UgdG8gZXhlY3V0ZSBSUEMgZnVuY3Rpb25zIGV4cG9zZWQgYnkgc2VydmVyIGFwcGxpY2F0aW9ucy4gXG4tIENsaWVudCBhcHBsaWNhdGlvbiBpcyBjYWxsZWQgQ0FMTEVFIGFuZCB0aGUgc2VydmVyIGFwcGxpY2F0aW9uIGlzIGNhbGxlZCBDQUxMRVIuXG4tIENsaWVudCBhcHBsaWNhdGlvbiB3aWxsIGV4ZWN1dGUgYSByZW1vdGUgZnVuY3Rpb24gYnkgcGFzc2luZyBJTi5wYXJhbXRlciwgYW5kIGEgdGltZW91dFxuICAtIFRoZSBzZXJ2ZXIgYXBwbGljYXRpb24ncyBjb3JyZXNwb25kaW5nIGZ1bmN0aW9uIHdpbGwgYmUgaW52b2tlZCB3aXRoIHRoZSBJTi5wYXJhbWV0ZXIgYW5kIGl0IHdpbGwgcmVzcG9uZCB3aXRoIHJlc3BvbnNlKCkgb3IgZXhjZXB0aW9uKCkgd2hpY2ggd2lsbCBiZSBkZWxpdmVyZWQgYmFjayB0byB0aGUgQ0FMTEVFIGNsaWVudCBhcHBsaWNhdGlvbiBieSBkYXRhQnJpZGdlcyBuZXR3b3JrIGNvbXBsZXRpbmcgdGhlIHJlcXVlc3QtcmVzcG9uc2UgY29tbXVuaWNhdGlvbi5cbi0gIENsaWVudCBhcHBsaWNhdGlvbiBuZWVkIG5vdCBiZSBhd2FyZSBhYm91dCBSUEMgc2VydmVycyBpZGVudGl0eSBhbmQgd2lsbCBvbmx5IGludGVyYWN0IHdpdGggUlBDIHNlcnZlciBuYW1lc3BhY2UuIFRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrIHdpbGwgaW50ZWxsaWdlbnRseSByb3V0ZSBhbmQgbG9hZCBiYWxhbmNlIFJQQyBjYWxsKCkgdG8gdGhlIFJQQyBzZXJ2ZXIgYXBwbGljYXRpb24uIFRoZSBkYXRhQnJpZGdlcyBuZXR3b3JrIHdpbGwgYXV0b21hdGljYWxseSBsb2FkIGJhbGFuY2UgbXVsdGlwbGUgaW5zdGFuY2Ugb2Ygc2VydmVyIGFwcGxpY2F0aW9uIGV4cG9zaW5nIHRoZSBzYW1lIFJQQyBlbmRwb2ludHMuXG4tIFRydXN0LXRva2VucyBhcmUgc3VwcG9ydGVkIGJ5IFJQQyBhcyB3ZWxsLiBZb3Ugd2lsbCBuZWVkIHRvIHBhc3MgYSB0cnVzdC10b2tlbiB3aGVuIHlvdSBjb25uZWN0IHRvIHRoZSBhY2Nlc3MgY29udHJvbGxlZCBSUEMgZW5kcG9pbnQuIEEgdHJ1c3QtdG9rZW4gaXMgYSBKV1QgZG9jdW1lbnQgY3JlYXRlZCB1c2luZyBhIGNvbWJpbmF0aW9uIG9mIHJwYyBzZXJ2ZXIgZW5kcG9pbnQgLyBzZXJ2ZXIgbmFtZSArIHNlc3Npb25pZCArIGFwcC5zZWNyZXQuIFxuICAtIFVzZSB5b3VyIGV4aXN0aW5nIGFjY2VzcyBjb250cm9sLCAgYXV0aG9yaXphdGlvbiBhbmQgc2Vzc2lvbiBpZGVudGlmaWNhdGlvbiBydWxlLXNldCwgcHJvY2VzcyBhbmQgbWV0aG9kcyB0byBjcmVhdGUgYSB0cnVzdC10b2tlbiBpbnN0cnVjdGluZyB0aGUgZGF0YUJyaWRnZXMgcm91dGVyIHRvIGFjY2VwdCB0aGUgcHZ0OiBwcnM6IHJwYyBlbmRwb2ludC9zZXJ2ZXIgY29ubmVjdGlvbiBvZiBmcm9tIGNsaWVudCBhcHBsaWNhdGlvbi5cbi0gVHJ1c3QtdG9rZW5zIGFsbG93cyB5b3UgdG8gZW5hYmxlIHNlY3VyZWQsIGFjY2VzcyBjb250cm9sbGVkIGFuZCBjb21wbGlhbmNlIGRyaXZlbiByZWxpYWJsZSB0d28td2F5IG1lc3NhZ2luZyAocmVxdWVzdC1yZXNwb25zZSkgIGluIHlvdXIgZXhpc3RpbmcgYW5kIG5ldyBpbml0aWF0aXZlIGFwcGxpY2F0aW9ucy5cblxuIyMjIENvbm5lY3QgdG8gU2VydmVyXG5cblRvIHVzZSBycGMgZnVuY3Rpb25zLCB0aGUgYXBwbGljYXRpb24gaGFzIHRvIGNvbm5lY3QgdG8gdGhlIHJwYyBlbmRwb2ludC9zZXJ2ZXIuIFRoaXMgaXMgZG9uZSB1c2luZyBgY29ubmVjdCgpYCBmdW5jdGlvbiBleHBsYWluZWQgYmVsb3cuXG5cbiMjIyMgY29ubmVjdCgpXG5cblRoZSBkZWZhdWx0IG1ldGhvZCBmb3IgY29ubmVjdGluZyB0byBhIHJwYyBlbmRwb2ludC9zZXJ2ZXIgaW52b2x2ZXMgaW52b2tpbmcgdGhlIGBycGMuY29ubmVjdGAgZnVuY3Rpb24gb2YgeW91ciBkYXRhQnJpZGdlcyBvYmplY3QuXG5cbmBgYHB5dGhvblxudHJ5OlxuICAgICBycGNDbGllbnQgPSBkYnJpZGdlLnJwYy5jb25uZWN0KCdycGNTZXJ2ZXInKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiBcdHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5gYGBcblxufCBQYXJhbWV0ZXIgfCBSdWxlcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYHN0cmluZ2AgIHwgKnNlcnZlck5hbWUgICoqT1IqKjxiciAvPioqcHZ0Oioqc2VydmVyTmFtZSAqKk9SKio8YnIgLz4qKnByczoqKnNlcnZlck5hbWUqIHwgKnNlcnZlcipOYW1lIHRvIHdoaWNoIGNvbm5lY3Rpb24gdG8gYmUgZG9uZS4gfFxuXG58IFJldHVybiBUeXBlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgb2JqZWN0YCAgICB8ICpycGNPYmplY3QqIHdoaWNoIGV2ZW50cyBhbmQgcmVsYXRlZCBmdW5jdGlvbnMgY2FuIGJlIGJvdW5kIHRvLiB8XG5cbiMjIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgfCBNZXNzYWdlIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9SUENfQ09OTkVDVCB8IElOVkFMSURfU0VSVkVSTkFNRSAgIHwgICAgICAgICB8IEFwcGxpY2FibGUgZm9yIGJlbG93IGNvbmRpdGlvbnMgPGJyIC8+MS4gKnNlcnZlck5hbWUqIGlzIG5vdCBkZWZpbmVkLjxiciAvPjIuICpzZXJ2ZXJOYW1lKiB2YWxpZGF0aW9uIGVycm9yLCBsZW5ndGggb2YgKnNlcnZlck5hbWUqIGdyZWF0ZXIgdGhhbiAqKjY0Kio8YnIgLz4zLiAqc2VydmVyTmFtZSogdmFsaWRhdGlvbiBlcnJvciwgKnNlcnZlck5hbWUqIGZhaWxzIGBhLXpBLVowLTlcXC46Xy1gIHZhbGlkYXRpb24uPGJyIC8+NC4gKnNlcnZlck5hbWUqIGNvbnRhaW5zIGA6YCBhbmQgZmlyc3QgdG9rZW4gaXMgbm90IGBwdnQscHJzYC4gfFxufCBEQkxJQl9SUENfQ09OTkVDVCB8IE5FVFdPUktfRElTQ09OTkVDVEVEIHwgICAgICAgICB8IENvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBub3QgYWN0aXZlLiAgICAgICAgICAgICB8XG58IERCTkVUX1JQQ19DT05ORUNUIHwgRVJSX0ZBSUxfRVJST1IgICAgICAgfCAgICAgICAgIHwgZGF0YUJyaWRnZXMgbmV0d29yayBlbmNvdW50ZXJlZCBlcnJvciBkdXJpbmcgY3VycmVudCBvcGVyYXRpb24uIHxcbnwgREJORVRfUlBDX0NPTk5FQ1QgfCBFUlJfQUNDRVNTX0RFTklFRCAgICB8ICAgICAgICAgfCBkYXRhQnJpZGdlcyBuZXR3b3JrIHJlcG9ydGVkICoqYWNjZXNzIHZpb2xhdGlvbioqIHdpdGggYGFjY2Vzc190b2tlbmAgZnVuY3Rpb24gZHVyaW5nIGN1cnJlbnQgb3BlcmF0aW9uLjxiciAvPlZlcmlmeSBpZiBhcHBLZXkgaGFzIHN1ZmZpY2llbnQgcHVibGlzaCBncmFudHMuIExvZ2luIHRvIG1hbmFnZW1lbnQgcG9ydGFsLiBTZWxlY3QgYEVkaXQgS2V5YCBvcHRpb24gYW5kIGNoZWNrIGBBbGxvdyBrZXkgdG8gYWNjZXNzIFJQQyBmdW5jdGlvbnNgIGlzIHNlbGVjdGVkLiB8XG5cbiMjIyBTZXJ2ZXIgSW5mb3JtYXRpb25cblxuIyMjIyBpc09ubGluZSgpXG5cbio8dT5ycGNPYmplY3Q8L3U+KiBwcm92aWRlcyBhIGZ1bmN0aW9uIHRvIGNoZWNrIGlmIHRoZSBjaGFubmVsIGlzIG9ubGluZS4gXG5cbmBgYHB5dGhvblxuaXNvbmxpbmUgPSBycGNDbGllbnQuaXNPbmxpbmUoKSBcbmBgYFxuXG58IFBhcmFtZXRlciB8IFJ1bGVzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYHN0cmluZ2AgIHwgKnNlcnZlck5hbWUgICoqT1IqKjxiciAvPioqcHZ0Oioqc2VydmVyTmFtZSAqKk9SKio8YnIgLz4qKnByczoqKnNlcnZlck5hbWUqIHwgKnNlcnZlcipOYW1lIHRvIHdoaWNoIHN1YnNjcmlwdGlvbiB0byBiZSBkb25lLiB8XG5cbnwgUmV0dXJuIFZhbHVlcyB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgYm9vbGVhbmAgICAgIHwgSXMgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHNlcnZlciBjb25uZWN0aW9uIG9ubGluZSBvciBvZmZsaW5lLiB8XG5cbiMjIyMgZ2V0U2VydmVyTmFtZSgpIFxuXG4qPHU+cnBjT2JqZWN0PC91PiogcHJvdmlkZXMgYSBmdW5jdGlvbiB0byBnZXQgdGhlICpzZXJ2ZXJOYW1lKi4gXG5cbmBgYHB5dGhvblxuc2VydmVyTmFtZSA9IHJwY0NsaWVudC5nZXRTZXJ2ZXJOYW1lKCkgXG5gYGBcblxufCBSZXR1cm4gVHlwZSB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYHN0cmluZ2AgICAgfCAqc2VydmVyTmFtZSogb2YgY29ubmVjdGVkIHJwY1NlcnZlci4gfFxuXG4jIyMgRXhlY3V0ZSBSZW1vdGUgUHJvY2VkdXJlIENhbGxcblxuIyMjIyBjYWxsKCkgXG5cbio8dT5ycGNPYmplY3Q8L3U+KiAgY2FsbCgpIGZ1bmN0aW9uIGFsbG93cyB5b3UgdG8gZXhlY3V0ZSBhIHJlbW90ZSBmdW5jdGlvbiBob3N0ZWQgYnkgUlBDIGVuZHBvaW50IC8gc2VydmVyIHVzaW5nIGRhdGFCcmlkZ2VzIHNlcnZlciBsaWJyYXJ5XG5cbi0gcGFzc2luZyBmdW5jdGlvbiBwYXJhbWV0ZXIgYXMgcGFyYW1ldGVyXG4tIHdoaWxlIHNldHRpbmcgYW4gdGltZSB0byBsaXZlIChUVEwpIGZvciB0aGUgcmVzcG9uc2UgXG5cblRoZSBSUEMgY2FsbCgpIGZ1bmN0aW9ucyBzdXBwb3J0cyBtdWx0aXBhcnQgcmVzcG9uc2UgKHdoZXJlIHRoZSBSUEMgZnVuY3Rpb24gY2FuIHNlbmQgYmFjayBtdWx0aXBsZSByZXNwb25zZXMgdG8gYSBzaW5nbGUgUlBDIGZ1bmN0aW9uIGNhbGwpIGFsb25nIHdpdGggZXhjZXB0aW9uIHJvdXRpbmUuXG5cbmBgYHB5dGhvblxuZGVmIHByb2dyZXNzKHJlc3BvbnNlKTpcblx0cHJpbnQoXCJtdWx0aXBhcnQ6IFwiICwgcmVzcG9uc2UpXG5cbmRlZiBvblJlc3VsdChyZXNwb25zZSk6XG5cdHByaW50KFwicmVzcG9uc2U6IFwiLCByZXNwb25zZSlcblxuZGVmIG9uRXJyb3IoZXJyb3IpOlxuXHRwcmludChlcnJvci5jb2RlLCBlcnJvci5zb3VyY2UsIGVycm9yLm1lc3NhZ2UpXG4gIFxudHJ5OlxuICAgIHAgPSAgYXdhaXQgcnBjQ2xpZW50LmNhbGwoXCJmdW5jdGlvbk5hbWVcIiAsICBwYXJhbWV0ZXIgLCAxMDAwMCwgcHJvZ3Jlc3MpXG4gICAgcC50aGVuKG9uUmVzdWx0KS5jYXRjaChvbkVycm9yKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgICBwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuXG4jIEJlbG93IGV4YW1wbGUgaG93IGEgYXBwbGljYXRpb24gY2FuIGNvbm5lY3QgdG8gYSBSUEMgZW5kcG9pbnQgLyBTZXJ2ZXIgY2FsbGVkIG1hdGhTZXJ2ZXIgYW5kIHVzZSBhZGQsIG11bHRpcGx5IGZ1bmN0aW9ucy5cbnRyeTpcbiAgICBteU1hdGhTZXJ2ZXIgPSBkYnJpZGdlLnJwYy5jb25uZWN0KCdtYXRoU2VydmVyJyk7XG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICAgIHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5cbm9iaiA9IHsgXCJudW0xXCI6NDQuNSwgXCJudW0yXCI6MzB9O1xuaW5wYXJhbSA9IGpzb24uZHVtcHMob2JqKTtcblxudHJ5OlxuICAgIHAgPSAgYXdhaXQgbXlNYXRoU2VydmVyLmNhbGwoYWRkICwgIGlucGFyYW0gLCAxMDAwMCwgcHJvZ3Jlc3MpXG4gICAgcC50aGVuKG9uUmVzdWx0KS5jYXRjaChvbkVycm9yKVxuXG4gICAgcSA9ICBhd2FpdCBteU1hdGhTZXJ2ZXIuY2FsbChtdWx0aXBseSAsICBpbnBhcmFtICwgMTAwMDAsIHByb2dyZXNzKVxuICAgIHEudGhlbihvblJlc3VsdCkuY2F0Y2gob25FcnJvcilcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gICAgcHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcbmBgYFxuXG5cblxufCBQYXJhbWV0ZXIgICAgICB8IEV4cGVjdGVkIFZhbHVlICAgICAgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBmdW5jdGlvbk5hbWVgIHwgKmZ1bmN0aW9ubmFtZSogICAgICAgfCAqKHN0cmluZykqIEZ1bmN0aW9uIG5hbWUgYXMgZGVmaW5lZCBpbiAqcnBjIGVuZHBvaW50LyBTZXJ2ZXIqIC4gPGJyIC8+Tm90ZSAtIFJQQyBlbmRwb2ludCAvIHNlcnZlciBjYW4gZXhwb3NlIG11bHRpcGxlIHJwYyBmdW5jdGlvbnMuIHxcbnwgcGFyYW1ldGVyICAgICAgfCAqZnVuY3Rpb24gcGFyYW1ldGVyKiB8ICooc3RyaW5nKSogaWYgbXVsdGlwbGUgcGFyYW1ldGVycyB0byBiZSBwYXNzZWQsIFRoaXMgY2FuIGJlIGRvbmUgYnkgcHV0dGluZyBpdCBpbnRvIGFycmF5IG9yIGpzb24gYW5kIHN0cmluZ2lmeSB0aGUgb2JqZWN0LiB8XG58IHR0bG1zICAgICAgICAgIHwgYDEwMDBgICAgICAgICAgICAgICAgfCAqKGludGVnZXIpKiBUaW1lIHRvIGxpdmUgaW4gbWlsbGlzZWNvbmQsIHRpbWVvdXQgdmFsdWUgYmVmb3JlIHRoZSBjYWxsKCkgZnVuY3Rpb24gdGhyb3dzIGVycm9yIHRpbWVvdXQuIHxcblxufCBSZXR1cm4gVmFsdWVzIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBzdHJpbmdgICAgICAgfCBNdWx0aXBhcnQgb3IgZmluYWwgcmVzcG9uc2UuIGluIGNhc2Ugb2YgZXJyb3IsIGRiZXJyb3Igb2JqZWN0IGlzIHJldHVybmVkLiB8XG5cbiMjIyMjIEV4Y2VwdGlvbnM6IFxuXG58IFNvdXJjZSAgICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTkVUX1JQQ19DQUxMICAgICAgIHwgTkVUV09SS19ESVNDT05ORUNURUQgICAgICB8IENvbm5lY3Rpb24gdG8gZGF0YUJyaWRnZXMgbmV0d29yayBpcyBub3QgYWN0aXZlLiAgICAgICAgICAgICAgfFxufCBEQk5FVF9SUENfQ0FMTCAgICAgICB8IFJFU1BPTlNFX1RJTUVPVVQgICAgICAgICAgfCBjYWxsKCkgcmVzcG9uc2Ugbm90IHJlY2VpdmVkIHdpdGhpbiBkZWZpbmVkIGB0dGxtc2AuIHxcbnwgREJMSUJfUlBDX0NBTEwgICAgICAgfCBJRF9HRU5FUkFUSU9OX0ZBSUxFRCAgICAgIHwgSW50ZXJuYWwgTGlicmFyeSBlcnJvci4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgREJORVRfUlBDX0NBTEwgICAgICAgfCBFUlJfQUNDRVNTX0RFTklFRCAgICAgICAgIHwgZGF0YUJyaWRnZXMgbmV0d29yayByZXBvcnRlZCAqKmFjY2VzcyB2aW9sYXRpb24qKiB3aXRoIGBhY2Nlc3NfdG9rZW5gIGZ1bmN0aW9uIGR1cmluZyBjdXJyZW50IG9wZXJhdGlvbi48YnIgLz5WZXJpZnkgaWYgYXBwS2V5IGhhcyBzdWZmaWNpZW50IHB1Ymxpc2ggZ3JhbnRzLiBMb2dpbiB0byBtYW5hZ2VtZW50IHBvcnRhbC4gU2VsZWN0IGBFZGl0IEtleWAgb3B0aW9uIGFuZCBjaGVjayBgQWxsb3cga2V5IHRvIGFjY2VzcyBSUEMgZnVuY3Rpb25zYCBpcyBzZWxlY3RlZC4gfFxufCBEQlJQQ0NBTExFRV9SUENfQ0FMTCB8IEVSUl9gZXJyb3JfY29kZWAgICAgICAgICAgfCBUaGlzIGluZGljYXRlcyBhbiBleGNlcHRpb24gZW5jb3VudGVyZWQgYnkgdGhlIHJlbW90ZSBSUEMgZnVuY3Rpb24uIEVSUl9lcnJvcl9jb2RlIHdpbGwgaGF2ZSB0aGUgZGV0YWlscy4gfFxufCBEQk5FVF9SUENfQ0FMTCAgICAgICB8IENMRV9OUl8xMDg2NSAgICAgICAgIHwgcnBjIGVuZHBvaW50IC8gc2VydmVyIGRpc2Nvbm5lY3RlZCBmcm9tIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIFRyeSBhZ2Fpbi4gfFxufCBEQk5FVF9SUENfQ0FMTCAgICAgICB8IENMRV9OUl8zMDM5MSAgICAgICAgIHwgcnBjIGVuZHBvaW50IC8gc2VydmVyIGRpc2Nvbm5lY3RlZCBmcm9tIGRhdGFCcmlkZ2VzIG5ldHdvcmsuIFRyeSBhZ2Fpbi4gfFxufCBEQk5FVF9SUENfQ0FMTCAgICAgICB8IENMRV9RWF80MTA3NCAgICAgICAgIHwgQ2Fubm90IHByb2Nlc3MgdGhlIGNhbGwoKSBiZWNhdXNlIHRoZSBSUEMgc2VydmVyIChpbiB0aGlzIGNhc2UgQ0FMTEVFKSBoYXMgZXhjZWVkZWQgb3V0c3RhbmRpbmcgcGVuZGluZyBycGMgY2FsbCgpIHF1ZXVlIGxpbWl0LiB8XG58IERCTkVUX1JQQ19DQUxMICAgICAgIHwgQ0xFX1FYXzQ5NDY3ICAgICAgICAgfCBDYW5ub3QgcHJvY2VzcyB0aGUgY2FsbCgpIGJlY2F1c2UgdGhlIFJQQyBzZXJ2ZXIgKGluIHRoaXMgY2FzZSBDQUxMRUUpIGhhcyBleGNlZWRlZCBvdXRzdGFuZGluZyBwZW5kaW5nIHJwYyBjYWxsKCkgcXVldWUgbGltaXQuIHxcbnwgREJORVRfUlBDX0NBTEwgICAgICAgfCBDTFJfUVhfMzkzMDUgICAgICAgICB8IENhbm5vdCBwcm9jZXNzIHRoZSBjYWxsKCkgYmVjYXVzZSB0aGUgYXBwbGljYXRpb24gKGluIHRoaXMgY2FzZSBDQUxMRVIpIGhhcyBleGNlZWRlZCBvdXRzdGFuZGluZyBwZW5kaW5nIHJwYyBjYWxsKCkgcXVldWUgbGltaXQuIHxcbnwgREJORVRfUlBDX0NBTEwgICAgICAgfCBDTFJfUVhfMzk4MjQgICAgICAgICB8IENhbm5vdCBwcm9jZXNzIHRoZSBjYWxsKCkgYmVjYXVzZSB0aGUgYXBwbGljYXRpb24gKGluIHRoaXMgY2FzZSBDQUxMRVIpIGhhcyBleGNlZWRlZCBvdXRzdGFuZGluZyBwZW5kaW5nIHJwYyBjYWxsKCkgcXVldWUgbGltaXQuIHxcbnwgREJORVRfUlBDX0NBTEwgICAgICAgfCBSRV8yODcxMCAgICAgICAgICAgICB8IHJwYyBlbmRwb2ludCAvIHNlcnZlciBkaXNjb25uZWN0ZWQgZnJvbSBkYXRhQnJpZGdlcyBuZXR3b3JrLiBUcnkgYWdhaW4uIHxcbnwgREJORVRfUlBDX0NBTEwgICAgICAgfCBBRF80ODYyMSAgICAgICAgICAgICB8IEFwcGxpY2F0aW9uIGRvZXMgbm90IGhhdmUgYWNjZXNzIHRvIGV4ZWN1dGUgcnBjIGZ1bmN0aW9ucy4gfFxuXG4jIyMgU3lzdGVtIGV2ZW50cyBmb3IgcnBjIG9iamVjdFxuXG5UaGVyZSBhcmUgYSBudW1iZXIgb2YgZXZlbnRzIHdoaWNoIGFyZSB0cmlnZ2VyZWQgaW50ZXJuYWxseSBieSB0aGUgbGlicmFyeSwgYnV0IGNhbiBhbHNvIGJlIG9mIHVzZSBlbHNld2hlcmUuIEJlbG93IGFyZSB0aGUgbGlzdCBvZiBhbGwgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGUgbGlicmFyeS5cblxuQmVsb3cgc3ludGF4IGlzIHNhbWUgZm9yIGFsbCBzeXN0ZW0gZXZlbnRzLlxuXG5gYGBweXRob25cbiMgICBCaW5kaW5nIHRvIHN5c3RlbWV2ZW50IG9uIHJwY09iamVjdCAgXG50cnk6XG5cdHJwY0NsaWVudC5iaW5kKFwiZXZlbnROYW1lXCIsIGV2ZW50Q2FsbGJhY2spXG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICAgIHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5cbiMgIEJpbmRpbmcgdG8gc3lzdGVtZXZlbnQgb24gcnBjT2JqZWN0ICBcbnRyeTpcbiAgIFx0ZGJyaWRnZS5ycGMuYmluZChcImV2ZW50TmFtZVwiLCBldmVudENhbGxiYWNrKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgICBwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuYGBgXG5cbiMjIyMgYGJpbmRfYWxsYCBhbmQgYHVuYmluZF9hbGxgXG5cbmBiaW5kX2FsbGAgYW5kIGB1bmJpbmRfYWxsYCB3b3JrIG11Y2ggbGlrZSBgYmluZGAgYW5kIGB1bmJpbmRgLCBidXQgaW5zdGVhZCBvZiBvbmx5IGZpcmluZyBjYWxsYmFja3Mgb24gYSBzcGVjaWZpYyBldmVudCwgdGhleSBmaXJlIGNhbGxiYWNrcyBvbiBhbnkgZXZlbnQsIGFuZCBwcm92aWRlIHRoYXQgZXZlbnQgaW4gdGhlIG1ldGFkYXRhICB0byB0aGUgaGFuZGxlciBhbG9uZyB3aXRoIHRoZSBwYXlsb2FkLiBcblxuYGBgcHl0aG9uXG4jIEJpbmRpbmcgdG8gcnBjIGV2ZW50cyBvbiBycGNPYmplY3QgIFxuZGVmIGV2ZW50RnVuY3Rpb24ocGF5bG9hZCAsICBtZXRhZGF0YSk6XG4gIFx0cHJpbnQocGF5bG9hZCAsIG1ldGFkYXRhKVxuXG50cnk6XG4gICAgcnBjQ2xpZW50LmJpbmRfYWxsKCdldmVudE5hbWUnLCAgZXZlbnRGdW5jdGlvbilcbmV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gIFx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKSBcblxuIyBCaW5kaW5nIHRvIHJwYyBldmVudHMgb24gZGJyaWRnZU9iamVjdCBcbnRyeSB7XG4gICAgZGJyaWRnZS5ycGMuYmluZF9hbGwoJ2V2ZW50TmFtZScsIGV2ZW50RnVuY3Rpb24pXG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICBcdHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5gYGBcblxuQ2FsbGJhY2sgb3V0IHBhcmFtZXRlciBgcGF5bG9hZCwgbWV0YWRhdGFgIGRldGFpbHMgYXJlIGV4cGxhaW5lZCB3aXRoIGVhY2ggZXZlbnQgYmVsb3cgaW4gdGhpcyBkb2N1bWVudC5cblxuIyMjIyMgRXhjZXB0aW9uczogXG5cbnwgU291cmNlICAgICAgICAgICAgIHwgQ29kZSAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DT05ORUNUX0JJTkQgfCBJTlZBTElEX0NBTExCQUNLIHwgSWYgKlwiY2FsbGJhY2sgZnVuY3Rpb25cIiogaXMgbm90IGRlY2xhcmVkICoqb3IqKiBgdHlwZW9mKClgIHZhcmlhYmxlIGRlZmluZWQgaXMgbm90IGEgKlwiZnVuY3Rpb25cIiouIHxcblxuYHVuYmluZF9hbGxgIHdvcmtzIHNpbWlsYXJseSB0byBgdW5iaW5kYC5cblxuYGBgcHl0aG9uXG4jIFJlbW92ZSBqdXN0IGBoYW5kbGVyYCBjb25uZWN0ZWQgcnBjIHNlcnZlciBcbnJwY0NsaWVudC51bmJpbmRfYWxsKGhhbmRsZXIpXG5cbiMgUmVtb3ZlIGFsbCBoYW5kbGVycyBmb3IgdGhlIGFsbCBldmVudCBpbiB0aGUgY29ubmVjdGVkIHJwYyBzZXJ2ZXJcbnJwY0NsaWVudC51bmJpbmRfYWxsKClcblxuIyBSZW1vdmUgYGhhbmRsZXJgIGFjcm9zcyB0aGUgY29ubmVjdGVkIHJwYyBzZXJ2ZXJzXG5kYnJpZGdlLnJwYy51bmJpbmRfYWxsKGhhbmRsZXIpXG5cbiMgUmVtb3ZlIGFsbCBoYW5kbGVycyBmb3IgYWxsIGV2ZW50cyBhY3Jvc3MgYWxsIGNvbm5lY3RlZCBycGMgc2VydmVyc1xuZGJyaWRnZS5ycGMudW5iaW5kX2FsbCgpXG5gYGBcblxuIyMjIyBkcmlkZ2VzOnJwYy5zZXJ2ZXIuY29ubmVjdC5zdWNjZXNzXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IFxuXG5gbnVsbGAgXG5cbiMjIyMjIyBtZXRhZGF0YSBgKGRpY3QpYDpcblxuYGBgcHl0aG9uXG57XG4gICAgXCJzZXJ2ZXJuYW1lXCI6IFwic2VydmVyTmFtZVwiICwgXHRcdFx0XHRcdC8vIChzdHJpbmcpIHNlcnZlck5hbWUgdG8gd2hpY2ggY29ubmVjdGlvbiBpcyBkb25lLlxuICAgIFwiZXZlbnRuYW1lXCI6IFwiZGJyaWRnZXM6cnBjLnNlcnZlci5jb25uZWN0LnN1Y2Nlc3NcIiwgLy8gKHN0cmluZykgZXZlbnROYW1lIFxufVxuYGBgXG5cbiMjIyMgZGJyaWRnZXM6cnBjLnNlcnZlci5jb25uZWN0LmZhaWxcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogYChkYmVycm9yIG9iamVjdClgXG5cbmBgYHB5dGhvblxue1xuICAgIFwic291cmNlXCI6IFwiREJMSUJfUlBDX0NPTk5FQ1RcIiAsIFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlXG4gICAgXCJjb2RlXCI6IFwiQUNDRVNTX1RPS0VOX0ZBSUxcIixcdFx0XHQvLyAoc3RyaW5nKSBFcnJvciBjb2RlIFxuICAgIFwibWVzc2FnZVwiOiBcIlwiIFx0XHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgbWVzc2FnZSBpZiBhcHBsaWNhYmxlLlxufVxuYGBgXG5cbiMjIyMjIyBtZXRhZGF0YSBgKGRpY3QpYDpcblxuYGBgcHl0aG9uXG57XG4gICAgXCJzZXJ2ZXJuYW1lXCI6IFwic2VydmVyTmFtZVwiICwgXHRcdFx0XHQvLyAoc3RyaW5nKSBzZXJ2ZXJOYW1lIHRvIHdoaWNoIGNvbm5lY3Rpb24gaXMgZG9uZS5cbiAgICBcImV2ZW50bmFtZVwiOiBcImRicmlkZ2VzOnJwYy5zZXJ2ZXIuY29ubmVjdC5mYWlsXCIsLy8gKHN0cmluZykgZXZlbnROYW1lIFxufVxuYGBgXG5cbiMjIyMgZGJyaWRnZXM6cnBjLnNlcnZlci5vbmxpbmVcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmBudWxsYCBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcInNlcnZlcm5hbWVcIjogXCJzZXJ2ZXJOYW1lXCIgLCBcdFx0ICAgLy8gKHN0cmluZykgc2VydmVyTmFtZSB0byB3aGljaCBjb25uZWN0aW9uIGlzIGRvbmUuXG4gICAgXCJldmVudG5hbWVcIjogXCJkYnJpZGdlczpycGMuc2VydmVyLm9ubGluZVwiLCAvLyAoc3RyaW5nKSBldmVudE5hbWUgXG59XG5gYGBcblxuIyMjIyBkYnJpZGdlczpycGMuc2VydmVyLm9mZmxpbmVcblxuIyMjIyMgQ2FsbGJhY2sgcGFyYW1ldGVyc1xuXG4jIyMjIyMgcGF5bG9hZDogXG5cbmBudWxsYCBcblxuIyMjIyMjIG1ldGFkYXRhIGAoZGljdClgOlxuXG5gYGBweXRob25cbntcbiAgICBcInNlcnZlcm5hbWVcIjogXCJzZXJ2ZXJOYW1lXCIgLCBcdFx0XHRcdFx0Ly8gKHN0cmluZykgc2VydmVyTmFtZSB0byB3aGljaCBjb25uZWN0aW9uIGlzIGRvbmUuXG4gICAgXCJldmVudG5hbWVcIjogXCJkYnJpZGdlczpycGMuc2VydmVyLm9mZmxpbmVcIiwvLyAoc3RyaW5nKSBldmVudE5hbWUgXG59XG5gYGBcblxuIyMjIyBkYmVycm9yOiAgXG5cbnwgU291cmNlICAgICAgICAgICAgfCBDb2RlICAgICAgICAgICAgICB8IE1lc3NhZ2UgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9SUENfQ09OTkVDVCB8IEFDQ0VTU19UT0tFTl9GQUlMIHwgICAgICAgICAgICAgICAgIHwgU3BlY2lmaWMgdG8gKipwcml2YXRlKiogYChwdnQ6KWAgb3IgKipwcmVzZW5jZSoqIChgcHJzOmApIHJwYyBjYWxsLiBBY2Nlc3MgdG9rZW4gdmFsaWRhdGlvbiBmYWlsZWQgYXQgZGF0YUJyaWRnZXMgbmV0d29yay4gfFxufCBEQkxJQl9SUENfQ09OTkVDVCB8IEFDQ0VTU19ERU5JRUQgICAgIHwgYGVycm9yX21lc3NhZ2VgIHwgU3BlY2lmaWMgdG8gKipwcml2YXRlKiogYChwdnQ6KWAgb3IgKipwcmVzZW5jZSoqIChgcHJzOmApIHJwYyBjYWxsLiBUaGlzIGlzIHJldHVybmVkIGJ5IHRoZSBgYWNjZXNzX3Rva2VuYCBmdW5jdGlvbiBleGVjdXRpb24gYmVmb3JlIGBjYWxsKClgIGlzIG1hZGUuIHxcblxuXG5cbi0tLS0tLVxuXG5cblxuIyMgb2JqZWN0OkNmIChDbGllbnQgRnVuY3Rpb24pXG5cbkNGIChDbGllbnQtZnVuY3Rpb24pIG9iamVjdCBpcyBhIHNwZWNpYWwgcHVycG9zZSBSUEMgfCByZXF1ZXN0LXJlc3BvbnNlIGltcGxlbWVudGF0aW9uIHRvIGJ1aWxkIGNvbW1hbmQgYW5kIGNvbnRyb2wgYXBwbGljYXRpb25zLiBDRiBvYmplY3QgZXhwb3NlcyBwcm9wZXJ0aWVzLCBmdW5jdGlvbnMgYW5kIGV2ZW50cyBmb3IgY29tbWFuZCBhbmQgY29udHJvbCBzZXJ2ZXIgYXBwbGljYXRpb25zIHRvIHNlbmQgbWVzc2FnZXMgdG8gZGV2aWNlcyBhbmQgYXBwbGljYXRpb24gdXNpbmcgZGF0YUJyaWRnZXMgbGlicmFyeSBpbiAqKnRydXN0LXNhZmUgbWFubmVyICoqLCBidWlsZCBzbWFydCB1cGRhdGUgY29uZmlndXJhdGlvbiBzeXN0ZW0gYW5kIGltcGxlbWVudCAqKnRydXN0LXNhZmUgKiogYWN0aW9ucyBmb3IgcmVtb3RlIGFuZCBhdXRvbWF0ZWQgbWFuYWdlbWVudC5cblxuQ0YgUkVEVUNFUyBIVUdFIEVOR0lORUVSSU5HIFRJTUUgRUZGT1JUIFJFUVVJUkVEIFRPIERFU0lHTiwgQlVJTEQgQU5EIE1BSU5UQUlOIEEgUk9CVVNUIENPTU1BTkQtQ09OVFJPTCBJTkZSQVNUUlVDVFVSRS5cblxuLSBBIGNsaWVudCBmdW5jdGlvbihzKSAgaXMgYSBjYWxsYmFjayBmdW5jdGlvbiBleHBvc2VkIGJ5IHRoZSBjbGllbnQgbGlicmFyeSBhcyBhIFJQQyAocmVtb3RlIHByb2NlZHVyZSBjYWxsKS4gXG4tIFNlcnZlciBhcHBsaWNhdGlvbiAodXNpbmcgZGF0YUJyaWRnZXMgc2VydmVyIGxpYnJhcnkpLCBjYW4gZXhlY3V0ZSB0aGUgQ0YgZnVuY3Rpb24gcmVtb3RlbHkuXG5cbkNvbmNlcHRzXG5cbi0gQ0YgKGNsaWVudC1mdW5jdGlvbikgc2ltcGxpZmllcyB0aGUgY29tYW5kIGFuZCBjb250cm9sIHR5cGUgYXBwbGljYXRpb24gZGVzaWduIGFuZCBtYWludGVuYW5jZS4gXG4tIGlPVCBhbmQgbGFyZ2UgZGlzdHJpYnV0ZWQgc3lzdGVtIHJlcXVpcmVzIGEgc3RhbmRhcmQsIHNlY3VyZWQgYW5kIGNvbXBsaWFudCBtZXRob2QgdG8gc2VuZCByZWxpYWJsZSAgcmVxdWVzdC1yZXNwb25zZSBjb21tdW5pY2F0aW9uIHRvIHRoZSBtYW5hZ2VkIGRldmljZXMgZnJvbSBhdXRoZW50aWNhdGVkIGFuZCBhdXRob3JpemVkIENvbW1hbmQtYW5kLUNvbnRyb2wgc2VydmVyIGFwcGxpY2F0aW9ucy4gZGF0YUJyaWRnZXMgQ0YgYWxsb3dzIHlvdSB5b3UgdG8gZXhwb3NlIGRldmljZSBmdW5jdGlvbnMgYW5kIGNhcGFiaWxpdGllcyBpbiBhIGVhc3ksIHNlY3VyZWQgbWFubmVyIGFsbG93aW5nIG9ubHkgYXV0aG9pcml6ZWQgZGF0YUJyaWRnZXMgc2VydmVyIGFwcGxpY2F0aW9ucyB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBkZXZpY2VzLCByZW1vdGUgYXBwbGljYXRpb25zLlxuLSBPbmx5IHNlcnZlciBhcHBsaWNhdGlvbiB1c2luZyBkYXRhQnJpZGdlcyBzZXJ2ZXIgbGlicmFyeSArIGFwcGxpY2F0aW9uIGtleSBzZWNyZXQgY2FuIGV4ZWN1dGUgQ0YgZnVuY3Rpb25zIGV4cG9zZWQgYnkgcmVtb3RlIGRldmljZXMuIFxuICAtIFRoZSBzZXJ2ZXIgYXBwbGljYXRpb24gaXMgY2FsbGVkIENBTExFUiAodGhlIG9uZSBleGVjdXRpbmcgY2YuY2FsbCgpIGZ1bmN0aW9uKVxuICAtIFRoZSBzZXJ2ZXIgYXBwbGljYXRpb24gbmVlZHMgdG8ga25vdyB0aGUgc2Vzc2lvbklEIG9mIHRoZSBkZXZpY2UgdG8gd2hpY2ggaXQgbmVlZHMgdG8gY29tbXVuaWNhdGUuXG4gIC0gVGhlIGRldmljZSBhcHBsaWNhdGlvbiBleHBvc2luZyBjb21tYW5kIGZ1bmN0aW9ucyBpcyBjYWxsZWQgQ0FMTEVFLiBPbmx5IGF1dGhlbnRpY2F0ZWQgYW5kIGF1dGhvcml6ZWQgc2VydmVyIGFwcGxpY2F0aW9uIHdpbGwgYmUgYWxsb3dlZCB0byBjb21tdW5pY2F0ZSB3aXRoIHRoZSBkZXZpY2UgYXBwbGljYXRpb24gZm9yIGRldmljZSAvIGFwcGxpY2F0aW9uIG1hbmFnZW1lbnQuXG5cbiMjIyBQcm9wZXJ0aWVzXG5cblRoZSBmb2xsb3dpbmcgaXMgdGhlIGxpc3Qgb2YgKmNmKiBwcm9wZXJ0aWVzLiBUaGVzZSBwcm9wZXJ0aWVzIGhhcyB0byBiZSBzZXQgYmVmb3JlIGBkYnJpZGdlLmNvbm5lY3QoKWBcblxufCBQcm9wZXJ0eSAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgYGVuYWJsZWAgICAgfCAqKGJvb2xlYW4pKiBgKGRlZmF1bHQ6ZmFsc2UpYCBJZiBhcHBsaWNhdGlvbiB3YW50cyB0byBlbmFibGUgKmNsaWVudEZ1bmN0aW9uKiBmdW5jdGlvbmFsaXR5LCB0aGlzIG5lZWRzIHRvIGJlIGB0cnVlYCBlbHNlIGBmYWxzZWAuIHxcbnwgYGZ1bmN0aW9uc2AgfCAqKGZ1bmN0aW9uKSogQSBjbGllbnQgZnVuY3Rpb24ocykgIGlzIGEgY2FsbGJhY2sgZnVuY3Rpb24gZXhwb3NlZCBieSB0aGUgY2xpZW50IGxpYnJhcnkgYXMgYSBSUEMgKHJlbW90ZSBwcm9jZWR1cmUgY2FsbCkuIHxcblxuIyMjIyBlbmFibGU6XG5cbllvdSBuZWVkIHRvIGVuYWJsZSBjZiBpbiB0aGUgY29ubmVjdGlvbiBwcm9wZXJ0eS5cblxuYGBgcHl0aG9uXG5kYnJpZGdlLmNmLmVuYWJsZSA9IFRydWVcbmBgYFxuXG4jIyMjIGZ1bmN0aW9uczpcblxuQXBwbGljYXRpb24gY2FuIGV4cG9zZSBjYWxsYmFjayBmdW5jdGlvbihzKSBhcyBDbGllbnQgZnVuY3Rpb24gKHNwZWNpYWwgY2FzZSBSUEMgfCBSZXF1ZXN0LVJlc3BvbnNlKS4gU2VydmVyIGFwcGxpY2F0aW9uIHVzaW5nIGRhdGFCcmlkZ2VzIHNlcnZlciBsaWJyYXJ5IGNhbiByZW1vdGVseSBleGVjdXRlIHRoZSBjbGllbnQgZnVuY3Rpb25zLiBFYWNoIGZ1bmN0aW9uIG5lZWRzIHRvIGJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgbGlicmFyeSBhcyBhIGNsaWVudCBmdW5jdGlvbiAoQ0YpLCB1c2luZyBgZGJyaWRnZS5jZi5yZWdmbigpYHdoZXJlIHlvdSBjYW4gbGluayB0aGUgZnVuY3Rpb25OYW1lIHRvIENsaWVudEZ1bmN0aW9uTmFtZS5cblxuLSBUaGUgY2xpZW50IGFwcGxpY2F0aW9uIHRoYXQgZXhwb3NlcyB0aGUgY2xpZW50IGZ1bmN0aW9uIGlzIGNhbGxlZCBhIENBTExFRS5cbi0gVGhlIHNlcnZlciBhcHBsaWNhdGlvbiB0aGF0IGV4ZWN1dGVzIHRoZSBjbGllbnQgZnVuY3Rpb24gaXMgY2FsbGVkIGEgQ0FMTEVSLlxuXG5GdW5jdGlvbnMgY2FuIGJlIGRlZmluZWQgZWl0aGVyIGluc2lkZSB0aGUgcHJvcGVydHkgY2FsbGJhY2sgZnVuY3Rpb24gb3IgYW55d2hlcmUgaW4gdGhlIHNjb3BlIG9mIGFwcGxpY2F0aW9uLiBCZWxvdyBjb2RlIGV4aGliaXRzIGJvdGggd2F5cyBvZiBleHBvc2luZyB0aGUgZnVuY3Rpb24uXG5cbmBgYHB5dGhvblxuIyBmdW5jdGlvbiBpcyBleHBvc2VkIG91dHNpZGUgdGhlIHByb3BlcnR5IGNhbGxiYWNrIGZ1bmN0aW9uLCBidXQgaW4gdGhlIHNjb3BlIG9mIGFwcGxpY2F0aW9uLlxuYXN5bmMgZGVmIGNmRnVuT3V0c2lkZShpbnBhcmFtZXRlciwgcmVzcG9uc2UpOlxuICAgIHRyeTpcbiAgICAgICAgcmVzcG9uc2UudHJhY2tlciA9IFRydWVcbiAgICAgICAgdXBUaW1lID0ge1widXB0aW1lXCI6IFwiMTM6MzQ6MzAgdXAgOCBkYXlzLCAgMzoxMCwgIDEgdXNlciwgIGxvYWQgYXZlcmFnZTogMC4wMywgMC4xMSwgMC4yMVwifTtcbiAgICAgICAgcmVzcG9uc2UubmV4dCgncmV0cmlldmluZyBzeXN0ZW0gdXB0aW1lJylcbiAgICAgICAgcmVzcG9uc2UuZW5kKGpzb24sZHVtcHModXBUaW1lKSlcbiAgICAgICAgcmVzcG9uc2UuZXhjZXB0aW9uKCdJTlZBTElEX1BBUkFNJywgJ1dyb25nIHBhcmFtZXRlcicpIFxuICAgIGV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gICAgICAgIHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5cbmFzeW5jIGRlZiBjZkZ1bmN0aW9uQmluZGVyKCk6XG4gICAgYXN5bmMgZGVmIGNmRnVuSW5zaWRlKGlucGFyYW1ldGVyLCByZXNwb25zZSk6XG4gICAgICAgICMvLyBmdW5jdGlvbiBpcyBleHBvc2VkIGluc2lkZSB0aGUgcHJvcGVydHkgY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAgICAgIHJlc3BvbnNlLnRyYWNrZXIgPSBUcnVlXG4gICAgICAgIHRyeTpcbiAgICAgICAgICAgIHJlc3BvbnNlLnRyYWNrZXIgPSBUcnVlXG4gICAgICAgICAgICB1TmFtZSA9IHtcInVuYW1lXCI6IFwiTGludXggYW5hbHlzaXMgMi42LjMyLTY5Ni4zMC4xLmVsNi54ODZfNjQgIzEgU01QIFR1ZSBNYXkgMjIgMDM6Mjg6MTggVVRDIDIwMTggeDg2XzY0IHg4Nl82NCB4ODZfNjQgR05VL0xpbnV4XCJ9O1xuICAgICAgICAgICAgcmVzcG9uc2UubmV4dCgncmV0cmlldmluZyB1TmFtZScpXG4gICAgICAgICAgICByZXNwb25zZS5lbmQoanNvbi5kdW1wcyh1TmFtZSkpXG4gICAgICAgICAgICByZXNwb25zZS5leGNlcHRpb24oJ0lOVkFMSURfUEFSQU0nLCAnV3JvbmcgcGFyYW1ldGVyJykgXG4gICAgICAgIGV4Y2VwdCBkQkVycm9yIGFzIGU6XG4gICAgICAgICAgICBwcmludChlLmNvZGUsIGUuc291cmNlLCBlLm1lc3NhZ2UpIFxuXG5cdHRyeTpcbiAgICAgICAgZGJyaWRnZS5jZi5yZWdmbihcImlzcm9cIiwgY2ZGdW5JbnNpZGUpXG4gICAgICAgIGRicmlkZ2UuY2YucmVnZm4oXCJuYXNhXCIsIGNmRnVuT3V0c2lkZSlcbiAgIFx0ZXhjZXB0IGRCRXJyb3IgYXMgZTpcbiAgXHRcdHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSkgXG5cbmRicmlkZ2UuY2YuZnVuY3Rpb25zID0gY2ZGdW5jdGlvbkJpbmRlclxuIyB1bmJpbmRpbmcgb2YgZnVuY3Rpb24gZXhwb3NlZCBieSBycGMgZnVuY3Rpb25zXG5kYnJpZGdlLmNmLnVucmVnZm4oXCJuYXNhXCIsIGNmRnVuT3V0c2lkZSlcbmBgYFxuXG5CZWxvdyBhcmUgPHU+KnBhcmFtZXRlcnMqPC91PiBvZiB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gd2hpY2ggaXMgZXhwb3NlZCB0byAqY2xpZW50ZnVuY3Rpb25zKi5cblxufCBQYXJhbWV0ZXIgIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGBwYXlsb2FkYCAgfCAqKHN0cmluZykqICBUaGUgaW5QYXJhbWV0ZXIgZm9yIHRoZSBjbGllbnRGdW5jdGlvbi4gICAgICAgICAgfFxufCBgcmVzcG9uc2VgIHwgKihvYmplY3QpKiBUaGUgbGlicmFyeSBjcmVhdGVzIGEgcmVzcG9uc2Ugb2JqZWN0IHVuaXF1ZSBmb3IgZWFjaCBjbGllbnQgZnVuY3Rpb24gY2FsbC4gVGhlIFJlc3BvbnNlIG9iamVjdCBoYXMgKnByb3BlcnRpZXMqIGFuZCAqZnVuY3Rpb24qIHRvIHJldHVybiBleGVjdXRpb24gcmVzdWx0cyBvZiB0aGUgZnVuY3Rpb24gYmFjayB0byBjYWxsZXIuIHxcblxuIyMjIyMgcmVzcG9uc2U6IGAob2JqZWN0KWBcblxufCBQcm9wZXJ0aWVzL0Z1bmN0aW9uIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IGB0cmFja2VyYCAgICAgICAgICAgfCAqKGJvb2xlYW4pKiBUaGlzIHdpbGwgZW5hYmxlICByZXNwb25zZSB0cmFja2VyLCBhbmQgZXZlbnQgYGNmLnJlc3BvbnNlLnRyYWNrZXJgIHdpbGwgYmUgZmlyZWQgaWYgYW55IGlzc3VlIGhhcHBlbnMgaW4gc2VuZGluZyBiYWNrIHJlc3BvbnNlIHRvIGNhbGxlci4gRW5hYmxlIHRoaXMgcHJvcGVydHkgaWYgeW91ciBmdW5jdGlvbiBuZWVkcyBhIGNvbmZpcm1hdGlvbiBvZiByZXBvbnNlIGRlbGl2ZXJlZCB0byB0aGUgY2FsbGVyLiB8XG58IGBpZGAgICAgICAgICAgICAgICAgfCAqKHN0cmluZykqICoocmVhZG9ubHkpKiBFYWNoIGNsaWVudCBmdW5jdGlvbiBleGVjdXRpb24gaXMgYXNzaWduZWQgYSB1bmlxdWUgSUQgYnkgdGhlIGxpYnJhcnkuICB3aGVuIHRoZSByZXNwb25zZSB0cmFja2VyIGlzIGVuYWJsZWQsIHRoZSBhcHBsaWNhdGlvbiBjYW4gYmluZCB0byBhbiBldmVudCBgY2YucmVzcG9uc2UudHJhY2tlcmAgdG8gZ2V0IHRoZSBkZWxpdmVyeSBub3RpZmljYXRpb24uIFRoZSBldmVudCB3aWxsIGluZGljYXRlIHRoZSBkZWxpdmVyeSBub3RpZmljYXRpb24gbGlua2VkIHRvIHRoaXMgSUQuIENsaWVudCBhcHBsaWNhdGlvbiB3aWxsIG5lZWQgdG8gbWFpbnRhaW4gdGhpcyBJRCB0byB0cmFjayB0aGUgZGVsaXZlcnkgbm90aWZpY2F0aW9uLiB8XG58IGBuZXh0YCAgICAgICAgICAgICAgfCAqKGZ1bmN0aW9uKSogIGRhdGFCcmlkZ2VzIENGIChTcGVjaWFsIGNhc2UgUlBDIFxcfHJlcXVlc3QtcmVzcG9uc2UpIHN1cHBvcnRzIG11bHQtcGFydCByZXNwb25zZS4gQXBwbGljYXRpb24gY2FuIHVzZSBgcmVzcG9uc2UubmV4dGAgdG8gc2VuZCBtdWx0aS1wYXJ0IHJlc3BvbnNlIHRvIHRoZSBjYWxsZXIuIHxcbnwgYGVuZGAgICAgICAgICAgICAgICB8ICooZnVuY3Rpb24pKiAgIGByZXNwb25zZS5lbmRgIGlzIHRvIHNlbmQgdGhlIGZpbmFsIHJlc3BvbnNlIHRvIHRoZSBjYWxsZXIuIE9uY2UgYGVuZGAgaXMgY2FsbGVkLCB0aGUgb2JqZWN0IGlzICoqY2xvc2VkKiogYW5kIG5vIG1vcmUgcmVzcG9uc2UgY2FuIGJlIHNlbnQuIHxcbnwgYGV4Y2VwdGlvbmAgICAgICAgICB8ICooZnVuY3Rpb24pKiAgVHdvIHBhcmFtZXRlciwgcmV0dXJuIGBlcnJvckNvZGVgICooc3RyaW5nKSogLGBlcnJvck1lc3NhZ2VgICooc3RyaW5nKSogaXMgc2VudCB0byBjYWxsZXIuIFRoaXMgd2lsbCByYWlzZSBhbiBleGNlcHRpb24gYXQgdGhlIGNhbGxlciBsaWJyYXJ5LiB8XG5cbiMjIyMjIEV4Y2VwdGlvbnM6XG5cbkJlbG93IGV4Y2VwdGlvbnMgYXJlIHJhaXNlZCBpbiB0aGUgYGNmLnJlZ2ZuYC5cblxufCBTb3VyY2UgICAgICAgICB8IENvZGUgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgREJMSUJfQ0ZfUkVHRk4gfCBJTlZBTElEX0ZVTkNUSU9OX05BTUUgfCBJbnZhbGlkIEZ1bmN0aW9uIG5hbWUuICAgICAgICAgICAgICAgICAgICAgICAgfFxufCBEQkxJQl9DRl9SRUdGTiB8IElOVkFMSURfQ0FMTEJBQ0sgICAgICB8IENhbGxiYWNrIGlzIG5vdCBhIGZ1bmN0aW9uIG9yIGlzIG5vdCBkZWZpbmVkLiB8XG5cbkJlbG93IGV4Y2VwdGlvbnMgYXJlIHJhaXNlZCBvbiBgcmVzcG9uc2VgIG9iamVjdCBpbnNpZGUgdGhlIHJlZ2lzdGVyZWQgZnVuY3Rpb24uXG5cbnwgU291cmNlICAgICAgICB8IENvZGUgICAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IERCTElCX0NGX0NBTEwgfCBORVRXT1JLX0RJU0NPTk5FQ1RFRCAgIHwgQ29ubmVjdGlvbiB0byBkYXRhQnJpZGdlcyBuZXR3b3JrIGlzIG5vdCBhY3RpdmUuICAgICAgICAgICAgIHxcbnwgREJMSUJfQ0ZfQ0FMTCB8IFJFU1BPTlNFX09CSkVDVF9DTE9TRUQgfCBSZXR1cm4gcmVzcG9uc2Ugb2JqZWN0IGlzIGNsb3NlZC4gVGh1cyB0aGUgZnVuY3Rpb24gaXMgdW5hYmxlIHRvIHJlc3BvbmQgYmFjayB0byB0aGUgY2FsbC4gfFxuXG4jIyMjIHJlc2V0cXVldWUoKSBcblxuKjx1PmRicmlkZ2VPYmplY3Q8L3U+KiAgcmVzZXRxdWV1ZSgpIC4gVGhlIGRhdGFCcmlkZ2VzIG5ldHdvcmsgbWFpbnRhaW5zIGluLXByb2Nlc3MgQ0YgZnVuY3Rpb24gZXhlY3V0aW9uIHN0YXR1cy4gcmVzZXRxdWV1ZSgpIGluZm9ybXMgdGhlIGRhdGFCcmlkZ2VzIG5ldHdvcmsgdGhhdCBhbGwgaW4tcHJvY2VzcyBDRiBmdW5jdGlvbiBleGVjdXRpb24gd2lsbCBiZSBkcm9wcGVkIGJ5IHRoZSBhcHBsaWNhdGlvbiBhbmQgcmVzcG9uc2UgdG8gYmUgaW52YWxpZGF0ZWQuIFJlc2V0cXVldWUoKSB1c2UgY2FzZSBpcyBpbnRlbmRlZCB0byBiZSB1c2VkIGJ5IGFwcGxpY2F0aW9uIGluIGl0cyBzZWxmIGhlYWx0aCBzdGF0dXMgbWFuYWdlbWVudC4gU29tZXRpbWUgZHVlIHRvIHRoZSBhcHBsaWNhdGlvbiBwcm9jZXNzIGZsb3csIHRoZSBhcHBsaWNhdGlvbiBjYW4gaWRlbnRpZnkgc2l0dWF0aW9uIHdoZXJlIGl0IHdvdWxkIGxpa2UgdG8gZWFzZSBpdHMgbG9hZCBieSByZXNldHRpaW5nIHRoZSBDRiBmdW5jdGlvbiBleGVjdXRpb24gcXVldWUgYnkgc2VuZGluZyByZXNldHF1ZXVlKCkgbWVzc2FnZSB0byBkYXRhQnJpZGdlcyBuZXR3b3JrIGFuZCB0aGFuIGNsb3NpbmcgYWxsIGluLXByb2Nlc3MgQ0YgZnVuY3Rpb24gZXhlY3V0aW9uLiBcblxuYGBgcHl0aG9uXG50cnk6XG4gICAgYXdhaXQgZGJyaWRnZS5jZi5yZXNldHF1ZXVlKCk7XG5leGNlcHQgZEJFcnJvciBhcyBlOlxuICAgIHByaW50KGUuY29kZSwgZS5zb3VyY2UsIGUubWVzc2FnZSlcbmBgYFxuXG4jIyMjIyBFeGNlcHRpb25zOiBcblxufCBTb3VyY2UgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxufCAtLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBEQkxJQl9DRl9DQUxMIHwgTkVUV09SS19ESVNDT05ORUNURUQgfCBDb25uZWN0aW9uIHRvIGRhdGFCcmlkZ2VzIG5ldHdvcmsgaXMgbm90IGFjdGl2ZS4gfFxuXG4jIyMgU3lzdGVtIGV2ZW50cyBmb3IgY2Ygb2JqZWN0XG5cblRoZXJlIGFyZSBhIG51bWJlciBvZiBldmVudHMgd2hpY2ggYXJlIHRyaWdnZXJlZCBpbnRlcm5hbGx5IGJ5IHRoZSBsaWJyYXJ5LCBidXQgY2FuIGFsc28gYmUgb2YgdXNlIGVsc2V3aGVyZS4gQmVsb3cgYXJlIHRoZSBsaXN0IG9mIGFsbCBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoZSBsaWJyYXJ5LlxuXG5CZWxvdyBzeW50YXggaXMgc2FtZSBmb3IgYWxsIHN5c3RlbSBldmVudHMuXG5cbmBgYHB5dGhvblxuIyAgQmluZGluZyB0byBzeXN0ZW1ldmVudCBvbiBkYnJpZGdlT2JqZWN0IFxuZGVmIGV2ZW50RnVuY3Rpb24ocGF5bG9hZCxtZXRhZGF0YSk6XG4gICBwcmludChwYXlsb2FkLG1ldGFkYXRhKVxuXG50cnk6XG4gICAgZGJyaWRnZS5jZi5iaW5kKCdldmVudE5hbWUnLCBldmVudEZ1bmN0aW9uKVxuZXhjZXB0IGRCRXJyb3IgYXMgZTpcblx0cHJpbnQoZS5jb2RlLCBlLnNvdXJjZSwgZS5tZXNzYWdlKVxuYGBgXG5cbiMjIyMgY2YucmVzcG9uc2UudHJhY2tlclxuXG4jIyMjIyBDYWxsYmFjayBwYXJhbWV0ZXJzXG5cbnwgUmV0dXJuIFZhbHVlcyB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gfFxufCBgcGF5bG9hZGAgICAgIHwgKihzdHJpbmcpKiAgVHJhY2tlciBpZGVudGlmaWVyLiB3aGljaCBpcyBzYW1lIGFzIGByZXNwb25zZS5pZGAgfFxufCBgbWV0YWRhdGFgICAgIHwgKihzdHJpbmcpKiAgUmVmZXIgYmVsb3cgdGFibGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcblxufCBFcnJvciBJZGVudGlmaWVyIHwgRGVzY3JpcHRpb24gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbnwgLS0tLS0tLS0tLS0tLS0tLSB8IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSB8XG58IFJFXzEyNjE2ICAgICAgICAgfCBjZiBjYWxsZXIgaXMgZGlzY29ubmVjdGVkIGZyb20gZGF0YUJyaWRnZXMgbmV0d29yayBhbmQgaGVuY2UgY2Fubm90IHByb2Nlc3MgcmVzcG9uc2UgdHJhY2tpbmcuIHxcbnwgUkVfMTMxNTEgICAgICAgICB8IGNmIGNhbGxlciBpcyBkaXNjb25uZWN0ZWQgZnJvbSBkYXRhQnJpZGdlcyBuZXR3b3JrIGFuZCBoZW5jZSBjYW5ub3QgcHJvY2VzcyByZXNwb25zZSB0cmFja2luZy4gfFxufCBSRV8zMDAzMCAgICAgICAgIHwgVGhlIGNmIGNsaWVudCBpcyBkaXNjb25uZWN0ZWQgZnJvbSBkYXRhQnJpZGdlcyBuZXR3b3JrICAgICAgIHxcbnwgUkVfMzM2MzUgICAgICAgICB8IFRoZSBjZiBjbGllbnQgaXMgZGlzY29ubmVjdGVkIGZyb20gZGF0YUJyaWRnZXMgbmV0d29yayAgICAgICB8XG5cbiMjIyMgY2YuY2FsbGVlLnF1ZXVlLmV4Y2VlZGVkXG5cbiMjIyMjIENhbGxiYWNrIHBhcmFtZXRlcnNcblxuIyMjIyMjIHBheWxvYWQ6IGAoZGJlcnJvciBvYmplY3QpYFxuXG5gYGBweXRob25cbntcbiAgICBcInNvdXJjZVwiOiBcIkRCTkVUX0NGX0NBTExcIiAsIFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3Igc291cmNlXG4gICAgXCJjb2RlXCI6IFwiRVJSX0NBTExFRV9RVUVVRV9FWENFRURFRFwiLFx0XHQvLyAoc3RyaW5nKSBFcnJvciBjb2RlICBcbiAgICBcIm1lc3NhZ2VcIjogXCJcIiBcdFx0XHRcdFx0XHRcdFx0Ly8gKHN0cmluZykgRXJyb3IgbWVzc2FnZSBpZiBhcHBsaWNhYmxlLlxufVxuYGBgXG5cbiMjIyMjIyBtZXRhZGF0YTpcblxuYG51bGxgXG5cbiMjIyMgZGJlcnJvcjpcblxufCBTb3VyY2UgICAgICAgIHwgQ29kZSAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHwgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tIHxcbnwgREJORVRfQ0ZfQ0FMTCB8IEVSUl9DQUxMRUVfUVVFVUVfRVhDRUVERUQgfCBObyBuZXcgY2YgY2FsbHMgYXJlIGJlaW5nIHJvdXRlZCBieSB0aGUgZGF0YUJyaWRnZXMgbmV0d29yayB0byB0aGUgYXBwbGljYXRpb24gYmVjYXVzZSB0aGUgYXBwbGljYXRpb24ncyBjdXJyZW50IGNmIHByb2Nlc3NpbmcgcXVldWUgaGFzIGFscmVhZHkgZXhjZWVkZWQuIDxiciAvPkVhY2ggYXBwbGljYXRpb24gY29ubmVjdGlvbiBjYW5ub3QgZXhjZWVkIGNmLnF1ZXVlLm1heGltdW0uIFJlZmVyIHRvIG1hbmFnZW1lbnQgY29uc29sZSBkb2N1bWVudGF0aW9uIGZvciBjZi5xdWV1ZS5tYXhpbXVtIGRldGFpbHMuIHxcblxuXG5cbiMjIENoYW5nZSBMb2dcbiAgKiBbQ2hhbmdlIGxvZ10oQ0hBTkdFTE9HLm1kKTogQ2hhbmdlcyBpbiB0aGUgcmVjZW50IHZlcnNpb25zXG5cbiMjIExpY2Vuc2VcblxuRGF0YUJyaWRnZXMgTGlicmFyeSBpcyByZWxlYXNlZCB1bmRlciB0aGUgW0FwYWNoZSAyLjAgbGljZW5zZV0oTElDRU5TRSkuXG5cbmBgYFxuQ29weXJpZ2h0IDIwMjIgT3B0b21hdGUgVGVjaG5vbG9naWVzIFByaXZhdGUgTGltaXRlZC5cblxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbllvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuXG4gICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbmRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbldJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxubGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG5gYGBcbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiBudWxsLA==
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiBudWxsLA==
ICAgICJrZXl3b3JkcyI6ICJvcHRvbWF0ZSxkYXRhYnJpZGdlcyxwdWJzdWIscnBjLHdlYnNvY2tldCxzb2NrZXQuaW8sd3MsZXZlbnRzLHJlYWx0aW1lLHJlYWwtdGltZSIs
ICAgICJsaWNlbnNlIjogbnVsbCw=
ICAgICJtYWludGFpbmVyIjogbnVsbCw=
ICAgICJtYWludGFpbmVyX2VtYWlsIjogbnVsbCw=
ICAgICJuYW1lIjogImRhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWIvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWIvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkRvY3VtZW50YXRpb24iOiAiaHR0cHM6Ly9naXRodWIuY29tL2RhdGFicmlkZ2VzLWlvL2xpYi5weS5hc3luYy5zaW8uY2xpZW50Iiw=
ICAgICAgIlNvdXJjZSI6ICJodHRwczovL2dpdGh1Yi5jb20vZGF0YWJyaWRnZXMtaW8vbGliLnB5LmFzeW5jLnNpby5jbGllbnQi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWIvMi4wLjMvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgInB5dGhvbi1zb2NrZXRpbz09My4xLjIiLA==
ICAgICAgInB5dGhvbi1lbmdpbmVpbz09My4xNC4wIiw=
ICAgICAgImFzeW5jaW8+PTMuNC4zIiw=
ICAgICAgImFpb2h0dHA+PTMuOC4xIiw=
ICAgICAgIndlYnNvY2tldC1jbGllbnQi
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiBudWxsLA==
ICAgICJzdW1tYXJ5IjogIkRhdGFicmlkZ2VzIFB5dGhvbiBjbGllbnQgTGlicmFyeSIs
ICAgICJ2ZXJzaW9uIjogIjIuMC4zIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNDYxMzUyMSw=
ICAicmVsZWFzZXMiOiB7
ICAgICIyLjAuMiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogbnVsbCw=
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI2MWFlM2U0MDRkYWRhYzhkYjg1NjUyZTE1ZDdiMzllNmQ5MWNiZTY0ZTQyZjYyYmE3NjIyY2UwYmYzNTJlMzNjIiw=
ICAgICAgICAgICJtZDUiOiAiMjBjNmY5YmM4OThlMjllNDVjYjc0ZTFhNDc2NDNkZTMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzExNDU2ZWYxYTgzNjE2MGZmMDg4MTZjOWFmNWYzY2ZhMmYwZGFiNWZjMDk5MTNkZWQwY2Q2ZTM1MzYwMmUwYiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjItcHkyLnB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyMGM2ZjliYzg5OGUyOWU0NWNiNzRlMWE0NzY0M2RlMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkyLnB5MyIs
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDYwMTA3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNy0yMFQxMzo1OToxMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNy0yMFQxMzo1OToxMC40MTQwODJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy82MS9hZS8zZTQwNGRhZGFjOGRiODU2NTJlMTVkN2IzOWU2ZDkxY2JlNjRlNDJmNjJiYTc2MjJjZTBiZjM1MmUzM2MvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjItcHkyLnB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogdHJ1ZSw=
ICAgICAgICAieWFua2VkX3JlYXNvbiI6ICJVc2UgMi4wLjMgSW5pdGlhbCBSZWxlYXNlIg==
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogbnVsbCw=
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI3ZDg0NzNlZGExMmYwNGQyZmE0M2FiNDQ0M2I0OTNkMDM2Y2FlZGFjZjRlODk3N2VjMzc4OGIzNzA3YmZmMDBmIiw=
ICAgICAgICAgICJtZDUiOiAiOTk5ZDgxOWUzMmM2NjE4NDdmMTA5OTk4ZTJhNTUyNzYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjRlNzc3ZWFjMTc2MTNhYjc4ODRlNGRiY2E0NjlkZjA0ODc2MjgxYWQyNDEyYmM3YmVmNTNjOWE4YmJlNjAwNCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjIudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5OTlkODE5ZTMyYzY2MTg0N2YxMDk5OThlMmE1NTI3NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDU3NzMwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNy0yMFQxMzo1OToxMyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNy0yMFQxMzo1OToxMy41OTk0MzVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy83ZC84NC83M2VkYTEyZjA0ZDJmYTQzYWI0NDQzYjQ5M2QwMzZjYWVkYWNmNGU4OTc3ZWMzNzg4YjM3MDdiZmYwMGYvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjIudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogdHJ1ZSw=
ICAgICAgICAieWFua2VkX3JlYXNvbiI6ICJVc2UgMi4wLjMgSW5pdGlhbCBSZWxlYXNlIg==
ICAgICAgfQ==
ICAgIF0s
ICAgICIyLjAuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogbnVsbCw=
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI3NTc2YmUxNzljM2NjMjkwMTE3NTI1Mjk0Y2E1NDM5MjM2MWIzMjBkMjQ4MWRjOGQ1NGIwNDA4NDk4Njg2MWRjIiw=
ICAgICAgICAgICJtZDUiOiAiNzA0NzZhZjNlNjA1MDdmNjY0MjQzNzNjNmI3OTA3YWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZDA1MDFlODgwMmE3MzBkYjRhNDc4ZmY5Y2ZkNWRmMjI3NmVkOTJmZTZmMDE4NDFmZTg5ZmY4ZGVkODVmYzQ4MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjMtcHkyLnB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3MDQ3NmFmM2U2MDUwN2Y2NjQyNDM3M2M2Yjc5MDdhYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkyLnB5MyIs
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDYwMTE3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNy0zMFQxOToxMjo1OSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNy0zMFQxOToxMjo1OS42NTgxODJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy83NS83Ni9iZTE3OWMzY2MyOTAxMTc1MjUyOTRjYTU0MzkyMzYxYjMyMGQyNDgxZGM4ZDU0YjA0MDg0OTg2ODYxZGMvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjMtcHkyLnB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogbnVsbCw=
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhZDI1NTZhZTIzNjk2ZmQzNjJjNTA2OWQxYzQ0ODQ2MTE5ZDNkMmU5MGE1YTVhMmM0ZTZkYzk3YjNkMjI0YzVkIiw=
ICAgICAgICAgICJtZDUiOiAiMDY3Yzg3ZmNhNTJkY2U1ZjFiMzMzYzMxOTExODA2NDUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYzU5MzlhNTZmMmFiYTQxNmQwNTc5MDhkN2I4YzA3MTg2NjRlNTY3OTc2OTI1OTNhMDNiNmMyZjkyZGUyNzk1NyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjMudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIwNjdjODdmY2E1MmRjZTVmMWIzMzNjMzE5MTE4MDY0NSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDU3NzI0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNy0zMFQxOToxMzowMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNy0zMFQxOToxMzowMi45MzM0MzhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hZC8yNS81NmFlMjM2OTZmZDM2MmM1MDY5ZDFjNDQ4NDYxMTlkM2QyZTkwYTVhNWEyYzRlNmRjOTdiM2QyMjRjNWQvZGF0YWJyaWRnZXNfc2lvX2NsaWVudF9saWItMi4wLjMudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6IG51bGws
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNzU3NmJlMTc5YzNjYzI5MDExNzUyNTI5NGNhNTQzOTIzNjFiMzIwZDI0ODFkYzhkNTRiMDQwODQ5ODY4NjFkYyIs
ICAgICAgICAibWQ1IjogIjcwNDc2YWYzZTYwNTA3ZjY2NDI0MzczYzZiNzkwN2FiIiw=
ICAgICAgICAic2hhMjU2IjogImQwNTAxZTg4MDJhNzMwZGI0YTQ3OGZmOWNmZDVkZjIyNzZlZDkyZmU2ZjAxODQxZmU4OWZmOGRlZDg1ZmM0ODMi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImRhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliLTIuMC4zLXB5Mi5weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiNzA0NzZhZjNlNjA1MDdmNjY0MjQzNzNjNmI3OTA3YWIiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5Mi5weTMiLA==
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA2MDExNyw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDctMzBUMTk6MTI6NTkiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDctMzBUMTk6MTI6NTkuNjU4MTgyWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNzUvNzYvYmUxNzljM2NjMjkwMTE3NTI1Mjk0Y2E1NDM5MjM2MWIzMjBkMjQ4MWRjOGQ1NGIwNDA4NDk4Njg2MWRjL2RhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliLTIuMC4zLXB5Mi5weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6IG51bGws
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYWQyNTU2YWUyMzY5NmZkMzYyYzUwNjlkMWM0NDg0NjExOWQzZDJlOTBhNWE1YTJjNGU2ZGM5N2IzZDIyNGM1ZCIs
ICAgICAgICAibWQ1IjogIjA2N2M4N2ZjYTUyZGNlNWYxYjMzM2MzMTkxMTgwNjQ1Iiw=
ICAgICAgICAic2hhMjU2IjogImM1OTM5YTU2ZjJhYmE0MTZkMDU3OTA4ZDdiOGMwNzE4NjY0ZTU2Nzk3NjkyNTkzYTAzYjZjMmY5MmRlMjc5NTci
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImRhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliLTIuMC4zLnRhci5neiIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMDY3Yzg3ZmNhNTJkY2U1ZjFiMzMzYzMxOTExODA2NDUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA1NzcyNCw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDctMzBUMTk6MTM6MDIiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDctMzBUMTk6MTM6MDIuOTMzNDM4WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYWQvMjUvNTZhZTIzNjk2ZmQzNjJjNTA2OWQxYzQ0ODQ2MTE5ZDNkMmU5MGE1YTVhMmM0ZTZkYzk3YjNkMjI0YzVkL2RhdGFicmlkZ2VzX3Npb19jbGllbnRfbGliLTIuMC4zLnRhci5neiIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
