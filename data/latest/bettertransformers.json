ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiVGhlIEh1Z2dpbmcgRmFjZSB0ZWFtIChwYXN0IGFuZCBmdXR1cmUpIHdpdGggdGhlIGhlbHAgb2YgYWxsIG91ciBjb250cmlidXRvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMvZ3JhcGhzL2NvbnRyaWJ1dG9ycykiLA==
ICAgICJhdXRob3JfZW1haWwiOiAidHJhbnNmb3JtZXJzQGh1Z2dpbmdmYWNlLmNvIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IERldmVsb3BlcnMiLA==
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IEVkdWNhdGlvbiIs
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IFNjaWVuY2UvUmVzZWFyY2giLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIiw=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlRvcGljIDo6IFNjaWVudGlmaWMvRW5naW5lZXJpbmcgOjogQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2Ui
ICAgIF0s

ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2h1Z2dpbmdmYWNlL3RyYW5zZm9ybWVycyIs
ICAgICJrZXl3b3JkcyI6ICJOTFAgdmlzaW9uIHNwZWVjaCBkZWVwIGxlYXJuaW5nIHRyYW5zZm9ybWVyIHB5dG9yY2ggdGVuc29yZmxvdyBCRVJUIEdQVC0yIFdhdjJWZWMyIFZpVCIs
ICAgICJsaWNlbnNlIjogIkFwYWNoZSIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImJldHRlcnRyYW5zZm9ybWVycyIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYmV0dGVydHJhbnNmb3JtZXJzLyIs
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYmV0dGVydHJhbnNmb3JtZXJzLyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYmV0dGVydHJhbnNmb3JtZXJzLzQuMjMuMC5kZXYwLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjcuMCIs
ICAgICJzdW1tYXJ5IjogIlN0YXRlLW9mLXRoZS1hcnQgTWFjaGluZSBMZWFybmluZyBmb3IgSkFYLCBQeVRvcmNoIGFuZCBUZW5zb3JGbG93Iiw=
ICAgICJ2ZXJzaW9uIjogIjQuMjMuMC5kZXYwIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNTE2MDU5Niw=
ICAicmVsZWFzZXMiOiB7
ICAgICI0LjIzLjAuZGV2MCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhOGNiZmFjZmE2ODI3YTdiZTAyMDI5NDkxNmQ4OTNiYzJhZTdjOGY0YzQ1ODNmNWYxMDlkM2IxOWEwZTVjMTViIiw=
ICAgICAgICAgICJtZDUiOiAiYjRhNGFmZTcwN2I1OWIzYmY4OGI5YzEyOTI1MWI4ZDQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNWI1N2U3MDBmNmU1M2YxODA5YzUyNTFjODlhNGE2ZDVmMmZjNjU0NDBmNzIwOTAwODRkYmRiODE1ZGE4OWViNSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYmV0dGVydHJhbnNmb3JtZXJzLTQuMjMuMC5kZXYwLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiNGE0YWZlNzA3YjU5YjNiZjg4YjljMTI5MjUxYjhkNCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LjAiLA==
ICAgICAgICAic2l6ZSI6IDQxNTM5MDAs
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wOS0yMVQwMToyMTozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wOS0yMVQwMToyMTozNy43NTQ4MDlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hOC9jYi9mYWNmYTY4MjdhN2JlMDIwMjk0OTE2ZDg5M2JjMmFlN2M4ZjRjNDU4M2Y1ZjEwOWQzYjE5YTBlNWMxNWIvYmV0dGVydHJhbnNmb3JtZXJzLTQuMjMuMC5kZXYwLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYThjYmZhY2ZhNjgyN2E3YmUwMjAyOTQ5MTZkODkzYmMyYWU3YzhmNGM0NTgzZjVmMTA5ZDNiMTlhMGU1YzE1YiIs
ICAgICAgICAibWQ1IjogImI0YTRhZmU3MDdiNTliM2JmODhiOWMxMjkyNTFiOGQ0Iiw=
ICAgICAgICAic2hhMjU2IjogIjViNTdlNzAwZjZlNTNmMTgwOWM1MjUxYzg5YTRhNmQ1ZjJmYzY1NDQwZjcyMDkwMDg0ZGJkYjgxNWRhODllYjUi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImJldHRlcnRyYW5zZm9ybWVycy00LjIzLjAuZGV2MC50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiYjRhNGFmZTcwN2I1OWIzYmY4OGI5YzEyOTI1MWI4ZDQiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNy4wIiw=
ICAgICAgInNpemUiOiA0MTUzOTAwLA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDktMjFUMDE6MjE6MzciLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDktMjFUMDE6MjE6MzcuNzU0ODA5WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYTgvY2IvZmFjZmE2ODI3YTdiZTAyMDI5NDkxNmQ4OTNiYzJhZTdjOGY0YzQ1ODNmNWYxMDlkM2IxOWEwZTVjMTViL2JldHRlcnRyYW5zZm9ybWVycy00LjIzLjAuZGV2MC50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
