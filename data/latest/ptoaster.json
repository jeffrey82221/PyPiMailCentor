ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiUHlTaW1wbGVHVUkiLA==
ICAgICJhdXRob3JfZW1haWwiOiAibWlrZUBQeVNpbXBsZUdVSS5vcmciLA==
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEdOVSBMZXNzZXIgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2MyBvciBsYXRlciAoTEdQTHYzKykiLA==
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjUiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjYiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlRvcGljIDo6IE11bHRpbWVkaWEgOjogR3JhcGhpY3Mi
ICAgIF0s
    "description": "![pysimplegui_logo](https://user-images.githubusercontent.com/13696193/43165867-fe02e3b2-8f62-11e8-9fd0-cc7c86b11772.png)\n\n[![Downloads](http://pepy.tech/badge/pysimplegui)](http://pepy.tech/project/pysimplegui) tkinter\n\n[![Downloads ](https://pepy.tech/badge/pysimplegui27)](https://pepy.tech/project/pysimplegui27) tkinter 2.7\n\n[![Downloads](https://pepy.tech/badge/pysimpleguiqt)](https://pepy.tech/project/pysimpleguiqt) Qt\n\n[![Downloads](https://pepy.tech/badge/pysimpleguiwx)](https://pepy.tech/project/pysimpleguiWx) WxPython\n\n[![Downloads](https://pepy.tech/badge/pysimpleguiweb)](https://pepy.tech/project/pysimpleguiWeb) Web (Remi)\n\n![Documentation Status](https://readthedocs.org/projects/pysimplegui/badge/?version=latest)\n![Awesome Meter](https://img.shields.io/badge/Awesome_meter-100-yellow.svg)\n![Python Version](https://img.shields.io/badge/Python-2.7_3.x-yellow.svg)\n\n![Python Version](https://img.shields.io/badge/PySimpleGUI_For_Python_3.x_Version-4.15.2-red.svg?longCache=true&style=for-the-badge)\n\n![Python Version](https://img.shields.io/badge/PySimpleGUIQt_Version-0.30.0-orange.svg?longCache=true&style=for-the-badge)\n![Python Version](https://img.shields.io/badge/PySimpleGUIWx_version-0.14.0-orange.svg?longCache=true&style=for-the-badge)\n![Python Version](https://img.shields.io/badge/PySimpleGUIWeb_Version-0.33.0-orange.svg?longCache=true&style=for-the-badge)\n\n# PySimpleGUI User's Manual\n\n## Python GUI For Humans - Transforms tkinter, Qt, Remi, WxPython into portable people-friendly Pythonic interfaces\n\n### This manual is crammed full of answers so start your search for answers here. Read/Search this prior to opening an Issue on GitHub.  Press Control F and type.\n---\n\n# Jump-Start\n\n## Install\n\n```\npip install pysimplegui\nor\npip3 install pysimplegui\n```\n\n### This Code\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('DarkAmber')\t# Add a touch of color\n# All the stuff inside your window.\nlayout = [  [sg.Text('Some text on Row 1')],\n            [sg.Text('Enter something on Row 2'), sg.InputText()],\n            [sg.Button('Ok'), sg.Button('Cancel')] ]\n\n# Create the Window\nwindow = sg.Window('Window Title', layout)\n# Event Loop to process \"events\" and get the \"values\" of the inputs\nwhile True:\n    event, values = window.read()\n    if event in (None, 'Cancel'):\t# if user closes window or clicks cancel\n        break\n    print('You entered ', values[0])\n\nwindow.close()\n```\n\n### Makes This Window\n\nand returns the value input as well as the button clicked.\n\n![image](https://user-images.githubusercontent.com/46163555/68713283-7cb38200-056b-11ea-990a-aa1603af5a11.png)\n\n### Any Questions?  It's that simple.\n\n---\n\n#### Looking for a GUI package?     Are you....\n\n* looking to take your Python code from the world of command lines and into the convenience of a GUI? \n* sitting on a Raspberry **Pi** with a touchscreen that's going to waste because you don't have the time to learn a GUI SDK?\n* into Machine Learning and are sick of the command line?\n* an IT guy/gal that has written some cool tools but due to corporate policies are unable to share unless an EXE file?\n* want to share your program with your friends or families (that aren't so freakish that they have Python running)\n* wanting to run a program in your system tray?\n* a teacher wanting to teach your students how to program using a GUI?\n* a student that wants to put a GUI onto your project that will blow away your teacher?\n* looking for a GUI package that is \"supported\" and is being constantly developed to improve it?\n* longing for documentation and scores of examples?\n\n**Look no further, you've found your GUI package**.\n\n#### The basics\n\n* Create windows that look and operate _identically_ to those created directly with tkinter, Qt, WxPython, and Remi.\n* Requires 1/2 to 1/10th the amount of code as underlying frameworks.\n* One afternoon is all that is required to learn the PySimpleGUI package _and_ write your first custom GUI.\n* Students can begin using within their first week of Python education.\n* No callback functions. You do not need to write the word `class` _anywhere_ in your code.\n* Access to nearly every underlying GUI Framework's Widgets.\n* Supports both Python 2.7 & 3 when using tkinter\n* Supports both PySide2 and PyQt5 (limited support)\n* Effortlessly move across tkinter, Qt, WxPython, and the Web (Remi) by changing only the import statement\n* The *only* way to write both desktop and web based GUIs at the same time in Python\n* Developed from nothing as a pure Python impelementation with Python friendly interfaces.\n* Run your program in the System Tray using WxPython. Or, change the import and run it on Qt with no other changes.\n* Works with Qt Designer\n* Built in Debugger\n* Actively maintained and enhanced - 4 ports are underway, all being used by users.\n* Corporate as well as home users.\n* Appealing to both newcomers to Python and experiened Pythonistas. \n* The focus is entirely on the developer (you) and making their life easier, simplified, and in control.\n* 170+ Demo Programs teach you how to integrate with many popular packages like OpenCV, Matplotlib, PyGame, etc. \n* 200 pages of documentation, a Cookbook, built-in help using docstrings, in short it's heavily documented\n\n#### July-2019 Note - This readme is being generated from the PySimpleGUI.py file located on GitHub.  As a result, some of the calls or parameters may not match the PySimpleGUI that you pip installed.\n\n## GUI Development does not have to be difficult nor painful.  It can be (and is) FUN\n\n#### What users are saying about PySimpleGUI\n\n***(None of these comments were solicited & are not paid endorsements - other than a huge thank you they received!)***\n\n\"I've been working to learn PyQT for the past week in my off time as an intro to GUI design and how to apply it to my existing scripts... Took me ~30 minutes to figure out PySimpleGUI and get my scripts working with a GUI.\"\n\n\"Python has been an absolute nightmare for me and I've avoided it like the plague.  Until I saw PysimpleGUI.\"\n\n\"I've been pretty amazed at how much more intuitive it is than raw tk/qt. The dude developing it is super active on the project too so if you come across situations that you just can't get the code to do what you want you can make bug/enhancement issues that are almost assured to get a meaningful response.\"\n\n\"This library is the easiest way of gui programming in python! I'm totally in love with it\"\n\n\"Wow that readme is extensive and great.\" (hear the love for docs often)\n\n\"Coming from R, Python is absolutely slick for GUIs. PySimpleGUI is a dream.\"\n\n\"I have been writing Python programs for about 4 or 5 months now. Up until this week I never had luck with any UI libraries like Tkinter, Qt, Kivy.  I went from not even being able to load a window in Tkinter reliably to making a loading screen, and full program in one night with PySimpleGUI.\"\n\n\"I love PySimpleGUI! I've been teaching it in my Python classes instead of Tkinter.\"\n\n\"I wish PySimpleGUI was available for every friggin programming language\"\n\n### START HERE - User Manual with Table of Contents\n\n[ReadTheDocs](http://www.PySimpleGUI.org)  <------ THE best place to read the docs due to TOC, all docs in 1 place, and better formatting. START here in your education.  Easy to remember PySimpleGUI.org.\n\n#### Quick Links To Help and The Latest News and Releases\n\n[Homepage - Lastest Readme and Code - GitHub](http://www.PySimpleGUI.com)  Easy to remember: PySimpleGUI.com\n\n[Announcements of Latest Developments, Release news, Misc](https://github.com/PySimpleGUI/PySimpleGUI/issues/142)\n\n[COOKBOOK!](http://Cookbook.PySimpleGUI.org)\n\n[Trinket an online Cookbook](http://Trinket.PySimpleGUI.org)\n\n[Brief Tutorial](http://Tutorial.PySimpleGUI.org)\n\n[Latest Demos and Master Branch on GitHub](https://github.com/PySimpleGUI/PySimpleGUI/tree/master/DemoPrograms)\n\n[Repl.it Home for PySimpleGUI](https://repl.it/@PySimpleGUI)\n\n[Lots of screenshots](https://www.bountysource.com/issues/60766522-screen-shots)\n\n[How to submit an Issue](https://github.com/PySimpleGUI/PySimpleGUI/issues/1646)\n\nThe YouTube videos - If you like instructional videos, there are over 15 videos made by PySimpleGUI project\n- [5 part series of basics](https://www.youtube.com/playlist?list=PLl8dD0doyrvHMoJGTdMtgLuHymaqJVjzt)\n- [10 part series of more detail](https://www.youtube.com/playlist?list=PLl8dD0doyrvGyXjORNvirTIZxKopJr8s0)\n- [The Naked Truth (An updaate on the technology)](https://youtu.be/BFTxBmihsUY)\n- There are numerous short videos also on that channel that demonstrate PySimpleGUI being used\n\nYouTube Videos made by others.  These have much higher production values than the above videos.\n\n- A ***fantastic*** tutorial [PySimpleGUI Concepts - Video 1](https://youtu.be/cLcfLm_GgiM)\n- Build a calculator [Python Calculator with GUI | PySimpleGUI | Texas Instruments DataMath II](https://youtu.be/x5LSTDdffFk)\n- Notepad [Notepad in Python - PySimpleGUI](https://youtu.be/JQY641uynKo)\n- File Search Engine [File Search Engine | Project for Python Portfolio with GUI | PySimpleGUI](https://youtu.be/IWDC9vcBIFQ)\n\n# About The PySimpleGUI Documentation System\n\nThis User's Manual (also the project's readme) is one ***vital*** part of the PySimpleGUI programming environment.  \n\nIf you are a professional or skilled in how to develop software, then you understand the role of documentation in the world of technology development.  You can skip this bit.... look for the bold \"**GO TO HERE**\" below.\n\nRTFM is not a new acronym. It stretches back to 1979, the dawn of the computer-era and in particular the microprocessor.  The point is that this is not a new problem.  It's a very old problem.\n\nBluntness is required here as the subtle approach has not worked in the past:\n\n***It WILL be required, at times, for you to read or search this document in order to be successful.***\n\nRe-read that statement.  This **will** be a serious problem for you if you're the type of person that finds it \"quicker and easier to post on StackOverflow rather than reading documentation\".  \n\nIf you have not yet matured to the point you are able to understand this skill or choose to not follow it, then please save ***everyone*** the pain of doing **for you** what you, as a developer, software engineer, or wanna be coder, must do on your own.  It's a vital skill for you to learn.  \n\nWant to be a \"real engineer\"? Then follow \"real engineering practices\" such as \"reading\".  You are learning a NEW GUI package.  You've not seen anything like it.  Don't be so arrogant as to believe you will never need to read documentation.\n\nUGH, why does this need to be said?\n\n***GO TO HERE*** if instructed above.\n\nI appologize to the other 95% of you that this..... pathetic.... reminder needs to be added, but sadly there's a need for it.\n\nThere are 5 resources that work together to provide to you the fastest path to success.  They are:\n\n1. This User's Manual\n2. The Cookbook\n3. The 170+ Demo Programs\n4. Docstrings enable you to access help directly from Python or your IDE\n5. Searching the GitHub Issues as a last resort (search both open and closed issues)\n\nPace yourself.  The intial progress is exciting and FAST PACED.  However, GUIs take time and thought to build.  Take a deep breath and use the provided materials and you'll do fine.  Don't skip the design phase of your GUI after you run some demos and get the hang of things.  If you've tried other GUI frameworks before, successful or not, then you know you're already way ahead of the game using PySimpleGUI versus the underlying GUI frameworks.  It may feel like the 3 days you've been working on your code has been forever, but by comparison of 3 days learning Qt, PySimpleGUI will look trivial to learn.\n\nIt is not by accident that this section, about documentation, is at the TOP of this document.\n\nThis documentation is not HUGE in length for a package this size. In fact it's still one document and it's the readme for the GitHub.  It's not written in complex english.  It is understandable by complete beginners.  And pressing `Control+F` is all you need to do to search this document.  USUALLY you'll find less than 6 matches.\n\n## Documentation and Demos Get Out of Date\n\nSometimes the documenation doesn't match exactly the version of the code you're running.  Sometimes demo programs haven't been updated to match a change made to the SDK.  Things don't happen simultaneously generally speaking.  So, it may very well be that you find an error or inconsistency or something no longer works with the latest version of an external library.\n\nIf you've found one of these problems, and you've searched to make sure it's not a simple mistake on your part, then by ALL means log an Issue on the GitHub.  Don't be afraid to report problems if you've taken the simple steps of checking out the docs first.\n\n# Platforms\n\n## Hardware and OS Support\n\nPySimpleGUI runs on Windows, Linux and Mac, just like tkinter, Qt, WxPython and Remi do.  If you can get the underlying GUI Framework installed / running on your machine then PySimpleGUI will also run there.\n\n### Hardware\n\n* PC's, Desktop, Laptops\n* Macs of all types\n* Raspberry Pi\n* Android devices like phones and tablets\n* Virtual machine online (no hardware) - repl.it\n\n### OS\n\n* Windows 7, 8, 10\n* Linux on PC - Tested on several distributions\n* Linux on Raspbnerry Pi\n* Linux on Android - Can use either Termux or PyDroid3\n* Mac OS\n\n#### Python versions\n\nAs of 9/25/2018 **both Python 3 and Python 2.7 are supported** when using **tkinter version** of PySimpleGUI! The Python 3 version is named `PySimpleGUI`. The Python 2.7 version is `PySimpleGUI27`.  They are installed separately and the imports are different. See instructions in Installation section for more info.  **None** of the other ports can use Python 2.\n\n###### Python 2.7 Code will be deleted from this GitHub on Dec 31, 2019\n\nNote that the 2.7 port will *cease to exist on this GitHub* on Jan 1, 2020.  If you would like to know how much time you have to move over to the Python 3 version of PySimpleGUI, then go here: https://pythonclock.org/.  The only thing that will be available is an unsupported PyPI release of PySimpleGUI27.\n\nBy \"will cease to exist on this GitHub\" I mean, it will be deleted entirely.  No source code, no supporting programs.  Nothing.  If you're stuck using 2.7 in December, it would behoove you to fork the 2.7 code on Dec 31, 2019.  Legacy Python doesn't have a permanent home here.  It sounds cruel, but experts in security particularly says 2.7 is a huge risk. Furthering it use only hurts the computing world.\n\n#### Warning - tkinter + Python 3.7.3 and later, including 3.8 has problems\n\nThe version of tkinter that is being supplied with the 3.7.3 and later versions of Python is known to have a problem with table colors.  Basically, they don't work.  As a result, if you want to use the plain PySimpleGUI running on tkinter, you should be using 3.7.2 or less.  3.6 is the version PySimpleGUI has chosen as the recommended version for most users.\n\n## Output Devices\n\nIn addition to running as a desktop GUI, you can also run your GUI in a web browser by running PySimpleGUIWeb. \n\nThis is ideal for \"headless\" setups like a Raspberry Pi that is at the core of a robot or other design that does not have a normal display screen.  For these devices, run a PySimpleGUIWeb program that never exits.  \n\nThen connect to your application by going to the Pi's IP address (and port #) using a browser and you'll be in communication with your application.  You can use it to make configuration changes or even control a robot or other piece of hardward using buttons in your GUI\n\n## A Complete PySimpleGUI Program (Getting The Gist)\n\nBefore diving into details, here's a description of what PySimpleGUI is/does and why that is so powerful.\n\nYou keep hearing \"custom window\" in this document because that's what you're making and using... your own custom windows.\n\n**ELEMENTS** is a word you'll see everywhere... in the code, documentation, ... Elements == PySimpleGUI's Widgets.  As to not confuse a tkinter Button Widget with a PySimpleGUI Button Element, it was decided that PySimpleGUI's Widgets will be called Elements to avoid confusion.\n\nWouldn't it be nice if a GUI with 3 \"rows\" of Elements was defined in 3 lines of code?  That's exactly how it's done.  Each row of Elements is a list.  Put all those lists together and you've got a window.\n\nWhat about handling button clicks and stuff.  That's 4 lines of the code below beginning with the while loop.  \n\nNow look at the `layout` variable and then look at the window graphic below.  Defining a window is taking a design you can see visually and then visually creating it in code.  One row of Elements = 1 line of code (can span more if your window is crowded).  The window is exactly what we see in the code.  A line of text, a line of text and an input area, and finally ok and cancel buttons.\n\nThis makes the coding process extremely quick and the amount of code very small\n\n```python\nimport PySimpleGUI as sg\nsg.theme('DarkAmber')   # Add a little color to your windows\n# All the stuff inside your window. This is the PSG magic code compactor...\nlayout = [  [sg.Text('Some text on Row 1')],\n            [sg.Text('Enter something on Row 2'), sg.InputText()],\n            [sg.OK(), sg.Cancel()]]\n\n# Create the Window\nwindow = sg.Window('Window Title', layout)\n# Event Loop to process \"events\"\nwhile True:             \n    event, values = window.read()\n    if event in (None, 'Cancel'):\n        break\n\nwindow.close()\n```\n\n![image](https://user-images.githubusercontent.com/46163555/68713283-7cb38200-056b-11ea-990a-aa1603af5a11.png)\n\nYou gotta admit that the code above is a lot more \"fun\" looking that tkinter code you've studied before.  Adding stuff to your GUI is ***trivial***.  You can clearly see the \"mapping\" of those 3 lines of code to specific Elements laid out in a Window.   It's not a trick.  It's how easy it is to code in PySimpleGUI.  With this simple concept comes the ability to create any window layout you wish.  There are parameters to move elements around inside the window should you need more control.\n\nIt's a thrill to complete your GUI project way ahead of what you estimated.  Some people take that extra time to polish their GUI to make it even nicer, adding more bells and whistles because it's so easy and it's a lot of fun to see success after success as you write your program.\n\nSome are more advanced users and push the boundaries out and extend PySimpleGUI using their own extensions.\n\nOthers, like IT people and hackers are busily cranking out GUI program after GUI program, and creating tools that others can use.  Finally there's an easy way to throw a GUI onto your program and give it to someone.  It's a pretty big leap in capability for some people.  It's GREAT to hear these successes.  It's motivating for everyone in the end.  Your success can easily motivate the next person to give it a try and also potentially be successful.\n\nUsually there's a one to one mapping of a PySimpleGUI Element to a GUI Widget. A \"Text Element\" in PySimpleGUI == \"Label Widget\" in tkinter.  What remains constant for you across all PySimpleGUI platforms is that no matter what the underlying GUI framework calls the thing that places text in your window, you'll always use the PySimpleGUI Text Element to access it.\n\n### The final bit of magic is in how Elements are created and changed.  \n\nSo far you've seen simply layouts with no customization of the Elements.  Customizing and configuring Elements is another place PySimpleGUI utilizes the Python language to make your life easier.  \n\nWhat about Elements that have settings other than the standard system settings?   What if I want my Text to be blue, with a Courier font on a green background.  It's written quite simply:\n\n```python\nText('This is some text', font='Courier 12', text_color='blue', background_color='green')\n```\n\nThe Python named parameters are ***extensively*** in PySimpleGUI. They are key in making the code compact, readable, and trivial to write.\n\nAs you'll learn in later sections that discuss the parameters to the Elements, there are a LOT of options avilable to you should you choose to use them.  The `Text Element` has 15 parameters that you can change.  This is one reason why PyCharm is suggested as your IDE... it does a fantastic job of displaying documentation as you type in your code.\n\n### That's *The* *Basics*\n\nWhat do you think?  Easier so far than your previous run-ins with GUIs in Python?  Some programs, many in fact, are as simple as this example has been.\n\nBut PySimpleGUI certainly does **not** end here.  This is the beginning. The scaffolding you'll build upon.\n\n## The Underlying GUI Frameworks & Status of Each\n\nAt the moment there are 4 acitvely developed and maintained \"ports\" of PySimpleGUI.  These include:\n\n1. tkinter - Fully complete\n2. Qt using Pyside2 - Alpha stage.  Not all features for all Elements are done\n3. WxPython - Development stage, pre-releaser.  Not all Elements are done. Some known problems with multiple windows\n4. Remi (Web browser support) - Development stage, pre-release.\n\nWhile PySimpleGUI, the tkinter port, is the only 100% completed version of PySimpleGUI, the other 3 ports have a LOT of functionality in them and are in active use by a large portion of the installations.  You can see the number of Pip installs at the very top of this document to get a comparison as to the size of the install base for each port.  The \"badges\" are right after the logo.\n\n# The PySimpleGUI \"Family\"\n\n## What's The Big Deal? What is it?\n\nPySimpleGUI wraps tkinter, Qt, WxPython and Remi so that you get all the same widgets, but you interact with them in a more friendly way that's common across the ports. \n\nWhat does a wrapper do (Yo! PSG in the house!)?  It does the layout, boilerplate code, creates and manages the GUI Widgets for you and presents you with a **simple, efficient interface.**   Most importantly, it maps the Widgets in tkinter/Qt/Wx/Remi into PySimpleGUI Elements.  Finally, it replaces the GUIs' event loop with one of our own.  \n\nYou've seen examples of the code already.  The big deal of all this is that anyone can create a GUI simply and quickly that matches GUIs written in the native GUI framework.  You can create complex layouts with complex element interactions.  And, that code you wrote to run on tkinter will also run on Qt by changing your import statement.\n\nIf you want a deeper explanation about the [architecture of PySimpleGUI](https://pysimplegui.readthedocs.io/en/latest/architecture/), you'll find it on ReadTheDocs in the same document as the Readme & Cookbook. There is a tab at the top with labels for each document.\n\n## The \"Ports\"\n\nThere are distinct ports happening as mentioned above.  Each have their own location on GitHub under the main project.  They have their own Readme with is an *augmentation* of this document... they are meant to be used together.\n\nPySimpleGUI is released on PyPI as 5 distinct packages.\n1. PySimpleGUI - tkinter version\n2. PySimpleGUI27 - tkinter version that runs on 2.7\n3. PySimpleGUIWx - WxPython version\n4. PySimpleGUIQt - PySided2 version\n5. PySimpleGUIWeb - The web (Remi) version\n\nYou will need to install them separately\n\nThere is also an accompanying debugger known as `imwatchingyou`.  If you are running the tkinter version of PySimpleGUI, you will not need to install the debugger as there is a version embedded directly into PySimpleGUI.\n\n## Qt Version\n\nQt was the second port after tkinter.  It is the 2nd most complete with the original PySimpleGUI (tkinter) being the most complete and is likely to continue to be the front-runner.  All of the Elements are available on PySimpleGUIQt.\n\nAs mentioned previously each port has an area.  For Qt, you can learn more on the [PySimpleGUIQt GitHub site](https://github.com/MikeTheWatchGuy/PySimpleGUI/tree/master/PySimpleGUIQt).  **There is a separate Readme file for the Qt version** that you'll find there.  This is true for all of the PySimpleGUI ports.\n\nGive it a shot if you're looking for something a bit more \"modern\".  PySimpleGUIQt is currently in **Alpha**.  *All of the widgets are operational but some may not yet be full-featured.*  If one is missing and your project needs it, log an Issue.  It's how new features are born.\n\nHere is a summary of the Qt Elements with no real effort spent on design clearly.  It's an example of the \"test harness\" that is a part of each port. If you run the PySimpleGUI.py file itself then you'll see one of these tests.\n\nAs you can see, you've got a full array of GUI Elements to work with.  All the standard ones are there in a single window.  So don't be fooled into thinking PySimpleGUIQt is barely working or doesn't have many widgets to choose from.  You even get TWO \"Bonus Elements\" - `Dial` and `Stretch`\n\n## WxPython Version\n\n[PySimpleGUIWx GitHub site](https://github.com/PySimpleGUI/PySimpleGUI/tree/master/PySimpleGUIWx).  **There is a separate Readme file for the WxPython version**.\n\nStarted in late December 2018 PySimpleGUIWx started with the SystemTray Icon feature.    This enabled the package to have one fully functioning feature that can be used along with tkinter to provide a complete program.    The System Tray feature is complete and working very well.  It was used not long ago in a corporate setting and has been performing with few problems reported.\n\nThe Windowing code was coming together with Reads operational.  The elements were getting completed on a regular basis. But I ran into multiwindow problems.  And it was at about this time that Remi was suggested as a port.\n\nRemi (the \"web port\") overnight lept the WxPython effort and Web became a #1 priority and continues to be.  The thought is that the desktop was well represented with PySimpleGUI, PySimpleGUIQt, and PySimpleGUIWx.  Between those ports is a solid winowing system and 2 system tray implementations and a nearly feature complete Qt effort.  So, the team was switched over to PySimpleGUIWeb.\n\n## Web Version (Remi)\n\n[PySimpleGUIWeb GitHub site](https://github.com/PySimpleGUI/PySimpleGUI/tree/master/PySimpleGUIWeb).  **There is a separate Readme file for the Web version**.\n\nNew for 2019, PySimpleGUIWeb.  This is an exciting development!  PySimpleGUI in your Web Browser!\n\nThe underlying framework supplying the web capability is the Python package Remi.  https://github.com/dddomodossola/remi  Remi provides the widgets as well as a web server for you to connect to.  It's an exiting new platform to be running on and has temporarily bumped the WxPython port from the highest priority.  PySimpleGUIWeb is the current high priority project.\n\n**Use this solution for your Pi projects** that don't have anything connected in terms of input devices or display.  Run your Pi in \"headless\" mode and then access it via the Web interface.  This allows you to easily access and make changes to your Pi without having to hook up anything to it.\n\n****It's not meant to \"serve up web pages\"****\n\nPySimpleGUIWeb is first and foremost a **GUI**, a program's front-end. It is designed to have a single user connect and interact with the **GUI**.\n\nIf more than 1 person connects at a time, then both users will see the exact same stuff and will be interacting with the program as if a single user was using it.\n\n## Android Version\n\nPySimpleGUI runs on Android devices with the help of either the PyDroid3 app or the Termux app.  Both are capable of running tkinter programs which means both are capable of running PySimpleGUI.\n\nTo use with PyDroid3 you will need to add this import to the top of all of your PySimpleGUI program files:\n\n```python\nimport tkinter\n```\n\nThis evidently triggers PyDroid3 that the application is going to need to use the GUI.\n\nYou will also want to create your windows with the `location` parameter set to `(0,0)`.\n\nHere's a quick demo that uses OpenCV2 to display your webcam in a window that runs on PyDroid3:\n\n```python\nimport tkinter\nimport cv2, PySimpleGUI as sg\nUSE_CAMERA = 0      # change to 1 for front facing camera\nwindow, cap = sg.Window('Demo Application - OpenCV Integration', [[sg.Image(filename='', key='image')], ], location=(0, 0), grab_anywhere=True), cv2.VideoCapture(USE_CAMERA)\nwhile window(timeout=20)[0] is not None:\n    window['image'](data=cv2.imencode('.png', cap.read()[1])[1].tobytes())\n```\n\nYou will need to pip install opencv-python as well as PySimpleGUI to run this program.\n\nAlso, you must be using the Premium, yes paid, version of PyDroid3 in order to run OpenCV.  The cost is CHEAP when compared to the rest of things in life.  A movie ticket will cost you more.  Which is more fun, seeing **your Python program** running on your phone and using your phone's camera, or some random movie currently playing?  From experience, the Python choice is a winner.  If you're cheap, well, then you won't get to use OpenCV. No, there is no secret commercial pact between the PySimpleGUI project and the PyDroid3 app team.  \n\n## Source code compatibility\n\nIn theory, your source code is completely portable from one platform to another by simply changing the import statement.  That's the GOAL and suprisingly many times this 1-line change works.  Seeing your code run on tkinter, then change the import to `import  PySimpleGUIWeb as sg` and instead of a tkinter window, up pops your default browser with your window running on it is an incredible feeling.\n\nBut, ***caution is advised.***  As you've read already, some ports are further along than others.  That means when you move from one port to another, some features may not work.  There also may be some alignment tweaks if you have an application that precisely aligns Elements.\n\nWhat does this mean, assuming it works?  It means it takes a trivial amount of effort to move across GUI Frameworks.  Don't like the way your GUI looks on tkinter?  No problem, change over to try PySimpleGUIQt.  Made a nice desktop app but want to bring it to the web too?  Again, no problem, use PySimpleGUIWeb.\n\n## repl.it Version\n\n***Want to really get your mind blown?***  Check out this [PySimpleGUI program](https://repl.it/@PySimpleGUI/PySimpleGUIWeb-Demos) running in your web browser.\n\nThanks to the magic of repl.it and Remi it's possible to run PySimpleGUI code in a browser window without having Python running on your computer.  This should be viewed as a teaching and demonstration aid.  It is not meant to be a way of serving up web pages. It wouldn't work any way as each user forks and gets their own, completely different, workspace.\n\nThere are 2 ports of PySimpleGUI that run on repl.it - PySimpleGUI and PySimpleGUIWeb.\n\n### PySimpleGUI (tkinter based)\n\nThe primary PySimpleGUI port works very well on repl.it due to the fact they've done an outstanding job getting tkinter to run on these virtual machines.  Creating a program from scratch, you will want to choose the \"Python with tkinter\" project type.\n\nThe virtual screen size for the rendered windows isn't very large, so be mindful of your window's size or else you may end up with buttons you can't get to.\n\nYou may have to \"install\" the PySimpleGUI package for your project.  If it doesn't automatically install it for you, then click on the cube along the left edge of the browser window and then type in PySimpleGUI or PySimpleGUIWeb depending on which you're using.\n\n### PySimpleGUIWeb (Remi based)\n\nFor PySimpleGUIWeb programs you run using repl.it will automatically download and install the latest PySimpleGUIWeb from PyPI onto a virtual Python environment.  All that is required is to type `import PySimpleGUIWeb` you'll have a Python environment up and running with the latest PyPI release of PySimpleGUIWeb.\n\n### Creating a repl.it project from scratch / troubleshooting\n\nTo create your own repl.it PySimpleGUI project from scratch, first choose the type of Python virtual machine you want.  For PySimpleGUI programs, choose the \"Python with tkinter\" project type.  For PySimpleGUIWeb, choose the normal Python project.\n\nThere have been times where repl.it didn't do the auto import thing.  If that doesn't work for some reason, you can install packages by clicking on the package button on the left side of the interface, typing in the package name (PySimpleGUI or PySimpleGUIWeb) and install it. \n\n### Why this is so cool (listen up Teachers, tutorial writers)\n\n***Educators*** in particular should be interested.  Students can not only post their homework easily for their teacher to access, but teachers can also run the students programs online.  No downloading needed.  Run it and check the results.\n\nFor people wanting to share their code, especially when helping someone with a problem, it's a great place to do it.  Those wishing to see your work do not have to be running Python nor have PySimpleGUI installed.\n\nThe way I use it is to first write my PySimpleGUI code on Windows, then copy and paste it into Repl.it.\n\nFinally, you can embed these Repl.it windows into web pages, forum posts, etc.  The \"Share\" button is capable of giving you the block of code for an \"iframe\" that will render into a working repl.it program in your page.  It's amazing to see, but it can be slow to load.\n\n### Repl.it is NOT a web server for you to \"deploy\" applications!\n\nRepl.it is not meant to serve up applications and web pages.  Trying to use it that way will not ressult in satisfactory results.  It's simply too slow and too technical of an interface for trying to \"deploy\" using it.  PySimpleGUIWeb isn't a great choice in serving web pages.  It's purpose is more to build a GUI that runs in a browser.\n\n## Macs\n\nIt's surprising that Python GUI code is completely cross platform from Windows to Mac to Linux.  No source code changes.  This is true for both  PySimpleGUI and PySimpleGUIQt.\n\nHistoricly, PySimpleGUI using tkinter have struggled on Macs.  This was because of a problem setting button colors on the Mac.  However, two events has turned this problem around entirely.\n\n1. Use of ttk Buttons for Macs\n2. Ability for Mac users to install Python from python.org rather than the Homebrew version with button problems\n\nIt's been a long road for Mac users with many deciding to use PySimpleGUIQt so that multi-colored windows could be made.  It's completely understandable to want to make attractive windows that utilitize colors.  \n\nPySimpleGUI now supports Macs, Linux, and Windows equally well. They all are able to use the \"Themes\" that automatically add color to your windows.  \n\nBe aware that Macs default to using ttk buttons.  You can override this setting at the Window and Button levels.  If you installed Python from python.org, then it's likely you can use the non-ttk buttons should you wish.\n\n# Support\n\n## Don't Suffer Silently\n\nThe GitHub Issues are checked *often*.  Very often.  **Please** post your questions and problems there and there only.  Please don't post on Reddit, Stackoverflow, on forums, until you've tried posting on the GitHub.\n\nWhy?  *It will get you the best support possible.*  Second, you'll be helping the project as what you're experiencing might very well be a bug, or even a *known* bug. Why spend hours thrashing, fighting against a known bug?\n\nIt's not a super-buggy package, but users do experience problems just the same.  Maybe something's not explained well enough in the docs.  Maybe you're making a common mistake.  Maybe that feature isn't complete yet.\n\nYou won't look stupid posting an Issue on GitHub.  It's just the opposite.\n\n### How to log issues\n\n**PySimpleGUI is an active project.**  Bugs are fixed, features are added, often.  Should you run into trouble, **open an issue** on the [GitHub site](http://www.PySimpleGUI.com) and you'll receive help.  Posting questions on StackOverflow, Forums, Mailing lists, Reddit, etc, is not the fastest path to support and taking it may very well lead you astray as folks not familiar with the package struggle to help you. You may also run into the common response of \"I don't know PySimpleGUI (and perhaps dislike it as a result), but I know you can do that with Qt\".\n\nWhy only 1 location?  It's simple.... it's where the bugs, enhancements, etc are tracked.  It's THE spot on the Internet for this project.  It's not some freakish being in control, telling people how to do things.  It's so that YOU get the best and quickest support possible.\n\nSo, [open an Issue](https://github.com/PySimpleGUI/PySimpleGUI/issues/new/choose), choose \"custom form\" and fill it out completely.  There are very good reasons behind all of the questions.  Cutting corners only cuts your chances of getting help and getting quality help as it's difficult enough to debug remotely.  Don't handicap people that want to help by not providing enough information.\n\n**Be sure and run your program outside of your IDE** ***first***.  Start your program from the shell using `python` or `python3` command.  On numerous occassions much time was spent chasing problems caused by the IDE.  By running from a command line, you take that whole question out of the problem, an important step.\n\n***Don't sit and stew, trying the same thing over and over***, until you hate life... stop, and post an Issue on the GitHub.  Someone **WILL** answer you.  Support is included in the purchase price for this package (the quality level matches the price as well I'm afraid).  Just don't be too upset when your free support turns out to be a little bit crappy, but it's free and typically good advice.\n\n### PySimpleGUI Trolls\n\nYea, they're out there.  Would have NEVER in a billion years guessed that there would be objection to this package, coming from a small, but vocal, number of people.  I naively believed everyone would be supportive, see the value, hold hands around the fire, sing songs, and in the very least be truthful.  But, this ain't Kansas and the Internet is well...  \n\nIf someone is actively discouraging you from using this package, then know you are on the right track and you should give it a try.  Stuff like this sometimes happens because the person works for a particular company or they have a GUI package of their own.... that's not popuplar, or they like to tear things down or I dunno... people can be really weird and emotional.\n\nI promise you're not going to be wrecked for life.  It will not cause you to be a bad programmer with bad habits.  It will not ruin your career.  It's not going to teach you bad habits.  One person I know got a bonus based on a PySimpleGUI program he wrote.\n\n***How about success being the goal?***  Spend time polishing your GUI and working on your primary code instead of struggling your way through the mountains of documentation in the Qt library, trying to set the color of something.  How about getting your program done, working, and in use?\n\nStart with PySimpleGUI, then in the future if you want to code directly in Qt, it's not like you won't be able to learn something else due to your PySimpleGUI knowledge.  Unable to write a `while` loop because you already learned using a `for` loop?  That seems to be the logic.\n\nIf anything, you'll have more knowledge than most people that are just starting because you'll have already built working GUIs, perhaps many of them and understand how to layout an efficient interface as well as having a good education in GUI Widgets and how they work.\n\nHere are the forces likely at work.... said Troll has been programming for a while now and really knows these GUI frameworks. Probably invested a lot of hours learning them and thus has some marketable skills (yes, follow the money).  \n\nEnter snotty-nosed high-shool or first year programmer using PySimpleGUI that manages to make GUI windows with great ease... that look, well, pretty much the **same** as the windows Sir Troll ***was*** used to getting paid big bucks to make.  What used to be a skill only a select few can do, now 1,000's, 10,000's, or 100,000s more programmers can do, quicker and easier.  Bummer Mr. Troll.  Bummer.\n\n\"***It's supposed to be difficult to write a GUI***\" was an actual reason listed why not to use PySimpleGUI by one person offering to help junior programmers learn Qt. Really?  It's supposed to be difficult.  Huh.  Well, not in this Python universe.  Maybe in C++ world it works that way??\n\nJust know you're safe in trying and possibly even succeeding in the process.\n\n### Target Audience\n\nPySimpleGUI is trying to serve the 80% of GUI *problems*. The other 20% go straight to tkinter, Qt, WxPython, Remi, or whatever fills that need.  That 80% is **a huge problem space**.  \n\n***The \"Simple\" of PySimpleGUI describes how easy it is to use, not the nature of the problem space it solves.***  Note that people are not part of that description.  It's not trying to solve GUI problems for 80% of the people trying it.  PySimpleGUI tries to solve 80% of GUI ***problems***, regardless of the programmer's experience level.\n\nIs file I/O in Python limited to only certain people?  Is starting a thread, building a multi-threaded Python program incredibly difficult such that it takes a year to learn?  No.  It's quite easy.  Like most things Python, you import the object from package and you use it.  It is 2 lines of Python code to create and start a thread.\n\nWhy can't it be 2 lines of code to show a GUI window?  What's SO special about the Python GUI libraries that they require you to follow a specific Object Oriented model of development?  Other parts and packages of Python don't tend to do that.  \n\nThe reason is because they didn't originate in Python. They are strangers in a strange land and they had to be \"adapted\".  They started as C++ programs / SDKs, and remain that way too.  There's a vaneer of Python slapped onto the top of them, but that sure didn't make them fit the language as well as they could have.\n\nPySimpleGUI is designed with both the beginner and the experienceed developer in mind.  Why?  Because both tend to like compact code.  Most like people, we just want to get sh\\*t done, right?  And, why not do it in a way that's like how most of Python works?\n\nThe beginners can begin working with GUIs ***in their first week of Python education***.  The professionals can jump right into the deep end of the pool to use the entire array of Elements and their capabilities to build stuff like a database application.\n\nHere's a good example of how PySimpleGUI serves these 2 groups.... the `InputText` Element has 16 potential parameters, yet you'll find 0 or 1 parameters set by beginners. Look at the examples throughout this document and you'll see the code fragments utilize a tiny fraction of the potential parameters / settings.  Simple... **keep it simple for the default case**.  This is part of the PySimpleGUI mission.  \n\nSome developers are heavily wedded to the existing GUI Framework Architectures (Qt, WxPyton, tkinter).  They like the existing GUI architectures (they're all roughly the same, except this one).  If you're in that crowd, join the \"20% Club\" just down the street.  There's plenty of room there with plenty of possible solutions.\n\nBut how about a quick stop-in for some open mindedness exercises.  Maybe you will come up with an interesting suggestion even if you don't use it.  Or maybe PySimpleGUI does something that inspires you to write something similar directly in Qt.  And please, at least be civil about it.  There is room for multiple architectures.  Remember, you will not be *harmed* by writing some PySimpleGUI code just like you won't by writing some tkinter or Qt code.  Your chances of feeling harmed is more likely from one of those 2.\n\n#### Beginners & Easier Programs\n\nThere are a couple of reasons beginners stop in for a look.  The first is to simply throw a simple GUI onto the front of an existing command line application.  Or maybe you need to popup a box to get a filename.  These can often be simple 1-line `Popup` calls.  Of course, you don't have to be a beginner to add a GUI onto one of your existing command line programs.  Don't feel like because you're an advanced programmer, you need to have an advanced solution.\n\nIf you have a more intricate, complete, perhaps multi-window design in mind, then PySimpleGUI still could be your best choice.\n\nThis package is not only great to use as your first GUI package, but it also teaches how to design and utilize a GUI. It does it better than the existing GUIs by removing the syntax, and lengthy code that can take an otherwise very simple appearing program into something that's completely unrecognizable.  With PySimpleGUI your 'layout' is all you need to examine to see the different GUI Elements that are being used.\n\nWhy does PySimpleGUI make it any easier to learn about GUIs?  Because it removes the classes, callback functions, object oriented design to better get out of your way and let you focus entirely on your GUI and not how to represent it in code.  \n\nThe result is 1/2 to 1/10 th the amount of code that implements the exact same layout and widgets as you would get from coding yourself directly in Qt5.  It's been tested many times... again and again, PySimpleGUI produces significantly less code than Qt and the frameworks it runs on.\n\nForget syntax completely and just look on the overall activities of a PySimpleGUI programmer.  You have to design your window.... determine your inputs and your outputs, place buttons in strategic places, create menus, .... You'll be busy just doing all those things to design and define your GUI completely independent upon the underlying framework. \n\nAfter you get all those design things done and are ready to build your GUI, it's then that you face the task of learning a GUI SDK.  Why not start with the easy one that gives you many successes?  You're JUST getting ***started***, so cut yourself a break and use PySimpleGUI so that you can quickly get the job done and move on to the next GUI challenge.\n\n#### Advanced Programmers, Sharp Old-Timers, Code Slingers and Code Jockeys\n\nIt's not perfect, but PySimpleGUI is an amazing bit of technology.  It's the programmer, the computer scientist, that has experience working with GUIs in the past that will recognize the power of this simple architecture.\n\nWhat I hear from seasoned professionals is that PySimpleGUI saves them a **ton** of time.  They've written GUI code before.  They know how to lay out a window.  These folks just want to get their window working and quick.\n\nWith the help of IDE's like PyCharm, Visual Studio and Wing (the offically supported IDE list) you get instant documentation on the calls you are making.  On PyCharm you instantly see both the call signature but also the explanations about each parameter.\n\nIf the screenshots, demo programs and documentation don't convince you to at least **give it a try, once**, then you're way too busy, or .....  I dunno, I stopped guessing \"why?\" some time ago.  \n\nSome of the most reluctant of people to try PySimpleGUI have turned out to be some of the biggest supporters.\n\n#### A Moment of Thanks To The PySimpleGUI Users\n\nI want to thank the early users of PySimpleGUI that started in 2018.  Your suggestions helped shape the package and have kept it moving forward at a fast pace.\n\nFor all the users, while I can't tell you the count of the number of times someone has said \"thank you for PySimpleGUI\" as part of logging and Issue, or a private message or email, but I can tell you that it's been significant.\n\n***EVERY one of those \"thank you\" phrases, no matter how small you may think it is, helps tremendously.***\n\nSometimes it's what gets me past a problem or gets me to write yet more documentation to try and help people understand quicker and better.  Let's just say the effect is always positive and often significant.\n\nPySimpleGUI users have been super-nice.  I doubt all Open Source Projects are this way, but I could be wrong and every GitHub repository has awesome users.  If so, that's even more awesome!\n\n**THANK YOU PySimpleGUI USERS!**\n\n-------------------\n\n# Learning Resources\n\n***This document.... you must be willing to read this document if you expect to learn and use PySimpleGUI.*** \n\nIf you're unwilling to even try to figure out how to do something or find a solution to a problem and have determined it's \"easier to post a question first than to look at the docs\", then this is not the GUI package for you.  *If you're unwilling to help yourself, then don't expect someone else to try first.*  You need to hold up your end of the bargain by at least doing some searches of this document.\n\nWhile PySimpleGUI enables you to write code easily, it doesn't mean that it magically fills your head with knowledge on how to use it.  The built-in docstrings help, but they can only go so far.  \n\n***Searching this document is as easy as pressing Control + F.***\n\nThis document is on the GitHub homepage, as the readme. http://www.PySimpleGUI.com will get you there.  If you prefer a version with a Table of Contents on the left edge then you want to go to http://www.PySimpleGUI.org .  \n\n## The PySimpleGUI, Developer-Centric Model\n\nYou may think that you're being fed a line about all these claims that PySimpleGUI is built specifically to make your life easier and a lot more fun than the alternatives.... especially after reading the bit above about reading this manual.\n\n### Psychological Warfare\n\nBrainwashed. Know that there is an active campaign to get you to be successful using PySimpleGUI.  The \"Hook\" to draw you in and keep you working on your program until you're satisfied is to work on the dopamine in your brain. Yes, your a PySimpleGUI rat, pressing on that bar that drops a food pellet reward in the form of a working program.\n\nThe way this works is to give you success after success, with very short intervals between.  For this to work, what you're doing must work.  The code you run must work.  Make small changes to your program and run it over and over and over instead of trying to do one big massive set of changes.  Turn one knob at a time and you'll be fine.\n\nFind the keyboard shortcut for your IDE to run the currently shown program so that running the code requires 1 keystroke.  On PyCharm, the key to run what you see is Control + Shift + F10.  That's a lot to hold down at once.  I programmed a hotkey on my keyboard so that it emits that combination of keys when I press it.  Result is a single button to run.\n\n### Tools\n\nThese tools were created to help you achieve a steady stream of these little successses.\n\n* This readme and its example pieces of code\n* The Cookbook - Copy, paste, run, success\n* Demo Programs - Copy these small programs to give yourself an instant headstart\n* Documentation shown in your IDE (docstrings) means you do not need to open any document to get the full assortment of options available to you for each Element & function call\n\nThe initial \"get up and running\" portion of PySimpleGUI should take you less than 5 minutes.  The goal is 5 minutes from your decision \"I'll give it a try\" to having your first window up on the screen \"Oh wow, it was that easy?!\"\n\nThe primary learning pathes for PySimpleGUI are:\n\n* This readme document over 100 pages of PySimpleGUI User Manual \n\t* http://www.PySimpleGUI.org\n* The Cookbook - Recipes to get you going and quick\n\t* http://Cookbook.PySimpleGUI.org\n* The Demo Programs - Start hacking on one of these running soluitions\n\t* http://www.PySimpleGUI.com\n* The YouTube videos - If you like instructional videos, there are 15+ videos\n\t* [5 part series of basics](https://www.youtube.com/playlist?list=PLl8dD0doyrvHMoJGTdMtgLuHymaqJVjzt)\n\t* [10 part series of more detail](https://www.youtube.com/playlist?list=PLl8dD0doyrvGyXjORNvirTIZxKopJr8s0)\n\nEverything is geared towards giving you a \"quick start\" whether that be a Recipe or a Demo Program.  The idea is to give you something running and let you hack away at it.  As a developer this saves tremendous amounts of time.\n\nYou **start** with a working program, a GUI on the screen.  Then have at it.  If you break something (`\"a happy little accident\"` as Bob Ross put it), then you can always backtrack a little to a known working point.\n\nA high percentage of users report both learning PySimpleGUI and completing their project in a single day.\n\nThis isn't a rare event and it's not bragging.  GUI programming doesn't HAVE to be difficult by definition and PySimpleGUI has certainly made it much much more approachable and easier (not to mention simpler).\n\nBut, you need to look at this document when pushing into new, unknown territory.  Don't guess... or more specifically, don't guess and then give up when it doesn't work.\n\n## This Readme and Cookbook\n\nThe readme and Cookbook, etc are best viewed on ReadTheDocs.  The quickest way there is to visit:\nhttp://www.PySimpleGUI.org\n\nYou will be auto-forwarded to the right destination.  There are multiple tabs on ReadTheDocs.  One for the main readme and one for the Cookbook.  There are other documents there like an architectural design doc.\n\nThe Cookbook has approx 27 \"Recipes\" or short programs that can be easily copied and pasted.\n\n## Demo Programs\n\nThe GitHub repo has the Demo Programs.  There are ones built for plain PySimpleGUI that are usually portrable to other versions of PySimpleGUI.  And there are some that are associated with one of the other ports.  The easiest way to the GitHub:\n\nhttp://www.PySimpleGUI.com\n\nAs of this writing, on 2019-07-10 there are 177 Demo Programs for you to choose from.  \n\nThese programs demonstrate to you how to use the Elements and especially how to integtate PySimpleGUI with some of the popular open source technologies such as OpenCV, PyGame, PyPlot, and Matplotlib to name a few.\n\nMany Demo Programs that are in the main folder will run on multiple ports of PySimpleGUI.  There are alse port-specific Demo Programs.  You'll find those in the folder with the port.  So, Qt specific Demo Programs are in the PySimpleGUIQt folder.\n\n---\n\n# The Quick Tour\n\nLet's take a super-brief tour around PySimpleGUI before digging into the details.  There are 2 levels of windowing support in PySimpleGUI -  High Level and Customized.\n\nThe high-level calls are those that perform a lot of work for you. These are not custom made windows (those are the other way of interacting with PySimpleGUI).\n\nLet's use one of these high level calls, the `Popup` and use it to create our first window, the obligatory \"Hello World\".  It's a single line of code.  You can use these calls like print statements, adding as many parameters and types as you desire.\n\n```python\nimport PySimpleGUI as sg\n\nsg.Popup('Hello From PySimpleGUI!', 'This is the shortest GUI program ever!')\n```\n\n![hello world](https://user-images.githubusercontent.com/13696193/44960047-1f7f6380-aec6-11e8-9d5e-12ef935bcade.jpg)\n\nOr how about a ***custom GUI*** in 1 line of code?  No kidding this is a valid program and it uses Elements and produce the same Widgets like you normally would in a tkinter program.  It's just been compacted together is all, strictly for demonstration purposes as there's no need to go that extreme in compactness, unless you have a reason to and then you can be thankful it's possible to do.\n\n```python\nimport PySimpleGUI as sg\n\nevent, values = sg.Window('Get filename example', [[sg.Text('Filename')], [sg.Input(), sg.FileBrowse()], [sg.OK(), sg.Cancel()] ]).Read()\n```\n\n![get filename](https://user-images.githubusercontent.com/13696193/44960039-f1018880-aec5-11e8-8a43-3d7f8ff93b67.jpg)\n\n## The Beauty of Simplicity\n\n> One day I will find the right words, and they will be simple.\nâ€• Jack Kerouac\n\nThat's nice that you can crunch things into 1 line, like in the above example, but it's not readable.  Let's add some whitespace so you can see the **beauty** of the PySimpleGUI code.\n\nTake a moment and look at the code below.  Can you \"see\" the window looking at the `layout` variable, knowing that each line of code represents a single row of Elements?  There are 3 \"rows\" of Elements shown in the window and there are 3 lines of code that define it.\n\nCreating and reading the user's inputs for the window occupy the last 2 lines of code, one to create the window, the last line shows the window to the user and gets the input values (what button they clicked, what was input in the Input Element)\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your creations colorful\n\nlayout = [\t[sg.Text('Filename')],\n          \t[sg.Input(), sg.FileBrowse()], \n\t  \t\t[sg.OK(), sg.Cancel()]] \n\nwindow = sg.Window('Get filename example', layout)\n\nevent, values = window.Read()\nwindow.close()\n```\n\n![get filename](https://user-images.githubusercontent.com/13696193/44960039-f1018880-aec5-11e8-8a43-3d7f8ff93b67.jpg)\n\nUnlike other GUI SDKs, you can likely understand every line of code you just read, even though you have not yet read a single instructional line from this document about how you write Elements in a layout.\n\nThere are no pesky classes you are *required* to write, no callback functions to worry about.  None of that is required to show a window with some text, an input area and 2 buttons using PySimpleGUI.  \n\nThe same code, in tktinter, is 5 times longer and I'm guessing you won't be able to just read it and understand it.  While you were reading through the code, did you notice there are no comments, yet you still were able to understand, using intuition alone.\n\nYou will find this theme of Simple everywhere in and around PySimpleGUI.  It's a way of thinking as well as an architecture direction.  Remember, you, Mr./Ms. Developer, are at the center of the package.  So, from your vantage point, of course everything should look and feel simple.\n\nNot only that, it's the Pythonic thing to do.  Have a look at line 3 of the \"Zen of Python\".\n\n> The Zen of Python, by Tim Peters\n>\n> Beautiful is better than ugly.\n> Explicit is better than implicit.\n> Simple is better than complex.\n> Complex is better than complicated.\n> Flat is better than nested.\n> Sparse is better than dense.\n> Readability counts.\n> Special cases aren't special enough to break the rules.\n> Although practicality beats purity.\n> Errors should never pass silently.\n> Unless explicitly silenced.\n> In the face of ambiguity, refuse the temptation to guess.\n> There should be one-- and preferably only one --obvious way to do it.\n> Although that way may not be obvious at first unless you're Dutch.\n> Now is better than never.\n> Although never is often better than *right* now.\n> If the implementation is hard to explain, it's a bad idea.\n> If the implementation is easy to explain, it may be a good idea.\n> Namespaces are one honking great idea -- let's do more of those!\n\nI just hope reading all these pages of documentation is going to make you believe that we're breaking suggestion:\n> If the implementation is hard to explain, it's a bad idea.\n> If the implementation is easy to explain, it may be a good idea.\n\nI don't think PySimpleGUI is ***difficult*** to explain, but I am striving to fully explain it so that you don't do this:\n\n> In the face of ambiguity, refuse the temptation to guess.\n\nSometimes you can guess and be fine.  Other times, things may work, but the side effects are potentially significant.  There may be a much better way to solve a problem - Log an Issue on GitHub!  \n\n------\n\n# Some Examples\n\n## Polishing Your Windows = Building \"Beautiful Windows\"\n\nAnd STILL the Zen of Python fits:\n\n> Beautiful is better than ugly.\n\nbut this fits too:\n\n> Although practicality beats purity.\n\nFind a balance that works for you.\n\n\"But tkinter sucks\"\n\"It looks like the 1990s\" (this one is often said by people that were not alive in the 1990s)\n\"What Python GUI SDK will make my window look beautiful?\"  (posted to Reddit at least every 2 weeks)\n\nThese windows below were ALL made using PySimpleGUI, the tkinter version and they look good enough to not be simply scoffed at and dismissed.  Remember, developer, you have a rather significant hand in how your application looks and operates.  You certainly cannot pin it all on the GUIs you're using.\n\nSo many posts on Reddit asking which GUI is going to result in a \"beautiful window\", as if there's a magic GUI library that pretties things up for you.  There are some calls in PySimpleGUI that will help you.  For example, you can make a single call to \"Chang the look and feel\" which loads predefined color pallets so your windows can have some instant color and it matches.\n\nBeautiful windows are created, not simply given to you.  There are people that design and create artwork for user interfaces, you know that right?  Artists draw buttons, artwork that you include in the window to make it nicer.\n\nSome of these have been \"polished\", others like the Matplotlib example is more a functional example to show you it works.\n\n![batterup2](https://user-images.githubusercontent.com/13696193/50378902-6aa2bb00-060a-11e9-8f2f-d746694fa4ee.gif)\n\n![uno_final](https://user-images.githubusercontent.com/13696193/49945232-67952580-feba-11e8-90c8-7dc31c5f7c67.gif)\n\nThis chess program is capable of running multiple AI chess engines and was written by another user using PySimpleGUI.\n\n![image](https://user-images.githubusercontent.com/13696193/61083102-e9214780-a3f8-11e9-9d1d-7c0a388625be.png)\n\nThis downloader can download files as well as YouTube videos and metadata.  If you're worried about multiple windows working, don't.  Worried your project is \"too much\" or \"too complex\" for PySimpleGUI?  Do an initial assessment if you want.  Check out what others have done.  \n\nYour program have 2 or 3 windows and you're concerned?  Below you'll see 11 windows open, each running independently with multiple tabs per window and progress meters that are all being updated concurrently.  \n\n![concurrent_windows](https://user-images.githubusercontent.com/13696193/62832448-3eb96180-bbfc-11e9-8777-6f2669566c93.png)\n\n![pyplot 1](https://user-images.githubusercontent.com/13696193/44683336-11d46480-aa14-11e8-9d6c-f656796fc915.jpg)\n\nJust because you can't match a pair of socks doesn't mean your windows have to all look the same gray color.  Choose from over 100 different \"Themes\".  Add 1 line call to `theme` to instantly transform your window from gray to something more visually pleasing to interact with.  If you mispell the theme name badly or specify a theme name is is missing from the table of allowed names, then a theme will be randomly assigned for you.  Who knows, maybe the theme chosen you'll like and want to use instead of your original plan.\n\nIn PySimpleGUI release 4.6 the number of themes was dramatically increased from a couple dozen to over 100.  To use the color schemes shown in the window below, add a call to `theme('Theme Name)` to your code, passing in the name of thd desired color theme. To see this window and the list of available themes on your releeae of softrware, call the function `theme_previewer()`.  This will create a window with the frames like those below.  It will shows you exactly what's available in your version of PySimpleGUI.\n\nIn release 4.9 another 32 Color Themes were added... here are the current choices\n\n![Dec 2019 Look And Feel Themes](https://user-images.githubusercontent.com/46163555/70382042-796da500-1923-11ea-8432-80d08cd5f503.jpg)\n\nMake beautiful looking, alpha-blended (partially transparent) Rainmeter-style Desktop Widgets that run in the background.\n\n![cpu cores dashboard 2](https://user-images.githubusercontent.com/13696193/47611749-18964c80-da42-11e8-93c4-6821a6fce488.gif)\n\nWant to build a Crossword Puzzle?  No problem, the drawing primitives are there for you.\n\n![snag-0185](https://user-images.githubusercontent.com/13696193/47968340-98ba4480-e036-11e8-9d44-8a39ac174533.jpg)\n\nThere are built-in drawing primitives\n\n![snag-0168](https://user-images.githubusercontent.com/13696193/47753225-2ed42080-dc6d-11e8-88d1-cf833db6c7ef.jpg)\n\nFrame from integration with a YOLO Machine Learning program that does object identification in realtime while allowing the user to adjust the algorithms settings using the sliders under the image.  This level of interactivity with an AI algorithm is still unusual to find due to difficulty of merging the technologies of AI and GUI.  It's no longer difficult.  This program is under 200 lines of code.\n\n![snag-0278](https://user-images.githubusercontent.com/13696193/48845583-e4752980-ed6a-11e8-9b2f-6c3d5d2442ba.jpg)\n\n# Pi Windows\n\nPerhaps you're looking for a way to interact with your **Raspberry Pi** in a more friendly way.  Your PySimpleGUI code will run on a Pi with no problem.  Tkinter is alive and well on the Pi platform. Here is a selection of some of the Elements shown on the Pi.  You get the same Elements on the Pi as you do Windows and Linux.\n\n![raspberry pi everything demo](https://user-images.githubusercontent.com/13696193/44279694-5b58ce80-a220-11e8-9ab6-d6021f5a944f.jpg)\n\nYou can add custom artwork to make it look nice, like the Demo Program - Weather Forecast shown in this image:\n\n![weather pi](https://user-images.githubusercontent.com/13696193/47305324-1d4ca200-d5f7-11e8-8584-24a3992283ee.jpg)\n\n![weather alone](https://user-images.githubusercontent.com/13696193/47305323-1d4ca200-d5f7-11e8-8fb1-44b0a7a4580f.jpg)\n\nOne thing to be aware of with Pi Windows, you cannot make them semi-transparent.  This means that the `Window.Disappear` method will not work.  Your window will not disappear.  Setting the Alpha Channel will have no effect.\n\nDon't forget that you can use custom artwork anywhere, including on the Pi.  The weather application looks beautiful on the Pi.  Notice there are no buttons or any of the normal looking Elements visible.  It's possible to build nice looking applications, even on the lower-end platforms.\n\n# Games\n\nIt's possible to create some cool games by simply using the built-in PySimpleGUI graphic primivites like those used in this game of pong.  PyGame can also be embedded into a PySimpleGUI window and code is provided to you demonstrating how.  There is also a demonstration of using the pymunk physics package that can also be used for games.\n\nGames haven't not been explored much, yet, using PySimpleGUI.\n\n![pong](https://user-images.githubusercontent.com/13696193/45860012-2d8d0b00-bd33-11e8-9efd-3eaf4c30f324.gif)\n\n# Windows Programs That Look Like Windows Programs\n\n***Do you have the desire to share your code with other people in your department, or with friends and family?*** Many of them may not have Python on their computer.  And in the corporate environment, it may not be possible for you to install Python on their computer.\n\n`PySimpleGUI + PyInstaller` to the rescue!!\n\nCombining PySimpleGUI with PyInstaller creates something truly remarkable and special, a Python program that looks like a Windows WinForms application.  \n\nThe application you see below with a working menu was created in 20 lines of Python code.  It is a single .EXE file that launches straight into the screen you see.  And more good news, the only icon you see on the taskbar is the window itself... there is no pesky shell window.  Nice, huh? \n\n![menu demo](https://user-images.githubusercontent.com/13696193/45923097-8fbc4c00-beaa-11e8-87d2-01a5331811c8.gif)\n\nWith a simple GUI, it becomes practical to \"associate\" .py files with the python interpreter on Windows.  Double click a py file and up pops a GUI window, a more pleasant experience than opening a dos Window and typing a command line.\n\nThere is even a PySimpleGUI program that will take your PySimpleGUI program and turn it into an EXE.  It's nice because you can use a GUI to select your file and all of the output is shown in the program's window, in realtime.\n\n# Background - Why PySimpleGUI Came to Be\n\nFeel free to skip all this if you don't care to know the backstory and reasons behind decisions.\n\nThere was a project looming and a GUI was needed.  It wasn't a very complex GUI so thus began a search for a simplified GUI package that would enable me to work with tkinter easier.  I found a few, and they were pretty popular too, but they lacked the full-compliment of Widgets and it was impossible to define my own window using those widgets.\n\nA whacky idea came to mind... what if I wrote a simplified GUI and then used THAT to write my application.  It would be a lot less code and it would be \"easy\" to write my application then.  And that is exactly what was done.\n\nFirst an early version of PySimpleGUI was written that had a subset of the Elements avaiable today.  It had just enough for my application.  Then I wrote my application in PySimpleGUI.\n\nThus PySimpleGUI was born out of necessity and it's been the necessity of others that have helped evolve it into the package it is today.  It would not be 1/2 as good without the help of the community.\n\nOnce PySimpleGUI was done, it was time to start working on \"the ports\".  And, of course, also this documentation.\n\n## The Non-OO and Non-Event-Driven Model\n\nThe two \"advanced concepts\" that beginning Python students have with GUIs are the use of classes and callbacks with their associated communication and coordination mechanisms (semaphores, queues, etc)\n\nHow do you make a GUI interface easy enough for first WEEK Python students? \n\nThis meant classes could be used to build and use it, but classes can not be part of the code the user writes.  Of course, an OO design is quite possible to use with PySimpleGUI, but it's not a ***requirement***.  The sample code and docs stay away from writing new classes in the user space for the most part.\n\nWhat about those pesky callbacks?  They're difficult for beginners to grasp and they're a bit of a pain in the ass to deal with.  The way PySimpleGUI got around events was to utilize ***a \"message passing\" architecture*** instead.  \n\nInstead of a user function being called when there's some event, instead the information is \"passed\" to the user when they call the function `Window.Read()` \n\n***Everything*** is returned through this `Window.Read` call.  Of course the underlying GUI frameworks still perform callbacks, but they all happen inside of PySimpleGUI where they are turned into messages to pass to you.\n\nAll of the boilerplate code, the event handling, widget creation, frames containing widgets, etc, are **exactly the same** objects and calls that you would be writing if you wrote directly in tktiner, Qt, etc.  With all of this code out of the way and done for you, that leaves you with the task of doing something useful with the information the user entered.  THAT, afterall, is the goal here.... getting user information and acting on it.\n\nThe full complement of Widgets are available to you via PySimpleGUI Elements.  And those widgets are presented to you in a unique and fun way.\n\nIf you wish to learn more about the Architecture of PySimpleGUI, take a look at the [Architecture document located on ReadTheDocs](https://pysimplegui.readthedocs.io/en/latest/architecture/).\n\n### The Result\n\nA GUI that's appealing to a broad audience that is highly customizable, easy to program, and is solid with few bugs and rarely crashes (99% of the time it's some other error that causes a crash).\n\nPySimpleGUI is becoming more and more popular. The number of installs and the number of successes grows daily.  Pip installs have exceeded 350,000 in the first year of existance.  Over 300 people a day visit the GitHub and the project has 1,800 stars (thank you aweesome users!)\n\nThe number of ports is up to 4.  The number of integrations with other technologies is constantly being expanded.  It's a great time to try PySimpleGUI!  You've got no more than 5 or 10 minutes to lose.\n\nCaution is needed, however, when working with the unfinished ports.  PySimpleGUI, the tkinter version, is the only fully complete port.  Qt is next.  All of its Elements are completed, but not all of the options of each element are done.  PySimpleGUIWeb is next in order of completness and then finally PySimpleGUIWx.\n\n# Features\n\nWhile simple to use, PySimpleGUI has significant depth to be explored by more advanced programmers.  The feature set goes way beyond the requirements of a beginner programmer, and into the  required features needed for complex multi-windowed GUIs.\n\nFor those of you that have heard PySimpleGUI is only good for doing the most simplest of GUIs, this feature list should put that myth to rest.  **The SIMPLE part of PySimpleGUI is how much effort _you_ expend to write a GUI, not the complexity of the program you are able to create.**  It's literally \"simple\" to do... and it is not limited to simple problems.\n\nFeatures of PySimpleGUI include:\n\n- Support for Python versions 2.7 and 3\n- Text\n- Single Line Input\n- Buttons including these types:\n\t- File Browse\n\t- Files Browse\n\t- Folder Browse\n\t- SaveAs\n\t- Normal button that returns event\n\t- Close window\n\t- Realtime\n\t- Calendar chooser\n\t- Color chooser\n\t- Button Menu\n- TTK Buttons or \"normal\" TK Buttons\n- Checkboxes\n- Radio Buttons\n- Listbox\n- Option Menu\n- Menubar\n- Button Menu\n- Slider\n- Spinner\n- Dial\n- Graph\n- Frame with title\n- Icons\n- Multi-line Text Input\n- Scroll-able Output\n- Images\n- Tables\n- Trees\n- Progress Bar            Async/Non-Blocking Windows\n- Tabbed windows\n- Paned windows\n- Persistent Windows\n- Multiple Windows - Unlimited number of windows can be open at the same time\n- Redirect Python Output/Errors to scrolling window\n- 'Higher level' APIs (e.g. MessageBox, YesNobox, ...)\n- Single-Line-Of-Code Proress Bar & Debug Print\n- Complete control of colors, look and feel\n- Selection of pre-defined palettes\n- Button images\n- Horizontal and Verticle Separators\n- Return values as dictionary\n- Set focus\n- Bind return key to buttons\n- Group widgets into a column and place into window anywhere\n- Scrollable columns\n- Keyboard low-level key capture\n- Mouse scroll-wheel support\n- Get Listbox values as they are selected\n- Get slider, spinner, combo as they are changed\n- Update elements in a live window\n- Bulk window-fill operation\n- Save / Load window to/from disk\n- Borderless (no titlebar) windows (very classy looking)\n- Always on top windows\n- Menus with ALT-hotkey\n- Right click pop-up menu\n- Tooltips\n- Clickable text\n- Transparent windows\n- Movable windows\n- Animated GIFs\n- No async programming required (no callbacks to worry about)\n- Built-in debugger and REPL\n- User expandable by accessing underlying GUI Framework widgets directly\n\n---\n\n## Design Goals\n\nWith the developer being the focus, the center of it all, it was important to keep this mindset at all times, including now, today.  Why is this such a big deal?  Because this package was written so that the universe of Python applications can grow and can **include EVERYONE into the GUI tent.**  \n\n> Up in 5 minutes\n\nSuccess #1 has to happen immediately.  Installing and then running your first GUI program.  FIVE minutes is the target.  The Pip install is under 1 minute.  Depending on your IDE and development environment, running your first piece of code could be a copy, paste, and run.  This isn't a joke target; it's for real serious.\n\n> Beginers and Advanted Together\n\nDesign an interface that both the complete beginner can understand and use that has enough depth that an advanced programmer can make some very nice looking GUIs amd not feel like they're playing with a \"toy\".\n\n> Success After Success\n\nSuccess after success.... this is the model that will win developer's hearts.  This is what users love about PySimpleGUI.  Make your development progress in a way you can run and test your code often.  Add a little bit, run it, see it on your screen, smile, move on.\n\n> Copy, Paste, Run.\n\nThe Cookbook and Demo Programs are there to fulfill this goal.  First get the user seeing on their screen a working GUI that's similar in some way to what they want to create.  \n\nIf you're wanting to play with OpenCV download the OpenCV Demo Programs and give them a try.  Seeing your webcam running in the middle of a GUI window is quite a thrill if you're trying to integrate with the OpenCV package.  \n\n\"Poof\" instant running OpenCV based application == Happy Developer\n\n> Make Simpler Than Expected Interfaces\n\nThe Single Line Progress Meter is a good example. It requires one and only 1 line of code.  Printing to a debug window is as easy as replacing `print` with `sg.Print` which will route your console output to a scrolling debug window.\n\n> Be Pythonic\n\nBe Pythonic... \n\nThis one is difficult for me to define.  The code implementing PySimpleGUI isn't PEP8 compliant, but it is consistent.  The important thing was what the user saw and experienced while coding, NOT the choices for naming conventions in the implementation code.  The user interface to PySimpleGUI now has a PEP8 compliant interface.  The methods are snake_case now (in addition to retaining the older CamelCase names)\n\nI ended up defining it as - attempt to use language constructs in a natural way and to exploit some of Python's interesting features.  It's Python's lists and optional parameters make PySimpleGUI work smoothly. \n\nHere are some Python-friendly aspects to PySimpleGUI:\n\n- Windows are represented as Python lists of Elements \n- Return values are an \"event\" such a button push and a list/dictionary of input values\n- The SDK calls collapse down into a single line of Python code that presents a custom GUI and returns values should you want that extreme of a single-line soluition\n- Elements are all classes. Users interact with elements using class methods but are not required to write their own classes\n- Allow keys and other identifiers be any format you want. Don't limit user to particular types needlessly.\n- While some disagree with the single source file, I find the benefits greatly outweigh the negatives\n\n#### Lofty Goals\n\n> Teach GUI Programming to Beginners\n\nBy and large PySimpleGUI is a \"pattern based\" SDK.  Complete beginners can copy these standard design patterns or demo programs and modify them without necessarily understanding all of the nuts and bolts of what's happening.  For example, they can modify a layout by adding elements even though they may not yet grasp the list of lists concept of layouts.  \n\nBeginners certainly can add more `if event == 'my button':` statements to the event loop that they copied from the same design pattern.  They will not have to write classes to use this package.\n\n> Capture Budding Graphic Designers & Non-Programmers\n\nThe hope is that beginners that are interested in graphic design, and are taking a Python course, will have an easy way to express themselves, right from the start of their Python experience.  Even if they're not the best programmers they will be able express themselves to show custom GUI layouts, colors and artwork with ease.\n\n> Fill the GUI Gap (Democratize GUIs)\n\nThere is a noticeable gap in the Python GUI solution.  Fill that gap and who knows what will happen.  At the moment, to make a tradiional GUI window using tkinter, Qt, WxPython and Remi, it takes much more than a week, or a month of Python education to use these GUI packages.  \n\nThey are out of reach of the beginners.  Often WAY out of reach.  And yet, time and time again, beginners that say they JUST STARTED with Python will ask on a Forum or Reddit for a GUI pacakage recommendation.  9 times out of 10 Qt is recommended.  (smacking head with hand).  What a waste of characters.  You might as well have just told them, \"give up\".\n\n> Is There a There?\n\nMaybe there's no \"there there\".  ***Or*** maybe a simple GUI API will enable Python to dominate yet another computing discipline like it has so many others.  This is one attempt to find out.  So far, it sure looks like there's PLENTY of demand in this area.\n\n# Getting Started with PySimpleGUI\n\nThere is a \"Troubleshooting\" section towards the end of this document should you run into real trouble.  It goes into more detail about what you can do to help yourself.\n\n## Installing PySimpleGUI\n\nOf course if you're installing for Qt, WxPython, Web, you'll use PySimpleGUIQt, PySimpleGUIWx, and PySimpleGUIWeb instead of straight PySimpleGUI in the instructions below.  You should already have the underlying GUI Framework installed and perhaps tested.  This includes tkinter, PySide2, WxPython, Remi\n\n### Installing on Python 3\n\n`pip install --upgrade PySimpleGUI`\n\nOn some systems you need to run pip3. (Linux and Mac)\n\n`pip3 install --upgrade PySimpleGUI`\n\nOn a Raspberry Pi, this is should work:\n\n`sudo pip3 install --upgrade pysimplegui`\n\nSome users have found that upgrading required using an extra flag on the pip `--no-cache-dir`.\n\n`pip install --upgrade --no-cache-dir PySimpleGUI`\n\nOn some versions of Linux you will need to first install pip.  Need the Chicken before you can get the Egg (get it... Egg?)\n\n`sudo apt install python3-pip`\n\n`tkinter` is a requirement for PySimpleGUI (the only requirement).  Some OS variants, such as Ubuntu, do not some with `tkinter` already installed.  If you get an error similar to:\n\n`ImportError: No module named tkinter`\n\nthen you need to install `tkinter`.\n\nFor python 2.7\n\n`sudo apt-get install python-tk`\n\nFor python 3\n`sudo apt-get install python3-tk`\n\nMore information about installing tkinter can be found here: https://www.techinfected.net/2015/09/how-to-install-and-use-tkinter-in-ubuntu-debian-linux-mint.html\n\n### Installing for Python 2.7\n\n**IMPORTANT** PySimpleGUI27 will disappear from the GitHub on Dec 31, 2019. PLEASE migrate to 3.6 at least.  It's not painful for most people.\n\n`pip install --upgrade PySimpleGUI27`\nor\n`pip2 install --upgrade PySimpleGUI27`\n\nYou may need to also install \"future\" for version 2.7\n\n`pip install future`\nor\n`pip2 install future`\n\nLike above, you may have to install either pip or tkinter.  To do this on Python 2.7:\n\n`sudo apt install python-pip`\n\n`sudo apt install python-tkinter`\n\n### Testing your installation and Troubleshooting\n\nOnce you have installed, or copied the .py file to your app folder, you can test the installation using python.  At the command prompt start up Python.\n\n#### The Quick Test\n\nFrom your commant line type:\n`python -m PySimpleGUI`\n\nOf course if you're on Linux/Mac and need to run using the command `python3` then of course type that.\n\nThis will display the same window as these instructions:\n\n#### Instructions for Testing Python 2.7:\n```python\n>>> import PySimpleGUI27\n>>> PySimpleGUI27.main()\n```\n\n#### Instructions for Testing Python 3:\n\n```python3\n>>> import PySimpleGUI\n>>> PySimpleGUI.main()\n```\n\nYou will see a \"test harness\" that exercises the SDK, tells you the version number, allows you to try \n\n### Finding Out Where Your PySimpleGUI Is Coming From\n\nIt's **critical** for you to be certain where your code is coming from and which version you're running.\n\nSometimes when debugging, questions arise as to exactly which PySimpleGUI you are running.  The quick way to find this out is to again, run Python from the command line.  This time you'll type:\n\n```python3\n>>> import PySimpleGUI as sg\n>>> sg\n```\n\nWhen you type sg, Python will tell you the full patch to your PySimpleGUI file / package.  This is critical information to know when debugging because it's really easy to forget you've got an old copy of PySimpleGUI laying around somewhere.\n\n### Finding Out Where Your PySimpleGUI Is Coming From (from within your code)\n\nIf you continue to have troubles with getting the right version of PySimpleGUI loaded, THE ***definitive*** way to determine where your program is getting PySimpleGUI from is to add a print to your program.  It's that *simple*!  You can also get the version you are running by also printing\n\n```python\nimport PySimpleGUI as sg\n\nprint(sg)\nprint(sg.version)\n```\n\nJust like when using the REPL >>> to determine the location, this `print` in your code will display the same path information.\n\n### Manual installation\n\nIf you're not connected to the net on your target machine, or pip isn't working, or you want to run the latest code from GitHub, then all you have to do is place the single PySimpleGUI source file `PySimpleGUI.py` (for tkinter port) and place it in your application's folder (the folder where the py file is that imports PySimpleGUI).  Your application will load that local copy of PySimpleGUI as if it were a package.\n\nBe ***sure*** that you delete this PySimpleGUI.py file if you install a newer pip version.  Often the sequence of events is that a bug you've reported was fixed and checked into GitHub.  You download the PySimpleGUI.py file (or the appropriately named one for your port) and put with your app.  Then later your fix is posted with a new release on PyPI.  You'll want to delete the GitHub one before you install from pip.\n\n### Prerequisites\n\nPython 2.7 or Python 3\ntkinter\n\nPySimpleGUI Runs on all Python3 platforms that have tkinter running on them.  It has been tested on Windows, Mac, Linux, Raspberry Pi.  Even runs on `pypy3`.\n\n### EXE file creation\n\nIf you wish to create an EXE from your PySimpleGUI application, you will need to install `PyInstaller`.  There are instructions on how to create an EXE at the bottom of this document.\n\n## IDEs\n\nA lot of people ask about IDEs, and many outright fear PyCharm.  Listen up.... compared to your journey of learning Python, learning to use PyCharm as your IDE is NOTHING.  It's a DAY typically (from 1 to 8 hours).  Or, if you're really really new, perhaps as much as a week *to get used to*.  So, we're not talking about you needing to learn to flap your arms and fly.\n\nTo sum up that paragraph, stop whining like a little b*tch.  You're a grown man/woman, act like it.  \"But it's hard...\"  If you found this package, then you're a bright person :-)  Have some confidence in yourself for Christ sake.... I do.  Not going to lead you off some cliff, promise!\n\nSome IDEs provide virtual environments, but it's optional.  PyCharm is one example.  For these, you will either use their GUI interface to add packages or use their built-in terminal to do pip installs.  **It's not recommended for beginners to be working with Virtual Environments.**  They can be quite confusing.  However, if you are a seasoned professional developer and know what you're doing, there is nothing about PySimpleGUI that will prevent you from working this way.  It's mostly a caution for beginners because more often than not, they get really messed up and confused.\n\n### Officially Supported IDEs\n\nA number of IDEs have **known problems with PySimpleGUI**.  IDLE, Spyder, and Thonny all have known, demonstrable, problems with intermittent or inconsistent results, **especially when a program exits** and you want to continue to work with it. *** Any IDE that is based on tkinter is going to have issues with the straight PySimpleGUI port.***  This is NOT a PySimpleGUI problem.\n\nThe official list of supported IDEs is:\n1. PyCharm (or course this is THE IDE to use for use with PySimpleGUI)\n2. Wing\n3. Visual Studio\n\nIf you're on a Raspberry Pi or some other limited environment, then you'll may have to use IDLE or Thonny.  Just be aware there could be problems using the debugger to debug due to both using tkinter.\n\n### Using The Docstrings (Don't skip this section)\n\nBeginning with the 4.0 release of PySimpleGUI, the tkinter port, a whole new world opened up for PySimpleGUI programmers, one where referencing the readme and ReadTheDocs documentation is no longer needed.  PyCharm and Wing both support these docstrings REALLY well and I'm sure Visual Studio does too.  Why is this important?  Because it will teach you the PySimpleGUI SDK as you use the package.  \n\nDon't know the parameters and various options for the `InputText` Element?  It's a piece of cake with PyCharm.  You can set PyCharm to automatically display documentation about the class, function, method, etc, that your cursor is currently sitting on.  You can also manually bring up the documentation by pressing CONTROL+Q.  When you do, you'll be treated to a window similar to this:\n\n![image](https://user-images.githubusercontent.com/13696193/61997565-46f89500-b071-11e9-968e-83a99ecb718a.png)\n\nNote that my cursor is on `InputText`.  On the left side of the screen, the `InputText` element's parameters are not just shown to you, but they are each individually described to you, and, the type is shown as well.  *I mean, honestly, how much more could you ask for?*\n\nOK, I suppose you could ask for a smaller window that just shows the parameters are you're typing them in.  Well, OK, in PyCharm, when your cursor is between the  `(   )` press CONTROL+P.  When you do, you'll be treated to a little window like this one:\n\n![image](https://user-images.githubusercontent.com/13696193/61997590-aa82c280-b071-11e9-8d76-7d9c811f8fcc.png)\n\nSee.... written with the \"Developer\" in mind, at all times.  It's about YOU, Mr/Ms Developer!  So enjoy your package.\n\nThe other ports of PySimpleGUI (Qt, WxPython, Web) have not yet had their docstrings updated.  They're NEXT in line to be better documented.  Work on a tool has already begun to make that happen sooner than later.\n\n## Using  - Python 3\n\nTo use in your code, simply import....\n`import PySimpleGUI as sg`\n\nThen use either \"high level\" API calls or build your own windows.\n\n`sg.Popup('This is my first Popup')`\n\n![first popup](https://user-images.githubusercontent.com/13696193/44957300-c7813680-ae9e-11e8-9a8c-c70198db7907.jpg)\n\nYes, it's just that easy to have a window appear on the screen using Python.  With PySimpleGUI, making a custom window appear isn't much more difficult.  The goal is to get you running on your GUI within ***minutes***, not hours nor days.\n\n### Python 3.7\n\nIf you must run 3.7, try 3.7.2.  It does work with PySimpleGUI with no known issues.\n\n***PySimpleGUI with Python 3.7.3 and 3.7.4+.***  tkinter is having issues with all the newer releases.  Things like Table colors stopped working entirely.  It's unclear if there's been a change that makes the tkinter API no longer working which means they are not backwards compatible.  That would be a real shame. If so, more work needs to be done in PySimpleGUI\n\n## Python 2.7\n\nOn December 31, 2019 the Python 2.7 version of PySimpleGUI will be **deleted** from the GitHub.  Sorry but Legacy Python has no permanent home here.  The security experts claim that supporting 2.7 is doing a diservice to the Python community.  I understand why.  There are some very narrow cases where 2.7 is required.  If you have one, make a copy of PySimpleGUI27.py quickly before it disappears for good.\n\n---\n\n# PEP8 Bindings For Methods and Functions\n\nBeginning with release 4.3 of PySimpleGUI, ***all methods and function calls*** have PEP8 equivalents.  This capability is only available, for the moment, on the PySimpleGUI tkinter port.  It is being added, as quickly as possible, to all of the ports.\n\nAs long as you know you're sticking with tkinter for the short term, it's safe to use the new bindings.\n\n## The Non-PEP8 Methods and Functions\n\nWhy the need for these bindings?  Simply put, the PySimpleGUI SDK has a PEP8 violation in the method and function names.  PySimpleGUI uses CamelCase names for methods and functions.  PEP8 suggests using snake_case_variables instead.  \n\nThis has not caused any problems and few complaints, but it's important the the interfaces into PySimpleGUI be compliant.  Perhaps one of the reasons for lack of complaints is that the Qt library also uses SnakeCase for its methods.  This practice has the effect of labelling a package as being \"not Pythonic\" and also suggests that ths package was originally used in another language and then ported to Python.  This is exactly the situation with Qt.  It was written for C++ and the interfaces continue to use C++ conventions.\n\n***PySimpleGUI was written in Python, for Python.***  The reason for the name problem was one of ignorance.  The PEP8 convention wasn't understood by the developers when PySimpleGUI was designed and implemented.  \n\nYou can, and will be able to for some time, use both names.  However, at some point in the future, the CamelCase names will disappear.  A utility is planned to do the conversion for the developer when the old names are remove from PySimpleGUI.\n\nThe help system will work with both names as will your IDE's docstring viewing.  However, the result found will show the CamelCase names.  For example `help(sg.Window.read)` will show the CamelCase name of the method/function.  This is what will be returned:\n\n`Read(self, timeout=None, timeout_key='__TIMEOUT__')`\n\n## The Renaming Convention\n\nTo convert a CamelCase method/function name to snake_case, you simply place an `_` where the Upper Case letter is located.  If there are none, then only the first letter is changed.\n\n`Window.FindElement` becomes `Window.find_element`\n\n## Class Variables\n\nFor the time being, class variables will remain the way they are currently.  It is unusual, in PySimpleGUI, for class variables to be modified or read by the user code so the impact of leaving them is rarely seen in your code.\n\n# High Level API Calls  - Popup's\n\n\"High level calls\" are those that start with \"Popup\".    They are the most basic form of communications with the user.   They are named after the type of window they create, a pop-up window.  These windows are meant to be short lived while, either delivering information or collecting it, and then quickly disappearing.\n\nThink of Popups as your first windows, sorta like your first bicycle. It worked well, but was limited.  It probably wasn't long before you wanted more features and it seemed too limiting for your newly found sense of adventure.\n\nWhen you've reached the point with Popups that you are thinking of filing a GitHub \"Enhancement Issue\" to get the Popup call extended to include a new feature that you think would be helpful.... not just to you but others is what you had in mind, right?  For the good of others.\n\nIt's at THIS time that you should immediately turn to the section entitled \"Custom Window API Calls - Your First Window\".  Congratulations, you just graduated and are not an official \"GUI Designer\".  Oh, nevermind that you only started learning Python 2 weeks ago, you're a real GUI Designer now so buck up and start acting like one.\n\nBut, for now, let's stick with these 1-line window calls, the Popups.\n\n## Popup Output\n\nThink of the `Popup` call as the GUI equivalent of a  `print` statement.  It's your way of displaying results to a user in the windowed world.  Each call to Popup will create a new Popup window.\n\n`Popup` calls are normally blocking.  your program will stop executing until the user has closed the Popup window.  A non-blocking window of Popup discussed in the async section.\n\nJust like a print statement, you can pass any number of arguments you wish.  They will all be turned into strings and displayed in the popup window.\n\nThere are a number of Popup output calls, each with a slightly different look (e.g. different button labels).\n\nThe list of Popup output functions are:\n- Popup\n- PopupOk\n- PopupYesNo\n- PopupCancel\n- PopupOkCancel\n- PopupError\n- PopupTimed, PopupAutoClose\n- PopupNoWait, PopupNonBlocking\n\nThe trailing portion of the function name after Popup indicates what buttons are shown.  `PopupYesNo` shows a pair of button with Yes and No on them.   `PopupCancel` has a Cancel button, etc.\n\nWhile these are \"output\" windows, they do collect input in the form of buttons.  The Popup functions return the button that was clicked.  If the Ok button was clicked, then Popup returns the string 'Ok'.  If the user clicked the X button to close the window, then the button value returned is `None`.\n\nThe function `PopupTimed` or `PopupAutoClose` are popup windows that will automatically close after come period of time.\n\nHere is a quick-reference showing how the Popup calls look.\n\n```python\nsg.Popup('Popup')  # Shows OK button\nsg.PopupOk('PopupOk')  # Shows OK button\nsg.PopupYesNo('PopupYesNo')  # Shows Yes and No buttons\nsg.PopupCancel('PopupCancel')  # Shows Cancelled button\nsg.PopupOKCancel('PopupOKCancel')  # Shows OK and Cancel buttons\nsg.PopupError('PopupError')  # Shows red error button\nsg.PopupTimed('PopupTimed')  # Automatically closes\nsg.PopupAutoClose('PopupAutoClose')  # Same as PopupTimed\n```\n\nPreview of popups:\n\n<p style=\"display: flex;justify-content: space-around;\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957394-1380ab00-aea0-11e8-98b1-1ab7d7bd5b37.jpg\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957400-167b9b80-aea0-11e8-9d42-2314f24e62de.jpg\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957399-154a6e80-aea0-11e8-9580-e716f839d400.jpg\">\n</p>\n\n<p style=\"display: flex;justify-content: space-around;\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957398-14b1d800-aea0-11e8-9e88-c2b36a248447.jpg\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957397-14b1d800-aea0-11e8-950b-6d0b4f33841a.jpg\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957396-14194180-aea0-11e8-8eef-bb2e1193ecfa.jpg\">\n\t<img src=\"https://user-images.githubusercontent.com/13696193/44957595-9e15da00-aea1-11e8-8909-6b6121b74509.jpg\">\n</p>\n\nPopup - Display a popup Window with as many parms as you wish to include.  This is the GUI equivalent of the\n\"print\" statement.  It's also great for \"pausing\" your program's flow until the user can read some error messages.\n\n```\nPopup(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    button_type=0,\n    auto_close=False,\n    auto_close_duration=None,\n    custom_text=(None, None),\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of your arguments. Load up the call with stuff to see!|\n|title|(str) Optional title for the window. If none provided, the first arg will be used instead.|\n|button_color|Tuple[str, str] Color of the buttons shown (text color, button color)|\n|background_color|(str) Window's background color|\n|text_color|(str) text color|\n|button_type|(enum) NOT USER SET! Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK). There are many Popup functions and they call Popup, changing this parameter to get the desired effect.|\n|auto_close|(bool) If True the window will automatically close|\n|auto_close_duration|(int) time in seconds to keep window open before closing it automatically|\n|custom_text|Union[Tuple[str, str], str] A string or pair of strings that contain the text to display on the buttons|\n|non_blocking|(bool) If True then will immediately return from the function without waiting for the user's input.|\n|icon|Union[str, bytes] icon to display on the window. Same format as a Window call|\n|line_width|(int) Width of lines in characters. Defaults to MESSAGE_BOX_LINE_WIDTH|\n|font|Union[str, tuple(font name, size, modifiers) specifies the font family, size, etc|\n|no_titlebar|(bool) If True will not show the frame around the window and the titlebar across the top|\n|grab_anywhere|(bool) If True can grab anywhere to move the window. If no_titlebar is True, grab_anywhere should likely be enabled too|\n|location|Tuple[int, int] Location on screen to display the top left corner of window. Defaults to window centered on screen|\n|||\n| **return** | Union[str, None] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nThe other output Popups are variations on parameters.  Usually the button_type parameter is the primary one changed.\n\nThe other output Popups are variations on parameters.  Usually the button_type parameter is the primary one changed.\n\nThe choices for button_type are:\n```\nPOPUP_BUTTONS_YES_NO\nPOPUP_BUTTONS_CANCELLED\nPOPUP_BUTTONS_ERROR\nPOPUP_BUTTONS_OK_CANCEL\nPOPUP_BUTTONS_OK\nPOPUP_BUTTONS_NO_BUTTONS\n```\n\n**Note that you should not call Popup yourself with different button_types.**  Rely on the Popup function named that sets that value for you.  For example PopupYesNo will set the button type to POPUP_BUTTONS_YES_NO for you.\n\n#### Scrolled Output\nThere is a scrolled version of Popups should you have a lot of information to display.\n\nShow a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you\nwant, just like a print statement.\n\n```\nPopupScrolled(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    yes_no=False,\n    auto_close=False,\n    auto_close_duration=None,\n    size=(None, None),\n    location=(None, None),\n    non_blocking=False,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    font=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of items to display|\n|title|(str) Title to display in the window.|\n|button_color|Tuple[str, str] button color (foreground, background)|\n|yes_no|(bool) If True, displays Yes and No buttons instead of Ok|\n|auto_close|(bool) if True window will close itself|\n|auto_close_duration|Union[int, float] Older versions only accept int. Time in seconds until window will close|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|location|Tuple[int, int] Location on the screen to place the upper left corner of the window|\n|non_blocking|(bool) if True the call will immediately return rather than waiting on user input|\n|||\n| **return** | Union[str, None, TIMEOUT_KEY] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\n```python\nPopupScrolled(*args, button_color=None, yes_no=False, auto_close=False, auto_close_duration=None, size=(None, None), location=(None, None), title=None, non_blocking=False)\n```\nTypical usage:\n\n```python\nsg.PopupScrolled(my_text)\n```\n\n![scrolledtextbox 2](https://user-images.githubusercontent.com/13696193/43667324-712aa0d4-9745-11e8-83a9-a0d0570d0865.jpg)\n\nThe `PopupScrolled` will auto-fit the window size to the size of the text.  Specify `None` in the height field of a `size` parameter to get auto-sized height. \n\nThis call will create a scrolled box 80 characters wide and a height dependent upon the number of lines of text. \n\n`sg.PopupScrolled(my_text, size=(80, None))`  \n\nNote that the default max number of lines before scrolling happens is set to 50. At 50 lines the scrolling will begin. \n\nIf `non_blocking` parameter is set, then  the call will not blocking waiting for the user to close the window.  Execution will immediately return to the user.  Handy when you want to dump out debug info without disrupting the program flow. \n\n### PopupNoWait\n\nShow Popup window and immediately return (does not block)\n\n```\nPopupNoWait(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nThe Popup call PopupNoWait or PopupNonBlocking will create a popup window and then immediately return control back to you.  All other popup functions will block, waiting for the user to close the popup window. \n\nThis function is very handy for when you're **debugging** and want to display something as output but don't want to change the programs's overall timing by blocking.  Think of it like a `print` statement. There are no return values on one of these Popups. \n\n## Popup Input\nThere are Popup calls for single-item inputs. These follow the pattern of `Popup` followed by `Get` and then the type of item to get.  There are 3 of these input Popups to choose from, each with settings enabling customization.\n- `PopupGetText` - get a single line of text\n- `PopupGetFile` - get a filename\n- `PopupGetFolder` - get a folder name\n\nUse these Popups instead of making  a custom window to get one data value, call the Popup input function to get the item from the user.  If you find the parameters are unable to create the kind of window you are looking for, then it's time for you to create your own window.\n### PopupGetText\nUse this Popup to get a line of text from the user.\n\nDisplay Popup with text entry field. Returns the text entered or None if closed / cancelled\n\n```\nPopupGetText(message,\n    title=None,\n    default_text=\"\",\n    password_char=\"\",\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_text|(str) default value to put into input area|\n|password_char|(str) character to be shown instead of actually typed characters|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|||\n| **return** | Union[str, None] Text entered or None if window was closed or cancel button clicked |\n\n```python\nimport PySimpleGUI as sg\ntext = sg.PopupGetText('Title', 'Please input something')\nsg.Popup('Results', 'The value returned from PopupGetText', text)\n```\n\n![popupgettext](https://user-images.githubusercontent.com/13696193/44957281-8721b880-ae9e-11e8-98cd-d06369f4187e.jpg)\n\n![popup gettext response](https://user-images.githubusercontent.com/13696193/44957282-8721b880-ae9e-11e8-84ae-dc8bb30504a0.jpg)\n\n### PopupGetFile\nGets a filename from the user.  There are options to configure the type of dialog box to show.  Normally an \"Open File\" dialog box is shown.\n\nDisplay popup window with text entry field and browse button so that a file can be chosen by user.\n\n```\nPopupGetFile(message,\n    title=None,\n    default_path=\"\",\n    default_extension=\"\",\n    save_as=False,\n    multiple_files=False,\n    file_types=(('ALL Files', '*.*'),),\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|default_extension|(str) If no extension entered by user, add this to filename (only used in saveas dialogs)|\n|save_as|(bool) if True, the \"save as\" dialog is shown which will verify before overwriting|\n|multiple_files|(bool) if True, then allows multiple files to be selected that are returned with ';' between each filename|\n|file_types|Tuple[Tuple[str,str]] List of extensions to show using wildcards. All files (the default) = ((\"ALL Files\", \"*.*\"),)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the file(s) chosen, None if cancelled or window closed with X |\n\nIf configured as an Open File Popup then (save_as is not True)  the dialog box will look like this. \n\n![snag-0060](https://user-images.githubusercontent.com/13696193/46761050-9831c680-cca1-11e8-8de9-68b15efe2c46.jpg)\n\nIf you set the parameter save_As to True, then the dialog box looks like this:\n\n![snag-0061](https://user-images.githubusercontent.com/13696193/46761330-2b6afc00-cca2-11e8-953b-f6b5c5ce57f5.jpg)\n\nIf you choose a filename that already exists, you'll get a warning popup box asking if it's OK.  You can also specify a file that doesn't exist.  With an \"Open\" dialog box you cannot choose a non-existing file.\n\nA typical call produces this window.\n\n```python\ntext = sg.PopupGetFile('Please enter a file name')\nsg.Popup('Results', 'The value returned from PopupGetFile', text)\n```\n\n![popupgetfile](https://user-images.githubusercontent.com/13696193/44957857-2fd31680-aea5-11e8-8eb7-f6b91c202cc8.jpg)\n\n### PopupGetFolder\n\nThe window created to get a folder name looks the same as the get a file name.  The difference is in what the browse button does.  `PopupGetFile` shows an Open File dialog box while `PopupGetFolder`  shows an Open Folder dialog box.\n\nDisplay popup with text entry field and browse button so that a folder can be chosen.\n\n```\nPopupGetFolder(message,\n    title=None,\n    default_path=\"\",\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the path chosen, None if cancelled or window closed with X |\n\nThis is a typpical call\n\n```python\n\ttext = sg.PopupGetFolder('Please enter a folder name')\n\tsg.Popup('Results', 'The value returned from PopupGetFolder', text)\n```\n\n![popupgetfolder](https://user-images.githubusercontent.com/13696193/44957861-45484080-aea5-11e8-926c-cf607a45251c.jpg)\n\n### PopupAnimated\n\n![ring](https://user-images.githubusercontent.com/13696193/51296743-6ee4ad00-19eb-11e9-91f5-cd8086ad1b50.gif)\n\nThe animated Popup enables you to easily display a \"loading\" style animation specified through a GIF file that is either stored in a file or a base64 variable.\n\nShow animation one frame at a time.  This function has its own internal clocking meaning you can call it at any frequency\n and the rate the frames of video is shown remains constant.  Maybe your frames update every 30 ms but your\n event loop is running every 10 ms.  You don't have to worry about delaying, just call it every time through the\n loop.\n\n```\nPopupAnimated(image_source,\n    message=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    no_titlebar=True,\n    grab_anywhere=True,\n    keep_on_top=True,\n    location=(None, None),\n    alpha_channel=None,\n    time_between_frames=0,\n    transparent_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|image_source|Union[str, bytes] Either a filename or a base64 string.|\n|message|(str) An optional message to be shown with the animation|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, tuple) specifies the font family, size, etc|\n|no_titlebar|(bool) If True then the titlebar and window frame will not be shown|\n|grab_anywhere|(bool) If True then you can move the window just clicking anywhere on window, hold and drag|\n|keep_on_top|(bool) If True then Window will remain on top of all other windows currently shownn|\n|location|(int, int) (x,y) location on the screen to place the top left corner of your window. Default is to center on screen|\n|alpha_channel|(float) Window transparency 0 = invisible 1 = completely visible. Values between are see through|\n|time_between_frames|(int) Amount of time in milliseconds between each frame|\n|transparent_color|(str) This color will be completely see-through in your window. Can even click through|\n\n***To close animated popups***, call PopupAnimated with `image_source=None`.  This will close all of the currently open PopupAnimated windows.\n\n# Progress Meters!\nWe all have loops in our code.  'Isn't it joyful waiting, watching a counter scrolling past in a text window?  How about one line of code to get a progress meter, that contains statistics about your code?\n\n```\nOneLineProgressMeter(title,\n\t\t\tcurrent_value,\n\t\t\tmax_value,\n\t\t\tkey,\n\t\t\t*args,\n\t\t\torientation=None,\n\t\t\tbar_color=DEFAULT_PROGRESS_BAR_COLOR,\n\t\t\tbutton_color=None,\n\t\t\tsize=DEFAULT_PROGRESS_BAR_SIZE,\n\t\t\tborder_width=DEFAULT_PROGRESS_BAR_BORDER_WIDTH):\n```\n\nHere's the one-line Progress Meter in action!\n\n```python\nfor i in range(1,10000):\n\tsg.OneLineProgressMeter('My Meter', i+1, 10000, 'key','Optional message')\n```\n\nThat line of code resulted in this window popping up and updating.\n\n![preogress meter](https://user-images.githubusercontent.com/13696193/43667625-d47da702-9746-11e8-91e6-e5177883abae.jpg)\n\nA meter AND fun statistics to watch while your machine grinds away, all for the price of 1 line of code.\nWith a little trickery you can provide a way to break out of your loop using the Progress Meter window.  The cancel button results in a `False` return value from `OneLineProgressMeter`.  It normally returns `True`.\n\n***Be sure and add one to your loop counter*** so that your counter goes from 1 to the max value.  If you do not add one, your counter will never hit the max value.  Instead it will go from 0 to max-1.\n\n# Debug Output (EasyPrint = Print = eprint)\n\nAnother call in the 'Easy' families of APIs is `EasyPrint`.  As is with other commonly used PySimpleGUI calls, there are other names for the same call.  You can use `Print` or `eprint` in addition to `EasyPrint`.  They all do the same thing, output to a debug window.  If the debug window isn't open, then the first call will open it.  No need to do anything but stick an 'sg.Print' call in your code. You can even replace your 'print' calls with calls to EasyPrint by simply sticking the statement\n\n```python\nprint = sg.EasyPrint\n```\n\nat the top of your code.\n\n`Print` is one of the better ones to use as it's easy to remember.   It is simply `print` with a capital P. `sg.Print('this will go to the debug window')`\n\n```python\nimport PySimpleGUI as sg\n\nfor i in range(100):\n\tsg.Print(i)\n```\n\n![snap0125](https://user-images.githubusercontent.com/13696193/43114979-a696189e-8ecf-11e8-83c7-473fcf0ccc66.jpg)\n\nOr if you didn't want to change your code:\n\n```python\nimport PySimpleGUI as sg\n\nprint=sg.Print\nfor i in range(100):\nprint(i)\n```\n\nJust like the standard print call, `EasyPrint` supports the `sep` and `end` keyword arguments.  Other names that can be used to call `EasyPrint` include `Print`, `eprint`,   If you want to close the window, call the function `EasyPrintClose`.\n\nYou can change the size of the debug window using the `SetOptions` call with the `debug_win_size` parameter.\n\nThere is an option to tell PySimpleGUI to reroute all of your stdout and stderr output to this window.  To do so call EasyPrint with the parameter `do_not_reroute_stdout` set to `False`.  After calling it once with this parameter set to True, all future calls to a normal`print` will go to the debug window.\n\nIf you close the debug window it will re-open the next time you Print to it.  If you wish to close the window using your code, then you can call either `EasyPrintClose()` or `PrintClose()`\n\n---\n# Custom window API Calls  (Your First window)\n\nThis is the FUN part of the programming of this GUI.  In order to really get the most out of the API, you should be using an IDE that supports auto complete or will show you the definition of the function.  This will make customizing go  smoother.\n\nThis first section on custom windows is for your typical, blocking, non-persistent window.  By this I mean, when you \"show\" the window, the function will not return until the user has clicked a button or closed the window with an X.\n\nTwo other types of windows exist.\n1. Persistent window - the `Window.read()` method returns and the window continues to be visible.  This is good for applications like a chat window or a timer or anything that stays active on the screen for a while.\n2. Asynchronous window - the trickiest of the lot. Great care must be exercised.  Examples are an MP3 player or status dashboard.  Async windows are updated (refreshed) on a periodic basis.  You can spot them easily as they will have a `timeout` parameter on the call to read.     `event, values = window.Read(timeout=100)`\n\nIt's both not enjoyable nor helpful to immediately jump into tweaking each and every little thing available to you.  Make some simple windows.  Use the Cookbook and the Demo Programs as a way to learn and as a \"starting point\".\n\n## The window Designer\n\nThe good news to newcomers to GUI programming is that PySimpleGUI has a window designer.  Better yet, the window designer requires no training, no downloads, and everyone knows how to use it.\n\n![gui0_1](https://user-images.githubusercontent.com/13696193/44159598-e2257400-a085-11e8-9b02-343e72cc75c3.JPG)\n\nIt's a manual process, but if you follow the instructions, it will take only a minute to do and the result will be a nice looking GUI.  The steps you'll take are:\n1. Sketch your GUI on paper\n2. Divide your GUI up into rows\n3. Label each Element with the Element name\n4. Write your Python code using the labels as pseudo-code\n\nLet's take a couple of examples.\n\n**Enter a number**.... Popular beginner programs are often based on a game or logic puzzle that requires the user to enter something, like a number.  The \"high-low\" answer game comes to mind where you try to guess the number based on high or low tips.\n\n**Step 1- Sketch the GUI**\n![gui1_1](https://user-images.githubusercontent.com/13696193/44160127-6a584900-a087-11e8-8fec-09099a8e16f6.JPG)\n\n**Step 2 - Divide into rows**\n\n![gui2_1](https://user-images.githubusercontent.com/13696193/44160128-6a584900-a087-11e8-9973-af866fb94c56.JPG)\n\nStep 3 - Label elements\n\n![gui6_1](https://user-images.githubusercontent.com/13696193/44160116-64626800-a087-11e8-8b57-671c0461b508.JPG)\n\nStep 4 - Write the code\nThe code we're writing is the layout of the GUI itself.  This tutorial only focuses on getting the window code written, not the stuff to display it, get results.\n\nWe have only 1 element on the first row, some text.  Rows are written as a \"list of elements\", so we'll need [  ] to make a list.  Here's the code for row 1\n\n```\n[ sg.Text('Enter a number') ]\n```\n\nRow 2 has 1 elements, an input field.\n\n```\n[ sg.Input() ]\n```\n\nRow 3 has an OK button\n\n```\n[ sg.OK() ]\n```\n\nNow that we've got the 3 rows defined, they are put into a list that represents the entire window.\n\n```\nlayout = [ [sg.Text('Enter a Number')],\n           [sg.Input()],\n           [sg.OK()] ]\n```\n\nFinally we can put it all together into a program that will display our window.\n\n```python\nimport PySimpleGUI as sg\n\nlayout = [[sg.Text('Enter a Number')],\n          [sg.Input()],\n          [sg.OK()] ]\n\nevent, values = sg.Window('Enter a number example', layout).Read()\n\nsg.Popup(event, values[0])\n```\n\nYour call to `Read` will return a dictionary, but will \"look like a list\" in how you access it.  The first input field will be entry 0, the next one is 1, etc.  Later you'll learn about the `key` parameter which allows you to use your own values to identify elements instead of them being numbered for you.\n\n### Example 2 - Get a filename\nLet's say you've got a utility you've written that operates on some input file and you're ready to use a GUI to enter than filename rather than the command line.  Follow the same steps as the previous example - draw your window on paper, break it up into rows, label the elements.\n\n![gui4_1](https://user-images.githubusercontent.com/13696193/44160132-6a584900-a087-11e8-862f-7d791a67ee5d.JPG)\n![gui5_1](https://user-images.githubusercontent.com/13696193/44160133-6af0df80-a087-11e8-9dec-bb4d4c59393d.JPG)\n\nWriting the code for this one is just as straightforward.  There is one tricky thing, that browse for a file button.  Thankfully PySimpleGUI takes care of associating it with the input field next to it.  As a result, the code looks almost exactly like the window on the paper.\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [[sg.Text('Filename')],\n\t\t\t[sg.Input(), sg.FileBrowse()],\n\t\t\t[sg.OK(), sg.Cancel()] ]\n\nwindow = sg.Window('Get filename example', layout)\nevent, values = window.read()\nwindow.close()\n\nsg.Popup(event, values[0])\n```\n\nRead on for detailed instructions on the calls that show the window and return your results.\n\n# Copy these design patterns!\n\nAll of your PySimpleGUI programs will utilize one of these 2 design patterns depending on the type of window you're implementing.\n\n## Pattern 1 - \"One-shot Window\" - Read a window one time then close it\n\nThis will be the most common pattern you'll follow if you are not using an \"event loop\" (not reading the window multiple times).  The window is read and closed.\n\nThe input fields in your window will be returned to you as a dictionary (syntactically it looks just like a list lookup)\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [[sg.Text('SHA-1 and SHA-256 Hashes for the file')],\n\t\t\t\t [sg.InputText(), sg.FileBrowse()],\n\t\t\t\t [sg.Submit(), sg.Cancel()]]\n\nwindow = sg.Window('SHA-1 & 256 Hash', layout)\n\nevent, values = window.read()\nwindow.close()\n\nsource_filename = values[0]     # the first input element is values[0]\n```\n\n## Pattern 2 A - Persistent window (multiple reads using an event loop)\n\nSome of the more advanced programs operate with the window remaining visible on the screen.  Input values are collected, but rather than closing the window, it is kept visible acting as a way to both output information to the user and gather input data.\n\nThis code will present a window and will print values until the user clicks the exit button or closes window using an X.\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [[sg.Text('Persistent window')],\n\t\t  [sg.Input()],\n\t\t  [sg.Button('Read'), sg.Exit()]]\n\nwindow = sg.Window('Window that stays open', layout)\n\nwhile True:\n\tevent, values = window.read()\n\tif event is None or event == 'Exit':\n\t\tbreak\n\tprint(event, values)\n\nwindow.close()\n```\n\n## Pattern 2 B - Persistent window (multiple reads using an event loop + updates data in window)\n\nThis is a slightly more complex, but maybe more realistic version that reads input from the user and displays that input as text in the window.  Your program is likely to be doing both of those activities (input and output) so this will give you a big jump-start.\n\nDo not worry yet what all of these statements mean.   Just copy it so you can begin to play with it, make some changes.  Experiment to see how thing work.\n\nA final note... the parameter `do_not_clear` in the input call determines the action of the input field after a button event.  If this value is True, the input value remains visible following button clicks.  If False, then the input field is CLEARED of whatever was input.  If you are building a \"Form\" type of window with data entry, you likely want False. The default is to NOT clear the input element (`do_not_clear=True`).\n\nThis example introduces the concept of \"keys\".  Keys are super important in PySimpleGUI as they enable you to identify and work with Elements using names you want to use.  Keys can be ANYTHING, except `None`.  To access an input element's data that is read in the example below, you will use `values['_IN_']` instead of `values[0]` like before.  \n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [[sg.Text('Your typed chars appear here:'), sg.Text(size=(12,1), key='_OUTPUT_')],\n          [sg.Input(key='_IN_')],\n          [sg.Button('Show'), sg.Button('Exit')]]\n\nwindow = sg.Window('Window Title', layout)\n\nwhile True:  # Event Loop\n    event, values = window.read()       # can also be written as event, values = window()\n    print(event, values)\n    if event is None or event == 'Exit':\n        break\n    if event == 'Show':\n        # change the \"output\" element to be the value of \"input\" element\n        window['_OUTPUT_'].update(values['_IN_'])\n        # above line can also be written without the update specified\n        window['_OUTPUT_'](values['_IN_'])\n\nwindow.close()\n```\n\n### Qt Designer\n\nThere actually is a PySimpleGUI Window Designer that uses Qt's window designer.  It's outside the scope of this document however.  You'll find the project here: https://github.com/nngogol/PySimpleGUIDesigner\n\nI hope to start using it more soon.  \n\n## How GUI Programming in Python Should Look?  At least for beginners ?\n\nWhile one goal was making it simple to create a GUI another just as important goal was to do it in a Pythonic manner. Whether it achieved these goals is debatable, but it was an attempt just the same.\n\nThe key to custom windows in PySimpleGUI is to view windows as ROWS of GUI  Elements.  Each row is specified as a list of these Elements.  Put the rows together and you've got a window.  This means the GUI is defined as a series of Lists, a Pythonic way of looking at things.\n\n### Let's dissect this little program\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [[sg.Text('Rename files or folders')],\n\t\t\t[sg.Text('Source for Folders', size=(15, 1)), sg.InputText(), sg.FolderBrowse()],\n\t\t\t[sg.Text('Source for Files ', size=(15, 1)), sg.InputText(), sg.FolderBrowse()],\n\t\t\t[sg.Submit(), sg.Cancel()]]\n\nwindow = sg.Window('Rename Files or Folders', layout)\n\nevent, values = window.read()\nwindow.close()\nfolder_path, file_path = values[0], values[1]       # get the data from the values dictionary\nprint(folder_path, file_path)\n```\n\n### Themes\n\n![image](https://user-images.githubusercontent.com/46163555/70470775-cd01ff00-1a99-11ea-8b9c-8b33c8880c99.png)\n\nThe first line of code after the import is a call to `theme`.  \n\nUntil Dec 2019 the way a \"theme\" was specific in PySimpleGUI was to call `change_look_and_feel`.  That call has been replaced by the more simple function `theme`.  \n\n### Window contents (The Layout)\n\nLet's agree the window has 4 rows.\n\nThe first row only has **text** that reads `Rename files or folders`\n\nThe second row has 3 elements in it.  First the **text** `Source for Folders`, then an **input** field, then a **browse** button.\n\nNow let's look at how those 2 rows and the other two row from Python code:\n\n```python\nlayout = [[sg.Text('Rename files or folders')],\n          [sg.Text('Source for Folders', size=(15, 1)), sg.InputText(), sg.FolderBrowse()],\n          [sg.Text('Source for Files ', size=(15, 1)), sg.InputText(), sg.FolderBrowse()],\n          [sg.Submit(), sg.Cancel()]]\n```\n\nSee how the source code mirrors the layout?  You simply make lists for each row, then submit that table to PySimpleGUI to show and get values from.\n\nAnd what about those return values?  Most people simply want to show a window, get the input values and do something with them.  So why break up the code into button callbacks, etc, when I simply want my window's input values to be given to me.\n\nFor return values the window is scanned from top to bottom, left to right.  Each field that's an input field will occupy a spot in the return values.\n\nIn our example window, there are 2 fields, so the return values from this window will be a dictionary with 2 values in it.  Remember, if you do not specify a `key` when creating an element, one will be created for you.  They are ints starting with 0.  In this example, we have 2 input elements.  They will be addressable as values[0] and values[1]\n\n### \"Reading\" the window's values (also displays the window)\n\n```python\nevent, values = window.read()\nfolder_path, file_path = values[0], values[1]\n```\n\nIn one statement we both show the window and read the user's inputs.  In the next line of code the *dictionary* of return values is split into individual variables `folder_path` and `file_path`.\n\nIsn't this what a Python programmer looking for a GUI wants? Something easy to work with to get the values and move on to the rest of the program, where the real action is taking place.  Why write pages of GUI code when the same layout can be achieved with PySimpleGUI in 3 or 4 lines of code.  4 lines or 40?  Most would choose 4.\n\n## Return values\n\nThere are 2 return values from a call to `Window.read()`, an `event` that caused the `Read` to return and `values` a list or dictionary of values.  If there are no elements with keys in the layout, then it will be a list.  However, some elements, like some buttons, have a key automatically added to them.  **It's best to use keys on all of your input type elements.**\n\n### Two Return Values\n\nAll Window Read calls return 2 values.  By convention a read statement is written:\n\n```python\nevent, values = window.read()\n```\n\nYou don't HAVE to write your reads in this way. You can name your variables however you want.  But if you want to code them in a way that other programmers using PySimpleGUI are used to, then use this statement.\n\n## Events\n\nThe first parameter `event` describes **why** the read completed.  Events are one of these:\n\nFor all Windows:\n\n* Button click\n* Window closed using X\n\nFor Windows that have specifically enabled these.  Please see the appropriate section in this document to learn about how to enable these and what the event return values are.\n\n* Keyboard key press\n* Mouse wheel up/down\n* Menu item selected\n* An Element Changed (slider, spinner, etc)\n* A list item was clicked\n* Return key was pressed in input element\n* Timeout waiting for event\n* Text was clicked\n* Combobox item chosen\n* Table row selected\n* etc\n\n***Most*** of the time the event will be a button click or the window was closed.  The other Element-specific kinds of events happen when you set `enable_events=True` when you create the Element.\n\n### Window closed event\n\nAnother convention to follow is the check for windows being closed with an X.  *This is an critically important event to catch*.  If you don't check for this and you attempt to use the window, your program will crash.  Please check for closed window and exit your program gracefully.  Your users will like you for it.  \n\nClose your windows when you're done with them even though exiting the program will also close them.  tkinter can generate an error/warning sometimes if you don't close the window.  For other ports, such as PySimpleGUIWeb, not closing the Window will potentially cause your program to continue to run in the background.\n\nTo check for a closed window use this line of code:\n\n```python\nif event is None:\n```\n\nPutting it all together we end up with an \"event loop\" that looks something like this:\n\n```python\nwhile True:\n\tevent, values = window.read()\n\tif event is None:\n\t\tbreak\nwindow.close()\n```\n\nYou will very often see the examples and demo programs write this check as:\n\n```python\n\tevent, values = window.read()\n\tif event in (None, 'Exit'):\n\t\tbreak\n```\n\nThis if statement is the same as:\n```python\n\tif event is None or event == 'Exit':\n\t\tbreak\n```\n\nInstead of `'Exit'` use the name/key of the button you want to exit the window (Cancel, Quit, etc)\n\n### Button Click Events\n\nBy default buttons will always return a click event, or in the case of realtime buttons, a button down event.  You don't have to do anything to enable button clicks.  To disable the events, disable the button using its Update method.\n\nYou can enable an additional \"Button Modified\" event by setting `enable_events=True` in the Button call.  These events are triggered when something 'writes' to a button, ***usually*** it's because the button is listed as a \"target\" in another button.\n\nThe button value from a Read call will be one of 2 values:\n1. The Button's text     - Default\n2. The Button's key      - If a key is specified\n\nIf a button has a key set when it was created, then that key will be returned, regardless of what text is shown on the button.  If no key is set, then the button text is returned.  If no button was clicked, but the window returned anyway, the event value is the key that caused the event to be generated.  For example, if `enable_events` is set on an `Input` Element and someone types a character into that `Input` box, then the event will be the key of the input box.\n\n### **None is returned when the user clicks the X to close a window.**\n\nIf your window has an event loop where it is read over and over, remember to give your user an \"out\".  You should ***always check for a None value*** and it's a good practice to provide an Exit button of some kind. Thus design patterns often resemble this Event Loop:\n\n```python\nwhile True:\n\tevent, values = window.read()\n\tif event is None or event == 'Quit':\n\t\tbreak\n```\n\nActually, the more \"Pythonic version\" is used in most Demo Programs and examples.   They do  **exactly** the same thing.\n\n```python\nwhile True:\n\tevent, values = window.read()\n\tif event in (None, 'Quit'):\n\t\tbreak\n```\n\n### Element Events\n\nSome elements are capable of generating events when something happens to them.  For example, when a slider is moved, or list item clicked on or table row clicked on.  These events are not enabled by default.  To enable events for an Element, set the parameter `enable_events=True`.  This is the same as the older `click_submits` parameter.  You will find the `click_submits` parameter still in the function definition.  You can continue to use it. They are the same setting.  An 'or' of the two values is used.  In the future, click_submits will be removed so please migrate your code to using `enable_events`.\n\n|Name|events|\n| ---  | --- |\n| InputText | any change |\n| Combo | item chosen |\n| Listbox | selection changed |\n| Radio | selection changed |\n| Checkbox | selection changed |\n| Spinner | new item selected |\n| Multiline | any change |\n| Text | clicked |\n| Status Bar | clicked |\n| Graph | clicked |\n| Graph | dragged |\n| Graph | drag ended (mouse up) |\n| TabGroup | tab clicked |\n| Slider | slider moved |\n| Table | row selected |\n| Tree | node selected |\n| ButtonMenu | menu item chosen |\n| Right click menu | menu item chosen |\n\n### Other Events\n\n#### Menubar menu item chosen for MenuBar menus and ButtonMenu menus\n\nYou will receive the key for the MenuBar and ButtonMenu.  Use that key to read the value in the return values dictionary.  The value shown will be the full text plus key for the menu item chosen.  Remember that you can put keys onto menu items.  You will get the text and the key together as you defined it in the menu\ndefinition.\n\n#### Right Click menu item chosen\n\nUnlike menu bar and button menus, you will directly receive the menu item text and its key value.  You will not do a dictionary lookup to get the value.  It is the event code returned from WindowRead().\n\n#### Windows - keyboard, mouse scroll wheel\n\nWindows are capable of returning keyboard events.  These are returned as either a single character or a string if it's a special key.  Experiment is all I can say. The mouse scroll wheel events are also strings.  Put a print in your code to see what's returned.\n\n#### Timeouts\n\nIf you set a timeout parameter in your read, then the system TIMEOUT_KEY will be returned.  If you specified your own timeout key in the Read call then that value will be what's returned instead.\n\n### The `values` Variable - Return values as a list\n\nThe second parameter from a Read call is either a list or a dictionary of the input fields on the Window.\n\nBy default return values are a list of values, one entry for each input field, but for all but the simplest of windows the return values will be a dictionary.  This is because you are likely to use a 'key' in your layout.  When you do, it forces the return values to be a dictionary.\n\nEach of the Elements that are Input Elements will have a value in the list of return values.  If you know for sure that the values will be returned as a list, then you could get clever and unpack directly into variables.\n\nevent, (filename, folder1, folder2, should_overwrite) = sg.Window('My title', window_rows).Read()\n\nOr, more commonly, you can unpack the return results separately.  This is the preferred method because it works for **both** list and dictionary return values.\n\n```python\nevent, values = sg.Window('My title', window_rows).Read()\nevent, value_list = window.read()\nvalue1 = value_list[0]\nvalue2 = value_list[1]\n\t ...\n```\n\nHowever, this method isn't good when you have a lot of input fields.  If you insert a new element into your window then you will have to shuffle your unpacks down, modifying each of the statements to reference `value_list[x]`.\n\nThe more common method is to request your values be returned as a dictionary by placing keys on the \"important\" elements (those that you wish to get values from and want to interact with)\n\n### `values` Variable - Return values as a dictionary\n\nFor those of you that have not encountered a Python dictionary, don't freak out!  Just copy and paste the sample code and modify it. Follow this design pattern and you'll be fine.  And you might learn something along the way.\n\nFor windows longer than 3 or 4 fields you will want to use a dictionary to help you organize your return values. In almost all (if not all) of the demo programs you'll find the return values being passed as a dictionary.  It is not a difficult concept to grasp, the syntax is easy to understand, and it makes for very readable code.\n\nThe most common window read statement you'll encounter looks something like this:\n\n`window = sg.Window(\"My title\", layout).Read()`\n\nTo use a dictionary, you will need to:\n* Mark each input element you wish to be in the dictionary with the keyword `key`.\n\nIf **any** element in the window has a `key`, then **all** of the return values are returned via a dictionary.  If some elements do not have a key, then they are numbered starting at zero.\n\nLet's take a look at your first dictionary-based window.\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Blue 3')  # please make your windows colorful\n\nlayout = [\n\t\t\t[sg.Text('Please enter your Name, Address, Phone')],\n\t\t\t[sg.Text('Name', size=(15, 1)), sg.InputText('1', key='_NAME_')],\n\t\t\t[sg.Text('Address', size=(15, 1)), sg.InputText('2', key='_ADDRESS_')],\n\t\t\t[sg.Text('Phone', size=(15, 1)), sg.InputText('3', key='_PHONE_')],\n\t\t\t[sg.Submit(), sg.Cancel()]\n\t\t\t]\n\nwindow = sg.Window('Simple data entry window', layout)\nevent, values = window.read()\nwindow.close()\n\nsg.Popup(event, values, values['_NAME_'], values['_ADDRESS_'], values['_PHONE_'])\n```\n\nTo get the value of an input field, you use whatever value used as the `key` value as the index value.  Thus to get the value of the name field, it is written as\n\n\tvalues['_NAME_']\n\nThink of the variable values in the same way as you would a list, however, instead of using 0,1,2, to reference each item in the list, use the values of the key.  The Name field in the window above is referenced by `values['_NAME_']`.\n\nYou will find the key field used quite heavily in most PySimpleGUI windows unless the window is very simple.\n\nOne convention you'll see in many of the demo programs is keys being named in all caps with an underscores at the beginning and the end.  You don't HAVE to do this... your key value may look like this:\n`key = '_NAME__'`\n\nThe reason for this naming convention is that when you are scanning the code, these key values jump out at you.   You instantly know it's a key.  Try scanning the code above and see if those keys pop out.\n`key = '_NAME__'`\n\n## The Event Loop / Callback Functions\n\nAll GUIs have one thing in common, an \"event loop\".  Usually the GUI framework runs the event loop for you, but sometimes you want greater control and will run your own event loop.  You often hear the term event loop when discussing embedded systems or on a Raspberry Pi.\n\nWith PySimpleGUI if your window will remain open following button clicks, then your code will have an event loop. If your program shows a single \"one-shot\"  window, collects the data and then has no other GUI interaction, then you don't need an event loop.\n\nThere's nothing mysterious about event loops... they are loops where you take care of.... wait for it..... *events*.  Events are things like button clicks, key strokes, mouse scroll-wheel up/down.\n\nThis little program has a typical PySimpleGUI Event Loop.\n\nThe anatomy of a PySimpleGUI event loop is as follows, *generally speaking*.\n* The actual \"loop\" part is a `while True` loop\n* \"Read\" the event and any input values the window has\n* Check to see if window was closed or user wishes to exit\n* A series of `if event ....` statements\n\nHere is a complete, short program to demonstrate each of these concepts.\n```python\nimport PySimpleGUI as sg\n\nsg.ChangeLookAndFeel('GreenTan')\n\n# ------ Menu Definition ------ #\nmenu_def = [['&File', ['&Open', '&Save', 'E&xit', 'Properties']],\n            ['&Edit', ['Paste', ['Special', 'Normal', ], 'Undo'], ],\n            ['&Help', '&About...'], ]\n\n# ------ Column Definition ------ #\ncolumn1 = [[sg.Text('Column 1', background_color='lightblue', justification='center', size=(10, 1))],\n           [sg.Spin(values=('Spin Box 1', '2', '3'), initial_value='Spin Box 1')],\n           [sg.Spin(values=('Spin Box 1', '2', '3'), initial_value='Spin Box 2')],\n           [sg.Spin(values=('Spin Box 1', '2', '3'), initial_value='Spin Box 3')]]\n\nlayout = [\n    [sg.Menu(menu_def, tearoff=True)],\n    [sg.Text('(Almost) All widgets in one Window!', size=(30, 1), justification='center', font=(\"Helvetica\", 25), relief=sg.RELIEF_RIDGE)],\n    [sg.Text('Here is some text.... and a place to enter text')],\n    [sg.InputText('This is my text')],\n    [sg.Frame(layout=[\n    [sg.Checkbox('Checkbox', size=(10,1)),  sg.Checkbox('My second checkbox!', default=True)],\n    [sg.Radio('My first Radio!     ', \"RADIO1\", default=True, size=(10,1)), sg.Radio('My second Radio!', \"RADIO1\")]], title='Options',title_color='red', relief=sg.RELIEF_SUNKEN, tooltip='Use these to set flags')],\n    [sg.Multiline(default_text='This is the default Text should you decide not to type anything', size=(35, 3)),\n     sg.Multiline(default_text='A second multi-line', size=(35, 3))],\n    [sg.InputCombo(('Combobox 1', 'Combobox 2'), size=(20, 1)),\n     sg.Slider(range=(1, 100), orientation='h', size=(34, 20), default_value=85)],\n    [sg.InputOptionMenu(('Menu Option 1', 'Menu Option 2', 'Menu Option 3'))],\n    [sg.Listbox(values=('Listbox 1', 'Listbox 2', 'Listbox 3'), size=(30, 3)),\n     sg.Frame('Labelled Group',[[\n     sg.Slider(range=(1, 100), orientation='v', size=(5, 20), default_value=25, tick_interval=25),\n     sg.Slider(range=(1, 100), orientation='v', size=(5, 20), default_value=75),\n     sg.Slider(range=(1, 100), orientation='v', size=(5, 20), default_value=10),\n     sg.Column(column1, background_color='lightblue')]])],\n    [sg.Text('_' * 80)],\n    [sg.Text('Choose A Folder', size=(35, 1))],\n    [sg.Text('Your Folder', size=(15, 1), auto_size_text=False, justification='right'),\n     sg.InputText('Default Folder'), sg.FolderBrowse()],\n    [sg.Submit(tooltip='Click to submit this form'), sg.Cancel()]]\n\nwindow = sg.Window('Everything bagel', layout, default_element_size=(40, 1), grab_anywhere=False)\nevent, values = window.read()\nwindow.close()\n\nsg.Popup('Title',\n         'The results of the window.',\n         'The button clicked was \"{}\"'.format(event),\n         'The values are', values)\n\n```\nThis is a complex window with quite a bit of custom sizing to make things line up well.  This is code you only have to write once.  When looking at the code, remember that what you're seeing is a list of lists.  Each row contains a list of Graphical Elements that are used to create the window.  If you see a pair of square brackets [ ] then you know you're reading one of the rows.  Each row of your GUI will be one of these lists.\n\nThis window may look \"ugly\" to you which is because no effort has been made to make it look nice. It's purely functional. There are 30 Elements in the window.  THIRTY Elements. Considering what it does, it's miraculous or in the least incredibly impressive.  Why?  Because in less than 50 lines of code that window was created, shown, collected the results and showed the results in another window.\n\n50 lines.  It'll take you 50 lines of tkinter or Qt code to get the first 3 elements of the window written, if you can even do that.  \n\nNo, let's be clear here... this window will take a massive amount of code using the conventional Python GUI packages.  It's a fact and if you care to prove me wrong, then by ALL means PLEASE do it.  Please write this window using tkinter, Qt, or WxPython and send the code!\n\nNote this window even has a menubar across the top, something easy to miss.\n\n![image](https://user-images.githubusercontent.com/13696193/62234730-4295ea00-b399-11e9-9281-5defb91886f6.png)\n\nClicking the Submit button caused the window call to return.  The call to Popup resulted in this window.\n\n![image](https://user-images.githubusercontent.com/13696193/62234737-47f33480-b399-11e9-8a2c-087cc49868cd.png)\n\n**`Note, event values can be None`**.  The value for `event` will be the text that is displayed on the button element when it was created or the key for the button.  If the user closed the window using the \"X\" in the upper right corner of the window, then `event` will be `None`.   It is ***vitally*** ***important*** that your code contain the proper checks for None. \n\nFor \"persistent windows\",  **always give your users a way out of the window**.  Otherwise you'll end up  with windows that never properly close.  It's literally 2 lines of code that you'll find in every Demo Program.  While you're at it, make sure a `window.Close()` call is after your event loop so that your window closes for sure.\n\nYou can see in the results Popup window that the values returned are a dictionary.  Each input field in the window generates one item in the return values list.  Input fields often return a `string`. Check Boxes and Radio Buttons return `bool`.  Sliders return float or perhaps int depending on how you configured it or which port you're using.\n\nIf your window has no keys and it has no buttons that are \"browse\" type of buttons, then it will return values to you as a list instead of a dictionary.  If possible PySimpleGUI tries to return the values as a list to keep things simple.\n\nNote in the list of return values in this example, many of the keys are numbers.  That's because no keys were specified on any of the elements (although one was automatically made for you).  If you don't specify a key for your element, then a number will be sequentially assigned.  For elements that you don't plan on modifying or reading values from, like a Text Element, you can skip adding keys.  For other elements, you'll likely want to add keys so that you can easily access the values and perform operations on them.\n\n### Operations That Take a \"Long Time\"\n\nIf you're a Windows user you've seen windows show in their title bar \"Not Responding\" which is soon followed by a Windows popop stating that \"Your program has stopped responding\".  Well, you too can make that message and popup appear if you so wish!  All you need to do is execute an operation that takes \"too long\" (i.e. a few seconds) inside your event loop.\n\nYou have a couple of options for dealing this with.  If your operation can be broken up into smaller parts, then you can call `Window.Refresh()` occassionally to avoid this message.  If you're running a loop for example, drop that call in with your other work.  This will keep the GUI happy and Window's won't complain.\n\nIf, on the other hand, your operation is not under your control or you are unable to add `Refresh` calls, then the next option available to you is to move your long operations into a thread.\n\nThere are a couple of demo programs available for you to see how to do this.  You basically put your work into a thread.  When the thread is completed, it tells the GUI by sending a message through a queue.  The event loop will run with a timer set to a value that represents how \"responsive\" you want your GUI to be to the work completing.  \n\nThese 2 demo programs are called\n```python\nDemo_Threaded_Work.py - Best documented.  Single thread used for long task\nDemo_Multithreaded_Long_Tasks.py - Similar to above, but with less fancy GUI. Allows you to set amount of time\n```\n\nThese 2 particular demos have a LOT of comments showing you where to add your code, etc.  The amount of code to do this is actually quite small and you don't need to understand the mechanisms used if you simply follow the demo that's been prepared for you.\n\n### Multitheaded Programs\n\nWhile on the topic of multiple threads, another demo was prepared that shows how you can run multiple threads in your program that all communicate with the event loop in order to display something in the GUI window.  Recall that for PySimpleGUI (at least the tkinter port) you cannot make PySimpleGUI calls in threads other than the main program thread.\n\nThe key to these threaded programs is communication from the threads to your event loop.  The mechanism chosen for these demonstrations uses the Python built-in `queue` module.  The event loop polls these queues to see if something has been sent over from one of the threads to be displayed.\n\nYou'll find the demo that shows multiple threads communicating with a single GUI is called:\n\n```python\nDemo_Multithreaded_Queued.py\n```\n\nOnce again a **warning** is in order for plain PySimpleGUI (tkinter based) - your GUI must never run as anything but the main program thread and no threads can directly call PySimpleGUI calls.\n\n---\n\n# Building Custom Windows\n\nYou will find it ***much easier*** to write code using PySimpleGUI if you use an IDE such as ***PyCharm***.  The features that show you documentation about the API call you are making will help you determine which settings you want to change, if any.  In PyCharm, two commands are particularly helpful.\n\n\tControl-Q (when cursor is on function name) brings up a box with the function definition\n\tControl-P (when cursor inside function call \"()\") shows a list of parameters and their default values\n\n## Synchronous / Asynchronous Windows\n\nThe most common use of PySimpleGUI is to display and collect information from the user.  The most straightforward way to do this is using a \"blocking\" GUI call.  Execution is \"blocked\" while waiting for the user to close the GUI window/dialog box.\n\nYou've already seen a number of examples above that use blocking windows.  You'll know it blocks if the `Read` call has no timeout parameter.\n\nA blocking Read (one that waits until an event happens) look like this:\n\n```python\nevent, values = window.read()\n```\n\nA non-blocking / Async Read call looks like this:\n\n```python\nevent, values = window.Read(timeout=100)\n```\n\nYou can learn more about these async / non-blocking windows toward the end of this document.\n\n# Themes - Automatic Coloring of Your Windows\n\nIn Dec 2019 the function `change_look_and_feel` was replaced by `theme`.  The concept remains the same, but a new group of function alls makes it a lot easier to manage colors and other settings.\n\nBy default the PySimpleGUI color theme is now `Dark Blue 3`.  Gone are the \"system default\" gray colors.  If you want your window to be devoid of all colors so that the system chooses the colors (gray) for you, then set the theme to 'SystemDefault1' or `Default1`.\n\nThere are 130 themes available.  You can preview these themes by calling `theme_previewer()` which will create a LARGE window displaying all of the color themes available.\n\nAs of this writing, these are your available themes.\n\n![SNAG-0620](https://user-images.githubusercontent.com/46163555/71361827-2a01b880-2562-11ea-9af8-2c264c02c3e8.jpg)\n\n## Default is `Dark Blue 3`\n\n![image](https://user-images.githubusercontent.com/46163555/71362356-cd070200-2563-11ea-9455-9315b9423d7e.png)\n\nIn Dec 2019 the default for all PySimpleGUI windows changed from the system gray with blue buttons to a more complete theme using a grayish blue with white text.  Previouisly users were nagged into choosing  color theme other than gray.  Now it's done for you instead of nagging you.\n\nIf you're struggling with this color theme, then add a call to `theme` to change it.\n\n## Theme Name Formula\n\nThemes names that you specify can be \"fuzzy\".  The text does not have to match exactly what you see printed.  For example \"Dark Blue 3\" and \"DarkBlue3\" and \"dark blue 3\" all work.\n\nOne way to quickly determine the best setting for your window is to simply display your window using a lot of different themes.  Add the line of code to set the theme - `theme('Dark Green 1')`, run your code, see if you like it, if not, change the theme string to `'Dark Green 2'` and try again.  Repeat until you find something you like.\n\nThe \"Formula\" for the string is:\n\n`Dark Color #`\n\nor\n\n`Light Color #`\n\nColor can be Blue, Green, Black, Gray, Purple, Brown, Teal, Red.   The # is optional or can be from 1 to XX.  Some colors have a lot of choices.  There are 13 \"Light Brown\" choices for example.\n\n### \"System\" Default - No Colors\n\nIf you're bent on having no colors at all in your window, then choose `Default 1` or `System Default 1`.\n\nIf you want the original PySimpleGUI color scheme of a blue button and everything else gray then you can get that with the theme `Default` or `System Default`.\n\n## Theme Functions\n\nThe basic theme function call is `theme(theme_name)`.  This sets the theme.  Calling without a parameter, `theme()` will return the name of the current theme.\n\nIf you want to get or modify any of the theme settings, you can do it with these functions that you will find detailed information about in the function definitions section at the bottom of the document.  Each will return the current value if no parameter is used.\n\n```python\ntheme_background_color\ntheme_border_width\ntheme_button_color\ntheme_element_background_color\ntheme_element_text_color\ntheme_input_background_color\ntheme_input_text_color\ntheme_progress_bar_border_width\ntheme_progress_bar_color\ntheme_slider_border_width\ntheme_slider_color\ntheme_text_color\n```\n\nThese will help you get a list of available choices.\n\n```python\ntheme_list\ntheme_previewer\n```\n\n# Window Object - Beginning a window\n\nThe first step is to create the window object using the desired window customizations.  \n\nNote - There is no direct support for \"**modal windows**\" in PySimpleGUI.  All windows are accessable at all times unless you manually change the windows' settings.\n\n**IMPORTANT** - Many of the `Window` methods require you to either call `Window.Read` or `Window.Finalize` (or set `finalize=True` in your `Window` call) before you call the method. This is because these 2 calls are what actually creates the window using the underlying GUI Framework.  Prior to one of those calls, the methods are likely to crash as they will not yet have their underlying widgets created.\n\n### Window Location\n\nPySimpleGUI computes the exact center of your window and centers the window on the screen.  If you want to locate your window elsewhere, such as the system default of (0,0), if you have 2 ways of doing this. The first is when the window is created.  Use the `location` parameter to set where the window.  The second way of doing this is to use the `SetOptions` call which will set the default window location for all windows in the future.\n\n#### Multiple Monitors and Linux\n\nThe auto-centering (default) location for your PySimpleGUI window may not be correct if you have multiple monitors on a Linux system.  On Windows multiple monitors appear to work ok as the primary monitor the tkinter utilizes and reports on.  \n\nLinux users with multiple monitors that have a problem when running with the default location will need to specify the location the window should be placed when creating the window by setting the `location` parameter.\n\n### Window Size\n\nYou can get your window's size by access the `Size` property.  The window has to be Read once or Finalized in order for the value to be correct. Note that it's a property, not a call.\n\n`my_windows_size = window.Size`\n\nTo finalize your window:\n\n```python\nwindow = Window('My Title', layout, finalize=True)\n```\n\n### Element Sizes\n\nThere are multiple ways to set the size of Elements.  They are:\n\n1. The global default size - change using `SetOptions` function\n2. At the Window level - change using the parameter `default_element_size` in your call to `Window`\n3. At the Element level - each element has a `size` parameter\n\nElement sizes are measured in characters (there are exceptions).  A Text Element with  `size = (20,1)` has a size of 20 characters wide by 1 character tall.\n\nThe default Element size for PySimpleGUI is `(45,1)`.\n\nThere are a couple of widgets where one of the size values is in pixels rather than characters.  This is true for Progress Meters and Sliders.  The second parameter is the 'height' in pixels.\n\n### No Titlebar\n\nShould you wish to create cool looking windows that are clean with no windows titlebar, use the no_titlebar option when creating the window.\n\nBe sure an provide your user an \"exit\" button or they will not be able to close the window!  When no titlebar is enabled, there will be no icon on your taskbar for the window.  Without an exit button you will need to kill via taskmanager... not fun.\n\nWindows with no titlebar rely on the grab anywhere option to be enabled or else you will be unable to move the window.\n\nWindows without a titlebar can be used to easily create a floating launcher.\n\nLinux users!  Note that this setting has side effects for some of the other Elements.  Multi-line input doesn't work at all, for example  So, use with caution.\n\n![floating launcher](https://user-images.githubusercontent.com/13696193/45258246-71bafb80-b382-11e8-9f5e-79421e6c00bb.jpg)\n\n### Grab Anywhere\n\nThis is a feature unique to PySimpleGUI.\n\nNote - there is a warning message printed out if the user closes a non-blocking window using a button with grab_anywhere enabled.  There is no harm in these messages, but it may be distressing to the user.    Should you wish to enable for a non-blocking window, simply get grab_anywhere = True when you create the window.\n\n### Always on top\n\nTo keep a window on top of all other windows on the screen, set keep_on_top = True when the window is created.  This feature makes for floating toolbars that are very helpful and always visible on your desktop.\n\n### Focus\n\nPySimpleGUI will set a default focus location for you.  This generally means the first input field.  You can set the focus to a particular element.  If you are going to set the focus yourself, then you should turn off the automatic focus by setting `use_default_focus=False` in your Window call.\n\n### TTK Buttons\n\nBeginning in release 4.7.0 PySimpleGUI supports both \"normal\" tk Buttons and ttk Buttons.  This change was needed so that Mac users can use colors on their buttons.  There is a bug that causes tk Buttons to not show text when you attempt to change the button color.  Note that this problem goes away if you install Python from the official Python.org site rather than using Homebrew.  A number of users have switched and are quite happy since even tk Buttons work on the Mac after the switch.\n\nBy default Mac users will get ttk Buttons when a Button Element is used.  All other platforms will get a normal tk Button.  There are ways to override this behavior.  One is by using the parameter `use_ttk_buttons` when you create your window.  If set to True, all buttons will be ttk Buttons in the window.  If set to False, all buttons will be normal tk Buttons.  If not set then the platform or the Button Element determines which is used.\n\nIf a system-wide setting is desired, then the default can be set using `set_options`.  This will affect all windows such as popups and the debug window.\n\n### TTK Themes\n\ntkinter has a number of \"Themes\" that can be used with ttk widgets.  In PySimpleGUI these widgets include - Table, Tree, Combobox, Button, ProgressBar, Tabs & TabGroups.  Some elements have a 'theme' parameter but these are no longer used and should be ignored.  The initial release of PySimpleGUI attempted to mix themes in a single window but since have learned this is not possible so instead it is set at the Window or the system level.\n\nIf a system-wide setting is desired, then the default can be set using `set_options`. This will affect all windows such as popups and the debug window.\n\nThe ttk theme choices depend on the platform. Linux has a shorter number of selections than Windows.  These are the Windows choices:\n'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'\n\nThere are constants defined to help you with code completion to determine what your choices are.  Theme constants start with `THEME_`.  For example, the \"clam\" theme is `THEME_CLAM`\n\nYou're urged to experiment with this setting to determine which you like the most.  They change the ttk-based elements in subtle but still significant ways.\n\n## Closing Windows\n\nWhen you are completely done with a window, you should close it and then delete it so that the resources, in particular the tkinter resources, are properly cleaned up.\n\nIf you wish to do this in 1 line of code, here's your line:\n\n```python\nwindow.close(); del window\n```\n\nThe delete helps with a problem multi-threaded application encounter where tkinter complains that it is being called from the wrong thread (not the program's main thread)\n\n## Window Methods That Complete Formation of Window\n\nAfter you have completed making your layout, stored in a variable called `layout` in these examples, you will create your window.\n\nThe creation part of a window involves 3 steps.\n\n1. Create a `Window` object\n2. Adding your Layout to the window\n3. Optional - Finalize if want to make changes prior to `Read` call\n\nOver time the PySimpleGUI code has continued to compact, compress, so that as little code as possible will need to be written by the programmer.\n\n### The Individual Calls\n\nThis is the \"long form\" as each method is called individually.\n\n```python\nwindow = sg.Window('My Title')\nwindow.layout(layout)\nwindow.finalize()\n```\n\n### Chaining The Calls (the old method)\n\nThe next level  of compression that was done was to chain the calls together into a single line of code.\n\n```python\nwindow = sg.Window('My Title').Layout(layout).finalize()\n```\n\n### Using Parameters Instead of Calls (New Preferred Method)\n\nHere's a novel concept, instead of using chaining, something that's foreign to beginners, use parameters to the `Window` call.  And that is exactly what's happened as of 4.2 of the PySimpleGUI port.\n\n```python\nwindow = sg.Window('My Title', layout, finalize=True)\n```\n\nRather than pushing the work onto the user of doing the layout and finalization calls, let the Window initialization code do it for you. Yea, it sounds totally obvious now, but it didn't a few months ago.\n\nThis capability has been added to all 4 PySimpleGUI ports but none are on PyPI just yet as there is some runtime required first to make sure nothing truly bad is going to happen.\n\nCall to set the window layout.  Must be called prior to `Read`.  Most likely \"chained\" in line with the Window creation.\n\n```python\nwindow = sg.Window('My window title', layout)\n```\n\n#### `finalize()` or `Window` parameter `finalize=True`\n\nCall to force a window to go through the final stages of initialization.  This will cause the tkinter resources to be allocated so that they can then be modified.  This also causes your window to appear.  If you do not want your window to appear when Finalize is called, then set the Alpha to 0 in your window's creation parameters.\n\nIf you want to call an element's `Update` method or call a `Graph` element's drawing primitives, you ***must*** either call `Read` or `Finalize` prior to making those calls.\n\n#### read(timeout=None, timeout_key=TIMEOUT_KEY)\n\nRead the Window's input values and button clicks in a blocking-fashion\n\nReturns event, values.  Adding a timeout can be achieved by setting timeout=*number of milliseconds* before the Read times out after which a \"timeout event\" is returned.  The value of timeout_key will be returned as the event.   If you do not specify a timeout key, then the value `TIMEOUT_KEY` will be returned.\n\nIf you set the timeout = 0, then the Read will immediately return rather than waiting for input or for a timeout.  It's a truly non-blocking \"read\" of the window.\n\n# Layouts\n\nWhile at this point in the documentation you've not been shown very much about each Element available, you should read this section carefully as you can use the techniques you learn in here to build better, shorter, and easier to understand PySimpleGUI code.\n\nIf it feels like this layout section is too much too soon, then come back to this section after you're learned about each Element.  **Whatever order you find the least confusing is the best.**\n\nWhile you've not learned about Elements yet, it makes sense for this section to be up front so that you'll have learned how to use the elements prior to learning how each element works.  At this point in your PySimpleGUI education, it is better for you to grasp time efficient ways of working with Elements than what each Element does.  By learning now how to assemble Elements now, you'll have a good model to put the elements you learn into.\n\nThere are *several* aspects of PySimpleGUI that make it more \"Pythonic\" than other Python GUI SDKs.  One of the areas that is unique to PySimpleGUI is how a window's \"layout\" is defined, specified or built.  A window's \"layout\" is simply a list of lists of elements.  As you've already learned, these lists combine to form a complete window.  This method of defining a window is super-powerful because lists are core to the Python language as a whole and thus are very easy to create and manupulate.  \n\nThink about that for a moment and compare/contrast with Qt, tkinter, etc.  With PySimpleGUI the location of your element in a matrix determines where that Element is shown in the window.  It's so ***simple*** and that makes it incredibly powerful.  Want to switch a row in your GUI that has text with the one below it that has an input element?  No problem, swap the lines of code and you're done.\n\nLayouts were designed to be visual. The idea is for you to be able to envision how a window will look by simplyh looking at the layout in the code.  The CODE itself matches what is drawn on the screen.  PySimpleGUI is a cross between straight Python code and a visual GUI designer.\n\nIn the process of creating your window, you can manipulate these lists of elements without having an impact on the elements or on your window.  Until you perform a \"layout\" of the list, they are nothing more than lists containing objects (they just happen to be your window's elements).\n\nMany times your window definition / layout will be a static, straightforward to create.  \n\nHowever, window layouts are not limited to being one of these staticly defined list of Elements.\n\n# Generated Layouts (For sure want to read if you have > 5 repeating elements/rows)\n\nThere are 5 specific techniques of generating layouts discussed in this section. They can be used alone or in combination with each other.\n\n1. Layout + Layout concatenation `[[A]] + [[B]] = [[A], [B]]`\n2. Element Addition on Same Row  `[[A] + [B]] = [[A, B]]`\n3. List Comprehension to generate a row `[A for x in range(10)] = [A,A,A,A,A...]`\n4. List Comprehension to generate multiple rows `[[A] for x in range(10)] = [[A],[A],...]`\n5. User Defined Elements / Comound Elements\n\n## Example - List Comprehension To Concatenate Multiple Rows - \"To Do\" List Example\n\nLet's create a little layout that will be used to make a to-do list using PySimpleGUI.\n\n### Brute Force\n\n```python\nimport PySimpleGUI as sg\n\nlayout = [\n            [sg.Text('1. '), sg.In(key=1)],\n            [sg.Text('2. '), sg.In(key=2)],\n            [sg.Text('3. '), sg.In(key=3)],\n            [sg.Text('4. '), sg.In(key=4)],\n            [sg.Text('5. '), sg.In(key=5)],\n            [sg.Button('Save'), sg.Button('Exit')]\n         ]\n\nwindow = sg.Window('To Do List Example', layout)\nevent, values = window.read()\n```\n\nThe output from this script was this window:\n\n![SNAG-0451](https://user-images.githubusercontent.com/46163555/63563849-90cd8180-c530-11e9-80d7-4954b11deebd.jpg)\n\nTake a moment and look at the code and the window that's generated.  Are you able to look at the layout and envision the Window on the screen?\n\n### Build By Concatenating Rows\n\nThe brute force method works great on a list that's 5 items long, but what if your todo list had 40 items on it. THEN what?  Well, that's when we turn to a \"generated\" layout, a layout that is generated by your code.  Replace the layout= stuff from the previous example with this definition of the layout.\n\n```python\nimport PySimpleGUI as sg\n\nlayout = []\nfor i in range(1,6):\n    layout += [sg.Text(f'{i}. '), sg.In(key=i)],\nlayout += [[sg.Button('Save'), sg.Button('Exit')]]\n\nwindow = sg.Window('To Do List Example', layout)\nevent, values = window.read()\n```\n\nIt produces the exact same window of course.  That's progress.... went from writing out every row of the GUI to generating every row. If we want 48 items as suggested, change the range(1,6) to range(1,48).  Each time through the list another row is added onto the layout.\n\n### Create Several Rows Using List Comprehension\n\nBUT, we're not done yet!\n\nThis is **Python**, we're using lists to build something up, so we should be looking at ****list comprehensions****.  Let's change the `for` loop into a list comprehension.  Recall that our `for` loop was used to concatenate 6 rows into a layout.\n\n```python\nlayout =  [[sg.Text(f'{i}. '), sg.In(key=i)] for i in range(1,6)] \n```\n\nHere we've moved the `for` loop to inside of the list definition (a list comprehension)\n\n### Concatenating Multiple Rows\n\nWe have our rows built using the list comprehension, now we just need the buttons.  They can be easily \"tacked onto the end\" by simple addition.\n\n```python\nlayout =  [[sg.Text(f'{i}. '), sg.In(key=i)] for i in range(1,6)] \nlayout += [[sg.Button('Save'), sg.Button('Exit')]]\n```\n\nAnytime you have 2 layouts, you can concatenate them by simple addition.  Make sure your layout is a \"list of lists\" layout.  In the above example, we know the first line is a generated layout of the input rows.  The last line adds onto the layout another layout... note the format being [ [ ] ].\n\nThis button definition is an entire layout, making it possible to add to our list comprehension\n\n`[[sg.Button('Save'), sg.Button('Exit')]]`\n\nIt's quite readable code.  The 2 layouts line up visually quite well.\n\nBut let's not stop there with compressing the code.  How about removing that += and instead change the layout into a single line with just a `+` between the two sets of row.\n\nDoing this concatenation on one line, we end up with this single statement that creates the **entire layout** for the GUI:\n\n```python\nlayout =  [[sg.Text(f'{i}. '), sg.In(key=i)] for i in range(1,6)] + [[sg.Button('Save'), sg.Button('Exit')]]\n```\n\n### Final \"To Do List\" Program\n\nAnd here we have our final program... all **4** lines.\n\n```python\nimport PySimpleGUI as sg\n\nlayout  = [[sg.Text(f'{i}. '), sg.In(key=i)] for i in range(1,6)] + [[sg.Button('Save'), sg.Button('Exit')]]\n\nwindow = sg.Window('To Do List Example', layout)\n\nevent, values = window.read()\n```\n\nIf you really wanted to crunch things down, you can make it a 2 line program (an import and 1 line of code) by moving the layout into the call to `Window`\n\n```python\nimport PySimpleGUI as sg\n\nevent, values = sg.Window('To Do List Example', layout=[[sg.Text(f'{i}. '), sg.In(key=i)] for i in range(1,6)] + [[sg.Button('Save'), sg.Button('Exit')]]).Read()\n```\n\n## Example - List Comprehension to Build Rows - Table Simulation - Grid of Inputs\n\nIn this example we're building a \"table\" that is 4 wide by 10 high using `Input` elements \n\nThe end results we're seeking is something like this:\n\n```\nHEADER 1    HEADER 2    HEADER 3    HEADER 4\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\nINPUT       INPUT       INPUT       INPUT\n```\n\nOnce the code is completed, here is how the result will appear:\n\n![image](https://user-images.githubusercontent.com/46163555/63626328-b4480900-c5d0-11e9-9c81-52e3b0516bde.png)\n\nWe're going to be building each row using a list comprehension and we'll build the table by concatenating rows using another list comprehension.  That's a list comprehension that goes across and another list comprehension that goes down the layout, adding one row after another.\n\n### Building the Header\n\nFirst let's build the header.  There are 2 concepts to notice here:\n\n```python\nimport PySimpleGUI as sg\n\nheadings = ['HEADER 1', 'HEADER 2', 'HEADER 3','HEADER 4']  # the text of the headings\nheader =  [[sg.Text('  ')] + [sg.Text(h, size=(14,1)) for h in headings]]  # build header layout\n```\n\nThere are 2 things in this code to note\n1. The list comprehension that makes the heading elements\n2. The spaces added onto the front\n\nLet's start with the headers themselves.\n\nThis is the code that makes a row of Text Elements containing the text for the headers.  The result is a list of Text Elements, a row.\n\n```python\n[sg.Text(h, size=(14,1)) for h in headings]\n```\n\nThen we add on a few spaces to shift the headers over so they are centered over their columns.  We do this by simply adding a `Text` Element onto the front of that list of headings.\n\n```python\nheader =  [[sg.Text('  ')] + [sg.Text(h, size=(14,1)) for h in headings]]\n```\n\nThis `header` variable is a layout with 1 row that has a bunch of `Text` elements with the headings.\n\n### Building the Input Elements\n\nThe `Input` elements are arranged in a grid.  To do this we will be using a double list comprehension.  One will build the row the other will add the rows together to make the grid.  Here's the line of code that does that:\n\n```python\ninput_rows = [[sg.Input(size=(15,1), pad=(0,0)) for col in range(4)] for row in range(10)]\n```\n\nThis portion of the statement makes a single row of 4 `Input` Elements\n\n```python\n[sg.Input(size=(15,1), pad=(0,0)) for col in range(4)]\n```\n\nNext we take that list of `Input` Elements and make as many of them as there are rows, 10 in this case.  We're again using Python's awesome list comprehensions to add these rows together.\n\n```python\ninput_rows = [[sg.Input(size=(15,1), pad=(0,0)) for col in range(4)] for row in range(10)]\n```\n\nThe first part should look familiar since it was just discussed as being what builds a single row.  To make the matrix, we simply take that single row and create 10 of them, each being a list.\n\n### Putting it all together\n\nHere is our final program that uses simple addition to add the headers onto the top of the input matrix.  To make it more attractive, the color theme is set to 'Dark Brown 1'.\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Brown 1')\n\nheadings = ['HEADER 1', 'HEADER 2', 'HEADER 3','HEADER 4']\nheader =  [[sg.Text('  ')] + [sg.Text(h, size=(14,1)) for h in headings]]\n\ninput_rows = [[sg.Input(size=(15,1), pad=(0,0)) for col in range(4)] for row in range(10)]\n\nlayout = header + input_rows\n\nwindow = sg.Window('Table Simulation', layout, font='Courier 12')\nevent, values = window.read()\n```\n\n![image](https://user-images.githubusercontent.com/46163555/70472374-f7a18700-1a9c-11ea-9cd1-27d386cd9066.png)\n\n## User Defined Elements / Compound Elements\n\n\"User Defined Elements\" and \"Compound Elements\" are one or more PySimpleGUI Elements that are wrapped in a function definition. In a layout, they have the appearance of being a custom elements of some type.\n\nUser Defined Elements are particularly useful when you set a lot of parameters on an element that you use over and over in your layout.\n\n### Example - A Grid of Buttons for Calculator App\n\nLet's say you're making a calculator application with buttons that have these settings:\n\n* font = Helvetica 20\n* size = 5,1\n* button color = white on blue\n\nThe code for **one** of these buttons is:\n\n```python\nsg.Button('1', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20))\n```\n\nIf you have 6 buttons across and 5 down, your layout will have 30 of these lines of text.\n\nOne row of these buttons could be written:\n```python\n    [sg.Button('1', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20)),\n     sg.Button('2', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20)),\n     sg.Button('3', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20)),\n     sg.Button('log', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20)),\n     sg.Button('ln', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20)),\n     sg.Button('-', button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20))],\n```\n\nBy using User Defined Elements, you can significantly shorten your layouts.  Let's call our element `CBtn`.  It would be written like this:\n\n```python\ndef CBtn(button_text):\n    return sg.Button(button_text, button_color=('white', 'blue'), size=(5, 1), font=(\"Helvetica\", 20))\n```\n\nUsing your new `CBtn` Element, you could rewrite the row of buttons above as:\n```python\n[CBtn('1'), CBtn('2'), CBtn('3'), CBtn('log'), CBtn('ln'), CBtn('-')],\n```\n\nSee the tremendous amount of code you do not havew to write!  USE this construct any time you find yourself copying an element many times.  \n\nBut let's not stop there.  \n\nSince we've been discussing list comprehensions, let's use them to create this row.  The way to do that is to make a list of the symbols that go across the row make a loop that steps through that list.  The result is a list that looks like this:\n\n```python\n[CBtn(t) for t in ('1','2','3', 'log', 'ln', '-')],\n```\n\nThat code produces the same list as this one we created by hand:\n\n```python\n[CBtn('1'), CBtn('2'), CBtn('3'), CBtn('log'), CBtn('ln'), CBtn('-')],\n```\n\n### Compound Elements\n\nJust like a `Button` can be returned from a User Defined Element, so can multiple Elements.\n\nGoing back to the To-Do List example we did earlier, we could have defined a User Defined Element that represented a To-Do Item and this time we're adding a checkbox. A single line from this list will be:\n\n* The item # (a `Text` Element)\n* A `Checkbox` Element to indicate completed\n* An `Input` Element to type in what to do\n\nThe definition of our User Element is this `ToDoItem` function.  It is a single User Element that is a combination of 3 PySimpleGUI Elements.\n\n```python\ndef ToDoItem(num):\n    return [sg.Text(f'{num}. '), sg.CBox(''), sg.In()]\n```\n\nThis makes creating a list of 5 to-do items downright trivial when combined with the list comprehension techniques we learned earlier.  Here is the code required to create 5 entries in our to-do list.\n\n```python\nlayout = [ToDoItem(x) for x in range(1,6)]\n```\n\nWe can then literally add on the buttons\n\n```python\nlayout = [ToDoItem(x) for x in range(1,6)] + [[sg.Button('Save'), sg.Button('Exit')]]\n```\n\nAnd here is our final program\n```python\nimport PySimpleGUI as sg\n\ndef ToDoItem(num):\n    return [sg.Text(f'{num}. '), sg.CBox(''), sg.In()]\n\nlayout = [ToDoItem(x) for x in range(1,6)] + [[sg.Button('Save'), sg.Button('Exit')]]\n\nwindow = sg.Window('To Do List Example', layout)\nevent, values = window.read()\n```\n\nAnd the window it creates looks like this:\n\n![image](https://user-images.githubusercontent.com/46163555/63628682-cda28280-c5db-11e9-92a4-44ec2cb6ccf9.png)\n\n---\n\n# Elements\n\nYou will find information on Elements and all other classes and functions are located near the end of this manual.  They are in 1 large section of the readme, in alphabetical order for easy lookups.  This section's discussion of Elements is meant to teach you how they work.  The other section has detailed call signatures and parameter definitions.\n\n\"Elements\" are the building blocks used to create windows.  Some GUI APIs use the term \"Widget\" to describe these graphic elements.\n\n- Text\n- Single Line Input\n- Buttons including these types:\n\t- File Browse\n\t- Folder Browse\n\t- Calendar picker\n\t- Date Chooser\n\t- Read window\n\t- Close window (\"Button\" & all shortcut buttons)\n\t- Realtime\n- Checkboxes\n- Radio Buttons\n- Listbox\n- Slider\n- Multi-line Text Input/Output\n- Multi-line Text Output (not on tkinter version)\n- Scroll-able Output\n- Vertical Separator\n- Progress Bar\n- Option Menu\n- Menu\n- ButtonMenu\n- Frame\n- Column\n- Graph\n- Image\n- Table\n- Tree\n- Tab, TabGroup\n- StatusBar\n- Pane\n- Stretch (Qt only)\n- Sizer (plain PySimpleGUI only)\n\n## Common Element Parameters\n\nSome parameters that you  will see on almost all Element creation calls include:\n\n- key   -  Used with window.FindElement and with return values\n- tooltip   - Hover your mouse over the elemnt and you'll get a popup with this text\n- size  - (width, height) - usually measured in characters-wide, rows-high.  Sometimes they mean pixels\n- font - specifies the font family, size, etc\n- colors - Color name or #RRGGBB string\n- pad - Amount of padding to put around element\n- enable_events - Turns on the element specific events\n- visible - Make elements appear and disappear\n\n#### Tooltip\n\nTooltips are text boxes that popup next to an element if you hold your mouse over the top of it.  If you want to be extra kind to your window's user, then you can create tooltips for them by setting the parameter `tooltip` to some text string.  You will need to supply your own line breaks / text wrapping.  If you don't want to manually add them, then take a look at the standard library package `textwrap`.\n\nTooltips are one of those \"polish\" items that really dress-up a GUI and show's a level of sophistication.  Go ahead, impress people, throw some tooltips into your GUI.  You can change the color of the background of the tooltip on the tkinter version of PySimpleGUI by setting `TOOLTIP_BACKGROUND_COLOR` to the color string of your choice.  The default value for the color is:\n\n`TOOLTIP_BACKGROUND_COLOR = \"#ffffe0\"`\n\n#### Size\n\nInfo on setting default element sizes is discussed in the Window section above.\n\nSpecifies the amount of room reserved for the Element.  For elements that are character based, such a Text, it is (# characters, # rows).  Sometimes it is a pixel measurement such as the Image element.  And sometimes a mix like on the Slider element (characters long by pixels wide).  \n\nSome elements, Text and Button, have an auto-size setting that is `on` by default. It will size the element based on the contents.  The result is that buttons and text fields will be the size of the string creating them.  You can turn it off.  For example, for Buttons, the effect will be that all buttons will be the same size in that window.\n\n#### Element Sizes - Non-tkinter Ports (Qt, WxPython, Web)\n\nIn non-tkinter ports you can set the specific element sizes in 2 ways.  One is to use the normal `size` parameter like you're used to using.  This will be in characters and rows.\n\nThe other way is to use a new parameter, `size_px`.  This parameter allows you to specify the size directly in pixels.  A setting of `size_px=(300,200)` will create an Element that is 300 x 200 pixels.\n\nAdditionally, you can also indicate pixels using the `size` parameter, **if the size exceeds the threshold for conversion.**  What does that mean?  It means if your width is > 20 (`DEFAULT_PIXEL_TO_CHARS_CUTOFF`), then it is assumed you're talking pixels, not characters.  However, some of the \"normally large\" Elements have a cutoff value of 100.  These include, for example, the `Multline` and `Output` elements.\n\nIf you're curious about the math used to do the character to pixels conversion, it's quite crude, but functional.  The conversion is completed with the help of this variable:\n\n`DEFAULT_PIXELS_TO_CHARS_SCALING = (10,26)`\n\nThe conversion simply takes your `size[0]` and multiplies by 10 and your `size[1]` and multiplies it by 26.\n\n#### Colors\n\nA string representing color.  Anytime colors are involved, you can specify the tkinter color name such as 'lightblue' or an RGB hex value '#RRGGBB'.  For buttons, the color parameter is a tuple (text color, background color)\n\nAnytime colors are written as a tuple in PySimpleGUI, the way to figure out which color is the background is to replace the \",\" with the word \"on\".  ('white', 'red') specifies a button that is \"white on red\".  Works anywhere there's a color tuple.\n\n#### Pad\n\nThe amount of room around the element in pixels. The default value is (5,3) which means leave 5 pixels on each side of the x-axis and 3 pixels on each side of the y-axis.  You can change this on a global basis using a call to SetOptions, or on an element basis.\n\nIf you want more pixels on one side than the other, then you can split the number into 2 number.  If you want 200 pixels on the left side, and 3 pixels on the right, the pad would be ((200,3), 3).  In this example, only the x-axis is split.\n\n#### Font\n\nSpecifies the font family, size, and style.  Font families on Windows include:\n* Arial\n* Courier\n* Comic,\n* Fixedsys\n* Times\n* Verdana\n* Helvetica (the default I think)\n\nThe fonts will vary from system to system, however, Tk 8.0 automatically maps Courier, Helvetica and Times to their corresponding native family names on all platforms.  Also, font families cannot cause a font specification to fail on Tk 8.0 and greater.\n\nIf you wish to leave the font family set to the default, you can put anything not a font name as the family.  The PySimpleGUI Demo programs and documentation use the family 'Any' to demonstrate this fact..  You could use \"default\" if that's more clear to you.\n\nThere are 2 formats that can be used to specify a font... a string, and a tuple\nTuple - (family, size, styles)\nString - \"Family Size Styles\"\n\nTo specify an underlined, Helvetica font with a size of 15 the values:\n('Helvetica', 15, 'underline italics')\n'Helvetica 15 underline italics'\n\n#### Key\n\nIf you are going to do anything beyond the basic stuff with your GUI, then you need to understand keys.\nKeys are a way for you to \"tag\" an Element with a value that will be used to identify that element.  After you put a key in an element's definition, the values returned from Read will use that key to tell you the value.  For example, if you have an input field:\n\n`Input(key='mykey')`\n\nAnd your read looks like this: `event, values = Read()`\n\nThen to get the input value from the read it would be: `values['mykey']`\n\nYou also use the same key if you want to call Update on an element.  Please see the section below on Updates to understand that usage.\n\nKeys can be ANYTHING.  Let's say you have a window with a grid of input elements.  You could use their row and column location as a key (a tuple)\n\n`key=(row, col)`\n\nThen when you read the `values` variable that's returned to you from calling `Window.Read()`, the key in the `values` variable will be whatever you used to create the element. In this case you would read the values as:\n`values[(row, col)]`\n\nMost of the time they are simple text strings.  In the Demo Programs, keys are written with this convention:\n`_KEY_NAME_` (underscore at beginning and end with all caps letters) or '-KEY_NAME-.  You don't have to follow that convention.  It's used so that you can quickly spot when a key is being used.\n\nTo find an element's key, access the member variable `.Key` for the element.  This assumes you've got the element in a variable already. \n\n```python\ntext_elem = sg.Text('', key='-TEXT-')\n\nthe_key = text_elem.Key\n```\n\n#### Visible\n\nBeginning in version 3.17 you can create Elements that are initially invisible that you can later make visible.\n\nTo create an invisible Element, place the element in the layout like you normally would and add the parameter \n\n`visible=False`.\n\nLater when you want to make that Element visible you simply call the Element's `Update` method and pass in the parameter `visible=True`\n\nThis feature works best on Qt, but does work on the tkinter version as well.  The visible parameter can also be used with the Column and Frame \"container\" Elements.\n\nNote - Tkiner elements behave differently than Qt elements in how they arrange themselves when going from invisible to visible.\n\nTkinet elements tend to STACK themselves.  \n\nOne workaround is to place the element in a Column with other elements on its row.  This will hold the place of the row it is to be placed on.  It will move the element to the end of the row however.  \n\nIf you want to not only make the element invisible, on tkinter you can call `Element.\n\nQt elements tend to hold their place really well and the window resizes itself nicely.  It is more precise and less klunky.\n\n## Shortcut Functions / Multiple Function Names\n\nPerhaps not the best idea, but one that's done none the less is the naming of methods and functions.  Some of the more \"Heavily Travelled Elements\" (and methods/functions) have \"shortcuts\".  \n\nIn other words, I am lazy and don't like to type. The result is multiple ways to do exactly the same thing.  Typically, the Demo Programs and other examples use the full name, or at least a longer name.  Thankfully PyCharm will show you the same documentation regardless which you use.\n\nThis enables you to code much quicker once you are used to using the SDK.  The Text Element, for example, has 3 different names `Text`, `Txt` or`T`.  InputText can also be written `Input` or `In` .  \n\nThe shortcuts aren't limited to Elements.  The `Window` method `Window.FindElement` can be written as `Window.Element` because it's such a commonly used function.  BUT,even that has now been shortened.  \n\nIt's an ongoing thing.  If you don't stay up to date and one of the newer shortcuts is used, you'll need to simply rename that shortcut in the code.  For examples Replace sg.T with sg.Text if your version doesn't have sg.T in it.\n\n## Text Element | `T == Txt == Text`\n\nBasic Element. It displays text.\n\n```python\nlayout = [\n            [sg.Text('This is what a Text Element looks like')],\n         ]\n```\n\n![simple text](https://user-images.githubusercontent.com/13696193/44959877-e9d97b00-aec3-11e8-9d24-b4405ee4a148.jpg)\n\nWhen creating a Text Element that you will later update, make sure you reserve enough characters for the new text.  When a Text Element is created without a size parameter, it is created to exactly fit the characters provided. \n\nWith proportional spaced fonts (normally the default) the pixel size of one set of characters will differ from the pixel size of a different set of characters even though the set is of the same number of characters.  In other words, not all letters use the same number of pixels.  Look at the text you're reading right now and you will see this.  An \"i\" takes up a less space then an \"A\".\n\n---\n\n## `Window.FindElement(key)` Shortcut `Window[key]`\n\nThere's been a fantastic leap forward in making PySimpleGUI code more compact.  \n\nInstead of writing:\n```python\nwindow.FindElement(key).Update(new_value)\n ```\n\nYou can now write it as:\n\n```python\nwindow[key].Update(new_value)\n ```\n\nThis change has been released to PyPI for PySimpleGUI\n\nMANY Thanks is owed to the person that suggested and showed me how to do this.  It's an incredible find.\n\n## `Element.Update()` ->  `Element()` shortcut\n\nThis has to be one of the strangest syntactical contructs I've ever written.  \n\nIt is best used in combination with `FindElement` (see prior section on how to shortcut `FindElement`).  \n\nNormally to change an element, you \"find\" it, then call its `update` method.  The code usually looks like this, as you saw in the previous section:\n\n```python\nwindow[key].update(new_value)\n```\n\nThe code can be further compressed by removing the `.update` characters, resulting in this very compact looking call:\n\n```python\nwindow[key](new_value)\n```\n\nYes, that's a valid statement in Python.\n\nWhat's happening is that the element itself is being called.   You can also writing it like this:\n\n```python\nelem = sg.Text('Some text', key='-TEXT-')\nelem('new text value')\n```\n\nSide note - you can also call your `window` variable directly.  If you \"call\" it it will actually call `Window.read`.\n\n```python\nwindow = sg.Window(....)\nevent, values = window()\n\n# is the same as\nwindow = sg.Window(....)\nevent, values = window.read()\n```\n\nIt is confusing looking however so when used, it might be a good idea to write a comment at the end of the statement to help out the poor beginner programmer coming along behind you.\n\nBecause it's such a foreign construct that someone with 1 week of Python classes will not reconize, the demos will continue to use the `.update` method.  \n\nIt does not have to be used in conjuction with `FindElement`.  The call works on any previously made Element.  Sometimes elements are created, stored into a variable and then that variable is used in the layout.  For example.\n\n```python\ngraph_element = sg.Graph(...... lots of parms ......)\n\nlayout = [[graph_element]]\n.\n.\n.\ngraph_element(background_color='blue')      # this calls Graph.Update for the previously defined element\n```\n\nHopefully this isn't too confusing.  Note that the methods these shortcuts replace will not be removed.  You can continue to use the old constructs without changes.\n\n---\n\n### Fonts\n\nAlready discussed in the common parameters section.  Either string or a tuple.\n\n### Color in PySimpleGUI are in one of two formats - color name or RGB value.\n\nIndividual colors are specified using either the color names as defined in tkinter or an RGB string of this format:\n\n\t\"#RRGGBB\"        or          \"darkblue\"\n\n### `auto_size_text      `\nA `True` value for `auto_size_text`, when placed on Text Elements, indicates that the width of the Element should be shrunk do the width of the text.   The default setting is True.  You need to remember this when you create `Text` elements that you are using for output.  \n\n`Text('', key='_TXTOUT_)` will create a `Text` Element that has 0 length.  If you try to output a string that's 5 characters, it won't be shown in the window because there isn't enough room.  The remedy is to manually set the size to what you expect to output\n\n`Text('', size=(15,1), key='_TXTOUT_)` creates a `Text` Element that can hold 15 characters.\n\n### Chortcut functions\nThe shorthand functions for `Text` are `Txt` and `T`\n\n### Events `enable_events`\n\nIf you set the parameter `enable_events` then you will get an event if the user clicks on the Text.\n\n## Multiline Element\nThis Element doubles as both an input and output Element.\n\n```python\nlayout = [[sg.Multiline('This is what a Multi-line Text Element looks like', size=(45,5))]]\n```\n\n![multiline](https://user-images.githubusercontent.com/13696193/44959853-b139a180-aec3-11e8-972f-f52188510c88.jpg)\n\n## Text Input Element  | `InputText == Input == In`\n\n```python\nlayout = [[sg.InputText('Default text')]]\n```\n\n![inputtext 2](https://user-images.githubusercontent.com/13696193/44959861-b5fe5580-aec3-11e8-8040-53ec241b5079.jpg)\n\n---\n\n#### Note about the `do_not_clear` parameter\n\nThis used to really trip people up, but don't think so anymore.  The `do_not_clear` parameter is initialized when creating the InputText Element.  If set to False, then the input field's contents will be erased after every `Window.Read()` call.  Use this setting for when your window is an \"Input Form\" type of window where you want all of the fields to be erased and start over again every time.\n\n## Combo Element | `Combo == InputCombo == DropDown == Drop`\nAlso known as a drop-down list.  Only required parameter is the list of choices.  The return value is a string matching what's visible on the GUI.\n\n```python\nlayout = [[sg.Combo(['choice 1', 'choice 2'])]]\n```\n\n![combobox](https://user-images.githubusercontent.com/13696193/44959860-b565bf00-aec3-11e8-82fe-dbe41252458b.jpg)\n\n## Listbox Element\nThe standard listbox like you'll find in most GUIs.  Note that the return values from this element will be a ***list of results, not a single result***. This is because the user can select more than 1 item from the list (if you set the right mode).\n\n```python\nlayout = [[sg.Listbox(values=['Listbox 1', 'Listbox 2', 'Listbox 3'], size=(30, 6))]]\n```\n\n![listbox 2](https://user-images.githubusercontent.com/13696193/44959859-b4cd2880-aec3-11e8-881c-1e369d5c6337.jpg)\n\n---\n\nListBoxes can cause a window to return from a Read call.  If the flag `enable_events` is set, then when a user makes a selection, the Read immediately returns.\n\nAnother way ListBoxes can cause Reads to return is if the flag bind_return_key is set.  If True, then if the user presses the return key while an entry is selected, then the Read returns.  Also, if this flag is set, if the user double-clicks an entry it will return from the Read.\n\n## Slider Element\n\nSliders have a couple of slider-specific settings as well as appearance settings. Examples include the `orientation` and `range` settings.\n\n```python\nlayout = [[sg.Slider(range=(1,500),\n         default_value=222,\n         size=(20,15),\n         orientation='horizontal',\n         font=('Helvetica', 12))]]\n```\n\n![slider](https://user-images.githubusercontent.com/13696193/44959858-b4349200-aec3-11e8-9e25-c0fcf025d19e.jpg)\n\n### Qt Sliders\n\nThere is an important difference between Qt and tkinter sliders.  On Qt, the slider values must be integer, not float.  If you want your slider to go from 0.1 to 1.0, then make your slider go from 1 to 10 and divide by 10.  It's an easy math thing to do and not a big deal.  Just deal with it.... you're writing software after all.  Presumably you know how to do these things.  ;-)\n\n## Radio Button Element\n\nCreates one radio button that is assigned to a group of radio buttons.  Only 1 of the buttons in the group can be selected at any one time.\n\n```python\nlayout =  [\n\t[sg.Radio('My first Radio!', \"RADIO1\", default=True),\n\tsg.Radio('My second radio!', \"RADIO1\")]\n]\n```\n\n![radio](https://user-images.githubusercontent.com/13696193/44959857-b4349200-aec3-11e8-8e2d-e6a49ffbd0b6.jpg)\n\n## Checkbox Element | `CBox == CB == Check`\nCheckbox elements are like Radio Button elements.  They return a bool indicating whether or not they are checked.\n\n```python\nlayout =  [[sg.Checkbox('My first Checkbox!', default=True), sg.Checkbox('My second Checkbox!')]]\n```\n![checkbox](https://user-images.githubusercontent.com/13696193/44959906-6f5d2b00-aec4-11e8-9c8a-962c787f0286.jpg)\n\n## Spin Element\nAn up/down spinner control.  The valid values are passed in as a list.\n\n```python\nlayout =  [[sg.Spin([i for i in range(1,11)], initial_value=1), sg.Text('Volume level')]]\n```\n\n![spinner](https://user-images.githubusercontent.com/13696193/44959855-b1d23800-aec3-11e8-9f51-afb2109879da.jpg)\n\n## Image Element\n\nImages can be placed in your window provide they are in PNG, GIF, PPM/PGM format.  JPGs cannot be shown because tkinter does not naively support JPGs.  You can use the Python Imaging Library (PIL) package  to convert your image to PNG prior to calling PySimpleGUI if your images are in JPG format.\n\n```python\nlayout = [\n            [sg.Image(r'C:\\PySimpleGUI\\Logos\\PySimpleGUI_Logo_320.png')],\n         ]\n```\n\n![image](https://user-images.githubusercontent.com/13696193/61885709-4e326e00-aecc-11e9-8695-7193df2831ec.png)\n\nYou can specify an animated GIF as an image and can animate the GIF by calling `UpdateAnimation`.  Exciting stuff!\n\n![loading animation](https://user-images.githubusercontent.com/13696193/51280871-d2041e80-19ae-11e9-8757-802eb95352ed.gif)\n\nYou can call the method without setting the `time_between_frames` value and it will show a frame and immediately move on to the next frame.  This enables you to do the inter-frame timing.\n\n## Button Element\n\nButtons are the most important element of all!  They cause the majority of the action to happen.  After all, it's a button press that will get you out of a window, whether it be Submit or Cancel, one way or another a button is involved in all windows.  The only exception is to this is when the user closes the window using the \"X\" in the upper corner which means no button was involved.\n\nThe Types of buttons include:\n* Folder Browse\n* File Browse\n* Files Browse\n* File SaveAs\n* File Save\n* Close window  (normal button)\n* Read window\n* Realtime\n* Calendar Chooser\n* Color Chooser\n\nClose window - Normal buttons like Submit, Cancel, Yes, No, do NOT close the window... they used to.  Now to close a window you need to use a CloseButton / CButton.\n\nFolder Browse - When clicked a folder browse dialog box is opened.  The results of the Folder Browse dialog box are written into one of the input fields of the window.\n\nFile Browse - Same as the Folder Browse except rather than choosing a folder, a single file is chosen.\n\nCalendar Chooser - Opens a graphical calendar to select a date.\n\nColor Chooser - Opens a color chooser dialog\n\nRead window - This is a window button that will read a snapshot of all of the input fields, but does not close the window after it's clicked.\n\nRealtime - This is another async window button.  Normal button clicks occur after a button's click is released.  Realtime buttons report a click the entire time the button is held down.\n\nMost programs will use a combination of shortcut button calls (Submit, Cancel, etc), normal Buttons which leave the windows open and CloseButtons that close the window when clicked.\n\nSometimes there are multiple names for the same function.  This is simply to make the job of the programmer quicker and easier.  Or they are old names that are no longer used but kept around so that existing programs don't break.\n\nThe 4 primary windows of PySimpleGUI buttons and their names are:\n\n1. `Button`= `ReadButton` = `RButton` = `ReadFormButton` (Use `Button`, others are old methods)\n2. `CloseButton` = `CButton`\n3. `RealtimeButton`\n4. `DummyButton`\n\nYou will find the long-form names in the older programs. ReadButton for example.\n\nIn Oct 2018, the definition of Button changed.  Previously Button would CLOSE the window when clicked.  It has been changed so the Button calls will leave the window open in exactly the same way as a ReadButton.  They are the same calls now.   To enables windows to be closed using buttons, a new button was added... `CloseButton` or `CButton`.\n\nYour PySimpleGUI program is most likely going to contain only `Button` calls. The others are generally not foundin user code.\n\nThe most basic Button element call to use is `Button`\n\n```python\nlayout =  [[sg.Button('Ok'), sg.Button('Cancel')]]\n```\n\n![ok cancel 3](https://user-images.githubusercontent.com/13696193/44959927-aa5f5e80-aec4-11e8-86e1-5dc0b3a2b803.jpg)\n\nYou will rarely see these 2 buttons in particular written this way.  Recall that PySimpleGUI is focused on YOU (which generally directly means.... less typing).  As a result, the code for the above window is normally written using shortcuts found in the next section.\n\nYou will typically see this instead of calls to `Button`:\n\n```python\nlayout =  [[sg.Ok(), sg.Cancel()]]\n```\n\nIn reality `Button` is in fact being called on your behalf.  Behind the scenes, `sg.Ok` and `sg.Cancel` call `Button` with the text set to `Ok` and `Cancel` and returning the results that then go into the layout.  If you were to print the layout it will look identical to the first layout shown that has `Button` shown specifically in the layout.\n\n### TTK Buttons & Macs\n\nIn 2019 support for ttk Buttons was added.  This gets around the problem of not being able to change button colors on a Mac.  There are a number of places you can control whether or not ttk buttons are used, be it on MAc or other platform.\n\nTTK Buttons and TK Buttons operate slightly differently.  Button highlighting is one different.  How images and text are displayed at the same time is another.  You've got options now that weren't there previously.  It's nice to see that Mac users can finally use the color themes.\n\n### Button Element Shortcuts\nThese Pre-made buttons are some of the most important elements of all because they are used so much.  They all basically do the same thing, **set the button text to match the function name and set the parameters to commonly used values**. If you find yourself needing to create a custom button often because it's not on this list, please post a request on GitHub. . They include:\n\n- OK\n- Ok\n- Submit\n- Cancel\n- Yes\n- No\n- Exit\n- Quit\n- Help\n- Save\n- SaveAs\n- Open\n\n### \"Chooser\" Buttons \n\nThese buttons are used to show dialog boxes that choose something like a filename, date, color, etc. that are filled into an `InputText` Element (or some other \"target\".... see below regarding targets)\n\n- CalendarButton\n- ColorChooserButton\n- FileBrowse\n- FilesBrowse\n- FileSaveAs\n- FolderBrowse\n\n**IMPORT NOTE ABOUT SHORTCUT BUTTONS**\nPrior to release 3.11.0, these buttons closed the window.  Starting with 3.11 they will not close the window.  They act like RButtons (return the button text and do not close the window)\n\nIf you are having trouble with these buttons closing your window, please check your installed version of PySimpleGUI by typing `pip list` at a command prompt.  Prior to 3.11 these buttons close your window.\n\nUsing older versions, if you want a Submit() button that does not close the window, then you would instead use RButton('Submit').   Using the new version, if you want a Submit button that closes the window like the sold Submit() call did, you would write that as `CloseButton('Submit')` or `CButton('Submit')`\n\n### Button targets\n\nThe `FileBrowse`, `FolderBrowse`, `FileSaveAs` , `FilesSaveAs`, `CalendarButton`, `ColorChooserButton` buttons all fill-in values into another element located on the window.  The target can be a Text Element or an InputText Element or the button itself.  The location of the element is specified by the `target` variable in the function call.\n\nThe Target comes in two forms.\n1. Key\n2. (row, column)\n\nTargets that are specified using a key will find its target element by using the target's key value.  This is the \"preferred\" method.\n\nIf the Target is specified using (row, column) then it utilizes a grid system.  The rows in your GUI are numbered starting with 0. The target can be specified as a hard coded grid item or it can be relative to the button.\n\nThe (row, col) targeting can only target elements that are in the same \"container\".  Containers are the Window, Column and Frame Elements.  A File Browse button located inside of a Column is unable to target elements outside of that Column.\n\nThe default value for `target` is `(ThisRow, -1)`.   `ThisRow` is a special value that tells the GUI to use the same row as the button.  The Y-value of -1 means the field one value to the left of the button.  For a File or Folder Browse button, the field that it fills are generally to the left of the button is most cases.    (ThisRow, -1) means the Element to the left of the button, on the same row.\n\nIf a value of `(None, None)` is chosen for the target, then the button itself will hold the information.  Later the button can be queried for the  value by using the button's key.\n\nLet's examine this window as an example:\n\n![file browse](https://user-images.githubusercontent.com/13696193/44959944-d1b62b80-aec4-11e8-8a68-9d79d37b2c81.jpg)\n\nThe `InputText` element is located at (1,0)... row 1, column 0.  The `Browse` button is located at position (2,0).  The Target for the button could be any of these values:\n\n    Target = (1,0)\n    Target = (-1,0)\n\nThe code for the entire window could be:\n\n```python\nlayout = [[sg.T('Source Folder')],\n              [sg.In()],\n              [sg.FolderBrowse(target=(-1, 0)), sg.OK()]]\n```\n\nor if using keys, then the code would be:\n\n```python\nlayout = [[sg.T('Source Folder')],\n              [sg.In(key='input')],\n              [sg.FolderBrowse(target='input'), sg.OK()]]\n```\n\nSee how much easier the key method is?\n\n#### Invisible Targets\n\nOne very handy trick is to make your target invisible.  This will remove the ability to edit the chosen value like you normally would be able to with an Input Element.  It's a way of making things look cleaner, less cluttered too perhaps.\n\n### Save & Open Buttons\n\nThere are 4 different types of File/Folder open dialog box available.  If you are looking for a file to open, the `FileBrowse` is what you want. If you want to save a file, `SaveAs` is the button. If you want to get a folder name, then `FolderBrowse` is the button to use. To open several files at once, use the `FilesBrowse` button.  It will create a list of files that are separated by ';'\n\n![open](https://user-images.githubusercontent.com/13696193/45243804-2b529780-b2c3-11e8-90dc-6c9061db2a1e.jpg)\n\n![folder](https://user-images.githubusercontent.com/13696193/45243805-2b529780-b2c3-11e8-95ee-fec3c0b11319.jpg)\n\n![saveas](https://user-images.githubusercontent.com/13696193/45243807-2beb2e00-b2c3-11e8-8549-ba71cdc05951.jpg)\n\n### Calendar Buttons\n\nThese buttons pop up a calendar chooser window.  The chosen date is returned as a string.\n\n![calendar](https://user-images.githubusercontent.com/13696193/45243374-99965a80-b2c1-11e8-8311-49777835ca40.jpg)\n\n### Color Chooser Buttons\n\nThese buttons pop up a standard color chooser window.  The result is returned as a tuple.  One of the returned values is an RGB hex representation.\n\n![color](https://user-images.githubusercontent.com/13696193/45243375-99965a80-b2c1-11e8-9779-b71bed85fab6.jpg)\n\n### Custom Buttons\nNot all buttons are created equal.  A button that closes a window is different that a button that returns from the window without closing it.  If you want to define your own button, you will generally do this with the Button Element `Button`, which closes the window when clicked.\n\n```python\nlayout =  [[sg.Button('My Button')]]\n```\n\n![button](https://user-images.githubusercontent.com/13696193/44959862-b696ec00-aec3-11e8-9e88-4b9af0338a03.jpg)\n\nAll buttons can have their text changed by changing the `button_text` parameter in the button call.  It is this text that is returned when a window is read.  This text will be what tells you which button was clicked.  However, you can also use keys on your buttons so that they will be unique.  If only the text were used, you would never be able to have 2 buttons in the same window with the same text.\n\n```python\nlayout =  [[sg.Button('My Button', key='_BUTTON_KEY_')]]\n```\n\nWith this layout, the event that is returned from a `Window.Read()` call when the button is clicked will be \"`_BUTTON_KEY_`\"\n\n### Button Images\n\nNow this is an exciting feature not found in many simplified packages.... images on buttons!  You can make a pretty spiffy user interface with the help of a few button images.\n\nYour button images need to be in PNG or GIF format.  When you make a button with an image, set the button background to the same color as the background.  There's a button color TRANSPARENT_BUTTON that you can set your button color to in order for it to blend into the background.  Note that this value is currently the same as the color as the default system background on Windows.  If you want to set the button background color to the current system default, use the value COLOR_SYSTEM_DEFAULT as the background color.\n\nThis example comes from the `Demo Media Player.py` example program.  Because it's a non-blocking button, it's defined as `RButton`.  You also put images on blocking buttons by using `Button`.\n\n```python\nsg.Button('Restart Song', button_color=sg.TRANSPARENT_BUTTON,\n               image_filename=image_restart, image_size=(50, 50), image_subsample=2, border_width=0)\n```\nThree parameters are used for button images.\n\n```\nimage_filename - Filename. Can be a relative path\nimage_size - Size of image file in pixels\nimage_subsample - Amount to divide the size by.  2 means your image will be 1/2 the size.  3 means 1/3\n```\n\nHere's an example window made with button images.\n\n![media file player](https://user-images.githubusercontent.com/13696193/43161977-9ee7cace-8f57-11e8-8ff8-3ea24b69dab9.jpg)\n\nYou'll find the source code in the file Demo Media Player.  Here is what the button calls look like to create media player window\n ```python\nsg.Button('Pause', button_color=sg.TRANSPARENT_BUTTON,\n              image_filename=image_pause,\n              image_size=(50, 50),\n              image_subsample=2,\n              border_width=0)\n```\n\nExperimentation is sometimes required for these concepts to really sink in.\n\n### Realtime Buttons\n\nNormally buttons are considered \"clicked\" when the mouse button is let UP after a downward click on the button.  What about times when you need to read the raw up/down button values.  A classic example for this is a robotic remote control.  Building a remote control using a GUI is easy enough.  One button for each of the directions is a start.  Perhaps something like this:\n\n![robot remote](https://user-images.githubusercontent.com/13696193/44959958-ff9b7000-aec4-11e8-99ea-7450926409be.jpg)\n\nThis window has 2 button types.  There's the normal \"Read Button\" (Quit) and 4 \"Realtime Buttons\".\n\nHere is the code to make, show and get results from this window:\n\n```python\nimport PySimpleGUI as sg\n\ngui_rows = [[sg.Text('Robotics Remote Control')],\n            [sg.T(' '  * 10), sg.RealtimeButton('Forward')],\n            [sg.RealtimeButton('Left'), sg.T(' '  * 15), sg.RealtimeButton('Right')],\n            [sg.T(' '  * 10), sg.RealtimeButton('Reverse')],\n            [sg.T('')],\n            [sg.Quit(button_color=('black', 'orange'))]\n            ]\n\nwindow = sg.Window('Robotics Remote Control', gui_rows)\n\n#\n# Some place later in your code...\n# You need to perform a Read or Refresh call on your window every now and then or\n# else it will apprear as if the program has locked up.\n#\n# your program's main loop\nwhile (True):\n    # This is the code that reads and updates your window\n    event, values = window.Read(timeout=50)\n    print(event)\n    if event in ('Quit', None):\n        break\n\nwindow.Close()  # Don't forget to close your window!\n```\n\nThis loop will read button values and print them.  When one of the Realtime buttons is clicked, the call to `window.Read` will  return a button name matching the name on the button that was depressed or the key if there was a key assigned to the button.  It will continue to return values as long as the button remains depressed.  Once released, the Read will return timeout events until a button is again clicked.\n\n**File Types**\nThe `FileBrowse` & `SaveAs` buttons have an additional setting named `file_types`.  This variable is used to filter the files shown in the file dialog box.  The default value for this setting is\n\n    FileTypes=((\"ALL Files\", \"*.*\"),)\n\nThis code produces a window where the Browse button only shows files of type .TXT\n\n    layout =  [[sg.In() ,sg.FileBrowse(file_types=((\"Text Files\", \"*.txt\"),))]]\n\nNOTE - Mac users will not be able to use the file_types parameter.  tkinter has a bug on Macs that will crash the program is a file_type is attempted so that feature had to be removed.  Sorry about that!\n\n  ***The ENTER key***\n       The ENTER key is an important part of data entry for windows.  There's a long  tradition of the enter key being used to quickly submit windows.  PySimpleGUI implements this by tying the ENTER key to the first button that closes or reads a window.\n\nThe Enter Key can be \"bound\" to a particular button so that when the key is pressed, it causes the window to return as if the button was clicked.  This is done using the `bind_return_key` parameter in the button calls.\nIf there are more than 1 button on a window, the FIRST button that is of type Close window or Read window is used.  First is determined by scanning the window, top to bottom and left to right.\n\n## ButtonMenu Element\n\nThe ButtonMenu element produces a unique kind of effect.  It's a button, that when clicked, shows you a menu.   It's like clicking one of the top-level menu items on a MenuBar.  As a result, the menu definition take the format of a single  menu entry from  a normal menu definition.  A normal menu definition is  a list of lists.  This definition is one of those lists.\n\n```python\n ['Menu', ['&Pause Graph', 'Menu item::optional_key']]\n```\n\nThe very first string normally specifies what is shown on the menu bar.  In this case, the value is **not used**.  You set the text for the button using a different parameter, the `button_text` parm.\n\nOne use of this element is to make a \"fake menu bar\" that has a colored background.  Normal menu bars cannot have their background color changed.  Not so with ButtonMenus.\n\n![buttonmenu](https://user-images.githubusercontent.com/13696193/50387000-bc0d8180-06c0-11e9-8d17-3b22ed665e78.gif)\n\nReturn values for ButtonMenus are sent via the return values dictionary.  If a selection is made, then an event is generated that will equal the ButtonMenu's key value.  Use that key value to look up the value selected by the user.  This is the same mechanism as the Menu Bar Element, but differs from the pop-up (right click) menu.\n\n## VerticalSeparator Element\n\nThis element has limited usefulness and is being included more for completeness than anything else.  It will draw a line between elements.\n\nIt works best when placed between columns or elements that span multiple rows.  If on a \"normal\" row with elements that are only 1 row high, then it will only span that one row.\n\n```python\nVerticalSeparator(pad=None)\n```\n\n![snag-0129](https://user-images.githubusercontent.com/13696193/47376041-a92a0100-d6bf-11e8-8f5b-0c0df56cf0f3.jpg)\n\n## HorizontalSeparator Element\n\nIn PySimpleGUI, the tkinter port, there is no `HorizontalSeparator` Element.  One will be added as a \"stub\" so that code is portable.  It will likely do nothing just like the `Stretch` Element.\n\nAn easy way to get a horizontal line in PySimpleGUI is to use a `Text` Element that contains a line of underscores\n\n```python\nsg.Text('_'*30)             # make a horizontal line stretching 30 characters\n```\n\n## ProgressBar Element\nThe `ProgressBar` element is used to build custom Progress Bar windows.  It is HIGHLY recommended that you use OneLineProgressMeter that provides a complete progress meter solution for you.  Progress Meters are not easy to work with because the windows have to be non-blocking and they are tricky to debug.\n\nThe **easiest** way to get progress meters into your code is to use the `OneLineProgressMeter` API.  This consists of a pair of functions, `OneLineProgressMeter` and `OneLineProgressMeterCancel`.  You can easily cancel any progress meter by calling it with the current value = max value.  This will mark the meter as expired and close the window.\nYou've already seen OneLineProgressMeter calls presented earlier in this readme.\n\n```python\nsg.OneLineProgressMeter('My Meter', i+1, 1000,  'key', 'Optional message')\n```\n\nThe return value for `OneLineProgressMeter` is:\n`True` if meter updated correctly\n`False` if user clicked the Cancel button, closed the window, or vale reached the max value.\n\n#### Progress Meter in Your window\nAnother way of using a Progress Meter with PySimpleGUI is to build a custom window with a `ProgressBar` Element in the window.  You will need to run your window as a non-blocking window.  When you are ready to update your progress bar, you call the `UpdateBar` method for the `ProgressBar` element itself.\n\n```python\nimport PySimpleGUI as sg\n\n# layout the window\nlayout = [[sg.Text('A custom progress meter')],\n          [sg.ProgressBar(1000, orientation='h', size=(20, 20), key='progressbar')],\n          [sg.Cancel()]]\n\n# create the window`\nwindow = sg.Window('Custom Progress Meter', layout)\nprogress_bar = window['progressbar']\n# loop that would normally do something useful\nfor i in range(1000):\n    # check to see if the cancel button was clicked and exit loop if clicked\n    event, values = window.read(timeout=10)\n    if event == 'Cancel'  or event is None:\n        break\n  # update bar with loop value +1 so that bar eventually reaches the maximum\n    progress_bar.UpdateBar(i + 1)\n# done with loop... need to destroy the window as it's still open\nwindow.close()\n```\n\n![progress custom](https://user-images.githubusercontent.com/13696193/45243969-c3508100-b2c3-11e8-82bc-927d0307e093.jpg)\n\n## Output Element\n\nThe Output Element is a re-direction of Stdout.\n\nIf you are looking for a way to quickly add the ability to show scrolling text within your window, then adding an `Output` Element is about as quick and easy as it gets.\n\n**Anything \"printed\" will be displayed in this element.**  This is the \"trivial\" way to show scrolling text in your window.  It's as easy as dropping an Output Element into your window and then calling print as much as you want.  The user will see a scrolling area of text inside their window.\n\n***IMPORTANT***  You will NOT see what you `print` until you call either `window.Read` or `window.Refresh`.  If you want to immediately see what was printed, call `window.Refresh()` immediately after your print statement.\n\n```python\nOutput(size=(80,20))\n```\n\n![output](https://user-images.githubusercontent.com/13696193/44959863-b72f8280-aec3-11e8-8caa-7bc743149953.jpg)\n\n----\n\nHere's a complete solution for a chat-window using an Output Element.  To display data that's received, you would to simply \"print\" it and it will show up in the output area.  You'll find this technique used in several Demo Programs including the HowDoI application.\n\n```python\nimport PySimpleGUI as sg\n\ndef ChatBot():\n    layout = [[(sg.Text('This is where standard out is being routed', size=[40, 1]))],\n              [sg.Output(size=(80, 20))],\n              [sg.Multiline(size=(70, 5), enter_submits=True),\n               sg.Button('SEND', button_color=(sg.YELLOWS[0], sg.BLUES[0])),\n               sg.Button('EXIT', button_color=(sg.YELLOWS[0], sg.GREENS[0]))]]\n\n    window = sg.Window('Chat Window', layout, default_element_size=(30, 2))\n\n    # ---===--- Loop taking in user input and using it to query HowDoI web oracle --- #\n    while True:\n        event, value = window.read()\n        if event == 'SEND':\n            print(value)\n        else:\n            break\n    window.close()\nChatBot()\n```\n\n## Column Element & Frame, Tab \"Container\" Elements\n\nColumns and Frames and Tabs are all \"Container Elements\" and behave similarly.  This section focuses on Columns but can be applied elsewhere.\n\nStarting in version 2.9 you'll be able to do more complex layouts by using the Column Element.  Think of a Column as a window within a window.  And, yes, you can have a Column within a Column if you want.\n\nColumns are specified, like all \"container elements\", in exactly the same way as a window, as a list of lists.\n\nColumns are needed when you want to specify more than 1 element in a single row.  \n\nFor example, this layout has a single slider element that spans several rows followed by 7 `Text` and `Input` elements on the same row.\n\n![column](https://user-images.githubusercontent.com/13696193/44959988-66b92480-aec5-11e8-9c26-316ed24a68c0.jpg)\n\nWithout a Column Element you can't create a layout like this.  But with it, you should be able to closely match any layout created using tkinter only.\n\n```python\n\nimport PySimpleGUI as sg\n\n# Demo of how columns work\n# window has on row 1 a vertical slider followed by a COLUMN with 7 rows\n# Prior to the Column element, this layout was not possible\n# Columns layouts look identical to window layouts, they are a list of lists of elements.\n\nwindow = sg.Window('Columns')                                   # blank window\n\n# Column layout\ncol = [[sg.Text('col Row 1')],\n       [sg.Text('col Row 2'), sg.Input('col input 1')],\n       [sg.Text('col Row 3'), sg.Input('col input 2')],\n       [sg.Text('col Row 4'), sg.Input('col input 3')],\n       [sg.Text('col Row 5'), sg.Input('col input 4')],\n       [sg.Text('col Row 6'), sg.Input('col input 5')],\n       [sg.Text('col Row 7'), sg.Input('col input 6')]]\n\nlayout = [[sg.Slider(range=(1,100), default_value=10, orientation='v', size=(8,20)), sg.Column(col)],\n          [sg.In('Last input')],\n          [sg.OK()]]\n\n# Display the window and get values\n\nwindow = sg.Window('Compact 1-line window with column', layout)\nevent, values = window.read()\nwindow.Close()\n\nsg.Popup(event, values, line_width=200)\n\n```\n\n### Column, Frame, Tab, Window element_justification\n\nBeginning in Release 4.3 you can set the justification for any container element.  This is done through the `element_justification` parameter.  This will greatly help anyone that wants to center all of their content in a window.  Previously it was difficult to do these kinds of layouts, if not impossible.\n\njustify the `Column` element's row by setting the `Column`'s `justification` parameter.\n\nYou can also justify the entire contents within a `Column` by using the Column's `element_justification` parameter.\n\nWith these parameter's it is possible to create windows that have their contents centered.  Previously this was very difficult to do.\n\nThis is currently only available in the primary PySimpleGUI port.\n\nThey can also be used to justify a group of elements in a particular way.\n\nPlacing `Column` elements inside `Columns` elements make it possible to create a multitude of \n\n## Sizer Element\n\nNew in 4.3 is the `Sizer` Element.  This element is used to help create a container of a particular size.  It can be placed inside of these PySimpleGUI items:\n\n* Column\n* Frame\n* Tab\n* Window\n\nThe implementation of a `Sizer` is quite simple.  It returns an empty `Column` element that has a pad value set to the values passed into the `Sizer`.  Thus isn't not a class but rather a \"Shortcut function\" similar to the pre-defined Buttons.\n\nThis feature is only available in the tkinter port of PySimpleGUI at the moment.  A cross port is needed.\n\n----\n\n## Frame Element (Labelled Frames, Frames with a title)\n\nFrames work exactly the same way as Columns.  You create layout that is then used to initialize the Frame.  Like a Column element, it's a \"Container Element\" that holds one or more elements inside.\n\n![frame element](https://user-images.githubusercontent.com/13696193/45889173-c2245700-bd8d-11e8-8f73-1e5f1be3ddb1.jpg)\n\nNotice how the Frame layout looks identical to a window layout. A window works exactly the same way as a Column and a Frame.  They all are \"container elements\" - elements that contain other elements.\n\n*These container Elements can be nested as deep as you want.* That's a pretty spiffy feature, right?  Took a lot of work so be appreciative.  Recursive code isn't trivial.\n\nThis code creates a window with a Frame and 2 buttons.\n\n```python\nframe_layout = [\n                  [sg.T('Text inside of a frame')],\n                  [sg.CB('Check 1'), sg.CB('Check 2')],\n               ]\nlayout = [\n          [sg.Frame('My Frame Title', frame_layout, font='Any 12', title_color='blue')],\n          [sg.Submit(), sg.Cancel()]\n         ]\n\nwindow = sg.Window('Frame with buttons', layout, font=(\"Helvetica\", 12))\n```\n\n## Canvas Element\n\nIn my opinion, the tkinter Canvas Widget is the most powerful of the tkinter widget.  While I try my best to completely isolate the user from anything that is tkinter related, the Canvas Element is the one exception.  It enables integration with a number of other packages, often with spectacular results.\n\nHowever, there's another way to get that power and that's through the Graph Element, an even MORE powerful Element as it uses a Canvas that you can directly access if needed.  The Graph Element has a large number of drawing methods that the Canvas Element does not have.  Plus, if you need to, you can access the Graph Element's \"Canvas\" through a member variable.\n\n### Matplotlib, Pyplot Integration\n\n**NOTE - The newest version of Matplotlib (3.1.0) no longer works with this technique. ** You must install 3.0.3 in order to use the Demo Matplotlib programs provided in the Demo Programs section.\n\nOne such integration is with Matploplib and Pyplot.  There is a Demo program written that you can use as a design pattern to get an understanding of how to use the Canvas Widget once you get it.\n\n    def Canvas(canvas - a tkinter canvasf if you created one. Normally not set\n             background_color - canvas color\n             size - size in pixels\n             pad - element padding for packing\n             key - key used to lookup element\n             tooltip - tooltip text)\n\nThe order of operations to obtain a tkinter Canvas Widget is:\n```python\n\n    figure_x, figure_y, figure_w, figure_h = fig.bbox.bounds\n    # define the window layout\n    layout = [[sg.Text('Plot test')],\n              [sg.Canvas(size=(figure_w, figure_h), key='canvas')],\n              [sg.OK(pad=((figure_w / 2, 0), 3), size=(4, 2))]]\n\n    # create the window and show it without the plot\n    window = sg.Window('Demo Application - Embedding Matplotlib In PySimpleGUI', layout).Finalize()\n\n    # add the plot to the window\n    fig_photo = draw_figure(window.FindElement('canvas').TKCanvas, fig)\n\n    # show it all again and get buttons\n    event, values = window.read()\n```\n\nTo get a tkinter Canvas Widget from PySimpleGUI, follow these steps:\n* Add Canvas Element to your window\n* Layout your window\n* Call `window.Finalize()` - this is a critical step you must not forget\n* Find the Canvas Element by looking up using key\n* Your Canvas Widget Object will be the found_element.TKCanvas\n* Draw on your canvas to your heart's content\n* Call `window.read()` - Nothing will appear on your canvas until you call Read\n\nSee `Demo_Matplotlib.py` for a Recipe you can copy.\n\n### Methods & Properties\n\nTKCanvas - not a method but a property. Returns the tkinter Canvas Widget\n\n## Graph Element\n\nAll you math fans will enjoy this Element... and all you non-math fans will enjoy it even more.\n\nI've found nothing to be less fun than dealing with a graphic's coordinate system from a GUI Framework.  It's always upside down from what I want.  (0,0) is in the upper left hand corner.... sometimes... or was it in the lower left?  In short, it's a **pain in the ass**.\n\nHow about the ability to get your own location of (0,0) and then using those coordinates instead of what tkinter provides?  This results in a very powerful capability - working in your own units, and then displaying them in an area defined in pixels.\n\nIf you've ever been frustrated with where (0,0) is located on some surface you draw on, then fear not, your frustration ends right here.  You get to draw using whatever coordinate system you want.  Place (0,0) anywhere you want, including not anywhere on your Graph.  You could define a Graph that's all negative numbers between -2.1 and -3.5 in the X axis and -3 to -8.2 in the Y axis\n\nThere are 3 values you'll need to supply the Graph Element.  They are:\n\n- Size of the canvas in pixels\n- The lower left (x,y) coordinate of your coordinate system\n- The upper right (x,y) coordinate of your coordinate system\n\nAfter you supply those values you can scribble all of over your graph by creating Graph Figures.  Graph Figures are created, and a Figure ID is obtained by calling:\n\n- DrawCircle\n- DrawLine\n- DrawPoint\n- DrawRectangle\n- DrawOval\n- DrawImage\n\nYou can move your figures around on the canvas by supplying the Figure ID the **x,y delta** to move.  It does not move to an absolute position, but rather an offset from where the figure is now.  (Use Relocate to move to a specific location)\n\n    graph.MoveFigure(my_circle, 10, 10)\n\nYou'll also use this ID to delete individual figures you've drawn:\n```python\ngraph.DeleteFigure(my_circle)\n```\n\n### Mouse Events Inside Graph Elements\n\nIf you have eneabled events for your Graph Element, then you can receive mouse click events.  If you additionally enable `drag_submits` in  your creation of the Graph Element, then you will also get events when you \"DRAG\" inside of a window.  A \"Drag\" is defined as a left button down and then the mouse is moved.  \n\nWhen a drag event happens, the event will be the Graph Element's key.  The `value` returned in the values dictionary is a tuple of the (x,y) location of the mouse currently.\n\nThis means you'll get a \"stream\" of events.  If the mouse moves, you'll get at LEAST 1 and likely a lot more than 1 event.\n\n### Mouse Up Event for Drags\n\nWhen you've got `drag_submits` enabled, there's a sticky situation that arises.... what happens when you're done dragging and you've let go of the mouse button?  How is the \"Mouse Up\" event relayed back to your code.\n\nThe \"Mouse Up\" will generate an event to you with the value:  `Graph_key` + `'+UP'`.  Thus, if your Graph Element has a key of `'_GRAPH_'`, then the event you will receive when the mouse button is released is:   `'_GRAPH_+UP'`\n\nYea, it's a little weird, but it works.  It's SIMPLE too.  I recommend using the `.startswith` and `.endswith` built-ins when dealing with these kinds of string values.\n\nHere is an example of the `events` and the `values dictionary` that was generated by clicking and dragging inside of a Graph Element with the key == 'graph':\n\n```\ngraph {'graph': (159, 256)}\ngraph {'graph': (157, 256)}\ngraph {'graph': (157, 256)}\ngraph {'graph': (157, 254)}\ngraph {'graph': (157, 254)}\ngraph {'graph': (154, 254)}\ngraph {'graph': (154, 254)}\ngraph+UP {'graph': (154, 254)}\n```\n\n## Table Element\n\nTable and Tree Elements are of the most complex in PySimpleGUI.  They have a lot of options and a lot of unusual characteristics.\n\n### `window.read()` return values from Table Element\n\nThe values returned from a `Window.Read` call for the Table Element are a list of row numbers that are currently highlighted.\n\n### The Qt `Table.Get()` call\n\nNew in **PySimpleGUIQt** is the addition of the `Table` method `Get`.  This method returns the table that is currently being shown in the GUI.  This method was required in order to obtain any edits the user may have made to the table.\n\nFor the tkinter port, it will return the same values that was passed in when the table was created because tkinter Tables cannot be modified by the user (please file an Issue if you know a way).\n\n### Known `Table` visualization problem....\n\nThere has been an elusive problem where clicking on or near the table's header caused tkinter to go crazy and resize the columns continuously as you moved the mouse.\n\nThis problem has existed since the first release of the `Table` element.  It was fixed in release 4.3.\n\n### Known table colors in Python 3.7.3, 3.7.4, 3.8, ?\n\nThe tkinter that's been released in the past several releases of Python has a bug.  Table colors of all types are not working, at all.  The background of the rows never change.  If that's important to you, you'll need to **downgrade** your Python version.  3.6 works really well with PySimpleGUI and tkinter.\n\n### Empty Tables\n\nIf you wish to start your table as being an empty one, you will need to specify an empty table.  This list comprehension will create an empty table with 15 rows and 6 columns.\n\n```python\ndata = [['' for row in range(15)]for col in range(6)]\n```\n\n### Events from Tables\n\nThere are two ways to get events generated from Table Element.  \n`change_submits` event generated as soon as a row is clicked on\n`bind_return_key` event generate when a row is double clicked or the return key is press while on a row.\n\n## Tree Element\n\nThe Tree Element and Table Element are close cousins.   Many of the parameters found in the Table Element apply to Tree Elements.  In particular the heading information, column widths, etc.\n\nUnlike Tables there is no standard format for trees.  Thus the data structure passed to the Tree Element must be constructed.  This is done using the TreeData class.  The process is as follows:\n\n- Get a TreeData Object\n- \"Insert\" data into the tree\n- Pass the filled in TreeData object to Tree Element\n\n#### TreeData format\n```python\ndef TreeData()\ndef Insert(self, parent, key, text, values, icon=None)\n```\n\nTo \"insert\" data into the tree the TreeData method Insert is called.\n\n```python\nInsert(parent_key, key, display_text, values)\n```\n\nTo indicate insertion at the head of the tree, use a parent key of \"\".  So, every top-level node in the tree will have a parent node = \"\"\n\nThis code creates a TreeData object and populates with 3 values\n```python\ntreedata = sg.TreeData()\n\ntreedata.Insert(\"\", '_A_', 'A', [1,2,3])\ntreedata.Insert(\"\", '_B_', 'B', [4,5,6])\ntreedata.Insert(\"_A_\", '_A1_', 'A1', ['can','be','anything'])\n```\n\nNote that you ***can*** use the same values for display_text and keys.  The only thing you have to watch for is that you cannot repeat keys.\n\nWhen Reading a window the Table Element will return a list of rows that are selected by the user.  The list will be empty is no rows are selected.\n\n#### Icons on Tree Entries\n\nIf you wish to show an icon next to a tree item, then you specify the icon in the call to `Insert`.  You pass in a filename or a Base64 bytes string using the optional `icon` parameter.\n\nHere is the result of showing an icon with a tree entry.\n\n![image](https://user-images.githubusercontent.com/13696193/51087270-2b561e80-171f-11e9-8260-6142ea9b1137.png)\n\n## Tab and Tab Group Elements\n\nTabs are another of PySimpleGUI \"Container Elements\".  It is capable of \"containing\" a layout just as a window contains a layout.  Other container elements include the `Column` and `Frame` elements.\n\nJust like windows and the other container elements, the `Tab` Element has a layout consisting of any desired combination of Elements in any desired layouts.  You can have Tabs inside of Tabs inside of Columns inside of Windows, etc.\n\n`Tab` layouts look exactly like Window layouts, that is they are **a list of lists of Elements**.\n\n*How you place a Tab element into a window is different than all other elements.*  You cannot place a Tab directly into a Window's layout.  \n\nAlso, tabs cannot be made invisible at this time.  They have a visibily parameter but calling update will not change it.\n\nTabs are contained in TabGroups.  They are **not** placed into other layouts.  To get a Tab into your window, first place the `Tab` Element into a `TabGroup` Element and then place the `TabGroup` Element into the Window layout.\n\nLet's look at this Window as an example:\n\n![tabbed 1](https://user-images.githubusercontent.com/13696193/45992808-b10f6a80-c059-11e8-9746-ac71afd4d3d6.jpg)\n\nView of second tab:\n\n![tabbed 2](https://user-images.githubusercontent.com/13696193/45992809-b10f6a80-c059-11e8-94e6-3bf543c9b0bd.jpg)\n\n```python\ntab1_layout =  [[sg.T('This is inside tab 1')]]\n\ntab2_layout = [[sg.T('This is inside tab 2')],\n               [sg.In(key='in')]]\n\n```\nThe layout for the entire window looks like this:\n\n```python\nlayout = [[sg.TabGroup([[sg.Tab('Tab 1', tab1_layout), sg.Tab('Tab 2', tab2_layout)]])],\n              [sg.Button('Read')]]\n```\n\nThe Window layout has the TabGroup and within the tab Group are the two Tab elements.\n\nOne important thing to notice about all of these container Elements and Windows layouts... they all take a \"list of lists\" as the layout.  They all have a layout that looks like this `[[   ]]`\n\nYou will want to keep this `[[ ]]` construct in your head a you're debugging your tabbed windows.  It's easy to overlook one or two necessary ['s\n\nAs mentioned earlier, the old-style Tabs were limited to being at the Window-level only.  In other words, the tabs were equal in size to the entire window.  This is not the case with the \"new-style\" tabs.  This is why you're not going to be upset when you discover your old code no longer works with the new PySimpleGUI release.  It'll be worth the few moments it'll take to convert your code.\n\nCheck out what's possible with the NEW Tabs!\n\n![tabs tabs tabs](https://user-images.githubusercontent.com/13696193/45993438-fd0fde80-c05c-11e8-9ed0-742f14d3070f.jpg)\n\nCheck out Tabs 7 and 8.  We've got a Window with a Column containing Tabs 5 and 6.  On Tab 6 are... Tabs 7 and 8.\n\nAs of Release 3.8.0, not all of *options* shown in the API definitions of the Tab and TabGroup Elements are working. They are there as placeholders.\n\nFirst we have the Tab layout definitions. They mirror what you see in the screen shots.  Tab 1 has 1 Text Element in it.  Tab 2 has a Text and an Input Element.\n\n### Reading Tab Groups\n\nTab Groups now return a value when a Read returns.  They return which tab is currently selected.  There is also a `enable_events` parameter that can be set that causes a Read to return if a Tab in that group is selected / changed.  The key or title belonging to the Tab that was switched to will be returned as the value\n\nx## Pane Element\n\nNew in version 3.20 is the Pane Element, a super-cool tkinter feature.  You won't find this one in PySimpleGUIQt, only PySimpleGUI.   It's difficult to describe one of these things.  Think of them as \"Tabs without labels\" that you can slide.\n\n![pane3](https://user-images.githubusercontent.com/13696193/50035040-fcd50e80-ffcd-11e8-939c-df8ab8d64712.gif)\n\n***Each \"Pane\" of a Pane Element must be a Column Element***.  The parameter `pane_list` is a list of Column Elements.\n\nCalls can get a little hairy looking if you try to declare everything in-line as you can see in this example.\n\n```python\nsg.Pane([col5, sg.Column([[sg.Pane([col1, col2, col4], handle_size=15, orientation='v',  background_color=None, show_handle=True, visible=True, key='_PANE_', border_width=0,  relief=sg.RELIEF_GROOVE),]]),col3 ], orientation='h', background_color=None, size=(160,160), relief=sg.RELIEF_RAISED, border_width=0)\n```\n\nCombing these with *visibility* make for an interesting interface with entire panes being hidden from view until neded by the user.  It's one way of producing \"dynamic\" windows.\n\n## Colors\nStarting in version 2.5 you can change the background colors for the window and the Elements.\n\nYour windows can go from this:\n\n![snap0155](https://user-images.githubusercontent.com/13696193/43273879-a9fdc10a-90cb-11e8-8c20-4f6a244ebe2f.jpg)\n\nto this... with one function call...\n\n![snap0156](https://user-images.githubusercontent.com/13696193/43273880-aa1955e6-90cb-11e8-94b6-673ecdb2698c.jpg)\n\nWhile you can do it on an element by element or window level basis, the easier way is to use either the `theme` calls or `set_options`.  These calls will set colors for all window that are created.\n\nBe aware that once you change these options they are changed for the rest of your program's execution.  All of your windows will have that Theme, until you change it to something else.\n\nThis call sets a number of the different color options.\n\n```python\nSetOptions(background_color='#9FB8AD',\n       text_element_background_color='#9FB8AD',\n       element_background_color='#9FB8AD',\n       scrollbar_color=None,\n       input_elements_background_color='#F7F3EC',\n       progress_meter_color = ('green', 'blue')\n       button_color=('white','#475841'))\n```\n\n# SystemTray\n\nThis is a PySimpleGUIQt and PySimpleGUIWx only feature.  Don't know of a way to do it using tkinter.  Your source code for SystemTray is identical for the Qt and Wx implementations.  You can switch frameworks by simply changing your import statement.\n\nIn addition to running normal windows, it's now also possible to have an icon down in the system tray that you can read to get menu events.  There is a new SystemTray object that is used much like a Window object.  You first get one, then  you perform Reads in order to get events.\n\nHere is the definition of the SystemTray object.\n\n```python\nSystemTray(menu=None, filename=None, data=None, data_base64=None, tooltip=None):\n        '''\n SystemTray - create an icon in the system tray\n :param menu: Menu definition\n :param filename: filename for icon\n :param data: in-ram image for icon\n :param data_base64: basee-64 data for icon\n :param tooltip: tooltip string '''\n```\n\nYou'll notice that there are 3 different ways to specify the icon image.  The base-64 parameter allows you to define a variable in your .py code that is the encoded image so that you do not need any additional files.  Very handy feature.\n\n## System Tray Design Pattern\n\nHere is a design pattern you can use to get a jump-start.\n\nThis program will create a system tray icon and perform a blocking Read.  If the item \"Open\" is chosen from the system tray, then a popup is shown.\n\n```python\nimport PySimpleGUIQt as sg\n\nmenu_def = ['BLANK', ['&Open', '---', '&Save', ['1', '2', ['a', 'b']], '&Properties', 'E&xit']]\n\ntray = sg.SystemTray(menu=menu_def, filename=r'default_icon.ico')\n\nwhile True:  # The event loop\n  menu_item = tray.Read()\n    print(menu_item)\n    if menu_item == 'Exit':\n        break\n    elif menu_item == 'Open':\n        sg.Popup('Menu item chosen', menu_item)\n\n```\nThe design pattern creates an icon that will display this menu:\n![snag-0293](https://user-images.githubusercontent.com/13696193/49057441-8bbfe980-f1cd-11e8-93e7-1aeda9ccd173.jpg)\n\n### Icons\n\nWhen specifying \"icons\", you can use 3 different formats.\n* `filename`- filename\n* `data_base64` - base64 byte string\n* '`data` - in-ram bitmap or other \"raw\" image\n\nYou will find 3 parameters used to specify these 3 options on both the initialize statement and on the Update method.\n\n## Menu Definition\n```python\nmenu_def = ['BLANK', ['&Open', '&Save', ['1', '2', ['a', 'b']], '!&Properties', 'E&xit']]\n```\n\nA menu is defined using a list.  A \"Menu entry\" is a string that specifies:\n* text shown\n* keyboard shortcut\n* key\n\nSee section on Menu Keys for more information on using keys with menus.\n\nAn entry without a key and keyboard shortcut is a simple string\n`'Menu Item'`\n\nIf you want to make the \"M\" be a keyboard shortcut, place an `&` in front of the letter that is the shortcut.\n`'&Menu Item'`\n\nYou can add \"keys\" to make menu items unique or as another way of identifying a menu item than the text shown.  The key is added to the text portion by placing `::` after the text.\n\n`'Menu Item::key'`\n\nThe first entry can be ignored.`'BLANK`' was chosen for this example. It's this way because normally you would specify these menus under some heading on a menu-bar.  But here there is no heading so it's filled in with any value you want.\n\n**Separators**\nIf you want a separator between 2 items, add the entry `'---'` and it will add a separator item at that place in your menu.\n\n**Disabled menu entries**\n\nIf you want to disable a menu entry, place a `!` before the menu entry\n\n## SystemTray Methods\n\n### Read - Read the context menu or check for events\n\n```python\ndef Read(timeout=None)\n    '''\n Reads the context menu\n :param timeout: Optional.  Any value other than None indicates a non-blocking read\n :return:   String representing meny item chosen. None if nothing read.\n    '''\n```\nThe `timeout` parameter specifies how long to wait for an event to take place.  If nothing happens within the timeout period, then a \"timeout event\" is returned.  These types of reads make it possible to run asynchronously.  To run non-blocked, specify `timeout=0`on the Read call.\n\nRead returns the menu text, complete with key, for the menu item chosen.  If you specified `Open::key` as the menu entry, and the user clicked on `Open`, then you will receive the string `Open::key` upon completion of the Read.\n\n#### Read special return values\n\nIn addition to Menu Items, the Read call can return several special values.    They include:\n\nEVENT_SYSTEM_TRAY_ICON_DOUBLE_CLICKED - Tray icon was double clicked\nEVENT_SYSTEM_TRAY_ICON_ACTIVATED - Tray icon was single clicked\nEVENT_SYSTEM_TRAY_MESSAGE_CLICKED - a message balloon was clicked\nTIMEOUT_KEY is returned if no events are available if the timeout value is set in the Read call\n\n### Hide\n\nHides the icon.  Note that no message balloons are shown while an icon is hidden.\n\n```python\ndef Hide()\n```\n\n### Close\n\nDoes the same thing as hide\n```python\ndef Close()\n```\n\n### UnHide\n\nShows a previously hidden icon\n\n```python\ndef UnHide()\n```\n\n### ShowMessage\n\nShows a balloon above the icon in the system tray area.  You can specify your own icon to be shown in the balloon, or you can set `messageicon` to one of the preset values.\n\nThis message has a custom icon.\n\n![snag-0286](https://user-images.githubusercontent.com/13696193/49057459-a85c2180-f1cd-11e8-9a66-aa331d7e034c.jpg)\n\nThe preset `messageicon` values are:\n\n    SYSTEM_TRAY_MESSAGE_ICON_INFORMATION\n    SYSTEM_TRAY_MESSAGE_ICON_WARNING\n    SYSTEM_TRAY_MESSAGE_ICON_CRITICAL\n    SYSTEM_TRAY_MESSAGE_ICON_NOICON\n\n```python\nShowMessage(title, message, filename=None, data=None, data_base64=None, messageicon=None, time=10000):\n'''\n Shows a balloon above icon in system tray\n :param title:  Title shown in balloon\n :param message: Message to be displayed\n :param filename: Optional icon filename\n :param data: Optional in-ram icon\n :param data_base64: Optional base64 icon\n :param time: How long to display message in milliseconds  :return:\n '''\n```\nNote, on windows it may be necessary to make a registry change to enable message balloons to be seen.  To fix this, you must create the DWORD you see in this screenshot.\n\n![snag-0285](https://user-images.githubusercontent.com/13696193/49056144-6381bc00-f1c8-11e8-9f44-199394823369.jpg)\n\n### Update\n\nYou can update any of these items within a SystemTray object\n* Menu definition\n* Icon\n* Tooltip\n\n Change them all or just 1.\n\n# Global Settings\n\nThere are multiple ways to customize PySimpleGUI.  The call with the most granularity (allows access to specific and precise settings).  The `ChangeLookAndFeel` call is in reality a single call to `SetOptions` where it changes 13 different settings.  \n\n**Mac Users** - You can't call `ChangeLookAndFeel` but you can call `SetOptions` with any sets of values you want.  Nothing is being blocked or filtered.\n\n**These settings apply to all windows that are created in the future.**\n\n `SetOptions`.  The  options and Element options will take precedence over these settings.  Settings can be thought of as levels of settings with the window-level being the highest and the Element-level the lowest.  Thus the levels are:\n\n - Global\n - Window\n - Element\n\nEach lower level overrides the settings of the higher level.  Once settings have been changed, they remain changed for the duration of the program (unless changed again).\n\n# Persistent windows (Window stays open after button click)\n\nApologies that the next few pages are perhaps confusing.  There have been a number of changes recently in PySimpleGUI's Read calls that added some really cool stuff, but at the expense of being not so simple.  Part of the issue is an attempt to make sure existing code doesn't break.  These changes are all in the area of non-blocking reads and reads with timeouts.\n\nThere are 2 ways to keep a window open after the user has clicked a button.  One way is to use non-blocking windows (see the next section).  The other way is to use buttons that 'read' the window instead of 'close' the window when clicked.  The typical buttons you find in windows, including the shortcut buttons, close the window.  These include OK, Cancel, Submit, etc.  The Button Element also closes the window.\n\nThe `RButton` Element creates a button that when clicked will return control to the user, but will leave the window open and visible.  This button is also used in Non-Blocking windows.  The difference is in which call is made to read the window.  The normal `Read` call with no parameters will block, a call with a `timeout` value of zero will not block.\n\nNote that `InputText` and `MultiLine` Elements will be **cleared**   when performing a `Read`.  If you do not want your input field to be cleared after a `Read` then you can set the `do_not_clear` parameter to True when creating those elements. The clear is turned on and off on an element by element basis.\n\nThe reasoning behind this is that Persistent Windows are often \"forms\".  When \"submitting\" a form you want to have all of the fields left blank so the next entry of data will start with a fresh window.  Also, when implementing a \"Chat Window\" type of interface, after each read / send of the chat data, you want the input field cleared.  Think of it as a Texting application.  Would you want to have to clear your previous text if you want to send a second text?\n\nThe design pattern for Persistent Windows was already shown to you earlier in the document... here it is for your convenience.\n\n```python\nimport PySimpleGUI as sg\n\nlayout = [[sg.Text('Persistent window')],\n          [sg.Input()],\n          [sg.Button('Read'), sg.Exit()]]\n\nwindow = sg.Window('Window that stays open', layout)\n\nwhile True:\n    event, values = window.read()\n    if event is None or event == 'Exit':\n        break\n    print(event, values)\n\nwindow.Close()\n```\n\n## Read(timeout = t, timeout_key=TIMEOUT_KEY)\n\nRead with a timeout is a very good thing for your GUIs to use in a read non-blocking situation, you can use them.  If your device can wait for a little while, then use this kind of read.  The longer you're able to add to the timeout value, the less CPU time you'll be taking.\n\nOne way of thinking of reads with timeouts:\n> During the timeout time, you are \"yielding\" the processor to do other tasks.\n\nBut it gets better than just being a good citizen....**your GUI will be more responsive than if you used a non-blocking read**\n\nLet's say you had a device that you want to \"poll\" every 100ms.   The \"easy way out\" and the only way out until recently was this:\n\n```python\n# YOU SHOULD NOT DO THIS....\nwhile True:             # Event Loop\n    event, values = window.ReadNonBlocking()   # DO NOT USE THIS CALL ANYMORE\n    read_my_hardware() # process my device here\n    time.sleep(.1)     # sleep 1/10 second\n```\n\nThis program will quickly test for user input, then deal with the hardware.  Then it'll sleep for 100ms, while your gui is non-responsive, then it'll check in with your GUI again.  I fully realize this is a crude way of doing things.  We're talking dirt simple stuff without trying to use threads, etc to 'get it right'.  It's for demonstration purposes.\n\nThe new and better way....\nusing the Read Timeout mechanism, the sleep goes away.\n\n```python\n# This is the right way to poll for hardware\nwhile True:             # Event Loop\n    event, values = window.Read(timeout = 100)\n    read_my_hardware() # process my device here\n```\n\nThis event loop will run every 100 ms.  You're making a Read call, so anything that the use does will return back to you immediately, and you're waiting up to 100ms for the user to do something.  If the user doesn't do anything, then the read will timeout and execution will return to the program.\n\n## Non-Blocking Windows   (Asynchronous reads, timeouts)\n\nYou can easily spot a non-blocking call in PySimpleGUI.  If you see a call to `Window.Read()` with a timeout parameter set to a value other than `None`, then it is a non-blocking call.\n\nThis call to read is asynchronous as it has a timeout value:\n\n```\nThe new way\n```python\nevent, values = sg.Read(timeout=20)\n```\nYou should use the new way if you're reading this for the first time.\n\nThe difference in the 2 calls is in the value of event.  For ReadNonBlocking, event will be `None` if there are no other events to report.  There is a \"problem\" with this however.  With normal Read calls, an event value of None signified the window was closed.  For ReadNonBlocking, the way a closed window is returned is via the values variable being set to None.\n\n## sg.TIMEOUT_KEY\n\nIf you're using the new, timeout=0 method, then an event value of None signifies that the window was closed, just like a normal Read.  That leaves the question of what it is set to when not other events are happening.  This value will be the value of `timeout_key`.  If you did not specify a timeout_key value in your call to read, then it will be set to a default value of:\n`TIMEOUT_KEY = __timeout__`\n\nIf you wanted to test for \"no event\" in your loop, it would be written like this:\n```python\nwhile True:\n    event, value = window.Read(timeout=0)\n    if event is None:\n        break # the use has closed the window\n    if event == sg.TIMEOUT_KEY:\n        print(\"Nothing happened\")\n```\n\nUse async windows sparingly.  It's possible to have a window that appears to be async, but it is not.  **Please** try to find other methods before going to async windows.  The reason for this plea is that async windows poll tkinter over and over.  If you do not have a timeout in your Read and you've got nothing else your program will block on, then you will eat up 100% of the CPU time. It's important to be a good citizen.   Don't chew up CPU cycles needlessly.  Sometimes your mouse wants to move ya know?\n\nNon-blocking (timeout=0) is generally reserved as a \"last resort\".  Too many times people use non-blocking reads when a blocking read will do just fine.\n\n### Small Timeout Values (under 10ms)\n\n***Do Not*** use a timeout of less than 10ms.  Otherwise you will simply thrash, spending your time trying to do some GUI stuff, only to be interruped by a timeout timer before it can get anything done.  The results are potentially disasterous.\n\nThere is a hybrid approach... a read with a timeout.   You'll score much higher points on the impressive meter if you're able to use a lot less CPU time by using this type of read.\n\nThe most legit time to use a non-blocking window is when you're working directly with hardware.  Maybe you're driving a serial bus.  If you look at the Event Loop in the Demo_OpenCV_Webcam.py program, you'll see that the read is a non-blocking read.  However, there is a place in the event loop where blocking occurs.   The point in the loop where you will block is the call to read frames from the webcam.  When a frame is available you want to quickly deliver it to the output device, so you don't want your GUI blocking.  You want the read from the hardware to block.\n\nAnother example can be found in the demo for controlling a robot on a Raspberry Pi.  In that application you want to read the direction buttons, forward, backward, etc, and immediately take action.  If you are using RealtimeButtons, your only option at the moment is to use non-blocking windows.  You have to set the timeout to zero if you want the buttons to be real-time responsive.\n\nHowever, with these buttons, adding a sleep to your event loop will at least give other processes time to execute.  It will, however, starve your GUI. The entire time you're sleeping, your GUI isn't executing.\n\n### Periodically Calling`Read`\n\nLet's say you do end up using non-blocking reads... then you've got some housekeeping to do.  It's up to you to periodically \"refresh\" the visible GUI.  The longer you wait between updates to your GUI the more sluggish your windows will feel.  It is up to you to make these calls or your GUI will freeze.\n\nThere are 2 methods of interacting with non-blocking windows.\n1. Read the window just as you would a normal window\n2. \"Refresh\" the window's values without reading the window. It's a quick operation meant to show the user the latest values\n\n With asynchronous windows the window is shown, user input is read, but your code keeps right on chugging.  YOUR responsibility is to call `PySimpleGUI.Read` on a periodic basis.  Several times a second or more will produce a reasonably snappy GUI.\n\n ## Exiting (Closing) a Persistent Window\n\nIf your window has a button that closes the window, then PySimpleGUI will automatically close the window for you.  If all of your buttons are ReadButtons, then it'll be up to you to close the window when done.\nTo close a window, call the `Close` method.\n```python\nwindow.Close()\n```\n\n## Persistent Window Example - Running timer that updates\n\nSee the sample code on the GitHub named Demo Media Player for another example of Async windows.  We're going to make a window and update one of the elements of that window every .01 seconds.    Here's the entire code to do that.\n\n```python\nimport PySimpleGUI as sg\nimport time\n\n# ----------------  Create Form  ----------------\nsg.ChangeLookAndFeel('Black')\nsg.SetOptions(element_padding=(0, 0))\n\nlayout = [[sg.Text('')],\n         [sg.Text(size=(8, 2), font=('Helvetica', 20), justification='center', key='text')],\n         [sg.ReadButton('Pause', key='button', button_color=('white', '#001480')),\n          sg.ReadButton('Reset', button_color=('white', '#007339'), key='Reset'),\n          sg.Exit(button_color=('white', 'firebrick4'), key='Exit')]]\n\nwindow = sg.Window('Running Timer', layout, no_titlebar=True, auto_size_buttons=False, keep_on_top=True, grab_anywhere=True)\n\n# ----------------  main loop  ----------------\ncurrent_time = 0\npaused = False\nstart_time = int(round(time.time() * 100))\nwhile (True):\n    # --------- Read and update window --------\n    event, values = window.Read(timeout=10)\n    current_time = int(round(time.time() * 100)) - start_time\n    # --------- Display timer in window --------\n    window.FindElement('text').Update('{:02d}:{:02d}.{:02d}'.format((current_time // 100) // 60,\n                                                                  (current_time // 100) % 60,\n                                                                  current_time % 100))\n```\n\nPreviously this program was implemented using a sleep in the loop to control the clock tick.  This version uses the new timeout parameter.  The result is a window that reacts quicker then the one with the sleep and the accuracy is just as good.\n\n## Instead of a Non-blocking Read --- Use `enable_events = True` or `return_keyboard_events = True`\n\nAny time you are thinking \"I want an X Element to cause a Y Element to do something\", then you want to use the `enable_events` option.\n\n***Instead of polling, try options that cause the window to return to you.***  By using non-blocking windows, you are *polling*.  You can indeed create your application by polling.  It will work.  But you're going to be maxing out your processor and may even take longer to react to an event than if you used another technique.\n\n**Examples**\n\nOne example is you have an input field that changes as you press buttons on an on-screen keypad.\n\n![keypad 3](https://user-images.githubusercontent.com/13696193/45260275-a2198e80-b3b0-11e8-85fe-a4ce6484510f.jpg)\n\n# Updating Elements (changing element's values in an active window)\n\nIf you want to change an Element's settings in your window after the window has been created, then you will call the Element's Update method.\n\n**NOTE** a window **must be Read or Finalized** before any Update calls can be made.  Also, not all settings available to you when you created the Element are available to you via its `Update` method.\n\nHere is an example of updating a Text Element\n\n```python\nimport PySimpleGUI as sg\n\nlayout = [ [sg.Text('My layout', key='_TEXT_')],\n           [sg.Button('Read')]]\n\nwindow = sg.Window('My new window', layout)\n\nwhile True:             # Event Loop\n    event, values = window.read()\n    if event is None:\n        break\n    window.Element('_TEXT_').Update('My new text value')\n```\n\nNotice the placement of the Update call.  If you wanted to Update the Text Element *prior* to the Read call, outside of the event loop, then you must call Finalize on the window first.\n\nIn this example, the Update is done prior the Read.  Because of this, the Finalize call is added to the Window creation.\n```python\nimport PySimpleGUI as sg\n\nlayout = [ [sg.Text('My layout', key='_TEXT_')],\n           [sg.Button('Read')]\n         ]\n\nwindow = sg.Window('My new window', layout).Finalize()\n\nwindow.Element('_TEXT_').Update('My new text value')\n\nwhile True:             # Event Loop\n  event, values = window.read()\n    if event is None:\n        break\n```\n\nPersistent windows remain open and thus continue to interact with the user after the Read has returned.  Often the program wishes to communicate results (output information) or change an Element's values (such as populating a List Element).\n\nYou can use Update to do things like:\n* Have one Element (appear to) make a change to another Element\n* Disable a button, slider, input field, etc\n* Change a button's text\n* Change an Element's text or background color\n* Add text to a scrolling output window\n* Change the choices in a list\n* etc\n\nThe way this is done is via an Update method that is available for nearly all of the Elements.  Here is an example of a program that uses a persistent window that is updated.\n\n![snap0272](https://user-images.githubusercontent.com/13696193/45260249-ec4e4000-b3af-11e8-853b-9b29d0bf7797.jpg)\n\nIn some programs these updates happen in response to another Element.  This program takes a Spinner and a Slider's input values and uses them to resize a Text Element.  The Spinner and Slider are on the left, the Text element being changed is on the right.\n\n```python\n# Testing async window, see if can have a slider\n# that adjusts the size of text displayed\n\nimport PySimpleGUI as sg\nfontSize = 12\nlayout = [[sg.Spin([sz for sz in range(6, 172)], font=('Helvetica 20'), initial_value=fontSize, change_submits=True, key='spin'),\n           sg.Slider(range=(6,172), orientation='h', size=(10,20),\n           change_submits=True, key='slider', font=('Helvetica 20')),\n           sg.Text(\"Aa\", size=(2, 1), font=\"Helvetica \"  + str(fontSize), key='text')]]\n\nsz = fontSize\nwindow = sg.Window(\"Font size selector\", layout, grab_anywhere=False)\n# Event Loop\nwhile True:\n    event, values= window.read()\n    if event is None:\n        break\n    sz_spin = int(values['spin'])\n    sz_slider = int(values['slider'])\n    sz = sz_spin if sz_spin != fontSize else sz_slider\n    if sz != fontSize:\n        fontSize = sz\n        font = \"Helvetica \"  + str(fontSize)\n        window.FindElement('text').Update(font=font)\n        window.FindElement('slider').Update(sz)\n        window.FindElement('spin').Update(sz)\n\nprint(\"Done.\")\n```\n\nInside the event loop we read the value of the Spinner and the Slider using those Elements' keys.\nFor example, `values['slider']` is the value of the Slider Element.\n\nThis program changes all 3 elements if either the Slider or the Spinner changes.  This is done with these statements:\n\n```python\nwindow.FindElement('text').Update(font=font)\nwindow.FindElement('slider').Update(sz)\nwindow.FindElement('spin').Update(sz)\n```\n\nRemember this design pattern because you will use it OFTEN if you use persistent windows.\n\nIt works as follows.  The call to `window.FindElement` returns the Element object represented by they provided `key`.  This element is then updated by calling it's `Update` method.  This is another example of Python's \"chaining\" feature. We could write this code using the long-form:\n\n    text_element = window.FindElement('text')\n    text_element.Update(font=font)\n\nThe takeaway from this exercise is that keys are key in PySimpleGUI's design.  They are used to both read the values of the window and also to identify elements.  As already mentioned, they are used as targets in  Button calls.\n\n### Locating Elements (FindElement == Element == Elem)\n\nThe Window method call that's used to find an element is:\n`FindElement`\nor the shortened version\n`Element`\nor even shorter (version 4.1+)\n`Elem`\n\nWhen you see a call to window.FindElement or window.Element, then you know an element is being addressed.  Normally this is done so you can call the element's Update method.\n\n### ProgressBar / Progress Meters\n\nNote that to change a progress meter's progress, you call `UpdateBar`, not `Update`.\n\n# Keyboard & Mouse Capture\n\nNOTE - keyboard capture is currently formatted uniquely among the ports. For basic letters and numbers there is no great differences, but when you start adding Shift and Control or special keyus, they all behave slightly differently.  Your best bet is to simply print what is being returned to you to determine what the format for the particular port is.\n\nBeginning in version 2.10 you can capture keyboard key presses and mouse scroll-wheel events.   Keyboard keys can be used, for example, to detect the page-up and page-down keys for a PDF viewer.  To use this feature, there's a boolean setting in the Window call `return_keyboard_events` that is set to True in order to get keys returned along with buttons.\n\nKeys and scroll-wheel events are returned in exactly the same way as buttons.\n\nFor scroll-wheel events, if the mouse is scrolled up, then the `button` text will be `MouseWheel:Up`.   For downward scrolling, the text returned is `MouseWheel:Down`\n\nKeyboard keys return 2 types of key events. For \"normal\" keys (a,b,c, etc), a single character is returned that represents that key.  Modifier and special keys are returned as a string with 2 parts:\n\n    Key Sym:Key Code\n\nKey Sym is a string such as 'Control_L'.  The Key Code is a numeric representation of that key.  The left control key, when pressed will return the value 'Control_L:17'\n\n```python\nimport PySimpleGUI as sg\n\n# Recipe for getting keys, one at a time as they are released\n# If want to use the space bar, then be sure and disable the \"default focus\"\n\ntext_elem = sg.Text(size=(18, 1))\n\nlayout = [[sg.Text(\"Press a key or scroll mouse\")],\n          [text_elem],\n          [sg.Button(\"OK\")]]\n\nwindow = sg.Window(\"Keyboard Test\", layout,  return_keyboard_events=True, use_default_focus=False)\n\n# ---===--- Loop taking in user input --- #\nwhile True:\n    event, value = window.read()\n\n    if event == \"OK\" or event is None:\n        print(event, \"exiting\")\n        break\n    text_elem.Update(event)\n```\n\nYou want to turn off the default focus so that there no buttons that will be selected should you press the spacebar.\n\n# Menus\n\n## MenuBar\n\nBeginning in version 3.01 you can add a MenuBar to your window.  You specify the menus in much the same way as you do window layouts, with lists.  Menu selections are returned as events and as of 3.17, also as in the values dictionary.  The value returned will be the entire menu entry, including the key if you specified one.\n\n```python\n    menu_def = [['File', ['Open', 'Save', 'Exit',]],\n                ['Edit', ['Paste', ['Special', 'Normal',], 'Undo'],],\n                ['Help', 'About...'],]\n```\n\n![menu](https://user-images.githubusercontent.com/13696193/45306723-56b7cb00-b4eb-11e8-8cbd-faef0c90f8b4.jpg)\n\nNote the placement of ',' and of [].  It's tricky to get the nested menus correct that implement cascading menus.  See how paste has Special and Normal as a list after it.  This means that Paste has a cascading menu with items Special and Normal.\n\n## Methods\n\n---\n\nTo add a menu to a Window place the `Menu` or `MenuBar` element into your layout.\n\n    layout = [[sg.Menu(menu_def)]]\n\nIt doesn't really matter where you place the Menu Element in your layout as it will always be located at the top of the window.\n\nWhen the user selects an item, it's returns as the event (along with the menu item's key if one was specified in the menu definition)\n\n## ButtonMenus\n\nButton menus were introduced in version 3.21, having been previously released in PySimpleGUIQt.  They work exactly the same and are source code compatible between PySimpleGUI and PySimpleGUIQt.  These types of menus take a single menu entry where a Menu Bar takes a list of menu entries.\n\n**Return values for ButtonMenus are different than Menu Bars.**\n\nYou will get back the ButtonMenu's KEY as the event.  To get the actual item selected, you will look it up in the values dictionary.  This can be done with the expression `values[event]`\n\n## Right Click Menus\n\nRight Click Menus were introduced in version 3.21.  Almost every element has a right_click_menu parameter and there is a window-level setting for rich click menu that will attach a right click menu to all elements in the window.\n\nThe menu definition is the same as the button menu definition, a single menu entry.\n\n```python\nright_click_menu = ['&Right', ['Right', '!&Click', '&Menu', 'E&xit', 'Properties']]\n```\nThe first string in a right click menu and a button menu is ***ignored***.  It is not used.  Normally you would put the string that is shown on the menu bar in that location.\n\n**Return values for right click menus are the same as MenuBars.**  The value chosen is returned as the event.\n\n## Menu Shortcut keys\nYou have used ALT-key in other Windows programs to navigate menus.  For example Alt-F+X exits the program.  The Alt-F pulls down the File menu.  The X selects the entry marked Exit.\n\nThe good news is that PySimpleGUI allows you to create the same kind of menus!  Your program can play with the big-boys.  And, it's trivial to do.\n\nAll that's required is for your to add an \"&\" in front of the letter you want to appear with an underscore.  When you hold the Alt key down you will see the menu with underlines that you marked.\n\nOne other little bit of polish you can add are separators in your list.  To add a line in your list of menu choices, create a menu entry that looks like this: ` '---'`\n\nThis is an example Menu with underlines and a separator.\n\n```\n# ------ Menu Definition ------ #\nmenu_def = [['&File', ['&Open', '&Save', '---', 'Properties', 'E&xit'  ]],\n            ['&Edit', ['Paste', ['Special', 'Normal',], 'Undo'],],\n            ['&Help', '&About...'],]\n```\n  And this is the spiffy menu it produced:\n  ![menus with shortcuts](https://user-images.githubusercontent.com/13696193/46251674-f5b74f00-c427-11e8-95c6-547adc59041b.jpg)\n\n## Disabled Menu Entries\n\nIf you want one of your menu items to be disabled, then place a '!' in front of the menu entry.  To disable the Paste menu entry in the previous examples, the entry would be:\n`['!&Edit', ['Paste', ['Special', 'Normal',], 'Undo'],]`\n\nIf your want to change the disabled menu item flag / character from '!' to something else, change the variable `MENU_DISABLED_CHARACTER`\n\n## Keys for Menus\n\nBeginning in version 3.17 you can add a `key` to your menu entries.  The `key` value will be removed prior to be inserted into the menu.  When you receive Menu events, the entire menu entry, including the `key` is returned.  A key is indicated by adding `::` after a menu entry, followed by the key.\n\nTo add the `key` `_MY_KEY_` to the Special menu entry, the code would be:\n\n`['&Edit', ['Paste', ['Special::_MY_KEY_', 'Normal',], 'Undo'],]`\n\n If you want to change the characters that indicate a key follows from '::' to something else, change the variable `MENU_KEY_SEPARATOR`\n\n## The Menu Definitions\n\nHaving read through the Menu section, you may have noticed that the right click menu and the button menu have a format that is a little odd as there is a part of it that is not utilized (the first very string).  Perhaps the words \"Not Used\" should be in the examples.... But, there's a reason to retain words there that make sense.\n\nThe reason for this is an architectural one, but it also has a convienence for the user.  You can put the individual menu items (button and right click) into a list and you'll have a menu bar definition.\n\nThis would work to make a menu bar from a series of these individual menu defintions:\n\n```python\nmenu_bar = [right_click_menu_1, right_click_menu_2, button_menu_def ]\n```\n\nAnd, of course, the direction works the opposite too.  You can take a Menu Bar definition and pull out an individual menu item to create a right click or button menu. \n\n# Running Multiple Windows\n\nThis is where PySimpleGUI continues to be simple, but the problem space just went into the realm of \"Complex\".\n\nIf you wish to run multiple windows in your event loop, then there are 2 methods for doing this.\n\n1. First window does not remain active while second window is visible\n2. First window remains active while second window is visible\n\nYou will find the 2 design matters in 2 demo programs in the Demo Program area of the GitHub (http://www.PySimpleGUI.com)\n\n***Critically important***\nWhen creating a new window you must use a \"fresh\" layout every time.  You cannot reuse a layout from a previous window.  As a result you will see the layout for window 2 being defined inside of the larger event loop.\n\nIf you have a window layout that you used with a window and you've closed the window, you cannot use the specific elements that were in that window.  You must RE-CREATE your `layout` variable every time you create a new window.  Read that phrase again....  You must RE-CREATE your `layout` variable every time you create a new window.  That means you should have a statemenat that begins with `layout = `.  Sorry to be stuck on this point, but so many people seem to have trouble following this simple instruction.\n\n## THE GOLDEN RULE OF WINDOW LAYOUTS\n\n***Thou shalt not re-use a windows's layout.... ever!***\n\nOr more explicitly put....\n\n> If you are calling `Window` then you should define your window layout in the statement just prior to the `Window` call.\n\n## Demo Programs For Multiple Windows\n\nThere are several \"Demo Programs\" that will help you run multiple windows.  Please download these programs and FOLLOW the example they have created for you.\n\nHere is ***some*** of the code patterns you'll find when looking through the demo programs.\n\n## Multi-Window Design Pattern 1 - both windows active\n\n```python\nimport PySimpleGUI as sg\n\n# Design pattern 2 - First window remains active\n\nlayout = [[ sg.Text('Window 1'),],\n          [sg.Input(do_not_clear=True)],\n          [sg.Text(size=(15,1), key='_OUTPUT_')],\n          [sg.Button('Launch 2'), sg.Button('Exit')]]\n\nwin1 = sg.Window('Window 1', layout)\n\nwin2_active = False\nwhile True:\n    ev1, vals1 = win1.Read(timeout=100)\n    win1.FindElement('_OUTPUT_').Update(vals1[0])\n    if ev1 is None or ev1 == 'Exit':\n        break\n\n     if not win2_active and ev1 == 'Launch 2':\n        win2_active = True\n        layout2 = [[sg.Text('Window 2')],\n                   [sg.Button('Exit')]]\n\n        win2 = sg.Window('Window 2', layout2)\n\n    if win2_active:\n        ev2, vals2 = win2.Read(timeout=100)\n        if ev2 is None or ev2 == 'Exit':\n            win2_active  = False\n            win2.Close()\n```\n\n## Multi-Window Design Pattern 2 - only 1 active window\n\n```python\nimport PySimpleGUIQt as sg\n\n# Design pattern 1 - First window does not remain active\n\nlayout = [[ sg.Text('Window 1'),],\n          [sg.Input(do_not_clear=True)],\n          [sg.Text(size=(15,1),  key='_OUTPUT_')],\n          [sg.Button('Launch 2')]]\n\nwin1 = sg.Window('Window 1', layout)\nwin2_active=False\nwhile True:\n    ev1, vals1 = win1.Read(timeout=100)\n    if ev1 is None:\n        break\n    win1.FindElement('_OUTPUT_').Update(vals1[0])\n\n    if ev1 == 'Launch 2'  and not win2_active:\n        win2_active = True\n        win1.Hide()\n        layout2 = [[sg.Text('Window 2')],       # note must create a layout from scratch every time. No reuse\n                   [sg.Button('Exit')]]\n\n        win2 = sg.Window('Window 2', layout2)\n        while True:\n            ev2, vals2 = win2.Read()\n            if ev2 is None or ev2 == 'Exit':\n                win2.Close()\n                win2_active = False\n                win1.UnHide()\n                break\n```\n\n---\n\n# The PySimpleGUI Debugger\n\nListen up if you are\n* advanced programmers debugging some really hairy stuff\n* programmers from another era that like to debug this way\n* those that want to have \"x-ray vision\" into their code\n* asked to use debugger to gather information\n* running on a platform that lacks ANY debugger\n* debugging a problem that happens only outside of a debugger environment\n* finding yourself saying \"but it works when running PyCharm\"\n\nStarting on June 1, 2019, a built-in version of the debugger `imwatchingyou` has been shipping in every copy of PySimpleGUI.  It's been largely downplayed to gauge whether or not the added code and the added feature and the use of a couple of keys, would mess up any users.  Over 30,000 users have installed PySimpleGUI since then and there's not be a single Issue filed nor comment/complaint made, so seems safe enough to normal users... so far....\n\nSo far no one has reported anything at all about the debugger.  The assumption is that it is quietly lying dormant, waiting for you to press the `BREAK` or `CONTROL` + `BREAK` keys.  It's odd no one has accidently done this and freaked out, logging an Issue.\n\nThe plain PySimpleGUI module has a debugger builtin.  For the other ports, please use the package `imwatchingyou`.\n\n## What is it?  Why use it?  What the heck?  I already have an IDE.\n\nThis debugger provides you with something unique to most typical Python developers, the ability to \"see\" and interact with your code, **while it is running**.  You can change variable values while your code continues to run.\n\nPrint statements are cool, but perhaps you're tired of seeing a printout of `event` and `values`:\n```\nPush Me {0: 'Input here'}\nPush Me {0: 'Input here'}\nPush Me {0: 'Input here'}\n```\n\nAnd would prefer to see this window updating continuously in the upper right corner of your display:\n\n![image](https://user-images.githubusercontent.com/13696193/62793751-54197900-baa0-11e9-9a98-f780259062b1.png)\n\nNotice how easy it is, using this window alone, to get the location that your PySimpleGUI package is coming from ***for sure***, no guessing.  Expect this window to be in your debugging future as it'll get asked for from time to time.\n\n## Preparing To Run the Debugger\n\nIf your program is running with blocking `Read` calls, then you will want to add a timeout to your reads.  This is because the debugger gets it's cycles by stealing a little bit of time from these async calls... but only when you have one of these debugger windows open so no bitching about wasted CPU time as there is none.\n\nYour event loop will be modified from this blocking:\n```python\nwhile True:\n    event, values = window.read()\n```\n\nTo this non-blocking:\n```python\nwhile True:\n    event, values = window.Read(timeout=200)\n    if event == sg.TIMEOUT_KEY:\n        continue\n```\n\nThese 3 lines will in no way change how your application looks and performs.  You can do this to any PySimpleGUI app that uses a blocking read and you'll not notice a difference.  The reason this is a NOP (No-operation) is that when a timeout happens, the envent will be set to `sg.TIMEOUT_KEY`.  If a timeout is returned as the event, the code simply ignores it and restarts the loop by executing a `continue` statement.\n\nThis timeout value of 200 means that your debugger GUI will be updated 5 times a second if nothing is happening.  If this adds too much \"drag\" to your application, you can make the timeout larger.  Try using 500 or 1000 instead of 100.\n\n### What happens if you don't add a timeout\n\nLet's say you're in a situation where a very intermettent bug has just happened and the debugger would really help you, but you don't have a timeout on your `windows.Read()` call.  It's OK.  Recall that the way the debugger gets its \"cycles\" is to borrow from your `Read` calls.  What you need to do is alternate between using the debugger and then generating another pass through your event loop.\n\nMaybe it's an OK button that will cause your loop to execute again (without exiting).  If so, you can use it to help move the debugger along.  \n\nYes, this is a major pain in the ass, but it's not THAT bad and compared to nothing in a time of crisis and this is potentially your \"savior tool\" that's going to save your ass, pressing that OK button a few times is going to look like nothing to you.  You just want to dump out the value of a variable that holds an instance of your class!\n\n## A Sample Program For Us To Use\n\nNow that you understand how to add the debugger to your program, let's make a simple little program that you can use to follow these examples:\n\n```python\nimport PySimpleGUI as sg\n\nwindow = sg.Window('Testing the Debugger', [[sg.Text('Debugger Tester'), sg.In('Input here'), sg.B('Push Me')]])\n\nwhile True:\n    event, values = window.Read(timeout=500)\n    if event == sg.TIMEOUT_KEY:\n        continue\n    if event is None:\n        break\n    print(event, values)\nwindow.Close()\n```\n\n## Debugger Windows\n\n### \"Popout Debugger Window\"\n\nThere are 2 debugger windows. One is called the \"Popout\" debugger window.  The Popout window displays as many currently in-scope local variables as possible.  This window is not interactive.  It is meant to be a frequently updated \"dashboard\" or \"snapshot\" of your variables.\n\nOne \"variable\" shown in the popout window that is an often asked for piece of information when debugging Issues and that variable is `sg` (or whatever you named the PySimpleGUI pacakge when you did your import). The assumption is that your import is `import PySimpleGUI as sg`.  If your import is different, then you'll see a different variable.  The point is that it's shown here.\n\nExiting this window is done via the little red X, **or using the rickt-click menu** which is also used as one way to launch the Main Debugger Window\n\n#### Ways of Launching the Popout Window\n\nThere are 3 ways of opening the Popout window.\n\n1. Press the `BREAK` key on your keyboard.\n2. Call the function `show_debugger_popout_window(location=(x,y))`\n3. Add `Debug()` button to your layout - adds a little purple and yellow PySimpleGUI logo to your window\n\n#### When you are asked for the \"Location of your PySimpleGUI package or PySimpleGUI.py file\" do this\n\nIf you wish to use the debugger to find the location of THIS running program's PySimpleGUI package / the PySimpleGUI.py file, then all you need to do is:\n* Press the `BREAK` key on your keyboard. \n    * This is sometimes labelled as the `Cancel` key\n    * May also have `Pause` printed on key\n    * On some US keyboards, it is located next to `Scroll Lock` and/or above `PageUp` key\n* This will open a window located in the upper right corner of your screen that looks something like this:\n![image](https://user-images.githubusercontent.com/13696193/62793751-54197900-baa0-11e9-9a98-f780259062b1.png)\n* The information you are seeking is shown next to the `sg` in the window\nYou don't need to modify your program to get this info using this technique.\n\nIf your variable's value is too long and doesn't fit, then you'lll need to collect this information using the \"Main Debugger Window\"\n\n#### What's NOT Listed In The Popout Debugger Window\n\nThe Popup window is a \"Snapshot\" of your local variables at the time the window was opened. This means **any variables that did not exist at the time the Popout was created will not be shown**.   This window does **NOT** expand in size by adding new variables.  Maybe in the future.\n\n### The \"Main Debugger Window\"\n\nNow we're talking serious Python debugging!\n\nEver wish you had a `repl>>>` prompt that you could run while your program is running.  Well, that's pretty much what you're getting with the PySimpleGUI debugger Main Window!  Cool, huh?  If you're not impressed, go get a cup of coffee and walk off that distraction in your head before carring on because we're in to some seriously cool shit here....\n\nYou'll find that this window has 2 tabs, one is labelled `Variables` and the other is labelled `REPL & Watches`\n\n#### Ways of Opening the Main Debugger Window\n\nThere are 3 ways to open the Main Debugger Window\n\n1. Press `Control` + `Break` on your PC keyboard\n2. From the Popout Debug Window, right click and choose `Debugger` from the right click menu\n3. From your code call `show_debugger_window(location=(x,y))`\n\n#### The \"Variables\" Tab of Main Debugger Window\n\n![SNAG-0440](https://user-images.githubusercontent.com/13696193/62797391-a01ceb80-baa9-11e9-845d-3cd02ca0dbcc.jpg)\n\nNotice the the \"frame\" surrounding this window is labelled \"Auto Watches\" in blue.  Like the Popup window, this debugger window also \"Watches\" variables, which means continuously updates them as often as you call `Window.Read`.\n\nThe maximum number of \"watches\" you can have any any one time is 9.\n\n##### Choosing variables to watch\n\nYou can simply click \"Show All Variable\" button and the list of watched variables will be automatically populard by the first 9 variables it finds.  Or you can click the \"Choose Variables to Auto Watch\" button where you can individually choose what variables, **and expressions** you wish to display.\n\n![SNAG-0442](https://user-images.githubusercontent.com/13696193/62797520-e96d3b00-baa9-11e9-8ba0-794e479b6fc5.jpg)\n\nIn this window we're checking checkboxes to display these variables:\n\n`event`, `sg`, `values`, `window`, `__file__`\n\n![SNAG-0443](https://user-images.githubusercontent.com/13696193/62797518-e8d4a480-baa9-11e9-8575-5256dcf6b5ab.jpg)\n\nAdditionally, you can see at the bottom of the window a \"Custom Watch\" has been defined.  This can be any experession you want.  Let's say you have a window with a LOT of values.  Rather than looking through the `values` variable and finding the entry with the key you are looking for, the values variable's entry for a specific key is displayed.\n\nIn this example the Custom Watch entered was `values[0]`.  After clicking on the \"OK\" button, indicating the variables are chosen that we wish to watch, this is the Main window that is shown:\n\n![SNAG-0444](https://user-images.githubusercontent.com/13696193/62797514-e8d4a480-baa9-11e9-9a86-cfe99342dedb.jpg)\n\nWe can see the variables we checked as well as the defined expression `values[0]`.  If you leave this window open, these values with continuously be updated, on the fly, every time we call the line in our example code `window.Read(timeout=500)`.  This means that the Main Debugger Window and these variables we defined will be updated every 500 milliseconds.\n\n#### The REPL & Watches Tab\n\n![SNAG-0441](https://user-images.githubusercontent.com/13696193/62797507-e7a37780-baa9-11e9-93c4-6ff0c8acb11d.jpg)\n\nThis tab is provided to you as a way to interact with your running program on a real-time basis.  \n\nIf you want to quickly look at the values of variables, nearly ANY variables, then type the information into one of the 3 spaces provided to \"Watch\" either variables or experessions.  In this example, the variable window was typed into the first slow.  \n\n***Immediately*** after typing the character 'w', the information to the right was displayed.  No button needs to be clicked.  You merely neeed to type in a valid experession and it will be displayed to you.... and it will be displayed on an on-going, constantly-refreshing-basis.\n\n![SNAG-0447](https://user-images.githubusercontent.com/13696193/62797393-a0b58200-baa9-11e9-8016-1cadca4d97e7.jpg)\n\nIf the area to the right of the input field is too small, then you can click on the \"Detail\" button and you will be shown a popup, scrolled window with all of the information displayed as if it were printed.  \n\nI'm sure you've had the lovely experience of printing an object.  When clicking the \"Detail\" button next to the `window` variable being shown, this window is shown:\n\n![SNAG-0449](https://user-images.githubusercontent.com/13696193/62801423-b0d25f00-bab3-11e9-829a-aebb429521cd.jpg)\n\nOh, Python, -sigh-.  I just want to see my `window` object printed.  \n\n#### `Obj` Button to the Rescue!\n\nPySimpleGUI has a fun and very useful function that is discussed in the docs named `ObjToString` which takes an object and converts it's **contents** it into a nicely formatted string.  This function is used to create the text output when you click the `Obj` button.  The result is this instead of the tiny window shown previously:\n\n![SNAG-0446](https://user-images.githubusercontent.com/13696193/62797508-e7a37780-baa9-11e9-96bf-b2c066e72d78.jpg)\n\n## The REPL Prompt\n\nWhile not **really** a Python REPL prompt, this window's `REPL >>>` prompt is meant to act as much like one as possible.  Here you can enter experessions and code too.\n\nThe uses for this prompt are so numerous and diverse that listing them all won't be attempted. \n\n### Your \"XRay\" and \"Endoscope\" into Your Program\n\nThink of this prompt as a way to get specific diagnostics information about your ***running*** program.  It cannot be stressed enough that the power and the usefullness of this tool is in its ability to diagnose a running program, after you've already started it running. \n\n### Execute Code \n\nIn addition to displaying information, getting paths to packages, finding version information, you can execute code from the PySimpleGUI Debugger's `REPL >>>` prompt.  You can type in any expression as well as any **executable statement**.\n\nFor example, want to see what `PopupError` looks like while you're running your program.  From the REPL prompt, type:\n`sg.PopupError('This is an error popup')`\n\nThe result is that you are shown a popup window with the text you supplied.\n\n### KNOW Answers to Questions About Your Program\n\nUsing this runtime tool, you can be confident in the data you collect.  Right?  \n\n***There's no better way to find what version of a package that your program is using than to ask your program.***  This is so true.  Think about it.  Rather than go into PyCharm, look at your project's \"Virtual Environment\", follow some path to get to a window that lists packages installed for that project, get the verstion and your're done, right?  Well, maybe.  But are you CERTAIN your program is using THAT version of the package in question?\n\nSO MUCH time has been wasted in the past  when people KNEW, for sure, what version they were running. Or, they had NO CLUE what version, or no clue to find out.  There's nothing wrong with not knowing how to do something.  We ALL start there.  Geeez..\n\nA real world example.....\n\n## How To Use the Debugger to Find The Version Number of a Package\n\nLet's pull together everything we've learned to now and use the debugger to solve a problem that happens often and sometimes it's not at all obvious how to find the answer.\n\nWe're using ***Matplotlib*** and want to find the \"Version\".\n\nFor this example, the little 12-line program in the section \"A Sample Program For Us To Use\" is being used.\n\nThat program does not import `matplotlib`.  We have a couple of choices, we can change the code, we can can import the package from the debugger.  Let's use the debgger.\n\nPull up the Main Debugger Window by pressing `CONTROL+BREAK` keys.  Then click the \"REPL * Watches\" tab.  At the `>>>` prompt we'll first import the package by typing:\n`import matplotlib as m`\n\nThe result returned from Python calls that don't return anything is the value None.  You will see the command you entered in the output area followed by \"None\", indicating success.\n\nfinally, type:\n`m.__version__`\n\nThe entire set of operations is shown in this window:\n\n![SNAG-0448](https://user-images.githubusercontent.com/13696193/62797392-a0b58200-baa9-11e9-97f4-9ef74cbb86f7.jpg)\n\nBy convention you'll find many modules have a variable `__version__` that has the package's version number.  PySimpleGUI has one.  As you can see matplotlib has one.  The `requests` module has this variable.\n\nFor maximum compatibility, PySimpleGUI not only uses `__version__`, but also has the version contained in another variable `version` which has the version number because in some situations the `__version__` is not available but the `version` variable is avaiable.\n\n**It is recommended that you use the variable `version` to get the PySimpleGUI version** as it's so far been the most successful method.\n\ntkinter, however does NOT.... of course.... follow this convention.  No, to get the tkinter version, you need to look at the variable:\n`TkVersion`\n\nHere's the output from the REPL in the debugger showing the tkinter version:\n\n```\n>>> import tkinter as t\nNone\n>>> t.TkVersion\n8.6\n>>> t.__version__\nException module 'tkinter' has no attribute '__version__'\n```\n---\n\n# Extending PySimpleGUI\n\nPySimpleGUI doesn't and can't provide every single setting available in the underlying GUI framework.  Not all tkinter options are available for a `Text` Element.  Same with PySimpleGUIQt and the other ports.  \n\nThere are a few of reasons for this.\n\n1. Time & resource limits - The size of the PySimpleGUI development team is extremely small\n2. PySimpleGUI provides a \"Unified API\".  This means the code is, in theory, portable across all of the PySimpleGUI ports without chaning the user's code (except for the import)\n3. PySimpleGUI is meant, by design, to be simple and cover 80% of the GUI problems.\n\nHowever, PySimpleGUI programs are ***not*** dead ends!!  Writing PySimpleGUI code and then getting to a point where you really really feel like you need to extend the Listbox to include the ability to change the \"Selected\" color.  Maybe that's super-critical to your project.  And maybe you find out late that the base PySimpleGUI code doesn't expose that tkinter capability.  Fear not!  The road does continue!!\n\n## Widget Access\n\nMost of the user extensions / enhancements are at the \"Element\" level.  You want some Element to do a trick that you cannot do using the existing PySimpleGUI APIs.  It's just not possible.  What to do?  \n\nWhat you need is access to the underlying GUI framework's \"Widget\".  The good news is that you HAVE that access ready and waiting for you, for all of the ports of PySimpleGUI, not just the tkinter one.\n\n### `Element.Widget` is The GUI Widget\n\nThe class variable `Widget` contains the tkinter, Qt, WxPython, or Remi widget.  With that variable you can modify that widget directly.  \n\n***You must first `Read` or `Finalize` the window before accessing the `Widget` class variable***\n\nThe reason for the Finalize requirement is that until a Window is Read or is Finalized it is not actually created and populated with GUI Widgets.  The GUI Widgets are created when you do these 2 operations.\n\nSide note - You can stop using the `.Finalize()` call added onto your window creation and instead use the `finalize` parameter in the `Window` call.\n\nOLD WAY:\n```python\nwindow = sg.Window('Window Title', layout).Finalize()\n\n```\n\nTHE NEW WAY:\n```python\nwindow = sg.Window('Window Title', layout, finalize=True)\n\n```\n\nIt's cleaner and less confusing for beginners who aren't necessarily trained in how chaining calls work.  Py**Simple**GUI.\n\n### Example Use of `Element.Widget`\n\nSo far there have been 2 uses of this capability.  One already mentioned is adding a new capability.  The other way it's been used has been to fix a bug or make a workaround for a quirky behavior.\n\nA recent Issue posted was that focus was always being set on a button in a tab when you switch tabs in tkinter.  The user didn't want this to happen as it was putting an ugly black line around their nicely made graphical button.\n\nThere is no current way in PySimpleGUI to \"disable focus\" on an Element.  That's essentially what was needed, the ability to tell tkinter that this widget should never get focus.  \n\nThere is a way to tell tkinter that a widget should not get focus.  The downside is that if you use your tab key to navigate, that element will never get focus.  So, it's not only blocking focus for this automatic problem, but blocking it for all uses.  Of course you can still click on the button.\n\nThe way through for this user was to modify the tkinter widget directly and tell it not to get focus.  This was done in a single line of code:\n\n```python\nwindow[button_key].Widget.config(takefocus=0)\n```\n\nThe absolute beauty to this solution is that tkinter does NOT need to be imported into the user's program for this statement to run.  Python already know what kind of object `.Widget` is and can thus show you the various methods and class variables for that object.  Most all tkinter options are strings so you don't need to import tkinter to get any enums.\n\n### Finding Your Element's Widget Type\n\nOf course, in order to call the methods or access the object's class variables, you need to know the type of the underlying Widget being used.  This document could list them all, but the downside is the widget could change types (not a good thing for people using the .Widget already!).  It also saves space and time in getting this documentation published and available to you.\n\nSo, here's the way to get your element's widget's type:\n\n```python\n    print(type(window[your_element_key].Widget))\n```\n\nIn the case of the button example above, what is printed is:\n\n`<class 'tkinter.Button'>`\n\nI don't think that could be any clearer.  Your job at this point is to look at the tkinter documentation to see what the methods are for the tkinter `Button` widget.\n\n## Window Level Access\n\nFor this one you'll need some specific variables for the time being as there is no `Window` class variable that holds the window's representation in the GUI library being used.\n\nFor tkinter, at the moment, the window's root object is this:\n\n```python\nsg.Window.TKroot\n```\n\nThe type will vary in PySimpleGUI.  It will either be:\n`tkinter.Tk()`\n`tkinter.Toplevel()`\n\nEither way you'll access it using the same `Window` variable `sg.Window.TKroot`\n\nWatch this space in the future for the more standardized variable name for this object.  It may be something like `Window.Widget` as the Elements use or something like `Window.GUIWindow`.\n\n## Binding tkiner \"events\"\n\nIf you wish to receive events directly from tkinter, but do it in a PySimpleGUI way, then you can do that and get those events returned to you via your standard `Window.read()` call.  \n\nBoth the Elements and Window objects have a method called `bind`.  You specify 2 parameters to this function.  One is the string that is used to tell tkinter what events to bind.  The other is a \"key modifier\" for Elements and a \"key\" for Windows.\n\nThe `key_modifier` in the `Element.bind` call is something that is added to your key. If your key is a string, then this modifier will be appended to your key and the event will be a single string.\n\nIf your element's key is not a string, then a tuple will be returned as the event\n(your_key, key_modifier)\n\nThis will enable you to continue to use your weird, non-string keys. Just be aware that you'll be getting back a tuple instead of your key in these situations.\n\nThe best example of when this can happen is in a Minesweeper game where each button is already a tuple of the (x,y) position of the button. Normal left clicks will return (x,y). A right click that was generated as a result of bind call will be ((x,y), key_modifier).\n\nIt'll be tricky for the user to parse these events, but it's assumed you're an advanced user if you're using this capability and are also using non-string keys.\n\nThere are 2 member variables that have also been added as shown in the documentation for the bind methods. This added variable contains the tkinter specific event information. In other words, the 'event' that tkinter normally sends back when a callback happens.\n\nHere is sample code that shows how to make these calls.\n\nThree events are being bound.\n\n1. Any button clicks in the window will return an event \"Window Click\" from window.read()\n2. Right clicking the \"Go\" buttons will return an event \"Go+RIGHT CLICK+\" from window.read()\n3. When the Input Element receives focus, an event \"-IN-+FOCUS+\" will be returned from window.read()\n\n```python\nimport PySimpleGUI as sg\n\nsg.theme('Dark Green 2')\n\nlayout = [  [sg.Text('My Window')],\n            [sg.Input(key='-IN-'), sg.Text(size=(15,1), key='-OUT-')],\n            [sg.Button('Go'), sg.Button('Exit')]\n              ]\n\nwindow = sg.Window('Window Title', layout, finalize=True)\n\nwindow['-IN-'].bind(\"<FocusIn>\", '+FOCUS+')\nwindow.bind(\"<Button-1>\", 'Window Click')\nwindow['Go'].bind(\"<Button-3>\", '+RIGHT CLICK+')\n\nwhile True:             # Event Loop\n    event, values = window.read()\n    print(event, values)\n    if event in (None, 'Exit'):\n        break\n\nwindow.close(); del window\n```\n\nThere is no way to \"unbind\" and event at this time.  (sorry, didn't think of it before releasing)\n---\n\n------------------\n\n# ELEMENT AND FUNCTION CALL REFERENCE\n\nThis reference section was previously intermixed with the text explanation, diagrams, code samples, etc.  That was OK early on, but now that there are more Elements and more methods are being added on a fequent basis, it means that keeping this list updated is a difficult chore if it has a lot of text all around it.\n\nHoping this is a change for the better and that users will be able to find the information they seek quicker.\n\nNOTE that this documentatiuopn section is created using the ***GitHUB released PySimpleGUI.py file***.  Some of the calls may not be available to you or your port (Qt, Wx, Web).  And some of the parameters may be different.  We're working on adding docstrings to all the ports which will enable this kind of document to be available for each port.\n\n## Caution - Some functions / methods may be internal only yet exposed in this documenation\n\nThis section of the documentation is generated directly from the source code.  As a result, sometimes internal only functions or methods that you are not supposed to be calling are accidently shown in this documentation.  Hopefully these accidents don't happen often.\n\nWithout further delay... here are all of the Elements and the Window class\n\n## Button Element\n\n    Button Element - Defines all possible buttons. The shortcuts such as Submit, FileBrowse, ... each create a Button\n\n```\nButton(button_text=\"\",\n    button_type=7,\n    target=(None, None),\n    tooltip=None,\n    file_types=(('ALL Files', '*.*'),),\n    initial_folder=None,\n    disabled=False,\n    change_submits=False,\n    enable_events=False,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled_button_color=None,\n    use_ttk_buttons=None,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|(str) Text to be displayed on the button|\n|button_type|(int) You should NOT be setting this directly. ONLY the shortcut functions set this|\n|target|Union[str, Tuple[int, int]] key or (row,col) target for the button. Note that -1 for column means 1 element to the left of this one. The constant ThisRow is used to indicate the current row. The Button itself is a valid target for some types of button|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|file_types|Tuple[Tuple[str, str], ...] the filetypes that will be used to match files. To indicate all files: ((\"ALL Files\", \"*.*\"),). Note - NOT SUPPORTED ON MAC|\n|initial_folder|(str) starting path for folders and files|\n|disabled|(bool) If True button will be created disabled|\n|click_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. If this button is a target, should it generate an event when filled in|\n|image_filename|(str) image filename if there is a button image. GIFs and PNGs only.|\n|image_data|Union[bytes, str] Raw or Base64 representation of the image to put on button. Choose either filename or data|\n|image_size|Tuple[int, int] Size of the image in pixels (width, height)|\n|image_subsample|(int) amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc|\n|border_width|(int) width of border around button in pixels|\n|size|Tuple[int, int] (width, height) of the button in characters wide, rows high|\n|auto_size_button|(bool) if True the button size is sized to fit the text|\n|button_color|Tuple[str, str] (text color, background color) of button. Easy to remember which is which if you say \"ON\" between colors. \"red\" on \"green\".|\n|disabled_button_color|Tuple[str, str] colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color|\n|use_ttk_buttons|(bool) True = use ttk buttons. False = do not use ttk buttons. None (Default) = use ttk buttons only if on a Mac and not with button images|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|bind_return_key|(bool) If True the return key will cause this button to be pressed|\n|focus|(bool) if True, initial focus will be put on this button|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### Click\n\nGenerates a click of the button as if the user clicked the button\n        Calls the tkinter invoke method for the button\n\n```python\nClick()\n```\n\n### GetText\n\nReturns the current text shown on a button\n\n`GetText()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) The text currently displayed on the button |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Button Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(text=None,\n    button_color=(None, None),\n    disabled=None,\n    image_data=None,\n    image_filename=None,\n    visible=None,\n    image_subsample=None,\n    disabled_button_color=(None, None),\n    image_size=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) sets button text|\n|button_color|Tuple[str, str] (text color, background color) of button. Easy to remember which is which if you say \"ON\" between colors. \"red\" on \"green\"|\n|disabled|(bool) disable or enable state of the element|\n|image_data|Union[bytes, str] Raw or Base64 representation of the image to put on button. Choose either filename or data|\n|image_filename|(str) image filename if there is a button image. GIFs and PNGs only.|\n|disabled_button_color|Tuple[str, str] colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color|\n|visible|(bool) control visibility of element|\n|image_subsample|(int) amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc|\n|image_size|Tuple[int, int] Size of the image in pixels (width, height)|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### click\n\nGenerates a click of the button as if the user clicked the button\n        Calls the tkinter invoke method for the button\n\n```python\nclick()\n```\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### get_text\n\nReturns the current text shown on a button\n\n`get_text()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) The text currently displayed on the button |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Button Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(text=None,\n    button_color=(None, None),\n    disabled=None,\n    image_data=None,\n    image_filename=None,\n    visible=None,\n    image_subsample=None,\n    disabled_button_color=(None, None),\n    image_size=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) sets button text|\n|button_color|Tuple[str, str] (text color, background color) of button. Easy to remember which is which if you say \"ON\" between colors. \"red\" on \"green\"|\n|disabled|(bool) disable or enable state of the element|\n|image_data|Union[bytes, str] Raw or Base64 representation of the image to put on button. Choose either filename or data|\n|image_filename|(str) image filename if there is a button image. GIFs and PNGs only.|\n|disabled_button_color|Tuple[str, str] colors to use when button is disabled (text, background). Use None for a color if don't want to change. Only ttk buttons support both text and background colors. tk buttons only support changing text color|\n|visible|(bool) control visibility of element|\n|image_subsample|(int) amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc|\n|image_size|Tuple[int, int] Size of the image in pixels (width, height)|\n\n## ButtonMenu Element\n\n    The Button Menu Element.  Creates a button that when clicked will show a menu similar to right click menu\n\n```\nButtonMenu(button_text,\n    menu_def,\n    tooltip=None,\n    disabled=False,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    pad=None,\n    key=None,\n    tearoff=False,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|(str) Text to be displayed on the button|\n|menu_def|List[List[str]] A list of lists of Menu items to show when this element is clicked. See docs for format as they are the same for all menu types|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|disabled|(bool) If True button will be created disabled|\n|image_filename|(str) image filename if there is a button image. GIFs and PNGs only.|\n|image_data|Union[bytes, str] Raw or Base64 representation of the image to put on button. Choose either filename or data|\n|image_size|Tuple[int, int] Size of the image in pixels (width, height)|\n|image_subsample|(int) amount to reduce the size of the image. Divides the size by this number. 2=1/2, 3=1/3, 4=1/4, etc|\n|border_width|(int) width of border around button in pixels|\n|size|Tuple[int, int] (width, height) of the button in characters wide, rows high|\n|auto_size_button|(bool) if True the button size is sized to fit the text|\n|button_color|Tuple[str, str] (text color, background color) of button. Easy to remember which is which if you say \"ON\" between colors. \"red\" on \"green\"|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|tearoff|(bool) Determines if menus should allow them to be torn off|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Click\n\nGenerates a click of the button as if the user clicked the button\n        Calls the tkinter invoke method for the button\n\n```python\nClick()\n```\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the ButtonMenu Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(menu_definition, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|menu_definition|(List[List]) New menu definition (in menu definition format)|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the ButtonMenu Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(menu_definition, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|menu_definition|(List[List]) New menu definition (in menu definition format)|\n|visible|(bool) control visibility of element|\n\n## Canvas Element\n\n```\nCanvas(canvas=None,\n    background_color=None,\n    size=(None, None),\n    pad=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|canvas|(tk.Canvas) Your own tk.Canvas if you already created it. Leave blank to create a Canvas|\n|background_color|(str) color of background|\n|size|Tuple[int,int] (width in char, height in rows) size in pixels to make canvas|\n|pad|Amount of padding to put around element|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### TKCanvas\n\n#### property: TKCanvas\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### tk_canvas\n\n#### property: tk_canvas\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n## Checkbox Element\n\n    Checkbox Element - Displays a checkbox and text next to it\n\n```\nCheckbox(text,\n    default=False,\n    size=(None, None),\n    auto_size_text=None,\n    font=None,\n    background_color=None,\n    text_color=None,\n    change_submits=False,\n    enable_events=False,\n    disabled=False,\n    key=None,\n    pad=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) Text to display next to checkbox|\n|default|(bool). Set to True if you want this checkbox initially checked|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) if True will size the element to match the length of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Checkbox events happen when an item changes|\n|disabled|(bool) set disable state|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nReturn the current state of this checkbox\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (bool) Current state of checkbox |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Checkbox Element. Must call `Window.Read` or `Window.Finalize` prior.\nNote that changing visibility may cause element to change locations when made visible after invisible\n\n```\nUpdate(value=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(bool) if True checks the checkbox, False clears it|\n|disabled|(bool) disable or enable element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nReturn the current state of this checkbox\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (bool) Current state of checkbox |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Checkbox Element. Must call `Window.Read` or `Window.Finalize` prior.\nNote that changing visibility may cause element to change locations when made visible after invisible\n\n```\nupdate(value=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(bool) if True checks the checkbox, False clears it|\n|disabled|(bool) disable or enable element|\n|visible|(bool) control visibility of element|\n\n## Column Element\n\n    A container element that is used to create a layout within your window's layout\n\n```\nColumn(layout,\n    background_color=None,\n    size=(None, None),\n    pad=None,\n    scrollable=False,\n    vertical_scroll_only=False,\n    right_click_menu=None,\n    key=None,\n    visible=True,\n    justification=\"left\",\n    element_justification=\"left\",\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|layout|List[List[Element]] Layout that will be shown in the Column container|\n|background_color|(str) color of background of entire Column|\n|size|Tuple[int, int] (width, height) size in pixels (doesn't work quite right, sometimes only 1 dimension is set by tkinter|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|scrollable|(bool) if True then scrollbars will be added to the column|\n|vertical_scroll_only|(bool) if Truen then no horizontal scrollbar will be shown|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|visible|(bool) set visibility state of the element|\n|justification|(str) set justification for the Column itself. Note entire row containing the Column will be affected|\n|element_justification|(str) All elements inside the Column will have this justification 'left', 'right', 'center' are valid values|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Column Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n### add_row\n\nNot recommended user call.  Used to add rows of Elements to the Column Element.\n\n```\nadd_row(args)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|List[Element] The list of elements for this row|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### layout\n\nCan use like the Window.Layout method, but it's better to use the layout parameter when creating\n\n```\nlayout(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Element]] The rows of Elements|\n|||\n| **return** | (Column) Used for chaining |\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Column Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n## Combo Element\n\n    ComboBox Element - A combination of a single-line input and a drop-down menu. User can type in their own value or choose from list.\n\n```\nCombo(values,\n    default_value=None,\n    size=(None, None),\n    auto_size_text=None,\n    background_color=None,\n    text_color=None,\n    change_submits=False,\n    enable_events=False,\n    disabled=False,\n    key=None,\n    pad=None,\n    tooltip=None,\n    readonly=False,\n    font=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] values to choose. While displayed as text, the items returned are what the caller supplied, not text|\n|default_value|(Any) Choice to be displayed as initial value. Must match one of values variable contents|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) True if element should be the same size as the contents|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|change_submits|(bool) DEPRICATED DO NOT USE. Use `enable_events` instead|\n|enable_events|(bool) Turns on the element specific events. Combo event is when a choice is made|\n|disabled|(bool) set disable state for element|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text that will appear when mouse hovers over this element|\n|readonly|(bool) make element readonly (user can't change). True means user cannot change|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nReturns the current (right now) value of the Combo.  DO NOT USE THIS AS THE NORMAL WAY OF READING A COMBO!\nYou should be using values from your call to window.Read instead.  Know what you're doing if you use it.\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Any, None] Returns the value of what is currently chosen |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Combo Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    values=None,\n    set_to_index=None,\n    disabled=None,\n    readonly=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) change which value is current selected hased on new list of previous list of choices|\n|values|List[Any] change list of choices|\n|set_to_index|(int) change selection to a particular choice starting with index = 0|\n|disabled|(bool) disable or enable state of the element|\n|readonly|(bool) if True make element readonly (user cannot change any choices)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nReturns the current (right now) value of the Combo.  DO NOT USE THIS AS THE NORMAL WAY OF READING A COMBO!\nYou should be using values from your call to window.Read instead.  Know what you're doing if you use it.\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Any, None] Returns the value of what is currently chosen |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Combo Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    values=None,\n    set_to_index=None,\n    disabled=None,\n    readonly=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) change which value is current selected hased on new list of previous list of choices|\n|values|List[Any] change list of choices|\n|set_to_index|(int) change selection to a particular choice starting with index = 0|\n|disabled|(bool) disable or enable state of the element|\n|readonly|(bool) if True make element readonly (user cannot change any choices)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) control visibility of element|\n\n## Frame Element\n\n    A Frame Element that contains other Elements. Encloses with a line around elements and a text label.\n\n```\nFrame(title,\n    layout,\n    title_color=None,\n    background_color=None,\n    title_location=None,\n    relief=\"groove\",\n    size=(None, None),\n    font=None,\n    pad=None,\n    border_width=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    element_justification=\"left\",\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|title|(str) text that is displayed as the Frame's \"label\" or title|\n|layout|List[List[Elements]] The layout to put inside the Frame|\n|title_color|(str) color of the title text|\n|background_color|(str) background color of the Frame|\n|title_location|(enum) location to place the text title. Choices include: TITLE_LOCATION_TOP TITLE_LOCATION_BOTTOM TITLE_LOCATION_LEFT TITLE_LOCATION_RIGHT TITLE_LOCATION_TOP_LEFT TITLE_LOCATION_TOP_RIGHT TITLE_LOCATION_BOTTOM_LEFT TITLE_LOCATION_BOTTOM_RIGHT|\n|relief|(enum) relief style. Values are same as other elements with reliefs. Choices include RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID|\n|size|Tuple[int, int] (width in characters, height in rows) (note this parameter may not always work)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|border_width|(int) width of border around element in pixels|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|element_justification|(str) All elements inside the Frame will have this justification 'left', 'right', 'center' are valid values|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Frame Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) New text value to show on frame|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Frame Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) New text value to show on frame|\n|visible|(bool) control visibility of element|\n\n## Graph Element\n\n    Creates an area for you to draw on.  The MAGICAL property this Element has is that you interact\n    with the element using your own coordinate system.  This is an important point!!  YOU define where the location\n    is for (0,0).  Want (0,0) to be in the middle of the graph like a math 4-quadrant graph?  No problem!  Set your\n    lower left corner to be (-100,-100) and your upper right to be (100,100) and you've got yourself a graph with\n    (0,0) at the center.\n    One of THE coolest of the Elements.\n    You can also use float values. To do so, be sure and set the float_values parameter.\n    Mouse click and drag events are possible and return the (x,y) coordinates of the mouse\n    Drawing primitives return an \"id\" that is referenced when you want to operation on that item (e.g. to erase it)\n\n```\nGraph(canvas_size,\n    graph_bottom_left,\n    graph_top_right,\n    background_color=None,\n    pad=None,\n    change_submits=False,\n    drag_submits=False,\n    enable_events=False,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    float_values=False,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|canvas_size|Tuple[int, int] (width, height) size of the canvas area in pixels|\n|graph_bottom_left|Tuple[int, int] (x,y) The bottoms left corner of your coordinate system|\n|graph_top_right|Tuple[int, int] (x,y) The top right corner of your coordinate system|\n|background_color|(str) background color of the drawing area|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|change_submits|(bool) * DEPRICATED DO NOT USE! Same as enable_events|\n|drag_submits|(bool) if True and Events are enabled for the Graph, will report Events any time the mouse moves while button down|\n|enable_events|(bool) If True then clicks on the Graph are immediately reported as an event. Use this instead of change_submits|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element (Default = True)|\n|float_values|(bool) If True x,y coordinates are returned as floats, not ints|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### BringFigureToFront\n\nChanges Z-order of figures on the Graph.  Brings the indicated figure to the front of all other drawn figures\n\n```\nBringFigureToFront(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(int) value returned by tkinter when creating the figure / drawing|\n\n### ButtonPressCallBack\n\nNot a user callable method.  Used to get Graph click events. Called by tkinter when button is released\n\n```\nButtonPressCallBack(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(event) event info from tkinter. Contains the x and y coordinates of a click|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### DeleteFigure\n\nRemove from the Graph the figure represented by id. The id is given to you anytime you call a drawing primitive\n\n```\nDeleteFigure(id)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|id|(int) the id returned to you when calling one of the drawing methods|\n\n### DrawArc\n\nDraws different types of arcs.  Uses a \"bounding box\" to define location\n\n```\nDrawArc(top_left,\n    bottom_right,\n    extent,\n    start_angle,\n    style=None,\n    arc_color=\"black\",\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of bounding rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of bounding rectangle|\n|extent|(float) Andle to end drawing. Used in conjunction with start_angle|\n|start_angle|(float) Angle to begin drawing. Used in conjunction with extent|\n|style|(str) Valid choices are One of these Style strings- 'pieslice', 'chord', 'arc', 'first', 'last', 'butt', 'projecting', 'round', 'bevel', 'miter'|\n|arc_color|(str) color to draw arc with|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the arc |\n\n### DrawCircle\n\nDraws a circle, cenetered at the location provided.  Can set the fill and outline colors\n\n```\nDrawCircle(center_location,\n    radius,\n    fill_color=None,\n    line_color=\"black\",\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|center_location|Union [Tuple[int, int], Tuple[float, float]] Center location using USER'S coordinate system|\n|radius|Union[int, float] Radius in user's coordinate values.|\n|fill_color|(str) color of the point to draw|\n|line_color|(str) color of the outer line that goes around the circle (sorry, can't set thickness)|\n|line_width|(int) width of the line around the circle, the outline, in pixels|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the circle |\n\n### DrawImage\n\nPlaces an image onto your canvas.  It's a really important method for this element as it enables so much\n\n```\nDrawImage(filename=None,\n    data=None,\n    location=(None, None),\n    color=\"black\",\n    font=None,\n    angle=0)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) if image is in a file, path and filename for the image. (GIF and PNG only!)|\n|data|Union[str, bytes] if image is in Base64 format or raw? format then use instead of filename|\n|location|Union[Tuple[int, int], Tuple[float, float]] the (x,y) location to place image's top left corner|\n|color|(str) text color|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|angle|(float) Angle 0 to 360 to draw the text. Zero represents horizontal text|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the image |\n\n### DrawLine\n\nDraws a line from one point to another point using USER'S coordinates. Can set the color and width of line\n\n```\nDrawLine(point_from,\n    point_to,\n    color=\"black\",\n    width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|point_from|Union[Tuple[int, int], Tuple[float, float]] Starting point for line|\n|point_to|Union[Tuple[int, int], Tuple[float, float]] Ending point for line|\n|color|(str) Color of the line|\n|width|(int) width of line in pixels|\n|||\n| **return** | Union[int, None] id returned from tktiner or None if user closed the window. id is used when you <br> want to manipulate the line |\n\n### DrawOval\n\nDraws an oval based on coordinates in user coordinate system. Provide the location of a \"bounding rectangle\"\n\n```\nDrawOval(top_left,\n    bottom_right,\n    fill_color=None,\n    line_color=None,\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of bounding rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of bounding rectangle|\n|fill_color|(str) color of the interrior|\n|line_color|(str) color of outline of oval|\n|line_width|(int) width of the line around the oval, the outline, in pixels|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the oval |\n\n### DrawPoint\n\nDraws a \"dot\" at the point you specify using the USER'S coordinate system\n\n```\nDrawPoint(point,\n    size=2,\n    color=\"black\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|point|Union [Tuple[int, int], Tuple[float, float]] Center location using USER'S coordinate system|\n|size|Union[int, float] Radius? (Or is it the diameter?) in user's coordinate values.|\n|color|(str) color of the point to draw|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the point |\n\n### DrawRectangle\n\nDraw a rectangle given 2 points. Can control the line and fill colors\n\n```\nDrawRectangle(top_left,\n    bottom_right,\n    fill_color=None,\n    line_color=None,\n    line_width=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of rectangle|\n|fill_color|(str) color of the interior|\n|line_color|(str) color of outline|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the rectangle |\n\n### DrawText\n\nDraw some text on your graph.  This is how you label graph number lines for example\n\n```\nDrawText(text,\n    location,\n    color=\"black\",\n    font=None,\n    angle=0,\n    text_location=\"center\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) text to display|\n|location|Union[Tuple[int, int], Tuple[float, float]] location to place first letter|\n|color|(str) text color|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|angle|(float) Angle 0 to 360 to draw the text. Zero represents horizontal text|\n|text_location|(enum) \"anchor\" location for the text. Values start with TEXT_LOCATION_|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the text |\n\n### Erase\n\nErase the Graph - Removes all figures previously \"drawn\" using the Graph methods (e.g. DrawText)\n\n```python\nErase()\n```\n\n### GetBoundingBox\n\nGiven a figure, returns the upper left and lower right bounding box coordinates\n\n```\nGetBoundingBox(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|a previously drawing figure|\n|||\n| **return** | Union[Tuple[int, int, int, int], Tuple[float, float, float, float]] (upper left x, upper left y, lower right x, lower right y |\n\n### GetFiguresAtLocation\n\nReturns a list of figures located at a particular x,y location within the Graph\n\n```\nGetFiguresAtLocation(location)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|location|Union[Tuple[int, int], Tuple[float, float]] point to check|\n|||\n| **return** | List[int] a list of previously drawn \"Figures\" (returned from the drawing primitives) |\n\n### Move\n\nMoves the entire drawing area (the canvas) by some delta from the current position.  Units are indicated in your coordinate system indicated number of ticks in your coordinate system\n\n```\nMove(x_direction, y_direction)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|x_direction|Union[int, float] how far to move in the \"X\" direction in your coordinates|\n|y_direction|Union[int, float] how far to move in the \"Y\" direction in your coordinates|\n\n### MoveFigure\n\nMoves a previously drawn figure using a \"delta\" from current position\n\n```\nMoveFigure(figure,\n    x_direction,\n    y_direction)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(id) Previously obtained figure-id. These are returned from all Draw methods|\n|x_direction|Union[int, float] delta to apply to position in the X direction|\n|y_direction|Union[int, float] delta to apply to position in the Y direction|\n\n### RelocateFigure\n\nMove a previously made figure to an arbitrary (x,y) location. This differs from the Move methods because it\nuses absolute coordinates versus relative for Move\n\n```\nRelocateFigure(figure,\n    x,\n    y)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(id) Previously obtained figure-id. These are returned from all Draw methods|\n|x|Union[int, float] location on X axis (in user coords) to move the upper left corner of the figure|\n|y|Union[int, float] location on Y axis (in user coords) to move the upper left corner of the figure|\n\n### SendFigureToBack\n\nChanges Z-order of figures on the Graph.  Sends the indicated figure to the back of all other drawn figures\n\n```\nSendFigureToBack(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(int) value returned by tkinter when creating the figure / drawing|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### TKCanvas\n\n#### property: TKCanvas\n\n### Update\n\nChanges some of the settings for the Graph Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(background_color=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|background_color|color of background|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### bring_figure_to_front\n\nChanges Z-order of figures on the Graph.  Brings the indicated figure to the front of all other drawn figures\n\n```\nbring_figure_to_front(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(int) value returned by tkinter when creating the figure / drawing|\n\n### button_press_call_back\n\nNot a user callable method.  Used to get Graph click events. Called by tkinter when button is released\n\n```\nbutton_press_call_back(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(event) event info from tkinter. Contains the x and y coordinates of a click|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### change_coordinates\n\nChanges the corrdinate system to a new one.  The same 2 points in space are used to define the coorinate\nsystem - the bottom left and the top right values of your graph.\n\n```\nchange_coordinates(graph_bottom_left, graph_top_right)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|graph_bottom_left|Tuple[int, int] (x,y) The bottoms left corner of your coordinate system|\n|graph_top_right|Tuple[int, int] (x,y) The top right corner of your coordinate system|\n\n### delete_figure\n\nRemove from the Graph the figure represented by id. The id is given to you anytime you call a drawing primitive\n\n```\ndelete_figure(id)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|id|(int) the id returned to you when calling one of the drawing methods|\n\n### draw_arc\n\nDraws different types of arcs.  Uses a \"bounding box\" to define location\n\n```\ndraw_arc(top_left,\n    bottom_right,\n    extent,\n    start_angle,\n    style=None,\n    arc_color=\"black\",\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of bounding rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of bounding rectangle|\n|extent|(float) Andle to end drawing. Used in conjunction with start_angle|\n|start_angle|(float) Angle to begin drawing. Used in conjunction with extent|\n|style|(str) Valid choices are One of these Style strings- 'pieslice', 'chord', 'arc', 'first', 'last', 'butt', 'projecting', 'round', 'bevel', 'miter'|\n|arc_color|(str) color to draw arc with|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the arc |\n\n### draw_circle\n\nDraws a circle, cenetered at the location provided.  Can set the fill and outline colors\n\n```\ndraw_circle(center_location,\n    radius,\n    fill_color=None,\n    line_color=\"black\",\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|center_location|Union [Tuple[int, int], Tuple[float, float]] Center location using USER'S coordinate system|\n|radius|Union[int, float] Radius in user's coordinate values.|\n|fill_color|(str) color of the point to draw|\n|line_color|(str) color of the outer line that goes around the circle (sorry, can't set thickness)|\n|line_width|(int) width of the line around the circle, the outline, in pixels|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the circle |\n\n### draw_image\n\nPlaces an image onto your canvas.  It's a really important method for this element as it enables so much\n\n```\ndraw_image(filename=None,\n    data=None,\n    location=(None, None),\n    color=\"black\",\n    font=None,\n    angle=0)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) if image is in a file, path and filename for the image. (GIF and PNG only!)|\n|data|Union[str, bytes] if image is in Base64 format or raw? format then use instead of filename|\n|location|Union[Tuple[int, int], Tuple[float, float]] the (x,y) location to place image's top left corner|\n|color|(str) text color|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|angle|(float) Angle 0 to 360 to draw the text. Zero represents horizontal text|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the image |\n\n### draw_line\n\nDraws a line from one point to another point using USER'S coordinates. Can set the color and width of line\n\n```\ndraw_line(point_from,\n    point_to,\n    color=\"black\",\n    width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|point_from|Union[Tuple[int, int], Tuple[float, float]] Starting point for line|\n|point_to|Union[Tuple[int, int], Tuple[float, float]] Ending point for line|\n|color|(str) Color of the line|\n|width|(int) width of line in pixels|\n|||\n| **return** | Union[int, None] id returned from tktiner or None if user closed the window. id is used when you <br> want to manipulate the line |\n\n### draw_oval\n\nDraws an oval based on coordinates in user coordinate system. Provide the location of a \"bounding rectangle\"\n\n```\ndraw_oval(top_left,\n    bottom_right,\n    fill_color=None,\n    line_color=None,\n    line_width=1)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of bounding rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of bounding rectangle|\n|fill_color|(str) color of the interrior|\n|line_color|(str) color of outline of oval|\n|line_width|(int) width of the line around the oval, the outline, in pixels|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the oval |\n\n### draw_point\n\nDraws a \"dot\" at the point you specify using the USER'S coordinate system\n\n```\ndraw_point(point,\n    size=2,\n    color=\"black\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|point|Union [Tuple[int, int], Tuple[float, float]] Center location using USER'S coordinate system|\n|size|Union[int, float] Radius? (Or is it the diameter?) in user's coordinate values.|\n|color|(str) color of the point to draw|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the point |\n\n### draw_rectangle\n\nDraw a rectangle given 2 points. Can control the line and fill colors\n\n```\ndraw_rectangle(top_left,\n    bottom_right,\n    fill_color=None,\n    line_color=None,\n    line_width=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|top_left|Union[Tuple[int, int], Tuple[float, float]] the top left point of rectangle|\n|bottom_right|Union[Tuple[int, int], Tuple[float, float]] the bottom right point of rectangle|\n|fill_color|(str) color of the interior|\n|line_color|(str) color of outline|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the rectangle |\n\n### draw_text\n\nDraw some text on your graph.  This is how you label graph number lines for example\n\n```\ndraw_text(text,\n    location,\n    color=\"black\",\n    font=None,\n    angle=0,\n    text_location=\"center\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) text to display|\n|location|Union[Tuple[int, int], Tuple[float, float]] location to place first letter|\n|color|(str) text color|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|angle|(float) Angle 0 to 360 to draw the text. Zero represents horizontal text|\n|text_location|(enum) \"anchor\" location for the text. Values start with TEXT_LOCATION_|\n|||\n| **return** | Union[int, None] id returned from tkinter that you'll need if you want to manipulate the text |\n\n### erase\n\nErase the Graph - Removes all figures previously \"drawn\" using the Graph methods (e.g. DrawText)\n\n```python\nerase()\n```\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_bounding_box\n\nGiven a figure, returns the upper left and lower right bounding box coordinates\n\n```\nget_bounding_box(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|a previously drawing figure|\n|||\n| **return** | Union[Tuple[int, int, int, int], Tuple[float, float, float, float]] (upper left x, upper left y, lower right x, lower right y |\n\n### get_figures_at_location\n\nReturns a list of figures located at a particular x,y location within the Graph\n\n```\nget_figures_at_location(location)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|location|Union[Tuple[int, int], Tuple[float, float]] point to check|\n|||\n| **return** | List[int] a list of previously drawn \"Figures\" (returned from the drawing primitives) |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### move\n\nMoves the entire drawing area (the canvas) by some delta from the current position.  Units are indicated in your coordinate system indicated number of ticks in your coordinate system\n\n```\nmove(x_direction, y_direction)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|x_direction|Union[int, float] how far to move in the \"X\" direction in your coordinates|\n|y_direction|Union[int, float] how far to move in the \"Y\" direction in your coordinates|\n\n### move_figure\n\nMoves a previously drawn figure using a \"delta\" from current position\n\n```\nmove_figure(figure,\n    x_direction,\n    y_direction)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(id) Previously obtained figure-id. These are returned from all Draw methods|\n|x_direction|Union[int, float] delta to apply to position in the X direction|\n|y_direction|Union[int, float] delta to apply to position in the Y direction|\n\n### relocate_figure\n\nMove a previously made figure to an arbitrary (x,y) location. This differs from the Move methods because it\nuses absolute coordinates versus relative for Move\n\n```\nrelocate_figure(figure,\n    x,\n    y)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(id) Previously obtained figure-id. These are returned from all Draw methods|\n|x|Union[int, float] location on X axis (in user coords) to move the upper left corner of the figure|\n|y|Union[int, float] location on Y axis (in user coords) to move the upper left corner of the figure|\n\n### send_figure_to_back\n\nChanges Z-order of figures on the Graph.  Sends the indicated figure to the back of all other drawn figures\n\n```\nsend_figure_to_back(figure)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|figure|(int) value returned by tkinter when creating the figure / drawing|\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### tk_canvas\n\n#### property: tk_canvas\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Graph Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(background_color=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|background_color|color of background|\n|visible|(bool) control visibility of element|\n\n## Image Element\n\n    Image Element - show an image in the window. Should be a GIF or a PNG only\n\n```\nImage(filename=None,\n    data=None,\n    background_color=None,\n    size=(None, None),\n    pad=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    enable_events=False,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) image filename if there is a button image. GIFs and PNGs only.|\n|data|Union[bytes, str] Raw or Base64 representation of the image to put on button. Choose either filename or data|\n|background_color|color of background|\n|size|Tuple[int, int] (width, height) size of image in pixels|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|enable_events|(bool) Turns on the element specific events. For an Image element, the event is \"image clicked\"|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Image Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(filename=None,\n    data=None,\n    size=(None, None),\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) filename to the new image to display.|\n|data|Union[str, tkPhotoImage] Base64 encoded string OR a tk.PhotoImage object|\n|size|Tuple[int,int] size of a image (w,h) w=characters-wide, h=rows-high|\n|visible|(bool) control visibility of element|\n\n### UpdateAnimation\n\nShow an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.\nNOTE - does NOT perform a sleep call to delay\n\n```\nUpdateAnimation(source, time_between_frames=0)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|source|Union[str,bytes] Filename or Base64 encoded string containing Animated GIF|\n|time_between_frames|(int) Number of milliseconds to wait between showing frames|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Image Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(filename=None,\n    data=None,\n    size=(None, None),\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) filename to the new image to display.|\n|data|Union[str, tkPhotoImage] Base64 encoded string OR a tk.PhotoImage object|\n|size|Tuple[int,int] size of a image (w,h) w=characters-wide, h=rows-high|\n|visible|(bool) control visibility of element|\n\n### update_animation\n\nShow an Animated GIF. Call the function as often as you like. The function will determine when to show the next frame and will automatically advance to the next frame at the right time.\nNOTE - does NOT perform a sleep call to delay\n\n```\nupdate_animation(source, time_between_frames=0)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|source|Union[str,bytes] Filename or Base64 encoded string containing Animated GIF|\n|time_between_frames|(int) Number of milliseconds to wait between showing frames|\n\n## InputText Element\n\n    Display a single text input field.  Based on the tkinter Widget `Entry`\n\n```\nInputText(default_text=\"\",\n    size=(None, None),\n    disabled=False,\n    password_char=\"\",\n    justification=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    tooltip=None,\n    change_submits=False,\n    enable_events=False,\n    do_not_clear=True,\n    key=None,\n    focus=False,\n    pad=None,\n    use_readonly_for_disable=True,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|default_text|(str) Text initially shown in the input box as a default value(Default value = '')|\n|size|Tuple[int, int] (width, height) w=characters-wide, h=rows-high|\n|disabled|(bool) set disable state for element (Default = False)|\n|password_char|(char) Password character if this is a password field (Default value = '')|\n|justification|(str) justification for data display. Valid choices - left, right, center|\n|background_color|(str) color of background in one of the color formats|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|change_submits|(bool) * DEPRICATED DO NOT USE! Same as enable_events|\n|enable_events|(bool) If True then changes to this element are immediately reported as an event. Use this instead of change_submits (Default = False)|\n|do_not_clear|(bool) If False then the field will be set to blank after ANY event (button, any event) (Default = True)|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|focus|(bool) Determines if initial focus should go to this element.|\n|pad|(int, int) or ((int, int), (int, int)) Tuple(s). Amount of padding to put around element. Normally (horizontal pixels, vertical pixels) but can be split apart further into ((horizontal left, horizontal right), (vertical above, vertical below))|\n|use_readonly_for_disable|(bool) If True (the default) tkinter state set to 'readonly'. Otherwise state set to 'disabled'|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element (Default = True)|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nRead and return the current value of the input element. Must call `Window.Read` or `Window.Finalize` prior\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) current value of Input field or '' if error encountered |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Input Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    disabled=None,\n    select=None,\n    visible=None,\n    text_color=None,\n    background_color=None,\n    move_cursor_to=\"end\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to display as default text in Input field|\n|disabled|(bool) disable or enable state of the element (sets Entry Widget to readonly or normal)|\n|select|(bool) if True, then the text will be selected|\n|visible|(bool) change visibility of element|\n|text_color|(str) change color of text being typed|\n|background_color|(str) change color of the background|\n|move_cursor_to|Union[int, str] Moves the cursor to a particular offset. Defaults to 'end'|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nRead and return the current value of the input element. Must call `Window.Read` or `Window.Finalize` prior\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) current value of Input field or '' if error encountered |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Input Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    disabled=None,\n    select=None,\n    visible=None,\n    text_color=None,\n    background_color=None,\n    move_cursor_to=\"end\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to display as default text in Input field|\n|disabled|(bool) disable or enable state of the element (sets Entry Widget to readonly or normal)|\n|select|(bool) if True, then the text will be selected|\n|visible|(bool) change visibility of element|\n|text_color|(str) change color of text being typed|\n|background_color|(str) change color of the background|\n|move_cursor_to|Union[int, str] Moves the cursor to a particular offset. Defaults to 'end'|\n\n## Listbox Element\n\n    A List Box.  Provide a list of values for the user to choose one or more of.   Returns a list of selected rows\n    when a window.Read() is executed.\n\n```\nListbox(values,\n    default_values=None,\n    select_mode=None,\n    change_submits=False,\n    enable_events=False,\n    bind_return_key=False,\n    size=(None, None),\n    disabled=False,\n    auto_size_text=None,\n    font=None,\n    no_scrollbar=False,\n    background_color=None,\n    text_color=None,\n    key=None,\n    pad=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] list of values to display. Can be any type including mixed types as long as they have __str__ method|\n|default_values|List[Any] which values should be initially selected|\n|select_mode|[enum] Select modes are used to determine if only 1 item can be selected or multiple and how they can be selected. Valid choices begin with \"LISTBOX_SELECT_MODE_\" and include: LISTBOX_SELECT_MODE_SINGLE LISTBOX_SELECT_MODE_MULTIPLE LISTBOX_SELECT_MODE_BROWSE LISTBOX_SELECT_MODE_EXTENDED|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Listbox generates events when an item is clicked|\n|bind_return_key|(bool) If True, then the return key will cause a the Listbox to generate an event|\n|size|Tuple(int, int) (width, height) width = characters-wide, height = rows-high|\n|disabled|(bool) set disable state for element|\n|auto_size_text|(bool) True if element should be the same size as the contents|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### GetIndexes\n\nReturns the items currently selected as a list of indexes\n\n`GetIndexes()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[int] A list of offsets into values that is currently selected |\n\n### GetListValues\n\nReturns list of Values provided by the user in the user's format\n\n`GetListValues()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[Any]. List of values. Can be any / mixed types -> [] |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### SetValue\n\nSet listbox highlighted choices\n\n```\nSetValue(values)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] new values to choose based on previously set values|\n\n### Update\n\nChanges some of the settings for the Listbox Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(values=None,\n    disabled=None,\n    set_to_index=None,\n    scroll_to_index=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] new list of choices to be shown to user|\n|disabled|(bool) disable or enable state of the element|\n|set_to_index|Union[int, list, tuple] highlights the item(s) indicated. If parm is an int one entry will be set. If is a list, then each entry in list is highlighted|\n|scroll_to_index|(int) scroll the listbox so that this index is the first shown|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_indexes\n\nReturns the items currently selected as a list of indexes\n\n`get_indexes()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[int] A list of offsets into values that is currently selected |\n\n### get_list_values\n\nReturns list of Values provided by the user in the user's format\n\n`get_list_values()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[Any]. List of values. Can be any / mixed types -> [] |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### set_value\n\nSet listbox highlighted choices\n\n```\nset_value(values)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] new values to choose based on previously set values|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Listbox Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(values=None,\n    disabled=None,\n    set_to_index=None,\n    scroll_to_index=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] new list of choices to be shown to user|\n|disabled|(bool) disable or enable state of the element|\n|set_to_index|Union[int, list, tuple] highlights the item(s) indicated. If parm is an int one entry will be set. If is a list, then each entry in list is highlighted|\n|scroll_to_index|(int) scroll the listbox so that this index is the first shown|\n|visible|(bool) control visibility of element|\n\n## Menu Element\n\n    Menu Element is the Element that provides a Menu Bar that goes across the top of the window, just below titlebar.\n    Here is an example layout.  The \"&\" are shortcut keys ALT+key.\n    Is a List of -  \"Item String\" + List\n    Where Item String is what will be displayed on the Menubar itself.\n    The List that follows the item represents the items that are shown then Menu item is clicked\n    Notice how an \"entry\" in a mennu can be a list which means it branches out and shows another menu, etc. (resursive)\n    menu_def = [['&File', ['!&Open', '&Save::savekey', '---', '&Properties', 'E&xit']],\n                ['!&Edit', ['!&Paste', ['Special', 'Normal', ], 'Undo'], ],\n                ['&Debugger', ['Popout', 'Launch Debugger']],\n                ['&Toolbar', ['Command &1', 'Command &2', 'Command &3', 'Command &4']],\n                ['&Help', '&About...'], ]\n    Finally, \"keys\" can be added to entries so make them unique.  The \"Save\" entry has a key associated with it. You\n    can see it has a \"::\" which signifies the beginning of a key.  The user will not see the key portion when the\n    menu is shown.  The key portion is returned as part of the event.\n\n```\nMenu(menu_definition,\n    background_color=None,\n    size=(None, None),\n    tearoff=False,\n    pad=None,\n    key=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|menu_definition|List[List[Tuple[str, List[str]]]|\n|background_color|(str) color of the background|\n|size|Tuple[int, int] Not used in the tkinter port|\n|tearoff|(bool) if True, then can tear the menu off from the window ans use as a floating window. Very cool effect|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nUpdate a menubar - can change the menu definition and visibility.  The entire menu has to be specified\n\n```\nUpdate(menu_definition=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|menu_definition|List[List[Tuple[str, List[str]]]|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nUpdate a menubar - can change the menu definition and visibility.  The entire menu has to be specified\n\n```\nupdate(menu_definition=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|menu_definition|List[List[Tuple[str, List[str]]]|\n|visible|(bool) control visibility of element|\n\n## Multiline Element\n\n    Multiline Element - Display and/or read multiple lines of text.  This is both an input and output element.\n    Other PySimpleGUI ports have a separate MultilineInput and MultilineOutput elements.  May want to split this\n    one up in the future too.\n\n```\nMultiline(default_text=\"\",\n    enter_submits=False,\n    disabled=False,\n    autoscroll=False,\n    border_width=None,\n    size=(None, None),\n    auto_size_text=None,\n    background_color=None,\n    text_color=None,\n    change_submits=False,\n    enable_events=False,\n    do_not_clear=True,\n    key=None,\n    focus=False,\n    font=None,\n    pad=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|default_text|(str) Initial text to show|\n|enter_submits|(bool) if True, the Window.Read call will return is enter key is pressed in this element|\n|disabled|(bool) set disable state|\n|autoscroll|(bool) If True the contents of the element will automatically scroll as more data added to the end|\n|border_width|(int) width of border around element in pixels|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) if True will size the element to match the length of the text|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Spin events happen when an item changes|\n|do_not_clear|if False the element will be cleared any time the Window.Read call returns|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|focus|(bool) if True initial focus will go to this element|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nReturn current contents of the Multiline Element\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) current contents of the Multiline Element (used as an input type of Multiline |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Multiline Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    disabled=None,\n    append=False,\n    font=None,\n    text_color=None,\n    background_color=None,\n    text_color_for_value=None,\n    background_color_for_value=None,\n    visible=None,\n    autoscroll=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to display|\n|disabled|(bool) disable or enable state of the element|\n|append|(bool) if True then new value will be added onto the end of the current value. if False then contents will be replaced.|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|visible|(bool) set visibility state of the element|\n|autoscroll|(bool) if True then contents of element are scrolled down when new text is added to the end|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nReturn current contents of the Multiline Element\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) current contents of the Multiline Element (used as an input type of Multiline |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Multiline Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    disabled=None,\n    append=False,\n    font=None,\n    text_color=None,\n    background_color=None,\n    text_color_for_value=None,\n    background_color_for_value=None,\n    visible=None,\n    autoscroll=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to display|\n|disabled|(bool) disable or enable state of the element|\n|append|(bool) if True then new value will be added onto the end of the current value. if False then contents will be replaced.|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|visible|(bool) set visibility state of the element|\n|autoscroll|(bool) if True then contents of element are scrolled down when new text is added to the end|\n\n## OptionMenu Element\n\n    Option Menu is an Element available ONLY on the tkinter port of PySimpleGUI.  It's is a widget that is unique\n    to tkinter.  However, it looks much like a ComboBox.  Instead of an arrow to click to pull down the list of\n    choices, another little graphic is shown on the widget to indicate where you click.  After clicking to activate,\n    it looks like a Combo Box that you scroll to select a choice.\n\n```\nOptionMenu(values,\n    default_value=None,\n    size=(None, None),\n    disabled=False,\n    auto_size_text=None,\n    background_color=None,\n    text_color=None,\n    key=None,\n    pad=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] Values to be displayed|\n|default_value|(Any) the value to choose by default|\n|size|Tuple[int, int] (width, height) size in characters (wide) and rows (high)|\n|disabled|(bool) control enabled / disabled|\n|auto_size_text|(bool) True if size of Element should match the contents of the items|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text that will appear when mouse hovers over this element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the OptionMenu Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    values=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) the value to choose by default|\n|values|List[Any] Values to be displayed|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the OptionMenu Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    values=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) the value to choose by default|\n|values|List[Any] Values to be displayed|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n## Output Element\n\n    Output Element - a multi-lined text area where stdout and stderr are re-routed to.\n\n```\nOutput(size=(None, None),\n    background_color=None,\n    text_color=None,\n    pad=None,\n    font=None,\n    tooltip=None,\n    key=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nReturns the current contents of the output.  Similar to Get method other Elements\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (str) the current value of the output |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### TKOut\n\n#### property: TKOut\n\n### Update\n\nChanges some of the settings for the Output Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) string that will replace current contents of the output area|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False, expand_y=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### tk_out\n\n#### property: tk_out\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Output Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) string that will replace current contents of the output area|\n|visible|(bool) control visibility of element|\n\n## Pane Element\n\n    A sliding Pane that is unique to tkinter.  Uses Columns to create individual panes\n\n```\nPane(pane_list,\n    background_color=None,\n    size=(None, None),\n    pad=None,\n    orientation=\"vertical\",\n    show_handle=True,\n    relief=\"raised\",\n    handle_size=None,\n    border_width=None,\n    key=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|pane_list|List[Column] Must be a list of Column Elements. Each Column supplied becomes one pane that's shown|\n|background_color|(str) color of background|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high How much room to reserve for the Pane|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|orientation|(str) 'horizontal' or 'vertical' or ('h' or 'v'). Direction the Pane should slide|\n|show_handle|(bool) if True, the handle is drawn that makes it easier to grab and slide|\n|relief|(enum) relief style. Values are same as other elements that use relief values. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID|\n|handle_size|(int) Size of the handle in pixels|\n|border_width|(int) width of border around element in pixels|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Pane Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Pane Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n## ProgressBar Element\n\n    Progress Bar Element - Displays a colored bar that is shaded as progress of some operation is made\n\n```\nProgressBar(max_value,\n    orientation=None,\n    size=(None, None),\n    auto_size_text=None,\n    bar_color=(None, None),\n    style=None,\n    border_width=None,\n    relief=None,\n    key=None,\n    pad=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|max_value|(int) max value of progressbar|\n|orientation|(str) 'horizontal' or 'vertical'|\n|size|Tuple[int, int] Size of the bar. If horizontal (chars wide, pixels high), vert (pixels wide, rows high)|\n|auto_size_text|(bool) Not sure why this is here|\n|bar_color|Tuple[str, str] The 2 colors that make up a progress bar. One is the background, the other is the bar|\n|style|(str) Progress bar style defined as one of these 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'|\n|border_width|(int) The amount of pixels that go around the outside of the bar|\n|relief|(str) relief style. Values are same as progress meter relief values. Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID` (Default value = DEFAULT_PROGRESS_BAR_RELIEF)|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the ProgressBar Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n### UpdateBar\n\nChange what the bar shows by changing the current count and optionally the max count\n\n```\nUpdateBar(current_count, max=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|current_count|(int) sets the current value|\n|max|(int) changes the max value|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the ProgressBar Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|visible|(bool) control visibility of element|\n\n### update_bar\n\nChange what the bar shows by changing the current count and optionally the max count\n\n```\nupdate_bar(current_count, max=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|current_count|(int) sets the current value|\n|max|(int) changes the max value|\n\n## Radio Element\n\n    Radio Button Element - Used in a group of other Radio Elements to provide user with ability to select only\n    1 choice in a list of choices.\n\n```\nRadio(text,\n    group_id,\n    default=False,\n    disabled=False,\n    size=(None, None),\n    auto_size_text=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    key=None,\n    pad=None,\n    tooltip=None,\n    change_submits=False,\n    enable_events=False,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) Text to display next to button|\n|group_id|(Any) Groups together multiple Radio Buttons. Any type works|\n|default|(bool). Set to True for the one element of the group you want initially selected|\n|disabled|(bool) set disable state|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) if True will size the element to match the length of the text|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Radio Button events happen when an item is selected|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nA snapshot of the value of Radio Button -> (bool)\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (bool) True if this radio button is selected |\n\n### ResetGroup\n\nSets all Radio Buttons in the group to not selected\n\n```python\nResetGroup()\n```\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Radio Button Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(bool) if True change to selected and set others in group to unselected|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nA snapshot of the value of Radio Button -> (bool)\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (bool) True if this radio button is selected |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### reset_group\n\nSets all Radio Buttons in the group to not selected\n\n```python\nreset_group()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Radio Button Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(bool) if True change to selected and set others in group to unselected|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n## Slider Element\n\n    A slider, horizontal or vertical\n\n```\nSlider(range=(None, None),\n    default_value=None,\n    resolution=None,\n    tick_interval=None,\n    orientation=None,\n    disable_number_display=False,\n    border_width=None,\n    relief=None,\n    change_submits=False,\n    enable_events=False,\n    disabled=False,\n    size=(None, None),\n    font=None,\n    background_color=None,\n    text_color=None,\n    key=None,\n    pad=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|range|Union[Tuple[int, int], Tuple[float, float]] slider's range (min value, max value)|\n|default_value|Union[int, float] starting value for the slider|\n|resolution|Union[int, float] the smallest amount the slider can be moved|\n|tick_interval|Union[int, float] how often a visible tick should be shown next to slider|\n|orientation|(str) 'horizontal' or 'vertical' ('h' or 'v' also work)|\n|disable_number_display|(bool) if True no number will be displayed by the Slider Element|\n|border_width|(int) width of border around element in pixels|\n|relief|(enum) relief style. RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID|\n|change_submits|(bool) * DEPRICATED DO NOT USE! Same as enable_events|\n|enable_events|(bool) If True then moving the slider will generate an Event|\n|disabled|(bool) set disable state for element|\n|size|Tuple[int, int] (width in characters, height in rows)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|background_color|(str) color of slider's background|\n|text_color|(str) color of the slider's text|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Slider Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    range=(None, None),\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|Union[int, float] sets current slider value|\n|range|Union[Tuple[int, int], Tuple[float, float] Sets a new range for slider|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Slider Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    range=(None, None),\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|Union[int, float] sets current slider value|\n|range|Union[Tuple[int, int], Tuple[float, float] Sets a new range for slider|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n## Spin Element\n\n    A spinner with up/down buttons and a single line of text. Choose 1 values from list\n\n```\nSpin(values,\n    initial_value=None,\n    disabled=False,\n    change_submits=False,\n    enable_events=False,\n    size=(None, None),\n    auto_size_text=None,\n    font=None,\n    background_color=None,\n    text_color=None,\n    key=None,\n    pad=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[Any] List of valid values|\n|initial_value|(Any) Initial item to show in window. Choose from list of values supplied|\n|disabled|(bool) set disable state|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Spin events happen when an item changes|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) if True will size the element to match the length of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nReturn the current chosen value showing in spinbox.\nThis value will be the same as what was provided as list of choices.  If list items are ints, then the\nitem returned will be an int (not a string)\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Any) The currently visible entry |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Spin Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    values=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) set the current value from list of choices|\n|values|List[Any] set available choices|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nReturn the current chosen value showing in spinbox.\nThis value will be the same as what was provided as list of choices.  If list items are ints, then the\nitem returned will be an int (not a string)\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Any) The currently visible entry |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Spin Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    values=None,\n    disabled=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(Any) set the current value from list of choices|\n|values|List[Any] set available choices|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n## StatusBar Element\n\n    A StatusBar Element creates the sunken text-filled strip at the bottom. Many Windows programs have this line\n\n```\nStatusBar(text,\n    size=(None, None),\n    auto_size_text=None,\n    click_submits=None,\n    enable_events=False,\n    relief=\"sunken\",\n    font=None,\n    text_color=None,\n    background_color=None,\n    justification=None,\n    pad=None,\n    key=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) Text that is to be displayed in the widget|\n|size|Tuple[(int), (int)] (w,h) w=characters-wide, h=rows-high|\n|auto_size_text|(bool) True if size should fit the text length|\n|click_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. StatusBar events occur when the bar is clicked|\n|relief|(enum) relief style. Values are same as progress meter relief values. Can be a constant or a string: `RELIEF_RAISED RELIEF_SUNKEN RELIEF_FLAT RELIEF_RIDGE RELIEF_GROOVE RELIEF_SOLID`|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|justification|(str) how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Status Bar Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to show|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) set visibility state of the element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Status Bar Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to show|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) set visibility state of the element|\n\n## Tab Element\n\n    Tab Element is another \"Container\" element that holds a layout and displays a tab with text. Used with TabGroup only\n    Tabs are never placed directly into a layout.  They are always \"Contained\" in a TabGroup layout\n\n```\nTab(title,\n    layout,\n    title_color=None,\n    background_color=None,\n    font=None,\n    pad=None,\n    disabled=False,\n    border_width=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    element_justification=\"left\",\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|title|(str) text to show on the tab|\n|layout|List[List[Element]] The element layout that will be shown in the tab|\n|title_color|(str) color of the tab text (note not currently working on tkinter)|\n|background_color|(str) color of background of the entire layout|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|disabled|(bool) If True button will be created disabled|\n|border_width|(int) width of border around element in pixels|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|element_justification|(str) All elements inside the Tab will have this justification 'left', 'right', 'center' are valid values|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Select\n\nCreate a tkinter event that mimics user clicking on a tab. Must have called window.Finalize / Read first!\n\n```python\nSelect()\n```\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Tab Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(disabled=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### select\n\nCreate a tkinter event that mimics user clicking on a tab. Must have called window.Finalize / Read first!\n\n```python\nselect()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Tab Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(disabled=None, visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|disabled|(bool) disable or enable state of the element|\n|visible|(bool) control visibility of element|\n\n## TabGroup Element\n\n    TabGroup Element groups together your tabs into the group of tabs you see displayed in your window\n\n```\nTabGroup(layout,\n    tab_location=None,\n    title_color=None,\n    tab_background_color=None,\n    selected_title_color=None,\n    selected_background_color=None,\n    background_color=None,\n    font=None,\n    change_submits=False,\n    enable_events=False,\n    pad=None,\n    border_width=None,\n    theme=None,\n    key=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|layout|List[List[Tab]] Layout of Tabs. Different than normal layouts. ALL Tabs should be on first row|\n|tab_location|(str) location that tabs will be displayed. Choices are left, right, top, bottom, lefttop, leftbottom, righttop, rightbottom, bottomleft, bottomright, topleft, topright|\n|title_color|(str) color of text on tabs|\n|tab_background_color|(str) color of all tabs that are not selected|\n|selected_title_color|(str) color of tab text when it is selected|\n|selected_background_color|(str) color of tab when it is selected|\n|background_color|(str) color of background area that tabs are located on|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|change_submits|(bool) * DEPRICATED DO NOT USE! Same as enable_events|\n|enable_events|(bool) If True then switching tabs will generate an Event|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|border_width|(int) width of border around element in pixels|\n|theme|(enum) DEPRICATED - You can only specify themes using set options or when window is created. It's not possible to do it on an element basis|\n|key|(any) Value that uniquely identifies this element from all other elements. Used when Finding an element or in return values. Must be unique to the window|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### FindKeyFromTabName\n\nSearches through the layout to find the key that matches the text on the tab. Implies names should be unique\n\n```\nFindKeyFromTabName(tab_name)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tab_name||\n|||\n| **return** | Union[key, None] Returns the key or None if no key found |\n\n### Get\n\nReturns the current value for the Tab Group, which will be the currently selected tab's KEY or the text on\nthe tab if no key is defined.  Returns None if an error occurs.\nNote that this is exactly the same data that would be returned from a call to Window.Read. Are you sure you\nare using this method correctly?\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Any, None] The key of the currently selected tab or the tab's text if it has no key |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### find_key_from_tab_name\n\nSearches through the layout to find the key that matches the text on the tab. Implies names should be unique\n\n```\nfind_key_from_tab_name(tab_name)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tab_name||\n|||\n| **return** | Union[key, None] Returns the key or None if no key found |\n\n### get\n\nReturns the current value for the Tab Group, which will be the currently selected tab's KEY or the text on\nthe tab if no key is defined.  Returns None if an error occurs.\nNote that this is exactly the same data that would be returned from a call to Window.Read. Are you sure you\nare using this method correctly?\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Any, None] The key of the currently selected tab or the tab's text if it has no key |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### layout\n\nCan use like the Window.Layout method, but it's better to use the layout parameter when creating\n\n```\nlayout(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Element]] The rows of Elements|\n|||\n| **return** | (Frame) Used for chaining |\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n## Table Element\n\n```\nTable(values,\n    headings=None,\n    visible_column_map=None,\n    col_widths=None,\n    def_col_width=10,\n    auto_size_columns=True,\n    max_col_width=20,\n    select_mode=None,\n    display_row_numbers=False,\n    num_rows=None,\n    row_height=None,\n    font=None,\n    justification=\"right\",\n    text_color=None,\n    background_color=None,\n    alternating_row_color=None,\n    header_text_color=None,\n    header_background_color=None,\n    header_font=None,\n    row_colors=None,\n    vertical_scroll_only=True,\n    hide_vertical_scroll=False,\n    size=(None, None),\n    change_submits=False,\n    enable_events=False,\n    bind_return_key=False,\n    pad=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[List[Union[str, int, float]]]|\n|headings|List[str] The headings to show on the top line|\n|visible_column_map|List[bool] One entry for each column. False indicates the column is not shown|\n|col_widths|List[int] Number of characters that each column will occupy|\n|def_col_width|(int) Default column width in characters|\n|auto_size_columns|(bool) if True columns will be sized automatically|\n|max_col_width|(int) Maximum width for all columns in characters|\n|select_mode|(enum) Select Mode. Valid values start with \"TABLE_SELECT_MODE_\". Valid values are: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED|\n|display_row_numbers|(bool) if True, the first column of the table will be the row #|\n|num_rows|(int) The number of rows of the table to display at a time|\n|row_height|(int) height of a single row in pixels|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|justification|(str) 'left', 'right', 'center' are valid choices|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|alternating_row_color|(str) if set then every other row will have this color in the background.|\n|header_text_color|(str) sets the text color for the header|\n|header_background_color|(str) sets the background color for the header|\n|header_font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|row_colors|List[Union[Tuple[int, str], Tuple[Int, str, str]] list of tuples of (row, background color) OR (row, foreground color, background color). Sets the colors of listed rows to the color(s) provided (note the optional foreground color)|\n|vertical_scroll_only|(bool) if True only the vertical scrollbar will be visible|\n|hide_vertical_scroll|(bool) if True vertical scrollbar will be hidden|\n|size|Tuple[int, int] DO NOT USE! Use num_rows instead|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Table events happen when row is clicked|\n|bind_return_key|(bool) if True, pressing return key will cause event coming from Table, ALSO a left button double click will generate an event if this parameter is True|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### Get\n\nDummy function for tkinter port.  In the Qt port you can read back the values in the table in case they were\nedited.  Don't know yet how to enable editing of a Tree in tkinter so just returning the values provided by\nuser when Table was created or Updated.\n\n`Get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[List[Any]] the current table values (for now what was originally provided up updated) |\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Table Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(values=None,\n    num_rows=None,\n    visible=None,\n    select_rows=None,\n    alternating_row_color=None,\n    row_colors=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[List[Union[str, int, float]]] A new 2-dimensional table to show|\n|num_rows|(int) How many rows to display at a time|\n|visible|(bool) if True then will be visible|\n|select_rows|List[int] List of rows to select as if user did|\n|alternating_row_color|(str) the color to make every other row|\n|row_colors|List[Union[Tuple[int, str], Tuple[Int, str, str]] list of tuples of (row, background color) OR (row, foreground color, background color). Changes the colors of listed rows to the color(s) provided (note the optional foreground color)|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get\n\nDummy function for tkinter port.  In the Qt port you can read back the values in the table in case they were\nedited.  Don't know yet how to enable editing of a Tree in tkinter so just returning the values provided by\nuser when Table was created or Updated.\n\n`get()`\n\n|Name|Meaning|\n|---|---|\n| **return** | List[List[Any]] the current table values (for now what was originally provided up updated) |\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Table Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(values=None,\n    num_rows=None,\n    visible=None,\n    select_rows=None,\n    alternating_row_color=None,\n    row_colors=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|List[List[Union[str, int, float]]] A new 2-dimensional table to show|\n|num_rows|(int) How many rows to display at a time|\n|visible|(bool) if True then will be visible|\n|select_rows|List[int] List of rows to select as if user did|\n|alternating_row_color|(str) the color to make every other row|\n|row_colors|List[Union[Tuple[int, str], Tuple[Int, str, str]] list of tuples of (row, background color) OR (row, foreground color, background color). Changes the colors of listed rows to the color(s) provided (note the optional foreground color)|\n\n## Text Element\n\n    Text - Display some text in the window.  Usually this means a single line of text.  However, the text can also be multiple lines.  If multi-lined there are no scroll bars.\n\n```\nText(text=\"\",\n    size=(None, None),\n    auto_size_text=None,\n    click_submits=False,\n    enable_events=False,\n    relief=None,\n    font=None,\n    text_color=None,\n    background_color=None,\n    border_width=None,\n    justification=None,\n    pad=None,\n    key=None,\n    right_click_menu=None,\n    tooltip=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|text|(str) The text to display. Can include /n to achieve multiple lines|\n|size|Tuple[int, int] (width, height) width = characters-wide, height = rows-high|\n|auto_size_text|(bool) if True size of the Text Element will be sized to fit the string provided in 'text' parm|\n|click_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Text events happen when the text is clicked|\n|relief|(str/enum) relief style around the text. Values are same as progress meter relief values. Should be a constant that is defined at starting with \"RELIEF_\" - `RELIEF_RAISED, RELIEF_SUNKEN, RELIEF_FLAT, RELIEF_RIDGE, RELIEF_GROOVE, RELIEF_SOLID`|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|border_width|(int) number of pixels for the border (if using a relief)|\n|justification|(str) how string should be aligned within space provided by size. Valid choices = `left`, `right`, `center`|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Text Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(value=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to show|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) set visibility state of the element|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Text Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(value=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|value|(str) new text to show|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|visible|(bool) set visibility state of the element|\n\n## ToolTip Element\n\n    Create a tooltip for a given widget\n    (inspired by https://stackoverflow.com/a/36221216)\n    This is an INTERNALLY USED only class.  Users should not refer to this class at all.\n\n```\nToolTip(widget,\n    text,\n    timeout=400)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|widget|(widget type varies) The tkinter widget|\n|text|(str) text for the tooltip. It can inslude|\n|timeout|(int) Time in milliseconds that mouse must remain still before tip is shown|\n\n### enter\n\nCalled by tkinter when mouse enters a widget\n\n```\nenter(event=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|from tkinter. Has x,y coordinates of mouse|\n\n### hidetip\n\nDestroy the tooltip window\n\n```python\nhidetip()\n```\n\n### leave\n\nCalled by tktiner when mouse exits a widget\n\n```\nleave(event=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|from tkinter. Event info that's not used by function.|\n\n### schedule\n\nSchedule a timer to time how long mouse is hovering\n\n```python\nschedule()\n```\n\n### showtip\n\nCreates a topoltip window with the tooltip text inside of it\n\n```python\nshowtip()\n```\n\n### unschedule\n\nCancel timer used to time mouse hover\n\n```python\nunschedule()\n```\n\n## Tree Element\n\n    Tree Element - Presents data in a tree-like manner, much like a file/folder browser.  Uses the TreeData class\n    to hold the user's data and pass to the element for display.\n\n```\nTree(data=None,\n    headings=None,\n    visible_column_map=None,\n    col_widths=None,\n    col0_width=10,\n    def_col_width=10,\n    auto_size_columns=True,\n    max_col_width=20,\n    select_mode=None,\n    show_expanded=False,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    justification=\"right\",\n    text_color=None,\n    background_color=None,\n    header_text_color=None,\n    header_background_color=None,\n    header_font=None,\n    num_rows=None,\n    row_height=None,\n    pad=None,\n    key=None,\n    tooltip=None,\n    right_click_menu=None,\n    visible=True,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|data|(TreeData) The data represented using a PySimpleGUI provided TreeData class|\n|headings|List[str] List of individual headings for each column|\n|visible_column_map|List[bool] Determines if a column should be visible. If left empty, all columns will be shown|\n|col_widths|List[int] List of column widths so that individual column widths can be controlled|\n|col0_width|(int) Size of Column 0 which is where the row numbers will be optionally shown|\n|def_col_width|(int) default column width|\n|auto_size_columns|(bool) if True, the size of a column is determined using the contents of the column|\n|max_col_width|(int) the maximum size a column can be|\n|select_mode|(enum) Use same values as found on Table Element. Valid values include: TABLE_SELECT_MODE_NONE TABLE_SELECT_MODE_BROWSE TABLE_SELECT_MODE_EXTENDED|\n|show_expanded|(bool) if True then the tree will be initially shown with all nodes completely expanded|\n|change_submits|(bool) DO NOT USE. Only listed for backwards compat - Use enable_events instead|\n|enable_events|(bool) Turns on the element specific events. Tree events happen when row is clicked|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|justification|(str) 'left', 'right', 'center' are valid choices|\n|text_color|(str) color of the text|\n|background_color|(str) color of background|\n|header_text_color|(str) sets the text color for the header|\n|header_background_color|(str) sets the background color for the header|\n|header_font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|num_rows|(int) The number of rows of the table to display at a time|\n|row_height|(int) height of a single row in pixels|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element to uniquely identify this element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|visible|(bool) set visibility state of the element|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### Update\n\nChanges some of the settings for the Tree Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nUpdate(values=None,\n    key=None,\n    value=None,\n    text=None,\n    icon=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|(TreeData) Representation of the tree|\n|key|(Any) identifies a particular item in tree to update|\n|value|(Any) sets the node identified by key to a particular value|\n|text|(str) sets the node identified by ket to this string|\n|icon|Union[bytes, str] can be either a base64 icon or a filename for the icon|\n|visible|(bool) control visibility of element|\n\n### add_treeview_data\n\nNot a user function.  Recursive method that inserts tree data into the tkinter treeview widget.\n\n```\nadd_treeview_data(node)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|node|(TreeData) The node to insert. Will insert all nodes from starting point downward, recursively|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### treeview_selected\n\nNot a user function.  Callback function that happens when an item is selected from the tree.  In this\nmethod, it saves away the reported selections so they can be properly returned.\n\n```\ntreeview_selected(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(Any) An event parameter passed in by tkinter. Not used|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n### update\n\nChanges some of the settings for the Tree Element. Must call `Window.Read` or `Window.Finalize` prior\n\n```\nupdate(values=None,\n    key=None,\n    value=None,\n    text=None,\n    icon=None,\n    visible=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values|(TreeData) Representation of the tree|\n|key|(Any) identifies a particular item in tree to update|\n|value|(Any) sets the node identified by key to a particular value|\n|text|(str) sets the node identified by ket to this string|\n|icon|Union[bytes, str] can be either a base64 icon or a filename for the icon|\n|visible|(bool) control visibility of element|\n\n## TreeData Element\n\n    Class that user fills in to represent their tree data. It's a very simple tree representation with a root \"Node\"\n    with possibly one or more children \"Nodes\".  Each Node contains a key, text to display, list of values to display\n    and an icon.  The entire tree is built using a single method, Insert.  Nothing else is required to make the tree.\n\nInstantiate the object, initializes the Tree Data, creates a root node for you\n\n```python\nTreeData()\n```\n\n### Insert\n\nInserts a node into the tree. This is how user builds their tree, by Inserting Nodes\nThis is the ONLY user callable method in the TreeData class\n\n```\nInsert(parent,\n    key,\n    text,\n    values,\n    icon=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|parent|(Node) the parent Node|\n|key|(Any) Used to uniquely identify this node|\n|text|(str) The text that is displayed at this node's location|\n|values|List[Any] The list of values that are displayed at this node|\n|icon|Union[str, bytes]|\n\n### Node\n\nContains information about the individual node in the tree\n\n```\nNode(parent,\n    key,\n    text,\n    values,\n    icon=None)\n```\n\n### insert\n\nInserts a node into the tree. This is how user builds their tree, by Inserting Nodes\nThis is the ONLY user callable method in the TreeData class\n\n```\ninsert(parent,\n    key,\n    text,\n    values,\n    icon=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|parent|(Node) the parent Node|\n|key|(Any) Used to uniquely identify this node|\n|text|(str) The text that is displayed at this node's location|\n|values|List[Any] The list of values that are displayed at this node|\n|icon|Union[str, bytes]|\n\n## VerticalSeparator Element\n\n    Vertical Separator Element draws a vertical line at the given location. It will span 1 \"row\". Usually paired with\n    Column Element if extra height is needed\n\n```\nVerticalSeparator(pad=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|pad|(int, int) or ((int, int),(int,int)) Amount of padding to put around element (left/right, top/bottom) or ((left, right), (top, bottom))|\n\n### ButtonReboundCallback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nButtonReboundCallback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### SetFocus\n\nSets the current focus to be on this element\n\n```\nSetFocus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### SetTooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nSetTooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### bind\n\nUsed to add tkinter events to an Element.\nThe tkinter specific data is in the Element's member variable user_bind_event\n\n```\nbind(bind_string, key_modifier)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key_modifier|Additional data to be added to the element's key when event is returned|\n\n### button_rebound_callback\n\n*** DEPRICATED ***\nUse Element.bind instead\n\n```\nbutton_rebound_callback(event)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|event|(unknown) Not used in this function.|\n\n### expand\n\nCauses the Element to expand to fill available space in the X and Y directions.  Can specify which or both directions\n\n```\nexpand(expand_x=False,\n    expand_y=False,\n    expand_row=True)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|expand_x|(Bool) If True Element will expand in the Horizontal directions|\n|expand_y|(Bool) If True Element will expand in the Vertical directions|\n|expand_row|(Bool) If True the row containing the element will also expand. Without this your element is \"trapped\" within the row|\n\n### get_size\n\nReturn the size of an element in Pixels.  Care must be taken as some elements use characters to specify their size but will return pixels when calling this get_size method.\n\n`get_size()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[int, int] - Width, Height of the element |\n\n### hide_row\n\nHide the entire row an Element is located on.\n        Use this if you must have all space removed when you are hiding an element, including the row container\n\n```python\nhide_row()\n```\n\n### set_focus\n\nSets the current focus to be on this element\n\n```\nset_focus(force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|force|(bool) if True will call focus_force otherwise calls focus_set|\n\n### set_size\n\nChanges the size of an element to a specific size.\nIt's possible to specify None for one of sizes so that only 1 of the element's dimensions are changed.\n\n```\nset_size(size=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|size|Tuple[int, int] The size in characters, rows typically. In some cases they are pixels|\n\n### set_tooltip\n\nCalled by application to change the tooltip text for an Element.  Normally invoked using the Element Object such as: window.Element('key').SetToolTip('New tip').\n\n```\nset_tooltip(tooltip_text)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|tooltip_text|(str) the text to show in tooltip.|\n\n### unhide_row\n\nUnhides (makes visible again) the row container that the Element is located on.\n        Note that it will re-appear at the bottom of the window / container, most likely.\n\n```python\nunhide_row()\n```\n\n## Window Element\n\n    Represents a single Window\n\n```\nWindow(title,\n    layout=None,\n    default_element_size=(45, 1),\n    default_button_element_size=(None, None),\n    auto_size_text=None,\n    auto_size_buttons=None,\n    location=(None, None),\n    size=(None, None),\n    element_padding=None,\n    margins=(None, None),\n    button_color=None,\n    font=None,\n    progress_bar_color=(None, None),\n    background_color=None,\n    border_depth=None,\n    auto_close=False,\n    auto_close_duration=3,\n    icon=None,\n    force_toplevel=False,\n    alpha_channel=1,\n    return_keyboard_events=False,\n    use_default_focus=True,\n    text_justification=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    resizable=False,\n    disable_close=False,\n    disable_minimize=False,\n    right_click_menu=None,\n    transparent_color=None,\n    debugger_enabled=True,\n    finalize=False,\n    element_justification=\"left\",\n    ttk_theme=None,\n    use_ttk_buttons=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|title|(str) The title that will be displayed in the Titlebar and on the Taskbar|\n|layout|List[List[Elements]] The layout for the window. Can also be specified in the Layout method|\n|default_element_size|Tuple[int, int] (width, height) size in characters (wide) and rows (high) for all elements in this window|\n|default_button_element_size|Tuple[int, int] (width, height) size in characters (wide) and rows (high) for all Button elements in this window|\n|auto_size_text|(bool) True if Elements in Window should be sized to exactly fir the length of text|\n|auto_size_buttons|(bool) True if Buttons in this Window should be sized to exactly fit the text on this.|\n|location|Tuple[int, int] (x,y) location, in pixels, to locate the upper left corner of the window on the screen. Default is to center on screen.|\n|size|Tuple[int, int] (width, height) size in pixels for this window. Normally the window is autosized to fit contents, not set to an absolute size by the user|\n|element_padding|Tuple[int, int] or ((int, int),(int,int)) Default amount of padding to put around elements in window (left/right, top/bottom) or ((left, right), (top, bottom))|\n|margins|Tuple[int, int] (left/right, top/bottom) Amount of pixels to leave inside the window's frame around the edges before your elements are shown.|\n|button_color|Tuple[str, str] (text color, button color) Default button colors for all buttons in the window|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|progress_bar_color|Tuple[str, str] (bar color, background color) Sets the default colors for all progress bars in the window|\n|background_color|(str) color of background|\n|border_depth|(int) Default border depth (width) for all elements in the window|\n|auto_close|(bool) If True, the window will automatically close itself|\n|auto_close_duration|(int) Number of seconds to wait before closing the window|\n|icon|Union[str, str] Can be either a filename or Base64 value.|\n|force_toplevel|(bool) If True will cause this window to skip the normal use of a hidden master window|\n|alpha_channel|(float) Sets the opacity of the window. 0 = invisible 1 = completely visible. Values bewteen 0 & 1 will produce semi-transparent windows in SOME environments (The Raspberry Pi always has this value at 1 and cannot change.|\n|return_keyboard_events|(bool) if True key presses on the keyboard will be returned as Events from Read calls|\n|use_default_focus|(bool) If True will use the default focus algorithm to set the focus to the \"Correct\" element|\n|text_justification|(str) Union ['left', 'right', 'center'] Default text justification for all Text Elements in window|\n|no_titlebar|(bool) If true, no titlebar nor frame will be shown on window. This means you cannot minimize the window and it will not show up on the taskbar|\n|grab_anywhere|(bool) If True can use mouse to click and drag to move the window. Almost every location of the window will work except input fields on some systems|\n|keep_on_top|(bool) If True, window will be created on top of all other windows on screen. It can be bumped down if another window created with this parm|\n|resizable|(bool) If True, allows the user to resize the window. Note the not all Elements will change size or location when resizing.|\n|disable_close|(bool) If True, the X button in the top right corner of the window will no work. Use with caution and always give a way out toyour users|\n|disable_minimize|(bool) if True the user won't be able to minimize window. Good for taking over entire screen and staying that way.|\n|right_click_menu|List[List[Union[List[str],str]]] A list of lists of Menu items to show when this element is right clicked. See user docs for exact format.|\n|transparent_color|(str) Any portion of the window that has this color will be completely transparent. You can even click through these spots to the window under this window.|\n|debugger_enabled|(bool) If True then the internal debugger will be enabled|\n|finalize|(bool) If True then the Finalize method will be called. Use this rather than chaining .Finalize for cleaner code|\n|element_justification|(str) All elements in the Window itself will have this justification 'left', 'right', 'center' are valid values|\n|ttk_theme|(str) Set the tkinter ttk \"theme\" of the window. Default = DEFAULT_TTK_THEME. Sets all ttk widgets to this theme as their default|\n|use_ttk_buttons|(bool) Affects all buttons in window. True = use ttk buttons. False = do not use ttk buttons. None = use ttk buttons only if on a Mac|\n|metadata|(Any) User metadata that can be set to ANYTHING|\n\n### AddRow\n\nAdds a single row of elements to a window's self.Rows variables.\nGenerally speaking this is NOT how users should be building Window layouts.\nUsers, create a single layout (a list of lists) and pass as a parameter to Window object, or call Window.Layout(layout)\n\n```\nAddRow(args)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|List[Elements]|\n\n### AddRows\n\nLoops through a list of lists of elements and adds each row, list, to the layout.\nThis is NOT the best way to go about creating a window.  Sending the entire layout at one time and passing\nit as a parameter to the Window call is better.\n\n```\nAddRows(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Elements]] A list of a list of elements|\n\n### AlphaChannel\n\n#### property: AlphaChannel\n\nA property that changes the current alpha channel value (internal value)\n\n|Name|Meaning|\n|---|---|\n| **return** | (float) the current alpha channel setting according to self, not read directly from tkinter |\n\n### BringToFront\n\nBrings this window to the top of all other windows (perhaps may not be brought before a window made to \"stay\n        on top\")\n\n```python\nBringToFront()\n```\n\n### Close\n\nCloses window.  Users can safely call even if window has been destroyed.   Should always call when done with\n        a window so that resources are properly freed up within your thread.\n\n```python\nClose()\n```\n\n### CurrentLocation\n\nGet the current location of the window's top left corner\n\n`CurrentLocation()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[(int), (int)] The x and y location in tuple form (x,y) |\n\n### Disable\n\nDisables window from taking any input from the user\n\n```python\nDisable()\n```\n\n### DisableDebugger\n\nDisable the internal debugger. By default the debugger is ENABLED\n\n```python\nDisableDebugger()\n```\n\n### Disappear\n\nCauses a window to \"disappear\" from the screen, but remain on the taskbar. It does this by turning the alpha\n        channel to 0.  NOTE that on some platforms alpha is not supported. The window will remain showing on these\n        platforms.  The Raspberry Pi for example does not have an alpha setting\n\n```python\nDisappear()\n```\n\n### Elem\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nElem(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### Element\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nElement(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### Enable\n\nRe-enables window to take user input after having it be Disabled previously\n\n```python\nEnable()\n```\n\n### EnableDebugger\n\nEnables the internal debugger. By default, the debugger IS enabled\n\n```python\nEnableDebugger()\n```\n\n### Fill\n\nFill in elements that are input fields with data based on a 'values dictionary'\n\n```\nFill(values_dict)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values_dict|(Dict[Any:Any]) {Element key : value} pairs|\n|||\n| **return** | (Window) returns self so can be chained with other methods |\n\n### Finalize\n\nUse this method to cause your layout to built into a real tkinter window.  In reality this method is like\nRead(timeout=0).  It doesn't block and uses your layout to create tkinter widgets to represent the elements.\nLots of action!\n\n`Finalize()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Window) Returns 'self' so that method \"Chaining\" can happen (read up about it as it's very cool!) |\n\n### Find\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nFind(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### FindElement\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nFindElement(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### FindElementWithFocus\n\nReturns the Element that currently has focus as reported by tkinter. If no element is found None is returned!\n\n`FindElementWithFocus()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Element, None] An Element if one has been found with focus or None if no element found |\n\n### GetScreenDimensions\n\nGet the screen dimensions.  NOTE - you must have a window already open for this to work (blame tkinter not me)\n\n`GetScreenDimensions()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Tuple[None, None], Tuple[width, height]] Tuple containing width and height of screen in pixels |\n\n### GrabAnyWhereOff\n\nTurns off Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet\n        been Finalized or Read.\n\n```python\nGrabAnyWhereOff()\n```\n\n### GrabAnyWhereOn\n\nTurns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet\n        been Finalized or Read.\n\n```python\nGrabAnyWhereOn()\n```\n\n### Hide\n\nHides the window from the screen and the task bar\n\n```python\nHide()\n```\n\n### Layout\n\nSecond of two preferred ways of telling a Window what its layout is. The other way is to pass the layout as\na parameter to Window object.  The parameter method is the currently preferred method. This call to Layout\nhas been removed from examples contained in documents and in the Demo Programs. Trying to remove this call\nfrom history and replace with sending as a parameter to Window.\n\n```\nLayout(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Elements]] Your entire layout|\n|||\n| **return** | (Window} self so that you can chain method calls |\n\n### LoadFromDisk\n\nRestore values from a previous call to SaveToDisk which saves the returned values dictionary in Pickle format\n\n```\nLoadFromDisk(filename)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) Pickle Filename to load|\n\n### Maximize\n\nMaximize the window. This is done differently on a windows system versus a linux or mac one.  For non-Windows\n        the root attribute '-fullscreen' is set to True.  For Windows the \"root\" state is changed to \"zoomed\"\n        The reason for the difference is the title bar is removed in some cases when using fullscreen option\n\n```python\nMaximize()\n```\n\n### Minimize\n\nMinimize this window to the task bar\n\n```python\nMinimize()\n```\n\n### Move\n\nMove the upper left corner of this window to the x,y coordinates provided\n\n```\nMove(x, y)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|x|(int) x coordinate in pixels|\n|y|(int) y coordinate in pixels|\n\n### Normal\n\nRestore a window to a non-maximized state.  Does different things depending on platform.  See Maximize for more.\n\n```python\nNormal()\n```\n\n### Read\n\nTHE biggest deal method in the Window class! This is how you get all of your data from your Window.\nPass in a timeout (in milliseconds) to wait for a maximum of timeout milliseconds. Will return timeout_key\nif no other GUI events happen first.\n\n```\nRead(timeout=None, timeout_key=\"__TIMEOUT__\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|timeout|(int) Milliseconds to wait until the Read will return IF no other GUI events happen first|\n|timeout_key|(Any) The value that will be returned from the call if the timer expired|\n|||\n| **return** | Tuple[(Any), Union[Dict[Any:Any]], List[Any], None] (event, values) <br>  (event or timeout_key or None, Dictionary of values or List of values from all elements in the Window) |\n\n### Reappear\n\nCauses a window previously made to \"Disappear\" (using that method). Does this by restoring the alpha channel\n\n```python\nReappear()\n```\n\n### Refresh\n\nRefreshes the window by calling tkroot.update().  Can sometimes get away with a refresh instead of a Read.\nUse this call when you want something to appear in your Window immediately (as soon as this function is called).\nWithout this call your changes to a Window will not be visible to the user until the next Read call\n\n`Refresh()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Window) `self` so that method calls can be easily \"chained\" |\n\n### SaveToDisk\n\nSaves the values contained in each of the input areas of the form. Basically saves what would be returned\nfrom a call to Read.  It takes these results and saves them to disk using pickle\n\n```\nSaveToDisk(filename)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) Filename to save the values to in pickled form|\n\n### SendToBack\n\nPushes this window to the bottom of the stack of windows. It is the opposite of BringToFront\n\n```python\nSendToBack()\n```\n\n### SetAlpha\n\nSets the Alpha Channel for a window.  Values are between 0 and 1 where 0 is completely transparent\n\n```\nSetAlpha(alpha)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|alpha|(float) 0 to 1. 0 is completely transparent. 1 is completely visible and solid (can't see through)|\n\n### SetIcon\n\nSets the icon that is shown on the title bar and on the task bar.  Can pass in:\n* a filename which must be a .ICO icon file for windows\n* a bytes object\n* a BASE64 encoded file held in a variable\n\n```\nSetIcon(icon=None, pngbase64=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|(str) Filename or bytes object|\n|pngbase64|(str) Base64 encoded GIF or PNG file|\n\n### SetTransparentColor\n\nSet the color that will be transparent in your window. Areas with this color will be SEE THROUGH.\n\n```\nSetTransparentColor(color)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|color|(str) Color string that defines the transparent color|\n\n### Size\n\n#### property: Size\n\nReturn the current size of the window in pixels\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[(int), (int)] the (width, height) of the window |\n\n### UnHide\n\nUsed to bring back a window that was previously hidden using the Hide method\n\n```python\nUnHide()\n```\n\n### VisibilityChanged\n\nThis is a completely dummy method that does nothing. It is here so that PySimpleGUIQt programs can make this\ncall and then have that same source run on plain PySimpleGUI.\n\n`VisibilityChanged()`\n\n|Name|Meaning|\n|---|---|\n| **return** |  |\n\n### add_row\n\nAdds a single row of elements to a window's self.Rows variables.\nGenerally speaking this is NOT how users should be building Window layouts.\nUsers, create a single layout (a list of lists) and pass as a parameter to Window object, or call Window.Layout(layout)\n\n```\nadd_row(args)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|List[Elements]|\n\n### add_rows\n\nLoops through a list of lists of elements and adds each row, list, to the layout.\nThis is NOT the best way to go about creating a window.  Sending the entire layout at one time and passing\nit as a parameter to the Window call is better.\n\n```\nadd_rows(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Elements]] A list of a list of elements|\n\n### alpha_channel\n\n#### property: alpha_channel\n\nA property that changes the current alpha channel value (internal value)\n\n|Name|Meaning|\n|---|---|\n| **return** | (float) the current alpha channel setting according to self, not read directly from tkinter |\n\n### bind\n\nUsed to add tkinter events to a Window.\nThe tkinter specific data is in the Window's member variable user_bind_event\n\n```\nbind(bind_string, key)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|bind_string|The string tkinter expected in its bind function|\n|key|The event that will be generated when the tkinter event occurs|\n\n### bring_to_front\n\nBrings this window to the top of all other windows (perhaps may not be brought before a window made to \"stay\n        on top\")\n\n```python\nbring_to_front()\n```\n\n### close\n\nCloses window.  Users can safely call even if window has been destroyed.   Should always call when done with\n        a window so that resources are properly freed up within your thread.\n\n```python\nclose()\n```\n\n### current_location\n\nGet the current location of the window's top left corner\n\n`current_location()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[(int), (int)] The x and y location in tuple form (x,y) |\n\n### disable\n\nDisables window from taking any input from the user\n\n```python\ndisable()\n```\n\n### disable_debugger\n\nDisable the internal debugger. By default the debugger is ENABLED\n\n```python\ndisable_debugger()\n```\n\n### disappear\n\nCauses a window to \"disappear\" from the screen, but remain on the taskbar. It does this by turning the alpha\n        channel to 0.  NOTE that on some platforms alpha is not supported. The window will remain showing on these\n        platforms.  The Raspberry Pi for example does not have an alpha setting\n\n```python\ndisappear()\n```\n\n### elem\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nelem(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### element\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nelement(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### enable\n\nRe-enables window to take user input after having it be Disabled previously\n\n```python\nenable()\n```\n\n### enable_debugger\n\nEnables the internal debugger. By default, the debugger IS enabled\n\n```python\nenable_debugger()\n```\n\n### extend_layout\n\nAdds new rows to an existing container element inside of this window\n\n```\nextend_layout(container, rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|container|(Union[Frame, Column, Tab]) - The container Element the layout will be placed inside of|\n|rows|(List[List[Element]]) - The layout to be added|\n|||\n| **return** | (Window) self so could be chained |\n\n### fill\n\nFill in elements that are input fields with data based on a 'values dictionary'\n\n```\nfill(values_dict)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|values_dict|(Dict[Any:Any]) {Element key : value} pairs|\n|||\n| **return** | (Window) returns self so can be chained with other methods |\n\n### finalize\n\nUse this method to cause your layout to built into a real tkinter window.  In reality this method is like\nRead(timeout=0).  It doesn't block and uses your layout to create tkinter widgets to represent the elements.\nLots of action!\n\n`finalize()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Window) Returns 'self' so that method \"Chaining\" can happen (read up about it as it's very cool!) |\n\n### find\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nfind(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### find_element\n\nFind element object associated with the provided key.\nTHIS METHOD IS NO LONGER NEEDED to be called by the user\n\nYou can perform the same operation by writing this statement:\nelement = window[key]\n\nYou can drop the entire \"FindElement\" function name and use [ ] instead.\n\nTypically used in combination with a call to element's Update method (or any other element method!):\nwindow[key].Update(new_value)\n\nVersus the \"old way\"\nwindow.FindElement(key).Update(new_value)\n\nThis call can be abbreviated to any of these:\nFindElement == Element == Find\nRememeber that this call will return None if no match is found which may cause your code to crash if not\nchecked for.\n\n```\nfind_element(key, silent_on_error=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|(Any) Used with window.FindElement and with return values to uniquely identify this element|\n|silent_on_error|(bool) If True do not display popup nor print warning of key errors|\n|||\n| **return** | Union[Element, Error Element, None] Return value can be: <br>   * the Element that matches the supplied key if found <br>   * an Error Element if silent_on_error is False <br>   * None if silent_on_error True |\n\n### find_element_with_focus\n\nReturns the Element that currently has focus as reported by tkinter. If no element is found None is returned!\n\n`find_element_with_focus()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Element, None] An Element if one has been found with focus or None if no element found |\n\n### get_screen_dimensions\n\nGet the screen dimensions.  NOTE - you must have a window already open for this to work (blame tkinter not me)\n\n`get_screen_dimensions()`\n\n|Name|Meaning|\n|---|---|\n| **return** | Union[Tuple[None, None], Tuple[width, height]] Tuple containing width and height of screen in pixels |\n\n### get_screen_size\n\nReturns the size of the \"screen\" as determined by tkinter.  This can vary depending on your operating system and the number of monitors installed on your system.  For Windows, the primary monitor's size is returns. On some multi-monitored Linux systems, the monitors are combined and the total size is reported as if one screen.\n\n```\nget_screen_size() -> Tuple[int, int] - Size of the screen in pixels as determined by tkinter\n```\n\n### grab_any_where_off\n\nTurns off Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet\n        been Finalized or Read.\n\n```python\ngrab_any_where_off()\n```\n\n### grab_any_where_on\n\nTurns on Grab Anywhere functionality AFTER a window has been created.  Don't try on a window that's not yet\n        been Finalized or Read.\n\n```python\ngrab_any_where_on()\n```\n\n### hide\n\nHides the window from the screen and the task bar\n\n```python\nhide()\n```\n\n### layout\n\nSecond of two preferred ways of telling a Window what its layout is. The other way is to pass the layout as\na parameter to Window object.  The parameter method is the currently preferred method. This call to Layout\nhas been removed from examples contained in documents and in the Demo Programs. Trying to remove this call\nfrom history and replace with sending as a parameter to Window.\n\n```\nlayout(rows)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|rows|List[List[Elements]] Your entire layout|\n|||\n| **return** | (Window} self so that you can chain method calls |\n\n### load_from_disk\n\nRestore values from a previous call to SaveToDisk which saves the returned values dictionary in Pickle format\n\n```\nload_from_disk(filename)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) Pickle Filename to load|\n\n### maximize\n\nMaximize the window. This is done differently on a windows system versus a linux or mac one.  For non-Windows\n        the root attribute '-fullscreen' is set to True.  For Windows the \"root\" state is changed to \"zoomed\"\n        The reason for the difference is the title bar is removed in some cases when using fullscreen option\n\n```python\nmaximize()\n```\n\n### minimize\n\nMinimize this window to the task bar\n\n```python\nminimize()\n```\n\n### move\n\nMove the upper left corner of this window to the x,y coordinates provided\n\n```\nmove(x, y)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|x|(int) x coordinate in pixels|\n|y|(int) y coordinate in pixels|\n\n### normal\n\nRestore a window to a non-maximized state.  Does different things depending on platform.  See Maximize for more.\n\n```python\nnormal()\n```\n\n### read\n\nTHE biggest deal method in the Window class! This is how you get all of your data from your Window.\nPass in a timeout (in milliseconds) to wait for a maximum of timeout milliseconds. Will return timeout_key\nif no other GUI events happen first.\n\n```\nread(timeout=None, timeout_key=\"__TIMEOUT__\")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|timeout|(int) Milliseconds to wait until the Read will return IF no other GUI events happen first|\n|timeout_key|(Any) The value that will be returned from the call if the timer expired|\n|||\n| **return** | Tuple[(Any), Union[Dict[Any:Any]], List[Any], None] (event, values) <br>  (event or timeout_key or None, Dictionary of values or List of values from all elements in the Window) |\n\n### reappear\n\nCauses a window previously made to \"Disappear\" (using that method). Does this by restoring the alpha channel\n\n```python\nreappear()\n```\n\n### refresh\n\nRefreshes the window by calling tkroot.update().  Can sometimes get away with a refresh instead of a Read.\nUse this call when you want something to appear in your Window immediately (as soon as this function is called).\nWithout this call your changes to a Window will not be visible to the user until the next Read call\n\n`refresh()`\n\n|Name|Meaning|\n|---|---|\n| **return** | (Window) `self` so that method calls can be easily \"chained\" |\n\n### save_to_disk\n\nSaves the values contained in each of the input areas of the form. Basically saves what would be returned\nfrom a call to Read.  It takes these results and saves them to disk using pickle\n\n```\nsave_to_disk(filename)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|filename|(str) Filename to save the values to in pickled form|\n\n### send_to_back\n\nPushes this window to the bottom of the stack of windows. It is the opposite of BringToFront\n\n```python\nsend_to_back()\n```\n\n### set_alpha\n\nSets the Alpha Channel for a window.  Values are between 0 and 1 where 0 is completely transparent\n\n```\nset_alpha(alpha)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|alpha|(float) 0 to 1. 0 is completely transparent. 1 is completely visible and solid (can't see through)|\n\n### set_icon\n\nSets the icon that is shown on the title bar and on the task bar.  Can pass in:\n* a filename which must be a .ICO icon file for windows\n* a bytes object\n* a BASE64 encoded file held in a variable\n\n```\nset_icon(icon=None, pngbase64=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|(str) Filename or bytes object|\n|pngbase64|(str) Base64 encoded GIF or PNG file|\n\n### set_transparent_color\n\nSet the color that will be transparent in your window. Areas with this color will be SEE THROUGH.\n\n```\nset_transparent_color(color)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|color|(str) Color string that defines the transparent color|\n\n### size\n\n#### property: size\n\nReturn the current size of the window in pixels\n\n|Name|Meaning|\n|---|---|\n| **return** | Tuple[(int), (int)] the (width, height) of the window |\n\n### un_hide\n\nUsed to bring back a window that was previously hidden using the Hide method\n\n```python\nun_hide()\n```\n\n### visibility_changed\n\nThis is a completely dummy method that does nothing. It is here so that PySimpleGUIQt programs can make this\ncall and then have that same source run on plain PySimpleGUI.\n\n`visibility_changed()`\n\n|Name|Meaning|\n|---|---|\n| **return** |  |\n\n## Function Reference\n\n```\nCButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    bind_return_key=False,\n    disabled=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|disabled|set disable state for element (Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nCalendarButton(button_text,\n    target=(None, None),\n    close_when_date_chosen=True,\n    default_date_m_d_y=(None, None, None),\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    tooltip=None,\n    border_width=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    locale=None,\n    format=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|target||\n|close_when_date_chosen|(Default = True)|\n|default_date_m_d_y|(Default = (None))|\n|None||\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|(Default = (None))|\n|image_subsample|amount to reduce the size of the image|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|border_width|width of border around element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|locale||\n|format||\n|||\n| **return** | (Button) |\n\n```\nCancel(button_text=\"Cancel\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Cancel')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nCloseButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    bind_return_key=False,\n    disabled=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|disabled|set disable state for element (Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nColorChooserButton(button_text,\n    target=(None, None),\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    tooltip=None,\n    border_width=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|target||\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|(Default = (None))|\n|image_subsample|amount to reduce the size of the image|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|border_width|width of border around element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nDebug(button_text=\"\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    font=None,\n    tooltip=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = '')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|font|specifies the font family, size, etc|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nDummyButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    disabled=False,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nExit(button_text=\"Exit\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Exit')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nFileBrowse(button_text=\"Browse\",\n    target=(555666777, -1),\n    file_types=(('ALL Files', '*.*'),),\n    initial_folder=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    disabled=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Browse')|\n|target|key or (row,col) target for the button (Default value = (ThisRow, -1))|\n|file_types|(Default value = ((\"ALL Files\", \"*.*\")))|\n|initial_folder|starting path for folders and files|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|change_submits|If True, pressing Enter key submits window (Default = False)|\n|enable_events|Turns on the element specific events.(Default = False)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|disabled|set disable state for element (Default = False)|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nFileSaveAs(button_text=\"Save As...\",\n    target=(555666777, -1),\n    file_types=(('ALL Files', '*.*'),),\n    initial_folder=None,\n    disabled=False,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Save As...')|\n|target|key or (row,col) target for the button (Default value = (ThisRow, -1))|\n|file_types|(Default value = ((\"ALL Files\", \"*.*\")))|\n|initial_folder|starting path for folders and files|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|change_submits|If True, pressing Enter key submits window (Default = False)|\n|enable_events|Turns on the element specific events.(Default = False)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\nAllows browsing of multiple files. File list is returned as a single list with the delimeter defined using the variable\nBROWSE_FILES_DELIMETER.  This defaults to ';' but is changable by the user\n\n```\nFilesBrowse(button_text=\"Browse\",\n    target=(555666777, -1),\n    file_types=(('ALL Files', '*.*'),),\n    disabled=False,\n    initial_folder=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Browse')|\n|target|key or (row,col) target for the button (Default value = (ThisRow, -1))|\n|file_types|(Default value = ((\"ALL Files\", \"*.*\")))|\n|disabled|set disable state for element (Default = False)|\n|initial_folder|starting path for folders and files|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|change_submits|If True, pressing Enter key submits window (Default = False)|\n|enable_events|Turns on the element specific events.(Default = False)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\nFills a window with values provided in a values dictionary { element_key : new_value }\n\n```\nFillFormWithValues(window, values_dict)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|window|(Window) The window object to fill|\n|values_dict|(Dict[Any:Any]) A dictionary with element keys as key and value is values parm for Update call|\n\n```\nFolderBrowse(button_text=\"Browse\",\n    target=(555666777, -1),\n    initial_folder=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Browse')|\n|target|key or (row,col) target for the button (Default value = (ThisRow, -1))|\n|initial_folder|starting path for folders and files|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|change_submits|If True, pressing Enter key submits window (Default = False)|\n|enable_events|Turns on the element specific events.(Default = False)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nHelp(button_text=\"Help\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    font=None,\n    tooltip=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Help')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|font|specifies the font family, size, etc|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nNo(button_text=\"No\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'No')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nOK(button_text=\"OK\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    bind_return_key=True,\n    tooltip=None,\n    font=None,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'OK')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = True)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\nDumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form\n\n```\nObjToString(obj, extra=\"    \")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|obj|(Any) The object to display|\n|extra|(Default value = ' ') returns (str) Formatted output of the object's values|\n\nDumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form\nReturns only the top-most object's variables instead of drilling down to dispolay more\n\n```\nObjToStringSingleObj(obj)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|obj|(Any) The object to display returns (str) Formatted output of the object's values|\n\n```\nOk(button_text=\"Ok\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    bind_return_key=True,\n    tooltip=None,\n    font=None,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Ok')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = True)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nOpen(button_text=\"Open\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    bind_return_key=True,\n    tooltip=None,\n    font=None,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Open')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = True)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nQuit(button_text=\"Quit\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Quit')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nRButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    bind_return_key=False,\n    disabled=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|disabled|set disable state for element (Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nReadButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    bind_return_key=False,\n    disabled=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = False)|\n|disabled|set disable state for element (Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nRealtimeButton(button_text,\n    image_filename=None,\n    image_data=None,\n    image_size=(None, None),\n    image_subsample=None,\n    border_width=None,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    font=None,\n    disabled=False,\n    bind_return_key=False,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button|\n|image_filename|image filename if there is a button image|\n|image_data|in-RAM image to be displayed on button|\n|image_size|size of button image in pixels|\n|image_subsample|amount to reduce the size of the image|\n|border_width|width of border around element|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high (Default = (None))|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|font|specifies the font family, size, etc|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = False)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n\n```\nSave(button_text=\"Save\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    bind_return_key=True,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Save')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|bind_return_key|(Default = True)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nSaveAs(button_text=\"Save As...\",\n    target=(555666777, -1),\n    file_types=(('ALL Files', '*.*'),),\n    initial_folder=None,\n    disabled=False,\n    tooltip=None,\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    change_submits=False,\n    enable_events=False,\n    font=None,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Save As...')|\n|target|key or (row,col) target for the button (Default value = (ThisRow, -1))|\n|file_types|(Default value = ((\"ALL Files\", \"*.*\")))|\n|initial_folder|starting path for folders and files|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|change_submits|If True, pressing Enter key submits window (Default = False)|\n|enable_events|Turns on the element specific events.(Default = False)|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\nShow a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you\nwant, just like a print statement.\n\n```\nScrolledTextBox(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    yes_no=False,\n    auto_close=False,\n    auto_close_duration=None,\n    size=(None, None),\n    location=(None, None),\n    non_blocking=False,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    font=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of items to display|\n|title|(str) Title to display in the window.|\n|button_color|Tuple[str, str] button color (foreground, background)|\n|yes_no|(bool) If True, displays Yes and No buttons instead of Ok|\n|auto_close|(bool) if True window will close itself|\n|auto_close_duration|Union[int, float] Older versions only accept int. Time in seconds until window will close|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|location|Tuple[int, int] Location on the screen to place the upper left corner of the window|\n|non_blocking|(bool) if True the call will immediately return rather than waiting on user input|\n|||\n| **return** | Union[str, None, TIMEOUT_KEY] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nSets the icon which will be used any time a window is created if an icon is not provided when the\nwindow is created.\n\n```\nSetGlobalIcon(icon)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|Union[bytes, str] Either a Base64 byte string or a filename|\n\n```\nSetOptions(icon=None,\n    button_color=None,\n    element_size=(None, None),\n    button_element_size=(None, None),\n    margins=(None, None),\n    element_padding=(None, None),\n    auto_size_text=None,\n    auto_size_buttons=None,\n    font=None,\n    border_width=None,\n    slider_border_width=None,\n    slider_relief=None,\n    slider_orientation=None,\n    autoclose_time=None,\n    message_box_line_width=None,\n    progress_meter_border_depth=None,\n    progress_meter_style=None,\n    progress_meter_relief=None,\n    progress_meter_color=None,\n    progress_meter_size=None,\n    text_justification=None,\n    background_color=None,\n    element_background_color=None,\n    text_element_background_color=None,\n    input_elements_background_color=None,\n    input_text_color=None,\n    scrollbar_color=None,\n    text_color=None,\n    element_text_color=None,\n    debug_win_size=(None, None),\n    window_location=(None, None),\n    error_button_color=(None, None),\n    tooltip_time=None,\n    use_ttk_buttons=None,\n    ttk_theme=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|filename of icon used for taskbar and title bar|\n|button_color|button color (foreground, background)|\n|element_size|Tuple[int, int] element size (width, height) in characters|\n|button_element_size|Tuple[int, int]|\n|margins|tkinter margins around outsize (Default = (None))|\n|element_padding|(Default = (None))|\n|auto_size_text|True if size should fit the text length|\n|auto_size_buttons||\n|font|specifies the font family, size, etc|\n|border_width|width of border around element|\n|slider_border_width||\n|slider_relief||\n|slider_orientation||\n|autoclose_time||\n|message_box_line_width||\n|progress_meter_border_depth||\n|progress_meter_style||\n|progress_meter_relief||\n|progress_meter_color||\n|progress_meter_size|Tuple[int, int]|\n|text_justification||\n|background_color|color of background|\n|element_background_color||\n|text_element_background_color||\n|input_elements_background_color||\n|input_text_color||\n|scrollbar_color||\n|text_color|color of the text|\n|element_text_color||\n|debug_win_size|Tuple[int, int] (Default = (None))|\n|window_location|(Default = (None))|\n|error_button_color|(Default = (None))|\n|tooltip_time|time in milliseconds to wait before showing a tooltip. Default is 400ms|\n|use_ttk_buttons|(bool) if True will cause all buttons to be ttk buttons|\n|ttk_theme|(str) Theme to use with ttk widgets. Choices (on Windows) include - 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'|\n\n```\nSubmit(button_text=\"Submit\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    bind_return_key=True,\n    tooltip=None,\n    font=None,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Submit')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|bind_return_key|(Default = True)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n```\nYes(button_text=\"Yes\",\n    size=(None, None),\n    auto_size_button=None,\n    button_color=None,\n    disabled=False,\n    tooltip=None,\n    font=None,\n    bind_return_key=True,\n    focus=False,\n    pad=None,\n    key=None,\n    metadata=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|button_text|text in the button (Default value = 'Yes')|\n|size|(w,h) w=characters-wide, h=rows-high|\n|auto_size_button|True if button size is determined by button text|\n|button_color|button color (foreground, background)|\n|disabled|set disable state for element (Default = False)|\n|tooltip|(str) text, that will appear when mouse hovers over the element|\n|font|specifies the font family, size, etc|\n|bind_return_key|(Default = True)|\n|focus|if focus should be set to this|\n|pad|Amount of padding to put around element|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|||\n| **return** | (Button) |\n\n## Debug Window Output\n\n```\neasy_print(args,\n    size=(None, None),\n    end=None,\n    sep=None,\n    location=(None, None),\n    font=None,\n    no_titlebar=False,\n    no_button=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    do_not_reroute_stdout=True,\n    text_color=None,\n    background_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|end||\n|sep||\n|location|Location on screen to display|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|no_button|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|do_not_reroute_stdout|(Default = True)|\n\n```\neasy_print_close()\n```\n\n```\neprint(args,\n    size=(None, None),\n    end=None,\n    sep=None,\n    location=(None, None),\n    font=None,\n    no_titlebar=False,\n    no_button=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    do_not_reroute_stdout=True,\n    text_color=None,\n    background_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|end||\n|sep||\n|location|Location on screen to display|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|no_button|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|do_not_reroute_stdout|(Default = True)|\n\n```\nsgprint(args,\n    size=(None, None),\n    end=None,\n    sep=None,\n    location=(None, None),\n    font=None,\n    no_titlebar=False,\n    no_button=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    do_not_reroute_stdout=True,\n    text_color=None,\n    background_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|end||\n|sep||\n|location|Location on screen to display|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|no_button|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|do_not_reroute_stdout|(Default = True)|\n\n```\nsgprint_close()\n```\n\n```\nEasyPrint(args,\n    size=(None, None),\n    end=None,\n    sep=None,\n    location=(None, None),\n    font=None,\n    no_titlebar=False,\n    no_button=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    do_not_reroute_stdout=True,\n    text_color=None,\n    background_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|end||\n|sep||\n|location|Location on screen to display|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|no_button|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|do_not_reroute_stdout|(Default = True)|\n\n```\nEasyPrintClose()\n```\n\n```\nPrint(args,\n    size=(None, None),\n    end=None,\n    sep=None,\n    location=(None, None),\n    font=None,\n    no_titlebar=False,\n    no_button=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    do_not_reroute_stdout=True,\n    text_color=None,\n    background_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|end||\n|sep||\n|location|Location on screen to display|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|no_button|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|do_not_reroute_stdout|(Default = True)|\n\n```\nPrintClose()\n```\n\n## OneLineProgressMeter\n\n```\nOneLineProgressMeter(title,\n    current_value,\n    max_value,\n    key,\n    args,\n    orientation=\"v\",\n    bar_color=(None, None),\n    button_color=None,\n    size=(20, 20),\n    border_width=None,\n    grab_anywhere=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|title|text to display|\n|current_value|current progressbar value|\n|max_value|max value of progressbar|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|*args|stuff to output.|\n|orientation|'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical')(Default value = 'v')|\n|bar_color||\n|button_color|button color (foreground, background)|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)|\n|border_width|width of border around element|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|||\n| **return** | (bool) True if updated successfully. False if user closed the meter with the X or Cancel button |\n\nCancels and closes a previously created One Line Progress Meter window\n\n```\nOneLineProgressMeterCancel(key)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|Key used when meter was created|\n\n```\none_line_progress_meter(title,\n    current_value,\n    max_value,\n    key,\n    args,\n    orientation=\"v\",\n    bar_color=(None, None),\n    button_color=None,\n    size=(20, 20),\n    border_width=None,\n    grab_anywhere=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|title|text to display|\n|current_value|current progressbar value|\n|max_value|max value of progressbar|\n|key|Used with window.FindElement and with return values to uniquely identify this element|\n|*args|stuff to output.|\n|orientation|'horizontal' or 'vertical' ('h' or 'v' work) (Default value = 'vertical')(Default value = 'v')|\n|bar_color||\n|button_color|button color (foreground, background)|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high (Default value = DEFAULT_PROGRESS_BAR_SIZE)|\n|border_width|width of border around element|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|||\n| **return** | (bool) True if updated successfully. False if user closed the meter with the X or Cancel button |\n\nCancels and closes a previously created One Line Progress Meter window\n\n```\none_line_progress_meter_cancel(key)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|key|Key used when meter was created|\n\n## Popup Functions\n\nPopup - Display a popup Window with as many parms as you wish to include.  This is the GUI equivalent of the\n\"print\" statement.  It's also great for \"pausing\" your program's flow until the user can read some error messages.\n\n```\nPopup(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    button_type=0,\n    auto_close=False,\n    auto_close_duration=None,\n    custom_text=(None, None),\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of your arguments. Load up the call with stuff to see!|\n|title|(str) Optional title for the window. If none provided, the first arg will be used instead.|\n|button_color|Tuple[str, str] Color of the buttons shown (text color, button color)|\n|background_color|(str) Window's background color|\n|text_color|(str) text color|\n|button_type|(enum) NOT USER SET! Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK). There are many Popup functions and they call Popup, changing this parameter to get the desired effect.|\n|auto_close|(bool) If True the window will automatically close|\n|auto_close_duration|(int) time in seconds to keep window open before closing it automatically|\n|custom_text|Union[Tuple[str, str], str] A string or pair of strings that contain the text to display on the buttons|\n|non_blocking|(bool) If True then will immediately return from the function without waiting for the user's input.|\n|icon|Union[str, bytes] icon to display on the window. Same format as a Window call|\n|line_width|(int) Width of lines in characters. Defaults to MESSAGE_BOX_LINE_WIDTH|\n|font|Union[str, tuple(font name, size, modifiers) specifies the font family, size, etc|\n|no_titlebar|(bool) If True will not show the frame around the window and the titlebar across the top|\n|grab_anywhere|(bool) If True can grab anywhere to move the window. If no_titlebar is True, grab_anywhere should likely be enabled too|\n|location|Tuple[int, int] Location on screen to display the top left corner of window. Defaults to window centered on screen|\n|||\n| **return** | Union[str, None] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nShow animation one frame at a time.  This function has its own internal clocking meaning you can call it at any frequency\n and the rate the frames of video is shown remains constant.  Maybe your frames update every 30 ms but your\n event loop is running every 10 ms.  You don't have to worry about delaying, just call it every time through the\n loop.\n\n```\nPopupAnimated(image_source,\n    message=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    no_titlebar=True,\n    grab_anywhere=True,\n    keep_on_top=True,\n    location=(None, None),\n    alpha_channel=None,\n    time_between_frames=0,\n    transparent_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|image_source|Union[str, bytes] Either a filename or a base64 string.|\n|message|(str) An optional message to be shown with the animation|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, tuple) specifies the font family, size, etc|\n|no_titlebar|(bool) If True then the titlebar and window frame will not be shown|\n|grab_anywhere|(bool) If True then you can move the window just clicking anywhere on window, hold and drag|\n|keep_on_top|(bool) If True then Window will remain on top of all other windows currently shownn|\n|location|(int, int) (x,y) location on the screen to place the top left corner of your window. Default is to center on screen|\n|alpha_channel|(float) Window transparency 0 = invisible 1 = completely visible. Values between are see through|\n|time_between_frames|(int) Amount of time in milliseconds between each frame|\n|transparent_color|(str) This color will be completely see-through in your window. Can even click through|\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\nPopupAnnoying(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nPopup that closes itself after some time period\n\n```\nPopupAutoClose(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with \"cancelled\" button text\n\n```\nPopupCancel(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nPopup with colored button and 'Error' as button text\n\n```\nPopupError(args,\n    title=None,\n    button_color=(None, None),\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|(Default = (None))|\n\nDisplay popup window with text entry field and browse button so that a file can be chosen by user.\n\n```\nPopupGetFile(message,\n    title=None,\n    default_path=\"\",\n    default_extension=\"\",\n    save_as=False,\n    multiple_files=False,\n    file_types=(('ALL Files', '*.*'),),\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|default_extension|(str) If no extension entered by user, add this to filename (only used in saveas dialogs)|\n|save_as|(bool) if True, the \"save as\" dialog is shown which will verify before overwriting|\n|multiple_files|(bool) if True, then allows multiple files to be selected that are returned with ';' between each filename|\n|file_types|Tuple[Tuple[str,str]] List of extensions to show using wildcards. All files (the default) = ((\"ALL Files\", \"*.*\"),)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the file(s) chosen, None if cancelled or window closed with X |\n\nDisplay popup with text entry field and browse button so that a folder can be chosen.\n\n```\nPopupGetFolder(message,\n    title=None,\n    default_path=\"\",\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the path chosen, None if cancelled or window closed with X |\n\nDisplay Popup with text entry field. Returns the text entered or None if closed / cancelled\n\n```\nPopupGetText(message,\n    title=None,\n    default_text=\"\",\n    password_char=\"\",\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_text|(str) default value to put into input area|\n|password_char|(str) character to be shown instead of actually typed characters|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|||\n| **return** | Union[str, None] Text entered or None if window was closed or cancel button clicked |\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\nPopupNoBorder(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nShow a Popup but without any buttons\n\n```\nPopupNoButtons(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\nPopupNoFrame(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\nPopupNoTitlebar(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nShow Popup window and immediately return (does not block)\n\n```\nPopupNoWait(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow Popup window and immediately return (does not block)\n\n```\nPopupNonBlocking(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with OK button only\n\n```\nPopupOK(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay popup with OK and Cancel buttons\n\n```\nPopupOKCancel(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=...,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|Location on screen to display|\n|||\n| **return** | Union[\"OK\", \"Cancel\", None] |\n\nShow Popup box that doesn't block and closes itself\n\n```\nPopupQuick(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=2,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration|(Default value = 2)|\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow Popup window with no titlebar, doesn't block, and auto closes itself.\n\n```\nPopupQuickMessage(args,\n    title=None,\n    button_type=5,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=2,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=True,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_NO_BUTTONS)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration|(Default value = 2)|\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = True)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you\nwant, just like a print statement.\n\n```\nPopupScrolled(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    yes_no=False,\n    auto_close=False,\n    auto_close_duration=None,\n    size=(None, None),\n    location=(None, None),\n    non_blocking=False,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    font=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of items to display|\n|title|(str) Title to display in the window.|\n|button_color|Tuple[str, str] button color (foreground, background)|\n|yes_no|(bool) If True, displays Yes and No buttons instead of Ok|\n|auto_close|(bool) if True window will close itself|\n|auto_close_duration|Union[int, float] Older versions only accept int. Time in seconds until window will close|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|location|Tuple[int, int] Location on the screen to place the upper left corner of the window|\n|non_blocking|(bool) if True the call will immediately return rather than waiting on user input|\n|||\n| **return** | Union[str, None, TIMEOUT_KEY] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nPopup that closes itself after some time period\n\n```\nPopupTimed(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with Yes and No buttons\n\n```\nPopupYesNo(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|Location on screen to display|\n|||\n| **return** | Union[\"Yes\", \"No\", None] |\n\n## Popups PEP8 Versions\n\nPopup - Display a popup Window with as many parms as you wish to include.  This is the GUI equivalent of the\n\"print\" statement.  It's also great for \"pausing\" your program's flow until the user can read some error messages.\n\n```\npopup(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    button_type=0,\n    auto_close=False,\n    auto_close_duration=None,\n    custom_text=(None, None),\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of your arguments. Load up the call with stuff to see!|\n|title|(str) Optional title for the window. If none provided, the first arg will be used instead.|\n|button_color|Tuple[str, str] Color of the buttons shown (text color, button color)|\n|background_color|(str) Window's background color|\n|text_color|(str) text color|\n|button_type|(enum) NOT USER SET! Determines which pre-defined buttons will be shown (Default value = POPUP_BUTTONS_OK). There are many Popup functions and they call Popup, changing this parameter to get the desired effect.|\n|auto_close|(bool) If True the window will automatically close|\n|auto_close_duration|(int) time in seconds to keep window open before closing it automatically|\n|custom_text|Union[Tuple[str, str], str] A string or pair of strings that contain the text to display on the buttons|\n|non_blocking|(bool) If True then will immediately return from the function without waiting for the user's input.|\n|icon|Union[str, bytes] icon to display on the window. Same format as a Window call|\n|line_width|(int) Width of lines in characters. Defaults to MESSAGE_BOX_LINE_WIDTH|\n|font|Union[str, tuple(font name, size, modifiers) specifies the font family, size, etc|\n|no_titlebar|(bool) If True will not show the frame around the window and the titlebar across the top|\n|grab_anywhere|(bool) If True can grab anywhere to move the window. If no_titlebar is True, grab_anywhere should likely be enabled too|\n|location|Tuple[int, int] Location on screen to display the top left corner of window. Defaults to window centered on screen|\n|||\n| **return** | Union[str, None] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nShow animation one frame at a time.  This function has its own internal clocking meaning you can call it at any frequency\n and the rate the frames of video is shown remains constant.  Maybe your frames update every 30 ms but your\n event loop is running every 10 ms.  You don't have to worry about delaying, just call it every time through the\n loop.\n\n```\npopup_animated(image_source,\n    message=None,\n    background_color=None,\n    text_color=None,\n    font=None,\n    no_titlebar=True,\n    grab_anywhere=True,\n    keep_on_top=True,\n    location=(None, None),\n    alpha_channel=None,\n    time_between_frames=0,\n    transparent_color=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|image_source|Union[str, bytes] Either a filename or a base64 string.|\n|message|(str) An optional message to be shown with the animation|\n|background_color|(str) color of background|\n|text_color|(str) color of the text|\n|font|Union[str, tuple) specifies the font family, size, etc|\n|no_titlebar|(bool) If True then the titlebar and window frame will not be shown|\n|grab_anywhere|(bool) If True then you can move the window just clicking anywhere on window, hold and drag|\n|keep_on_top|(bool) If True then Window will remain on top of all other windows currently shownn|\n|location|(int, int) (x,y) location on the screen to place the top left corner of your window. Default is to center on screen|\n|alpha_channel|(float) Window transparency 0 = invisible 1 = completely visible. Values between are see through|\n|time_between_frames|(int) Amount of time in milliseconds between each frame|\n|transparent_color|(str) This color will be completely see-through in your window. Can even click through|\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\npopup_annoying(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nPopup that closes itself after some time period\n\n```\npopup_auto_close(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with \"cancelled\" button text\n\n```\npopup_cancel(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nPopup with colored button and 'Error' as button text\n\n```\npopup_error(args,\n    title=None,\n    button_color=(None, None),\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|(Default = (None))|\n\nDisplay popup window with text entry field and browse button so that a file can be chosen by user.\n\n```\npopup_get_file(message,\n    title=None,\n    default_path=\"\",\n    default_extension=\"\",\n    save_as=False,\n    multiple_files=False,\n    file_types=(('ALL Files', '*.*'),),\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|default_extension|(str) If no extension entered by user, add this to filename (only used in saveas dialogs)|\n|save_as|(bool) if True, the \"save as\" dialog is shown which will verify before overwriting|\n|multiple_files|(bool) if True, then allows multiple files to be selected that are returned with ';' between each filename|\n|file_types|Tuple[Tuple[str,str]] List of extensions to show using wildcards. All files (the default) = ((\"ALL Files\", \"*.*\"),)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the file(s) chosen, None if cancelled or window closed with X |\n\nDisplay popup with text entry field and browse button so that a folder can be chosen.\n\n```\npopup_get_folder(message,\n    title=None,\n    default_path=\"\",\n    no_window=False,\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None),\n    initial_folder=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_path|(str) path to display to user as starting point (filled into the input field)|\n|no_window|(bool) if True, no PySimpleGUI window will be shown. Instead just the tkinter dialog is shown|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|initial_folder|(str) location in filesystem to begin browsing|\n|||\n| **return** | Union[str, None]  string representing the path chosen, None if cancelled or window closed with X |\n\nDisplay Popup with text entry field. Returns the text entered or None if closed / cancelled\n\n```\npopup_get_text(message,\n    title=None,\n    default_text=\"\",\n    password_char=\"\",\n    size=(None, None),\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    icon=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|message|(str) message displayed to user|\n|title|(str) Window title|\n|default_text|(str) default value to put into input area|\n|password_char|(str) character to be shown instead of actually typed characters|\n|size|Tuple[int, int] (width, height) of the InputText Element|\n|button_color|Tuple[str, str] Color of the button (text, background)|\n|background_color|(str) background color of the entire window|\n|text_color|(str) color of the message text|\n|icon|Union[bytes, str] filename or base64 string to be used for the window's icon|\n|font|Union[str, Tuple[str, int]] specifies the font family, size, etc|\n|no_titlebar|(bool) If True no titlebar will be shown|\n|grab_anywhere|(bool) If True can click and drag anywhere in the window to move the window|\n|keep_on_top|(bool) If True the window will remain above all current windows|\n|location|Tuyple[int, int] (x,y) Location on screen to display the upper left corner of window|\n|||\n| **return** | Union[str, None] Text entered or None if window was closed or cancel button clicked |\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\npopup_no_border(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nShow a Popup but without any buttons\n\n```\npopup_no_buttons(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\npopup_no_frame(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nDisplay a Popup without a titlebar.   Enables grab anywhere so you can move it\n\n```\npopup_no_titlebar(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    grab_anywhere=True,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|grab_anywhere|(Default = True)|\n|location||\n\nShow Popup window and immediately return (does not block)\n\n```\npopup_no_wait(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow Popup window and immediately return (does not block)\n\n```\npopup_non_blocking(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with OK button only\n\n```\npopup_ok(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay popup with OK and Cancel buttons\n\n```\npopup_ok_cancel(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=...,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|Location on screen to display|\n|||\n| **return** | Union[\"OK\", \"Cancel\", None] |\n\nShow Popup box that doesn't block and closes itself\n\n```\npopup_quick(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=2,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration|(Default value = 2)|\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow Popup window with no titlebar, doesn't block, and auto closes itself.\n\n```\npopup_quick_message(args,\n    title=None,\n    button_type=5,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=2,\n    non_blocking=True,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=True,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_NO_BUTTONS)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration|(Default value = 2)|\n|non_blocking|(Default = True)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = True)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nShow a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you\nwant, just like a print statement.\n\n```\npopup_scrolled(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    yes_no=False,\n    auto_close=False,\n    auto_close_duration=None,\n    size=(None, None),\n    location=(None, None),\n    non_blocking=False,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    font=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of items to display|\n|title|(str) Title to display in the window.|\n|button_color|Tuple[str, str] button color (foreground, background)|\n|yes_no|(bool) If True, displays Yes and No buttons instead of Ok|\n|auto_close|(bool) if True window will close itself|\n|auto_close_duration|Union[int, float] Older versions only accept int. Time in seconds until window will close|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|location|Tuple[int, int] Location on the screen to place the upper left corner of the window|\n|non_blocking|(bool) if True the call will immediately return rather than waiting on user input|\n|||\n| **return** | Union[str, None, TIMEOUT_KEY] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nPopup that closes itself after some time period\n\n```\npopup_timed(args,\n    title=None,\n    button_type=0,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=True,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_type|(Default value = POPUP_BUTTONS_OK)|\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = True)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location||\n\nDisplay Popup with Yes and No buttons\n\n```\npopup_yes_no(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    auto_close=False,\n    auto_close_duration=None,\n    non_blocking=False,\n    icon=None,\n    line_width=None,\n    font=None,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    location=(None, None))\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args||\n|title||\n|button_color|button color (foreground, background)|\n|background_color|color of background|\n|text_color|color of the text|\n|auto_close|(Default = False)|\n|auto_close_duration||\n|non_blocking|(Default = False)|\n|icon|Icon to display|\n|line_width|Width of lines in characters|\n|font|specifies the font family, size, etc|\n|no_titlebar|(Default = False)|\n|grab_anywhere|If True can grab anywhere to move the window (Default = False)|\n|location|Location on screen to display|\n|||\n| **return** | Union[\"Yes\", \"No\", None] |\n\n## PEP8 Function Bindings\n\nFills a window with values provided in a values dictionary { element_key : new_value }\n\n```\nfill_form_with_values(window, values_dict)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|window|(Window) The window object to fill|\n|values_dict|(Dict[Any:Any]) A dictionary with element keys as key and value is values parm for Update call|\n\nThe PySimpleGUI \"Test Harness\".  This is meant to be a super-quick test of the Elements.\n\n```\nmain()\n```\n\nDumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form\n\n```\nobj_to_string(obj, extra=\"    \")\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|obj|(Any) The object to display|\n|extra|(Default value = ' ') returns (str) Formatted output of the object's values|\n\nDumps an Object's values as a formatted string.  Very nicely done. Great way to display an object's member variables in human form\nReturns only the top-most object's variables instead of drilling down to dispolay more\n\n```\nobj_to_string_single_obj(obj)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|obj|(Any) The object to display returns (str) Formatted output of the object's values|\n\nSets the icon which will be used any time a window is created if an icon is not provided when the\nwindow is created.\n\n```\nset_global_icon(icon)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|Union[bytes, str] Either a Base64 byte string or a filename|\n\n```\nset_options(icon=None,\n    button_color=None,\n    element_size=(None, None),\n    button_element_size=(None, None),\n    margins=(None, None),\n    element_padding=(None, None),\n    auto_size_text=None,\n    auto_size_buttons=None,\n    font=None,\n    border_width=None,\n    slider_border_width=None,\n    slider_relief=None,\n    slider_orientation=None,\n    autoclose_time=None,\n    message_box_line_width=None,\n    progress_meter_border_depth=None,\n    progress_meter_style=None,\n    progress_meter_relief=None,\n    progress_meter_color=None,\n    progress_meter_size=None,\n    text_justification=None,\n    background_color=None,\n    element_background_color=None,\n    text_element_background_color=None,\n    input_elements_background_color=None,\n    input_text_color=None,\n    scrollbar_color=None,\n    text_color=None,\n    element_text_color=None,\n    debug_win_size=(None, None),\n    window_location=(None, None),\n    error_button_color=(None, None),\n    tooltip_time=None,\n    use_ttk_buttons=None,\n    ttk_theme=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|icon|filename of icon used for taskbar and title bar|\n|button_color|button color (foreground, background)|\n|element_size|Tuple[int, int] element size (width, height) in characters|\n|button_element_size|Tuple[int, int]|\n|margins|tkinter margins around outsize (Default = (None))|\n|element_padding|(Default = (None))|\n|auto_size_text|True if size should fit the text length|\n|auto_size_buttons||\n|font|specifies the font family, size, etc|\n|border_width|width of border around element|\n|slider_border_width||\n|slider_relief||\n|slider_orientation||\n|autoclose_time||\n|message_box_line_width||\n|progress_meter_border_depth||\n|progress_meter_style||\n|progress_meter_relief||\n|progress_meter_color||\n|progress_meter_size|Tuple[int, int]|\n|text_justification||\n|background_color|color of background|\n|element_background_color||\n|text_element_background_color||\n|input_elements_background_color||\n|input_text_color||\n|scrollbar_color||\n|text_color|color of the text|\n|element_text_color||\n|debug_win_size|Tuple[int, int] (Default = (None))|\n|window_location|(Default = (None))|\n|error_button_color|(Default = (None))|\n|tooltip_time|time in milliseconds to wait before showing a tooltip. Default is 400ms|\n|use_ttk_buttons|(bool) if True will cause all buttons to be ttk buttons|\n|ttk_theme|(str) Theme to use with ttk widgets. Choices (on Windows) include - 'default', 'winnative', 'clam', 'alt', 'classic', 'vista', 'xpnative'|\n\nShows the smaller \"popout\" window.  Default location is the upper right corner of your screen\n\n```\nshow_debugger_popout_window(location=(None, None), args)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|location|Tuple[int, int] Locations (x,y) on the screen to place upper left corner of the window|\n|*args|Not used|\n\nShows the large main debugger window\n\n```\nshow_debugger_window(location=(None, None), args)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|location|Tuple[int, int] Locations (x,y) on the screen to place upper left corner of the window|\n|*args|Not used|\n\nShow a scrolled Popup window containing the user's text that was supplied.  Use with as many items to print as you\nwant, just like a print statement.\n\n```\nsprint(args,\n    title=None,\n    button_color=None,\n    background_color=None,\n    text_color=None,\n    yes_no=False,\n    auto_close=False,\n    auto_close_duration=None,\n    size=(None, None),\n    location=(None, None),\n    non_blocking=False,\n    no_titlebar=False,\n    grab_anywhere=False,\n    keep_on_top=False,\n    font=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|*args|(Any) Variable number of items to display|\n|title|(str) Title to display in the window.|\n|button_color|Tuple[str, str] button color (foreground, background)|\n|yes_no|(bool) If True, displays Yes and No buttons instead of Ok|\n|auto_close|(bool) if True window will close itself|\n|auto_close_duration|Union[int, float] Older versions only accept int. Time in seconds until window will close|\n|size|Tuple[int, int] (w,h) w=characters-wide, h=rows-high|\n|location|Tuple[int, int] Location on the screen to place the upper left corner of the window|\n|non_blocking|(bool) if True the call will immediately return rather than waiting on user input|\n|||\n| **return** | Union[str, None, TIMEOUT_KEY] Returns text of the button that was pressed.  None will be returned if user closed window with X |\n\nThe PySimpleGUI \"Test Harness\".  This is meant to be a super-quick test of the Elements.\n\n```\ntest()\n```\n\n## Themes\n\nSets / Gets the current Theme.  If none is specified then returns the current theme.\nThis call replaces the ChangeLookAndFeel / change_look_and_feel call which only sets the theme.\n\n```\ntheme(new_theme=None)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|new_theme|(str) the new theme name to use|\n|||\n| **return** | (str) the currently selected theme |\n\nSets/Returns the background color currently in use\nUsed for Windows and containers (Column, Frame, Tab) and tables\n\n```\ntheme_background_color(color=None) -> (str) - color string of the background color currently in use\n```\n\nSets/Returns the border width currently in use\nUsed by non ttk elements at the moment\n\n```\ntheme_border_width(border_width=None) -> (int) - border width currently in use\n```\n\nSets/Returns the button color currently in use\n\n```\ntheme_button_color(color=None) -> Tuple[str, str] - TUPLE with color strings of the button color currently in use (button text color, button background color)\n```\n\nSets/Returns the background color currently in use for all elements except containers\n\n```\ntheme_element_background_color(color=None) -> (str) - color string of the element background color currently in use\n```\n\nSets/Returns the text color used by elements that have text as part of their display (Tables, Trees and Sliders)\n\n```\ntheme_element_text_color(color=None) -> (str) - color string currently in use\n```\n\nSets/Returns the input element background color currently in use\n\n```\ntheme_input_background_color(color=None) -> (str) - color string of the input element background color currently in use\n```\n\nSets/Returns the input element entry color (not the text but the thing that's displaying the text)\n\n```\ntheme_input_text_color(color=None) -> (str) - color string of the input element color currently in use\n```\n\nReturns a sorted list of the currently available color themes\n\n```\ntheme_list() -> List[str] - A sorted list of the currently available color themes\n```\n\nShow a window with all of the color themes - takes a while so be patient\n\n```\ntheme_previewer(columns=12)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|columns|(int) number of themes in a single row|\n\nSets/Returns the progress meter border width currently in use\n\n```\ntheme_progress_bar_border_width(border_width=None) -> (int) - border width currently in use\n```\n\nSets/Returns the progress bar colors by the current color theme\n\n```\ntheme_progress_bar_color(color=None) -> Tuple[str, str] - TUPLE with color strings of the ProgressBar color currently in use(button text color, button background color)\n```\n\nSets/Returns the slider border width currently in use\n\n```\ntheme_slider_border_width(border_width=None) -> (int) - border width currently in use\n```\n\nSets/Returns the slider color (used for sliders)\n\n```\ntheme_slider_color(color=None) -> (str) - color string of the slider color currently in use\n```\n\nSets/Returns the text color currently in use\n\n```\ntheme_text_color(color=None) -> (str) - color string of the text color currently in use\n```\n\nSets/Returns the background color for text elements\n\n```\ntheme_text_element_background_color(color=None) -> (str) - color string of the text background color currently in use\n```\n\n## Old Themes (Look and Feel) - Replaced by theme()\n\nChange the \"color scheme\" of all future PySimpleGUI Windows.\nThe scheme are string names that specify a group of colors. Background colors, text colors, button colors.\nThere are 13 different color settings that are changed at one time using a single call to ChangeLookAndFeel\nThe look and feel table itself has these indexes into the dictionary LOOK_AND_FEEL_TABLE.\nThe original list was (prior to a major rework and renaming)... these names still work...\nIn Nov 2019 a new Theme Formula was devised to make choosing a theme easier:\nThe \"Formula\" is:\n[\"Dark\" or \"Light\"] Color Number\nColors can be Blue Brown Grey Green Purple Red Teal Yellow Black\nThe number will vary for each pair. There are more DarkGrey entries than there are LightYellow for example.\nDefault = The default settings (only button color is different than system default)\nDefault1 = The full system default including the button (everything's gray... how sad... don't be all gray... please....)\n\n```\nChangeLookAndFeel(index, force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|index|(str) the name of the index into the Look and Feel table (does not have to be exact, can be \"fuzzy\")|\n|force|(bool) no longer used|\n\nGet a list of the valid values to pass into your call to change_look_and_feel\n\n```\nListOfLookAndFeelValues() -> List[str] - list of valid string values\n```\n\nDisplays a \"Quick Reference Window\" showing all of the different Look and Feel settings that are available.\nThey are sorted alphabetically.  The legacy color names are mixed in, but otherwise they are sorted into Dark and Light halves\n\n```\npreview_all_look_and_feel_themes(columns=12)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|columns|(int) The number of themes to display per row|\n\nGet a list of the valid values to pass into your call to change_look_and_feel\n\n```\nlist_of_look_and_feel_values() -> List[str] - list of valid string values\n```\n\nChange the \"color scheme\" of all future PySimpleGUI Windows.\nThe scheme are string names that specify a group of colors. Background colors, text colors, button colors.\nThere are 13 different color settings that are changed at one time using a single call to ChangeLookAndFeel\nThe look and feel table itself has these indexes into the dictionary LOOK_AND_FEEL_TABLE.\nThe original list was (prior to a major rework and renaming)... these names still work...\nIn Nov 2019 a new Theme Formula was devised to make choosing a theme easier:\nThe \"Formula\" is:\n[\"Dark\" or \"Light\"] Color Number\nColors can be Blue Brown Grey Green Purple Red Teal Yellow Black\nThe number will vary for each pair. There are more DarkGrey entries than there are LightYellow for example.\nDefault = The default settings (only button color is different than system default)\nDefault1 = The full system default including the button (everything's gray... how sad... don't be all gray... please....)\n\n```\nchange_look_and_feel(index, force=False)\n```\n\nParameter Descriptions:\n\n|Name|Meaning|\n|---|---|\n|index|(str) the name of the index into the Look and Feel table (does not have to be exact, can be \"fuzzy\")|\n|force|(bool) no longer used|\n\n---\n\n# \"Demo Programs\" Applications\n\nThere are too many to list!!\n\nThere are over 170 sample programs to give you a jump start.\n\nThese programs are an integral part of the overall PySimpleGUI documentation and learning system.  They will give you a headstart in a way you can learn from and understand.  They also show you integration techiques to other packages that have been figured out for you.\n\nYou will find Demo Programs located in a subfolder named \"Demo Programs\" under the top level and each of the PySimpleGUI ports on GitHub.\n\nDemo programs for plain PySimpleGUI (tkinter)\nhttps://github.com/PySimpleGUI/PySimpleGUI/tree/master/DemoPrograms\n\nDemo programs for PySimpleGUIQt:\nhttps://github.com/PySimpleGUI/PySimpleGUI/tree/master/PySimpleGUIQt/Demo%20Programs\n\nDemo programs for PySimpleGUIWx:\nhttps://github.com/PySimpleGUI/PySimpleGUI/tree/master/PySimpleGUIWx/Demo%20Programs\n\nDemo programs for PySimpleGUIWeb:\nhttps://github.com/PySimpleGUI/PySimpleGUI/tree/master/PySimpleGUIWeb/Demo%20Programs\n\nThere are not many programs under each of the port's folders because the main Demo Programs should run on all of the other platforms with minimal changes (often only the import statement changes).\n\nYou will also find a lot of demos running on Trinket\nhttp://Trinket.PySimpleGUI.org\n\n## Packages Used In Demos\n\n  While the core PySimpleGUI code  does not utilize any 3rd party packages, some of the demos do.  They add a GUI to a few popular packages.  These packages include:\n  * [Chatterbot](https://github.com/gunthercox/ChatterBot)\n  * [Mido](https://github.com/olemb/mido)\n  * [Matplotlib](https://matplotlib.org/)\n  * [PyMuPDF](https://github.com/rk700/PyMuPDF)\n  * OpenCV\n  * pymunk\n  * psutil\n  * pygame\n  * Forecastio\n\n# Creating a Windows .EXE File\n\nIt's possible to create a single .EXE file that can be distributed to Windows users. There is no requirement to install the Python interpreter on the PC you wish to run it on. Everything it needs is in the one EXE file, assuming you're running a somewhat up to date version of Windows.\n\nInstallation of the packages, you'll need to install PySimpleGUI and PyInstaller (you need to install only once)\n\n```bash\npip install PySimpleGUI\npip install PyInstaller\n\n```\n\nTo create your EXE file from your program that uses PySimpleGUI,  `my_program.py`, enter this command in your Windows command prompt:\n\n```bash\npyinstaller -wF my_program.py\n\n```\n\nYou will be left with a single file,  `my_program.exe`, located in a folder named  `dist`  under the folder where you executed the  `pyinstaller`  command.\n\nThat's all... Run your  `my_program.exe`  file on the Windows machine of your choosing.\n\n> \"It's just that easy.\"\n\n(famous last words that screw up just about anything being referenced)\n\nYour EXE file should run without creating a \"shell window\". Only the GUI window should show up on your taskbar.\n\nIf you get a crash with something like:\n```python\nValueError: script '.......\\src\\tkinter' not found\n```\n\nThen try adding **`--hidden-import tkinter`** to your command\n\n# Creating a Mac App File\n\nThere are reports that PyInstaller can be used to create App files.  It's not been officially tested.\n\nRun this command on your Mac\n\n> pyinstaller --onefile --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl' your_program.py\n\nThis info was located on Reddit with the source traced back to:\nhttps://github.com/pyinstaller/pyinstaller/issues/1350\n\n# Debug Output\n\nBe sure and check out the EasyPrint (Print) function described in the high-level API section.  Leave your code the way it is, route your stdout and stderror to a scrolling window.\n\nFor a fun time, add these lines to the top of your script\n\n```python\n    import PySimpleGUI as sg\n    print = sg.Print\n```\nThis will turn all of your print statements into prints that display in a window on your screen rather than to the terminal.\n\n# Look and Feel\n\nYou can change defaults and colors of a large number of things in PySimpleGUI quite easily.\n\n##  `ChangleLookAndFeel`\n\nWant a quick way of making your windows look a LOT better?  Try calling `ChangeLookAndFeel`.  It will, in a single call, set various color values to widgets, background, text, etc.\n\nOr dial in the look and feel (and a whole lot more) that you like with the `SetOptions` function.  You can change all of the defaults in one function call.  One line of code to customize the entire GUI.\n\n```python\n    sg.ChangeLookAndFeel('GreenTan')\n```\n\nValid look and feel values are currently:\n\n```python\nSystemDefault\nReddit\nTopanga\nGreenTan\nDark\nLightGreen\nDark2\nBlack\nTan\nTanBlue\nDarkTanBlue\nDarkAmber\nDarkBlue\nReds\nGreen\nBluePurple\nPurple\nBlueMono\nGreenMono\nBrownBlue\nBrightColors\nNeutralBlue\nKayak\nSandyBeach\nTealMono\n```\n\nThe way this call actually works is that it calls `SetOptions` with a LOT of color settings.  Here is the actual call that's made.  As you can see lots of stuff is defined for you.\n\n```python\nSetOptions(background_color=colors['BACKGROUND'],\n            text_element_background_color=colors['BACKGROUND'],\n            element_background_color=colors['BACKGROUND'],\n            text_color=colors['TEXT'],\n            input_elements_background_color=colors['INPUT'],\n            button_color=colors['BUTTON'],\n            progress_meter_color=colors['PROGRESS'],\n            border_width=colors['BORDER'],\n            slider_border_width=colors['SLIDER_DEPTH'],\n            progress_meter_border_depth=colors['PROGRESS_DEPTH'],\n            scrollbar_color=(colors['SCROLL']),\n            element_text_color=colors['TEXT'],\n            input_text_color=colors['TEXT_INPUT'])\n```\n\nTo see the latest list of color choices you can call `ListOfLookAndFeelValues()`\n\nYou can also combine the `ChangeLookAndFeel` function with the `SetOptions` function to quickly modify one of the canned color schemes.  Maybe you like the colors but was more depth to your bezels.  You can dial in exactly what you want.\n\n**ObjToString**\nEver wanted to easily display an objects contents easily?  Use ObjToString to get a nicely formatted recursive walk of your objects.\nThis statement:\n\n    print(sg.ObjToSting(x))\n\nAnd this was the output\n\n    <class '__main__.X'>\n        abc = abc\n        attr12 = 12\n        c = <class '__main__.C'>\n            b = <class '__main__.B'>\n                a = <class '__main__.A'>\n                    attr1 = 1\n                    attr2 = 2\n                    attr3 = three\n                attr10 = 10\n                attrx = x\n\nYou'll quickly wonder how you ever coded without it.\n\n---\n# Known Issues\n\nWell, there are a few quirks, and problems of course.  Check the [GitHub Issues database](https://github.com/PySimpleGUI/PySimpleGUI/issues) for a list of them.\n\nAs previously mentioned **this is where you should post all problems and enhancements.**\n\nRandom crashes have been rared.  The code is stable and hasn't been \"quirky\" nor have there been many \"emergency\" releases.\n\n## MACS & tkinter\n\nMacs and PySimpleGUI did not play well together up until Nov 2019 and the release of ttk buttons.  Prior to that buttons had to be white.  Now the Mac can use any color for buttons and they work great.  Images on buttons work as well.\n\nThe problems were the normal tk.Button was not working correctly on the Mac.  You couldn't set the button color.  If you tried it appeared as if the text was missing.\n\nUsers have recently reported the ability to install Python 3.7 from the Python.org website and not use the Homebrew version.  This resolved all of the button color problems. \n\nRegardless of where you get your Python / tkinter, Macs can now enjoy using all of the look and feel color themes that Windows and Linux users are able to achieve.\n\nMany PySimpleGUI users have switched from PySimpleGUI to PySimpleGUIQt due to the button problems.  IF you're one of them, ***you should consider switching back***.  One reason to return to PySimpleGUI is that features tend to get iumplemented on PySimpleGUI (tkinger version) and then later on the  other ports.  There are a number of other reasons to give tkinter another try.\n\n## Multiple threads\n\nConsider this is a ***stern warning***\n\n### **Do not attempt** to call `PySimpleGUI` from multiple threads! At least the `tkinter` based port because tkinter is not threadsafe and has known issues with multiple threads\n\nTkinter also wants to be the MAIN thread in your code.  So, if you have to run multiple threads, make sure the GUI is the main thread.\n\nOther than that, feel free to use threads with PySimpleGUI on all of the ports.  You'll find a good example for how to run \"long running tasks\" in your event loop by looking at the demo program: `Demo_Multithreaded_Long_Tasks.py`.  There are several examples of using threads with PySimpleGUI.\n\nBe sure and **delete** your windows after you close them if you are running with multiple threads.  There is a chance another thread's garbage collect will attempt to delete the window when not in the mainthread which will cause tkinter to crash.\n\n### The dreaded \"Tcl_AsyncDelete: async handler deleted by the wrong thread\" error\n\nThis crash has plagued and mystified tkinter users for some time now.  It happens when the user is running multiple threads in their application.  Even if the user doesn't make any calls that are into tkinter, this problem can still cause your program to crash.\n\nI'm thrilled to say there's a solution and it's easy to implement.  If you're getting this error, then here is what is causing it.\n\nWhen you close a window and delete the layout, the tkinter widgets that were in use in the window are no longer needed.  Python marks them to be handled by the \"Garbage Collector\".  They're deleted but not quite gone from memory.  Then, later, while your thread is running, the Python Garbage Collect algorithm decides it's time to run garbage collect.  When it tells tkinter to free up the memory, the tkinter code looks to see what context it is running under.  It sees that it's a thread, not the main thread, and generates this exception.  \n\nThe way around this is actually quite easy.\n\nWhen you are finished with a window, be sure to:\n\n* Close the Window\n* Set the `layout` variable to None\n* Set the `window` variable to None\n* Trigger Python's Garbage Collect to run immediately\n\nThe sequence looks like this in code:\n\n```python\n    import gc\n\n    # Do all your windows stuff... make a layout... show your window... then when time to exit\n    window.close()\n    layout = None\n    window = None\n    gc.collect()\n```\n\nThis will ensure that the tkinter widgets are all deleted in the context of the mainthread and another thread won't accidently run the Garbage Collect\n\n# Contributing\n\n## Write Applications\n\nThe way for you to contribute to the PySimpleGUI is to create and share PySimpleGUI GUIs.  **Everyone** learns from seeing other peoples' implementations.  It's through user's creating applications that new problems and needs are discovered.  These have had a profound and positive impact on the project and helped to create thw you see today.\n\n## Pull Requests\n\n***PySimpleGUI changes/pull requests are not being accepted at this time.***\n\n## GitHub Repos\n\nIf you've created a GitHub for your project that uses PySimpleGUI then please post screenshots in in the \"User's Screenshots\" Issue on the PySimpleGUI GitHub.  Say a little something about it and I'll also add it to the annoucements. People *love* success stories and showing your GUI's screen visually communicates your success. \n\n## Versions\n|Version | Description |\n|--|--|\n| 1.0.9   | July 10, 2018 - Initial Release |\n| 1.0.21 | July 13, 2018 - Readme updates  |\n| 2.0.0 | July 16, 2018 - ALL optional parameters renamed from CamelCase to all_lower_case\n| 2.1.1 | July 18, 2018 - Global settings exposed, fixes\n| 2.2.0| July 20, 2018 - Image Elements, Print output\n| 2.3.0 | July 23, 2018 - Changed form.Read return codes, Slider Elements, Listbox element. Renamed some methods but left legacy calls in place for now.\n| 2.4.0 | July 24, 2018 - Button images. Fixes so can run on Raspberry Pi\n| 2.5.0 | July 26, 2018 - Colors. Listbox scrollbar. tkinter Progress Bar instead of homegrown.\n| 2.6.0 | July 27, 2018 - auto_size_button setting.  License changed to LGPL 3+\n| 2.7.0 | July 30, 2018 - realtime buttons, window_location default setting\n| 2.8.0 | Aug 9, 2018 - New None default option for Checkbox element, text color option for all elements, return values as a dictionary, setting focus, binding return key\n| 2.9.0 | Aug 16,2018 - Screen flash fix, `do_not_clear` input field option, `autosize_text` defaults to `True` now, return values as ordered dict, removed text target from progress bar, rework of return values and initial return values, removed legacy Form.Refresh() method (replaced by Form.ReadNonBlockingForm()), COLUMN elements!!, colored text defaults\n| 2.10.0 | Aug 25, 2018 - Keyboard & Mouse features (Return individual keys as if buttons, return mouse scroll-wheel as button, bind return-key to button, control over keyboard focus), SaveAs Button, Update & Get methods for InputText, Update for Listbox, Update & Get for Checkbox, Get for Multiline, Color options for Text Element Update, Progess bar Update can change max value, Update for Button to change text & colors, Update for Image Element, Update for Slider, Form level text justification, Turn off default focus, scroll bar for Listboxes, Images can be from filename or from in-RAM, Update for Image).  Fixes - text wrapping in buttons, msg box, removed slider borders entirely and others\n| 2.11.0 | Aug 29, 2018 - Lots of little changes that are needed for the demo programs to work. Buttons have their own default element size, fix for Mac default button color, padding support for all elements, option to immediately return if list box gets selected, FilesBrowse button, Canvas Element, Frame Element, Slider resolution option, Form.Refresh method, better text wrapping, 'SystemDefault' look and feel settin\n| 2.20.0 | Sept 4, 2018 - Some sizable features this time around of interest to advanced users.  Renaming of the MsgBox functions to Popup. Renaming GetFile, etc, to PopupGetFile. High-level windowing capabilities start with Popup, PopupNoWait/PopupNonblocking, PopupNoButtons, default icon, change_submits option for Listbox/Combobox/Slider/Spin/, New OptionMenu element, updating elements after shown, system defaul color option for progress bars, new button type (Dummy Button) that only closes a window, SCROLLABLE Columns!! (yea, playing in the Big League now), LayoutAndShow function removed, form.Fill - bulk updates to forms, FindElement - find element based on key value (ALL elements have keys now), no longer use grid packing for row elements (a potentially huge change), scrolled text box sizing changed, new look and feel themes (Dark, Dark2, Black, Tan, TanBlue, DarkTanBlue, DarkAmber, DarkBlue, Reds, Green)\n| 2.30.0 | Sept 6, 2018 - Calendar Chooser (button), borderless windows, load/save form to disk\n| 3.0.0 | Sept 7, 2018 - The \"fix for poor choice of 2.x numbers\" release. Color Chooser (button), \"grab anywhere\" windows are on by default, disable combo boxes, Input Element text justification (last part needed for 'tables'), Image Element changes to support OpenCV?, PopupGetFile and PopupGetFolder have better no_window option\n| 3.01.01 | Sept 10, 2018 - Menus! (sort of a big deal)\n| 3.01.02 | Step 11, 2018 - All Element.Update functions have a `disabled` parameter so they can be disabled.  Renamed some parameters in Update function (sorry if I broke your code), fix for bug in Image.Update. Wasn't setting size correctly, changed grab_anywhere logic again,added grab anywhere option to PupupGetText (assumes disabled)\n| 3.02.00 | Sept 14, 2018 - New Table Element (Beta release), MsgBox removed entirely, font setting for InputText Element, **packing change** risky change that allows some Elements to be resized,removed command parameter from Menu Element, new function names for ReadNonBlocking (Finalize, PreRead), change to text element autosizing and wrapping (yet again), lots of parameter additions to Popup functions (colors, etc).\n| 3.03.00 | New feature - One Line Progress Meters, new display_row_numbers for Table Element, fixed bug in EasyProgresssMeters (function will soon go away), OneLine and Easy progress meters set to grab anywhere but can be turned off.\n| 03,04.00 | Sept 18, 2018 - New features - Graph Element, Frame Element, more settings exposed to Popup calls.  See notes below for more.\n| 03.04.01 | Sept 18, 2018 - See release notes\n| 03.05.00 | Sept 20, 2018 - See release notes\n| 03.05.01 | Sept 22, 2018 - See release notes\n| 03.05.02 | Sept 23, 2018 - See release notes\n| 03.06.00 | Sept 23, 2018 - Goodbye FlexForm, hello Window\n| 03.08.00 | Sept 25, 2018 - Tab and TabGroup Elements\\\n| 01.00.00 for 2.7 | Sept 25, 2018 - First release for 2.7\n| 03.08.04 | Sept 30, 2018 - See release notes\n| 03.09.00 | Oct 1, 2018 |\n| 2.7 01.01.00 | Oct 1, 2018\n| 2.7 01.01.02 | Oct 8, 2018\n| 03.09.01 | Oct 8, 2018\n| 3.9.3 & 1.1.3 | Oct 11, 2018\n| 3.9.4 & 1.1.4 | Oct 16, 2018\n| 3.10.1 & 1.2.1 | Oct 20, 2018\n| 3.10.3 & 1.2.3 | Oct 23, 2018\n| 3.11.0 & 1.11.0 | Oct 28, 2018\n| 3.12.0 & 1.12.0 | Oct 28, 2018\n| 3.13.0 & 1.13.0 | Oct 29, 2018\n| 3.14.0 & 1.14.0 | Nov 2, 2018\n| 3.15.0 & 1.15.0 | Nov 20, 2018\n| 3.16.0 & 1.16.0 | Nov 26, 2018\n| 3.17.0 & 1.17.0 | Dec 1, 2018\n\n## Release Notes\n2.3 - Sliders, Listbox's and Image elements (oh my!)\n\nIf using Progress Meters, avoid cancelling them when you have another window open.  It could lead to future windows being blank. It's being worked on.\n\nNew debug printing capability.  `sg.Print`\n\n2.5 Discovered issue with scroll bar on `Output` elements.  The bar will match size of ROW not the size of the element.  Normally you never notice this due to where on a form the `Output` element goes.\n\nListboxes are still without scrollwheels. The mouse can drag to see more items.  The mouse scrollwheel will also scroll the list and will `page up` and `page down` keys.\n\n2.7 Is the \"feature complete\" release. Pretty much all features are done and in the code\n\n2.8 More text color controls.  The caller has more control over things like the focus and what buttons should be clicked when enter key is pressed. Return values as a dictionary! (NICE addition)\n\n2.9 COLUMNS!  This is the biggest feature and had the biggest impact on the code base.  It was a difficult feature to add, but it was worth it.  Can now make even more layouts. Almost any layout is possible with this addition.\n\n.................. insert releases 2.9 to 2.30 .................\n\n3.0 We've come a long way baby!  Time for a major revision bump.  One reason is that the numbers started to confuse people  the latest release was 2.30, but some people read it as 2.3 and thought it went backwards.  I kinda messed up the 2.x series of numbers, so why not start with a clean slate.  A lot has happened anyway so it's well earned.\n\nOne change that will set PySimpleGUI apart is the parlor trick of being able to move the window by clicking on it anywhere.  This is turned on by default.  It's not a common way to interact with windows.  Normally you have to move using the titlebar.  Not so with PySimpleGUI.  Now you can drag using any part of the window.  You will want to turn off for windows with sliders.  This feature is enabled in the Window call.\n\nRelated to the Grab Anywhere feature is the no_titlebar option, again found in the call to Window.  Your window will be a spiffy, borderless window.  It's a really interesting effect.  Slight problem is that you do not have an icon on the taskbar with these types of windows, so if you don't supply a button to close the window, there's no way to close it other than task manager.\n\n3.0.2 Still making changes to Update methods with many more ahead in the future.  Continue to mess with grab anywhere option.  Needed to disable in more places such as the PopupGetText function.  Any time these is text input on a form, you generally want to turn off the grab anywhere feature.\n\n#### 3.2.0\n Biggest change was the addition of the Table Element.  Trying to make changes so that form resizing is a possibility but unknown if will work in the long run.  Removed all MsgBox, Get* functions and replaced with Popup functions.  Popups had multiple new parameters added to change the look and feel of a popup.\n\n#### 3.3.0\nOneLineProgressMeter function added which gives you not only a one-line solution to progress meters, but it also gives you the ability to have more than 1 running at the same time, something not possible with the EasyProgressMeterCall\n\n#### 3.4.0\n\n* Frame - New Element - a labelled frame for grouping elements. Similar\n   to Column\n* Graph (like a Canvas element except uses the caller's\n   coordinate system rather than tkinter's).\n* initial_folder - sets starting folder for browsing type buttons (browse for file/folder).\n* Buttons return  key value rather than button text **If** a `key` is specified,\n*\n   OneLineProgressMeter!  Replaced EasyProgressMeter (sorry folks that's\n   the way progress works sometimes)\n * Popup - changed ALL of the Popup calls to   provide many more customization settings\n    * Popup\n    * PopupGetFolder\n    * PopupGetFile\n    * PopupGetText\n    * Popup\n    * PopupNoButtons\n    * PopupNonBlocking\n    * PopupNoTitlebar\n    * PopupAutoClose\n    * PopupCancel\n    * PopupOK\n    * PopupOKCancel\n    * PopupYesNo\n\n#### 3.4.1\n* Button.GetText - Button class method.  Returns the current text being shown on a button.\n* Menu - Tearoff option. Determines if menus should allow them to be torn off\n* Help - Shorcut button. Like Submit, cancel, etc\n* ReadButton - shortcut for ReadFormButton\n\n#### 3.5.0\n* Tool Tips for all elements\n* Clickable text\n* Text Element relief setting\n* Keys as targets for buttons\n* New names for buttons:\n   * Button = SimpleButton\n   * RButton = ReadButton = ReadFormButton\n* Double clickable list entries\n* Auto sizing table widths works now\n* Feature DELETED - Scaling. Removed from all elements\n\n#### 3.5.1\n* Bug fix for broken PySimpleGUI if Python version < 3.6 (sorry!)\n* LOTS of Readme changes\n\n#### 3.5.2\n* Made `Finalize()` in a way that it can be chained\n* Fixed bug in return values from Frame Element contents\n\n#### 3.6.0\n* Renamed FlexForm to Window\n* Removed LookAndFeel capability from Mac platform.\n\n#### 3.8.0\n* Tab and TabGroup Elements - awesome new capabilities\n\n#### 1.0.0 Python 2.7\nIt's official.  There is a 2.7 version of PySimpleGUI!\n\n#### 3.8.2\n* Exposed `TKOut` in Output Element\n* `DrawText` added to Graph Elements\n* Removed `Window.UpdateElements`\n* `Window.grab_anywere` defaults to False\n\n#### 3.8.3\n* Listbox, Slider, Combobox, Checkbox,  Spin, Tab Group - if change_submits is set, will return the Element's key rather than ''\n* Added change_submits capability to Checkbox, Tab Group\n* Combobox - Can set value to an Index into the Values table rather than the Value itself\n* Warnings added to Drawing routines for Graph element (rather than crashing)\n* Window - can \"force top level\" window to be used rather than a normal window.  Means that instead of calling Tk to get a window, will call TopLevel to get the window\n* Window Disable / Enable - Disables events (button clicks, etc) for a Window.  Use this when you open a second window and want to disable the first window from doing anything. This will simulate a 'dialog box'\n* Tab Group returns a value with Window is Read.  Return value is the string of the selected tab\n* Turned off grab_anywhere for Popups\n* New parameter, default_extension, for PopupGetFile\n* Keyboard shortcuts for menu items. Can hold ALT key to select items in men\n* Removed old-style Tabs - Risky change because it hit fundamental window packing and creation. Will also break any old code using this style tab (sorry folks this is how progress happens)\n\n#### 3.8.6\n\n* Fix for Menus.\n* Fixed table colors. Now they work\n* Fixed returning keys for tabs\n* Window Hide / UnHide methods\n* Changed all Popups to remove context manager\n* Error checking for Graphing objects and for Element Updates\n\n### 3.9.0 & 1.1.0\n* The FIRST UNIFIED version of the code!\n* Python 2.7 got a TON of features . Look back to 1.0 release for the list\n* Tab locations - Can place Tabs on top, bottom, left, right now instead of only the top\n\n### 3.9.1 & 1.1.2\n* Tab features\n   * Themes\n   * Enable / Disable\n   * Tab text colors\n   * Selected tab color\n* New GetListValues method for Listbox\n* Can now have multiple progress bars in 1 window\n* Fix for closing debug-output window with other windows open\n* Topanga Look and Feel setting\n* User can create new look and feel settings / can access the look and feel table\n* New PopupQuick call. Shows a non-blocking popup window with auto-close\n* Tree Element partially done (don't use despite it showing up)\n\n### 3.9.3 & 1.1.3\n\n* Disabled setting when creating element for:\n   * Input\n  * Combo\n  * Option Menu\n  * Listbox\n  * Radio\n  * Checkbox\n  * Spinner\n  * Multiline\n  * Buttons\n  * Slider\n* Doc strings on all Elements updated\n* Buttons can take image data as well as image files\n* Button Update can change images\n* Images can have background color\n* Table element new num_rows parameter\n* Table Element new alternating_row_color parameter\n* Tree Element\n* Window Disappear / Reappear methods\n* Popup buttons resized to same size\n* Exposed look and feel table\n\n###  3.9.4 & 1.1.4\n\n* Parameter order change for Button.Update so that new button ext is at front\n* New Graph.DrawArc method\n* Slider tick interval parameter for labeling sliders\n* Menu tearoff now disabled by default\n* Tree Data printing simplified and made prettier\n* Window resizable parameter.  Defaults to not resizable\n* Button images can have text over them now\n* BUG fix in listbox double-click.  First bug fix in months\n* New Look And Feel capability.  List predefined settings using ListOfLookAndFeelValues\n\n### 3.10.1 & 1.2.1\n* Combobox new readonly parameter in init and Update\n* Better default sizes for Slider\n* Read of Tables now returns which rows are selected (big damned deal feature)\n* PARTIAL support of Table.Update with new values (use at your own peril)\n* Alpha channel setting for Windows\n* Timeout setting for Window.Read (big damned deal feature)\n* Icon can be base64 image now in SetIcon call\n* Window.FindElementWithFocus call\n* Window.Move allows moving window anywhere on screen\n* Window.Minimize will minimize to taskbar\n* Button background color can be set to system default (i.e. not changed)\n\n### 3.10.2 & 1.2.2\nEmergency patch release... going out same day as previous release\n* The timeout timer for the new Read with timer wasn't being properly shut down\n* The Image.Update method appears to not have been written correctly.  It didn't handle base64 images like the other elements that deal with images (buttons)\n\n### 3.10.3 & 1.2.3\n\n* New element - Vertical Separator\n* New parameter for InputText - change_submits. If True will cause Read to return when a button fills in the InputText element\n* Read with timeout = 0 is same as read non blocking and is the new preferred method\n  * Will return event == None if window closed\n* New Close method will close all window types\n* Scrollbars for Tables automatically added (no need for a Column Element)\n* Table Update method complete\n* Turned off expand when packing row frame... was accidentally turned on (primary reason for this release)\n* Try added to Image Update so won't crash if bad image passed in\n\n### 3.11.0 & 1.11.0\n* Syncing up the second digit of the releases so that they stay in sync better.  the 2.7 release is built literally from the 3.x code so they really are the same\n* Reworked Read call... significantly.\n* Realtime buttons work with timeouts or blocking read\n* Removed default value parm on Buttons and Button Updates\n* New Tree Element parm show_expanded. Causes Tree to be shown as fully expanded\n* Tree Element now returns which rows are selected when Read\n* New Window method BringToFront\n* Shortcut buttons no longer close windows!\n* Added CloseButton, CButton that closes the windows\n\n### 3.12.0 & 1.12.0\n* Changed Button to be the same as ReadButton which means it will no longer close the window\n* All shortcut buttons no longer close the window\n* Updating a table clears selected rows information in return values\n* Progress meter uses new CloseButton\n* Popups use new CloseButton\n\n### 3.13.0 & 1.13.0\n* Improved multiple window handling of Popups when the X is used to close\n* Change submits added for:\n  * Multiline\n  * Input Text\n  * Table\n  * Tree\n * Option to close calendar chooser when date selected\n * Update for Tree Element\n * Scroll bars for Trees\n\n### 3.14.0 & 1.14.0\n* More windowing changes...\n    * using a hidden root windowing (Tk())\n    * all children are Toplevel() windows\n* Read only setting for:\n    * Input Text\n    * Multiline\n* Font setting for InputCombo, Multiline\n* change_submits setting for Radio Element\n* SetFocus for multiline, input elements\n* Default mon, day, year for calendar chooser button\n* Tree element update, added ability to change a single key\n* Message parm removed from ReadNonBlocking\n* Fix for closing windows using X\n* CurrentLocation method for Windows\n* Debug Window options\n    * location\n    * font\n    * no_button\n    * no_titlebar\n    * grab_anywhere\n    * keep_on_top\n* New Print / EasyPrint options\n    * location\n    * font\n    * no_button\n    * no_titlebar\n    * grab_anywhere\n    * keep_on_top\n* New popup, PopupQuickMessage\n* PopupGetFolder, PopupGetFile new initial_folder parm\n\n### 3.15.0 & 1.15.0\n\n* Error checking for InputText.Get method\n* Text color, background color added to multiline element.Update\n* Update method for Output Element - gives ability to clear the output\n* Graph Element - Read returns values if new flages set\n    * Change submits, drag submits\n    *   Returns x,y coordinates\n* Column element new parm vertical_scroll_only\n* Table element new parm - bind return key - returns if return or double click\n* New Window parms - size, disable_close\n* \"Better\" multiwindow capabilities\n* Window.Size property\n* Popups - new title parm, custom_text\n    * title sets the window title\n    * custom_text - single string or tuple string sets text on button(s)\n\n### 3.16.0 & 1.16.0\n* Bug fix in PopupScrolled\n* New `Element` shortcut function for `FindElement`\n* Dummy Stretch Element made for backwards compatibility with Qt\n* Timer function prints in milliseconds now, was seconds\n\n### 3.17.0 &1.17.0 2-Dec-2018\n3.17.0 2-Dec-2017\n* Tooltip offset now programmable.  Set variable DEFAULT_TOOLTIP_OFFSET.  Defaults to (20,-20)\n* Tooltips are always on top now\n* Disable menu items\n* Menu items can have keys\n* StatusBar Element (preparing for a real status bar in Qt)\n* enable_events parameter added to ALL Elements capable of generating events\n* InputText.Update select parameter will select the input text\n* Listbox.Update - set_to_index parameter will select a single items\n* Menus can be updated!\n* Menus have an entry in the return values\n* LayoutAndRead depricated\n* Multi-window support continues (X detection)\n* PopupScrolled now has a location parameter\n* row_height parameter to Table Element\n* Stretch Element (DUMMY) so that can be source code compatible with Qt\n* ButtonMenu Element (DUMMY) so can be source code compat with Qt.  Will implement eventually\n\n## 3.18.0  11-Dec-2018\n\n NOTE - **Menus are broken** on version 2.7.  Don't know how long they've been this way.  Please get off legacy Python if that's what you're running.\n\n* Default progress bar length changed to shorter\n* Master window and tracking of num open windows moved from global to Window class variable\n* Element visibility setting (when created and when Updating element)\n* Input text visiblity\n* Combo visiblity\n* Combo replaces InputCombo as the primary class name\n* Option menu visibility\n* Listbox visiblity\n* Listbox new SetFocus method\n* Radio visibility\n* Checkbox visibility\n* Spin visiblity\n* Spin new Get method returns current value\n* Multiline visiblity\n* Text visibility\n* StatusBar visiblity\n* Output visibility\n* Button visibility\n* Button SetFocus\n* ProgressBar - New Update method (used only for visibility)\n* Image - clickable images!  enable_events parameter\n* Image visibility\n* Canvas visibility\n* Graph visibility\n* Graph - new DrawImage capability (finally)\n* Frame visibility\n* Tab visibility (may not be fully functional)\n* TabGroup visibility\n* Slider visibility\n* Slider - new disable_number_display parameter\n* Column visibilty\n* Menu visibility - Not functional\n* Table visibility\n* Table - new num_rows parm for Update - changes number of visible rows\n* Tree visiblity\n* Window - New element_padding parameter will get padding for entire window\n* OneLineProgressMeter - Completely REPLACED the implementation\n* OneLineProgressMeter - can get reason for the cancellation (cancel button versus X)\n* EasyProgressMeter - completely removed. Use OneLineProgressMeter instead\n* Debug window, EasyPrint, Print - debug window will re-open if printed to after being closed\n* SetOptions - can change the error button color\n* Much bigger window created when running PySimpleGUI.py by itself.  Meant to help with regression testing\n\n## 3.19.2  13-Dec-2018\n\n* Warning for Mac's when trying to change button color\n* New parms for Button.Update - image_size and image_subsample\n* Buttons - remove highlight when border depth == 0\n* OneLineProgressMeter - better layout implementation\n\n## 3.20.0 & 1.20.0 18-Dec-2018\n\n* New Pane Element\n* Graph.DeleteFigure method\n* disable_minimize - New parameter for Window\n* Fix for 2.7 menus\n* Debug Window no longer re-routes stdout by default\n* Can re-route by specifying in Print / EasyPrint call\n* New non-blocking for PopupScrolled\n* Can set title for PopupScrolled window\n\n## 3.21.0 & 1.21.0 28-Dec-2018\n\n* ButtonMenu Element\n* Embedded base64 default icon\n* Input Text Right click menu\n* Disabled Input Text are now 'readonly' instead of disabled\n* Listbox right click menu\n* Multiline right click menu\n* Text right click menu\n* Output right click menu\n* Image right click menu\n* Canvas right click menu\n* Graph right click menu\n* Frame right click menu\n* Tab, tabgroup right click menu (unsure if works correctly)\n* Column right click menu\n* Table right click menu\n* Tree right click menu\n* Window level right click menu\n* Window icon can be filename or bytes (Base64 string)\n* Window.Maximize method\n* Attempted to use Styles better with Combobox\n* Fixed bug blocking setting bar colors in OneLineProgressMeter\n\n# 3.22.0 PySimpleGUI / 1.22.0 PySimpleGUI27\n\n* Added type hints to some portions of the code\n* Output element can be made invisible\n* Image sizing and subsample for Button images\n* Invisibility for ButtonMenusup\n* Attempt at specifying size of Column elements (limited success)\n* Table Element\n  * New row_colors parameter\n  * New vertical_scroll_only parameter - NOTE - will have to disable to get horizontal scrollbars\n* Tree Element\n  * New row_height parameter\n  * New feature - Icons for tree entries using filename or Base64 images\n* Fix for bug sending back continuous mouse events\n* New parameter silence_on_error for FindElement / Element calls\n* Slider returns float now\n* Fix for Menus when using Python 2.7\n* Combobox Styling (again)\n\n# 3.2.0 PySimpleGUI /  1.23.0 PySimpleGUI27 16-Jan-2019\n\n* Animated GIFs!\n* Calendar Chooser stays on top of other windows\n* Fixed bug of no column headings for Tables\n* Tables now use the font parameter\n\n# 3.24.0 1.24.0 16-Jan-2019\n\n* PopupAnimated - A popup call for showing \"loading\" type of windows\n\n# 3.25 & 1.25 20-Feb-2019\n\n* Comments :-)\n* Convert Text to string right away\n* Caught exceptions when main program shut down with X\n* Caught exceptions in all of the graphics primitives\n* Added parameter exportselection=False to Listbox so can use multiple listboxes\n* OneLineProgressMeter - Can now change the text on every call if desired\n\n## 3.27.0 PySimpleGUI  31-Mar-2019\n\nMixup.... 3.26 changes don't appear to have been correctly released so releasing in 3.27 now\n\n* do_not_clear now defaults to TRUE!!!\n  * Input Element\n  * Multiline Element\n* Enable Radio Buttons to be in different containers\n* Ability to modify Autoscroll setting in Multiline.Update call\n* PopupGetFolder, PopupGetFile, PopupGetText - title defaults to message if none provided\n* PopupAnimated - image_source can be a filename or bytes (base64)\n* Option Menu can now have values updated\n\n## 3.28.0 11-Apr-2019 PySimpleGUI\n\n* NEW Window Parameter - layout - second parameter. Can pass in layout directly now!\n* New shortcuts\n    * I = InputText\n    * B = Btn = Butt = Button\n* Convert button text to string when creating buttons\n* Buttons are returned now as well as input fields when searching for element with focus\n\n## 3.29 22-Apr-2019\n\n* New method for `Graph` - `RelocateFigure`\n* Output Element no longer accepts focus\n\n## 3.32.0 PySimpleGUI 24-May-2019\n\n* Rework of ALLL Tooltips. Was always displaying at uttuper left part of element. Not displays closer to where mouse entered or edited\n* New Element.Widget base class variable. Brings tkinter into the newer architecture of user accessibility to underlying GUI Frameworks' widgets\n* New SetTooltip Element method. Means all Elements gain this method. Can set the tooltip on the fly now for all elements\n* Include scroll bar when making visible / invisible Listbox Elements\n* New Radio Element method - `Radio.ResetGroup()` sets all elements in the Radio Group to False* Added borderwidth to Multiline Element\n* `Button.Click()` - new method - Generates a button click even as if a user clicked a button (at the tkinter level)\n* Made a Graph.Images dictionary to keep track of images being used in a graph.  When graph is deleted, all of the accociated images should be deleted too.'\n* Added `Graph.SetFocus()` to give a Graph Element the focus just as you can input elements\n* Table new parameter - `hide_vertical_scroll` if True will hide the table's vertical bars\n* Window - new parameter - `transparent_color`. Causes a single color to become completely transparent such that you see through the window, you can click through the window. Its like tineows never was there.\n* The new `Window.AllKeysDict = {}` has been adopted by all PySimpleGUI ports.  It's a new method of automatically creating missing keys, storing and retrieving keys in general for a window.\n* Changed how `window.Maximize` is implemented previously used the '-fullscreen' attribute.  Now uses the 'zoomed' state\n* Window gets a new `Normal()` method to return from Maximize state.  Sets root.state('normal')\n* Window.Close() now closes the special `Window.hidden_master_root` window when the \"last\" window is closed\n* `Window.SetTransparentColor` method added.  Same effect as if window was created with parameter set\n* An Element's Widget stored in `.Widget` attribute\n* Making ComboBox's ID unique by using it's Key\n* Changed Multiline to be sunken and have a border depth setting now\n* Removed a second canvas that was being used for Graph element.\n* Changed how no titlebar is implemented running on Linux versus Windows. -type splash now used for Linux\n* PopupScrolled - Added back using CloseButton to close the window\n* Fixed PopupGetFolder to use correct PySimpleGUI program constructs (keys)\n* PopupGetText populated values carrectly using the value variable, used keys\n* PopupAnimated finally gets a completely transparent background\n\n## 3.33.0 and 1.33 PySimpleGUI 25-May-2019\n\n* Emergency fix due to debugger.  Old bug was that Image Element was not testing for COLOR_SYSTEM_DEFAULT correctly.\n\n## 3.34.0 PySimpleGUI & 1.34.0 PySimpleGUI27 25-May-2019\n\n  pip rhw  w cenf\n* Fixed Window.Maximize and Window.Normal - needed special code for Linux\n* Check for DEFAULT_SCROLLBAR_COLOR not being the COLOR_SYSTEM_DEFAULT (crashed)\n\n## 3.35 PySimpleGUI & 1.35 PySimpleGUI27 27-May-2019\n\n* Bug fix - when setting default for Checkbox it was also disabling the element!\n\n## 3.36 PySimpleGUI & 1.36 PySimpleGUI27 29-May-2019\n\nA combination of user requests, and needs of new `imwatchingyou` debugger\n\n* New Debugger Icon for future built-in debugger\n* Fixed bug in FindBoundReturnKey - needed to also check Panes\n* NEW Window functions to turn on/off the Grab Anywhere feature\n    * `Window.GrabAnyWhereOn()`\n    * `Window.GrabAnyWhereOff()`\n* New \"Debugger\" button that's built-in like other buttons.  It's a TINY button with a logo. For future use when a debugger is built into PySimpleGUI itself (SOON!)\n* Change Text Element Wrap Length calculation.  Went fromn +40 pixels to +10 pixels in formula\n* PopupGetFile has new parameter - `multiple_files`. If True then allows selection of multiple files\n\n## 3.37 PySimpleGUI & 1.37 PySimpleGUI27 1-June-2019\n\n* The built-in debugger is HERE - might not WORK exactly yet, but a lot of code went into te PySimpleGUI.py file for this.  At the moment, the `imwatchingyou` package is THE way to use a PySimpleGUI debugger. But soon enough you won't need that project in order to debug your program.\n* Some strange code reformatting snuck in.  There are 351 differences between this and previous release.  I'm not sure what happened but am looking at every change by hand.\n* New Calendar Button features\n    * locale, format - new parameters to TKCalendar call\n    * Use custom icon for window if one has been set\n    * New parameters to CalendarButton - `locale`, `format`\n* The bulk of the built-in PySimpleGUI debugger has been added but is not yet \"officially supported\".  Try pressing \"break\" or \"ctrl+break\" on your keyboard.\n    * New bindings for break / pause button and debugger\n    * New Debug button will launch debugger.\n    * New parameter `debugger_enabled` added to Window call.  Default is __enabled__.\n    * Your progam's call to Read is all that's needed to refresh debugger\n    * New `Window` methods to control debugger access\n        * `EnableDebugger` - turns on HOTKEYS to debugger\n        * `DisableDebugger` - turns off HOTKEYS to debugger\n* Restored wrap len for Text elements back from +10 to +40 pixels\n* `PopupGetFolder`, `PopupGetFile` - fixed so that the \"hidden\" master window stays hidden (a Linux problem)\n* Added support for Multiple Files to `PopupGetFiles` when no_window option has been set.\n\n## 3.38 PySimpleGUI, 1.38 PySimpleGUI27\n\n* Multiline - now has a \"read only\" state if created as \"Disabled\"\n* Multiline - If window is created as resizable, then Multiline Elements will now expand when the window is enlarged, a feature long asked for.\n* Output Element expands in the Y Direction\n* \"Expandable Rows\" option added to PackFormIntoFrame allowing future elements to also expand\n* Error Element - silence_on_error option\n* Text Element wrapping - FINALLY got it right?  No more \"Fudge factor\" added\n* PopupScrolled - Windows are now resizable\n* Option to \"launch built-in debugger\" from the test harness\n* Rememeber that the Debugger is still in this code!  It may or may not be operational as it's one version back from the latest release of the `imwatchingyou` debugger code. This code needs to be integrated back in\n\n## 3.39 PySimpleGUI & 1.39 PySimpleGUI27 13-June-2019\n\n* Ported the imwatchingyou debugger code into PySimpleGUI code\n    * Replaced old debugger built-in code with the newer imwatchingyou version\n    * Required removing all of the 'sg.' before PySimpleGUI calls since not importing\n    * Dynamically create the debugger object when first call to `refresh` or `show` is made\n* Started the procecss of renaming Class Methods that are private to start with _\n* Needed for the automatic documentation generation that's being worked on\n* Fixed crash when clicking the Debug button\n* Fixed bug in DeleteFigure. Needed to delete image separately\n* Added more type hints\n* New `TabGroup` method `SelectTab(index)` selects a `Tab` within a `TabGroup`\n* New `Table.Update` parameter - `select_rows`. List of rows to select (0 is first)\n* Error checking in `Window.Layout` provides error \"hints\" to the user\n    * Looks for badly placed ']'\n    * Looks for functions missing '()'\n    * Pops up a window warning user instead of crashing\n    * May have to revisit if the popups start getting in the way\n* New implementations of `Window.Disable()` and `Window.Enable()`\n    * Previously did not work correctly at all\n    * Now using the \"-disabled\" attribute\n* Allow Comboboxes to have empty starting values\n    * Was crashing\n    * Enables application to fill these in later\n\n# 4.0.0 PySimpleGUI & 2.0.0 PySimpleGUI27   19-June-2019\n\n* DOC STRINGS DOCS STRINGS DOC STRINGS!\n\t* Your IDE is about to become very happy\n\t* All Elements have actual documentation in the call signature\n\t* The Readme and ReadTheDocs will be generated going forward using the CODE\n\t* HUGE Thanks for @nngogol for both copying & adding all those strings, but also for making an entire document creation system.\n* New __version__ string for PySimpleGUI.py\n* New parameter to ALL `SetFocus` calls. \t\n\t* def SetFocus(self, force=False)\n\t* If force is True, then a call to `focus_force` is made instead of `focus_set`\n* Get - New Radio Button Method.  Returns True is the Radio Button is set\n* Rename of Debugger class to _Debugger so IDEs don't get confused\n* User read access to last Button Color set now available via property `Button.ButtonColor`\n* Rename of a number of callback handlers to start with _\n* Fix for memory leak in Read call. Every call to read lost a little memory due to root.protocol calls\n* Listbox.Update - New parameter - scroll_to_index - scroll view so that index is shown at the top\n* First PyPI release to use new documentation!\n\n## PySimpleGUI 4.1 Anniversary Release!  4-Aug-2019\n\nNEVER has there been this long of a lag, sorry to all users!\nLong time coming.  Docstrings continue to be a focus.\n\n* Version can be found using PySimpleGUI.version\n* New bit of licensing info at the top of the file\n* Types used in the doc strings. Also type hints in some comments. Because also running on 2.7 can't use full typing\n* Added using of Warnings. Just getting started using this mechanism. May be great, maybe not. We'll see with this change\n* Added TOOLTIP_BACKGROUND_COLOR which can be changed (it's tkinter only setting however so undertand this!)\n* Graph.DrawText.  Ability to set `text_location` when drawing text onto a Graph Element.  Determines what part of the text will be located at the point you provide when you draw the text.   Choices are:\n\t* TEXT_LOCATION_TOP\n\t* TEXT_LOCATION_BOTTOM\n\t* TEXT_LOCATION_LEFT\n\t* TEXT_LOCATION_RIGHT\n\t* TEXT_LOCATION_TOP_LEFT\n\t* TEXT_LOCATION_TOP_RIGHT\n\t* TEXT_LOCATION_BOTTOM_LEFT\n\t* TEXT_LOCATION_BOTTOM_RIGT\n\t* TEXT_LOCATION_CENTER\n* Flag ENABLE_TK_WINDOWS = False.  If True, all windows will be made using only tk.Tk()\n* SetFocus available for all elements now due to it being added to base class. May NOT work on all elements however\n* Added Combo.GetSElectedItemsIndexes() - returns a list of all currently selected items\n* Fixed Listbox.Update - set_to_index changed to be an int, list or tuple\n* Added parent parameter to call to tkinter's askopenfilename, directory, filenames.  Not sure why the root wasn't passed in before\n* Button.Update - also sets the activebackground to the button's background color\n* Graph - New parameter when creating. `float_values`.  If True, then you're indicating that your coordinate system is float not int based\n* Graph.Update - made background color optional parm so that visible only can be set\n* Frame.Layout returns self now for chaining\n* TabGroup.Layout returns self now for chaining\n* Column.Layout returns self now for chaining\n* Menu.Update menu_definition is now optional to allow for changing visibility only\n* Added inivisiblity support for menu bars\n* Table.Update supports setting alternating row color and row_colors (list of rows and the color to set)\n* Set window.TimeoutKey to TIMEOUT_KEY initially\n* Window - check for types for title (should be string) and layout (should be list) and warns user if not correct\n* Window - renamed some methods by adding _ in front (like Show) as they are NOT user callable\n* Another shortcut! Elem = Element = FindElement\n* SaveToDisk - will not write buttons to file.  Fixed problems due to buttons having keys\n* Remapped Windowl.CloseNonBlockingForm, Window.CloseNonBlocking to be Window.CloseNonBlocking\n* Fix for returning values from a combo list. Wasn't handling current value not in list of provided values\n* Spin - Returns an actual value from list provided when Spin was created or updated\n* Chaneged FillFormWithValues to use the new internal AllKeysDict dictionary\n* Added try when creating combo. Problem happens when window is created twice.  Prior window had already created the style\n* Added list of table (tree) ids to the Table element\n* Enabled autoclose to use fractions of a second\n* Added a try around one of the destroys because it could fail if user aborted\n* Popup - Icon is no longer set to default by default\n* Fix for debugger trying to execute a REPL comand.  The exec is only avilable in Python 3\n* main() will display the version number in big letters when program is running\n\n### 4.2 PySimpleGUI  2.2 for PySimpleGUI27  18 - Aug 2019\n\nThe cool lookup release!  No more need for FindElement. You can continue to use FindElement.\nHowever, your code will look weird and ancient.  ;-)  (i.e. readable)\nMORE Docstring and main doc updates!\n\n* Finally 2.7 gets an upgrade and with it doc strings.  It however doesn't get a full-version bump like main PySimpleGUI as this may be its last release.\n* New `window[key] == window.FindElement(key)`\n* New Update calling method. Can directly call an Element and it will call its Update method\n\t* `window[key](value=new_value)    ==     window.FindElement(key).Update(value=new_value)`\n* Made Tearoff part of element so anything can be a menu in theory\n* Removed a bunch of `__del__` calls. Hoping it doesn't bite me in memory leaks\n* Combo.Get method added\n* Combo.GetSelectedItemsIndexes removed\n* New Graph methods SendFigureToBack, BringFigureToFront\n* Butten release changed for better Graph Dragging\n\t* Now returns key+\"Up\" for the event\n\t* Also returns the x,y coords in the values\n* Tab.Select method added\n* TabGroup.Get method added - returns key of currently selected Tab\n* Window finalize parameter added - Will call finalize if a layout is also included.  No more need for Finalize!!\n* Quiet, steady change to PEP8 user interface started\n\t* Now available are Window methods - read, layout, finalize, find_element, element, close\n\t* Should provide 100% PEP with these alone for most PySimpleGUI programs\n* Added finding focus across ALL elements by using the .Widget member variable\n* Fixed sizing Columns!  NOW they will finally be the size specified\n* Fixed not using the initialdir paramter in PopupGetFile if the no_window option is set\n\n## 4.3 PySimpleGUI Release 22-Aug-2019\n\nPEP8 PEP8 PEP8\nLayout controls!  Can finally center stuff\nSome rather impactful changes this time\nLet's hope it doesn't all blow up in our faces!\n\n* PEP8 interfaces added for Class methods & functions\n\t* Finally a PEP8 compliant interface for PySimpleGUI!!\n\t* The \"old CamelCase\" are still in place and will be for quite some time\n\t* Can mix and match at will if you want, but suggest picking one and sticking with it\n\t* All docs and demo programs will need to be changed\n* Internally saving parent row frame for layout checks\n* Warnings on all Update calls - checks if Window.Read or Window.Finalize has been called\n* Warning if a layout is attempted to be used twice\n\t* Shows an \"Error Popup\" to get the user's attention for sure\n* Removed all element-specific SetFocus methods and made it available to ALL elements\n* Listbox - no_scrollbar parameter added. If True then no scrollbar will be shown\n* NEW finalize bool parameter added to Window. Removes need to \"chain\" .Finalize() call.\n* NEW element_justification parameter for Column, Frame, Tab Elements and Window\n\t* Valid values are 'left', 'right', 'center'. Only first letter checked so can use 'l', 'c','r'\n\t* Default = 'left'\n\t* Result is that all Elements INSIDE of this container will be justified as specified\n\t* Works well with new Sizer Elements\n* NEW justification parameter for Column elements.  \n\t* Justifies Column AND the row it's on to this setting (left, right, center)\n\t* Enables individual rows to be justified in addition to the entire window\n* NEW Sizer Element\n\t* Has width and height parameters.  Can set one or both\n\t* Causes the element it is contained within to expand according to width and height of Sizer Element\n\t* Helps greatly with centering.  Frames will shrink to fit the contents for example. Use Sizer to pad out to right size\n* Added Window.visibility_changed to match the PySimpleGUIQt call\n* Fixed Debugger so that popout window shows any newly added locals\n\n## 4.4 PySimpleGUI Release 5-Sep-2019\n\n* window() - \"Calling\" your Window object will perform a Read call\n* InputText - move cursor to end following Update\n* Shortcuts - trying to get a manageable and stable set of Normal, Short, Super-short\n\t* DD - DropDown (Combo)\n\t* LB, LBox - Listbox\n\t* R, Rad - Radio\n\t* ML, MLine - Multiline\n\t* BMenu - ButtonMenu\n\t* PBar, Prog - ProgressBar\n\t* Col - Column\n* Listbox - new method GetIndexes returns currently selected items as a list of indexes\n* Output - new method Get returns the contents of the output element\n* Button - For Macs don't don't allow setting button color. Previously only warned\n* ButtonMenu - new Click method will click the button just like a normal Button's Click method\n* Column scrolling finally works correctly with mousewheel. Shift+Mouse Scroll will scroll horizontally\n* Table - Get method is a dummy version a Get because Qt port got a real Get method\n* Table - Will add numerical column headers if Column Headsing is set to None when creating Table Element\n* Table - FIXED the columns crazily resizing themselves bug!!\n* Table - Can resize individual columns now\n* Tree - was not returning Keys but instead the string representation of the key\n* SetIcon will set to default base64 icon if there's an error loading icon\n* Fix for duplicate key error. Was attempting to add a \"unique key counter\" onto end of keys if duplicate, but needed to turn into string first\n* Columns\n\t* No longer expand nor fill\n\t* Sizing works for both scrolled and normal\n* Setting focus - fixed bug when have tabs, columns, frames that have elements that can get the focus. Setting focus on top-level window\n* InputText elements will now cause rows to expand due to X direction expansion\n* Frame - Trying to set the size but doesn't seem to be setting it correctly\n* Tabs will now expand & fill now (I hope this is OK!!!)\n\n## 4.5 PySimpleGUI Release 04-Nov-2019\n\n* Metadata!\n\t* All elements have a NEW metadata parameter that you can set to anything and access with Element.metadata\n\t* Windows can have metadata too\n* Window.finalize() - changed internally to do a fully window.read with timeout=1 so that it will complete all initializations correctly\n* Removed typing import\n* ButtonReboundCallback - Used with tkinter's Widget.bind method. Use this as a \"target\" for your bind and you'll get the event back via window.read()\n* NEW Element methods that will work on a variety of elements:\n\t* set_size - sets width, height. Can set one or both\n\t* get_size - returns width, heigh of Element (underlying Widget), usually in PIXELS\n\t* hide_row - hides the entire row that an element occupies\n\t* unhide_row - makes visible the entire row that an element occupies\n\t* expand - causes element to expand to fill available space in X or Y or both directions\n* InputText Element - Update got new parameters: text_color=None, background_color=None, move_cursor_to='end'\n* RadioButton - fix in Update. Was causing problems with loading a window from disk\n* Text Element - new border width parameter that is used when there's a relief set for the text element\n* Output Element - special expand method like the one for all other elements\n* Frame element - Can change the text for the frame using Update method\n* Slider element - can change range. Previously had to change value to change the range\n* Scrollable frame / column - change to how mousewheel scrolls.  Was causing all things to scroll when scrolling a single column\n\t* NOTE - may have a bad side effect for scrolling tables with a mouse wheel\n* Fix for icon setting when creating window.  Wasn't defaulting to correct icon\n* Window.get_screen_size() returns the screen width and height.  Does not have to be a window that's created already as this is a class method\n* Window.GetScreenDimensions - will return size even if the window has been destroyed by using get_screen_size\n* Now deleting window read timers every time done with them\n* Combo no longer defaults to first entry\n* New Material1 and Material2 look and feel color schemes\n* change_look_and_feel has new \"force\" parameter.  Set to True to force colors when using a Mac\n* Fix in popup_get_files when 0 length of filename\n* Fix in Window.SetIcon - properly sets icon using file with Linux now. Was always defaulting\n\n## 4.6 PySimpleGUI 16-Nov-2019\n\n* Themes!!!\n* Added a LOT of Look and Feel themes. Total < 100 now\n* Doctring comments for some missing functions\n* PEP8 bindings for button_rebound_collback, set_tooltip, set_focus\n* Spin Element Update - shortened code\n* Allow tk.PhotoImage objeft to be passed into Image.update as the data\n* DrawRectangle - added line_width parameter. Defaults to 1\n* Fix for Slider - was only setting the trough color if the background color was being set_focus\n* Added a deiconify call to Window.Normal so it can be used to restore a window that has been minimized.  Not working on Linux\n* Combo - Fix for not allowing a \"0\" to be specified as the default\n* Table - Saving the Frame that contains a table in the member variable table_frame.  This will enable the frame to be changed to expandable in the future so that the table can be resized as a window expands.\n* LOTS AND LOTS of Look and Feel themes!!!!\n* Added SystemDefaultForReal to look and feel that will prodce 100% not styled windows\n* Changed the \"gray\" strings in look and feel table into RGB strtings (e.g. gray25 = #404040). No all graphics subsystems\n* Removed Mac restriction from Look and Feel setting changes.  All color settings are changed EXCEPT for the button color now on a Mac\n* \"Fuzzy Logic\" Look and Feel Theme Selection - No longer have to memorize every character and get the case right. Now can get \"close enough\" and it'll working\n* New function - preview_all_look_and_feel_themes.  Causes a window to be shown that shows all of the currently available look and feel themes\n* Removed use of CloseButton in popup get file, folder, text.  Was causing problems where input fields stopped working.  See bug on GitHub\n\n## 4.7.0 PySimpleGUI 26-Nov-2019\n\nTTK WIDGETS!  Welcome back Mac Users!\n\n* Significant progress on using ttk widgets properly\n* Added ttk buttons - MACS can use colored buttons again!!  (Big damned deal)\n* The existing ttk based Elements are now correctly being colored and styled\n* Ability to set the ttk theme for individual windows or system-wide, but no longer on a single Element basis\n* Ability to use ttk buttons on a selective basis for non-Mac systems\n* port variable == 'PySimpleGUI' so that your code can determine which PySimpleGUI is running\n* InputText new parameter - use_readonly_for_dsiable defaults to True enables user to switch between a true disable and readonly setting when disabling\n* Rework of progress bar's ttk style name\n* Button - new parameter use_ttk_buttons - True = force use, False = force not used, None = let PySimpleGUI determine use\n* Macs are forced to use ttk buttons EXCEPT when an image is added to the button\n* TabGroup - can no longer set ttk theme directly\n* Window new parameters\n\t* ttk_theme - sets the theme for the entire window\n\t* use_ttk_buttons - sets ttk button use policy for the entire window\n* More Window layout error checking - checks that rows are iterables (a list). If not, an error popup is shown to help user find error\n* Fixed progessbars not getting a key auto assigned to theme\n* New Window method - send_to_back (SendToBack) - sends the window to the bottom of stack of all windows\n* Fixed normal tk button text - was left justifying instead of centering\n* Fixed table colors - wasn't setting correctly due to bad ttk styling\n* Fixed tree ccolors - wasn't setting correctly due to bad ttk styling\n* TabGroups now function correction with colors including currently selected tab color and background color of non-tab area (next to the tabs)\n* New set_options parameters\n\t* use_ttk_buttons - sets system-wide policy for using ttk buttons. Needed for things like popups to work with ttk buttons\n\t* ttk_theme - sets system-wide tth theme\n\t* progress_meter_style parameter no longer used and generates a warning\n* list_of_look_and_feel_values now sorts the list prior to returning\n* Removed Mac restriction on Button colors from look and feel calls. Now can set button colors to anything!\n* popup_scrolled new parameters - all popups need more parameters but these are for sure needed for the scrolled popup\n\t* background_color\n\t* text_color\n\t* no_titlebar\n\t* grab_anywhere\n\t* keep_on_top\n\t* font\n* Test harness changes to help test new ttk stuff (want to shrink this window in the future so will fit on Trinket, Pi, etc\t\n\n## 4.8.0 PySimpleGUI 4-Dec-2019\n\nMulticolored multiline text!  Often asked for feature going way back\nttk Buttons can have images\nPrint in color!\n\n* Multiline Element got 2 new parameters to the update method\n\t* text_color_for_value - color for the newly added text\n\t* background_color_for_value - background color of the newly added text\n* New Print/EasyPrint parameters and capability\n\t* text_color, background_color - control the text's color and background color when printing to \"Debug Window\"\n\t* Must be done only when used in mode where stdout is not re-routed (the default)\n\t* Wouldn't it be really nice if normal print calls had this parameter?\n\t* Print(event, text_color='green', background_color='white',  end='')\n* ttk Buttons\n\t* can have images. No longer forces Buttons with images to be the old tk Butons. Now you can choose either\t\n\t* can update the button color\n\t* can update the button image\n* Set warning filter so that warnings are repeated\n* New global variables:\n\t* CURRENT_LOOK_AND_FEEL - The current look and feel setting in use. Starts out as \"Default\"\n\t* BROWSE_FILES_DELIMITER - Defaults to \";\"  It is the string placed between entries returned from a FilesBrowse button\n\t* TRANSPARENT_BUTTON - Depricated - was being used incorrectly as it was a relic from the early days. It's value was a color of gray\n* Window - gentle reminder if you don't choose a look and feel for your window. It's easy to stop them. Add a change_look_and_feel line\n* Test harness uses a debug window so don't be shocked when 2 windows appear when running PySimpleGUI by itself\n\t* Prints the \"Event\" in Green on White text\n\t* Prints the \"values\" normally\n\n## 4.9.0 PySimpleGUI 7-Dec-2019\n\nThe \"Finally Nailed Tabs\" release\n\n* Colors for Tabs!\n\t* When creating TabGroup can now specify\n\t* Text & Background color of all tabs\n\t* Text & Background color of selected tab\n\t* If nothing is specified then the Look and Feel theme will be used (which turned out GREAT)\n* Tab visibility - Can finally control individual tab's visibility using update and when creating\n* More \"Look and Feel\" Themes!  There's no excuse to be grey again. There are now 126 themes to choose from.  Here are the 32 new themes\"\n\tDefaultNoMoreNagging\n\tDarkBlack1\n\tDarkBlue12\n\tDarkBlue13\n\tDarkBlue14\n\tDarkBlue15\n\tDarkBlue16\n\tDarkBlue17\n\tDarkBrown5\n\tDarkBrown6\n\tDarkGreen2\n\tDarkGreen3\n\tDarkGreen4\n\tDarkGreen5\n\tDarkGreen6\n\tDarkGrey4\n\tDarkGrey5\n\tDarkGrey6\n\tDarkGrey7\n\tDarkPurple6\n\tDarkRed2\n\tDarkTeal10\n\tDarkTeal11\n\tDarkTeal12\n\tDarkTeal9\n\tLightBlue6\n\tLightBlue7\n\tLightBrown12\n\tLightBrown13\n\tLightGray1\n\tLightGreen10\n\tLightGreen9\n\tLightGrey6\n* preview_all_look_and_feel_themes now has a columns parameter to control number of entries per rows\n\t* also made each theme display smaller due to large number of themes\n\n## 4.10.0 PySimpleGUI 9-Dec-2019\n\n\"Oh crap the debugger is broken!\" + \"Pretty Progress Bars\" release\n\n* Fix for built-in debugger not working\n\t* Important due to upcoming educational usage\n\t* Has been broken since 4.5.0 when a change to Finalize was made\n* ProgessBar element colors set using Look and Feel colors\n\t* Combination of button color, input element, and input element text are used\n\n## 4.11.0 PySimpleGUI 10-Dec-2019\n\nThe Element & Window bindings release\n\n* Element.bind - New method of all Elements\n\t* Enables tkinter bindings to be added to any element\n\t* Will get an event returned from window.read() if the tkinter event happens\n* Window.bind - New method for Windows, just like Elements\n\t* Enables tkinter bindings to be added to Windows\n\t* Will get an event returned from window.read() if the tkinter event happens\n* TabGroup fonts - can now set the font and font size for Tab text\n\n## 4.12.0 PySimpleGUI 14-Dec-2019\n\nFinally no more outlines around TK Elements on Linux\n\n* Fixed a long-term problem of the mysterious white border around (almost) all TK Elements on Linux\n* Ability to set the disabled button colors\n\t* New Button and Button.update parameter - disabled_button_color\n\t* Specified as (Text Color, Background Color) just like button colors\n\t* For Normal / TK Buttons - can set button text color only\n\t* For TTK Buttons - can set both a disabled button and text color\n\t* Either parameter can be None to use current setting\n* Removed use of CloseButton from Popups (still have a bug in the CloseButton code but not in popups now)\n* Combobox - removed requirement of setting disabled if want to set to readonly using update method\n* Fix for cancelling out of file/folder browse on Linux caused target to be cleared instead of just cancelling\n* Removed try block around setting button colors - if user sets a bad color, well don't do that\n* Now deleting windows after closing them for popup\n\n## 4.13.0 PySimpleGUI 18-Dec-2019\n\nTable and Tree header colors, expanded Graph methods\n\n* Element.expand new parameter - expand_row. If true then row will expand along with the widgets. Provides better resizing control\n* Using math.floor now instead of an int cast in Graph Element's unit conversions\n* Graph.draw_point - now using caller's graph units for specifying point size\n* Graph.draw_circle - converted radius size from user's graph units.\n* Graph.draw_circle - added line_width parameter\n* Graph.draw_oval - added line_width parameter\n* Graph.get_figures_at_location - new method for getting a list of figures at a particular point\n* Graph.get_bounding_box - returns bounding box for a previously drawn figure\n* Table and Tree Elements\n\t* 3 new element creation parameters\n\t\t* header_text_color - color of the text for the column headings\n\t\t* header_background_color - color of the background of column headings\n\t\t* header_font - font family, style , size for the column headings\n\t* Defaults to using the current look and feel setting\n\t\t* Uses similar algorithm as Tabs - Input Text background and text colors are used\n* Spin element - fixed bug that showed \"None\" if default value is \"None\"\n* Test Harness sets incorrect look and feel on purpose so a random one is chosen\n\n## 4.14.0 PySimpleGUI 23-Dec-2019\n\nTHEMES!\n\n* theme is replacing change_look_and_feel. The old calls will still be usable however\n* LOTS of new theme functions.  Search for \"theme_\" to find them in this documentation.  There's a section discussing themes too\n* \"Dark Blue 3\" is the default theme now.  All windows will be colored using this theme unless the user sets another one\n* Removed the code that forced Macs to use gray\n* New element.set_cursor - can now set a cursor for any of the elements.  Pass in a cursor string and cursor will appear when mouse over widget\n* Combo - enable setting to any value, not just those in the list\n* Combo - changed how initial value is set\n* Can change the font on tabs by setting font parameter in TabGroup\n* Table heading font now defaults correctly\n* Tree heading font now defaults correctly\n* Renamed DebugWin to _DebugWin to discourage use\n\n## 4.15.0 PySimpleGUI 08-Jan-2020\n\nDynamic Window Layouts!  Extend your layouts with `Window.extend_layout`\nLots of fixes\n\n* Window.extend_layout\n* Graph.change_coordinates - realtime change of coordinate systems for the Graph element\n* theme_text_element_background_color - new function to expose this setting\n* Radio & Checkbox colors changed to be ligher/darker than background\n* Progress bar - allow updates of value > max value\n* Output element does deletes now so that cleanup works. Can use in multiple windows as a result\n* DrawArc (draw_arc) - New width / line width parameter\n* RGB does more error checking, converts types\n* More descriptive errors for find element\t\n* popup_error used interally now sets keep on top\n* Element Re-use wording changed so that it's clear the element is the problem not the layout when re-use detected\n* Window.Close (Window.close) - fix for not immediately seeing the window disappear on Linux when clicking \"X\"\n* Window.BringToFront (bring_to_front) - on Windows needed to use topmost to bring window to front insteade of lift\n* Multiline Scrollbar - removed the scrollbar color. It doesn't work on Windows so keeping consistent\n* Changed how Debug Windows are created.  Uses finalize now instead of the read non-blocking\n* Fix for Debug Window being closed by X causing main window to also close\n* Changed all \"black\" and \"white\" in the Look and Feel table to #000000 and #FFFFFF\n* Added new color processing functions for internal use (hsl and hsv related)\n* popup - extended the automatic wrapping capabilities to messages containing \\n\n* Test harness uses a nicer colors for event, value print outs.\n* _timeit decorator for timing functions\n\n\n## 4.15.1 PySimpleGUI 09-Jan-2020\n\nQuick patch to remove change to popup\n\n## 4.15.2 PySimpleGUI 15-Jan-2020\n\nQuick patch to remove f-string for 3.5 compat.\n\n### Upcoming\n\nThere will always be overlapping work as the ports will never actually be \"complete\" as there's always something new that can be built.  However there's a definition for the base functionality for PySimpleGUI.  This is what is being strived for with the currnt ports that are underway.\n\nThe current road ahead is to complete these ports - Qt (very close), Web (pretty close), Wx (not all that close).\n\nPySimpleGUIDroid is in the works....\n\nIn addition to the ports there is ongoing work with educators that want to bring PySimpleGUI into their classrooms.  Some projects have already started with teachers.  One effort is to examine a number of books that teach Python to kids and convert the exercises to use PySimpleGUI instead of tkinter or command line.  Another educational effort is in integrating with Circuit Python.  It's unclear exactly how PySimpleGUI will fit into the picture.  A board from Adafruit is arriving soon which should help solidify what's possible.\n\n## Code Condition\n\n    Make it run\n    Make it right\n    Make it fast\n\nIt's a recipe for success if done right.  PySimpleGUI has completed the \"Make it run\" phase.  It's far from \"right\" in many ways.  These are being worked on.  The module has historically been particularly poor for PEP8 compliance.  It was a learning exercise that turned into a somewhat complete GUI solution for lightweight problems.\n\nWhile the internals to PySimpleGUI are a tad sketchy, the public interfaces into the SDK are more strictly defined and comply with PEP8 naming conventions.  A set of \"PEP8 Bindings\" was released in summar 2019 to ensure the enternally facing interfaces all adhere to PEP8 names.\n\nPlease log bugs and suggestions **only on the PySimpleGUI GitHub**!  It will only make the code stronger and better in the end, a good thing for us all, right?  Logging them elsewhere doesn't enable the core developer and other PySimpleGUI users to help.  To make matters worse, you may get bad advice from other sites because there are simply not many PySimpleGUI experts, yet.\n\n## Design\n\nA moment about the design-spirit of `PySimpleGUI`.  From the beginning, this package was meant to take advantage of Python's capabilities with the goal of programming ease.\n\n**Single File**\nWhile not the best programming practice, the implementation resulted in a single file solution.  Only one file is needed, PySimpleGUI.py.  You can post this file, email it, and easily import it using one statement.\n\n**Functions as objects**\nIn Python, functions behave just like object. When you're placing a Text Element into your form, you may be sometimes calling a function and other times declaring an object.  If you use the word Text, then you're getting an object.  If you're using `Txt`, then you're calling a function that returns a `Text` object.\n\n**Lists**\nIt seemed quite natural to use Python's powerful list constructs when possible.  The form is specified as a series of lists.  Each \"row\" of the GUI is represented as a list of Elements. \n\n**Dictionaries**\nWant to view your form's results as a dictionary instead of a list... no problem, just use the `key` keyword on your elements.  For complex forms with a lot of values that need to be changed frequently, this is by far the best way of consuming the results.\n\nYou can also look up elements using their keys.  This is an excellent way to update elements in reaction to another element.  Call `form.FindElement(key)` to get the Element.\n\n**Named / Optional Parameters**\nThis is a language feature that is featured **heavily**  in all of the API calls, both functions and classes.  Elements are configured, in-place, by setting one or more optional parameters.  For example, a Text element's color is chosen by setting the optional `text_color` parameter.\n\n**tkinter**\ntkinter is the \"official\" GUI that Python supports.  It runs on Windows, Linux, and Mac.  It was chosen as the first target GUI framework due to its ***ubiquity***.  Nearly all Python installations, with the exception of Ubuntu Linux, come pre-loaded with tkinter.   It is the \"simplest\" of the GUI frameworks to get up an running (among Qt, WxPython, Kivy, etc).\n\nFrom the start of the PSG project, tkinter was not meant to be the only underlying GUI framework for PySimpleGUI.  It is merely a starting point.  All journeys begin with one step forward and choosing tkinter was the first of many steps for PySimpleGUI.  Now there are 4 ports up and running - tkinter, WxPython, Qt and Remi (web support)\n\n## Author & Owner\n\nThe PySimpleGUI Organization\n\nThis documentation as well as all PySimpleGUI code is Copyright 2018, 2019 by PySimpleGUI.org\n\nSend correspondance to PySimpleGUI@PySimpleGUI.com\n\n## License\n\nGNU Lesser General Public License (LGPL 3) +\n\n## Acknowledgments\n\nThere are a number of people that have been key contributors to this project both directly and indirectly.  Paid professional help has been deployed a number of critical times in the project's history.  This happens in the life of software development from time to time.\n\nIf you've helped, I sure hope that you feel like you've been properly thanked.  That you have been recognized.  If not, then say something.... drop an email to comments@PySimpleGUI.org.\n\n",
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL1B5U2ltcGxlR1VJL3B0b2FzdGVyIiw=
ICAgICJrZXl3b3JkcyI6ICJHVUkgVUkgUHlTaW1wbGVHVUkgdGtpbnRlciB0b2FzdGVyIG5vdGlmaWNhdGlvbiIs
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogInB0b2FzdGVyIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcHRvYXN0ZXIvIiw=
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcHRvYXN0ZXIvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9QeVNpbXBsZUdVSS9wdG9hc3RlciI=
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcHRvYXN0ZXIvMS4wLjAvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgIlB5U2ltcGxlR1VJIg==
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIkRpc3BsYXkgYSB0b2FzdGVyLXN0eWxlIG1lc3NhZ2Ugd2l0aCBhbiBpY29uLCB0aXRsZSBhbmQgbWVzc2FnZSBhdCBhbnkgbG9jYXRpb24gb24geW91ciBzY3JlZW4uIE9wdGlvbiB0byBmYWRlIGluIC8gZmFkZSBvdXQiLA==
ICAgICJ2ZXJzaW9uIjogIjEuMC4wIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiA2NDc5NTI5LA==
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhYzUwYjY3YTA2MjhhZTUwMWRiNmE1NTU1NTkxZjE3Yzc2MjJlZThkYjYyMzI5ODJiYjgyNTUwMjhlZjFmNGYzIiw=
ICAgICAgICAgICJtZDUiOiAiM2I3MGM1N2YxNjI4MGJhMzNiYmFhNDBhYjI0OTU5NmIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMzU3NzZkMTE0ODI2OGFmZmVmZjUyNzc1MGFmMmIxNGE0ZGI1MmM2MzU1MWI5Mjg0ZjgzOWUxMjFkYjQxZjJlMyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicHRvYXN0ZXItMS4wLjAtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzYjcwYzU3ZjE2MjgwYmEzM2JiYWE0MGFiMjQ5NTk2YiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDE3NDc5MSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMC0wMS0xOFQyMTowMjozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMC0wMS0xOFQyMTowMjozNy4xMTE4MThaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hYy81MC9iNjdhMDYyOGFlNTAxZGI2YTU1NTU1OTFmMTdjNzYyMmVlOGRiNjIzMjk4MmJiODI1NTAyOGVmMWY0ZjMvcHRvYXN0ZXItMS4wLjAtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiZDBmODg5MWE2ZTRmOTg0ODZhZTlmNDcwMGRkZGZlMDVlMWUwNjAzZWZmMjEyYjU3ZTBjMTYwMzQ2NDZhN2E3Iiw=
ICAgICAgICAgICJtZDUiOiAiY2MwOTY5NTRlZmY0ZTg1ZThhMDhlZjgzOTZiMjNjMTEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjkyOTZhMmM4ODQyOTA4MWUxYzI4ODFjOTFhZTgwZWEwYTRhOWZjNWM4OTZjYWEyNWU2MTU2MTkxYzY3NjdmNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicHRvYXN0ZXItMS4wLjAudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJjYzA5Njk1NGVmZjRlODVlOGEwOGVmODM5NmIyM2MxMSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDM1NzgyOCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMC0wMS0xOFQyMTowMzowNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMC0wMS0xOFQyMTowMzowNC4zMDYwMjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iZC8wZi84ODkxYTZlNGY5ODQ4NmFlOWY0NzAwZGRkZmUwNWUxZTA2MDNlZmYyMTJiNTdlMGMxNjAzNDY0NmE3YTcvcHRvYXN0ZXItMS4wLjAudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYWM1MGI2N2EwNjI4YWU1MDFkYjZhNTU1NTU5MWYxN2M3NjIyZWU4ZGI2MjMyOTgyYmI4MjU1MDI4ZWYxZjRmMyIs
ICAgICAgICAibWQ1IjogIjNiNzBjNTdmMTYyODBiYTMzYmJhYTQwYWIyNDk1OTZiIiw=
ICAgICAgICAic2hhMjU2IjogIjM1Nzc2ZDExNDgyNjhhZmZlZmY1Mjc3NTBhZjJiMTRhNGRiNTJjNjM1NTFiOTI4NGY4MzllMTIxZGI0MWYyZTMi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInB0b2FzdGVyLTEuMC4wLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiM2I3MGM1N2YxNjI4MGJhMzNiYmFhNDBhYjI0OTU5NmIiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAxNzQ3OTEs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjAtMDEtMThUMjE6MDI6MzciLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjAtMDEtMThUMjE6MDI6MzcuMTExODE4WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYWMvNTAvYjY3YTA2MjhhZTUwMWRiNmE1NTU1NTkxZjE3Yzc2MjJlZThkYjYyMzI5ODJiYjgyNTUwMjhlZjFmNGYzL3B0b2FzdGVyLTEuMC4wLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYmQwZjg4OTFhNmU0Zjk4NDg2YWU5ZjQ3MDBkZGRmZTA1ZTFlMDYwM2VmZjIxMmI1N2UwYzE2MDM0NjQ2YTdhNyIs
ICAgICAgICAibWQ1IjogImNjMDk2OTU0ZWZmNGU4NWU4YTA4ZWY4Mzk2YjIzYzExIiw=
ICAgICAgICAic2hhMjU2IjogImY5Mjk2YTJjODg0MjkwODFlMWMyODgxYzkxYWU4MGVhMGE0YTlmYzVjODk2Y2FhMjVlNjE1NjE5MWM2NzY3Zjci
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInB0b2FzdGVyLTEuMC4wLnRhci5neiIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiY2MwOTY5NTRlZmY0ZTg1ZThhMDhlZjgzOTZiMjNjMTEiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAzNTc4Mjgs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjAtMDEtMThUMjE6MDM6MDQiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjAtMDEtMThUMjE6MDM6MDQuMzA2MDIzWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYmQvMGYvODg5MWE2ZTRmOTg0ODZhZTlmNDcwMGRkZGZlMDVlMWUwNjAzZWZmMjEyYjU3ZTBjMTYwMzQ2NDZhN2E3L3B0b2FzdGVyLTEuMC4wLnRhci5neiIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
