ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiIiw=
ICAgICJhdXRob3JfZW1haWwiOiAibXJ6YWhha2lAZ21haWwuY29tIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIFN1ZGlvXHJcblxyXG4gXHJcbmBzdWRpb2AgaXMgYSBgcG93ZXJmdWxgLCBgT3Blbi1zb3VyY2VgLCBgZmFzdCBhbmQgYGVhc3ktdG8tdXNlYCBkaWdpdGFsIGF1ZGlvIHByb2Nlc3NpbmcgbGlicmFyeSBmZWF0dXJpbmcgYm90aCBhICoqcmVhbC10aW1lKiosICoqbm9uLXJlYWwtdGltZSoqIG1peC9lZGl0IHBsYXRmb3JtLiBcclxuXHJcbiMjIEFic3RyYWN0XHJcblxyXG5BdWRpbyBzaWduYWwgcHJvY2Vzc2luZyBpcyBhIGhpZ2hseSBhY3RpdmUgcmVzZWFyY2ggZmllbGQgd2hlcmUgZGlnaXRhbCBzaWduYWwgcHJvY2Vzc2luZyB0aGVvcnkgbWVldHMgaHVtYW4gc291bmQgcGVyY2VwdGlvbiBhbmQgcmVhbC10aW1lIHByb2dyYW1taW5nIHJlcXVpcmVtZW50cy4gSXQgaGFzIGEgd2lkZSByYW5nZSBvZiBhcHBsaWNhdGlvbnMgaW4gY29tcHV0ZXJzLCBnYW1pbmcsIGFuZCBtdXNpYyB0ZWNobm9sb2d5LCB0byBuYW1lIGEgZmV3IG9mIHRoZSBsYXJnZXN0IGFyZWFzLiBTdWNjZXNzZnVsIGFwcGxpY2F0aW9ucyBpbmNsdWRlIGZvciBleGFtcGxlIHBlcmNlcHR1YWwgYXVkaW8gY29kaW5nLCBkaWdpdGFsIG11c2ljIHN5bnRoZXNpemVycywgYW5kIG11c2ljIHJlY29nbml0aW9uIHNvZnR3YXJlLiBcclxuXHJcbiMjIyMgUmVhbC10aW1lIGF1ZGlvIHByb2Nlc3NpbmdcclxuXHJcbkZvciBsaXZlIGRpZ2l0YWwgYXVkaW8gc3lzdGVtcyB3aXRoIGhpZ2gtcmVzb2x1dGlvbiBtdWx0aWNoYW5uZWwgZnVuY3Rpb25hbGl0aWVzLCBpdCBpcyBkZXNpcmFibGUgdG8gaGF2ZSBhY2N1cmF0ZSBsYXRlbmN5IGNvbnRyb2wgYW5kIGVzdGltYXRpb24gb3ZlciBhbGwgdGhlIHN0YWdlcyBvZiBkaWdpdGFsIGF1ZGlvIHByb2Nlc3NpbmcgY2hhaW4uIFxyXG5cclxuVGhlIHN1ZGlvIGlzIHdyaXR0ZW4gZmxleGlibGUgY2FuIHVzZWQgZm9yIGhpZ2ggbGV2ZWwgYXVkaW8gcHJvY2Vzc2luZyBhbGdvcml0aG0gYW5kIG90aGVyIHN5c3RlbSBmYWN0b3JzLCB3aGljaCBtaWdodCBjYXVzZSB0aGUgbGF0ZW5jeSBlZmZlY3RzLiBJdCBhbHNvIGNhbiBlc3RpbWF0ZSB0aGUgc3luY2hyb25pemF0aW9uIGFuZCBkZWxheSBvZiBtdWx0aXBsZSBjaGFubmVscy5cclxuXHJcbiMjIyMgTm9uLVJlYWx0aW1lIHByb2Nlc3Npbmc6XHJcblxyXG5TdWRpbyBpcyBhIGNvbXByZWhlbnNpdmUgbGlicmFyeSBmb3IgbWl4aW5nLCBlZGl0aW5nLCBhbmQgcmVjb3JkaW5nIGF1ZGlvIGNvbnRlbnQuXHJcblxyXG5cclxuIyMjIyBBdWRpbyBkYXRhIG1haW50YWluaW5nIHByb2Nlc3M6XHJcblxyXG5UaGUgc3VkaW8gdXNlZCBhZGRpdGlvbmFsIGNhY2hlZCBmaWxlcyB0byByZWR1Y2UgZHluYW1pYyBtZW1vcnkgdXNhZ2UgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UsIG1lYW5pbmcgdGhhdCBhdWRpbyBkYXRhIHN0b3JhZ2UgbWV0aG9kcyBjb3VsZCBoYXZlIGRpZmZlcmVudCBleGVjdXRpb24gdGltZXMgYmFzZWQgb24gdGhlIHN0b3JlZCBmaWxlcy4gVGhhbmtzIHRvIHRoYXQsIFxyXG5TdWRvIGNhbiBtYW5hZ2UgdmFyaW91cyBhdWRpbyBzdHJlYW1zIGZyb20gYXVkaW8gZmlsZXMgb3Igb3BlcmF0aW5nIHN5c3RlbXMgd2l0aG91dCBhbnkgc2l6ZSBsaW1pdGF0aW9uLlxyXG5cclxuPCEtLVxyXG48YSBocmVmPVwiaHR0cHM6Ly93d3cuYnV5bWVhY29mZmVlLmNvbS9tcnphaGFraVVcIiB0YXJnZXQ9XCJfYmxhbmtcIj48aW1nIHNyYz1cImh0dHBzOi8vY2RuLmJ1eW1lYWNvZmZlZS5jb20vYnV0dG9ucy9kZWZhdWx0LW9yYW5nZS5wbmdcIiBhbHQ9XCJCdXkgTWUgQSBDb2ZmZWVcIiBoZWlnaHQ9XCI0MVwiIHdpZHRoPVwiMTc0XCI+PC9hPlxyXG4tLT5cclxuIC0tLVxyXG5cclxuIyMgVGFibGUgb2YgY29udGVudHM6XHJcblxyXG4tIFtTdWRpb10oI3N1ZGlvKVxyXG4gIC0gW0Fic3RyYWN0XSgjYWJzdHJhY3QpXHJcbiAgICAgIC0gW1JlYWwtdGltZSBhdWRpbyBwcm9jZXNzaW5nXSgjcmVhbC10aW1lLWF1ZGlvLXByb2Nlc3NpbmcpXHJcbiAgICAgIC0gW05vbi1SZWFsdGltZSBwcm9jZXNzaW5nOl0oI25vbi1yZWFsdGltZS1wcm9jZXNzaW5nKVxyXG4gICAgICAtIFtBdWRpbyBkYXRhIG1haW50YWluaW5nIHByb2Nlc3M6XSgjYXVkaW8tZGF0YS1tYWludGFpbmluZy1wcm9jZXNzKVxyXG4gIC0gW1RhYmxlIG9mIGNvbnRlbnRzOl0oI3RhYmxlLW9mLWNvbnRlbnRzKVxyXG4gIC0gW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcclxuICAgICAgICAtIFtMYXRlc3QgUHlQSSBzdGFibGUgcmVsZWFzZV0oI2xhdGVzdC1weXBpLXN0YWJsZS1yZWxlYXNlKVxyXG4gICAgICAgIC0gW0xhdGVzdCBkZXZlbG9wbWVudCByZWxlYXNlIG9uIEdpdEh1Yl0oI2xhdGVzdC1kZXZlbG9wbWVudC1yZWxlYXNlLW9uLWdpdGh1YilcclxuICAtIFtRdWljayBzdGFydF0oI3F1aWNrLXN0YXJ0KVxyXG4gICAgICAtIFtBdWRpbyBwbGF5YmFja10oI2F1ZGlvLXBsYXliYWNrKVxyXG4gICAgICAtIFtBdWRpbyBzbGljaW5nXSgjYXVkaW8tc2xpY2luZylcclxuICAgICAgICAtIFtUaW1lIGRvbWFpbl0oI3RpbWUtZG9tYWluKVxyXG4gICAgICAgICAgLSBbc2ltcGxlIHNsaWNpbmddKCNzaW1wbGUtc2xpY2luZylcclxuICAgICAgICAgIC0gW3NsaWNlICYgbWVyZ2VdKCNzbGljZS0tbWVyZ2UpXHJcbiAgICAgICAgLSBbRnJlcXVlbmN5IGRvbWFpbl0oI2ZyZXF1ZW5jeS1kb21haW4pXHJcbiAgICAgICAgICAtIFtMUEYgMTAwSHpdKCNscGYtMTAwaHopXHJcbiAgICAgICAgICAtIFtIUEYgMUtIel0oI2hwZi0xa2h6KVxyXG4gICAgICAgICAgLSBbQlBGIDUwMEh6IC0gMUtIel0oI2JwZi01MDBoei0tLTFraHopXHJcbiAgICAgICAgLSBbQ29tcGxleCBTbGljaW5nXSgjY29tcGxleC1zbGljaW5nKVxyXG4gICAgICAtIFtBdWRpbyBTdHJlYW1pbmddKCNhdWRpby1zdHJlYW1pbmcpXHJcbiAgICAtIFtFeGFtcGxlcyBhbmQgQWR2YW5jZWQgVXNhZ2VdKCNleGFtcGxlcy1hbmQtYWR2YW5jZWQtdXNhZ2UpXHJcbiAgICAgIC0gW1Nob3J0LXRpbWUgRm91cmllciB0cmFuc2Zvcm1dKCNzaG9ydC10aW1lLWZvdXJpZXItdHJhbnNmb3JtKVxyXG4gICAgICAgIC0gW3ByZXJlcXVpc2l0ZXNdKCNwcmVyZXF1aXNpdGVzKVxyXG4gIC0gW0FQSSBEb2N1bWVudGF0aW9uXSgjYXBpLWRvY3VtZW50YXRpb24pXHJcbiAgICAtIFtNYXN0ZXJdKCNtYXN0ZXIpXHJcbiAgICAgIC0gW1BhcmFtZXRlcnNdKCNwYXJhbWV0ZXJzKVxyXG4gICAgICAtIFtOb3Rlc10oI25vdGVzKVxyXG4gICAgICAtIFtNZXRob2RzXSgjbWV0aG9kcylcclxuICAgICAgICAtIFthZGRfZmlsZV0oI2FkZF9maWxlKVxyXG4gICAgICAgIC0gW2FkZF0oI2FkZClcclxuICAgICAgICAtIFtzdGFydF0oI3N0YXJ0KVxyXG4gICAgICAgIC0gW3JlY29yZGVyXSgjcmVjb3JkZXIpXHJcbiAgICAgICAgLSBbbG9hZF9hbGxdKCNsb2FkX2FsbClcclxuICAgICAgICAtIFtsb2FkXSgjbG9hZClcclxuICAgICAgICAtIFtnZXRfcmVjb3JkX2luZm9dKCNnZXRfcmVjb3JkX2luZm8pXHJcbiAgICAgICAgLSBbZ2V0X2V4cmVjb3JkX2luZm9dKCNnZXRfZXhyZWNvcmRfaW5mbylcclxuICAgICAgICAtIFtzeW5jYWJsZV0oI3N5bmNhYmxlKVxyXG4gICAgICAgIC0gW3N5bmNdKCNzeW5jKVxyXG4gICAgICAgIC0gW2RlbF9yZWNvcmRdKCNkZWxfcmVjb3JkKVxyXG4gICAgICAgIC0gW3NhdmVfYXNdKCNzYXZlX2FzKVxyXG4gICAgICAgIC0gW3NhdmVdKCNzYXZlKVxyXG4gICAgICAgIC0gW3NhdmVdKCNzYXZlLTEpXHJcbiAgICAgICAgLSBbc2F2ZV9hbGxdKCNzYXZlX2FsbClcclxuICAgICAgICAtIFtnZXRfZXhyZWNvcmRfbmFtZXNdKCNnZXRfZXhyZWNvcmRfbmFtZXMpXHJcbiAgICAgICAgLSBbZ2V0X3JlY29yZF9uYW1lc10oI2dldF9yZWNvcmRfbmFtZXMpXHJcbiAgICAgICAgLSBbZ2V0X25wZXJzZWddKCNnZXRfbnBlcnNlZylcclxuICAgICAgICAtIFtnZXRfbmNoYW5uZWxzXSgjZ2V0X25jaGFubmVscylcclxuICAgICAgICAtIFtnZXRfc2FtcGxlX3JhdGVdKCNnZXRfc2FtcGxlX3JhdGUpXHJcbiAgICAgICAgLSBbc3RyZWFtXSgjc3RyZWFtKVxyXG4gICAgICAgIC0gW211dGVdKCNtdXRlKVxyXG4gICAgICAgIC0gW3VubXV0ZV0oI3VubXV0ZSlcclxuICAgICAgICAtIFtlY2hvXSgjZWNobylcclxuICAgICAgICAtIFt3cmFwXSgjd3JhcClcclxuICAgICAgICAtIFtjbGVhbl9jYWNoZV0oI2NsZWFuX2NhY2hlKVxyXG4gICAgICAgIC0gW2FkZF9waXBlbGluZV0oI2FkZF9waXBlbGluZSlcclxuICAgICAgICAtIFtzZXRfcGlwZWxpbmVdKCNzZXRfcGlwZWxpbmUpXHJcbiAgICAgICAgLSBbc2V0X3dpbmRvd10oI3NldF93aW5kb3cpXHJcbiAgICAtIFtTdHJlYW1Db250cm9sXSgjc3RyZWFtY29udHJvbClcclxuICAgICAgLSBbTWV0aG9kc10oI21ldGhvZHMtMSlcclxuICAgICAgICAtIFtpc3JlYWR5XSgjaXNyZWFkeSlcclxuICAgICAgICAtIFtpc19zdHJlYW1pbmddKCNpc19zdHJlYW1pbmcpXHJcbiAgICAgICAgLSBbc3RhcnRdKCNzdGFydC0xKVxyXG4gICAgICAgIC0gW3Jlc3VtZV0oI3Jlc3VtZSlcclxuICAgICAgICAtIFtzdG9wXSgjc3RvcClcclxuICAgICAgICAtIFtwYXVzZV0oI3BhdXNlKVxyXG4gICAgICAgIC0gW2VuYWJsZV9sb29wXSgjZW5hYmxlX2xvb3ApXHJcbiAgICAgICAgLSBbZGlzYWJsZV9sb29wXSgjZGlzYWJsZV9sb29wKVxyXG4gICAgICAtIFtQcm9wZXJ0aWVzXSgjcHJvcGVydGllcylcclxuICAgICAgICAtIFt0aW1lXSgjdGltZSlcclxuICAgICAgICAgIC0gW0dldHRlcl0oI2dldHRlcilcclxuICAgICAgICAgIC0gW1NldHRlcl0oI3NldHRlcilcclxuICAgIC0gW1dyYXBHZW5lcmF0b3JdKCN3cmFwZ2VuZXJhdG9yKVxyXG4gICAgICAtIFtNZXRob2RzXSgjbWV0aG9kcy0yKVxyXG4gICAgICAgIC0gW2dldF9zYW1wbGVfZm9ybWF0XSgjZ2V0X3NhbXBsZV9mb3JtYXQpXHJcbiAgICAgICAgLSBbZ2V0X3NhbXBsZV93aWR0aF0oI2dldF9zYW1wbGVfd2lkdGgpXHJcbiAgICAgICAgLSBbZ2V0X21hc3Rlcl0oI2dldF9tYXN0ZXIpXHJcbiAgICAgICAgLSBbZ2V0X3NpemVdKCNnZXRfc2l6ZSlcclxuICAgICAgICAtIFtnZXRfY2FjaGVfc2l6ZV0oI2dldF9jYWNoZV9zaXplKVxyXG4gICAgICAgIC0gW2dldF9uY2hhbm5lbHNdKCNnZXRfbmNoYW5uZWxzLTEpXHJcbiAgICAgICAgLSBbZ2V0X2ZyYW1lX3JhdGVdKCNnZXRfZnJhbWVfcmF0ZSlcclxuICAgICAgICAtIFtnZXRfZHVyYXRpb25dKCNnZXRfZHVyYXRpb24pXHJcbiAgICAgICAgLSBbam9pbl0oI2pvaW4pXHJcbiAgICAgIC0gW01hZ2ljIG1ldGhvZHNdKCNtYWdpYy1tZXRob2RzKVxyXG4gICAgICAgIC0gW2dldGl0ZW1dKCNnZXRpdGVtKVxyXG4gICAgICAgIC0gW2RlbF0oI2RlbClcclxuICAgICAgICAtIFtzdHJdKCNzdHIpXHJcbiAgICAgICAgLSBbbXVsXSgjbXVsKVxyXG4gICAgICAgIC0gW3RydWVkaXZdKCN0cnVlZGl2KVxyXG4gICAgICAgIC0gW3Bvd10oI3BvdylcclxuICAgICAgICAtIFthZGRdKCNhZGQtMSlcclxuICAgICAgICAtIFtzdWJdKCNzdWIpXHJcbiAgICAgICAgLSBbY2FsbF0oI2NhbGwpXHJcbiAgICAtIFtXcmFwXSgjd3JhcC0xKVxyXG4gICAgICAtIFtNZXRob2RzXSgjbWV0aG9kcy0zKVxyXG4gICAgICAgIC0gW2dldF9zYW1wbGVfZm9ybWF0XSgjZ2V0X3NhbXBsZV9mb3JtYXQtMSlcclxuICAgICAgICAtIFtnZXRfc2FtcGxlX3dpZHRoXSgjZ2V0X3NhbXBsZV93aWR0aC0xKVxyXG4gICAgICAgIC0gW2dldF9tYXN0ZXJdKCNnZXRfbWFzdGVyLTEpXHJcbiAgICAgICAgLSBbZ2V0X3NpemVdKCNnZXRfc2l6ZS0xKVxyXG4gICAgICAgIC0gW2dldF9mcmFtZV9yYXRlXSgjZ2V0X2ZyYW1lX3JhdGUtMSlcclxuICAgICAgICAtIFtnZXRfbmNoYW5uZWxzXSgjZ2V0X25jaGFubmVscy0yKVxyXG4gICAgICAgIC0gW2dldF9kdXJhdGlvbl0oI2dldF9kdXJhdGlvbi0xKVxyXG4gICAgICAgIC0gW2pvaW5dKCNqb2luLTEpXHJcbiAgICAgICAgLSBbdW5wYWNrXSgjdW5wYWNrKVxyXG4gICAgICAgIC0gW2dldF9kYXRhXSgjZ2V0X2RhdGEpXHJcbiAgICAgICAgLSBbaXNfcGFja2VkXSgjaXNfcGFja2VkKVxyXG4gICAgICAgIC0gW2dldF0oI2dldClcclxuICAgICAgICAtIFtzZXRfZGF0YV0oI3NldF9kYXRhKVxyXG4gICAgICAtIFtNYWdpYyBtZXRob2RzXSgjbWFnaWMtbWV0aG9kcy0xKVxyXG4gICAgICAgIC0gW2RlbF0oI2RlbC0xKVxyXG4gICAgICAgIC0gW3N0cl0oI3N0ci0xKVxyXG4gICAgICAgIC0gW2dldGl0ZW1dKCNnZXRpdGVtLTEpXHJcbiAgICAgICAgLSBbbXVsXSgjbXVsLTEpXHJcbiAgICAgICAgLSBbdHJ1ZWRpdl0oI3RydWVkaXYtMSlcclxuICAgICAgICAtIFtwb3ddKCNwb3ctMSlcclxuICAgICAgICAtIFthZGRdKCNhZGQtMilcclxuICAgICAgICAtIFtzdWJdKCNzdWItMSlcclxuICAgIC0gW1BpcGVsaW5lXSgjcGlwZWxpbmUpXHJcbiAgICAgIC0gW1BhcmFtZXRlcnNdKCNwYXJhbWV0ZXJzLTEpXHJcbiAgICAgIC0gW01ldGhvZHNdKCNtZXRob2RzLTQpXHJcbiAgICAgICAgLSBbY2xlYXJdKCNjbGVhcilcclxuICAgICAgICAtIFtydW5dKCNydW4pXHJcbiAgICAgICAgLSBbaW5zZXJ0XSgjaW5zZXJ0KVxyXG4gICAgICAgICAgLSBbUGFyYW1ldGVyc10oI3BhcmFtZXRlcnMtMilcclxuICAgICAgICAgIC0gW1JldGVybnNdKCNyZXRlcm5zKVxyXG4gICAgICAgIC0gW2FwcGVuZF0oI2FwcGVuZClcclxuICAgICAgICAtIFtzeW5jXSgjc3luYy0xKVxyXG4gICAgICAgIC0gW2Fhc3luY10oI2Fhc3luYylcclxuICAgICAgICAtIFtkZWxheV0oI2RlbGF5KVxyXG4gICAgICAgIC0gW3NldF90aW1lb3V0XSgjc2V0X3RpbWVvdXQpXHJcbiAgICAgICAgLSBbZ2V0X3RpbWVvdXRdKCNnZXRfdGltZW91dClcclxuICAgICAgICAtIFtwdXRdKCNwdXQpXHJcbiAgICAgICAgLSBbZ2V0XSgjZ2V0LTEpXHJcbiAgICAgIC0gW01hZ2ljIG1ldGhvZHNdKCNtYWdpYy1tZXRob2RzLTIpXHJcbiAgICAgICAgLSBbY2FsbF0oI2NhbGwtMSlcclxuICAgICAgICAtIFtkZWxpdGVtXSgjZGVsaXRlbSlcclxuICAgICAgICAtIFtsZW5dKCNsZW4pXHJcbiAgICAgICAgLSBbZ2V0aXRlbV0oI2dldGl0ZW0tMilcclxuICAtIFtMSUNFTkNFXSgjbGljZW5jZSlcclxuXHJcblxyXG4jIyBJbnN0YWxsYXRpb25cclxuXHJcblxyXG4jIyMjIyBMYXRlc3QgUHlQSSBzdGFibGUgcmVsZWFzZVxyXG5cclxuICAgIHBpcCBpbnN0YWxsIHN1ZGlvXHJcblxyXG4jIyMjIyBMYXRlc3QgZGV2ZWxvcG1lbnQgcmVsZWFzZSBvbiBHaXRIdWJcclxuXHJcblB1bGwgYW5kIGluc3RhbGwgcHJlLXJlbGVhc2UgYG1haW5gIGJyYW5jaDpcclxuXHJcbiAgICBwaXAgaW5zdGFsbCBnaXQraHR0cHM6Ly9naXRodWIuY29tL01yWmFoYWtpL3N1ZGlvLmdpdFxyXG5cclxuXHJcbiMjIFF1aWNrIHN0YXJ0XHJcblxyXG4jIyMjIEF1ZGlvIHBsYXliYWNrXHJcblxyXG5gYGBweXRob25cclxuaW1wb3J0IHN1ZGlvXHJcblxyXG5zdSA9IHN1ZGlvLk1hc3RlcigpXHJcbnN1LmFkZCgnYmFyb29uLm1wMycpXHJcbnN1LmVjaG8oJ2Jhcm9vbicpXHJcbmBgYCBcclxuXHJcbnRoZSByZWNvcmQgd2l0aCB0aGUgbmFtZSBvZiBiYXJvb24gd2lsbCBiZSBwbGF5ZWQgb24gdGhlIHN0ZG91dCBhdWRpbyBzdHJlYW0uIFxyXG5cclxuIyMjIyBBdWRpbyBzbGljaW5nXHJcblxyXG4jIyMjIyBUaW1lIGRvbWFpblxyXG5cclxuIyMjIyMjIHNpbXBsZSBzbGljaW5nXHJcblxyXG5UaGUgZm9sbG93aW5nIGV4YW1wbGUgaXMgdXNlZCB0byBwbGF5IHRoZSBhdWRpbyByZWNvcmQgd2l0aCB0aGUgbmFtZSBvZiBiYXJvb24gZnJvbSAxMiB0byAyNy42NiBzZWNvbmRzIG9uIHRoZSBzdGRvdXQgYXVkaW8gc3RyZWFtLlxyXG5cclxuYGBgcHl0aG9uXHJcbnN1ID0gc3VkaW8uTWFzdGVyKClcclxuYmFyb29uID0gc3UuYWRkKCdiYXJvb24ubXAzJylcclxuc3UuZWNobyhiYXJvb25bMTI6IDI3LjY2XSlcclxuYGBgXHJcblxyXG4jIyMjIyMgc2xpY2UgJiBtZXJnZVxyXG5cclxuXHJcbmBgYHB5dGhvblxyXG5zdSA9IHN1ZGlvLk1hc3RlcigpXHJcbnJlYyA9IHN1LmFkZCgnYmFyb29uLm1wMycpXHJcblxyXG4jIG1ldGhvZCAxXHJcbnN1LmVjaG8ocmVjWzEyOiAyNy42NiwgNjU6IDkwXSlcclxuXHJcbiMgbWV0aG9kIDJcclxuc3UuZWNobyhyZWNbMTI6IDI3LjY2XSArIHJlY1s2NTogOTBdKVxyXG5gYGBcclxuXHJcblRoZSBhdWRpbyByZWNvcmQgaXMgc3BsaXQgaW50byB0d28gcGFydHMsIHRoZSBmaXJzdCBvbmUgMTItMjcuNjYgc2Vjb25kcywgYW5kIHRoZSBsYXN0IG9uZSA2NS05MCBzZWNvbmRzLCB0aGVuIHRoZSBzbGljZWQgcmVjb3JkcyBhcmUgbWVyZ2VkIGFuZCBwbGF5ZWQgaW4gdGhlIHN0cmVhbS5cclxuXHJcblxyXG4jIyMjIyBGcmVxdWVuY3kgZG9tYWluXHJcblxyXG4jIyMjIyMgTFBGIDEwMEh6XHJcblxyXG5gYGBweXRob25cclxuc3UgPSBzdWRpby5NYXN0ZXIoKVxyXG5iYXJvb24gPSBzdS5hZGQoJ2Jhcm9vbi5tcDMnKVxyXG5zdS5lY2hvKGJhcm9vbls6ICcxMDAnXSlcclxuYGBgXHJcblxyXG4jIyMjIyMgSFBGIDFLSHpcclxuXHJcbmBgYHB5dGhvblxyXG5zdSA9IHN1ZGlvLk1hc3RlcigpXHJcbmJhcm9vbiA9IHN1LmFkZCgnYmFyb29uLm1wMycpXHJcbnN1LmVjaG8oYmFyb29uWycxMDAwJzpdKVxyXG5gYGBcclxuXHJcbiMjIyMjIyBCUEYgNTAwSHogLSAxS0h6XHJcblxyXG5gYGBweXRob25cclxuc3UgPSBzdWRpby5NYXN0ZXIoKVxyXG5iYXJvb24gPSBzdS5hZGQoJ2Jhcm9vbi5tcDMnKVxyXG5zdS5lY2hvKGJhcm9vblsnNTAwJzonMTAwMCddKVxyXG5gYGBcclxuXHJcbiMjIyMjIENvbXBsZXggU2xpY2luZ1xyXG5cclxuYGBgcHl0aG9uXHJcbnN1ID0gc3VkaW8uTWFzdGVyKClcclxuYmFyb29uID0gc3UuYWRkKCdiYXJvb24ubXAzJylcclxuc3UuZWNobyhiYXJvb25bNToxMCwgOicxMDAwJywgMTA6IDIwLCAnMTAwMCc6ICc1MDAwJ10pXHJcbmBgYFxyXG5cclxuSW4gdGhlIGV4YW1wbGUgYWJvdmUsIGEgbG93LXBhc3MgZmlsdGVyIHdpdGggYSBjdXRvZmYgZnJlcXVlbmN5IG9mIDEga0h6IGlzIGFwcGxpZWQgdG8gdGhlIHJlY29yZCBmcm9tIDUgdG8gMTAgc2Vjb25kcywgdGhlbiBhIGJhbmQtcGFzcyBmaWx0ZXIgaXMgYXBwbGllZCBmcm9tIDEwIHRvIDIwIHNlY29uZHMsIGFuZCBmaW5hbGx5IHRoZXkgYXJlIG1lcmdlZC5cclxuXHJcblxyXG5cclxuIyMjIyBBdWRpbyBTdHJlYW1pbmdcclxuXHJcblxyXG5gYGBweXRob25cclxuc3UgPSBzdWRpby5NYXN0ZXIoKVxyXG5cclxuIyBzdGFydCBzdWRpbyBrZXJuZWxcclxuc3Uuc3RhcnQoKVxyXG5cclxucmVjb3JkID0gc3UuYWRkKCdiYXJvb24ubXAzJylcclxuc3RyZWFtID0gc3Uuc3RyZWFtKHJlY29yZClcclxuXHJcbiMgZW5hYmxlIHN0ZG91dFxyXG5zdS5lY2hvKClcclxuXHJcbiMgc3RhcnQgc3RyZWFtaW5nXHJcbnN0cmVhbS5zdGFydCgpXHJcblxyXG4jIHdhaXQgZm9yIDEwIHNlY29uZHMgIFxyXG50aW1lLnNsZWVwKDEwKVxyXG5cclxuIyBzdG9wIHN0cmVhbWluZ1xyXG5zdHJlYW0uc3RvcCgpXHJcbmBgYFxyXG5cclxuXHJcbiMjIyBbRXhhbXBsZXMgYW5kIEFkdmFuY2VkIFVzYWdlXSgjZXhhbXBsZXMtYW5kLWFkdmFuY2VkLXVzYWdlKVxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIFNob3J0LXRpbWUgRm91cmllciB0cmFuc2Zvcm1cclxuXHJcblRoZSBbU2hvcnQtdGltZSBGb3VyaWVyIHRyYW5zZm9ybSAoU1RGVCldKC4vZXhhbXBsZXMvU1RGVC8pLCBpcyBhIEZvdXJpZXItcmVsYXRlZCB0cmFuc2Zvcm0gdXNlZCB0byBkZXRlcm1pbmUgdGhlIHNpbnVzb2lkYWwgZnJlcXVlbmN5IGFuZCBwaGFzZSBjb250ZW50IG9mIGxvY2FsIHNlY3Rpb25zIG9mIGEgc2lnbmFsIGFzIGl0IGNoYW5nZXMgb3ZlciB0aW1lLiBJbiBwcmFjdGljZSwgdGhlIHByb2NlZHVyZSBmb3IgY29tcHV0aW5nIFNURlRzIGlzIHRvIGRpdmlkZSBhIGxvbmdlciB0aW1lIHNpZ25hbCBpbnRvIHNob3J0ZXIgc2VnbWVudHMgb2YgZXF1YWwgbGVuZ3RoIGFuZCB0aGVuIGNvbXB1dGUgdGhlIEZvdXJpZXIgdHJhbnNmb3JtIHNlcGFyYXRlbHkgb24gZWFjaCBzaG9ydGVyIHNlZ21lbnQuIFRoaXMgcmV2ZWFscyB0aGUgRm91cmllciBzcGVjdHJ1bSBvbiBlYWNoIHNob3J0ZXIgc2VnbWVudC4gT25lIHRoZW4gdXN1YWxseSBwbG90cyB0aGUgY2hhbmdpbmcgc3BlY3RyYSBhcyBhIGZ1bmN0aW9uIG9mIHRpbWUsIGtub3duIGFzIGEgc3BlY3Ryb2dyYW0gb3Igd2F0ZXJmYWxsIHBsb3QsIHN1Y2ggYXMgY29tbW9ubHkgdXNlZCBpbiBTb2Z0d2FyZSBEZWZpbmVkIFJhZGlvIChTRFIpIGJhc2VkIHNwZWN0cnVtIGRpc3BsYXlzLiBcclxuXHJcblxyXG4jIyMjIyBwcmVyZXF1aXNpdGVzXHJcblxyXG5gYGBweVxyXG5waXAgaW5zdGFsbCBzdWRpb1xyXG5waXAgaW5zdGFsbCBraXZ5XHJcbmBgYFxyXG5cclxuPGJyIC8+XHJcblxyXG4hW0dyYXBoaWNhbCBTVEZUIGltYWdlXSguL2ltZy9zdGZ0LnBuZylcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbjwhLS1cclxuIyMjIFtVc2FnZV0oI3VzYWdlKVxyXG5cclxuIyMjIFByZXJlcXVpc2l0ZXNcclxuXHJcblN1ZGlvIGhhcyB3cml0dGVuIGluIHRoZSBweXRob24gbGFuZ3VhZ2UsIHlvdSBjYW4gc2VlIHRoZSBweXRob24gZG9jdW1lbnRhdGlvbiBmcm9tIHRoaXMgbGluay4gXHJcblRoaXMgbGlicmFyeSB1c2VkIHNjaWVudGlmaWMgY29tcHV0aW5nIHBhY2thZ2VzIHRvIG1hbmlwdWxhdGUgZGF0YSBsaWtlIHRoZSBudW1weSBhbmQgc2NpcHkuXHJcbi0tPlxyXG5cclxuIyMgQVBJIERvY3VtZW50YXRpb25cclxuXHJcbiMjIyBNYXN0ZXJcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3RlclxyXG5gYGBcclxuXHJcblxyXG4jIyMjIFBhcmFtZXRlcnNcclxuXHJcbi0gKipzdGRfaW5wdXRfZGV2X2lkKio6IGludCwgb3B0aW9uYWxcclxuICAgIG9zIHN0YW5kYXJkIGlucHV0IGRldmljZSBpZC4gSWYgbm90IGdpdmVuLCB0aGVuIHRoZSBpbnB1dCBkZXZpY2UgaWQgd2lsbCBiZSBzZWxlY3RlZCBhdXRvbWF0aWNhbGx5KHVpX21vZGU9RmFsc2UpIG9yIG1hbnVhbGx5IGJ5IHRoZSB1c2VyKHVpX21vZGU9VHJ1ZSlcclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqc3RkX291dHB1dF9kZXZfaWQqKjogaW50LCBvcHRpb25hbFxyXG4gICAgb3Mgc3RhbmRhcmQgb3V0cHV0IGRldmljZSBpZC4gSWYgbm90IGdpdmVuLCB0aGVuIHRoZSBvdXRwdXQgZGV2aWNlIGlkIHdpbGxcclxuICAgIGJlIHNlbGVjdGVkIGF1dG9tYXRpY2FsbHkodWlfbW9kZT1GYWxzZSkgb3IgbWFudWFsbHkgYnkgdGhlIHVzZXIodWlfbW9kZT1UcnVlKVxyXG5cclxuLSAqKmZyYW1lX3JhdGUqKjogIGludCwgb3B0aW9uYWxcclxuICAgIElucHV0IGNoYW5uZWwgc2FtcGxlIHJhdGUuIElmIHN0ZF9pbnB1dF9kZXZfaWQgaXMgc2VsZWN0ZWQgYXMgTm9uZSwgdGhlIHZhbHVlIHdpbGwgYmUgc2VsZWN0ZWQgYXV0b21hdGljYWxseS5cclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqbmNoYW5uZWxzKio6IGludCwgb3B0aW9uYWxcclxuICAgIFRoZSBudW1iZXIgb2YgYXVkaWJsZSBwZXJzcGVjdGl2ZSBkaXJlY3Rpb25zIG9yIGRpbWVuc2lvbnMuICAgIFxyXG4gICAgSWYgc3RkX2lucHV0X2Rldl9pZCBpcyBzZWxlY3RlZCBhcyBOb25lLCB0aGUgdmFsdWUgd2lsbCBiZSBzZWxlY3RlZCBhdXRvbWF0aWNhbGx5LlxyXG5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbi0gKipkYXRhX2Zvcm1hdCoqOiBTYW1wbGVGb3JtYXRcclxuICAgIFNwZWNpZmllcyB0aGUgYXVkaW8gYml0IGRlcHRocy4gU3VwcG9ydGVkIGRhdGEgZm9ybWF0IChmcm9tIHN1ZGlvKTpcclxuICAgICoqZm9ybWF0RmxvYXQzMioqLCAqKmZvcm1hdEludDMyKiosICoqZm9ybWF0SW50MjQqKiwgKipmb3JtYXRJbnQxNioqIChkZWZhdWx0KSwgKipmb3JtYXRJbnQ4KiosICoqZm9ybWF0VUludDgqKlxyXG5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbi0gKiptb25vX21vZGUqKjogYm9vbCwgb3B0aW9uYWxcclxuICAgIElmIFRydWUsIHRoZW4gYWxsIHRoZSBpbnB1dCBjaGFubmVscyB3aWxsIGJlIG1peGVkIGludG8gb25lIGNoYW5uZWwuXHJcblxyXG4tICoqdWlfbW9kZSoqOiBib29sLCBvcHRpb25hbFxyXG4gICAgSWYgRW5hYmxlZCB0aGVuIHVzZXIgaW50ZXJmYWNlIG1vZGUgd2lsbCBiZSBhY3RpdmF0ZWQuXHJcblxyXG4gICAgPGJyIC8+XHJcbiAgICBcclxuLSAqKm5wZXJzZWcqKjogaW50LG9wdGlvbmFsXHJcbiAgICBudW1iZXIgb2Ygc2FtcGxlcyBwZXIgZWFjaCBkYXRhIGZyYW1lIChpbiBvbmUgY2hhbm5lbClcclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqbm92ZXJsYXAqKjogaW50LCBkZWZhdWx0IE5vbmVcclxuXHJcbiAgICBUaGUgbm92ZXJsYXAgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIG92ZXJsYXAgYmV0d2VlbiBkZWZpbmVkIHdpbmRvd3MuIElmIG5vdCBnaXZlbiB0aGVuIGl0J3MgdmFsdWUgd2lsbCBiZSBzZWxlY3RlZCBhc1xyXG4gICAgXHJcbiAgICBgYGBtYXRoXHJcbiAgICBTRSA9IFxcZnJhY3tucGVyc2VnfXsyfS5cclxuICAgIGBgYFxyXG5cclxuICAgIFdoZW4gdGhlIGxlbmd0aCBvZiBhIGRhdGEgc2V0IHRvIGJlIHRyYW5zZm9ybWVkIGlzIGxhcmdlciB0aGFuIG5lY2Vzc2FyeSB0byBwcm92aWRlIHRoZSBkZXNpcmVkIGZyZXF1ZW5jeSByZXNvbHV0aW9uLCBhIGNvbW1vbiBwcmFjdGljZSBpcyB0byBzdWJkaXZpZGUgaXQgaW50byBzbWFsbGVyIHNldHMgYW5kIHdpbmRvdyB0aGVtIGluZGl2aWR1YWxseS5cclxuXHJcbiAgICBUbyBtaXRpZ2F0ZSB0aGUgXCJsb3NzXCIgYXQgdGhlIGVkZ2VzIG9mIHRoZSB3aW5kb3csIHRoZSBpbmRpdmlkdWFsIHNldHMgbWF5IG92ZXJsYXAgaW4gdGltZS5cclxuXHJcbiAgICBcclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqTk9MQV9jaGVjayoqOiBib29sLCBvcHRpb25hbFxyXG4gICAgQ2hlY2sgd2hldGhlciB0aGUgTm9uemVybyBPdmVybGFwIEFkZCAoTk9MQSkgY29uc3RyYWludCBpcyBtZXQuKElmIHRydWUpXHJcblxyXG4gICAgPGJyIC8+XHJcbiAgICBcclxuLSAqKklPX21vZGUqKjogc3RyLCBvcHRpb25hbFxyXG4gICAgSW5wdXQvT3V0cHV0IHByb2Nlc3NpbmcgbW9kZSB0aGF0IGNhbiBiZTpcclxuICAgIFxyXG4gICAgPGJyIC8+XHJcbiAgICBcclxuICAgIC0gXCIqKnN0ZElucHV0MnN0ZE91dHB1dCoqXCI6KGRlZmF1bHQpXHJcbiAgICAgICAgZGVmYXVsdCBtb2RlOyBzdGFuZGFyZCBpbnB1dCBzdHJlYW0gKHN5c3RlbSBhdWRpbyBvciBhbnkgb3RoZXIgd2luZG93cyBkZWZpbmVkIHN0cmVhbXMpIHRvIHN0YW5kYXJkIGRlZmluZWQgb3V0cHV0IHN0cmVhbSAoc3lzdGVtIHNwZWFrZXJzKS5cclxuXHJcbiAgICAtIFwiKip1c3JJbnB1dDJ1c3JPdXRwdXQqKlwiOlxyXG4gICAgICAgIHVzZXIgZGVmaW5lZCBpbnB1dCBzdHJlYW0gKGNhbGxiYWNrIGZ1bmN0aW9uIGRlZmluZWQgd2l0aCBpbnB1dF9kZXZfY2FsbGJhY2spIHRvICB1c2VyIGRlZmluZWQgb3V0cHV0IHN0cmVhbSAoY2FsbGJhY2sgZnVuY3Rpb24gZGVmaW5lZCB3aXRoIG91dHB1dF9kZXZfY2FsbGJhY2spLlxyXG5cclxuICAgIC0gXCIqKnVzcklucHV0MnN0ZE91dHB1dCoqXCI6XHJcbiAgICAgICAgdXNlciBkZWZpbmVkIGlucHV0IHN0cmVhbSAoY2FsbGJhY2sgZnVuY3Rpb24gZGVmaW5lZCB3aXRoIGlucHV0X2Rldl9jYWxsYmFjaykgdG8gIHVzZXIgZGVmaW5lZCBvdXRwdXQgc3RyZWFtIChjYWxsYmFjayBmdW5jdGlvbiBkZWZpbmVkIHdpdGggb3V0cHV0X2Rldl9jYWxsYmFjaykuXHJcblxyXG4gICAgLSBcIioqc3RkSW5wdXQydXNyT3V0cHV0KipcIjpcclxuICAgICAgICBzdGFuZGFyZCBpbnB1dCBzdHJlYW0gKHN5c3RlbSBhdWRpbyBvciBhbnkgb3RoZXIgd2luZG93cyBkZWZpbmVkIHN0cmVhbXMpIHRvICB1c2VyIGRlZmluZWQgb3V0cHV0IHN0cmVhbSAoY2FsbGJhY2sgZnVuY3Rpb24gZGVmaW5lZCB3aXRoIG91dHB1dF9kZXZfY2FsbGJhY2spLlxyXG5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbi0gKippbnB1dF9kZXZfY2FsbGJhY2sqKjogY2FsbGFibGU7XHJcbiAgICB1c2VyIGlucHV0IGNhbGxiYWNrOyBkZWZhdWx0IE5vbmU7IFxyXG4gICAgdGhpcyBmdW5jdGlvbiB1c2VkIGluIFwiKip1c3JJbnB1dDJ1c3JPdXRwdXQqKlwiIGFuZCBcIioqdXNySW5wdXQyc3RkT3V0cHV0KipcIiBJTyBtb2RlcyBhbmQgY2FsbGVkIGJ5IHRoZSBzdWRpbyBjb3JlIGV2ZXJ5IDEvZnJhbWVfcmF0ZSBzZWNvbmQgYW5kIG11c3QgcmV0dXJucyBmcmFtZSBkYXRhIGFzIGEgbnVtcHkgYXJyYXkgd2l0aCB0aGUgZGltZW5zaW9ucyBvZiB0aGUgKE51bWJlciBvZiBjaGFubmVscywgTnVtYmVyIG9mIGRhdGEgcGVyIHNlZ21lbnQpLlxyXG4gICAgPGJyIC8+XHJcblxyXG4gICAgRm9ybWF0OiBcclxuICAgIFxyXG4gICAgYGBgcHlcclxuICAgIDppbnB1dHM6ICAgIGZyYW1lX2NvdW50LCB0aW1lX2luZm8sIHN0YXR1c1xyXG4gICAgOm91dHB1dHM6ICAgTnVtcHkgTi1jaGFubmVsIGRhdGEgZnJhbWUgaW4gIChOdW1iZXIgb2YgY2hhbm5lbHMsIE51bWJlciBvZiBkYXRhIHBlciBzZWdtZW50KVxyXG4gICAgICAgICAgICAgICAgZGltZW5zaW9ucy5cclxuICAgIGBgYCAgICAgICAgICAgICAgICBcclxuICAgIDptZW1vOiAqKk5vdGU6KiogVGhlIGRhdGEgZnJhbWUgaW4gc2luZ2xlIGNoYW5uZWwgbW9kZSBoYXMgdGhlIHNoYXBlIG9mIChOdW1iZXIgb2YgZGF0YSBwZXIgc2VnbWVudCwgKS5cclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqb3V0cHV0X2Rldl9jYWxsYmFjayoqOiBjYWxsYWJsZTtcclxuXHJcbiAgICBVc2VyIGlucHV0IGNhbGxiYWNrOyBkZWZhdWx0IE5vbmU7XHJcbiAgICBUaGlzIGZ1bmN0aW9uIHVzZWQgaW4gXCIqKnVzcklucHV0MnVzck91dHB1dCoqXCIgYW5kIFwiKipzdGRJbnB1dDJ1c3JPdXRwdXQqKlwiIElPIG1vZGVzIGFuZCBjYWxsZWQgYnkgdGhlIHN1ZGlvIGNvcmUgZXZlcnkgMSAvIGZyYW1lX3JhdGUgc2Vjb25kIGFmdGVyIHByb2Nlc3NpbmcgZnJhbWVzIGFuZCB0YWtlcyB0aGUgZnJhbWUgZGF0YSBhcyBhIG51bXB5IGFycmF5IGluIChOdW1iZXIgb2YgY2hhbm5lbHMsIE51bWJlciBvZiBkYXRhIHBlciBzZWdtZW50KSBkaW1lbnNpb25zIG51bXB5IGFycmF5LlxyXG5cclxuICAgIGZvcm1hdDogXHJcbiAgICBcclxuICAgIGBgYHB5XHJcbiAgICA6aW5wdXRzOiAgICBOdW1weSBOLWNoYW5uZWwgZGF0YSBmcmFtZSBpbiAgKE51bWJlciBvZiBjaGFubmVscywgTnVtYmVyIG9mIGRhdGEgcGVyIHNlZ21lbnQpIGRpbWVuc2lvbnMuXHJcbiAgICA6b3V0cHV0czogY3VzdG9taXplZCBhdWRpbyBzdHJlYW0uXHJcbiAgICBgYGBcclxuXHJcbiAgICA6bWVtbzogKipOb3RlOioqIFRoZSBkYXRhIGZyYW1lIGluIHNpbmdsZSBjaGFubmVsIG1vZGUgaGFzIHRoZSBzaGFwZSBvZiAoTnVtYmVyIG9mIGRhdGEgcGVyIHNlZ21lbnQsICkuXHJcblxyXG4gICAgPGJyIC8+XHJcbiAgICBcclxuLSAqKm1hc3Rlcl9taXhfY2FsbGJhY2sqKjogY2FsbGFibGUsIG9wdGlvbmFsXHJcbiAgICBUaGlzIGNhbGxiYWNrIGlzIHVzZWQgYmVmb3JlIHRoZSBtYWluLXByb2Nlc3Npbmcgc3RhZ2UgaW4gdGhlIG1hc3RlciBmb3IgY29udHJvbGxpbmcgYW5kIG1peGluZyBhbGwgc2xhdmUgY2hhbm5lbHMgdG8gYSBuZGFycmF5IG9mIHNoYXBlIChtYXN0ZXIubmNoYW5uZWxzLCAyLCBtYXN0ZXIubnBlcnNlZykuXHJcblxyXG4gICAgSWYgdGhpcyBwYXJhbWV0ZXIgaXMgbm90IGRlZmluZWQsIHRoZW4gdGhlIG51bWJlciBvZiBhdWRpbyBjaGFubmVscyBpbiBhbGwgc2xhdmVzIG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIG1hc3Rlci5cclxuXHJcbiAgICA8YnIgLz5cclxuICAgIFxyXG4tICoqd2luZG93Kio6ICBzdHJpbmcsIGZsb2F0LCB0dXBsZSwgbmRhcnJheSwgb3B0aW9uYWxcclxuICAgIFRoZSB0eXBlIG9mIHdpbmRvdywgdG8gY3JlYXRlKHN0cmluZykgb3IgcHJlIGRlc2lnbmVkIHdpbmRvdyBpbiBudW1weSBhcnJheSBmb3JtYXQuIHVzZSBOb25lIHRvIGRpc2FibGUgd2luZG93aW5nIHByb2Nlc3MuXHJcbiAgICBEZWZhdWx0IChcIioqaGFubioqXCIpIEhhbm5pbmcgZnVuY3Rpb24uXHJcblxyXG4jIyMjIE5vdGVzXHJcbiAgICBcclxuLSAgICAqKklmKiogdGhlIHdpbmRvdyBmdW5jdGlvbiByZXF1aXJlcyBubyBwYXJhbWV0ZXJzLCB0aGVuIGB3aW5kb3dgIGNhbiBiZSBhIHN0cmluZyBvdGhlcndpc2UgdGhlIGB3aW5kb3dgIG11c3QgYmUgYSB0dXBsZSB3aXRoIHRoZSBmaXJzdCBhcmd1bWVudCB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIHdpbmRvdywgYW5kIHRoZSBuZXh0XHJcbiAgICBhcmd1bWVudHMgdGhlIG5lZWRlZCBwYXJhbWV0ZXJzLlxyXG4gICAgPGJyIC8+XHJcbiAgICBJZiBgd2luZG93YCBpcyBhIGZsb2F0aW5nIHBvaW50IG51bWJlciwgaXQgaXMgaW50ZXJwcmV0ZWQgYXMgdGhlIGJldGEgcGFyYW1ldGVyIG9mIHRoZSBga2Fpc2VyYCB3aW5kb3cuXHJcbiAgICBFYWNoIG9mIHRoZSB3aW5kb3cgdHlwZXMgbGlzdGVkIGFib3ZlIGlzIGFsc28gdGhlIG5hbWUgb2YgYSBmdW5jdGlvbiB0aGF0IGNhbiBiZSBjYWxsZWQgZGlyZWN0bHkgdG8gY3JlYXRlIGEgd2luZG93IG9mIHRoYXQgdHlwZS5cclxuICAgIDxiciAvPlxyXG4gICAgd2luZG93IHR5cGVzOlxyXG4gICAgICAgIGBgYHB5XHJcbiAgICAgICAgYm94Y2FyLCB0cmlhbmcgLCBibGFja21hbiwgaGFtbWluZywgaGFubihkZWZhdWx0KSwgYmFydGxldHQsIGZsYXR0b3AsIHBhcnplbiwgYm9obWFuLCBibGFja21hbmhhcnJpc1xyXG4gICAgICAgIG51dHRhbGwsIGJhcnRoYW5uLCBjb3NpbmUsIGV4cG9uZW50aWFsLCB0dWtleSwgdGF5bG9yLCBrYWlzZXIgKG5lZWRzIGJldGEpLFxyXG4gICAgICAgIGdhdXNzaWFuIChuZWVkcyBzdGFuZGFyZCBkZXZpYXRpb24pLCBnZW5lcmFsX2Nvc2luZSAobmVlZHMgd2VpZ2h0aW5nIGNvZWZmaWNpZW50cyksXHJcbiAgICAgICAgZ2VuZXJhbF9nYXVzc2lhbiAobmVlZHMgcG93ZXIsIHdpZHRoKSwgZ2VuZXJhbF9oYW1taW5nIChuZWVkcyB3aW5kb3cgY29lZmZpY2llbnQpLFxyXG4gICAgICAgIGRwc3MgKG5lZWRzIG5vcm1hbGl6ZWQgaGFsZi1iYW5kd2lkdGgpLCBjaGVid2luIChuZWVkcyBhdHRlbnVhdGlvbilcclxuICAgICAgICBgYGBcclxuIC0gICBcIioqbm9uemVybyoqIG92ZXJsYXAgYWRkXCIgKE5PTEEpOlxyXG4gICAgVGhpcyBlbnN1cmVzIHRoYXQgdGhlIG5vcm1hbGl6YXRpb24gZmFjdG9ycyBpbiB0aGUgZGVub21pbmF0b3Igb2YgdGhlIG92ZXJsYXAtYWRkIGludmVyc2lvbiBlcXVhdGlvbiBhcmUgbm90IHplcm8uIE9ubHkgdmVyeSBwYXRob2xvZ2ljYWwgd2luZG93cyB3aWxsIGZhaWwgdGhlIE5PTEEgY29uc3RyYWludC5cclxuXHJcblxyXG4jIyMjIE1ldGhvZHNcclxuXHJcbjxiciAvPlxyXG4gICAgIFxyXG4jIyMjIyBhZGRfZmlsZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmFkZF9maWxlKCAgc2VsZiwgZmlsZW5hbWU6IHN0ciwgc2FtcGxlX2Zvcm1hdDogU2FtcGxlRm9ybWF0ID0gU2FtcGxlRm9ybWF0LmZvcm1hdFVua25vd24sIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuY2hhbm5lbHM6IGludCA9IE5vbmUsIHNhbXBsZV9yYXRlOiBpbnQgPSBOb25lICxzYWZlX2xvYWQ9VHJ1ZSlcclxuYGBgXHJcblxyXG5UaGUgYWRkX2ZpbGUgbWV0aG9kIHVzZWQgdG8gQWRkIGFuIGF1ZGlvIGZpbGUgdG8gdGhlIGxvY2FsIGRhdGFiYXNlLiBOb25lIHZhbHVlIGZvciB0aGUgcGFyYW1ldGVycyBtZWFucyB0aGF0IHRoZXkgYXJlIGF1dG9tYXRpY2FsbHkgc2VsZWN0ZWQgYmFzZWQgb24gdGhlIHByb3BlcnRpZXMgb2YgdGhlIGF1ZGlvIGZpbGUuXHJcblxyXG4tICoqcGFyYW1ldGVycyoqOlxyXG5cclxuICAgIC0gKipmaWxlbmFtZSoqOiBwYXRoL25hbWUgb2YgdGhlIGF1ZGlvIGZpbGVcclxuICAgIC0gKipzYW1wbGVfZm9ybWF0Kio6IG9wdGlvbmFsOyBzYW1wbGUgZm9ybWF0IChyZWZlciB0byB0aGUgU2FtcGxlRm9ybWF0IGRhdGEgZmllbGQpLlxyXG4gICAgLSAqKm5jaGFubmVscyoqOiBvcHRpb25hbDsgIG51bWJlciBvZiBhdWRpbyBjaGFubmVsc1xyXG4gICAgLSAqKnNhbXBsZV9yYXRlKio6IG9wdGlvbmFsOyAgc2FtcGxlIHJhdGVcclxuICAgIC0gKipzYWZlX2xvYWQqKjogb3B0aW9uYWw7ICBsb2FkIGFuIGF1ZGlvIGZpbGUgYW5kIG1vZGlmeSBpdCBhY2NvcmRpbmcgdG8gdGhlICdNYXN0ZXInIGF0dHJpYnV0ZXMuIChzYW1wbGUgcmF0ZSwgc2FtcGxlIGZvcm1hdCwgbnVtYmVyIG9mIGNoYW5uZWxzLCBldGMpLlxyXG5cclxuLSAqKnJldHVybnMqKiBXcmFwR2VuZXJhdG9yIG9iamVjdFxyXG5cclxuXHJcbjptZW1vOiAqKk5vdGU6Kiogc3VwcG9ydGVkIGZpbGVzIGZvcm1hdDogV0FWLCBGTEFDLCBWT1JCSVMsIE1QM1xyXG5cclxuOm1lbW86ICoqTm90ZToqKiBUaGUgYXVkaW8gZGF0YSBtYWludGFpbmluZyBwcm9jZXNzIGhhcyBhZGRpdGlvbmFsIGNhY2hlZCBmaWxlcyB0byByZWR1Y2UgZHluYW1pYyBtZW1vcnkgdXNhZ2UgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UsIG1lYW5pbmcgdGhhdCwgVGhlIGF1ZGlvIGRhdGEgc3RvcmFnZSBtZXRob2RzIGNhbiBoYXZlIGRpZmZlcmVudCBleGVjdXRpb24gdGltZXMgYmFzZWQgb24gdGhlIGNhY2hlZCBmaWxlcy5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGFkZFxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmFkZChzZWxmLCByZWNvcmQsIHNhZmVfbG9hZD1UcnVlKVxyXG5gYGBcclxuXHJcbkFkZCBuZXcgcmVjb3JkIHRvIHRoZSBsb2NhbCBkYXRhYmFzZS5cclxuXHJcbi0gKipwYXJhbWV0ZXJzKio6XHJcblxyXG4gICAgLSAqKnJlY29yZCoqOiBjYW4gYmUgYW4gd3JhcHBlZCByZWNvcmQsIFJlY29yZCBvYmplY3Qgb3IgYW4gYXVkaW8gZmlsZSBpbiBtcDMsIFdBViwgRkxBQyBvciBWT1JCSVMgZm9ybWF0LlxyXG4gICAgLSAqKnNhZmVfbG9hZCoqOiBvcHRpb25hbDsgbG9hZCBhbiBhdWRpbyBmaWxlIGFuZCBtb2RpZnkgaXQgYWNjb3JkaW5nIHRvIHRoZSAnTWFzdGVyJyBhdHRyaWJ1dGVzLlxyXG5cclxuLSAqKnJldHVybnMqKiBXcmFwcGVkKFdyYXBHZW5lcmF0b3IpIG9iamVjdFxyXG5cclxuOm1lbW86ICoqTm90ZToqKiBUaGUgbmFtZSBvZiB0aGUgbmV3IHJlY29yZCBjYW4gYmUgY2hhbmdlZCB3aXRoIHRoZSBmb2xsb3dpbmcgdHVwbGUgdGhhdCBpcyBwYXNzZWQgdG8gdGhlIGZ1bmN0aW9uOiAocmVjb3JkIG9iamVjdCwgbmV3IG5hbWUgb2YgKSwgb3RoZXJ3aXNlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkLlxyXG5cclxuOm1lbW86ICoqTm90ZToqKiBUaGUgYXVkaW8gZGF0YSBtYWludGFpbmluZyBwcm9jZXNzIGhhcyBhZGRpdGlvbmFsIGNhY2hlZCBmaWxlcyB0byByZWR1Y2UgZHluYW1pYyBtZW1vcnkgdXNhZ2UgYW5kIGltcHJvdmUgcGVyZm9ybWFuY2UsIG1lYW5pbmcgdGhhdCwgVGhlIGF1ZGlvIGRhdGEgc3RvcmFnZSBtZXRob2RzIGNhbiBoYXZlIGRpZmZlcmVudCBleGVjdXRpb24gdGltZXMgYmFzZWQgb24gdGhlIGNhY2hlZCBmaWxlcy5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHN0YXJ0XHJcblxyXG5zdGFydCBhdWRpbyBzdHJlYW1pbmcsIG11c3QgYmUgY2FsbGVkIGJlZm9yZSBhdWRpbyBzdHJlYW1pbmcgcHJvY2Vzcy4gXHJcbioqcmV0dXJucyoqIG1hc3RlciBvYmplY3QuXHJcblxyXG5cclxuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyByZWNvcmRlclxyXG5cclxuYGBgcHlcclxuICAgc3VkaW8uTWFzdGVyLnJlY29yZGVyKHNlbGYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZF9kdXJhdGlvbjogVW5pb25baW50LCBmbG9hdF0gPSAxMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RyPU5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZV9jb21wcmVzc29yOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBub2lzZV9zYW1wbGluZ19kdXJhdGlvbjogVW5pb25baW50LCBmbG9hdF09MSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlX3VpOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5X3JlY29yZGVkOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRjaGluZ19wcmVjaXNpb246IGZsb2F0PTAuMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWNob19tb2RlOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvbl9zdGFydF9jYWxsYmFjazogY2FsbGFibGU9Tm9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25fc2FtcGxpbmdfY2FsbGJhY2s6IGNhbGxhYmxlPU5vbmUpXHJcbmBgYFxyXG5cclxucmVjb3JkIGZyb20gbWFpbiBzdHJlYW0gZm9yIGEgd2hpbGUuXHJcblxyXG5cclxuLSAqKnBhcmFtZXRlcnMqKjpcclxuXHJcbiAgICAtICoqcmVjb3JkX2R1cmF0aW9uKio6IGRldGVybWluZXMgZHVyYXRpb24gb2YgdGhlIHJlY29yZGluZyBwcm9jZXNzLlxyXG4gICAgLSAqKm5hbWUqKjogb3B0aW9uYWw7IG5hbWUgb2YgbmV3IHJlY29yZC5cclxuICAgIC0gKiplbmFibGVfY29tcHJlc3NvcioqOiBvcHRpb25hbDsgZW5hYmxlIHRvIGNvbXByZXNzIHRoZSByZWNvcmRlZCBkYXRhLiBUaGUgY29tcHJlc3NvciBkZWxldGVzIHBhcnQgb2YgdGhlIHNpZ25hbCB0aGF0IGhhcyBsb3dlciBlbmVyZ3kgdGhhbiB0aGUgc2FtcGxlZCBub2lzZS5cclxuICAgIC0gKipub2lzZV9zYW1wbGluZ19kdXJhdGlvbioqOiBvcHRpb25hbDsgbm9pc2Ugc2FtcGxpbmcgZHVyYXRpb24gdXNlZCBieSB0aGUgY29tcHJlc3NvcihpZiBlbmFibGVkKS5cclxuICAgIC0gKiplbmFibGVfdWkqKjogb3B0aW9uYWw7IHVzZXIgaW50ZWZhY2UgbW9kZSAobmVlZCB0byBpbnN0YWxsIHRxZG0gbW9kdWxlKVxyXG4gICAgLSAqKnBsYXlfcmVjb3JkZWQqKjogb3B0aW9uYWw7IERldGVybWluZXMgd2hldGhlciB0aGUgcmVjb3JkZWQgZmlsZSB3aWxsIGJlIHBsYXllZCBhZnRlciB0aGUgcmVjb3JkaW5nIHByb2Nlc3MuXHJcbiAgICAtICoqY2F0Y2hpbmdfcHJlY2lzaW9uKio6IG9wdGlvbmFsOyBTaWduYWwgY29tcHJlc3Npb24gYWNjdXJhY3ksIG1vcmUgYWNjdXJhY3kgY2FuIGJlIGFjaGlldmVkIHdpdGggYSBzbWFsbGVyIG51bWJlciAoZGVmYXVsdCAwLjEpLlxyXG4gICAgLSAqKmVjaG9fbW9kZSoqOiBJdCBjYW4gZGlzYWJsZSB0aGUgbWFpbnN0cmVhbSdzIGVjaG8gbW9kZSwgd2hlbiB0aGUgcmVjb3JkZXIgaXMgb25saW5lLlxyXG4gICAgLSAqKm9uX3N0YXJ0X2NhbGxiYWNrKio6IGNhbGxlZCBhZnRlciBub2lzZSBzYW1wbGluZy4gXHJcbiAgICAgICAgYGBgcHlcclxuICAgICAgICBwYXJhbWV0ZXJzOiBtYXN0ZXIgb2JqZWN0LCBzYW1wbGVkIG5vaXNlIGxldmVsLCByZWNvcmQgZHVyYXRpb24gdGltZS4gXHJcbiAgICAgICAgcmV0dXJuIHRydWUgdG8gY29udGluaXVlIHJlY29yZGluZy5cclxuICAgICAgICBgYGBcclxuLSAqKnJldHVybnMqKiBXcmFwcGVkKFdyYXBHZW5lcmF0b3IpIG9iamVjdFxyXG5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGxvYWRfYWxsXHJcblxyXG5gYGBweVxyXG4gICBzdWRpby5NYXN0ZXIubG9hZF9hbGwoc2VsZiwgc2FmZV9sb2FkPVRydWUpXHJcbmBgYFxyXG5cclxubG9hZCBhbGwgb2YgdGhlIHNhdmVkIHJlY29yZHMgZnJvbSB0aGUgZXh0ZXJuYWwgZGF0YWJhc2Uoc3RhdGljIG1lbW9yeSkgdG8gdGhlIGxvY2FsIGRhdGFiYXNlKGR5bmFtaWMgbWVtb3J5KS5cclxuXHJcblxyXG4tICoqcGFyYW1ldGVycyoqOlxyXG5cclxuICAgIC0gKipzYWZlX2xvYWQqKjogaWYgc2FmZSBsb2FkIGlzIGVuYWJsZWQgdGhlbiBsb2FkIGZ1bmN0aW9uIHRyaWVzIHRvIGxvYWQgYSByZWNvcmQgaW4gdGhlIGxvY2FsIGRhdGFiYXNlIGJhc2VkIG9uIHRoZSBtYXN0ZXIgc2V0dGluZ3MsIGxpa2UgdGhlIGZyYW1lIHJhdGUgYW5kIGV0Yy5cclxuICAgICAgICBgYGBcclxuLSAqKnJldHVybnMqKiBOb25lXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGxvYWRcclxuXHJcbmBgYHB5XHJcbiAgIHN1ZGlvLk1hc3Rlci5sb2FkKHNlbGYsIG5hbWU6IHN0ciwgbG9hZF9hbGw6IGJvb2w9RmFsc2UsIHNhZmVfbG9hZDogYm9vbD1UcnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlcmllczogYm9vbD1GYWxzZSkgLT4gVW5pb25bV3JhcEdlbmVyYXRvciwgUmVjb3JkXSlcclxuYGBgXHJcblxyXG5UaGUgbG9hZCBtZXRob2QgdXNlZCB0byBsb2FkIGEgcHJlZGVmaW5lZCByZWNvZWQgZnJvbSB0aGUgZXh0ZXJuYWwgZGF0YWJhc2UgKHN0YXRpYyBtZW1vdHkpIHRvXHJcbnRoZSBsb2NhbCBkYXRhYmFzZShkeW5hbWljIG1lbW9yeSkuIFRyeWluZyB0byBsb2FkIGEgcmVjb3JkIHRoYXQgd2FzIHByZXZpb3VzbHkgbG9hZGVkLCBvdXRwdXRzIGEgd3JhcHBlZCB2ZXJzaW9uIG9mIHRoZSBuYW1lZCByZWNvcmQuXHJcblxyXG5cclxuLSAqKnBhcmFtZXRlcnMqKjpcclxuXHJcbiAgLSAqKm5hbWUqKjogVGhlIG5hbWUgb2YgdGhlIHByZWRlZmluZWQgcmVjb3JkLlxyXG4gIC0gKipsb2FkX2FsbCoqOiB1c2VkIHRvIGxvYWQgYWxsIG9mIHRoZSBzYXZlZCByZWNvcmRzIGZyb20gdGhlIGV4dGVybmFsIGRhdGFiYXNlIHRvIHRoZSBsb2NhbCBkYXRhYmFzZS5cclxuICAtICoqc2FmZV9sb2FkKio6IGlmIHNhZmUgbG9hZCBpcyBlbmFibGVkIHRoaXMgbWV0aG9kIHRyaWVzIHRvIGxvYWQgYSByZWNvcmQgaW4gdGhlIGxvY2FsIGRhdGFiYXNlLCBiYXNlZCBvbiB0aGUgbWFzdGVyIHNldHRpbmdzLCBsaWtlIHRoZSBmcmFtZSByYXRlIGFuZCBldGMuXHJcbiAgLSAqKnNlcmllcyoqOiBJZiBlbmFibGVkLCBhdHRlbXB0aW5nIHRvIGxvYWQgYSByZWNvcmQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIGxvYWRlZCB3aWxsIG91dHB1dCB0aGUgZGF0YSBzZXJpZXMgb2YgdGhlIG5hbWVkIHJlY29yZC5cclxuXHJcbi0gKipyZXR1cm5zKiogb3B0aW9uYWw7IFdyYXBwZWQgb2JqZWN0LCBSZWNvcmQgb2JlamN0LlxyXG5cclxuPGJyIC8+XHJcblxyXG5cclxuIyMjIyMgZ2V0X3JlY29yZF9pbmZvXHJcblxyXG5gYGBweVxyXG4gICBzdWRpby5NYXN0ZXIuZ2V0X3JlY29yZF9pbmZvKHNlbGYsIG5hbWU6IHN0cikgLT4gUmVjb3JkXHJcbmBgYFxyXG5cclxuZ2V0IGV4dHJhIGluZm8gYWJvdXQgdGhlIHJlY29yZCBcclxuXHJcblxyXG4tICoqcGFyYW1ldGVycyoqOlxyXG5cclxuICAtICoqbmFtZSoqOiBuYW1lIG9mIHRoZSByZWdpc3RlcmVkIHJlY29yZCBvbiB0aGUgbG9jYWwgb3IgZXh0ZXJuYWwgXHJcblxyXG4tICoqcmV0dXJucyoqIGluZm9ybWF0aW9uIGFib3V0IHNhdmVkIHJlY29yZCBbJ25vaXNlTGV2ZWwnICdmcmFtZVJhdGUnICAnc2l6ZUluQnl0ZScgJ2R1cmF0aW9uJyAnbmNoYW5uZWxzJyAnbnBlcnNlZycgJ25hbWUnXS5cclxuXHJcbjxiciAvPlxyXG5cclxuXHJcbiMjIyMjIGdldF9leHJlY29yZF9pbmZvXHJcblxyXG5gYGBweVxyXG4gICBzdWRpby5NYXN0ZXIuZ2V0X2V4cmVjb3JkX2luZm8oc2VsZiwgbmFtZTogc3RyKSAtPiBSZWNvcmRcclxuYGBgXHJcblxyXG5nZXQgZXh0cmEgaW5mbyBhYm91dCB0aGUgcmVjb3JkIFxyXG5cclxuXHJcbi0gKipwYXJhbWV0ZXJzKio6XHJcblxyXG4gIC0gKipuYW1lKio6IG5hbWUgb2YgdGhlIHJlZ2lzdGVyZWQgcmVjb3JkIG9uIHRoZSBleHRlcm5hbCBkYXRhYmFzZShpZiBleGlzdHMpLlxyXG5cclxuLSAqKnJldHVybnMqKiBpbmZvcm1hdGlvbiBhYm91dCBzYXZlZCByZWNvcmQgWydub2lzZUxldmVsJyAnZnJhbWVSYXRlJyAgJ3NpemVJbkJ5dGUnICdkdXJhdGlvbicgJ25jaGFubmVscycgJ25wZXJzZWcnICduYW1lJ10uXHJcblxyXG5cclxuXHJcblxyXG4jIyMjIyBzeW5jYWJsZVxyXG5cclxuYGBgcHlcclxuICAgc3VkaW8uTWFzdGVyLnN5bmNhYmxlKHNlbGYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICogdGFyZ2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuY2hhbm5lbHM6IGludCA9IE5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlOiBpbnQgPSBOb25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYW1wbGVfZm9ybWF0OiBTYW1wbGVGb3JtYXQgPSBTYW1wbGVGb3JtYXQuZm9ybWF0VW5rbm93bilcclxuYGBgXHJcblxyXG5EZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHdyYXBwZWQgcmVjb3JkL3MgY2FuIGJlIHN5bmNlZCB3aXRoIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxyXG5cclxuLSAqKnBhcmFtZXRlcnMqKjpcclxuXHJcbiAgLSAqKnRhcmdldCoqOiB0YXJnZXQ6IHdyYXBwZWQgcmVjb3JkXFxzLihyZWd1bGFyIHJlY29yZHMpXHJcblxyXG4gIC0gKipuY2hhbm5lbHMqKjogbnVtYmVyIG9mIGNoYW5uZWxzOyBpZiB0aGUgdmFsdWUgaXMgTm9uZSwgdGhlIHRhcmdldCB3aWxsIGJlIGNvbXBhcmVkIHRvIHRoZSAnc2VsZicgcHJvcGVydGllcy5cclxuXHJcbiAgLSAqKnNhbXBsZV9yYXRlKio6IHNhbXBsZSByYXRlOyBpZiB0aGUgdmFsdWUgaXMgTm9uZSwgdGhlIHRhcmdldCB3aWxsIGJlIGNvbXBhcmVkIHRvIHRoZSAnc2VsZicgcHJvcGVydGllcy5cclxuXHJcbiAgLSAqKnNhbXBsZV9mb3JtYXQqKjogaWYgdGhlIHZhbHVlIGlzIE5vbmUsIHRoZSB0YXJnZXQgd2lsbCBiZSBjb21wYXJlZCB0byB0aGUgJ3NlbGYnIHByb3BlcnRpZXMuXHJcbiAgLSBcclxuLSAqKnJldHVybnMqKiByZXR1cm5zIG9ubHkgb2JqZWN0cyB0aGF0IG5lZWQgdG8gYmUgc3luY2hyb25pemVkLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBzeW5jXHJcblxyXG5gYGBweVxyXG4gICBzdWRpby5NYXN0ZXIuc3luYyhzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICogdGFyZ2V0cyxcclxuICAgICAgICAgICAgICAgICAgICBuY2hhbm5lbHM6IGludD1Ob25lLFxyXG4gICAgICAgICAgICAgICAgICAgIHNhbXBsZV9yYXRlOiBpbnQ9Tm9uZSxcclxuICAgICAgICAgICAgICAgICAgICBzYW1wbGVfZm9ybWF0OiBTYW1wbGVGb3JtYXQ9U2FtcGxlRm9ybWF0LmZvcm1hdFVua25vd24sXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0PSd3cmFwcGVkJylcclxuYGBgXHJcblxyXG5UaGlzIG1ldGhvZCB1c2VkIHRvIFN5bmNocm9uaXplIHdyYXBwZWQgcmVjb3JkL3Mgd2l0aCB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXHJcblxyXG5cclxuLSAqKnBhcmFtZXRlcnMqKjpcclxuXHJcbiAgLSAqKnRhcmdldHMqKjogd3JhcHBlZCByZWNvcmRzXFxzLiBcclxuICAtICoqbmNoYW5uZWxzKio6IG51bWJlciBvZiBjaGFubmVsczsgaWYgdGhlIHZhbHVlIGlzIE5vbmUsIHRoZSB0YXJnZXQgd2lsbCBiZSBzeW5jZWQgdG8gdGhlICdzZWxmJyBwcm9wZXJ0aWVzLlxyXG4gIC0gKipzYW1wbGVfcmF0ZSoqOiBpZiB0aGUgdmFsdWUgaXMgTm9uZSwgdGhlIHRhcmdldCB3aWxsIGJlIHN5bmNlZCB0byB0aGUgJ3NlbGYnIHByb3BlcnRpZXMuXHJcbiAgLSAqKnNhbXBsZV9mb3JtYXQqKjogaWYgdGhlIHZhbHVlIGlzIE5vbmUsIHRoZSB0YXJnZXQgd2lsbCBiZSBzeW5jZWQgdG8gdGhlICdzZWxmJyBwcm9wZXJ0aWVzLlxyXG4gIC0gKipvdXRwdXQqKjogY2FuIGJlICd3cmFwcGVkJyhyZWd1bGFyIHJlY29yZHMpLCAnc2VyaWVzJyhkaWN0IHR5cGUpIG9yICduZGFycmF5X2RhdGEnXHJcbi0gICoqcmV0dXJucyoqIHJldHVybnMgc3luY2hyb25pemVkIG9iamVjdHMuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBkZWxfcmVjb3JkXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuZGVsX3JlY29yZChzZWxmLCBuYW1lOiBzdHIsIGRlZXA6IGJvb2w9RmFsc2UpXHJcblxyXG5gYGBcclxuXHJcblRoZSBkZWxfcmVjb3JkIG1ldGhvZCB1c2VkIHRvIGRlbGV0ZSBhIHJlY29yZCBmcm9tIHRoZSBpbnRlcm5hbC9leHRlcm5hbCBkYXRhYmFzZS5cclxuXHJcblxyXG4tICoqcGFyYW1ldGVycyoqOlxyXG5cclxuLSAqKm5hbWUqKiBzdHI6IHRoZSBuYW1lIG9mIHByZWxvYWRlZCByZWNvcmQuXHJcbi0gKipkZWVwKiogYm9vbDogZGVlcCBkZWxldGUgbW9kZSBpcyB1c2VkIHRvIHJlbW92ZSB0aGUgcmVjb3JkICBhbmQgaXRzIGNvcnJlc3BvbmRpbmcgY2FjaGVzIGZyb20gdGhlIGV4dGVybmFsIGRhdGFiYXNlLlxyXG4tICAqKnJldHVybnMqKiBOb25lXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNhdmVfYXNcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5zYXZlX2FzKHNlbGYsIHJlY29yZDogVW5pb25bc3RyLCBSZWNvcmQsIFdyYXAsIFdyYXBHZW5lcmF0b3JdLCBmaWxlX3BhdGg6IHN0cj1TQVZFX1BBVEgpXHJcbmBgYFxyXG5Db252ZXJ0IHRoZSByZWNvcmQgdG8gdGhlIHdhdiBhdWRpbyBmb3JtYXQuXHJcblxyXG4tICoqUGFyYW1ldGVycyoqOlxyXG4gICAtICoqcmVjb3JkKio6IG5hbWUgb2YgdGhlIHJlZ2lzdGVyZWQgKHdyYXBwZWQpIHJlY29yZCwgYSAnUmVjb3JkJyBvYmplY3Qgb3IgYSAoY3VzdG9taXplZCkgd3JhcHBlZCByZWNvcmQuXHJcbiAgIC0gKipmaWxlX3BhdGgqKjogVGhlIG5hbWUgb3IgcGF0aCBvZiB0aGUgd2F2IGZpbGUuXHJcbiAgICAgICAgQSBuZXcgbmFtZSBmb3IgdGhlIHJlY29yZCB0byBiZSBjb252ZXJ0ZWQgY2FuIGJlIHBsYWNlZCBhdCB0aGUgZW5kIG9mIHRoZSBhZGRyZXNzLlxyXG4tICAqKnJldHVybnMqKiBOb25lXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBzYXZlXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuc2F2ZShzZWxmLCBuYW1lOiBzdHI9J05vbmUnLCBzYXZlX2FsbDogYm9vbD1GYWxzZSlcclxuYGBgXHJcblNhdmUgdGhlIHByZWxvYWRlZCByZWNvcmQgdG8gdGhlIGV4dGVybmFsIGRhdGFiYXNlLlxyXG5cclxuLSAqKlBhcmFtZXRlcnMqKjpcclxuICAgLSAqKm5hbWUqKjogbmFtZSBvZiB0aGUgcHJlbG9hZGVkIHJlY29yZFxyXG4gICAgLSAqKnNhdmVfYWxsKio6IGlmIHRydWUgdGhlbiBpdCdzIHRyaWVzIHRvIHNhdmUgYWxsIG9mIHRoZSBwcmVsb2FkZWQgcmVjb3Jkc1xyXG4tICAqKnJldHVybnMqKiBOb25lXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNhdmVcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5zYXZlKHNlbGYsIG5hbWU6IHN0cj0nTm9uZScsIHNhdmVfYWxsOiBib29sPUZhbHNlKVxyXG5gYGBcclxuU2F2ZSB0aGUgcHJlbG9hZGVkIHJlY29yZCB0byB0aGUgZXh0ZXJuYWwgZGF0YWJhc2UuXHJcblxyXG4tICoqUGFyYW1ldGVycyoqOlxyXG4gICAtICoqbmFtZSoqOiBuYW1lIG9mIHRoZSBwcmVsb2FkZWQgcmVjb3JkXHJcbiAgICAtICoqc2F2ZV9hbGwqKjogaWYgdHJ1ZSB0aGVuIGl0J3MgdHJpZXMgdG8gc2F2ZSBhbGwgb2YgdGhlIHByZWxvYWRlZCByZWNvcmRzXHJcbi0gICoqcmV0dXJucyoqIE5vbmVcclxuICAgIFxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNhdmVfYWxsXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuc2F2ZV9hbGwoc2VsZilcclxuYGBgXHJcblxyXG5TYXZlIGFsbCBvZiB0aGUgcHJlbG9hZGVkIHJlY29yZHMgdG8gdGhlIGV4dGVybmFsIGRhdGFiYXNlXHJcbi0gICoqcmV0dXJucyoqIE5vbmUgICAgXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGdldF9leHJlY29yZF9uYW1lc1xyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmdldF9leHJlY29yZF9uYW1lcyhzZWxmKSAtPiBsaXN0XHJcbmBgYFxyXG5cclxuOnJldHVybjogbGlzdCBvZiB0aGUgc2F2ZWQgcmVjb3JkcyBpbiB0aGUgZXh0ZXJuYWwgZGF0YWJhc2VcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGdldF9yZWNvcmRfbmFtZXNcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5nZXRfcmVjb3JkX25hbWVzKHNlbGYsIGxvY2FsX2RhdGFiYXNlOiBib29sPVRydWUpIC0+IGxpc3RcclxuYGBgXHJcblxyXG4qKnBhcmFtKiogbG9jYWxfZGF0YWJhc2U6IGlmIGZhbHNlIHRoZW4gZXh0ZXJuYWwgZGF0YWJhc2Ugd2lsbCBiZSBzZWxlY3RlZFxyXG4qKnJldHVybnMqKjogYSBsaXN0IG9mIHRoZSBzYXZlZCByZWNvcmRzIGluIHRoZSBleHRlcm5hbCBvciBpbnRlcm5hbCBkYXRhYmFzZVxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfbnBlcnNlZ1xyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmdldF9ucGVyc2VnKHNlbGYpXHJcbmBgYFxyXG5cclxuKipyZXR1cm5zKio6ICBudW1iZXIgb2Ygc2FtcGxlcyBwZXIgZWFjaCBkYXRhIGZyYW1lIChzaW5nbGUgY2hhbm5lbClcclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X25jaGFubmVsc1xyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmdldF9uY2hhbm5lbHMoc2VsZilcclxuYGBgXHJcblxyXG4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGF1ZGlibGUgcGVyc3BlY3RpdmUgZGlyZWN0aW9ucyBvciBkaW1lbnNpb25zIG9mIHRoZSBjdXJyZW50IHdyYXBwZWQgcmVjb3JkLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X3NhbXBsZV9yYXRlXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuZ2V0X3NhbXBsZV9yYXRlKHNlbGYpXHJcbmBgYFxyXG5cclxuKipyZXR1cm5zKio6IGN1cnJlbnQgbWFzdGVyIHNhbXBsZSByYXRlXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBzdHJlYW1cclxuXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuc3RyZWFtKHNlbGYsIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogVW5pb25bc3RyLCBXcmFwLCBSZWNvcmQsIFdyYXBHZW5lcmF0b3JdLFxyXG4gICAgICAgICAgICAgICAgICAgIGJsb2NrX21vZGU6IGJvb2w9RmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgc2FmZV9sb2FkOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uX3N0b3A6IGNhbGxhYmxlPU5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9vcF9tb2RlOiBib29sPUZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZV9jYWNoZWRfZmlsZXM9VHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBzdHJlYW1fbW9kZTpTdHJlYW1Nb2RlID0gU3RyZWFtTW9kZS5vcHRpbWl6ZWRcclxuICAgICAgICAgICAgICAgICAgICApIC0+IFN0cmVhbUNvbnRyb2xcclxuYGBgXHJcbidSZWNvcmQnIHBsYXliYWNrIG9uIHRoZSBtYWluc3RyZWFtLlxyXG5cclxuXHJcbi0gKipQYXJhbWV0ZXJzKio6XHJcblxyXG4gIC0gKipyZWNvcmQqKjogcHJlZGVmaW5lZCByZWNvcmQgbmFtZSwgKGN1c3RvbWl6ZWQpIHdyYXBwZWQgcmVjb3JkLCBvciBhICdSZWNvcmQnIG9iamVjdC5cclxuICAtICoqYmxvY2tfbW9kZSoqOiBUaGlzIGNhbiBiZSB0cnVlLCBpbiB3aGljaCBjYXNlIHRoZSBjdXJyZW50IHRocmVhZCB3aWxsIGJlXHJcbiAgICAgIGJsb2NrZWQgYXMgbG9uZyBhcyB0aGUgc3RyZWFtIGlzIGJ1c3kuXHJcbiAgLSAqKnNhZmVfbG9hZCoqOiBsb2FkIGFuIGF1ZGlvIGZpbGUgYW5kIG1vZGlmeSBpdCBhY2NvcmRpbmcgdG8gdGhlICdNYXN0ZXInIGF0dHJpYnV0ZXMobGlrZSB0aGUgZnJhbWUgcmF0ZSwgbnVtYmVyIG9vZiBjaGFubmVscywgZXRjKS5cclxuICAtICoqb25fc3RvcCoqOiBBbiBvcHRpb25hbCBjYWxsYmFjayBpcyBjYWxsZWQgYXQgdGhlIGVuZCBvZiB0aGUgc3RyZWFtaW5nIHByb2Nlc3MuXHJcbiAgLSAqKmxvb3BfbW9kZSoqOiBwbGF5YmFjayBjb250aW51b3VzbHkuXHJcbiAgLSAqKnVzZV9jYWNoZWRfZmlsZXMqKjogZW5hYmxlIGFkZGl0aW9uYWwgY2FjaGUgbWFpbnRhaW5pbmcgcHJvY2Vzcy5cclxuICAtICoqc3RyZWFtX21vZGUqKjogKHNlZSBTdHJlYW1Nb2RlIGVudW0pLlxyXG5cclxuLSAgKipyZXR1cm5zKiogU3RyZWFtQ29udHJvbCBvYmplY3RcclxuICAgIFxyXG5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogVGhlIHJlY29yZGVyIGNhbiBvbmx5IGNhcHR1cmUgbm9ybWFsIHN0cmVhbXMoTm9uLW9wdGltaXplZCBzdHJlYW1zKVxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgbXV0ZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLm11dGUoc2VsZilcclxuYGBgXHJcbm11dGUgdGhlIHN0ZGluIHN0cmVhbSAoZGVmYXVsdClcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHVubXV0ZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLnVubXV0ZShzZWxmKVxyXG5gYGBcclxuZGlzYWJsZSBtdXRlIG1vZGUgb2YgdGhlIHN0ZGluIHN0cmVhbVxyXG5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGVjaG9cclxuXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuZWNobyggIHNlbGYsIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlY29yZDogVW5pb25bV3JhcCwgc3RyLCBSZWNvcmQsIFdyYXBHZW5lcmF0b3JdPU5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiBib29sPU5vbmUsIFxyXG4gICAgICAgICAgICAgICAgICAgIG1haW5fb3V0cHV0X2VuYWJsZTogYm9vbD1GYWxzZSlcclxuYGBgXHJcbnN0YXJ0IHRvIHBsYXkgXCJSZWNvcmRcIiBvbiB0aGUgb3BlcmF0aW5nIHN5c3RlbSdzIGRlZmF1bHQgYXVkaW8gb3V0cHV0LiAgICAgICAgICBcclxuXHJcbi0gKipQYXJhbWV0ZXJzKio6XHJcblxyXG4gIC0gKipyZWNvcmQqKjogb3B0aW9uYWwsIGRlZmF1bHQgTm9uZTtcclxuICAgICAgSXQgY291bGQgYmUgYSBwcmVkZWZpbmVkIHJlY29yZCBuYW1lLCBhIHdyYXBwZWQgcmVjb3JkLFxyXG4gICAgICBvciBhICdSZWNvcmQnIG9iamVjdC5cclxuXHJcbiAgLSAqKmVuYWJsZSoqOiBvcHRpb25hbCwgZGVmYXVsdCBOb25lKHRyaWdnZXIgbW9kZSlcclxuICAgICAgZGV0ZXJtaW5lcyB0aGF0IHRoZSBzdGFuZGFyZCBvdXRwdXQgb2YgdGhlIG1hc3RlciBpcyBlbmFibGUgb3Igbm90LlxyXG5cclxuICAtICoqbWFpbl9vdXRwdXRfZW5hYmxlKio6XHJcbiAgICAgIHdoZW4gdGhlICdyZWNvcmQnIGlzIG5vdCBOb25lLCBjb250cm9scyB0aGUgc3RhbmRhcmQgb3V0cHV0IGFjdGl2aXR5IG9mIHRoZSBtYXN0ZXJcclxuXHJcbi0gICoqcmV0dXJucyoqIHNlbGYgb2JqZWN0XHJcbiAgICBcclxuXHJcbjptZW1vOiAqKk5vdGU6KiogSWYgdGhlICdyZWNvcmQnIGFyZ3VtZW50IHRha2VzIHRoZSB2YWx1ZSBOb25lLCB0aGUgbWV0aG9kIGNvbnRyb2xzIHRoZSBzdGFuZGFyZCBvdXRwdXQgYWN0aXZpdHkgb2YgdGhlIG1hc3RlciB3aXRoIHRoZSAnZW5hYmxlJyBhcmd1bWVudC5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogSWYgdGhlICdyZWNvcmQnIGFyZ3VtZW50IHRha2VzIHRoZSB2YWx1ZSBOb25lLCB0aGUga2VybmVsIHN0YXJ0cyBzdHJlYW1pbmcgdGhlIHN0ZCBpbnB1dCB0byB0aGUgc3RkIG91dHB1dC5cclxuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyB3cmFwXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIud3JhcChzZWxmLCByZWNvcmQ6IFVuaW9uW3N0ciwgUmVjb3JkXSlcclxuYGBgXHJcblxyXG5DcmVhdGUgYSBXcmFwIG9iamVjdC5cclxuXHJcbioqcGFyYW0qKiByZWNvcmQ6IHByZWxvYWRlZCByZWNvcmQgb3IgYSBSZWNvcmQgb2JqZWN0XHJcbioqcmV0dXJucyoqOiBXcmFwIG9iamVjdFxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBjbGVhbl9jYWNoZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLmNsZWFuX2NhY2hlKHNlbGYpXHJcbmBgYFxyXG5cclxuVGhlIGF1ZGlvIGRhdGEgbWFpbnRhaW5pbmcgcHJvY2VzcyBoYXMgYWRkaXRpb25hbCBjYWNoZWQgZmlsZXMgdG8gcmVkdWNlIGR5bmFtaWMgbWVtb3J5IHVzYWdlIGFuZCBpbXByb3ZlIHBlcmZvcm1hbmNlLCBtZWFuaW5nIHRoYXQsIFRoZSBhdWRpbyBkYXRhIHN0b3JhZ2UgbWV0aG9kcyBjYW4gaGF2ZSBkaWZmZXJlbnQgZXhlY3V0aW9uIHRpbWVzIGJhc2VkIG9uIHRoZSBjYWNoZWQgZmlsZXMuIFRoaXMgZnVuY3Rpb24gdXNlZCB0byBjbGVhbiBhZGRpdGlvbmFsIGNhY2hlZCBmaWxlcy5cclxuXHJcbioqcmV0dXJucyoqOiBzZWxmIG9iamVjdFxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBhZGRfcGlwZWxpbmVcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5hZGRfcGlwZWxpbmUoICBzZWxmLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0ciwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXA6IFVuaW9uW1BpcGVsaW5lLCBsaXN0XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2Nlc3NfdHlwZTogc3RyPSdtYWluJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFubmVsOiBpbnQ9Tm9uZSlcclxuXHJcbmBgYFxyXG5cclxuQWRkIGEgbmV3IHByb2Nlc3MgcGlwZWxpbmUgdG8gdGhlIG1hc3RlciBvYmplY3QuXHJcblxyXG4tICoqUGFyYW1ldGVycyoqOlxyXG5cclxuICAtICoqbmFtZSoqOiBzdHJpbmc7IHJlcHJlc2VudHMgdGhlIG5ldyBwaXBlbGluZVxyXG4gICAgIDxici8+XHJcbiAgXHJcbiAgLSAqKnBpcCoqOiBvYmo7IFBpcGVsaW5lIG9iamVjdC9zXHJcbiAgICAgICAgICAgICBJbiB0aGUgbXVsdGlfc3RyZWFtIHByb2Nlc3MgdHlwZSwgdGhpcyBhcmd1bWVudCBtdXN0IGJlIGEgbGlzdCBvZiB0aGUgZGVmaW5lZCBwaXBlbGluZXMsIHdpdGggdGhlIHNpemUgZXF1YWwgdG8gdGhlIG5jaGFubmVsLlxyXG4gICAgIDxici8+XHJcblxyXG4gIC0gKipwcm9jZXNzX3R5cGUqKjogc3RyaW5nOyAnbWFpbicsICdicmFuY2gnLCAnbXVsdGlfc3RyZWFtJ1xyXG4gICAgIFRoZSBzdWRpbyBrZXJuZWwgaW5qZWN0IGF1ZGlvIGRhdGEgdG8gdGhlIGFjdGl2YXRlZCBwaXBlbGluZVtpZiBleGlzdF0gYW5kIGFsbCBvZiB0aGUgYnJhbmNoIHR5cGUgcGlwZWxpbmVzIHRoZW4gdGFrZXMgb3V0cHV0IGZyb20gdGhlIHByaW1hcnkgb25lLlxyXG4gICAgIFxyXG4gICAgIDxiciAvPlxyXG5cclxuICAgICA6bWVtbzogKipOb3RlOioqIFVzZSBzZXRfcGlwZWxpbmUgdG8gYWN0aXZhdGUgYSBtYWluIGJyYW5jaCBvciBhIG11bHRpX3N0cmVhbSBvbmUuXHJcbiAgICAgPGJyIC8+XHJcblxyXG4gICAgIDptZW1vOiAqKk5vdGU6KiogQSBicmFuY2ggcGlwZWxpbmUgaXMgdXNlZCBmb3IgZGF0YSBtb25pdG9yaW5nKEdVSSkgcHVycG9zZXMuXHJcblxyXG4gICAgIDxici8+XHJcbiAgICAgICAgXHJcblxyXG4gIC0gKipjaGFubmVsKio6IG9iajsgTm9uZSBvciBbMCB0byBuY2hhbm5lbF07IGp1c3QgYWN0aXZhdGVkIGluIGJyYW5jaGVkIHBpcGVsaW5lcztcclxuXHJcbiAgICAgVGhlIGlucHV0ICBkYXRhIHBhc3NlZCB0byBhIHBpcGVsaW5lIGNhbiBiZSBhbiBudW1weSBhcnJheSB3aXRoIHRoZSBzaGFwZSBvZiB0aGUgKG51bWJlciBvZiB0aGUgYXVkaW8gY2hhbm5lbHMsIDIgW251bWJlciBvZiB0aGUgd2luZG93cyBwZXIgZWFjaCBmcmFtZV0sIG5wZXJzZWcpIChpbiBtb25vIG1vZGUgKDIsIHNlbGYuX25wZXJzZWcpKS5cclxuICAgICA8YnIvPlxyXG5cclxuOm1lbW86ICoqTm90ZToqKiB0aGUgIHBpcGVsaW5lIHVzZWQgdG8gcHJvY2VzcyBkYXRhIGFuZCByZXR1cm4gaXQgdG8gdGhlIGtlcm5lbCB3aXRoIHRoZSAgZGltZW5zaW9ucyBhcyBzYW1lIGFzIHRoZSBpbnB1dC5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogRWFjaCBwaXBlbGluZSB1c2VkIHRvIHByb2Nlc3MgZGF0YSBpbiBkaWZmZXJlbnQgdGhyZWFkcywgc28gdGhlIHRoZSBwZXJmb3JtYW5jZSB3aWxsIGJlIGltcHJvdmVkLiBcclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgc2V0X3BpcGVsaW5lXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuc2V0X3BpcGVsaW5lKHNlbGYsIG5hbWU6IHN0ciwgZW5hYmxlOiBib29sPVRydWUpXHJcbmBgYFxyXG5cclxuYWN0aXZhdGUgdGhlIHJlZ2lzdGVyZWQgcGlwZWxpbmUgb24gdGhlIHByb2Nlc3Mgc3RyZWFtLiBcclxuXHJcbi0gKipQYXJhbWV0ZXJzKio6XHJcblxyXG4gIC0gKipuYW1lKio6IHN0cmluZzsgQSBuYW1lIHRoYXQgcmVwcmVzZW50cyB0aGUgbmV3IHBpcGVsaW5lXHJcbiAgLSAqKmVuYWJsZSoqOiBib29sOyBzdGF0ZSBvZiB0aGUgcHJpbWFyeSBwaXBlbGluZS5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogT25seSBtdWx0aV9zdHJlYW0gYW5kIG1haW4gYnJhbmNoZXMgYXJlIGFsbG93ZWQgZm9yIGFjdGl2YXRpb24uXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNldF93aW5kb3dcclxuXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuc2V0X3dpbmRvdyhzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3c6IG9iamVjdCA9ICdoYW5uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm92ZXJsYXA6IGludCA9IE5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5PTEFfY2hlY2s6IGJvb2wgPSBUcnVlKVxyXG5gYGBcclxuICAgICAgXHJcbmNoYW5nZSB0eXBlIG9mIHRoZSBjdXJyZW50IHByb2Nlc3Npbmcgd2luZG93LlxyXG5cclxuLSAqKlBhcmFtZXRlcnMqKjpcclxuXHJcbiAgLSAqKndpbmRvdyoqOiBzdHJpbmcsIGZsb2F0LCB0dXBsZSwgbmRhcnJheSwgb3B0aW9uYWxcclxuICAgIFRoZSB0eXBlIG9mIHdpbmRvdywgdG8gY3JlYXRlIChzdHJpbmcpIG9yIHByZSBkZXNpZ25lZCB3aW5kb3cgaW4gbnVtcHkgYXJyYXkgZm9ybWF0LiB1c2UgTm9uZSB0byBkaXNhYmxlIHdpbmRvd2luZyBwcm9jZXNzLlxyXG4gICAgRGVmYXVsdCAoXCIqKmhhbm4qKlwiKSBIYW5uaW5nIGZ1bmN0aW9uLlxyXG5cclxuICAtICoqbm92ZXJsYXAqKjogaW50LCBkZWZhdWx0IE5vbmVcclxuXHJcbiAgICBUaGUgbm92ZXJsYXAgZGVmaW5lcyB0aGUgbnVtYmVyIG9mIG92ZXJsYXAgYmV0d2VlbiBkZWZpbmVkIHdpbmRvd3MuIElmIG5vdCBnaXZlbiB0aGVuIGl0J3MgdmFsdWUgd2lsbCBiZSBzZWxlY3RlZCBhc1xyXG4gICAgXHJcbiAgICBgYGBtYXRoXHJcbiAgICBTRSA9IFxcZnJhY3tucGVyc2VnfXsyfS5cclxuICAgIGBgYFxyXG5cclxuICAgIFdoZW4gdGhlIGxlbmd0aCBvZiBhIGRhdGEgc2V0IHRvIGJlIHRyYW5zZm9ybWVkIGlzIGxhcmdlciB0aGFuIG5lY2Vzc2FyeSB0byBwcm92aWRlIHRoZSBkZXNpcmVkIGZyZXF1ZW5jeSByZXNvbHV0aW9uLCBhIGNvbW1vbiBwcmFjdGljZSBpcyB0byBzdWJkaXZpZGUgaXQgaW50byBzbWFsbGVyIHNldHMgYW5kIHdpbmRvdyB0aGVtIGluZGl2aWR1YWxseS5cclxuXHJcbiAgICBUbyBtaXRpZ2F0ZSB0aGUgXCJsb3NzXCIgYXQgdGhlIGVkZ2VzIG9mIHRoZSB3aW5kb3csIHRoZSBpbmRpdmlkdWFsIHNldHMgbWF5IG92ZXJsYXAgaW4gdGltZS5cclxuXHJcbiAgLSAqKk5PTEFfY2hlY2sqKjogYm9vbCwgb3B0aW9uYWxcclxuICAgIENoZWNrIHdoZXRoZXIgdGhlIE5vbnplcm8gT3ZlcmxhcCBBZGQgKE5PTEEpIGNvbnN0cmFpbnQgaXMgbWV0LihJZiB0cnVlKVxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIFN0cmVhbUNvbnRyb2xcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5TdHJlYW1Db250cm9sXHJcbmBgYFxyXG5cclxuVGhlIFN0cmVhbUNvbnRyb2wgY2xhc3MgdXNlZCB0byBjb250cm9sIGRhdGEgZmxvdyBvZiBhbiBhdWRpbyByZWNvcmQgKGxpdmUgY29udHJvbCBvbiBhdWRpbyBzdHJlYW1pbmcpLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIE1ldGhvZHNcclxuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBpc3JlYWR5XHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuU3RyZWFtQ29udHJvbC5pc3JlYWR5KClcclxuYGBgXHJcbmNoZWNrIGN1cnJlbnQgc3RyZWFtIGNvbXBhdGliaWxpdHkgd2l0aCB0aGUgTWFzdGVyIG9iamVjdCBhbmQgcmV0dXJuIHRydWUgb24gcmVhZHkgdG8gc3RyZWFtaW5nLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgaXNfc3RyZWFtaW5nXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuU3RyZWFtQ29udHJvbC5pc19zdHJlYW1pbmcoKVxyXG5gYGBcclxuXHJcbnJldHVybiB0cnVlIGlmIGN1cnJlbnQgc3RyZWFtIHdhcyBzdGFydGVkIGJlZm9yZS4gXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHN0YXJ0XHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuU3RyZWFtQ29udHJvbC5zdGFydCgpXHJcbmBgYFxyXG5cclxuY2hlY2sgY3VycmVudCBzdHJlYW0gY29tcGF0aWJpbGl0eSB3aXRoIHRoZSBNYXN0ZXIgb2JqZWN0IGFuZCBzdGFydCB0byBzdHJlYW1pbmcuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHJlc3VtZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLlN0cmVhbUNvbnRyb2wucmVzdW1lKClcclxuYGBgXHJcblxyXG5yZXN1bWUgY3VycmVudCBzdHJlYW1pbmcgaWYgY3VycmVudCBzdHJlYW0gd2FzIHBhdXNlZC5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgc3RvcFxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLlN0cmVhbUNvbnRyb2wuc3RvcCgpXHJcbmBgYFxyXG5zdG9wIGN1cnJlbnQgc3RyZWFtaW5nIGlmIGN1cnJlbnQgc3RyZWFtIGlzIGFjdGl2YXRlZC5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHBhdXNlXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuU3RyZWFtQ29udHJvbC5wYXVzZSgpXHJcbmBgYFxyXG5cclxucGF1c2UgY3VycmVudCBzdHJlYW1pbmcgaWYgY3VycmVudCBzdHJlYW0gaXMgYWN0aXZhdGVkLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZW5hYmxlX2xvb3BcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLk1hc3Rlci5TdHJlYW1Db250cm9sLmVuYWJsZV9sb29wKClcclxuYGBgXHJcblxyXG5lbmFibGUgdG8gcmVzdGFydCBhdCB0aGUgZW5kIG9mIHN0cmVhbWluZy4gXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGRpc2FibGVfbG9vcFxyXG5cclxuYGBgcHlcclxuc3VkaW8uTWFzdGVyLlN0cmVhbUNvbnRyb2wuZGlzYWJsZV9sb29wKClcclxuYGBgXHJcblxyXG5kaXNhYmxlIGF1ZGlvIHN0cmVhbWluZyBsb29wIG1vZGUuXHJcblxyXG48YnIgLz5cclxuXHJcblxyXG4jIyMjIFByb3BlcnRpZXNcclxuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyB0aW1lXHJcblxyXG5gYGBweVxyXG5zdWRpby5NYXN0ZXIuU3RyZWFtQ29udHJvbC50aW1lXHJcbmBgYFxyXG5cclxuIyMjIyMjIEdldHRlclxyXG5cclxudXNlZCB0byByZXRyaXZlIGVsYXBzZWQgdGltZSBvZiB0aGUgY3VycmVudCBzdHJlYW1lZCByZWNvcmQuXHJcblxyXG4jIyMjIyMgU2V0dGVyXHJcblxyXG5TZXQgdGhlIGN1cnJlbnQgdGltZSBvZiBzdHJlYW1lZCByZWNvcmQuXHJcblxyXG5cclxuPGJyIC8+XHJcbjxiciAvPlxyXG5cclxuIyMjIFdyYXBHZW5lcmF0b3JcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3Ioc2VsZiwgbWFzdGVyOiBNYXN0ZXIsIHJlY29yZDogVW5pb25bc3RyLCBwZC5TZXJpZXNdKVxyXG5gYGBcclxuXHJcbkdlbmVyYXRlcyBhIFdyYXAgb2JqZWN0LCB3aGljaCB3cmFwcyB0aGUgcmF3IHJlY29yZC5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMgTWV0aG9kc1xyXG5cclxuXHJcblxyXG4jIyMjIyBnZXRfc2FtcGxlX2Zvcm1hdFxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5nZXRfc2FtcGxlX2Zvcm1hdChzZWxmKSAtPiBTYW1wbGVGb3JtYXRcclxuYGBgXHJcbiBSZXR1cm5zIHNhbXBsZSBmb3JtYXQgb2YgdGhlIGN1cnJlbnQgZ2VuZXJhdG9yLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfc2FtcGxlX3dpZHRoXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLmdldF9zYW1wbGVfd2lkdGgoc2VsZikgLT4gaW50XHJcbmBgYFxyXG4gUmV0dXJucyBzYW1wbGUgd2lkdGggb2YgdGhlIGN1cnJlbnQgd3JhcHBlZCByZWNvcmQuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfbWFzdGVyXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLmdldF9tYXN0ZXIoc2VsZikgLT4gTWFzdGVyXHJcbmBgYFxyXG5cclxuIFJldHVybnMgdGhlIE1hc3RlciBvYmplY3Qgb2YgdGhlIGN1cnJlbnQgZ2VuZXJhdG9yLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X3NpemVcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3IuZ2V0X3NpemUoc2VsZikgLT4gaW50XHJcbmBgYFxyXG5cclxuUmV0dXJucyBzaXplIG9mIHRoZSBjdXJyZW50bHkgcHJvY2Vzc2VkIHJlY29yZCBvbiBub24tdm9sYXRpbGUgbWVtb3J5LlxyXG5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogV3JhcHBlZCBvYmplY3RzIG5vcm1hbGx5IHN0b3JlZCBzdGF0aWNhbGx5LCBzbyBhbGwgb2YgdGhlIGNhbGN1bGF0aW9ucyBuZWVkIGFkZGl0aW9uYWwgSU8gcmVhZC93cml0ZSB0aW1lLCBUaGlzIGRlY3Jlc2UgZHluYW1pYyBtZW1vcnkgdXNhZ2Ugc3BlY2ljYWxseSBmb3IgYmlnIGF1ZGlvIGRhdGEuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGdldF9jYWNoZV9zaXplXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLmdldF9jYWNoZV9zaXplKHNlbGYpIC0+IGludFxyXG5gYGBcclxuXHJcblJldHVybnMgc2l6ZSBvZiBjYWNoZWQgZmlsZSBvbiBub24tdm9sYXRpbGUgbWVtb3J5LlxyXG5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogV3JhcHBlZCBvYmplY3RzIG5vcm1hbGx5IHN0b3JlZCBzdGF0aWNhbGx5LCBzbyBhbGwgb2YgdGhlIGNhbGN1bGF0aW9ucyBuZWVkIGFkZGl0aW9uYWwgSU8gcmVhZC93cml0ZSB0aW1lLCBUaGlzIGRlY3Jlc2UgZHluYW1pYyBtZW1vcnkgdXNhZ2Ugc3BlY2ljYWxseSBmb3IgYmlnIGF1ZGlvIGRhdGEuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGdldF9uY2hhbm5lbHNcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3IuZ2V0X25jaGFubmVscyhzZWxmKSAtPiBpbnRcclxuYGBgXHJcblxyXG4gUmV0dXJucyB0aGUgbnVtYmVyIG9mIGF1ZGlibGUgcGVyc3BlY3RpdmUgZGlyZWN0aW9ucyBvciBkaW1lbnNpb25zIG9mIHRoZSBjdXJyZW50IHdyYXBwZWQgcmVjb3JkLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfZnJhbWVfcmF0ZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5nZXRfZnJhbWVfcmF0ZShzZWxmKSAtPiBpbnRcclxuYGBgXHJcblxyXG5SZXR1cm5zIGZyYW1lIHJhdGUgb2YgdGhlIGN1cnJlbnQgd2FycHBlZCByZWNvcmQuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGdldF9kdXJhdGlvblxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5nZXRfZHVyYXRpb24oc2VsZikgLT4gZmxvYXRcclxuYGBgXHJcblxyXG5SZXR1cm5zIHRoZSBkdXJhdGlvbiBvZiB0aGUgcHJvdmlkZWQgYXVkaW8gcmVjb3JkLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBqb2luXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLmpvaW4oc2VsZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgKm90aGVyOiBVbmlvbltXcmFwLCBXcmFwR2VuZXJhdG9yXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3luY19zYW1wbGVfZm9ybWF0OiBTYW1wbGVGb3JtYXQgPSBOb25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzeW5jX25jaGFubmVsczogaW50ID0gTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3luY19zYW1wbGVfcmF0ZTogaW50ID0gTm9uZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9sb2FkOiBib29sID0gVHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIC0+IFdyYXBcclxuYGBgXHJcblxyXG5SZXR1cm5zIGEgbmV3IHdyYXBwZWQgcmVjb3JkIGJ5IGpvaW5pbmcgYW5kIHN5bmNocm9uaXppbmcgYWxsIHRoZSBlbGVtZW50cyBvZiB0aGUgJ290aGVyJyBpdGVyYWJsZSAoV3JhcCwgV3JhcEdlbmVyYXRvciksIHNlcGFyYXRlZCBieSB0aGUgZ2l2ZW4gc2VwYXJhdG9yLlxyXG5cclxuLSAqKnBhcmFtZXRlcnMqKjpcclxuXHJcbiAgLSAqKm90aGVyKio6IHdyYXBwZWQgcmVjb3JkXFxzLiBcclxuICAtICoqc3luY19uY2hhbm5lbHMqKjogbnVtYmVyIG9mIGNoYW5uZWxzOyBpZiB0aGUgdmFsdWUgaXMgTm9uZSwgdGhlIHRhcmdldCB3aWxsIGJlIHN5bmNlZCBcclxuICAtICoqc3luY19zYW1wbGVfZm9ybWF0Kio6IGlmIHRoZSB2YWx1ZSBpcyBOb25lLCB0aGUgdGFyZ2V0IHdpbGwgYmUgc3luY2VkIHRvIHRoZSBtYXN0ZXIgcHJvcGVydGllcy5cclxuICAtICoqc3luY19zYW1wbGVfcmF0ZSoqOiBzYW1wbGUgcmF0ZTsgaWYgdGhlIHZhbHVlIGlzIE5vbmUsIHRoZSB0YXJnZXQgd2lsbCBiZSBjb21wYXJlZCB0byB0aGUgbWFzdGVyIHByb3BlcnRpZXMuXHJcbiAgLSAqKnNhZmVfbG9hZCoqOiBsb2FkIGFuIGF1ZGlvIGZpbGUgYW5kIG1vZGlmeSBpdCBhY2NvcmRpbmcgdG8gdGhlICdNYXN0ZXInIGF0dHJpYnV0ZXMobGlrZSB0aGUgZnJhbWUgcmF0ZSwgbnVtYmVyIG9vZiBjaGFubmVscywgZXRjKS5cclxuLSAgKipyZXR1cm5zKiogbmV3IFdyYXAgb2JqZWN0LlxyXG5cclxuPGJyIC8+XHJcblxyXG5cclxuXHJcbiMjIyMgTWFnaWMgbWV0aG9kc1xyXG5cclxuXHJcblxyXG5cclxuIyMjIyMgZ2V0aXRlbVxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5fX2dldGl0ZW1fXyhzZWxmLCBpdGVtKSAtPiBXcmFwXHJcbmBgYFxyXG5cclxuKipTbGljaW5nKiogOiBcclxuVGhlIFdyYXBwZWQgb2JqZWN0IGNhbiBiZSBzbGljZWQgdXNpbmcgdGhlIHN0YW5kYXJkIFB5dGhvbiB4W3N0YXJ0OiBzdG9wOiBzdGVwXSBzeW50YXgsIHdoZXJlIHggaXMgdGhlIHdyYXBwZWQgb2JqZWN0LlxyXG5cclxuICBTbGljaW5nIHRoZSAqKnRpbWUgZG9tYWluKio6ICBcclxuXHJcbiAgVGhlIGJhc2ljIHNsaWNlIHN5bnRheCBpcyBcclxuICBgYGBtYXRoXHJcbiAgW2k6IGo6IGssIGkoMik6IGooMik6IGsoMiksIGkobik6IGoobik6IGsobildIFxyXG4gIGBgYFxyXG4gIFxyXG4gIHdoZXJlIGkgaXMgdGhlIHN0YXJ0IHRpbWUsIGogaXMgdGhlIHN0b3AgdGltZSBpbiBpbnRlZ2VyIG9yIGZsb2F0IHR5cGVzIGFuZCBrIGlzIHRoZSBzdGVwKG5lZ2F0aXZlIG51bWJlciBmb3IgaW52ZXJzaW5nKS5cclxuICBUaGlzIHNlbGVjdHMgdGhlIG5YbSBzZWNvbmRzIHdpdGggaW5kZXggdGltZXMgXHJcbiAgYGBgcHlcclxuICBpLCBpKzEsIGkrMiwgLi4uLCBqLCBpKDIpLCBpKDIpKzEsIC4uLiwgaigyKSwgaShuKSwgLi4uLCBqKG4pXHJcbiAgaiB3aGVyZSBtID0gaiAtIGkgKGogPiBpKS5cclxuICBgYGBcclxuXHJcbiAgOm1lbW86ICoqTm90ZToqKiBmb3IgaSA8IGosIGkgaXMgdGhlIHN0b3AgdGltZSBhbmQgaiBpcyB0aGUgc3RhcnQgdGltZSwgbWVhbnMgdGhhdCBhdWRpbyBkYXRhIHJlYWQgaW52ZXJzZWx5LlxyXG5cclxuICAqKkZpbHRlcmluZyoqIChTbGljaW5nIHRoZSBmcmVxdWVuY3kgZG9tYWluKTogIFxyXG5cclxuICBUaGUgYmFzaWMgc2xpY2Ugc3ludGF4IGlzIFxyXG4gIFxyXG4gIFxyXG4gIGBgYHB5XHJcbiAgWydpJzogJ2onOiAnZmlsdGVyaW5nIG9wdGlvbnMnLCAnaSgyKSc6ICdqKDIpJzogJ29wdGlvbnMoMiknLCAuLi4sICdpKG4pJzogJ2oobiknOiAnb3B0aW9ucyhuKSddXHJcbiAgYGBgXHJcblxyXG4gIHdoZXJlIGkgaXMgdGhlIHN0YXJ0aW5nIGZyZXF1ZW5jeSBhbmQgaiBpcyB0aGUgc3RvcHBpbmcgZnJlcXVlbmN5IHdpdGggdHlwZSBvZiBzdHJpbmcgaW4gdGhlIHNhbWUgdW5pdHMgYXMgZnMgdGhhdCBmcyBpcyAyIGhhbGYtY3ljbGVzL3NhbXBsZS5cclxuICBUaGlzIGFjdGl2YXRlcyBuIG51bWJlciBvZiBpaXIgZmlsdGVycyB3aXRoIHNwZWNpZmllZCBmcmVxdWVuY2llcyBhbmQgb3B0aW9ucy5cclxuXHJcbiAgRm9yIHRoZSBzbGljZSBzeW50YXggW3g6IHk6IG9wdGlvbnNdIHdlIGhhdmU6XHJcbiAgLSB4PSBOb25lLCB5PSAnaic6IGxvdyBwYXNzIGZpbHRlciB3aXRoIGEgY3V0b2ZmIGZyZXF1ZW5jeSBvZiB0aGUgalxyXG4gIC0geD0gJ2knLCB5PSBOb25lOiBoaWdoIHBhc3MgZmlsdGVyIHdpdGggYSBjdXRvZmYgZnJlcXVlbmN5IG9mIHRoZSBpXHJcbiAgLSB4PSAnaScsIHk9ICdqJzogYmFuZHBhc3MgZmlsdGVyIHdpdGggdGhlIGNyaXRpY2FsIGZyZXF1ZW5jaWVzIG9mIHRoZSBpLCBqXHJcbiAgLSB4PSAnaScsIHk9ICdqJywgb3B0aW9ucz0nc2NhbGU9W0FueSBuZWdhdGl2ZSBudW1iZXJdJzogYmFuZHN0b3AgZmlsdGVyIHdpdGggdGhlIGNyaXRpY2FsIGZyZXF1ZW5jaWVzIG9mIHRoZSBpLCBqXHJcblxyXG4gICoqRmlsdGVyaW5nKiogb3B0aW9uczpcclxuICAtIGZ0eXBlOiBvcHRpb25hbDsgVGhlIHR5cGUgb2YgSUlSIGZpbHRlciB0byBkZXNpZ246XFxuXHJcbiAgICAtIEJ1dHRlcndvcnRoIDogw6LigqzLnGJ1dHRlcsOi4oKs4oSiKGRlZmF1bHQpXHJcbiAgICAtIENoZWJ5c2hldiBJIDogw6LigqzLnGNoZWJ5McOi4oKs4oSiXHJcbiAgICAtIENoZWJ5c2hldiBJSSA6IMOi4oKsy5xjaGVieTLDouKCrOKEolxyXG4gICAgLSBDYXVlci9lbGxpcHRpYzogw6LigqzLnGVsbGlww6LigqzihKJcclxuICAgIC0gQmVzc2VsL1Rob21zb246IMOi4oKsy5xiZXNzZWzDouKCrOKEolxyXG4gIC0gcnM6IGZsb2F0LCBvcHRpb25hbDpcXG5cclxuICAgIEZvciBDaGVieXNoZXYgYW5kIGVsbGlwdGljIGZpbHRlcnMsIHByb3ZpZGVzIHRoZSBtaW5pbXVtIGF0dGVudWF0aW9uIGluIHRoZSBzdG9wIGJhbmQuIChkQilcclxuICAtIHJwOiBmbG9hdCwgb3B0aW9uYWw6XFxuXHJcbiAgICBGb3IgQ2hlYnlzaGV2IGFuZCBlbGxpcHRpYyBmaWx0ZXJzLCBwcm92aWRlcyB0aGUgbWF4aW11bSByaXBwbGUgaW4gdGhlIHBhc3NiYW5kLiAoZEIpXHJcbiAgLSBvcmRlcjogVGhlIG9yZGVyIG9mIHRoZSBmaWx0ZXIuKGRlZmF1bHQgNSlcclxuICAtIHNjYWxlOiBbZmxvYXQsIGludF0gb3B0aW9uYWw7IFRoZSBhdHRlbnVhdGlvbiBvciBBbXBsaWZpY2F0aW9uIGZhY3RvcixcclxuICAgIHRoYXQgaW4gdGhlIGJhbmRzdG9wIGZpbHRlciBtdXN0IGJlIGEgbmVnYXRpdmUgbnVtYmVyLlxyXG5cclxuICAqKkNvbXBsZXgqKiBzbGljaW5nOlxyXG4gIFRoZSBiYXNpYyBzbGljZSBzeW50YXggaXMgXHJcbiAgXHJcbiAgYGBgcHlcclxuICBbYTogYiwgJ2knOiAnaic6ICdmaWx0ZXJpbmcgb3B0aW9ucycsIC4uLiwgJ2kobiknOiAnaihuKSc6ICdvcHRpb25zKG4pJywgLi4uLCBhKG4pOiBiKG4pLCAnaSc6ICdqJzogJ29wdGlvbnMnLCAuLi4sICdpKG4pJzogJ2oobiknOiAnb3B0aW9ucyhuKSddIFxyXG4gIGBgYFxyXG5cclxuICBvclxyXG5cclxuICBgYGBweVxyXG4gIFthOiBiLCBbRmlsdGVyIGJsb2NrIDEpXSwgYSgyKTogYigyKSwgW0ZpbHRlciBibG9jayAyXSAgLi4uICwgYShuKTogYihuKSwgW0ZpbHRlciBibG9jayBuXV1cclxuICBgYGBcclxuXHJcbiAgV2hlcmUgaSBpcyB0aGUgc3RhcnRpbmcgZnJlcXVlbmN5LCBqIGlzIHRoZSBzdG9wcGluZyBmcmVxdWVuY3ksIGEgaXMgdGhlIHN0YXJ0aW5nIHRpbWUgYW5kIGIgaXMgdGhlIHN0b3BwaW5nIHRpbWUgaW4gc2Vjb25kcy4gVGhpcyBhY3RpdmF0ZXMgbiBudW1iZXIgb2YgZmlsdGVyIGJsb2NrcyBbZGVzY3JpYmVkIGluIHRoZSBmaWx0ZXJpbmcgc2VjdGlvbl0gdGhhdCBlYWNoIG9mIHRoZW0gb3BlcmF0ZXMgd2l0aGluIGEgcHJlZGV0ZXJtaW5lZCB0aW1lIHJhbmdlLlxyXG5cclxubm90ZTpcclxuICBUaGUgc2xpY2VkIG9iamVjdCBpcyBzdG9yZWQgc3RhdGljYWxseSBzbyBjYWxsaW5nIHRoZSBvcmlnaW5hbCB3cmFwcGVkIHJldHVybnMgVGhlIHNsaWNlZCBvYmplY3QuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBkZWxcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3IuX19kZWxfXyhzZWxmKVxyXG5gYGBcclxuXHJcbkRlbGV0ZSB0aGUgY3VycmVudCBvYmplY3QgYW5kIGl0cyBkZXBlbmRlbmNpZXMgKGNhY2hlZCBmaWxlcywgZXRjLilcclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgc3RyXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLl9fc3RyX18oc2VsZilcclxuYGBgXHJcblxyXG5SZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgY3VycmVudCBvYmplY3RcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIG11bFxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5fX211bF9fKHNlbGYsIHNjYWxlKSAtPiBXcmFwXHJcbmBgYFxyXG5cclxuUmV0dXJucyBhIG5ldyBXcmFwIG9iamVjdCwgc2NhbGluZyB0aGUgZGF0YSBvZiB0aGUgY3VycmVudCByZWNvcmQuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHRydWVkaXZcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3IuX190cnVlZGl2X18oc2VsZiwgc2NhbGUpXHJcbmBgYFxyXG5cclxuUmV0dXJucyBhIG5ldyBXcmFwIG9iamVjdCwgZGl2aWRpbmcgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgcmVjb3JkLlxyXG5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHBvd1xyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5fX3Bvd19fKHNlbGYsIHBvd2VyLCBtb2R1bG89Tm9uZSlcclxuYGBgXHJcblxyXG5SZXR1cm5zIGEgbmV3IFdyYXAgb2JqZWN0LCBzY2FsaW5nIHRoZSBkYXRhIG9mIHRoZSBjdXJyZW50IHJlY29yZC5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGFkZFxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcEdlbmVyYXRvci5fX2FkZF9fKHNlbGYsIG90aGVyOlVuaW9uW1dyYXAsIFdyYXBHZW5lcmF0b3IsIGludCwgZmxvYXRdKVxyXG5gYGBcclxuXHJcbmlmIHRoZSAnb3RoZXInIHBhcmFtZXRlciBpcyBhIFdyYXBHZW5lcmF0b3Igb3IgYSBXcmFwIG9iamVjdCB0aGlzIG1ldGhvZCBqb2lucyB0aGUgY3VycmVudCBvYmplY3QgdG8gdGhlIG90aGVyIG9uZSwgb3RoZXJ3aXNlIHRoaXMgbWV0aG9kIHVzZWQgdG8gIFJldHVybiBhIG5ldyBXcmFwIG9iamVjdCwgc2NhbGluZyB0aGUgZGF0YSBvZiB0aGUgY3VycmVudCByZWNvcmQuIFxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgc3ViXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwR2VuZXJhdG9yLl9fc3ViX18oc2VsZiwgb3RoZXI6IFVuaW9uW2Zsb2F0LCBpbnRdKVxyXG5gYGBcclxuUmV0dXJucyBhIG5ldyBXcmFwIG9iamVjdCwgc3VidHJhY3RpbmcgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgcmVjb3JkLiBcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGNhbGxcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXBHZW5lcmF0b3IuX19jYWxsX18oc2VsZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICphcmdzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY19zYW1wbGVfZm9ybWF0X2lkOiBpbnQgPSBOb25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3luY19uY2hhbm5lbHM6IGludCA9IE5vbmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jX3NhbXBsZV9yYXRlOiBpbnQgPSBOb25lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZV9sb2FkOiBib29sID0gVHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSAtPiBXcmFwXHJcbmBgYFxyXG5TeW5jaHJvbml6ZSB0aGUgY3VycmVudCBvYmplY3Qgd2l0aCB0aGUgbWFzdGVyIChvcHRpb25hbCkgYW5kIGNyZWF0ZSBhIG5ldyBXcmFwIG9iamVjdC5cclxuXHJcbi0gKipwYXJhbWV0ZXJzKio6XHJcblxyXG4gIC0gKipzeW5jX25jaGFubmVscyoqOiBudW1iZXIgb2YgY2hhbm5lbHM7IGlmIHRoZSB2YWx1ZSBpcyBOb25lLCB0aGUgdGFyZ2V0IHdpbGwgYmUgc3luY2VkIFxyXG4gIC0gKipzeW5jX3NhbXBsZV9mb3JtYXRfaWQqKjogaWYgdGhlIHZhbHVlIGlzIE5vbmUsIHRoZSB0YXJnZXQgd2lsbCBiZSBzeW5jZWQgdG8gdGhlIG1hc3RlciBwcm9wZXJ0aWVzLlxyXG4gIC0gKipzeW5jX3NhbXBsZV9yYXRlKio6IHNhbXBsZSByYXRlOyBpZiB0aGUgdmFsdWUgaXMgTm9uZSwgdGhlIHRhcmdldCB3aWxsIGJlIGNvbXBhcmVkIHRvIHRoZSBtYXN0ZXIgcHJvcGVydGllcy5cclxuICAtICoqc2FmZV9sb2FkKio6IGxvYWQgYW4gYXVkaW8gZmlsZSBhbmQgbW9kaWZ5IGl0IGFjY29yZGluZyB0byB0aGUgJ01hc3RlcicgYXR0cmlidXRlcyhsaWtlIHRoZSBmcmFtZSByYXRlLCBudW1iZXIgb29mIGNoYW5uZWxzLCBldGMpLlxyXG4tICAqKnJldHVybnMqKiBuZXcgV3JhcCBvYmplY3QuXHJcblxyXG46bWVtbzogKipOb3RlOioqIFdyYXBwZWQgb2JqZWN0cyBub3JtYWxseSBzdG9yZWQgc3RhdGljYWxseSwgc28gYWxsIG9mIHRoZSBjYWxjdWxhdGlvbnMgbmVlZCBhZGRpdGlvbmFsIElPIHJlYWQvd3JpdGUgdGltZSwgVGhpcyBkZWNyZXNlIGR5bmFtaWMgbWVtb3J5IHVzYWdlIHNwZWNpY2FsbHkgZm9yIGJpZyBhdWRpbyBkYXRhLlxyXG5cclxuXHJcbjxiciAvPlxyXG48YnIgLz5cclxuXHJcbiMjIyBXcmFwXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwKHNlbGYsIG1hc3RlcjogTWFzdGVyLCByZWNvcmQ6IHBkLlNlcmllcywgZ2VuZXJhdG9yOiBXcmFwR2VuZXJhdG9yKVxyXG5gYGBcclxuXHJcbjxiciAvPlxyXG5cclxuXHJcbiMjIyMgTWV0aG9kc1xyXG5cclxuIyMjIyMgZ2V0X3NhbXBsZV9mb3JtYXRcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuZ2V0X3NhbXBsZV9mb3JtYXQoc2VsZikgLT4gU2FtcGxlRm9ybWF0XHJcbmBgYFxyXG5cclxuIFJldHVybnMgc2FtcGxlIGZvcm1hdCBvZiB0aGUgY3VycmVudCB3YXJwcGVkIHJlY29yZC5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X3NhbXBsZV93aWR0aFxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5nZXRfc2FtcGxlX3dpZHRoKHNlbGYpIC0+IGludFxyXG5gYGBcclxuXHJcbiBSZXR1cm5zIHNhbXBsZSB3aWR0aC5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X21hc3RlclxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5nZXRfbWFzdGVyKHNlbGYpIC0+IE1hc3RlclxyXG5gYGBcclxuXHJcbiBSZXR1cm5zIHRoZSBNYXN0ZXIgb2JqZWN0LlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfc2l6ZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5nZXRfc2l6ZShzZWxmKSAtPiBpbnRcclxuYGBgXHJcblxyXG5SZXR1cm5zIHNpemUgb2YgdGhlIGN1cnJlbnRseSBwcm9jZXNzZWQgcmVjb3JkIG9uIG5vbi12b2xhdGlsZSBtZW1vcnkuXHJcblxyXG46bWVtbzogKipOb3RlOioqIFdyYXBwZWQgb2JqZWN0cyBub3JtYWxseSBzdG9yZWQgc3RhdGljYWxseSwgc28gYWxsIG9mIHRoZSBjYWxjdWxhdGlvbnMgbmVlZCBhZGRpdGlvbmFsIElPIHJlYWQvd3JpdGUgdGltZSwgVGhpcyBkZWNyZXNlIGR5bmFtaWMgbWVtb3J5IHVzYWdlIHNwZWNpY2FsbHkgZm9yIGJpZyBhdWRpbyBkYXRhLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfZnJhbWVfcmF0ZVxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5nZXRfZnJhbWVfcmF0ZShzZWxmKSAtPiBpbnRcclxuYGBgXHJcblxyXG5SZXR1cm5zIGZyYW1lIHJhdGUgb2YgdGhlIGN1cnJlbnQgd2FycHBlZCByZWNvcmQuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfbmNoYW5uZWxzXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwLmdldF9uY2hhbm5lbHMoc2VsZikgLT4gaW50XHJcbmBgYFxyXG5cclxuIFJldHVybnMgdGhlIG51bWJlciBvZiBhdWRpYmxlIHBlcnNwZWN0aXZlIGRpcmVjdGlvbnMgb3IgZGltZW5zaW9ucyBvZiB0aGUgY3VycmVudCB3cmFwcGVkIHJlY29yZC5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0X2R1cmF0aW9uXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwLmdldF9kdXJhdGlvbihzZWxmKSAtPiBmbG9hdFxyXG5gYGBcclxuXHJcblJldHVybnMgdGhlIGR1cmF0aW9uIG9mIHRoZSBwcm92aWRlZCBhdWRpbyByZWNvcmQuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBqb2luXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwLmpvaW4oc2VsZiwgKm90aGVyKSAtPiBXcmFwXHJcbmBgYFxyXG5cclxuUmV0dXJucyBhIG5ldyB3cmFwcGVkIHJlY29yZCBieSBqb2luaW5nIGFuZCBzeW5jaHJvbml6aW5nIGFsbCB0aGUgZWxlbWVudHMgb2YgdGhlICdvdGhlcicgaXRlcmFibGUgKFdyYXAsIFdyYXBHZW5lcmF0b3IpLCBzZXBhcmF0ZWQgYnkgdGhlIGdpdmVuIHNlcGFyYXRvci5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHVucGFja1xyXG5cclxuYGBgcHlcclxuQGNvbnRleHRtYW5hZ2VyXHJcbnN1ZGlvLldyYXAudW5wYWNrKHNlbGYsIHJlc2V0PUZhbHNlKSAtPiBucC5uZGFycmF5XHJcbmBgYFxyXG5cclxuVW5wYWNrIGF1ZGlvIGRhdGEgIGZyb20gY2FjaGVkIGZpbGVzIHRvIHRoZSBkeW5hbWljIG1lbW9yeS5cclxuXHJcbjptZW1vOiAqKk5vdGU6KiogIEFsbCBjYWxjdWxhdGlvbnMgaW4gdGhlIHVucGFja2VkIGJsb2NrIGFyZSBwZXJmb3JtZWQgb24gdGhlIHByZWNhY2hlZCBmaWxlcyAobm90IHRoZSBvcmlnaW5hbCBhdWRpbyBkYXRhKS5cclxuXHJcblxyXG4tICoqcGFyYW1ldGVycyoqOlxyXG4gIC0gKipyZXNldCoqOiBSZXNldCB0aGUgYXVkaW8gcG9pbnRlciB0byB0aW1lIDAgKEVxdWl2YWxlbnQgdG8gc2xpY2UgJ1s6XScpLlxyXG4tICAqKlJldHVybnMqKiBhdWRpbyBkYXRhIGluIG5kYXJyYXkgZm9ybWF0IHdpdGggc2hhcGUgb2YgKG51bWJlciBvZiBhdWRpbyBjaGFubmVscywgYmxvY2sgc2l6ZSkuXHJcblxyXG5gYGBweVxyXG5tYXN0ZXIgPSBNYXN0ZXIoKVxyXG53cmFwID0gbWFzdGVyLmFkZCgnZmlsZS5tcDMnKVxyXG53aXRoIHdyYXAudW5wYWNrKCkgYXMgZGF0YTpcclxuICAgIHdyYXAuc2V0X2RhdGEoZGF0YSAqIC43KVxyXG5tYXN0ZXIuZWNobyh3cmFwKVxyXG5gYGBcclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfZGF0YVxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5nZXRfZGF0YShzZWxmKSAtPiBVbmlvbltwZC5TZXJpZXMsIG51bXB5Lm5kYXJyYXldXHJcbmBgYFxyXG5pZiB0aGUgY3VycmVudCBvYmplY3QgaXMgdW5wYWNrZWQ6XHJcbi0gUmV0dXJucyB0aGUgYXVkaW8gZGF0YSBpbiBhIG5kYXJyYXkgZm9ybWF0IHdpdGggc2hhcGUgb2YgKG51bWJlciBvZiBhdWRpbyBjaGFubmVscywgYmxvY2sgc2l6ZSkuXHJcblxyXG5vdGhlcndpc2U6XHJcbi0gUmV0dXJucyB0aGUgY3VycmVudCByZWNvcmQuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBpc19wYWNrZWRcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuaXNfcGFja2VkKHNlbGYpIC0+IGJvb2xcclxuYGBgXHJcblxyXG5SZXR1cm5zIHRydWUgaWYgdGhlIFdyYXAgb2JqZWN0IGlzIHBhY2tlZC5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0XHJcblxyXG5gYGBweVxyXG5AY29udGV4dG1hbmFnZXJcclxuc3VkaW8uV3JhcC5nZXQoc2VsZiwgb2Zmc2V0PU5vbmUsIHdoZW5jZT1Ob25lKVxyXG5gYGBcclxuXHJcbiBSZXR1cm5zIHRoZSBhdWRpbyBkYXRhIGFzIGEgX2lvLkJ1ZmZlcmVkUmFuZG9tIElPIGZpbGUuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNldF9kYXRhXHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwLnNldF9kYXRhKHNlbGYsIGRhdGE6IG51bXB5Lm5kYXJyYXkpXHJcbmBgYFxyXG5cclxuU2V0IGF1ZGlvIGRhdGEgZm9yIGN1cnJlbnQgd3JhcHBlZCByZWNvcmQgKG9iamVjdCBtdXN0IGJlIHVucGFja2VkIHRvIHRoZSB2b2xhdGlsZSBtZW1vcnkpLlxyXG5cclxuPGJyIC8+XHJcblxyXG5cclxuXHJcblxyXG4jIyMjIE1hZ2ljIG1ldGhvZHNcclxuXHJcbiMjIyMjIGRlbFxyXG5cclxuYGBgcHlcclxuc3VkaW8uV3JhcC5fX2RlbF9fKHNlbGYpXHJcbmBgYFxyXG5cclxuRGVsZXRlIHRoZSBjdXJyZW50IG9iamVjdCBhbmQgaXRzIGRlcGVuZGVuY2llcyAoY2FjaGVkIGZpbGVzLCBldGMuKVxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBzdHJcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX19zdHJfXyhzZWxmKVxyXG5gYGBcclxuXHJcblJldHVybnMgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IG9iamVjdFxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuXHJcbiMjIyMjIGdldGl0ZW1cclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX19nZXRpdGVtX18oc2VsZiwgaXRlbSkgLT4gc2VsZlxyXG5gYGBcclxuXHJcblxyXG4qKlNsaWNpbmcqKiA6IFxyXG5UaGUgV3JhcHBlZCBvYmplY3QgY2FuIGJlIHNsaWNlZCB1c2luZyB0aGUgc3RhbmRhcmQgUHl0aG9uIHhbc3RhcnQ6IHN0b3A6IHN0ZXBdIHN5bnRheCwgd2hlcmUgeCBpcyB0aGUgd3JhcHBlZCBvYmplY3QuXHJcblxyXG4gIFNsaWNpbmcgdGhlICoqdGltZSBkb21haW4qKjogIFxyXG5cclxuICBUaGUgYmFzaWMgc2xpY2Ugc3ludGF4IGlzIFxyXG4gIGBgYG1hdGhcclxuICBbaTogajogaywgaSgyKTogaigyKTogaygyKSwgaShuKTogaihuKTogayhuKV0gXHJcbiAgYGBgXHJcbiAgXHJcbiAgd2hlcmUgaSBpcyB0aGUgc3RhcnQgdGltZSwgaiBpcyB0aGUgc3RvcCB0aW1lIGluIGludGVnZXIgb3IgZmxvYXQgdHlwZXMgYW5kIGsgaXMgdGhlIHN0ZXAobmVnYXRpdmUgbnVtYmVyIGZvciBpbnZlcnNpbmcpLlxyXG4gIFRoaXMgc2VsZWN0cyB0aGUgblhtIHNlY29uZHMgd2l0aCBpbmRleCB0aW1lcyBcclxuICBgYGBweVxyXG4gIGksIGkrMSwgaSsyLCAuLi4sIGosIGkoMiksIGkoMikrMSwgLi4uLCBqKDIpLCBpKG4pLCAuLi4sIGoobilcclxuICBqIHdoZXJlIG0gPSBqIC0gaSAoaiA+IGkpLlxyXG4gIGBgYFxyXG5cclxuICA6bWVtbzogKipOb3RlOioqIGZvciBpIDwgaiwgaSBpcyB0aGUgc3RvcCB0aW1lIGFuZCBqIGlzIHRoZSBzdGFydCB0aW1lLCBtZWFucyB0aGF0IGF1ZGlvIGRhdGEgcmVhZCBpbnZlcnNlbHkuXHJcblxyXG4gICoqRmlsdGVyaW5nKiogKFNsaWNpbmcgdGhlIGZyZXF1ZW5jeSBkb21haW4pOiAgXHJcblxyXG4gIFRoZSBiYXNpYyBzbGljZSBzeW50YXggaXMgXHJcbiAgXHJcbiAgXHJcbiAgYGBgcHlcclxuICBbJ2knOiAnaic6ICdmaWx0ZXJpbmcgb3B0aW9ucycsICdpKDIpJzogJ2ooMiknOiAnb3B0aW9ucygyKScsIC4uLiwgJ2kobiknOiAnaihuKSc6ICdvcHRpb25zKG4pJ11cclxuICBgYGBcclxuXHJcbiAgd2hlcmUgaSBpcyB0aGUgc3RhcnRpbmcgZnJlcXVlbmN5IGFuZCBqIGlzIHRoZSBzdG9wcGluZyBmcmVxdWVuY3kgd2l0aCB0eXBlIG9mIHN0cmluZyBpbiB0aGUgc2FtZSB1bml0cyBhcyBmcyB0aGF0IGZzIGlzIDIgaGFsZi1jeWNsZXMvc2FtcGxlLlxyXG4gIFRoaXMgYWN0aXZhdGVzIG4gbnVtYmVyIG9mIGlpciBmaWx0ZXJzIHdpdGggc3BlY2lmaWVkIGZyZXF1ZW5jaWVzIGFuZCBvcHRpb25zLlxyXG5cclxuICBGb3IgdGhlIHNsaWNlIHN5bnRheCBbeDogeTogb3B0aW9uc10gd2UgaGF2ZTpcclxuICAtIHg9IE5vbmUsIHk9ICdqJzogbG93IHBhc3MgZmlsdGVyIHdpdGggYSBjdXRvZmYgZnJlcXVlbmN5IG9mIHRoZSBqXHJcbiAgLSB4PSAnaScsIHk9IE5vbmU6IGhpZ2ggcGFzcyBmaWx0ZXIgd2l0aCBhIGN1dG9mZiBmcmVxdWVuY3kgb2YgdGhlIGlcclxuICAtIHg9ICdpJywgeT0gJ2onOiBiYW5kcGFzcyBmaWx0ZXIgd2l0aCB0aGUgY3JpdGljYWwgZnJlcXVlbmNpZXMgb2YgdGhlIGksIGpcclxuICAtIHg9ICdpJywgeT0gJ2onLCBvcHRpb25zPSdzY2FsZT1bQW55IG5lZ2F0aXZlIG51bWJlcl0nOiBiYW5kc3RvcCBmaWx0ZXIgd2l0aCB0aGUgY3JpdGljYWwgZnJlcXVlbmNpZXMgb2YgdGhlIGksIGpcclxuXHJcbiAgKipGaWx0ZXJpbmcqKiBvcHRpb25zOlxyXG4gIC0gZnR5cGU6IG9wdGlvbmFsOyBUaGUgdHlwZSBvZiBJSVIgZmlsdGVyIHRvIGRlc2lnbjpcXG5cclxuICAgIC0gQnV0dGVyd29ydGggOiDDouKCrMucYnV0dGVyw6LigqzihKIoZGVmYXVsdClcclxuICAgIC0gQ2hlYnlzaGV2IEkgOiDDouKCrMucY2hlYnkxw6LigqzihKJcclxuICAgIC0gQ2hlYnlzaGV2IElJIDogw6LigqzLnGNoZWJ5MsOi4oKs4oSiXHJcbiAgICAtIENhdWVyL2VsbGlwdGljOiDDouKCrMucZWxsaXDDouKCrOKEolxyXG4gICAgLSBCZXNzZWwvVGhvbXNvbjogw6LigqzLnGJlc3NlbMOi4oKs4oSiXHJcbiAgLSByczogZmxvYXQsIG9wdGlvbmFsOlxcblxyXG4gICAgRm9yIENoZWJ5c2hldiBhbmQgZWxsaXB0aWMgZmlsdGVycywgcHJvdmlkZXMgdGhlIG1pbmltdW0gYXR0ZW51YXRpb24gaW4gdGhlIHN0b3AgYmFuZC4gKGRCKVxyXG4gIC0gcnA6IGZsb2F0LCBvcHRpb25hbDpcXG5cclxuICAgIEZvciBDaGVieXNoZXYgYW5kIGVsbGlwdGljIGZpbHRlcnMsIHByb3ZpZGVzIHRoZSBtYXhpbXVtIHJpcHBsZSBpbiB0aGUgcGFzc2JhbmQuIChkQilcclxuICAtIG9yZGVyOiBUaGUgb3JkZXIgb2YgdGhlIGZpbHRlci4oZGVmYXVsdCA1KVxyXG4gIC0gc2NhbGU6IFtmbG9hdCwgaW50XSBvcHRpb25hbDsgVGhlIGF0dGVudWF0aW9uIG9yIEFtcGxpZmljYXRpb24gZmFjdG9yLFxyXG4gICAgdGhhdCBpbiB0aGUgYmFuZHN0b3AgZmlsdGVyIG11c3QgYmUgYSBuZWdhdGl2ZSBudW1iZXIuXHJcblxyXG4gICoqQ29tcGxleCoqIHNsaWNpbmc6XHJcbiAgVGhlIGJhc2ljIHNsaWNlIHN5bnRheCBpcyBcclxuICBcclxuICBgYGBweVxyXG4gIFthOiBiLCAnaSc6ICdqJzogJ2ZpbHRlcmluZyBvcHRpb25zJywgLi4uLCAnaShuKSc6ICdqKG4pJzogJ29wdGlvbnMobiknLCAuLi4sIGEobik6IGIobiksICdpJzogJ2onOiAnb3B0aW9ucycsIC4uLiwgJ2kobiknOiAnaihuKSc6ICdvcHRpb25zKG4pJ10gXHJcbiAgYGBgXHJcblxyXG4gIG9yXHJcblxyXG4gIGBgYHB5XHJcbiAgW2E6IGIsIFtGaWx0ZXIgYmxvY2sgMSldLCBhKDIpOiBiKDIpLCBbRmlsdGVyIGJsb2NrIDJdICAuLi4gLCBhKG4pOiBiKG4pLCBbRmlsdGVyIGJsb2NrIG5dXVxyXG4gIGBgYFxyXG5cclxuICBXaGVyZSBpIGlzIHRoZSBzdGFydGluZyBmcmVxdWVuY3ksIGogaXMgdGhlIHN0b3BwaW5nIGZyZXF1ZW5jeSwgYSBpcyB0aGUgc3RhcnRpbmcgdGltZSBhbmQgYiBpcyB0aGUgc3RvcHBpbmcgdGltZSBpbiBzZWNvbmRzLiBUaGlzIGFjdGl2YXRlcyBuIG51bWJlciBvZiBmaWx0ZXIgYmxvY2tzIFtkZXNjcmliZWQgaW4gdGhlIGZpbHRlcmluZyBzZWN0aW9uXSB0aGF0IGVhY2ggb2YgdGhlbSBvcGVyYXRlcyB3aXRoaW4gYSBwcmVkZXRlcm1pbmVkIHRpbWUgcmFuZ2UuXHJcblxyXG5ub3RlOlxyXG4gIFRoZSBzbGljZWQgb2JqZWN0IGlzIHN0b3JlZCBzdGF0aWNhbGx5IHNvIGNhbGxpbmcgdGhlIG9yaWdpbmFsIHdyYXBwZWQgcmV0dXJucyBUaGUgc2xpY2VkIG9iamVjdC5cclxuXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBtdWxcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX19tdWxfXyhzZWxmLCBzY2FsZSkgLT4gV3JhcFxyXG5gYGBcclxuXHJcblJldHVybnMgY3VycmVudCBvYmplY3QsIGRpdmlkaW5nIHRoZSBkYXRhIG9mIHRoZSBjdXJyZW50IHJlY29yZC5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHRydWVkaXZcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX190cnVlZGl2X18oc2VsZiwgc2NhbGUpXHJcbmBgYFxyXG5cclxuUmV0dXJucyBjdXJyZW50IG9iamVjdCwgZGl2aWRpbmcgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgcmVjb3JkLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgcG93XHJcblxyXG5gYGBweVxyXG5zdWRpby5XcmFwLl9fcG93X18oc2VsZiwgcG93ZXIsIG1vZHVsbz1Ob25lKVxyXG5gYGBcclxuXHJcblJldHVybnMgYSBuZXcgV3JhcCBvYmplY3QsIHNjYWxpbmcgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgcmVjb3JkLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBhZGRcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX19hZGRfXyhzZWxmLCBvdGhlcjpVbmlvbltXcmFwLCBXcmFwR2VuZXJhdG9yLCBpbnQsIGZsb2F0XSlcclxuYGBgXHJcblxyXG5pZiB0aGUgJ290aGVyJyBwYXJhbWV0ZXIgaXMgYSBXcmFwR2VuZXJhdG9yIG9yIGEgV3JhcCBvYmplY3QgdGhpcyBtZXRob2Qgam9pbnMgdGhlIGN1cnJlbnQgb2JqZWN0IHRvIHRoZSBvdGhlciBvbmUsIG90aGVyd2lzZSB0aGlzIG1ldGhvZCB1c2VkIHRvICBSZXR1cm4gYSBjdXJyZW50IG9iamVjdCwgc2NhbGluZyB0aGUgZGF0YSBvZiB0aGUgY3VycmVudCByZWNvcmQuIFxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBzdWJcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLldyYXAuX19zdWJfXyhzZWxmLCBvdGhlcjogVW5pb25bZmxvYXQsIGludF0pXHJcbmBgYFxyXG5cclxuUmV0dXJucyBjdXJyZW50IG9iamVjdCwgc3VidHJhY3RpbmcgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgcmVjb3JkLiBcclxuXHJcbjxiciAvPlxyXG5cclxuXHJcblxyXG5cclxuPGJyIC8+XHJcbjxiciAvPlxyXG5cclxuIyMjIFBpcGVsaW5lXHJcblxyXG5BIHBpcGVsaW5lIGlzIGEgc3lzdGVtIG9mIHBpcGVzIHVzZWQgdG8gdHJhbnNwb3J0IGRhdGEsIGVhY2ggcGlwZSBpcyBhIG1ldGhvZCB0aGF0IHByb2Nlc3NlcyBkYXRhIGFuZCBwYXNzIGl0IHRvIHRoZSBuZXh0IG9uZS4gIFxyXG5cclxuUGlwZWxpbmUgaGVscHMgdGhlIGF1ZGlvIHByb2Nlc3NpbmcgYWxnb3JpdGhtcyB0byBicmVhayB0aGUgY29tcGxleGl0eSBpbnRvIHNtYWxsZXIgYmxvY2tzLCBhbmQgdGhlIHVzZSBvZiB0aHJlYWRpbmcgdGVjaG5pcXVlcyBpbXByb3ZlcyB0aGUgb3ZlcmFsbCBwZXJmb3JtYW5jZSBvZiB0aGUgc3lzdGVtLlxyXG5cclxuYGBgcHlcclxuc3VkaW8uUGlwZWxpbmVcclxuYGBgXHJcblxyXG5gYGBtZXJtYWlkIFxyXG4gIGdyYXBoIExSO1xyXG4gICAgICBBKElucHV0IFF1ZXVlKS0tPkIoUGlwZSAwKTtcclxuICAgICAgQi0tPkMoUGlwZSAxKTtcclxuICAgICAgQy0tPkQoLi4uKTtcclxuICAgICAgRC0tPkUoT3V0cHV0IFF1ZXVlKTtcclxuYGBgXHJcblxyXG5cclxuXHJcblxyXG5cclxuIyMjIyBQYXJhbWV0ZXJzXHJcblxyXG5cclxuXHJcbi0gKiptYXhfc2l6ZSoqOiBpbnQsIG9wdGlvbmFsXHJcbiAgICBNYXhpbXVtIG51bWJlciBvZiBjYWxsYWJsZSBwZXIgUGlwZWxpbmUgb2JqZWN0IFxyXG5cclxuICAgIDxiciAvPlxyXG4gICAgXHJcbi0gKippb19idWZmZXJfc2l6ZSoqOiBpbnQsIG9wdGlvbmFsXHJcbiAgICBNYXhpbXVtIHNpemUgb2YgdGhlIEkvTyBxdWV1ZXMuXHJcblxyXG4tICoqb25fYnVzeSoqOiAgW2Zsb2F0LCBzdHJdLCBvcHRpb25hbFxyXG4gICAgRGV0ZXJtaW5lcyB0aGUgYmVoYXZpb3Igb2YgdGhlIHBpcGVsaW5lIGFmdGVyIHRoZSBJL08gcXVldWVzIGFyZSBmdWxsLiAoYnVzeSBzdGF0ZSkuXHJcblxyXG4gICAgUGxlYXNlIHVzZTpcclxuICAgIC0gIFwiZHJvcFwiIHRvIGRyb3Agb2xkIGRhdGEgZnJvbSB0aGUgb3V0cHV0IHF1ZXVlIGFuZCBhbGxvY2F0ZSBuZXcgc3BhY2UgZm9yIG5ldyBvbmVzLlxyXG4gICAgLSAgXCJibG9ja1wiIHRvIGJsb2NrIHRoZSBwaXBlbGluZSB1bnRpbCB0aGUgbGFzdCBkYXRhIGFycml2ZXMuXHJcbiAgICAtICB0aW1lb3V0IGluIGZsb2F0IHR5cGUgdG8gYmxvY2sgdGhlIHBpcGVsaW5lIHVudGlsIHRoZSBlbmQgdGltZS5cclxuXHJcbiAgPGJyIC8+XHJcbiAgICBcclxuLSAqKmxpc3RfZGlzcGF0Y2gqKjogYm9vbCwgb3B0aW9uYWxcclxuICAgIGRpc3BhdGNoIHRoZSBpbnB1dCBsaXN0IHR5cGUsIHRvIHRoZSBhcmd1bWVudHMgb2YgdGhlIGZpcnN0IHBpcGUuXHJcblxyXG4gICAgPGJyIC8+XHJcblxyXG5cclxuIyMjIyBNZXRob2RzXHJcblxyXG5cclxuIyMjIyMgY2xlYXJcclxuXHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5jbGVhcihzZWxmKVxyXG5gYGBcclxuICAgICAgXHJcblJlbW92ZSBhbGwgb2YgdGhlIGl0ZW1zIGZyb20gdGhlIEkvTyBxdWV1ZXMgaW4gYmxvY2sgbW9kZS5cclxuXHJcbjxiciAvPlxyXG5cclxuXHJcbiMjIyMjIHJ1blxyXG5cclxuYGBgcHlcclxuc3VkaW8uUGlwZWxpbmUucnVuKHNlbGYpXHJcbmBgYFxyXG5cclxuU3RhcnQgZGF0YSBpbmplY3Rpb24gaW50byBwaXBlbGluZS4gXHJcblxyXG48YnIgLz5cclxuXHJcblxyXG4jIyMjIyBpbnNlcnRcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLlBpcGVsaW5lLmluc2VydChzZWxmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGludCxcclxuICAgICAgICAgICAgICAgICAgICAgICpmdW5jOiBjYWxsYWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFVuaW9uW2xpc3QsIHR1cGxlLCBvYmplY3RdID0gKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICBpbml0OiBVbmlvbltsaXN0LCB0dXBsZSwgY2FsbGFibGVdID0gKCkpXHJcbmBgYFxyXG5cclxuSW5zZXJ0IGNhbGxhYmxlL3MgYmVmb3JlIGluZGV4LlxyXG5cclxuIyMjIyMjIFBhcmFtZXRlcnNcclxuXHJcblxyXG5cclxuLSAqKmluZGV4Kio6IGludFxyXG4gIFxyXG4gICAgaW5kZXggdmFsdWUuXHJcblxyXG4gICAgPGJyIC8+XHJcbiAgICBcclxuLSAqKmZ1bmMqKjogY2FsbGFibGVcclxuLSBcclxuICAgIFBpcGVsaW5lIGNhbGxhYmxlIGVsZW1lbnQvcy5cclxuXHJcbiAgPGJyIC8+XHJcblxyXG4tICoqYXJncyoqOiAgKHR1cGxlLCBsaXN0LCBvYmplY3QpLCBvcHRpb25hbFxyXG4gIFxyXG4gICAgdGhlIHN0YXRpYyBhcmd1bWVudC9zLCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgcGlwZWxpbmUgZWxlbWVudC9zLlxyXG5cclxuICAgIGV4YW1wbGU6XHJcbiAgICAtIG11bHRpcGxlIGFyZ3VtZW50cyBmb3IgbXVsdGlwbGUgY2FsbGFibGVzXHJcblxyXG4gICAgICBgYGBweVxyXG4gICAgICBkZWYgZjAoYXJnMCwgYXJnMSwgZGF0YSk6XHJcbiAgICAgICAgcmV0dXJuIGRhdGFcclxuXHJcbiAgICAgIGRlZiBmMShhcmcsIGRhdGEpOlxyXG4gICAgICAgIHJldHVybiBkYXRhXHJcblxyXG4gICAgICBwaXAgPSBzdWRpby5QaXBlbGluZSgpXHJcbiAgICAgIHBpcC5pbnNlcnQoMiwgZjAsIGYxLCBhcmdzPShbJ2FyZzAgZm9yIGYwJywgJ2FyZzEgZm9yIGYwJ10sICdzaW5nbGUgYXJnIGZvciBmMScpKVxyXG4gICAgICBgYGBcclxuXHJcbiAgICAtIHNpbmdsZSBhcmd1bWVudCBmb3IgbXVsdGlwbGUgY2FsbGFibGVzXHJcblxyXG4gICAgICBgYGBweVxyXG4gICAgICBcclxuICAgICAgZGVmIGYwKGFyZywgZGF0YSk6XHJcbiAgICAgICAgcmV0dXJuIGRhdGFcclxuXHJcbiAgICAgIGRlZiBmMShhcmcsIGRhdGEpOlxyXG4gICAgICAgIHJldHVybiBkYXRhXHJcblxyXG4gICAgICBwaXAgPSBzdWRpby5QaXBlbGluZSgpXHJcbiAgICAgIHBpcC5pbnNlcnQoMiwgZjAsIGYxLCBhcmdzPSdzaW5nbGUgYXJnIGZvciBhbGwnKVxyXG4gICAgICBgYGBcclxuICAgICAgXHJcbiAgICAgIGBgYHB5XHJcbiAgICAgIGRlZiBmMChkYXRhKTpcclxuICAgICAgICByZXR1cm4gZGF0YVxyXG5cclxuICAgICAgZGVmIGYxKGFyZywgZGF0YSk6XHJcbiAgICAgICAgcmV0dXJuIGRhdGFcclxuXHJcbiAgICAgIHBpcCA9IHN1ZGlvLlBpcGVsaW5lKClcclxuICAgICAgcGlwLmluc2VydCgyLCBmMCwgZjEsIGFyZ3M9KE5vbmUsICdzaW5nbGUgYXJnIGZvciBmMScpKVxyXG4gICAgICBgYGBcclxuXHJcbiAgICAtIHNpbmdsZSBhcmd1bWVudCBmb3Igc2luZ2xlIGNhbGxhYmxlXHJcblxyXG4gICAgICBgYGBweVxyXG4gICAgICBcclxuICAgICAgZGVmIGYwKGFyZywgZGF0YSk6XHJcbiAgICAgICAgcmV0dXJuIGRhdGFcclxuXHJcbiAgICAgIHBpcCA9IHN1ZGlvLlBpcGVsaW5lKClcclxuICAgICAgcGlwLmluc2VydCgyLCBmMCwgYXJncz0nc2luZ2xlIGFyZyBmb3IgZjAnKVxyXG4gICAgICBgYGBcclxuXHJcbiAgPGJyIC8+XHJcbiAgICBcclxuLSAqKmluaXQqKjogKGxpc3QsIHR1cGxlLCBjYWxsYWJsZSksIG9wdGlvbmFsXHJcbiBcclxuICAgIHNpbmdsZSBvciBtdWx0aXBsZSBjYWxsYWJsZXMgc3VnZ2VzdGVkIGZvciBhY2Nlc3MgdG8gdGhlIHBpcGVsaW5lJ3Mgc2hhcmVkIG1lbW9yeSwgdGhhdCBjYWxsZWQgYWZ0ZXIgc3RhcnRpbmcgcGlwZWxpbmUgdGhyZWFkIGV4ZWN1dGlvbi5cclxuXHJcblxyXG4jIyMjIyMgUmV0ZXJuc1xyXG5cclxuICAtIHNlbGYgb2JqZWN0XHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG5cclxuIyMjIyMgYXBwZW5kXHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5hcHBlbmQoc2VsZixcclxuICAgICAgICAgICAgICAgICAgICAgICpmdW5jOiBjYWxsYWJsZSxcclxuICAgICAgICAgICAgICAgICAgICAgIGFyZ3M6IFVuaW9uW2xpc3QsIHR1cGxlLCBvYmplY3RdID0gKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICBpbml0OiBVbmlvbltsaXN0LCB0dXBsZSwgY2FsbGFibGVdID0gKCkpXHJcbmBgYFxyXG5cclxuQXBwZW5kIGNhbGxhYmxlL3MgdG8gdGhlIGVuZCBvZiB0aGUgcGlwZWxpbmUuXHJcbkZvciBtb3JlIGRldGFpbGVzIFBsZWFzZSByZWZlciB0byB0aGUgIHN1ZGlvLlBpcGVsaW5lLmluc2VydCBtZXRob2QuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHN5bmNcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLlBpcGVsaW5lLnN5bmMoc2VsZiwgYmFycmllcjogdGhyZWFkaW5nLkJhcnJpZXIpXHJcbmBgYFxyXG5TeW5jaHJvbml6ZSBjdXJyZW50IHBpcGVsaW5lIHdpdGggb3RoZXJzIHVzaW5nIGEgYmFycmllci5cclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGFhc3luY1xyXG5cclxuYGBgcHlcclxuc3VkaW8uUGlwZWxpbmUuYWFzeW5jKHNlbGYpXHJcbmBgYFxyXG5cclxuRGlzYWJsZSBwaXBlbGluZSBzeW5jaHJvbml6YXRpb24uXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGRlbGF5XHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5kZWxheShzZWxmKVxyXG5gYGBcclxuXHJcbnVzZWQgdG8gcmV0cml2ZSBwaXBlbGluZSBleGVjdXRpb24gZGVsYXkgaW4gdXMuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIHNldF90aW1lb3V0XHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5zZXRfdGltZW91dChzZWxmLCB0OiBVbmlvbltmbG9hdCwgaW50XSlcclxuYGBgXHJcbkRldGVybWluZXMgdGhlIGJsb2NraW5nIHRpbWVvdXQgb2YgdGhlIHBpcGVsaW5lIGFmdGVyIHRoZSBJL08gcXVldWVzIGFyZSBmdWxsLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBnZXRfdGltZW91dFxyXG5cclxuYGBgcHlcclxuc3VkaW8uUGlwZWxpbmUuZ2V0X3RpbWVvdXQoc2VsZilcclxuYGBgXHJcblxyXG51c2VkIHRvIHJldHJpdmUgdGhlIGJsb2NraW5nIHRpbWVvdXQgb2YgdGhlIHBpcGVsaW5lIGFmdGVyIHRoZSBJL08gcXVldWVzIGFyZSBmdWxsLlxyXG5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgcHV0XHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5wdXQoc2VsZiwgZGF0YSlcclxuYGBgXHJcblxyXG5JbmplY3QgbmV3IGRhdGEgaW50byB0aGUgcGlwZWxpbmUgb2JqZWN0IFxyXG5cclxuPGJyIC8+XHJcblxyXG5cclxuIyMjIyMgZ2V0XHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5nZXQoc2VsZiwgYmxvY2s9VHJ1ZSwgdGltZW91dD1Ob25lKTpcclxuYGBgXHJcblxyXG5SZW1vdmUgYW5kIHJldHVybiBhbiBpdGVtIGZyb20gdGhlIG91dHB1dCBxdWV1ZS5cclxuXHJcbklmIG9wdGlvbmFsIGFyZ3MgJ2Jsb2NrJyBpcyB0cnVlIGFuZCAndGltZW91dCcgaXMgTm9uZSAodGhlIGRlZmF1bHQpLCBibG9jayBpZiBuZWNlc3NhcnkgdW50aWwgYW4gaXRlbSBpcyBhdmFpbGFibGUuIElmICd0aW1lb3V0JyBpcyBhIG5vbi1uZWdhdGl2ZSBudW1iZXIsIGl0IGJsb2NrcyBhdCBtb3N0ICd0aW1lb3V0JyBzZWNvbmRzIGFuZCByYWlzZXNcclxudGhlIEVtcHR5IGV4Y2VwdGlvbiBpZiBubyBpdGVtIHdhcyBhdmFpbGFibGUgd2l0aGluIHRoYXQgdGltZS5cclxuT3RoZXJ3aXNlICgnYmxvY2snIGlzIGZhbHNlKSwgcmV0dXJuIGFuIGl0ZW0gaWYgb25lIGlzIGltbWVkaWF0ZWx5IGF2YWlsYWJsZSwgZWxzZSByYWlzZSB0aGUgRW1wdHkgZXhjZXB0aW9uICgndGltZW91dCcgaXMgaWdub3JlZCBpbiB0aGF0IGNhc2UpLlxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIE1hZ2ljIG1ldGhvZHNcclxuXHJcblxyXG48YnIgLz5cclxuXHJcbiMjIyMjIGNhbGxcclxuXHJcbmBgYHB5XHJcbnN1ZGlvLlBpcGVsaW5lLl9fY2FsbF9fKHNlbGYsIGRhdGEpXHJcbmBgYFxyXG5cclxuVGhlIF9fIGNhbGwgX18gbWFnaWMgbWV0aG9kIHVzZWQgdG8gSW5qZWN0IGRhdGEgaW50byB0aGUgY3VycmVudCBwaXBlbGluZSBvYmplY3QgXHJcblxyXG5cclxuPGJyIC8+XHJcblxyXG4jIyMjIyBkZWxpdGVtXHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5fX2RlbGl0ZW1fXyhzZWxmLCBrZXkpXHJcbmBgYFxyXG5cclxuRGVsZXRlIHNlbGZba2V5XS5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgbGVuXHJcblxyXG5gYGBweVxyXG5zdWRpby5QaXBlbGluZS5fX2xlbl9fKHNlbGYpXHJcbmBgYFxyXG5cclxuUmV0dXJuIGxlbihzZWxmKS5cclxuXHJcbjxiciAvPlxyXG5cclxuIyMjIyMgZ2V0aXRlbVxyXG5cclxuYGBgcHlcclxuc3VkaW8uUGlwZWxpbmUuX19nZXRpdGVtX18oc2VsZiwga2V5KVxyXG5gYGBcclxuXHJcblJldHVybiBzZWxmW2tleV0uXHJcblxyXG48YnIgLz5cclxuXHJcblxyXG5cclxuTElDRU5DRVxyXG4tLS0tLS0tXHJcblxyXG5PcGVuIFNvdXJjZSAoT1NJIGFwcHJvdmVkKTogQXBhY2hlIExpY2Vuc2UgMi4wXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL01yWmFoYWtpL3N1ZGlvIiw=
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIkFwYWNoZSBMaWNlbnNlIDIuMCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogInN1ZGlvIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3Qvc3VkaW8vIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3Qvc3VkaW8vIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9NclphaGFraS9zdWRpbyI=
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3Qvc3VkaW8vMS4wLjkuMy8iLA==
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIkF1ZGlvIFByb2Nlc3NpbmcgUGxhdGZvcm0iLA==
ICAgICJ2ZXJzaW9uIjogIjEuMC45LjMiLA==
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNTM1NDExOCw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAuOS4yIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI0YTNmZjllMDg5ODUwYzA1Y2M3ZjRhNWVhZTFkYWUxMzYzMjcyYTUxOTMyODk3NTc5YjE4NzU1ODMzNTM3NTgxIiw=
ICAgICAgICAgICJtZDUiOiAiNTU5ZDQ3NTBhYzlmNDMzZTIwMzdlNzUxMjQ2YzNmN2UiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOGY4MGZjNjYxM2M1NGNhYzU5MjcyMjg1M2JhMjU2NDU2ZjgzNjA5ZTczNjlhYjNmYzE4ODQ3NjMzYTUwOTkwZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAic3VkaW8tMS4wLjkuMi50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1NTlkNDc1MGFjOWY0MzNlMjAzN2U3NTEyNDZjM2Y3ZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDc5MzQzLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wM1QyMDoxNjoyOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wM1QyMDoxNjoyOS41MDQzMDVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy80YS8zZi9mOWUwODk4NTBjMDVjYzdmNGE1ZWFlMWRhZTEzNjMyNzJhNTE5MzI4OTc1NzliMTg3NTU4MzM1Mzc1ODEvc3VkaW8tMS4wLjkuMi50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjAuOS4zIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjNGFiYzQ2NDllZWEzYzFiYmJhNmZkNWE5ZWU3ZTE1OWRkNWMzZWU4YmZjOTZiYTc2Y2JhMmM2ZWU4ZDBmOWQ5Iiw=
ICAgICAgICAgICJtZDUiOiAiOTE4NTNmOTY2ZmEzZmE4YWExYzAwMGE4M2NmYzQ2MTUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMTY3Mjc0NjhmZjllM2Q3NTU1MjZhYWMyMWUyMGQ2ZTNkNGYwZTJjYjlhMjU2MjgzMGQ4YTcyNDFjMjIwYTVhZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAic3VkaW8tMS4wLjkuMy50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5MTg1M2Y5NjZmYTNmYThhYTFjMDAwYTgzY2ZjNDYxNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDgwMjE2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wOVQyMDozODowOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wOVQyMDozODowOC41MDgyNTJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jNC9hYi9jNDY0OWVlYTNjMWJiYmE2ZmQ1YTllZTdlMTU5ZGQ1YzNlZThiZmM5NmJhNzZjYmEyYzZlZThkMGY5ZDkvc3VkaW8tMS4wLjkuMy50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYzRhYmM0NjQ5ZWVhM2MxYmJiYTZmZDVhOWVlN2UxNTlkZDVjM2VlOGJmYzk2YmE3NmNiYTJjNmVlOGQwZjlkOSIs
ICAgICAgICAibWQ1IjogIjkxODUzZjk2NmZhM2ZhOGFhMWMwMDBhODNjZmM0NjE1Iiw=
ICAgICAgICAic2hhMjU2IjogIjE2NzI3NDY4ZmY5ZTNkNzU1NTI2YWFjMjFlMjBkNmUzZDRmMGUyY2I5YTI1NjI4MzBkOGE3MjQxYzIyMGE1YWYi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInN1ZGlvLTEuMC45LjMudGFyLmd6Iiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiOTE4NTNmOTY2ZmEzZmE4YWExYzAwMGE4M2NmYzQ2MTUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA4MDIxNiw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMTAtMDlUMjA6Mzg6MDgiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMTAtMDlUMjA6Mzg6MDguNTA4MjUyWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYzQvYWIvYzQ2NDllZWEzYzFiYmJhNmZkNWE5ZWU3ZTE1OWRkNWMzZWU4YmZjOTZiYTc2Y2JhMmM2ZWU4ZDBmOWQ5L3N1ZGlvLTEuMC45LjMudGFyLmd6Iiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
