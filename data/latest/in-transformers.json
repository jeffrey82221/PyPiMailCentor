ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiVGhlIEh1Z2dpbmcgRmFjZSB0ZWFtIChwYXN0IGFuZCBmdXR1cmUpIHdpdGggdGhlIGhlbHAgb2YgYWxsIG91ciBjb250cmlidXRvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMvZ3JhcGhzL2NvbnRyaWJ1dG9ycykiLA==
ICAgICJhdXRob3JfZW1haWwiOiAidHJhbnNmb3JtZXJzQGh1Z2dpbmdmYWNlLmNvIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IERldmVsb3BlcnMiLA==
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IEVkdWNhdGlvbiIs
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IFNjaWVuY2UvUmVzZWFyY2giLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEFwYWNoZSBTb2Z0d2FyZSBMaWNlbnNlIiw=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlRvcGljIDo6IFNjaWVudGlmaWMvRW5naW5lZXJpbmcgOjogQXJ0aWZpY2lhbCBJbnRlbGxpZ2VuY2Ui
ICAgIF0s

ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2h1Z2dpbmdmYWNlL3RyYW5zZm9ybWVycyIs
ICAgICJrZXl3b3JkcyI6ICJOTFAgdmlzaW9uIHNwZWVjaCBkZWVwIGxlYXJuaW5nIHRyYW5zZm9ybWVyIHB5dG9yY2ggdGVuc29yZmxvdyBCRVJUIEdQVC0yIFdhdjJWZWMyIFZpVCIs
ICAgICJsaWNlbnNlIjogIkFwYWNoZSIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImluLXRyYW5zZm9ybWVycyIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvaW4tdHJhbnNmb3JtZXJzLyIs
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvaW4tdHJhbnNmb3JtZXJzLyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9odWdnaW5nZmFjZS90cmFuc2Zvcm1lcnMi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvaW4tdHJhbnNmb3JtZXJzLzEuMC4wLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjcuMCIs
ICAgICJzdW1tYXJ5IjogIlN0YXRlLW9mLXRoZS1hcnQgTWFjaGluZSBMZWFybmluZyBmb3IgSkFYLCBQeVRvcmNoIGFuZCBUZW5zb3JGbG93Iiw=
ICAgICJ2ZXJzaW9uIjogIjEuMC4wIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNjQ4MDY0Myw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwODM1NTY1MDgzMDJmMjlkY2VkN2U0ZDQ0OGIwMjg5MmYxYmE0YTJiY2QzZWNhMGVjMDFkYmM2Zjg3ZmVjMjBkIiw=
ICAgICAgICAgICJtZDUiOiAiNjRlZDE1ODE3YjlmMjZlYTVjZWY4ZTlhNDQ5ODU5YzUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMTFkYjQxOTU3MGUzNTY4NTI0NGVhYjZiYzlkNTJjM2ZkMmM4NWYyMzBlNGRjMDlhZWNiODExNWFlYjJjODU4NyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiaW4tdHJhbnNmb3JtZXJzLTEuMC4wLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI2NGVkMTU4MTdiOWYyNmVhNWNlZjhlOWE0NDk4NTljNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LjAiLA==
ICAgICAgICAic2l6ZSI6IDUyNTczNzQs
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMS0xOVQwMTo1NjoyMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMS0xOVQwMTo1NjoyMS45NzY3MDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wOC8zNS81NjUwODMwMmYyOWRjZWQ3ZTRkNDQ4YjAyODkyZjFiYTRhMmJjZDNlY2EwZWMwMWRiYzZmODdmZWMyMGQvaW4tdHJhbnNmb3JtZXJzLTEuMC4wLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMDgzNTU2NTA4MzAyZjI5ZGNlZDdlNGQ0NDhiMDI4OTJmMWJhNGEyYmNkM2VjYTBlYzAxZGJjNmY4N2ZlYzIwZCIs
ICAgICAgICAibWQ1IjogIjY0ZWQxNTgxN2I5ZjI2ZWE1Y2VmOGU5YTQ0OTg1OWM1Iiw=
ICAgICAgICAic2hhMjU2IjogIjExZGI0MTk1NzBlMzU2ODUyNDRlYWI2YmM5ZDUyYzNmZDJjODVmMjMwZTRkYzA5YWVjYjgxMTVhZWIyYzg1ODci
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImluLXRyYW5zZm9ybWVycy0xLjAuMC50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiNjRlZDE1ODE3YjlmMjZlYTVjZWY4ZTlhNDQ5ODU5YzUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNy4wIiw=
ICAgICAgInNpemUiOiA1MjU3Mzc0LA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDEtMTlUMDE6NTY6MjEiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDEtMTlUMDE6NTY6MjEuOTc2NzAxWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMDgvMzUvNTY1MDgzMDJmMjlkY2VkN2U0ZDQ0OGIwMjg5MmYxYmE0YTJiY2QzZWNhMGVjMDFkYmM2Zjg3ZmVjMjBkL2luLXRyYW5zZm9ybWVycy0xLjAuMC50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
