ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiWm9wZSBQcm9qZWN0Iiw=
ICAgICJhdXRob3JfZW1haWwiOiAiem9wZTMtZGV2QHpvcGUub3JnIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFtdLA==
ICAgICJkZXNjcmlwdGlvbiI6ICI9PT09PT09PT1cblNob3J0Y3V0c1xuPT09PT09PT09XG5cblNob3J0Y3V0cyBhcmUgb2JqZWN0cyB0aGF0IGFsbG93IG90aGVyIG9iamVjdHMgKHRoZWlyIGBgdGFyZ2V0YGApIHRvIGFwcGVhciB0b1xuYmUgbG9jYXRlZCBpbiBwbGFjZXMgb3RoZXIgdGhhbiB0aGUgdGFyZ2V0J3MgYWN0dWFsIGxvY2F0aW9uLiAgVGhleSBhcmVcbnNvbWV3aGF0IGxpa2UgYSBzeW1ib2xpYyBsaW5rIGluIFVuaXgtbGlrZSBvcGVyYXRpbmcgc3lzdGVtcy5cblxuQ3JlYXRpbmcgYSBzaG9ydGN1dFxuPT09PT09PT09PT09PT09PT09PVxuXG5TaG9ydGN1dHMgYXJlIGNyZWF0ZWQgYnkgY2FsbGluZyB0aGUgYGBTaG9ydGN1dGBgIGNsYXNzJ3MgY29uc3RydWN0b3Igd2l0aCBhXG50YXJnZXQsIHBhcmVudCwgYW5kIG5hbWU6OlxuXG4gICAgPj4+IGZyb20gemMuc2hvcnRjdXQuc2hvcnRjdXQgaW1wb3J0IFNob3J0Y3V0XG4gICAgPj4+IGNsYXNzIE15VGFyZ2V0OlxuICAgIC4uLiAgICAgYXR0ciA9ICdoaSdcbiAgICAuLi4gICAgIF9fcGFyZW50X18gPSAnT3JpZ2luYWwgUGFyZW50J1xuICAgIC4uLiAgICAgX19uYW1lX18gPSAnT3JpZ2luYWwgTmFtZSdcbiAgICA+Pj4gdGFyZ2V0ID0gTXlUYXJnZXQoKVxuICAgID4+PiBzYyA9IFNob3J0Y3V0KHRhcmdldClcbiAgICA+Pj4gc2MuX19wYXJlbnRfXyA9ICdNeSBQYXJlbnQnXG4gICAgPj4+IHNjLl9fbmFtZV9fID0gJ015IE5hbWUnXG5cbkEgc2hvcnRjdXQgcHJvdmlkZXMgYW4gYXR0cmlidXRlIHRvIGFjY2VzcyBpdHMgdGFyZ2V0OjpcblxuICAgID4+PiBzYy50YXJnZXRcbiAgICA8X19idWlsdGluX18uTXlUYXJnZXQgaW5zdGFuY2UgYXQgLi4uPlxuXG5BIHNob3J0Y3V0J3MgX19wYXJlbnRfXyBhbmQgX19uYW1lX18gYXJlIGluZGVwZW5kZW50IG9mIHRoZWlyIHRhcmdldDo6XG5cbiAgICA+Pj4gc2MuX19wYXJlbnRfX1xuICAgICdNeSBQYXJlbnQnXG4gICAgPj4+IHNjLnRhcmdldC5fX3BhcmVudF9fXG4gICAgJ09yaWdpbmFsIFBhcmVudCdcblxuICAgID4+PiBzYy5fX25hbWVfX1xuICAgICdNeSBOYW1lJ1xuICAgID4+PiBzYy50YXJnZXQuX19uYW1lX19cbiAgICAnT3JpZ2luYWwgTmFtZSdcblxuQnV0IHRoZSB0YXJnZXQga25vd3MgdGhlIHRyYXZlcnNhbCBwYXJlbnQsIHRoZSB0cmF2ZXJzYWwgbmFtZSwgYW5kIHRoZVxuc2hvcnRjdXQuICBUaGlzIGFsbG93cyB0aGUgc2hvcnRjdXQgdG8gaGF2ZSBhbm5vdGF0aW9ucyB0aGF0IG1heSBiZSBhY2Nlc3NlZFxuYnkgdmlld3MgYW5kIG90aGVyIGNvbXBvbmVudHMgdGhhdCByZW5kZXIgb3IgdXNlIHRoZSB0YXJnZXQuXG5cbiAgICA+Pj4gc2MudGFyZ2V0Ll9fdHJhdmVyc2VkX3BhcmVudF9fXG4gICAgJ015IFBhcmVudCdcbiAgICA+Pj4gc2MudGFyZ2V0Ll9fdHJhdmVyc2VkX25hbWVfX1xuICAgICdNeSBOYW1lJ1xuICAgID4+PiBzYy50YXJnZXQuX19zaG9ydGN1dF9fIGlzIHNjXG4gICAgVHJ1ZVxuXG5TZWUgcHJveHkudHh0IGFuZCBhZGFwdGVycy50eHQgZm9yIG1vcmUgZGV0YWlsc1xuXG49PT09PT09PT09PT09PT09PT09PT09PT1cblNob3J0Y3V0LXJlbGF0ZWQgcHJveGllc1xuPT09PT09PT09PT09PT09PT09PT09PT09XG5cblRoZSBgemMuc2hvcnRjdXQucHJveHlgIG1vZHVsZSBpbmNsdWRlcyBzb21lIGNvZGUgdXNlZnVsIG91dHNpZGUgb2ZcbnRoZSBzaG9ydGN1dCBwYWNrYWdlIGFuZCBzb21lIGNvZGUgc3BlY2lmaWNhbGx5IGZvciBzaG9ydGN1dCB1c2FnZS5cblxuVGhlIGdlbmVyYWxseSB1c2VmdWwgY29kZSBpbmNsdWRlcyBhIGRlY29yYXRvciBjbGFzcyB0aGF0IHB1dHMgZGVjb3JhdG9yXG5pbnRlcmZhY2VzIGJlZm9yZSBhbGwgb2YgdGhlIGludGVyZmFjZXMgb2YgdGhlIHdyYXBwZWQgb2JqZWN0ICh0aGUgb3Bwb3NpdGUgb2ZcbnRoZSBiZWhhdmlvciBvZiBgem9wZS5hcHAuZGVjb3JhdG9yLkRlY29yYXRvclNwZWNpZmljYXRpb25EZXNjcmlwdG9yYCkuICBJdFxuYWxzbyBpbmNsdWRlcyBhIHNwZWNpYWwgYGltcGxlbWVudHMoKWAgZnVuY3Rpb24gdGhhdCBzaG91bGQgYmUgdXNlZCB0byBkZWNsYXJlXG50aGF0IGEgcHJveHkgaW1wbGVtZW50cyBhIGdpdmVuIHNldCBvZiBpbnRlcmZhY2VzLiAgVXNpbmcgdGhlXG5gem9wZS5pbnRlcmZhY2UuaW1wbGVtZW50cygpYCBmdW5jdGlvbiBpbnN0ZWFkIHdpbGwgY2F1c2VcbmBpbnRlcmZhY2UuZGlyZWN0bHlQcm92aWRlcygpYCB0byBmYWlsIG9uIHRoZSBwcm94aWVkIG9iamVjdCAoYW5kIHdpbGwgYWxzb1xuaGF2ZSBzaWRlIGVmZmVjdHMgcG9zc2libHkgY2F1c2luZyBvdGhlciBwcm94aWVzIHdpdGggdGhlIHNhbWUgYmFzZSBjbGFzcyB0b1xuYWxzbyBiZSBicm9rZW4uXG5cbiAgICA+Pj4gZnJvbSB6b3BlIGltcG9ydCBpbnRlcmZhY2VcbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dCBpbXBvcnQgcHJveHlcbiAgICA+Pj4gY2xhc3MgSTEoaW50ZXJmYWNlLkludGVyZmFjZSk6XG4gICAgLi4uICAgICBwYXNzXG4gICAgLi4uXG4gICAgPj4+IGNsYXNzIEkyKGludGVyZmFjZS5JbnRlcmZhY2UpOlxuICAgIC4uLiAgICAgcGFzc1xuICAgIC4uLlxuICAgID4+PiBjbGFzcyBJMyhpbnRlcmZhY2UuSW50ZXJmYWNlKTpcbiAgICAuLi4gICAgIHBhc3NcbiAgICAuLi5cbiAgICA+Pj4gY2xhc3MgSTQoaW50ZXJmYWNlLkludGVyZmFjZSk6XG4gICAgLi4uICAgICBwYXNzXG4gICAgLi4uXG4gICAgPj4+IGNsYXNzIEQxKHByb3h5LkRlY29yYXRvcik6XG4gICAgLi4uICAgICBwcm94eS5pbXBsZW1lbnRzKEkxKVxuICAgIC4uLlxuICAgID4+PiBjbGFzcyBEMihwcm94eS5EZWNvcmF0b3IpOlxuICAgIC4uLiAgICAgcHJveHkuaW1wbGVtZW50cyhJMilcbiAgICAuLi5cbiAgICA+Pj4gY2xhc3MgWChvYmplY3QpOlxuICAgIC4uLiAgICAgaW50ZXJmYWNlLmltcGxlbWVudHMoSTMpXG4gICAgLi4uXG4gICAgPj4+IHggPSBYKClcbiAgICA+Pj4gW2kuZ2V0TmFtZSgpIGZvciBpIGluIGludGVyZmFjZS5wcm92aWRlZEJ5KEQxKHgpKV1cbiAgICBbJ0kxJywgJ0kzJ11cbiAgICA+Pj4gW2kuZ2V0TmFtZSgpIGZvciBpIGluIGludGVyZmFjZS5wcm92aWRlZEJ5KEQyKEQxKHgpKSldXG4gICAgWydJMicsICdJMScsICdJMyddXG4gICAgPj4+IGRlY194ID0gRDIoRDEoWCgpKSlcbiAgICA+Pj4gaW50ZXJmYWNlLmRpcmVjdGx5UHJvdmlkZXMoZGVjX3gsIEk0KVxuICAgID4+PiBbaS5nZXROYW1lKCkgZm9yIGkgaW4gaW50ZXJmYWNlLnByb3ZpZGVkQnkoZGVjX3gpXVxuICAgIFsnSTInLCAnSTEnLCAnSTQnLCAnSTMnXVxuXG5cblRhcmdldCBwcm94aWVzXG49PT09PT09PT09PT09PVxuXG5UYXJnZXQgcHJveGllcyBhcmUgdGhlIHByaW1hcnkgc2hvcnRjdXQtc3BlY2lmaWMgcHJveHkgdHlwZS5cbldoZW4gYSBzaG9ydGN1dCBpcyBhc2tlZCBmb3IgaXRzIHRhcmdldCBpdCBhY3R1YWxseSByZXR1cm5zIGEgcHJveHk6XG5cbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dC5zaG9ydGN1dCBpbXBvcnQgU2hvcnRjdXRcbiAgICA+Pj4gY2xhc3MgTXlUYXJnZXQ6XG4gICAgLi4uICAgICBhdHRyID0gJ2hpJ1xuICAgIC4uLiAgICAgX19wYXJlbnRfXyA9ICdPcmlnaW5hbCBQYXJlbnQnXG4gICAgLi4uICAgICBfX25hbWVfXyA9ICdPcmlnaW5hbCBOYW1lJ1xuICAgID4+PiB0YXJnZXQgPSBNeVRhcmdldCgpXG4gICAgPj4+IHNjID0gU2hvcnRjdXQodGFyZ2V0KVxuICAgID4+PiBzYy5fX3BhcmVudF9fID0gJ015IFBhcmVudCdcbiAgICA+Pj4gc2MuX19uYW1lX18gPSAnTXkgTmFtZSdcbiAgICA+Pj4gcHJveHkgPSBzYy50YXJnZXRcbiAgICA+Pj4gcHJveHkgaXMgdGFyZ2V0XG4gICAgRmFsc2VcblxuVGhlIHByb3h5IGFjdHMgYXMgdGhlIHRhcmdldDpcblxuICAgID4+PiBwcm94eSA9PSB0YXJnZXRcbiAgICBUcnVlXG5cbiAgICA+Pj4gdGFyZ2V0Ll9fcGFyZW50X19cbiAgICAnT3JpZ2luYWwgUGFyZW50J1xuICAgID4+PiBwcm94eS5fX3BhcmVudF9fXG4gICAgJ09yaWdpbmFsIFBhcmVudCdcblxuICAgID4+PiB0YXJnZXQuX19uYW1lX19cbiAgICAnT3JpZ2luYWwgTmFtZSdcbiAgICA+Pj4gcHJveHkuX19uYW1lX19cbiAgICAnT3JpZ2luYWwgTmFtZSdcblxuICAgID4+PiB0YXJnZXQuYXR0clxuICAgICdoaSdcbiAgICA+Pj4gcHJveHkuYXR0clxuICAgICdoaSdcblxuVGhlIHByb3h5IGFsc28gaGFzIGF0dHJpYnV0ZXMgcG9pbnQgdG8gdGhlIHNob3J0Y3V0IGFuZCBpdHMgcGFyZW50IGFuZFxubmFtZTpcblxuICAgID4+PiBwcm94eS5fX3Nob3J0Y3V0X18gaXMgc2NcbiAgICBUcnVlXG4gICAgPj4+IHByb3h5Ll9fdHJhdmVyc2VkX3BhcmVudF9fXG4gICAgJ015IFBhcmVudCdcbiAgICA+Pj4gcHJveHkuX190cmF2ZXJzZWRfbmFtZV9fXG4gICAgJ015IE5hbWUnXG5cbkFzIGRpc2N1c3NlZCBpbiBhZGFwdGVycy50eHQsIG9uY2UgYSB0cmF2ZXJzYWwgcGFzc2VzIHRocm91Z2ggYSBzaG9ydGN1dCwgYWxsXG5jb250YWluZWQgb2JqZWN0cyByZWNlaXZlIHRoZWlyIG93biB0YXJnZXQgcHJveGllcyBldmVuIGlmIHRoZXkgZGlkIG5vdFxudGhlbXNlbHZlcyBjb21lIGZyb20gYSBzaG9ydGN1dC4gIFRoZXkgaGF2ZSBgX190cmF2ZXJzZWRfcGFyZW50X19gIGFuZFxuYF9fdHJhdmVyc2VkX25hbWVfX2AgYXR0cmlidXRlcywgcG9pbnRpbmcgdG8gdGhlIHRhcmdldCBwcm94eSBvZiB0aGUgb2JqZWN0XG50cmF2ZXJzZWQgdG8gZmluZCB0aGVtIGFuZCB0aGUgbmFtZSB1c2VkLCByZXNwZWN0aXZlbHksIGJ1dCBubyBgX19zaG9ydGN1dF9fYFxuYXR0cmlidXRlOiB0aGV5IGVmZmVjdGl2ZWx5IGltcGxlbWVudCBgaW50ZXJmYWNlcy5JVHJhdmVyc2FsUHJveHlgIGFuZCBub3RcbmBpbnRlcmZhY2VzLklUYXJnZXRQcm94eWAuXG5cblRhcmdldCBwcm94aWVzIGFuZCB0aGUgem9wZSBpbnRlcmZhY2UgcGFja2FnZSBhcmUgYWJsZSB0byBjb2V4aXN0IHdpdGggb25lXG5hbm90aGVyIGhhcHBpbHkuICBGb3IgaW5zdGFuY2UsIGNvbnNpZGVyIHRoZSBjYXNlIG9mIGBkaXJlY3RseVByb3ZpZGVzKClgOlxuXG4gICAgPj4+IGxpc3QoaW50ZXJmYWNlLnByb3ZpZGVkQnkodGFyZ2V0KSlcbiAgICBbXVxuICAgID4+PiBpbXBvcnQgcHByaW50XG4gICAgPj4+IHBwcmludC5wcHJpbnQobGlzdChpbnRlcmZhY2UucHJvdmlkZWRCeShwcm94eSkpKVxuICAgIFs8SW50ZXJmYWNlQ2xhc3MgemMuc2hvcnRjdXQuaW50ZXJmYWNlcy5JVGFyZ2V0UHJveHk+XVxuICAgID4+PiBjbGFzcyBJRHVtbXkoaW50ZXJmYWNlLkludGVyZmFjZSk6XG4gICAgLi4uICAgICBcImR1bW15IGludGVyZmFjZVwiXG4gICAgLi4uXG4gICAgPj4+IGludGVyZmFjZS5kaXJlY3RseVByb3ZpZGVzKHByb3h5LCBJRHVtbXkpXG4gICAgPj4+IHBwcmludC5wcHJpbnQobGlzdChpbnRlcmZhY2UucHJvdmlkZWRCeShwcm94eSkpKVxuICAgIFs8SW50ZXJmYWNlQ2xhc3MgemMuc2hvcnRjdXQuaW50ZXJmYWNlcy5JVGFyZ2V0UHJveHk+LFxuICAgICA8SW50ZXJmYWNlQ2xhc3MgX19idWlsdGluX18uSUR1bW15Pl1cbiAgICA+Pj4gbGlzdChpbnRlcmZhY2UucHJvdmlkZWRCeSh0YXJnZXQpKVxuICAgIFs8SW50ZXJmYWNlQ2xhc3MgX19idWlsdGluX18uSUR1bW15Pl1cblxuPT09PT09PT1cbkFkYXB0ZXJzXG49PT09PT09PVxuXG5BZGFwdGVycyBhcmUgcHJvdmlkZWQgdG8gYWxsb3cgYSBzaG9ydGN1dCB0byBhY3QgYXMgdGhlIHRhcmdldCB3b3VsZCB3aGVuXG50cmF2ZXJzZWQuXG5cbklUcmF2ZXJzYWJsZVxuPT09PT09PT09PT09XG5cbkZpcnN0IHdlIGhhdmUgdG8gaW1wb3J0IHRoZSBpbnRlcmZhY2VzIHdlJ2xsIGJlIHdvcmtpbmcgd2l0aDo6XG5cbiAgICA+Pj4gZnJvbSB6b3BlLnB1Ymxpc2hlci5pbnRlcmZhY2VzIGltcG9ydCBJUmVxdWVzdFxuICAgID4+PiBmcm9tIHpvcGUucHVibGlzaGVyLmludGVyZmFjZXMuYnJvd3NlciBpbXBvcnQgSUJyb3dzZXJQdWJsaXNoZXJcbiAgICA+Pj4gZnJvbSB6b3BlLnRyYXZlcnNpbmcuaW50ZXJmYWNlcyBpbXBvcnQgSVRyYXZlcnNhYmxlXG4gICAgPj4+IGZyb20gemMuc2hvcnRjdXQuaW50ZXJmYWNlcyBpbXBvcnQgSVNob3J0Y3V0XG4gICAgPj4+IGZyb20gem9wZS5sb2NhdGlvbi5pbnRlcmZhY2VzIGltcG9ydCBJTG9jYXRpb25cbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dCBpbXBvcnQgaW50ZXJmYWNlc1xuXG5JZiB3ZSBoYXZlIGEgdGFyZ2V0IG9iamVjdCB3aXRoIGEgcm9vdDo6XG5cbiAgICA+Pj4gZnJvbSB6b3BlIGltcG9ydCBpbnRlcmZhY2UsIGNvbXBvbmVudFxuICAgID4+PiBjbGFzcyBJU3BhbShpbnRlcmZhY2UuSW50ZXJmYWNlKTpcbiAgICAuLi4gICAgIHBhc3NcblxuICAgID4+PiBjbGFzcyBTcGFtOlxuICAgIC4uLiAgICAgaW50ZXJmYWNlLmltcGxlbWVudHMoSVNwYW0sIElMb2NhdGlvbilcbiAgICAuLi4gICAgIGRlZiBfX2luaXRfXyhzZWxmLCBwYXJlbnQsIG5hbWUpOlxuICAgIC4uLiAgICAgICAgIHNlbGYuX19wYXJlbnRfXyA9IHBhcmVudFxuICAgIC4uLiAgICAgICAgIHNlbGYuX19uYW1lX18gPSBuYW1lXG5cbiAgICA+Pj4gZnJvbSB6b3BlLnRyYXZlcnNpbmcuaW50ZXJmYWNlcyBpbXBvcnQgSUNvbnRhaW5tZW50Um9vdFxuICAgID4+PiBjbGFzcyBEdW1teUNvbnRhaW5tZW50Um9vdChvYmplY3QpOlxuICAgIC4uLiAgICAgX19wYXJlbnRfXyA9IF9fbmFtZV9fID0gTm9uZVxuICAgIC4uLiAgICAgaW50ZXJmYWNlLmltcGxlbWVudHMoSUNvbnRhaW5tZW50Um9vdClcbiAgICAuLi5cbiAgICA+Pj4gcm9vdCA9IER1bW15Q29udGFpbm1lbnRSb290KClcblxuICAgID4+PiByZWFsX3BhcmVudCA9IFNwYW0ocm9vdCwgJ3JlYWxfcGFyZW50JylcbiAgICA+Pj4gdGFyZ2V0ID0gU3BhbShyZWFsX3BhcmVudCwgJ3RhcmdldCcpXG5cblRoZSB0YXJnZXQgb2JqZWN0IHByb3ZpZGVzIGEgbXVsdGlhZGFwdGVyIGZvciB0aGUgdGFyZ2V0IGFuZCByZXF1ZXN0IHRvIGFuXG5JVHJhdmVyc2FibGUgc28gaXQgY2FuIGJlIHRyYXZlcnNlZDo6XG5cbiAgICA+Pj4gY2xhc3MgU3BhbVRyYXZlcnNhYmxlQWRhcHRlcjpcbiAgICAuLi4gICAgIGludGVyZmFjZS5pbXBsZW1lbnRzKElUcmF2ZXJzYWJsZSlcbiAgICAuLi4gICAgIGNvbXBvbmVudC5hZGFwdHMoSVNwYW0sIElSZXF1ZXN0KVxuICAgIC4uLiAgICAgZGVmIF9faW5pdF9fKHNlbGYsIHNwYW0sIHJlcXVlc3QpOlxuICAgIC4uLiAgICAgICAgIHNlbGYuc3BhbSA9IHNwYW1cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFNwYW1UcmF2ZXJzYWJsZUFkYXB0ZXIsIG5hbWU9J3ZpZXcnKVxuXG5UaGVyZSBpcyBhbiBhZGFwdGVyIHRvIHJldHVybiB0aGUgdGFyZ2V0IG9iamVjdCBhZGFwdGVkIHRvIElUcmF2ZXJzYWJsZSB3aGVuXG5hIHNob3J0Y3V0IGFuZCByZXF1ZXN0IGlzIGFkYXB0ZWQgdG8gSVRyYXZlcnNhYmxlLiAgRm9yIGV4YW1wbGUgaWYgd2UgY3JlYXRlXG5hIHNob3J0Y3V0IHRvIG91ciB0YXJnZXQ6OlxuXG4gICAgPj4+IGZyb20gemMuc2hvcnRjdXQuc2hvcnRjdXQgaW1wb3J0IFNob3J0Y3V0XG4gICAgPj4+IHNob3J0Y3V0ID0gU2hvcnRjdXQodGFyZ2V0KVxuICAgID4+PiBzaG9ydGN1dF9wYXJlbnQgPSBTcGFtKHJvb3QsICdzaG9ydGN1dF9wYXJlbnQnKVxuICAgID4+PiBzaG9ydGN1dC5fX3BhcmVudF9fID0gc2hvcnRjdXRfcGFyZW50XG4gICAgPj4+IHNob3J0Y3V0Ll9fbmFtZV9fID0gJ3Nob3J0Y3V0J1xuXG5BbmQgY2FsbCB0aGUgYWRhcHRlciB3aXRoIGEgcmVxdWVzdDo6XG5cbiAgICA+Pj4gZnJvbSB6b3BlLnB1Ymxpc2hlci5icm93c2VyIGltcG9ydCBUZXN0UmVxdWVzdFxuICAgID4+PiBmcm9tIHpjLnNob3J0Y3V0LmFkYXB0ZXJzIGltcG9ydCBTaG9ydGN1dFRyYXZlcnNhbEFkYXB0ZXJGYWN0b3J5XG5cbiAgICA+Pj4gcmVxdWVzdCA9IFRlc3RSZXF1ZXN0KClcbiAgICA+Pj4gYWRhcHRlciA9IFNob3J0Y3V0VHJhdmVyc2FsQWRhcHRlckZhY3Rvcnkoc2hvcnRjdXQsIHJlcXVlc3QpXG5cblRoZSByZXN1bHQgaXMgdGhlIHRhcmdldCdzIElUcmF2ZXJzYWwgYWRhcHRlcjo6XG5cbiAgICA+Pj4gYWRhcHRlclxuICAgIDwuLi5TcGFtVHJhdmVyc2FibGVBZGFwdGVyIGluc3RhbmNlIGF0Li4uPlxuXG4gICAgPj4+IGFkYXB0ZXIuc3BhbVxuICAgIDwuLi5TcGFtIGluc3RhbmNlIGF0Li4uPlxuXG5TaG9ydGN1dCB0cmF2ZXJzYWxcbj09PT09PT09PT09PT09PT09PVxuXG5TaG9ydGN1dCB0cmF2ZXJzYWwgaXMgdW5wbGVhc2FudGx5IHRyaWNreS4gIEZpcnN0IGNvbnNpZGVyIHRoZSBjYXNlIG9mXG50cmF2ZXJzaW5nIGEgc2hvcnRjdXQgYW5kIHRoZW4gdHJhdmVyc2luZyB0byBnZXQgdGhlIGRlZmF1bHQgdmlld1xuKCdpbmRleC5odG1sJykuICBJbiB0aGF0IGNhc2UsIHRoZSBzaG9ydGN1dCB3aWxsIGJlIGF2YWlsYWJsZSB0byB0aGUgdmlldyxcbmFuZCBicmVhZGNydW1icyBhbmQgb3RoZXIgdmlldyBlbGVtZW50cyB0aGF0IGNhcmUgYWJvdXQgaG93IHRoZSBvYmplY3Qgd2FzXG50cmF2ZXJzZWQgd2lsbCBtZXJlbHkgbmVlZCB0byBsb29rIGF0IHRoZSBzaG9ydGN1dCdzIF9fcGFyZW50X18sIG9yIHRoZVxudGFyZ2V0IHByb3h5J3MgX190cmF2ZXJzZWRfcGFyZW50X18uICBUaGlzIGlzIG5vdCB0b28gYmFkLlxuXG5JdCBiZWNvbWVzIG1vcmUgaW50ZXJlc3RpbmcgaWYgb25lIHRyYXZlcnNlcyB0aHJvdWdoIGEgc2hvcnRjdXQgdG8gYW5vdGhlclxuY29udGVudCBvYmplY3QuICBBIG5haXZlIGltcGxlbWVudGF0aW9uIHdpbGwgdHJhdmVyc2UgdGhlIHNob3J0Y3V0IGJ5XG5jb252ZXJ0aW5nIGl0IHRvIGl0cyB0YXJnZXQsIGFuZCB0aGVuIHRyYXZlcnNpbmcgdGhlIHRhcmdldCB0byBnZXQgdGhlXG5jb250YWluZWQgY29udGVudCBvYmplY3QuICBIb3dldmVyLCB2aWV3cyBmb3IgdGhlIGNvbnRlbnQgb2JqZWN0IHdpbGwgaGF2ZSBub1xuaWRlYSBvZiB0aGUgdHJhdmVyc2FsIHBhdGggdXNlZCB0byBnZXQgdG8gdGhlIGNvbnRlbnQgb2JqZWN0OiB0aGV5IHdpbGwgb25seVxuaGF2ZSB0aGUgX19wYXJlbnRfXyBvZiB0aGUgY29udGVudCBvYmplY3QsIHdoaWNoIGlzIHRoZSBzaG9ydGN1dCdzIHRhcmdldFxuKndpdGhvdXQgYW55IHRhcmdldCBwcm94eSouICBGcm9tIHRoZXJlIHRoZXkgd2lsbCBiZSBhYmxlIHRvIGZpbmQgdGhlIHRhcmdldCdzXG5wYXJlbnQsIGJ1dCBub3QgdGhlIHRyYXZlcnNlZCBzaG9ydGN1dCdzIHBhcmVudC4gIEJyZWFkY3J1bWJzIGFuZCBvdGhlclxuY29tcG9uZW50cyB0aGF0IGNhcmUgYWJvdXQgdHJhdmVyc2VkIHBhdGggd2lsbCBiZSBicm9rZW4uXG5cbkluIG9yZGVyIHRvIHNvbHZlIHRoaXMgdXNlIGNhc2UsIHRyYXZlcnNpbmcgYSBzaG9ydGN1dCBuZWVkcyB0byB0cmF2ZXJzZSB0aGVcbnRhcmdldCBhbmQgdGhlbiB3cmFwIHRoZSByZXN1bHRpbmcgb2JqZWN0IGluIGFub3RoZXIgdGFyZ2V0IHByb3h5IHRoYXRcbmhvbGRzIGEgcmVmZXJlbmNlIHRvIHRoZSBzaG9ydGN1dCdzIHRhcmdldCBwcm94eSBhcyBpdHMgdHJhdmVyc2VkIHBhcmVudC5cblxuVHJhdmVyc2luZyBhIHNob3J0Y3V0IGFuZCBmaW5kaW5nIGFub3RoZXIgc2hvcnRjdXQgaXMgc2xpZ2h0bHkgdHJpY2tpZXIgYWdhaW4uXG5JbiB0aGlzIGNhc2UsIHRoZSBzaG9ydGN1dCdzIHRhcmdldCdzIHByb3h5IHNob3VsZCBoYXZlIGEgcGFyZW50IHdoaWNoIGlzIHRoZVxuc2hvcnRjdXQncyBwcm94eSdzIHBhcmVudC5cblxuVHdvIGFkYXB0ZXJzIGFyZSBhdmFpbGFibGUgZm9yIElQdWJsaXNoVHJhdmVyc2U6IG9uZSBmb3Igc2hvcnRjdXRzLCBhbmQgb25lXG5mb3IgdHJhdmVyc2FsIHByb3hpZXMuIElmIGEgdHJhdmVyc2FsIHRhcmdldCBkb2Vzbid0IHByb3ZpZGUgSVB1Ymxpc2hUcmF2ZXJzZSxcbnRoZW4gaXQgc2hvdWxkIHByb3ZpZGUgYW4gYWRhcHRlcjo6XG5cbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dCBpbXBvcnQgYWRhcHRlcnNcbiAgICA+Pj4gZnJvbSB6b3BlLnB1Ymxpc2hlci5pbnRlcmZhY2VzIGltcG9ydCBJUHVibGlzaFRyYXZlcnNlXG4gICAgPj4+IGNoaWxkX3NwYW0gPSBTcGFtKHJlYWxfcGFyZW50LCAnY2hpbGRfc3BhbScpXG4gICAgPj4+IGNoaWxkX3Nob3J0Y3V0ID0gU2hvcnRjdXQoY2hpbGRfc3BhbSlcbiAgICA+Pj4gY2hpbGRfc2hvcnRjdXQuX19wYXJlbnRfXyA9IHNob3J0Y3V0XG4gICAgPj4+IGNoaWxkX3Nob3J0Y3V0Ll9fbmFtZV9fID0gJ2NoaWxkX3Nob3J0Y3V0J1xuICAgID4+PiBjbGFzcyBTcGFtUHVibGlzaFRyYXZlcnNlQWRhcHRlcjpcbiAgICAuLi4gICAgIGludGVyZmFjZS5pbXBsZW1lbnRzKElQdWJsaXNoVHJhdmVyc2UpXG4gICAgLi4uICAgICBjb21wb25lbnQuYWRhcHRzKElTcGFtLCBJUmVxdWVzdClcbiAgICAuLi4gICAgIGRlZiBfX2luaXRfXyhzZWxmLCBzcGFtLCByZXF1ZXN0KTpcbiAgICAuLi4gICAgICAgICBzZWxmLnNwYW0gPSBzcGFtXG4gICAgLi4uICAgICBkZWYgcHVibGlzaFRyYXZlcnNlKHNlbGYsIHJlcXVlc3QsIG5hbWUpOlxuICAgIC4uLiAgICAgICAgIHByaW50ICdTcGFtUHVibGlzaFRyYXZlcnNlQWRhcHRlciBoYXMgYmVlbiB0cmF2ZXJzZWQuJ1xuICAgIC4uLiAgICAgICAgIHJldHVybiB7J2NoaWxkX3NwYW0nOiBjaGlsZF9zcGFtLFxuICAgIC4uLiAgICAgICAgICAgICAgICAgJ2NoaWxkX3Nob3J0Y3V0JzogY2hpbGRfc2hvcnRjdXR9W25hbWVdXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihTcGFtUHVibGlzaFRyYXZlcnNlQWRhcHRlcilcblxuSWYgaXQgZG9lcywgdGhlIGFkYXB0ZXIgd2lsbCBiZSB1c2VkIHRvIGRvIHRoZSB0cmF2ZXJzYWw6OlxuXG4gICAgPj4+IGFkYXB0ZXIgPSBhZGFwdGVycy5TaG9ydGN1dFB1Ymxpc2hUcmF2ZXJzZUFkYXB0ZXIoc2hvcnRjdXQsIHJlcXVlc3QpXG4gICAgPj4+IGFkYXB0ZXJcbiAgICA8Li4uU2hvcnRjdXRQdWJsaXNoVHJhdmVyc2VBZGFwdGVyIG9iamVjdCBhdC4uLj5cbiAgICA+Pj4gZnJvbSB6b3BlLmludGVyZmFjZS52ZXJpZnkgaW1wb3J0IHZlcmlmeU9iamVjdFxuICAgID4+PiB2ZXJpZnlPYmplY3QoSVB1Ymxpc2hUcmF2ZXJzZSwgYWRhcHRlcilcbiAgICBUcnVlXG4gICAgPj4+IHJlcyA9IGFkYXB0ZXIucHVibGlzaFRyYXZlcnNlKHJlcXVlc3QsICdjaGlsZF9zcGFtJylcbiAgICBTcGFtUHVibGlzaFRyYXZlcnNlQWRhcHRlciBoYXMgYmVlbiB0cmF2ZXJzZWQuXG5cbk5vdGljZSB0aGF0IHRoZSB0cmF2ZXJzZWQgb2JqZWN0IGhhcyBhIHRyYXZlcnNhbCBwcm94eSAoYnV0IG5vdCBhIHRhcmdldFxucHJveHkpLlxuXG4gICAgPj4+IGludGVyZmFjZXMuSVRyYXZlcnNhbFByb3h5LnByb3ZpZGVkQnkocmVzKVxuICAgIFRydWVcbiAgICA+Pj4gaW50ZXJmYWNlcy5JVGFyZ2V0UHJveHkucHJvdmlkZWRCeShyZXMpXG4gICAgRmFsc2VcbiAgICA+Pj4gcmVzLl9fdHJhdmVyc2VkX3BhcmVudF9fID09IHNob3J0Y3V0LnRhcmdldFxuICAgIFRydWVcbiAgICA+Pj4gcmVzLl9fdHJhdmVyc2VkX25hbWVfX1xuICAgICdjaGlsZF9zcGFtJ1xuICAgID4+PiByZXMuX190cmF2ZXJzZWRfcGFyZW50X18uX19zaG9ydGN1dF9fIGlzIHNob3J0Y3V0XG4gICAgVHJ1ZVxuICAgID4+PiByZXMuX190cmF2ZXJzZWRfcGFyZW50X18uX190cmF2ZXJzZWRfcGFyZW50X18gaXMgc2hvcnRjdXRfcGFyZW50XG4gICAgVHJ1ZVxuXG5UbyB0cmF2ZXJzZSBmdXJ0aGVyIGRvd24gYW5kIHN0aWxsIGtlZXAgdGhlIHRyYXZlcnNhbCBpbmZvcm1hdGlvbiwgd2UgbmVlZCB0b1xucmVnaXN0ZXIgdGhlIFByb3h5UHVibGlzaFRyYXZlcnNlQWRhcHRlci4gIE5vdGljZSB0aGF0IHdlIHdpbGwgYWxzbyB0cmF2ZXJzZVxudG8gYSBzaG9ydGN1dCB0aGlzIHRpbWUsIGFuZCBsb29rIGF0IHRoZSB0cmF2ZXJzYWwgdHJhaWwgdXAgZnJvbSB0aGUgc2hvcnRjdXRcbmFuZCBmcm9tIGl0cyB0YXJnZXQuXG5cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKGFkYXB0ZXJzLlByb3h5UHVibGlzaFRyYXZlcnNlQWRhcHRlcilcbiAgICA+Pj4gZnJvbSB6b3BlIGltcG9ydCBjb21wb25lbnRcbiAgICA+Pj4gYWRhcHRlciA9IGNvbXBvbmVudC5nZXRNdWx0aUFkYXB0ZXIoKHJlcywgcmVxdWVzdCksIElQdWJsaXNoVHJhdmVyc2UpXG4gICAgPj4+IHJlcyA9IGFkYXB0ZXIucHVibGlzaFRyYXZlcnNlKHJlcXVlc3QsICdjaGlsZF9zaG9ydGN1dCcpXG4gICAgU3BhbVB1Ymxpc2hUcmF2ZXJzZUFkYXB0ZXIgaGFzIGJlZW4gdHJhdmVyc2VkLlxuICAgID4+PiByZXMuX190cmF2ZXJzZWRfcGFyZW50X18gPT0gY2hpbGRfc3BhbVxuICAgIFRydWVcbiAgICA+Pj4gcmVzLl9fdHJhdmVyc2VkX25hbWVfX1xuICAgICdjaGlsZF9zaG9ydGN1dCdcbiAgICA+Pj4gcmVzLl9fdHJhdmVyc2VkX3BhcmVudF9fLl9fdHJhdmVyc2VkX3BhcmVudF9fID09IHNob3J0Y3V0LnRhcmdldFxuICAgIFRydWVcbiAgICA+Pj4gcmVzLnRhcmdldC5fX3RyYXZlcnNlZF9wYXJlbnRfXy5fX3RyYXZlcnNlZF9wYXJlbnRfXyA9PSBzaG9ydGN1dC50YXJnZXRcbiAgICBUcnVlXG5cbklmLCBpbnN0ZWFkLCB0aGUgdGFyZ2V0IGltcGxlbWVudHMgSVB1Ymxpc2hUcmF2ZXJzZSBpdHNlbGYuLi46OlxuXG4gICAgPj4+IGNsYXNzIFNwYW1XaXRoUHVibGlzaFRyYXZlcnNlKFNwYW0pOlxuICAgIC4uLiAgICAgaW50ZXJmYWNlLmltcGxlbWVudHMoSVB1Ymxpc2hUcmF2ZXJzZSlcbiAgICAuLi4gICAgIGRlZiBwdWJsaXNoVHJhdmVyc2Uoc2VsZiwgcmVxdWVzdCwgbmFtZSk6XG4gICAgLi4uICAgICAgICAgcHJpbnQgJ1NwYW1XaXRoUHVibGlzaFRyYXZlcnNlIGhhcyBiZWVuIHRyYXZlcnNlZC4nXG4gICAgLi4uICAgICAgICAgcmV0dXJuIHsnY2hpbGRfc3BhbSc6IGNoaWxkX3NwYW0sXG4gICAgLi4uICAgICAgICAgICAgICAgICAnY2hpbGRfc2hvcnRjdXQnOiBjaGlsZF9zaG9ydGN1dH1bbmFtZV1cblxuLi4udGhlbiBpdCdzIGBwdWJsaXNoVHJhdmVyc2UoKWAgd2lsbCBiZSBjYWxsZWQgZGlyZWN0bHk6OlxuXG4gICAgPj4+IHNwYW0gPSBTcGFtV2l0aFB1Ymxpc2hUcmF2ZXJzZShyZWFsX3BhcmVudCwgJ3NwZWNpYWxfc3BhbScpXG4gICAgPj4+IHNob3J0Y3V0ID0gU2hvcnRjdXQoc3BhbSlcbiAgICA+Pj4gc2hvcnRjdXQuX19wYXJlbnRfXyA9IHNob3J0Y3V0X3BhcmVudFxuICAgID4+PiBzaG9ydGN1dC5fX25hbWVfXyA9ICdzcGVjaWFsX3NwYW1fc2hvcnRjdXQnXG4gICAgPj4+IGFkYXB0ZXIgPSBhZGFwdGVycy5TaG9ydGN1dFB1Ymxpc2hUcmF2ZXJzZUFkYXB0ZXIoc2hvcnRjdXQsIHJlcXVlc3QpXG4gICAgPj4+IGFkYXB0ZXJcbiAgICA8Li4uU2hvcnRjdXRQdWJsaXNoVHJhdmVyc2VBZGFwdGVyIG9iamVjdCBhdC4uLj5cblxuICAgID4+PiBhbm90aGVyID0gYWRhcHRlci5wdWJsaXNoVHJhdmVyc2UocmVxdWVzdCwgJ2NoaWxkX3NwYW0nKVxuICAgIFNwYW1XaXRoUHVibGlzaFRyYXZlcnNlIGhhcyBiZWVuIHRyYXZlcnNlZC5cblxuRW5kaW5nIHRyYXZlcnNhbCBhdCBhIHNob3J0Y3V0XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuV2hlbiBhIHNob3J0Y3V0IGlzIHRoZSB0YXJnZXQgb2YgYSBVUkwgdHJhdmVyc2FsLCByYXRoZXIgdGhhbiBhIG5vZGVcbmFsb25nIHRoZSB3YXksIHRoZSBsZWFmLW5vZGUgaGFuZGxpbmcgb2YgdGhlIHRhcmdldCBvYmplY3QgbXVzdCBiZVxuaW52b2tlZCBzbyB0aGF0IHRoZSBzaG9ydGN1dCBiZWhhdmVzIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgd291bGRcbndvdWxkIHdoZW4gYWNjZXNzZWQgZGlyZWN0bHkuXG5cbldoZW4gYSBVUkwgZnJvbSBhIHJlcXVlc3QgcmVwcmVzZW50cyBhbiBvYmplY3QgKHJhdGhlciB0aGFuIGEgdmlldyksXG50aGUgcHVibGlzaGVyIHVzZXMgdGhlIGBicm93c2VyRGVmYXVsdCgpYCBtZXRob2Qgb2YgdGhlXG5gSUJyb3dzZXJQdWJsaXNoZXJgIGludGVyZmFjZSB0byBkZXRlcm1pbmUgaG93IHRoZSBvYmplY3Qgc2hvdWxkIGJlXG5oYW5kbGVkLiAgVGhpcyBtZXRob2QgcmV0dXJucyBhbiBvYmplY3QgYW5kIGEgc2VxdWVuY2VzIG9mIHBhdGhcbmVsZW1lbnRzIHRoYXQgc2hvdWxkIGJlIHRyYXZlcnNlZC5cblxuRm9yIHNob3J0Y3V0cywgdGhpcyBpcyBoYW5kbGVkIGJ5IGRlbGVnYXRpbmcgdG8gdGhlIHRhcmdldCBvZiB0aGVcbnNob3J0Y3V0LCBzdWJzdGl0dXRpbmcgYSBwcm94eSBmb3IgdGhlIHRhcmdldCBzbyB0aGUgdHJhdmVyc2VkVVJMIHZpZXdcbmFuZCBicmVhZGNydW1icyBzdGlsbCB3b3JrIGNvcnJlY3RseS5cblxuTGV0J3Mgc3RhcnQgYnkgZGVmaW5pbmcgYW4gYElCcm93c2VyUHVibGlzaGVyYCBmb3IgYElTcGFtYCBvYmplY3RzOjpcblxuICAgID4+PiBjbGFzcyBTcGFtQnJvd3NlclB1Ymxpc2hlckFkYXB0ZXIoU3BhbVB1Ymxpc2hUcmF2ZXJzZUFkYXB0ZXIpOlxuICAgIC4uLiAgICAgaW50ZXJmYWNlLmltcGxlbWVudHMoSUJyb3dzZXJQdWJsaXNoZXIpXG4gICAgLi4uICAgICBkZWYgYnJvd3NlckRlZmF1bHQoc2VsZiwgcmVxdWVzdCk6XG4gICAgLi4uICAgICAgICAgcHJpbnQgXCJicm93c2VyRGVmYXVsdCBmb3JcIiwgcmVwcihzZWxmLnNwYW0pXG4gICAgLi4uICAgICAgICAgcmV0dXJuIHNlbGYuc3BhbSwgKFwiQEBmb28uaHRtbFwiLClcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFNwYW1Ccm93c2VyUHVibGlzaGVyQWRhcHRlcixcbiAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVzPUlCcm93c2VyUHVibGlzaGVyKVxuXG4gICAgPj4+IGFkYXB0ZXIuYnJvd3NlckRlZmF1bHQocmVxdWVzdCkgICMgZG9jdGVzdDogK0VMTElQU0lTXG4gICAgYnJvd3NlckRlZmF1bHQgZm9yIDwuLi5TcGFtV2l0aFB1Ymxpc2hUcmF2ZXJzZSBpbnN0YW5jZSBhdCAweC4uLj5cbiAgICAoPC4uLlNwYW1XaXRoUHVibGlzaFRyYXZlcnNlIGluc3RhbmNlIGF0IDB4Li4uPiwgKCdAQGZvby5odG1sJywpKVxuXG5cbnRyYXZlcnNlZFVSTFxuPT09PT09PT09PT09XG5cbklmIHNob3J0Y3V0cyBhcmUgdHJhdmVyc2VkLCBhbiBhYnNvbHV0ZSB1cmwgY2FuIGxlYWQgYSB1c2VyIHRvIHVuZXhwZWN0ZWRcbmxvY2F0aW9ucy0tdG8gdGhlIHJlYWwgbG9jYXRpb24gb2YgdGhlIG9iamVjdCwgcmF0aGVyIHRoYW4gdG8gdGhlIHRyYXZlcnNlZFxubG9jYXRpb24uICBJbiBvcmRlciB0byBnZXQgdGhlIHRyYXZlcnNlZCB1cmwsIHRoZSBhZGFwdGVycyBtb2R1bGUgcHJvdmlkZXMgYVxudHJhdmVyc2VkVVJMIGZ1bmN0aW9uLCBhbmQgdGhlIHNob3J0Y3V0IHBhY2thZ2UgYWxzbyBvZmZlcnMgaXQgZnJvbSBpdHNcbl9faW5pdF9fLnB5LlxuXG5HaXZlbiB0aGUgcmVzdWx0IG9mIHRoZSBuZXh0LXRvLWxhc3Qgc2hvcnRjdXQgdHJhdmVyc2FsIGRlc2NyaWJlZFxuYWJvdmUsIGZvciBpbnN0YW5jZSwgdHJhdmVyc2VkVVJMIHJldHVybnMgYSBVUkwgdGhhdCBiZWhhdmVzIHNpbWlsYXJseSB0b1xuYWJzb2x1dGVVUkwgZXhjZXB0IHdoZW4gaXQgZW5jb3VudGVycyB0YXJnZXQgcHJveGllcywgYXQgd2hpY2ggcG9pbnQgdGhlXG50cmF2ZXJzYWwgcGFyZW50cyBhcmUgdXNlZCByYXRoZXIgdGhhbiB0aGUgYWN0dWFsIHBhcmVudHMuXG5cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKGFkYXB0ZXJzLlRyYXZlcnNlZFVSTClcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKGFkYXB0ZXJzLkZhbGxiYWNrVHJhdmVyc2VkVVJMKVxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoYWRhcHRlcnMuUm9vdFRyYXZlcnNlZFVSTClcbiAgICA+Pj4gYWRhcHRlcnMudHJhdmVyc2VkVVJMKHJlcywgcmVxdWVzdClcbiAgICAnaHR0cDovLzEyNy4wLjAuMS9zaG9ydGN1dF9wYXJlbnQvc2hvcnRjdXQvY2hpbGRfc3BhbS9jaGlsZF9zaG9ydGN1dCdcblxuTGlrZSBhYnNvbHV0ZVVSTCwgdGhlIHJldHVybmVkIHZhbHVlIGlzIGh0bWwgZXNjYXBlZC5cblxuICAgID4+PiBzaG9ydGN1dF9wYXJlbnQuX19uYW1lX18gPSAnc2hvcnRjdXQgcGFyZW50J1xuICAgID4+PiBhZGFwdGVycy50cmF2ZXJzZWRVUkwocmVzLCByZXF1ZXN0KVxuICAgICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50L3Nob3J0Y3V0L2NoaWxkX3NwYW0vY2hpbGRfc2hvcnRjdXQnXG5cbkFsc28gbGlrZSBhYnNvbHV0ZVVSTCwgdHJhdmVyc2VkVVJMIGlzIHJlZ2lzdGVyZWQgYXMgYSB2aWV3IHNvIGl0IGNhbiBiZSB1c2VkXG53aXRoaW4gcGFnZSB0ZW1wbGF0ZXMgKGFzIGluIGNvbnRleHQvQEB0cmF2ZXJzZWRVUkwpLlxuXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihhZGFwdGVycy50cmF2ZXJzZWRVUkwsIG5hbWU9XCJ0cmF2ZXJzZWRVUkxcIilcbiAgICA+Pj4gY29tcG9uZW50LmdldE11bHRpQWRhcHRlcigocmVzLCByZXF1ZXN0KSwgbmFtZT0ndHJhdmVyc2VkVVJMJylcbiAgICAnaHR0cDovLzEyNy4wLjAuMS9zaG9ydGN1dCUyMHBhcmVudC9zaG9ydGN1dC9jaGlsZF9zcGFtL2NoaWxkX3Nob3J0Y3V0J1xuXG5CcmVhZGNydW1ic1xuPT09PT09PT09PT1cblxuVGhlIHpjLmRpc3BsYXluYW1lIHBhY2thZ2UgcHJvdmlkZXMgYSB3YXkgdG8gb2J0YWluIGJyZWFkY3J1bWJzIHRoYXQgaXMgbm90XG50aWVkIHRvIHRoZSB6b3BlIElBYnNvbHV0ZVVSTCBpbnRlcmZhY2UgYW5kIHRoYXQgdGFrZXMgYWR2YW50YWdlIG9mXG56Yy5kaXNwbGF5bmFtZSBmZWF0dXJlcyBsaWtlIHRoZSBkaXNwbGF5IG5hbWUgZ2VuZXJhdG9yLiAgVGhlIHpjLnNob3J0Y3V0XG5wYWNrYWdlIGluY2x1ZGVzIGEgYnJlYWRjcnVtYiBhZGFwdGVyIGZvciB0aGUgemMuZGlzcGxheW5hbWUgaW50ZXJmYWNlIHRoYXQgaXNcbmF3YXJlIG9mIHRoZSB0cmF2ZXJzYWwgcHJveGllcyB0aGF0IGFyZSBwYXJ0IG9mIHRoZSBzaG9ydGN1dCBwYWNrYWdlLlxuXG4gICAgPj4+IGltcG9ydCB6Yy5kaXNwbGF5bmFtZS5hZGFwdGVyc1xuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoemMuZGlzcGxheW5hbWUuYWRhcHRlcnMuQnJlYWRjcnVtYnMpXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcih6Yy5kaXNwbGF5bmFtZS5hZGFwdGVycy5UZXJtaW5hbEJyZWFkY3J1bWJzKVxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoemMuZGlzcGxheW5hbWUuYWRhcHRlcnMuRGVmYXVsdERpc3BsYXlOYW1lR2VuZXJhdG9yKVxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoemMuZGlzcGxheW5hbWUuYWRhcHRlcnMuU2l0ZURpc3BsYXlOYW1lR2VuZXJhdG9yKVxuICAgID4+PiBmcm9tIHpvcGUucHVibGlzaGVyLmludGVyZmFjZXMuaHR0cCBpbXBvcnQgSUhUVFBSZXF1ZXN0XG4gICAgPj4+IGZyb20gem9wZS50cmF2ZXJzaW5nLmJyb3dzZXIuaW50ZXJmYWNlcyBpbXBvcnQgSUFic29sdXRlVVJMXG4gICAgPj4+IGZyb20gem9wZS50cmF2ZXJzaW5nIGltcG9ydCBicm93c2VyXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihcbiAgICAuLi4gICAgIGJyb3dzZXIuQWJzb2x1dGVVUkwsIGFkYXB0cz0oTm9uZSwgSUhUVFBSZXF1ZXN0KSxcbiAgICAuLi4gICAgIHByb3ZpZGVzPUlBYnNvbHV0ZVVSTClcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFxuICAgIC4uLiAgICAgYnJvd3Nlci5TaXRlQWJzb2x1dGVVUkwsIGFkYXB0cz0oSUNvbnRhaW5tZW50Um9vdCwgSUhUVFBSZXF1ZXN0KSxcbiAgICAuLi4gICAgIHByb3ZpZGVzPUlBYnNvbHV0ZVVSTClcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFxuICAgIC4uLiAgICAgYnJvd3Nlci5BYnNvbHV0ZVVSTCwgYWRhcHRzPShOb25lLCBJSFRUUFJlcXVlc3QpLFxuICAgIC4uLiAgICAgcHJvdmlkZXM9aW50ZXJmYWNlLkludGVyZmFjZSwgbmFtZT0nYWJzb2x1dGVfdXJsJylcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFxuICAgIC4uLiAgICAgYnJvd3Nlci5TaXRlQWJzb2x1dGVVUkwsIGFkYXB0cz0oSUNvbnRhaW5tZW50Um9vdCwgSUhUVFBSZXF1ZXN0KSxcbiAgICAuLi4gICAgIHByb3ZpZGVzPWludGVyZmFjZS5JbnRlcmZhY2UsIG5hbWU9J2Fic29sdXRlX3VybCcpXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihhZGFwdGVycy5CcmVhZGNydW1icylcbiAgICA+Pj4gZnJvbSB6Yy5kaXNwbGF5bmFtZS5pbnRlcmZhY2VzIGltcG9ydCBJQnJlYWRjcnVtYnNcbiAgICA+Pj4gYmMgPSBjb21wb25lbnQuZ2V0TXVsdGlBZGFwdGVyKChyZXMsIHJlcXVlc3QpLCBJQnJlYWRjcnVtYnMpXG4gICAgPj4+IGltcG9ydCBwcHJpbnRcbiAgICA+Pj4gcHByaW50LnBwcmludChiYygpKSAjIGRvY3Rlc3Q6ICtFTExJUFNJUyArTk9STUFMSVpFX1dISVRFU1BBQ0VcbiAgICAoeyduYW1lJzogdSdbcm9vdF0nLFxuICAgICAgJ25hbWVfZ2VuJzogPHpjLmRpc3BsYXluYW1lLmFkYXB0ZXJzLlNpdGVEaXNwbGF5TmFtZUdlbmVyYXRvciBvYmplY3QgYXQgLi4uPixcbiAgICAgICdvYmplY3QnOiA8Li4uRHVtbXlDb250YWlubWVudFJvb3Qgb2JqZWN0IGF0IC4uLj4sXG4gICAgICAndXJsJzogJ2h0dHA6Ly8xMjcuMC4wLjEnfSxcbiAgICAgeyduYW1lJzogJ3Nob3J0Y3V0IHBhcmVudCcsXG4gICAgICAnbmFtZV9nZW4nOiA8emMuZGlzcGxheW5hbWUuYWRhcHRlcnMuRGVmYXVsdERpc3BsYXlOYW1lR2VuZXJhdG9yIG9iamVjdCBhdCAuLi4+LFxuICAgICAgJ29iamVjdCc6IDwuLi5TcGFtIGluc3RhbmNlIGF0IC4uLj4sXG4gICAgICAndXJsJzogJ2h0dHA6Ly8xMjcuMC4wLjEvc2hvcnRjdXQlMjBwYXJlbnQnfSxcbiAgICAgeyduYW1lJzogJ3RhcmdldCcsXG4gICAgICAnbmFtZV9nZW4nOiA8emMuZGlzcGxheW5hbWUuYWRhcHRlcnMuRGVmYXVsdERpc3BsYXlOYW1lR2VuZXJhdG9yIG9iamVjdCBhdCAuLi4+LFxuICAgICAgJ29iamVjdCc6IDwuLi5TcGFtIGluc3RhbmNlIGF0IC4uLj4sXG4gICAgICAndXJsJzogJ2h0dHA6Ly8xMjcuMC4wLjEvc2hvcnRjdXQlMjBwYXJlbnQvc2hvcnRjdXQnfSxcbiAgICAgeyduYW1lJzogJ2NoaWxkX3NwYW0nLFxuICAgICAgJ25hbWVfZ2VuJzogPHpjLmRpc3BsYXluYW1lLmFkYXB0ZXJzLkRlZmF1bHREaXNwbGF5TmFtZUdlbmVyYXRvciBvYmplY3QgYXQgLi4uPixcbiAgICAgICdvYmplY3QnOiA8Li4uU3BhbSBpbnN0YW5jZSBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50L3Nob3J0Y3V0L2NoaWxkX3NwYW0nfSxcbiAgICAgeyduYW1lJzogJ2NoaWxkX3Nob3J0Y3V0JyxcbiAgICAgICduYW1lX2dlbic6IDx6Yy5kaXNwbGF5bmFtZS5hZGFwdGVycy5EZWZhdWx0RGlzcGxheU5hbWVHZW5lcmF0b3Igb2JqZWN0IGF0IC4uLj4sXG4gICAgICAnb2JqZWN0JzogPHpjLnNob3J0Y3V0LnNob3J0Y3V0LlNob3J0Y3V0IG9iamVjdCBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50L3Nob3J0Y3V0L2NoaWxkX3NwYW0vY2hpbGRfc2hvcnRjdXQnfSlcbiAgICA+Pj4gcHByaW50LnBwcmludChiYyg2KSkgIyBkb2N0ZXN0OiArRUxMSVBTSVMgK05PUk1BTElaRV9XSElURVNQQUNFXG4gICAgKHsnbmFtZSc6IHUnW3Jvb3RdJyxcbiAgICAgICduYW1lX2dlbic6IDx6Yy5kaXNwbGF5bmFtZS5hZGFwdGVycy5TaXRlRGlzcGxheU5hbWVHZW5lcmF0b3Igb2JqZWN0IGF0IC4uLj4sXG4gICAgICAnb2JqZWN0JzogPC4uLkR1bW15Q29udGFpbm1lbnRSb290IG9iamVjdCBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xJ30sXG4gICAgIHsnbmFtZSc6ICdzaG8uLi4nLFxuICAgICAgJ25hbWVfZ2VuJzogPHpjLmRpc3BsYXluYW1lLmFkYXB0ZXJzLkRlZmF1bHREaXNwbGF5TmFtZUdlbmVyYXRvciBvYmplY3QgYXQgLi4uPixcbiAgICAgICdvYmplY3QnOiA8Li4uU3BhbSBpbnN0YW5jZSBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50J30sXG4gICAgIHsnbmFtZSc6ICd0YXJnZXQnLFxuICAgICAgJ25hbWVfZ2VuJzogPHpjLmRpc3BsYXluYW1lLmFkYXB0ZXJzLkRlZmF1bHREaXNwbGF5TmFtZUdlbmVyYXRvciBvYmplY3QgYXQgLi4uPixcbiAgICAgICdvYmplY3QnOiA8Li4uU3BhbSBpbnN0YW5jZSBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50L3Nob3J0Y3V0J30sXG4gICAgIHsnbmFtZSc6ICdjaGkuLi4nLFxuICAgICAgJ25hbWVfZ2VuJzogPHpjLmRpc3BsYXluYW1lLmFkYXB0ZXJzLkRlZmF1bHREaXNwbGF5TmFtZUdlbmVyYXRvciBvYmplY3QgYXQgLi4uPixcbiAgICAgICdvYmplY3QnOiA8Li4uU3BhbSBpbnN0YW5jZSBhdCAuLi4+LFxuICAgICAgJ3VybCc6ICdodHRwOi8vMTI3LjAuMC4xL3Nob3J0Y3V0JTIwcGFyZW50L3Nob3J0Y3V0L2NoaWxkX3NwYW0nfSxcbiAgICAgeyduYW1lJzogJ2NoaS4uLicsXG4gICAgICAnbmFtZV9nZW4nOiA8emMuZGlzcGxheW5hbWUuYWRhcHRlcnMuRGVmYXVsdERpc3BsYXlOYW1lR2VuZXJhdG9yIG9iamVjdCBhdCAuLi4+LFxuICAgICAgJ29iamVjdCc6IDx6Yy5zaG9ydGN1dC5zaG9ydGN1dC5TaG9ydGN1dCBvYmplY3QgYXQgLi4uPixcbiAgICAgICd1cmwnOiAnaHR0cDovLzEyNy4wLjAuMS9zaG9ydGN1dCUyMHBhcmVudC9zaG9ydGN1dC9jaGlsZF9zcGFtL2NoaWxkX3Nob3J0Y3V0J30pXG5cbkNvcHkgYW5kIExpbmtcbj09PT09PT09PT09PT1cblxuVGhlIHpvcGUuY29weXBhc3RlbW92ZSBwYWNrYWdlIHByb3ZpZGVzIGEgbnVtYmVyIG9mIGludGVyZmFjZXMgdG8gcHJvdmlkZVxuY29weSwgbW92ZSwgcmVuYW1lLCBhbmQgb3RoZXIgc2ltaWxhciBvcGVyYXRpb25zLiAgVGhlIHNob3J0Y3V0IHBhY2thZ2VcbnByb3ZpZGVzIGEgcmVwbGFjZW1lbnQgaW1wbGVtZW50YXRpb24gb2YgY29weSBmb3Igb2JqZWN0cyB0aGF0IGxvb2tzIHVwIGFcbnJlcG9zaXRvcnkgYW5kIHVzZXMgaXQgaWYgYXZhaWxhYmxlOyBhbiBpbXBsZW1lbnRhdGlvbiBvZlxuY29weSB0aGF0IGFjdHVhbGx5IG1ha2VzIHNob3J0Y3V0cyAodXNlZnVsIGZvciBpbW11dGFibGUgb2JqZWN0cyBzdG9yZWQgaW4gYVxucmVwb3NpdG9yeSk7IGFuZCBhbiBpbnRlcmZhY2UgYW5kIHR3byBpbXBsZW1lbnRhdGlvbnMsIG9uZSBmb3Igc2hvcnRjdXRzIGFuZFxub25lIGZvciBvdGhlciBvYmplY3RzLCBmb3IgYSBuZXcgYGxpbmtgIG9wZXJhdGlvbiwgd2hpY2ggbWFrZXMgYSBzaG9ydGN1dCB0b1xudGhlIHNlbGVjdGVkIG9iamVjdC5cblxuQ29weWluZyBhbiBPYmplY3Rcbi0tLS0tLS0tLS0tLS0tLS0tXG5cbklmIHlvdSB3YW50IGNvcHlpbmcgYW4gb2JqZWN0IHRvIHVzZSByZXBvc2l0b3JpZXMgaWYgdGhleSBhcmUgYXZhaWxhYmxlLCB0aGlzXG5hZGFwdGVyIHByb3ZpZGVzIHRoZSBmdW5jdGlvbmFsaXR5LiAgSXQgaXMgaW5zdGFsbGVkIGZvciBhbGwgb2JqZWN0cyBieVxuZGVmYXVsdCwgYnV0IGNvdWxkIGFsc28gYmUgY29uZmlndXJlZCBvbmx5IGZvciBjZXJ0YWluIGludGVyZmFjZXMuXG5cbkluIHRoZSBleGFtcGxlIGJlbG93LCBmaXJzdCB3ZSBzZXQgdXAgdGhlIGR1bW15IGNvbnRlbnQgb2JqZWN0cywgdGhlbiB3ZVxucmVnaXN0ZXIgdGhlIG5lY2Vzc2FyeSBhZGFwdGVycywgYW5kIHRoZW4gd2Ugc2V0IHVwIHNvbWUgZXZlbnQgbGlzdGVuZXIgY29kZVxudGhhdCB3ZSB1c2UgdG8gc2hvdyB3aGF0IGV2ZW50cyBhcmUgYmVpbmcgZmlyZWQuXG5cbiAgICA+Pj4gY2xhc3MgSUR1bW15KGludGVyZmFjZS5JbnRlcmZhY2UpOlxuICAgIC4uLiAgICAgcGFzc1xuICAgIC4uLlxuICAgID4+PiBpbXBvcnQgem9wZS5hcHAuY29udGFpbmVyLmludGVyZmFjZXNcbiAgICA+Pj4gY2xhc3MgRHVtbXkob2JqZWN0KTpcbiAgICAuLi4gICAgIGludGVyZmFjZS5pbXBsZW1lbnRzKFxuICAgIC4uLiAgICAgICAgIElEdW1teSwgem9wZS5hcHAuY29udGFpbmVyLmludGVyZmFjZXMuSUNvbnRhaW5lZClcbiAgICA+Pj4gY2xhc3MgRHVtbXlDb250YWluZXIoZGljdCk6XG4gICAgLi4uICAgICBpbnRlcmZhY2UuaW1wbGVtZW50cyh6b3BlLmFwcC5jb250YWluZXIuaW50ZXJmYWNlcy5JQ29udGFpbmVyKVxuICAgIC4uLiAgICAgX19wYXJlbnRfXyA9IF9fbmFtZV9fID0gTm9uZVxuICAgIC4uLiAgICAgZGVmIF9fcmVwcl9fKHNlbGYpOlxuICAgIC4uLiAgICAgICAgIHJldHVybiBcIjwlcyBhdCAlZD5cIiAlIChzZWxmLl9fY2xhc3NfXy5fX25hbWVfXywgaWQoc2VsZikpXG4gICAgLi4uXG4gICAgPj4+IHJlcG8gPSBEdW1teUNvbnRhaW5lcigpXG4gICAgPj4+IGZvbGRlciA9IER1bW15Q29udGFpbmVyKClcbiAgICA+Pj4gQGNvbXBvbmVudC5hZGFwdGVyKElEdW1teSlcbiAgICAuLi4gQGludGVyZmFjZS5pbXBsZW1lbnRlcih6b3BlLmFwcC5jb250YWluZXIuaW50ZXJmYWNlcy5JQ29udGFpbmVyKVxuICAgIC4uLiBkZWYgRHVtbXlSZXBvR2V0dGVyKGNvbnRlbnQpOlxuICAgIC4uLiAgICAgcmV0dXJuIHJlcG9cbiAgICAuLi5cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFxuICAgIC4uLiAgICAgRHVtbXlSZXBvR2V0dGVyLCBuYW1lPWludGVyZmFjZXMuUkVQT1NJVE9SWV9OQU1FKVxuICAgID4+PiBmcm9tIHpvcGUuYXBwLmNvbnRhaW5lci5jb250YWluZWQgaW1wb3J0IE5hbWVDaG9vc2VyXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihOYW1lQ2hvb3NlciwgYWRhcHRzPShpbnRlcmZhY2UuSW50ZXJmYWNlLCkpXG4gICAgPj4+ICMgbm93LCBiZWZvcmUgd2UgYWN0dWFsbHkgYWN0dWFsbHkgcnVuIHRoZSBhZGRpbmcgbWFjaGluZXJ5LCB3ZSdsbFxuICAgID4+PiAjIHNldCB1cCBzb21lIG1hY2hpbmVyeSB0aGF0IHdpbGwgbGV0IHVzIGxvb2sgYXQgZXZlbnRzIGZpcmluZ1xuICAgIC4uLlxuICAgID4+PiBoZWFyZF9ldmVudHMgPSBbXSAjIHdlJ2xsIGNvbGxlY3QgdGhlIGV2ZW50cyBoZXJlXG4gICAgPj4+IGZyb20gem9wZSBpbXBvcnQgZXZlbnRcbiAgICA+Pj4gZXZlbnQuc3Vic2NyaWJlcnMuYXBwZW5kKGhlYXJkX2V2ZW50cy5hcHBlbmQpXG4gICAgPj4+IGltcG9ydCBwcHJpbnRcbiAgICA+Pj4gZnJvbSB6b3BlIGltcG9ydCBpbnRlcmZhY2VcbiAgICA+Pj4gc2hvd0V2ZW50c1N0YXJ0ID0gMFxuICAgID4+PiBkZWYgaW5hbWUob2IpOlxuICAgIC4uLiAgICAgcmV0dXJuIGl0ZXIoaW50ZXJmYWNlLnByb3ZpZGVkQnkob2IpKS5uZXh0KCkuX19uYW1lX19cbiAgICAuLi5cbiAgICA+Pj4gZGVmIGdldElkKG9iKTpcbiAgICAuLi4gICAgIGlmIG9iIGlzIE5vbmUgb3IgaXNpbnN0YW5jZShvYiwgKGludCwgZmxvYXQsIGJhc2VzdHJpbmcsIHR1cGxlKSk6XG4gICAgLi4uICAgICAgICAgcmV0dXJuIFwiKCVyKVwiICUgKG9iLClcbiAgICAuLi4gICAgIGlkID0gZ2V0YXR0cihvYiwgJ2lkJywgZ2V0YXR0cihvYiwgJ19fbmFtZV9fJywgTm9uZSkpXG4gICAgLi4uICAgICBpZiBub3QgaWQ6XG4gICAgLi4uICAgICAgICAgaWQgPSBcImEgJXMgKCVzKVwiICUgKG9iLl9fY2xhc3NfXy5fX25hbWVfXywgaW5hbWUob2IpKVxuICAgIC4uLiAgICAgcmV0dXJuIGlkXG4gICAgLi4uXG4gICAgPj4+IGRlZiBzaG93RXZlbnRzKHN0YXJ0PU5vbmUpOiAjIHRvIGdlbmVyYXRlIGEgZnJpZW5kbHkgdmlldyBvZiBldmVudHNcbiAgICAuLi4gICAgIGdsb2JhbCBzaG93RXZlbnRzU3RhcnRcbiAgICAuLi4gICAgIGlmIHN0YXJ0IGlzIE5vbmU6XG4gICAgLi4uICAgICAgICAgc3RhcnQgPSBzaG93RXZlbnRzU3RhcnRcbiAgICAuLi4gICAgIHJlcyA9IFtcbiAgICAuLi4gICAgICAgICAnJXMgZmlyZWQgZm9yICVzLicgJSAoaW5hbWUoZXYpLCBnZXRJZChldi5vYmplY3QpKVxuICAgIC4uLiAgICAgICAgIGZvciBldiBpbiBoZWFyZF9ldmVudHNbc3RhcnQ6XV1cbiAgICAuLi4gICAgIHJlcy5zb3J0KClcbiAgICAuLi4gICAgIHBwcmludC5wcHJpbnQocmVzKVxuICAgIC4uLiAgICAgc2hvd0V2ZW50c1N0YXJ0ID0gbGVuKGhlYXJkX2V2ZW50cylcbiAgICAuLi5cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKGFkYXB0ZXJzLk9iamVjdENvcGllcilcbiAgICA+Pj4gZnJvbSB6b3BlLmFwcC5jb250YWluZXIuY29udGFpbmVkIGltcG9ydCBOYW1lQ2hvb3NlclxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoTmFtZUNob29zZXIsIGFkYXB0cz0oaW50ZXJmYWNlLkludGVyZmFjZSwpKVxuICAgID4+PiBkdW1teSA9IER1bW15KClcbiAgICA+Pj4gcmVwb1snZHVtbXknXSA9IGR1bW15XG4gICAgPj4+IGR1bW15Ll9fcGFyZW50X18gPSByZXBvXG4gICAgPj4+IGR1bW15Ll9fbmFtZV9fID0gJ2R1bW15J1xuICAgID4+PiBkdW1teS5pZCA9ICdmb28nXG4gICAgPj4+IGZyb20gem9wZSBpbXBvcnQgY29weXBhc3RlbW92ZVxuICAgID4+PiBjb3BpZXIgPSBjb3B5cGFzdGVtb3ZlLklPYmplY3RDb3BpZXIoZHVtbXkpXG4gICAgPj4+IHZlcmlmeU9iamVjdChjb3B5cGFzdGVtb3ZlLklPYmplY3RDb3BpZXIsIGNvcGllcilcbiAgICBUcnVlXG4gICAgPj4+IGNvcGllci5jb3B5VG8oZm9sZGVyKVxuICAgICdkdW1teSdcbiAgICA+Pj4gc2hvd0V2ZW50cygpXG4gICAgWydJT2JqZWN0Q29waWVkRXZlbnQgZmlyZWQgZm9yIGZvby4nLFxuICAgICAnSU9iamVjdENyZWF0ZWRFdmVudCBmaXJlZCBmb3IgYSBTaG9ydGN1dCAoSVNob3J0Y3V0KS4nXVxuICAgID4+PiBmb2xkZXJbJ2R1bW15J10ucmF3X3RhcmdldCBpcyBub3QgZHVtbXlcbiAgICBUcnVlXG4gICAgPj4+IGZvbGRlclsnZHVtbXknXS5yYXdfdGFyZ2V0IGlzIHJlcG9bJ2R1bW15LTInXVxuICAgIFRydWVcblxuICAgID4+PiBmb2xkZXJbJ2R1bW15J10ucmF3X3RhcmdldC5pZFxuICAgICdmb28nXG4gICAgPj4+IGZvbGRlci5jbGVhcigpICMgcHJlcGFyZSBmb3IgbmV4dCB0ZXN0XG5cbkxpbmtpbmdcbi0tLS0tLS1cblxuSW4gYWRkaXRpb24gdG8gdGhlIGNvcHkgYW5kIG1vdmUgb3BlcmF0aW9ucywgdGhlIHNob3J0Y3V0IHBhY2thZ2Ugb2ZmZXJzIHVwIGFcbm5ldyAnbGluaycgb3BlcmF0aW9uOiB0aGlzIGNyZWF0ZXMgYSBzaG9ydGN1dCB0byB0aGUgc2VsZWN0ZWQgb2JqZWN0LiAgSW4gdGhlXG5jYXNlIG9mIGxpbmtpbmcgYSBzaG9ydGN1dCwgdGhlIHByb3ZpZGVkIGFkYXB0ZXIgbGlua3MgaW5zdGVhZCB0byB0aGUgb3JpZ2luYWxcbnNob3J0Y3V0J3MgdGFyZ2V0LlxuXG4gICAgPj4+IGZyb20gem9wZS5hcHAuY29udGFpbmVyLmNvbnN0cmFpbnRzIGltcG9ydCBjb250YWluc1xuICAgID4+PiBjbGFzcyBJTm9EdW1teUNvbnRhaW5lcihpbnRlcmZhY2UuSW50ZXJmYWNlKTpcbiAgICAuLi4gICAgIGNvbnRhaW5zKElTcGFtKSAjIHdvbid0IGNvbnRhaW4gc2hvcnRjdXRzXG4gICAgLi4uXG4gICAgPj4+IGJhZGNvbnRhaW5lciA9IER1bW15Q29udGFpbmVyKClcbiAgICA+Pj4gaW50ZXJmYWNlLmFsc29Qcm92aWRlcyhiYWRjb250YWluZXIsIElOb0R1bW15Q29udGFpbmVyKVxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoYWRhcHRlcnMuT2JqZWN0TGlua2VyQWRhcHRlcilcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKGFkYXB0ZXJzLlNob3J0Y3V0TGlua2VyQWRhcHRlcilcbiAgICA+Pj4gZHVtbXlfbGlua2VyID0gaW50ZXJmYWNlcy5JT2JqZWN0TGlua2VyKGR1bW15KVxuICAgID4+PiBzaG9ydGN1dF9saW5rZXIgPSBpbnRlcmZhY2VzLklPYmplY3RMaW5rZXIoc2hvcnRjdXQpXG4gICAgPj4+IHZlcmlmeU9iamVjdChpbnRlcmZhY2VzLklPYmplY3RMaW5rZXIsIGR1bW15X2xpbmtlcilcbiAgICBUcnVlXG4gICAgPj4+IHZlcmlmeU9iamVjdChpbnRlcmZhY2VzLklPYmplY3RMaW5rZXIsIHNob3J0Y3V0X2xpbmtlcilcbiAgICBUcnVlXG4gICAgPj4+IGR1bW15X2xpbmtlci5saW5rYWJsZSgpXG4gICAgVHJ1ZVxuICAgID4+PiBzaG9ydGN1dF9saW5rZXIubGlua2FibGUoKVxuICAgIFRydWVcbiAgICA+Pj4gZHVtbXlfbGlua2VyLmxpbmthYmxlVG8oYmFkY29udGFpbmVyKVxuICAgIEZhbHNlXG4gICAgPj4+IHNob3J0Y3V0X2xpbmtlci5saW5rYWJsZVRvKGJhZGNvbnRhaW5lcilcbiAgICBGYWxzZVxuICAgID4+PiBkdW1teV9saW5rZXIubGlua2FibGVUbyhmb2xkZXIpXG4gICAgVHJ1ZVxuICAgID4+PiBzaG9ydGN1dF9saW5rZXIubGlua2FibGVUbyhmb2xkZXIpXG4gICAgVHJ1ZVxuICAgID4+PiBkdW1teV9saW5rZXIubGlua1RvKGJhZGNvbnRhaW5lcilcbiAgICBUcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6XG4gICAgLi4uXG4gICAgSW52YWxpZDogKCdOb3QgbGlua2FibGVUbyB0YXJnZXQgd2l0aCBuYW1lJywgPER1bW15Q29udGFpbmVyLi4uPiwgJ2R1bW15JylcbiAgICA+Pj4gc2hvcnRjdXRfbGlua2VyLmxpbmtUbyhiYWRjb250YWluZXIpXG4gICAgVHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOlxuICAgIC4uLlxuICAgIEludmFsaWQ6ICgnTm90IGxpbmthYmxlVG8gdGFyZ2V0IHdpdGggbmFtZScsIDxEdW1teUNvbnRhaW5lci4uLj4sICdzcGVjaWFsX3NwYW1fc2hvcnRjdXQnKVxuICAgID4+PiBkdW1teV9saW5rZXIubGlua1RvKGZvbGRlcilcbiAgICAnZHVtbXknXG4gICAgPj4+IHNob3dFdmVudHMoKVxuICAgIFsnSU9iamVjdENyZWF0ZWRFdmVudCBmaXJlZCBmb3IgYSBTaG9ydGN1dCAoSVNob3J0Y3V0KS4nXVxuICAgID4+PiBmb2xkZXJbJ2R1bW15J10ucmF3X3RhcmdldCBpcyBkdW1teVxuICAgIFRydWVcbiAgICA+Pj4gc2hvcnRjdXRfbGlua2VyLmxpbmtUbyhmb2xkZXIpXG4gICAgJ3NwZWNpYWxfc3BhbV9zaG9ydGN1dCdcbiAgICA+Pj4gc2hvd0V2ZW50cygpXG4gICAgWydJT2JqZWN0Q29waWVkRXZlbnQgZmlyZWQgZm9yIGEgU2hvcnRjdXQgKElTaG9ydGN1dCkuJ11cbiAgICA+Pj4gZm9sZGVyWydzcGVjaWFsX3NwYW1fc2hvcnRjdXQnXS5yYXdfdGFyZ2V0IGlzIHNwYW1cbiAgICBUcnVlXG4gICAgPj4+IGR1bW15X2xpbmtlci5saW5rVG8oZm9sZGVyLCAnZHVtbXkyJylcbiAgICAnZHVtbXkyJ1xuICAgID4+PiBzaG93RXZlbnRzKClcbiAgICBbJ0lPYmplY3RDcmVhdGVkRXZlbnQgZmlyZWQgZm9yIGEgU2hvcnRjdXQgKElTaG9ydGN1dCkuJ11cbiAgICA+Pj4gZm9sZGVyWydkdW1teTInXS5yYXdfdGFyZ2V0IGlzIGR1bW15XG4gICAgVHJ1ZVxuICAgID4+PiBzaG9ydGN1dF9saW5rZXIubGlua1RvKGZvbGRlciwgJ3Nob3J0Y3V0MicpXG4gICAgJ3Nob3J0Y3V0MidcbiAgICA+Pj4gc2hvd0V2ZW50cygpXG4gICAgWydJT2JqZWN0Q29waWVkRXZlbnQgZmlyZWQgZm9yIGEgU2hvcnRjdXQgKElTaG9ydGN1dCkuJ11cbiAgICA+Pj4gZm9sZGVyWydzaG9ydGN1dDInXS5yYXdfdGFyZ2V0IGlzIHNwYW1cbiAgICBUcnVlXG5cbkNvcHlpbmcgYXMgTGlua2luZ1xuLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkZvciBzb21lIG9iamVjdHMtLWltbXV0YWJsZSBvYmplY3RzIHRoYXQgYXJlIHByaW1hcmlseSBzdG9yZWQgaW4gYSByZXBvc2l0b3J5LFxuZm9yIGluc3RhbmNlLS1oYXZpbmcgYSBjb3B5IGdlc3R1cmUgYWN0dWFsbHkgY3JlYXRlIGEgbGluayBtYXkgYmUgZGVzaXJhYmxlLlxuVGhlIGFkYXB0ZXJzIG1vZHVsZSBwcm92aWRlcyBhbiBPYmplY3RDb3BpZXJMaW5raW5nQWRhcHRlciBmb3IgdGhlc2UgdXNlIGNhc2VzLlxuV2hlbmV2ZXIgYSBjb3B5IGlzIHJlcXVlc3RlZCwgYSBsaW5rIGlzIG1hZGUgaW5zdGVhZC4gIFRoaXMgYWRhcHRlciBpcyBub3RcbnJlZ2lzdGVyZWQgZm9yIGFueSBpbnRlcmZhY2VzIGJ5IGRlZmF1bHQ6IGl0IGlzIGV4cGVjdGVkIHRvIGJlIGluc3RhbGxlZFxuc2VsZWN0aXZlbHkuXG5cbiAgICA+Pj4gY2xhc3MgSUltbXV0YWJsZUR1bW15KElEdW1teSk6XG4gICAgLi4uICAgICBwYXNzXG4gICAgLi4uXG4gICAgPj4+IGltbXV0YWJsZV9kdW1teSA9IER1bW15KClcbiAgICA+Pj4gaW50ZXJmYWNlLmRpcmVjdGx5UHJvdmlkZXMoaW1tdXRhYmxlX2R1bW15LCBJSW1tdXRhYmxlRHVtbXkpXG4gICAgPj4+IG9yaWdpbmFsY29udGFpbmVyID0gRHVtbXlDb250YWluZXIoKVxuICAgID4+PiBvcmlnaW5hbGNvbnRhaW5lclsnaW1tdXRhYmxlX2R1bW15J10gPSBpbW11dGFibGVfZHVtbXlcbiAgICA+Pj4gaW1tdXRhYmxlX2R1bW15Ll9fbmFtZV9fID0gJ2ltbXV0YWJsZV9kdW1teSdcbiAgICA+Pj4gaW1tdXRhYmxlX2R1bW15Ll9fcGFyZW50X18gPSBvcmlnaW5hbGNvbnRhaW5lclxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoXG4gICAgLi4uICAgICBhZGFwdGVycy5PYmplY3RDb3BpZXJMaW5raW5nQWRhcHRlciwgYWRhcHRzPShJSW1tdXRhYmxlRHVtbXksKSlcbiAgICA+Pj4gY29waWVyID0gY29weXBhc3RlbW92ZS5JT2JqZWN0Q29waWVyKGltbXV0YWJsZV9kdW1teSlcbiAgICA+Pj4gY29waWVyLmNvcHlhYmxlKClcbiAgICBUcnVlXG4gICAgPj4+IGNvcGllci5jb3B5YWJsZVRvKGJhZGNvbnRhaW5lcilcbiAgICBGYWxzZVxuICAgID4+PiBjb3BpZXIuY29weWFibGVUbyhmb2xkZXIpXG4gICAgVHJ1ZVxuICAgID4+PiBjb3BpZXIuY29weVRvKGZvbGRlcilcbiAgICAnaW1tdXRhYmxlX2R1bW15J1xuICAgID4+PiBzaG93RXZlbnRzKClcbiAgICBbJ0lPYmplY3RDcmVhdGVkRXZlbnQgZmlyZWQgZm9yIGEgU2hvcnRjdXQgKElTaG9ydGN1dCkuJ11cbiAgICA+Pj4gZm9sZGVyWydpbW11dGFibGVfZHVtbXknXS5yYXdfdGFyZ2V0IGlzIGltbXV0YWJsZV9kdW1teVxuICAgIFRydWVcblxuICAgID4+PiBldmVudC5zdWJzY3JpYmVycy5wb3AoKSBpcyBub3QgTm9uZSAjIGNsZWFudXBcbiAgICBUcnVlXG5cbj09PT09PT09PT09PT09PT1cblNob3J0Y3V0IElBZGRpbmdcbj09PT09PT09PT09PT09PT1cblxuVGhlIHNob3J0Y3V0IGFkZGluZyBoYXMgYSBjb3VwbGUgb2YgZGlmZmVyZW50IGJlaGF2aW9ycyB0aGFuIHRoZSBzdGFuZGFyZCBab3BlXG4zIGFkZGluZy4gIFRoZSBkaWZmZXJlbmNlcyBhcmUgdG8gc3VwcG9ydCB0cmF2ZXJzYWwgcHJveGllczsgYW5kIHRvIHByb3ZpZGVcbm1vcmUgZmxleGliaWxpdHkgZm9yIGNob29zaW5nIHRoZSBuZXh0VVJMIGFmdGVyIGFuIGFkZC5cblxuU3VwcG9ydGluZyBUcmF2ZXJzYWwgUHJveGllc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5Cb3RoIHRoZSBhY3Rpb24gbWV0aG9kIGFuZCB0aGUgbmV4dFVSTCBtZXRob2QgcmVkaXJlY3QgdG8gdGhlIGFic29sdXRlVVJMIG9mXG50aGUgY29udGFpbmVyIGluIHRoZSB6b3BlLmFwcCBpbXBsZW1lbnRhdGlvbi4gIEluIHRoZSBmYWNlIG9mIHNob3J0Y3V0cyBhbmRcbnRyYXZlcnNhbCBwcm94aWVzLCB0aGlzIGNhbiBnZW5lcmF0ZSBzdXJwcmlzaW5nIGJlaGF2aW9yIGZvciB1c2VycywgZGlyZWN0aW5nXG50aGVpciBVUkwgdG8gYSBsb2NhdGlvbiBvdGhlciB0aGFuIHdoZXJlIHRoZXkgdGhvdWdodCB0aGV5IHdlcmUgd29ya2luZy4gIFRoZVxuc2hvcnRjdXQgYWRkaW5nIGNoYW5nZXMgYm90aCBvZiB0aGVzZSBtZXRob2RzIHRvIHVzZSB0cmF2ZXJzZWRVUkwgaW5zdGVhZC4gIEFzXG5hIHJlc3VsdCwgYWRkaW5nIHRvIGEgc2hvcnRjdXQgb2YgYSBjb250YWluZXIgcmV0dXJucyB0aGUgdXNlciB0byB0aGVcbnNob3J0Y3V0LCBub3QgdGhlIGFic29sdXRlIHBhdGggb2YgdGhlIGNvbnRhaW5lcidzIHJlYWwgbG9jYXRpb247IGFuZCBcbnN1Ym1pdHRpbmcgdGhlIGZvcm0gb2YgdGhlIGRlZmF1bHQgdmlldyBvZiB0aGUgYWRkaW5nIHJlZGlyZWN0cyB0byB3aXRoaW4gdGhlIFxuY29udGV4dCBvZiB0aGUgdHJhdmVyc2VkIHNob3J0Y3V0KHMpLCBub3QgdGhlIGFic29sdXRlVVJMLlxuXG5UaGUgYWN0aW9uIG1ldGhvZCBjaGFuZ2VzIGFyZSBwZXJ0aW5lbnQgdG8gcmVkaXJlY3RpbmcgdG8gYW4gYWRkaW5nIHZpZXcuXG5cbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dCBpbXBvcnQgYWRkaW5nLCBpbnRlcmZhY2VzXG4gICAgPj4+IGZyb20gem9wZSBpbXBvcnQgaW50ZXJmYWNlLCBjb21wb25lbnRcbiAgICA+Pj4gZnJvbSB6b3BlLmxvY2F0aW9uLmludGVyZmFjZXMgaW1wb3J0IElMb2NhdGlvblxuICAgID4+PiBjbGFzcyBJU3BhbShpbnRlcmZhY2UuSW50ZXJmYWNlKTpcbiAgICAuLi4gICAgIHBhc3NcbiAgICAuLi5cbiAgICA+Pj4gY2xhc3MgU3BhbShkaWN0KTpcbiAgICAuLi4gICAgIGludGVyZmFjZS5pbXBsZW1lbnRzKElTcGFtLCBJTG9jYXRpb24pXG4gICAgLi4uICAgICBkZWYgX19pbml0X18oc2VsZiwgcGFyZW50LCBuYW1lKTpcbiAgICAuLi4gICAgICAgICBzZWxmLl9fcGFyZW50X18gPSBwYXJlbnRcbiAgICAuLi4gICAgICAgICBzZWxmLl9fbmFtZV9fID0gbmFtZVxuICAgIC4uLlxuICAgID4+PiBmcm9tIHpvcGUudHJhdmVyc2luZy5pbnRlcmZhY2VzIGltcG9ydCBJQ29udGFpbm1lbnRSb290XG4gICAgPj4+IGNsYXNzIER1bW15Q29udGFpbm1lbnRSb290KG9iamVjdCk6XG4gICAgLi4uICAgICBpbnRlcmZhY2UuaW1wbGVtZW50cyhJQ29udGFpbm1lbnRSb290KVxuICAgIC4uLlxuICAgID4+PiByb290ID0gRHVtbXlDb250YWlubWVudFJvb3QoKVxuICAgID4+PiByZWFsX3BhcmVudCA9IFNwYW0ocm9vdCwgJ3JlYWxfcGFyZW50JylcbiAgICA+Pj4gdGFyZ2V0ID0gU3BhbShyZWFsX3BhcmVudCwgJ3RhcmdldCcpXG4gICAgPj4+IGZyb20gemMuc2hvcnRjdXQuc2hvcnRjdXQgaW1wb3J0IFNob3J0Y3V0XG4gICAgPj4+IHNob3J0Y3V0ID0gU2hvcnRjdXQodGFyZ2V0KVxuICAgID4+PiBzaG9ydGN1dF9wYXJlbnQgPSBTcGFtKHJvb3QsICdzaG9ydGN1dF9wYXJlbnQnKVxuICAgID4+PiBzaG9ydGN1dC5fX3BhcmVudF9fID0gc2hvcnRjdXRfcGFyZW50XG4gICAgPj4+IHNob3J0Y3V0Ll9fbmFtZV9fID0gJ3Nob3J0Y3V0J1xuICAgID4+PiBmcm9tIHpjLnNob3J0Y3V0IGltcG9ydCBhZGFwdGVyc1xuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoYWRhcHRlcnMuVHJhdmVyc2VkVVJMKVxuICAgID4+PiBjb21wb25lbnQucHJvdmlkZUFkYXB0ZXIoYWRhcHRlcnMuRmFsbGJhY2tUcmF2ZXJzZWRVUkwpXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihhZGFwdGVycy5Sb290VHJhdmVyc2VkVVJMKVxuICAgID4+PiBmcm9tIHpvcGUucHVibGlzaGVyLmludGVyZmFjZXMgaW1wb3J0IElSZXF1ZXN0XG4gICAgPj4+IEBjb21wb25lbnQuYWRhcHRlcihpbnRlcmZhY2VzLklBZGRpbmcsIElSZXF1ZXN0KVxuICAgIC4uLiBAaW50ZXJmYWNlLmltcGxlbWVudGVyKGludGVyZmFjZS5JbnRlcmZhY2UpXG4gICAgLi4uIGRlZiBkdW1teUFkZGluZ1ZpZXcoYWRkaW5nLCByZXF1ZXN0KTpcbiAgICAuLi4gICAgIHJldHVybiAndGhpcyBpcyBhIHZpZXcnXG4gICAgLi4uXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihkdW1teUFkZGluZ1ZpZXcsIG5hbWU9J2Zvb190eXBlJylcbiAgICA+Pj4gZnJvbSB6b3BlLnB1Ymxpc2hlci5icm93c2VyIGltcG9ydCBUZXN0UmVxdWVzdFxuICAgID4+PiByZXF1ZXN0ID0gVGVzdFJlcXVlc3QoKVxuICAgID4+PiBhZGRlciA9IGFkZGluZy5BZGRpbmcoc2hvcnRjdXQudGFyZ2V0LCByZXF1ZXN0KVxuICAgID4+PiBhZGRlci5hY3Rpb24oJ2Zvb190eXBlJywgJ2Zvb19pZCcpXG4gICAgPj4+IHJlcXVlc3QucmVzcG9uc2UuZ2V0SGVhZGVyKCdMb2NhdGlvbicpXG4gICAgJ2h0dHA6Ly8xMjcuMC4wLjEvc2hvcnRjdXRfcGFyZW50L3Nob3J0Y3V0L0BAKy9mb29fdHlwZT1mb29faWQnXG5cblRoZSBuZXh0VVJMIG1ldGhvZCBjaGFuZ2VzIGFyZSBwZXJ0aW5lbnQgdG8gdGhlIGRlZmF1bHQgYmVoYXZpb3IuXG5cbiAgICA+Pj4gYWRkZXIuY29udGVudE5hbWUgPSAnZm9vX2lkJ1xuICAgID4+PiB0YXJnZXRbJ2Zvb19pZCddID0gU3BhbSh0YXJnZXQsICdmb29faWQnKVxuICAgID4+PiBhZGRlci5uZXh0VVJMKClcbiAgICAnaHR0cDovLzEyNy4wLjAuMS9zaG9ydGN1dF9wYXJlbnQvc2hvcnRjdXQvQEBjb250ZW50cy5odG1sJ1xuXG5BZGRpbmcgRmxleGliaWxpdHkgdG8gJ25leHRVUkwnXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblRoZSBuZXh0VVJMIG1ldGhvZCBpbiB0aGUgem9wZS5hcHAgaW1wbGVtZW50YXRpb24gb2YgYW4gYWRkaW5nIGRlZmluZXMgXG5wcmVjaXNlbHkgd2hhdCB0aGUgbmV4dFVSTCBzaG91bGQgYmU6IHRoZSBAQGNvbnRlbnRzLmh0bWwgdmlldyBvZiB0aGUgY29udGV4dC5cblRoZSBzaG9ydGN1dCBhZGRpbmcgcmVjcmVhdGVzIHRoaXMgYmVoYXZpb3IsIGJ1dCBvbmx5IGFmdGVyIHNlZWluZyBpZiBkaWZmZXJlbnRcbmJlaGF2aW9yIGhhcyBiZWVuIHJlZ2lzdGVyZWQuXG5cbm5leHRVUkwgdHJpZXMgdG8gZmluZCBhbiBhZGFwdGVyIG5hbWVkIHdpdGggdGhlIGNvbnN0YW50IGluXG56Yy5zaG9ydGN1dC5pbnRlcmZhY2VzLk5FWFRfVVJMX05BTUUsIHByb3ZpZGluZyBub3RoaW5nLCBmb3IgdGhlIGFkZGluZywgdGhlXG5uZXcgY29udGVudCBhcyBmb3VuZCBpbiB0aGUgY29udGFpbmVyIChzbyBpdCBtYXkgYmUgYSBzaG9ydGN1dCksIGFuZCB0aGVcbmNvbnRleHQuICBJZiBhbiBhZGFwdGVyIGlzIHJlZ2lzdGVyZWQsIGl0IHNob3VsZCBiZSBhIHN0cmluZyBvZiB0aGUgbmV4dFVSTCB0b1xuYmUgdXNlZDsgdGhpcyB2YWx1ZSB3aWxsIGJlIHJldHVybmVkLiBJZiBubyBhZGFwdGVyIGlzIHJlZ2lzdGVyZWQgb3IgdGhlXG5yZWdpc3RlcmVkIGFkYXB0ZXIgcmV0dXJucyBOb25lLCB0aGUgQEBjb250ZW50cy5odG1sIHZpZXcgb2YgdGhlIGNvbnRleHQgaXNcbnJldHVybmVkLlxuXG4gICAgPj4+IEBjb21wb25lbnQuYWRhcHRlcihpbnRlcmZhY2VzLklBZGRpbmcsIElTcGFtLCBJU3BhbSlcbiAgICAuLi4gQGludGVyZmFjZS5pbXBsZW1lbnRlcihpbnRlcmZhY2UuSW50ZXJmYWNlKVxuICAgIC4uLiBkZWYgc2lsbHlOZXh0VVJMKGFkZGluZywgY29udGVudCwgY29udGFpbmVyKTpcbiAgICAuLi4gICAgIHJldHVybiAnJXMgY2xhc3MgYWRkZWQgXCIlc1wiIHRvIFwiJXNcIicgJSAoXG4gICAgLi4uICAgICAgICAgYWRkaW5nLl9fY2xhc3NfXy5fX25hbWVfXyxcbiAgICAuLi4gICAgICAgICBjb250ZW50Ll9fbmFtZV9fLFxuICAgIC4uLiAgICAgICAgIGNvbnRhaW5lci5fX25hbWVfXylcbiAgICAuLi5cbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKHNpbGx5TmV4dFVSTCwgbmFtZT1pbnRlcmZhY2VzLk5FWFRfVVJMX05BTUUpXG4gICAgPj4+IGFkZGVyLm5leHRVUkwoKVxuICAgICdBZGRpbmcgY2xhc3MgYWRkZWQgXCJmb29faWRcIiB0byBcInRhcmdldFwiJ1xuXG49PT09PT09PT09PT09PT09PT1cblNob3J0Y3V0IGZhY3Rvcmllc1xuPT09PT09PT09PT09PT09PT09XG5cblNob3J0Y3V0IGZhY3RvcmllcyBhcmUgZmFjdG9yaWVzIHRoYXQgcGxhY2Ugb2JqZWN0cyBpbiBhIGNvbmZpZ3VyZWQgZm9sZGVyIGFuZFxudGhlbiByZXR1cm4gYSBzaG9ydGN1dCB0byB0aGUgbmV3IG9iamVjdC4gIEJlY2F1c2UgdGhleSBjcmVhdGUgb2JqZWN0cyBhbmRcbnBsYWNlIHRoZW0gaW4gY29udGFpbmVycywgdGhleSBmaXJlIGFuIG9iamVjdCBjcmVhdGlvbiBldmVudCwgYW5kIHVzdWFsbHkgdGhlXG5jb25maWd1cmVkIGZvbGRlciBmaXJlcyBhbiBvYmplY3QgYWRkZWQgZXZlbnQuXG5cbiAgICA+Pj4gZnJvbSB6Yy5zaG9ydGN1dCBpbXBvcnQgZmFjdG9yeSwgaW50ZXJmYWNlcywgU2hvcnRjdXRcbiAgICA+Pj4gZnJvbSB6b3BlIGltcG9ydCBpbnRlcmZhY2UsIGNvbXBvbmVudCwgZXZlbnRcbiAgICA+Pj4gY2xhc3MgSUR1bW15KGludGVyZmFjZS5JbnRlcmZhY2UpOlxuICAgIC4uLiAgICAgcGFzc1xuICAgIC4uLlxuICAgID4+PiBmcm9tIHpvcGUubG9jYXRpb24uaW50ZXJmYWNlcyBpbXBvcnQgSUxvY2F0aW9uXG4gICAgPj4+IGNsYXNzIER1bW15KG9iamVjdCk6XG4gICAgLi4uICAgICBpbnRlcmZhY2UuaW1wbGVtZW50cyhJRHVtbXksIElMb2NhdGlvbilcbiAgICAuLi4gICAgIGRlZiBfX2luaXRfXyhzZWxmLCAqYXJncywgKiprd2FyZ3MpOlxuICAgIC4uLiAgICAgICAgIHNlbGYuYXJncyA9IGFyZ3NcbiAgICAuLi4gICAgICAgICBzZWxmLmt3YXJncyA9IGt3YXJnc1xuICAgIC4uLlxuICAgID4+PiBmID0gZmFjdG9yeS5GYWN0b3J5KER1bW15LCAndGl0bGUnLCAnZGVzY3JpcHRpb24nKVxuICAgID4+PiBmcm9tIHpvcGUuaW50ZXJmYWNlIGltcG9ydCB2ZXJpZnlcbiAgICA+Pj4gdmVyaWZ5LnZlcmlmeU9iamVjdChpbnRlcmZhY2VzLklTaG9ydGN1dEZhY3RvcnksIGYpXG4gICAgVHJ1ZVxuXG5UaGUgZmFjdG9yeSBhbHdheXMgcmV0dXJucyBhbiBpbnRlcmZhY2UgZGVjbGFyYXRpb24gZm9yIGEgc2hvcnRjdXQgZnJvbVxuZ2V0SW50ZXJmYWNlcywgd2hpbGUgZ2V0VGFyZ2V0SW50ZXJmYWNlcyByZXR1cm5zIHRoZSBkZWNsYXJhdGlvbiBmb3IgdGhlXG5jcmVhdGVkIG9iamVjdC5cblxuICAgID4+PiBmLmdldEludGVyZmFjZXMoKSA9PSBpbnRlcmZhY2UuaW1wbGVtZW50ZWRCeShTaG9ydGN1dClcbiAgICBUcnVlXG4gICAgPj4+IGYuZ2V0VGFyZ2V0SW50ZXJmYWNlcygpID09IGludGVyZmFjZS5pbXBsZW1lbnRlZEJ5KER1bW15KVxuICAgIFRydWVcblxuZmFjdG9yaWVzIHdpbGwgZmFpbCB0byBjcmVhdGUgYW4gb2JqZWN0IGlmIGEgY29udGFpbmVyIGhhcyBub3QgYmVlbiBcbnJlZ2lzdGVyZWQgYXMgYSByZXBvc2l0b3J5LlxuXG4gICAgPj4+IGYoKSAjIGRvY3Rlc3Q6ICtFTExJUFNJUyArTk9STUFMSVpFX1dISVRFU1BBQ0VcbiAgICBUcmFjZWJhY2sgKG1vc3QgcmVjZW50IGNhbGwgbGFzdCk6XG4gICAgLi4uXG4gICAgQ29tcG9uZW50TG9va3VwRXJyb3I6ICg8RHVtbXkuLi4+LCA8Li4uSUNvbnRhaW5lcj4sICdzaG9ydGN1dFRhcmdldFJlcG9zaXRvcnknKSBcblxuSWYgd2UgcmVnaXN0ZXIgYSByZXBvc2l0b3J5IHRoZW4gdGhlIGZhY3Rvcnkgd2lsbCBmaXJlIGEgY3JlYXRpb24gZXZlbnQsIGFkZCBcbnRoZSBvYmplY3QgdG8gdGhlIHJlcG9zaXRvcnksIGFuZCByZXR1cm4gYSBzaG9ydGN1dCB0byB0aGUgbmV3IG9iamVjdC5cblxuICAgID4+PiBpbXBvcnQgem9wZS5hcHAuY29udGFpbmVyLmludGVyZmFjZXNcbiAgICA+Pj4gY2xhc3MgRHVtbXlDb250YWluZXIoZGljdCk6XG4gICAgLi4uICAgICBpbnRlcmZhY2UuaW1wbGVtZW50cyh6b3BlLmFwcC5jb250YWluZXIuaW50ZXJmYWNlcy5JQ29udGFpbmVyKVxuICAgIC4uLlxuICAgID4+PiByZXBvID0gRHVtbXlDb250YWluZXIoKVxuICAgID4+PiBAY29tcG9uZW50LmFkYXB0ZXIoSUR1bW15KVxuICAgIC4uLiBAaW50ZXJmYWNlLmltcGxlbWVudGVyKHpvcGUuYXBwLmNvbnRhaW5lci5pbnRlcmZhY2VzLklDb250YWluZXIpXG4gICAgLi4uIGRlZiBEdW1teVJlcG9HZXR0ZXIoY29udGVudCk6XG4gICAgLi4uICAgICByZXR1cm4gcmVwb1xuICAgIC4uLiBcbiAgICA+Pj4gY29tcG9uZW50LnByb3ZpZGVBZGFwdGVyKFxuICAgIC4uLiAgICAgRHVtbXlSZXBvR2V0dGVyLCBuYW1lPWludGVyZmFjZXMuUkVQT1NJVE9SWV9OQU1FKVxuICAgID4+PiBmcm9tIHpvcGUuYXBwLmNvbnRhaW5lci5jb250YWluZWQgaW1wb3J0IE5hbWVDaG9vc2VyXG4gICAgPj4+IGNvbXBvbmVudC5wcm92aWRlQWRhcHRlcihOYW1lQ2hvb3NlciwgYWRhcHRzPShpbnRlcmZhY2UuSW50ZXJmYWNlLCkpXG4gICAgPj4+ICMgbm93LCBiZWZvcmUgd2UgYWN0dWFsbHkgYWN0dWFsbHkgcnVuIHRoZSBhZGRpbmcgbWFjaGluZXJ5LCB3ZSdsbFxuICAgID4+PiAjIHNldCB1cCBzb21lIG1hY2hpbmVyeSB0aGF0IHdpbGwgbGV0IHVzIGxvb2sgYXQgZXZlbnRzIGZpcmluZ1xuICAgIC4uLlxuICAgID4+PiBoZWFyZF9ldmVudHMgPSBbXSAjIHdlJ2xsIGNvbGxlY3QgdGhlIGV2ZW50cyBoZXJlXG4gICAgPj4+IGV2ZW50LnN1YnNjcmliZXJzLmFwcGVuZChoZWFyZF9ldmVudHMuYXBwZW5kKVxuICAgID4+PiBpbXBvcnQgcHByaW50XG4gICAgPj4+IGZyb20gem9wZSBpbXBvcnQgaW50ZXJmYWNlXG4gICAgPj4+IHNob3dFdmVudHNTdGFydCA9IDBcbiAgICA+Pj4gZGVmIGluYW1lKG9iKTpcbiAgICAuLi4gICAgIHJldHVybiBpdGVyKGludGVyZmFjZS5wcm92aWRlZEJ5KG9iKSkubmV4dCgpLl9fbmFtZV9fXG4gICAgLi4uXG4gICAgPj4+IGRlZiBnZXRJZChvYik6XG4gICAgLi4uICAgICBpZiBvYiBpcyBOb25lIG9yIGlzaW5zdGFuY2Uob2IsIChpbnQsIGZsb2F0LCBiYXNlc3RyaW5nLCB0dXBsZSkpOlxuICAgIC4uLiAgICAgICAgIHJldHVybiBcIiglcilcIiAlIChvYiwpXG4gICAgLi4uICAgICBpZCA9IGdldGF0dHIob2IsICdpZCcsIGdldGF0dHIob2IsICdfX25hbWVfXycsIE5vbmUpKVxuICAgIC4uLiAgICAgaWYgbm90IGlkOlxuICAgIC4uLiAgICAgICAgIGlkID0gXCJhICVzICglcylcIiAlIChvYi5fX2NsYXNzX18uX19uYW1lX18sIGluYW1lKG9iKSlcbiAgICAuLi4gICAgIHJldHVybiBpZFxuICAgIC4uLlxuICAgID4+PiBkZWYgc2hvd0V2ZW50cyhzdGFydD1Ob25lKTogIyB0byBnZW5lcmF0ZSBhIGZyaWVuZGx5IHZpZXcgb2YgZXZlbnRzXG4gICAgLi4uICAgICBnbG9iYWwgc2hvd0V2ZW50c1N0YXJ0XG4gICAgLi4uICAgICBpZiBzdGFydCBpcyBOb25lOlxuICAgIC4uLiAgICAgICAgIHN0YXJ0ID0gc2hvd0V2ZW50c1N0YXJ0XG4gICAgLi4uICAgICByZXMgPSBbXG4gICAgLi4uICAgICAgICAgJyVzIGZpcmVkIGZvciAlcy4nICUgKGluYW1lKGV2KSwgZ2V0SWQoZXYub2JqZWN0KSlcbiAgICAuLi4gICAgICAgICBmb3IgZXYgaW4gaGVhcmRfZXZlbnRzW3N0YXJ0Ol1dXG4gICAgLi4uICAgICByZXMuc29ydCgpXG4gICAgLi4uICAgICBwcHJpbnQucHByaW50KHJlcylcbiAgICAuLi4gICAgIHNob3dFdmVudHNTdGFydCA9IGxlbihoZWFyZF9ldmVudHMpXG4gICAgLi4uXG4gICAgPj4+IHNjID0gZigxMiwgJ2ZvbycsICdiYXJiYXonLCBzbG9vcD0xOSlcbiAgICA+Pj4gc2hvd0V2ZW50cygpXG4gICAgWydJT2JqZWN0Q3JlYXRlZEV2ZW50IGZpcmVkIGZvciBhIER1bW15IChJRHVtbXkpLiddXG4gICAgPj4+IHJlcG9bJ0R1bW15J10uYXJnc1xuICAgICgxMiwgJ2ZvbycsICdiYXJiYXonKVxuICAgID4+PiByZXBvWydEdW1teSddLmt3YXJnc1xuICAgIHsnc2xvb3AnOiAxOX1cbiAgICA+Pj4gc2MucmF3X3RhcmdldCBpcyByZXBvWydEdW1teSddXG4gICAgVHJ1ZVxuXG4gICAgPj4+IGV2ZW50LnN1YnNjcmliZXJzLnBvcCgpIGlzIG5vdCBOb25lICMgY2xlYW51cFxuICAgIFRydWVcblxuVXNpbmcgYWx0ZXJuYXRlIHNob3J0Y3V0IGltcGxlbWVudGF0aW9uc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5UaGUgc2hvcnRjdXQgZmFjdG9yeSB0YWtlcyBhbiBvcHRpb25hbCBrZXl3b3JkIHBhcmFtZXRlciB0byBzcGVjaWZ5XG50aGUgZmFjdG9yeSB1c2VkIHRvIGNyZWF0ZSB0aGUgc2hvcnRjdXQuICBCeSBkZWZhdWx0LFxuYHpjLnNob3J0Y3V0LlNob3J0Y3V0YCBpcyB1c2VkLCBidXQgbW9yZSBzcGVjaWFsaXplZCBzaG9ydGN1dHMgbWF5IGJlXG5uZWVkZWQgZm9yIHNvbWUgYXBwbGljYXRpb25zLiAgVGhpcyBhbGxvd3MgdGhlIGZhY3RvcnkgdG8gYmUgdXNlZFxucmVnYXJkbGVzcyBvZiB0aGUgc3BlY2lmaWMgc2hvcnRjdXQgaW1wbGVtZW50YXRpb24uXG5cbkxldCdzIGNyZWF0ZSBhbiBhbHRlcm5hdGUgY2xhc3MgdGhhdCBjYW4gYmUgdXNlZCBhcyBhIHNob3J0Y3V0IChpdFxuZG9lc24ndCByZWFsbHkgbWF0dGVyIHRoYXQgdGhlIGV4YW1wbGUgY2xhc3MgaXNuJ3QgdXNlZnVsKTo6XG5cbiAgICA+Pj4gY2xhc3MgQWx0ZXJuYXRlU2hvcnRjdXQob2JqZWN0KTpcbiAgICAuLi4gICAgIGludGVyZmFjZS5pbXBsZW1lbnRzKGludGVyZmFjZXMuSVNob3J0Y3V0KVxuICAgIC4uLiAgICAgZGVmIF9faW5pdF9fKHNlbGYsIG9iamVjdCk6XG4gICAgLi4uICAgICAgICAgc2VsZi5yYXdfdGFyZ2V0ID0gb2JqZWN0XG4gICAgLi4uICAgICAgICAgc2VsZi50YXJnZXQgPSBvYmplY3RcblxuTm93IHdlIGNhbiBjcmVhdGUgYSBmYWN0b3J5IHRoYXQgY3JlYXRlcyBpbnN0YW5jZXMgb2YgdGhpcyBjbGFzc1xuaW5zdGVhZCBvZiB0aGUgZGVmYXVsdCBzaG9ydGN1dCBjbGFzczo6XG5cbiAgICA+Pj4gZiA9IGZhY3RvcnkuRmFjdG9yeShEdW1teSwgJ3RpdGxlJywgJ2Rlc2NyaXB0aW9uJyxcbiAgICAuLi4gICAgICAgICAgICAgICAgICAgICBzaG9ydGN1dF9mYWN0b3J5PUFsdGVybmF0ZVNob3J0Y3V0KVxuXG5Vc2luZyB0aGUgZmFjdG9yeSByZXR1cm5zIGFuIGluc3RhbmNlIG9mIG91ciBhbHRlcm5hdGUgc2hvcnRjdXRcbmltcGxlbWVudGF0aW9uOjpcblxuICAgID4+PiBzYyA9IGYoMSwgMiwgMylcblxuICAgID4+PiBpc2luc3RhbmNlKHNjLCBBbHRlcm5hdGVTaG9ydGN1dClcbiAgICBUcnVlXG4gICAgPj4+IGlzaW5zdGFuY2Uoc2MucmF3X3RhcmdldCwgRHVtbXkpXG4gICAgVHJ1ZVxuICAgID4+PiBzYy50YXJnZXQuYXJnc1xuICAgICgxLCAyLCAzKSIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiBudWxsLA==
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiVU5LTk9XTiIs
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiVU5LTk9XTiIs
ICAgICJrZXl3b3JkcyI6ICJ6b3BlIHpvcGUzIiw=
ICAgICJsaWNlbnNlIjogIlpQTCAyLjEiLA==
ICAgICJtYWludGFpbmVyIjogbnVsbCw=
ICAgICJtYWludGFpbmVyX2VtYWlsIjogbnVsbCw=
ICAgICJuYW1lIjogInpjLnNob3J0Y3V0Iiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvemMuc2hvcnRjdXQvIiw=
ICAgICJwbGF0Zm9ybSI6ICJVTktOT1dOIiw=
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvemMuc2hvcnRjdXQvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkRvd25sb2FkIjogIlVOS05PV04iLA==
ICAgICAgIkhvbWVwYWdlIjogIlVOS05PV04i
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvemMuc2hvcnRjdXQvMS4wLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiBudWxsLA==
ICAgICJzdW1tYXJ5IjogIlN5bWxpbmtzIGZvciBab3BlIDMuIiw=
ICAgICJ2ZXJzaW9uIjogIjEuMCIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiA4MDIyMDYs
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI5NWM4ODM1NTI3MjI0OWMwZmUzNTExMTNkMTViMjQ1NGZhMmI3ZTk2OGRkZTExZTgyNTNkNTUyOTI4NzA1MzFhIiw=
ICAgICAgICAgICJtZDUiOiAiOTAzZDQ0YjhkZTYwODkwOTRhMDc5MzMwMzRiMjE5YzEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZDA2OWI3ZDU0MWRlMzBkMzMzZDAzNjAwYjQ3Njg4ZmU2OTcwMDNiOWEzYjY0NjcyZTQ1ZmVlNmQ0NWJmMzhiNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiemMuc2hvcnRjdXQtMS4wLXB5Mi40LmVnZyIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5MDNkNDRiOGRlNjA4OTA5NGEwNzkzMzAzNGIyMTljMSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3RfZWdnIiw=
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAiMi40Iiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDU1MTc2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAwNi0xMi0wN1QxODo1MzozOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAwNi0xMi0wN1QxODo1MzozOFoiLA==
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy85NS9jOC84MzU1MjcyMjQ5YzBmZTM1MTExM2QxNWIyNDU0ZmEyYjdlOTY4ZGRlMTFlODI1M2Q1NTI5Mjg3MDUzMWEvemMuc2hvcnRjdXQtMS4wLXB5Mi40LmVnZyIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1OGUzMGE2OTJkMzhkNDE3MDVkMTdlNzY0Y2E3ZWNhMjQ1M2U2Yzg5ZDgyYTZmYTExOGNlZGU3NTdjYTljYjgwIiw=
ICAgICAgICAgICJtZDUiOiAiMzUxNjQ1OTY4NDE1ZGM4MzcxZWZkNjc1ZDZjNzA3NGMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNTUxOWZmY2U5Y2FjYTEzOTVhYTA2YTg4OTdjNmY3ZDU5NGFiMzcwNDkzYzExMWMwNmY4Nzg4OThjYzRjZDIxOSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiemMuc2hvcnRjdXQtMS4wLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzNTE2NDU5Njg0MTVkYzgzNzFlZmQ2NzVkNmM3MDc0YyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDM4MDc2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAwNi0xMi0wN1QxODo1MzozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAwNi0xMi0wN1QxODo1MzozN1oiLA==
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81OC9lMy8wYTY5MmQzOGQ0MTcwNWQxN2U3NjRjYTdlY2EyNDUzZTZjODlkODJhNmZhMTE4Y2VkZTc1N2NhOWNiODAvemMuc2hvcnRjdXQtMS4wLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiOTVjODgzNTUyNzIyNDljMGZlMzUxMTEzZDE1YjI0NTRmYTJiN2U5NjhkZGUxMWU4MjUzZDU1MjkyODcwNTMxYSIs
ICAgICAgICAibWQ1IjogIjkwM2Q0NGI4ZGU2MDg5MDk0YTA3OTMzMDM0YjIxOWMxIiw=
ICAgICAgICAic2hhMjU2IjogImQwNjliN2Q1NDFkZTMwZDMzM2QwMzYwMGI0NzY4OGZlNjk3MDAzYjlhM2I2NDY3MmU0NWZlZTZkNDViZjM4Yjci
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInpjLnNob3J0Y3V0LTEuMC1weTIuNC5lZ2ciLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiOTAzZDQ0YjhkZTYwODkwOTRhMDc5MzMwMzRiMjE5YzEiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X2VnZyIs
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogIjIuNCIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA1NTE3Niw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMDYtMTItMDdUMTg6NTM6MzgiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMDYtMTItMDdUMTg6NTM6MzhaIiw=
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvOTUvYzgvODM1NTI3MjI0OWMwZmUzNTExMTNkMTViMjQ1NGZhMmI3ZTk2OGRkZTExZTgyNTNkNTUyOTI4NzA1MzFhL3pjLnNob3J0Y3V0LTEuMC1weTIuNC5lZ2ciLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNThlMzBhNjkyZDM4ZDQxNzA1ZDE3ZTc2NGNhN2VjYTI0NTNlNmM4OWQ4MmE2ZmExMThjZWRlNzU3Y2E5Y2I4MCIs
ICAgICAgICAibWQ1IjogIjM1MTY0NTk2ODQxNWRjODM3MWVmZDY3NWQ2YzcwNzRjIiw=
ICAgICAgICAic2hhMjU2IjogIjU1MTlmZmNlOWNhY2ExMzk1YWEwNmE4ODk3YzZmN2Q1OTRhYjM3MDQ5M2MxMTFjMDZmODc4ODk4Y2M0Y2QyMTki
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInpjLnNob3J0Y3V0LTEuMC50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMzUxNjQ1OTY4NDE1ZGM4MzcxZWZkNjc1ZDZjNzA3NGMiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAzODA3Niw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMDYtMTItMDdUMTg6NTM6MzciLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMDYtMTItMDdUMTg6NTM6MzdaIiw=
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNTgvZTMvMGE2OTJkMzhkNDE3MDVkMTdlNzY0Y2E3ZWNhMjQ1M2U2Yzg5ZDgyYTZmYTExOGNlZGU3NTdjYTljYjgwL3pjLnNob3J0Y3V0LTEuMC50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
