ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiS3VtYXJBbmFuZCIs
ICAgICJhdXRob3JfZW1haWwiOiAia3VtYXIuYW5hbmRAa2FtYmFsYS5jby5pbiIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT3RoZXIvUHJvcHJpZXRhcnkgTGljZW5zZSIs
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIE5vcmVuQXBpXG5cbkFwaSB1c2VkIHRvIGNvbm5lY3QgdG8gTm9yZW5PTVNcbioqKipcblxuIyMgQnVpbGRcblxudG8gYnVpbGQgdGhpcyBwYWNrYWdlIGFuZCBpbnN0YWxsIGl0IG9uIHlvdXIgc2VydmVyIHBsZWFzZSB1c2UgXG5cbmBgYCBwaXAgaW5zdGFsbCAtciByZXF1aXJlbWVudHMudHh0IGBgYFxuXG5cbioqKipcblxuIyMgQVBJIFxuYGBgTm9yZW5BcGlgYGBcbi0gW2xvZ2luXSgjbWQtbG9naW4pXG4tIFtsb2dvdXRdKCNtZC1sb2dvdXQpXG5cblN5bWJvbHNcbi0gW3NlYXJjaHNjcmlwXSgjbWQtc2VhcmNoc2NyaXApXG4tIFtnZXRfc2VjdXJpdHlfaW5mb10oI21kLWdldF9zZWN1cml0eV9pbmZvKVxuLSBbZ2V0X3F1b3Rlc10oI21kLWdldF9xdW90ZXMpXG4tIFtnZXRfdGltZV9wcmljZV9zZXJpZXNdKCNtZC1nZXRfdGltZV9wcmljZV9zZXJpZXMpXG4tIFtnZXRfZGFpbHlfcHJpY2Vfc2VyaWVzXSgjbWQtZ2V0X2RhaWx5X3ByaWNlX3Nlcmllcylcbi0gW2dldF9vcHRpb25fY2hhaW5dKCNtZC1nZXRfb3B0aW9uY2hhaW4pXG5cbk9yZGVycyBhbmQgVHJhZGVzXG4tIFtwbGFjZV9vcmRlcl0oI21kLXBsYWNlX29yZGVyKVxuLSBbbW9kaWZ5X29yZGVyXSgjbWQtbW9kaWZ5X29yZGVyKVxuLSBbY2FuY2VsX29yZGVyXSgjbWQtY2FuY2VsX29yZGVyKVxuLSBbZXhpdF9vcmRlcl0oI21kLWV4aXRfb3JkZXIpXG4tIFtwcm9kdWN0X2NvbnZlcnRpb25dKCNtZC1wcmRfY29udmVydClcbi0gW2dldF9vcmRlcmJvb2tdKCNtZC1nZXRfb3JkZXJib29rKVxuLSBbZ2V0X3RyYWRlYm9va10oI21kLWdldF90cmFkZWJvb2spXG4tIFtnZXRfc2luZ2xlb3JkZXJoaXN0b3J5XSgjbWQtZ2V0X3NpbmdsZW9yZGVyaGlzdG9yeSlcblxuSG9sZGluZ3MgYW5kIExpbWl0c1xuLSBbZ2V0X2hvbGRpbmdzXSgjbWQtZ2V0X2hvbGRpbmdzKVxuLSBbZ2V0X3Bvc2l0aW9uc10oI21kLWdldF9wb3NpdGlvbnMpXG4tIFtnZXRfbGltaXRzXSgjbWQtZ2V0X2xpbWl0cylcblxuQ2FsY3VsYXRvcnNcbi0gW3NwYW5fY2FsY3VsYXRvcl0oI21kLXNwYW5fY2FsY3VsYXRvcilcbi0gW2dldF9vcHRpb25fZ3JlZWtdKCNtZC1nZXRfb3B0aW9uX2dyZWVrKVxuXG5XZWJzb2NrZXQgQVBJXG4tIFtzdGFydF93ZWJzb2NrZXRdKCNtZC1zdGFydF93ZWJzb2NrZXQpXG4tIFtzdWJzY3JpYmVdKCNtZC1zdWJzY3JpYmUpXG4tIFt1bnN1YnNjcmliZV0oI21kLXVuc3Vic2NyaWJlKVxuXG5FeGFtcGxlXG4tIFtnZXR0aW5nIHN0YXJ0ZWRdKCNtZC1leGFtcGxlLWJhc2ljKVxuLSBbTWFya2V0IEZ1bmN0aW9uc10oI21kLWV4YW1wbGUtbWFya2V0KVxuLSBbT3JkZXJzIGFuZCBUcmFkZV0oI21kLWV4YW1wbGUtb3JkZXJzKVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1sb2dpblwiPjwvYT4gbG9naW4odXNlcmlkLCBwYXNzd29yZCwgdHdvRkEsIHZlbmRvcl9jb2RlLCBhcGlfc2VjcmV0LCBpbWVpKVxuY29ubmVjdCB0byB0aGUgYnJva2VyLCBvbmx5IG9uY2UgdGhpcyBmdW5jdGlvbiBoYXMgcmV0dXJuZWQgc3VjY2Vzc2Z1bGx5IGNhbiBhbnkgb3RoZXIgb3BlcmF0aW9ucyBiZSBwZXJmb3JtZWRcbkV4YW1wbGU6IFxuYGBgXG4jY3JlZGVudGlhbHNcbnVzZXIgICAgPSA8dWlkPlxucHdkICAgICA9IDxwYXNzd29yZD5cbmZhY3RvcjIgPSA8Mm5kIGZhY3Rvcj5cbnZjICAgICAgPSA8dmVuZG9yIGNvZGU+XG5hcHBfa2V5ID0gPHNlY3JldCBrZXk+XG5pbWVpICAgID0gPGltZWk+XG5cbnJldCA9IGFwaS5sb2dpbih1c2VyaWQ9dWlkLCBwYXNzd29yZD1wd2QsIHR3b0ZBPWZhY3RvcjIsIHZlbmRvcl9jb2RlPXZjLCBhcGlfc2VjcmV0PWFwcF9rZXksIGltZWk9aW1laSlcbmBgYFxuUmVxdWVzdCBEZXRhaWxzIDpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58YXBrdmVyc2lvbip8fEFwcGxpY2F0aW9uIHZlcnNpb24ufFxufHVpZCp8fFVzZXIgSWQgb2YgdGhlIGxvZ2luIHVzZXJ8XG58cHdkKnx8U2hhMjU2IG9mIHRoZSB1c2VyIGVudGVyZWQgcGFzc3dvcmQufFxufGZhY3RvcjIqfHxET0Igb3IgUEFOIGFzIGVudGVyZWQgYnkgdGhlIHVzZXIuIChET0Igc2hvdWxkIGJlIGluIERELU1NLVlZWVkpfFxufHZjKnx8VmVuZG9yIGNvZGUgcHJvdmlkZWQgYnkgbm9yZW4gdGVhbSwgYWxvbmcgd2l0aCBjb25uZWN0aW9uIFVSTHN8XG58YXBwa2V5Knx8U2hhMjU2IG9mICB1aWR8dmVuZG9yX2tleXxcbnxpbWVpKnx8U2VuZCBtYWMgaWYgdXNlcnMgbG9ncyBpbiBmb3IgZGVza3RvcCwgaW1laSBpcyBmcm9tIG1vYmlsZXxcbnxhZGRsZGl2aW5mfHxPcHRpb25hbCBmaWVsZCwgVmFsdWUgbXVzdCBiZSBpbiBiZWxvdyBmb3JtYXQ6fGlPUyAtIGlvc0luZm8udXRzbmFtZS5tYWNoaW5lIC0gaW9zSW5mby5zeXN0ZW1WZXJzaW9ufEFuZHJvaWQgLSBhbmRyb2lkSW5mby5tb2RlbCAtIGFuZHJvaWRJbmZvLnZlcnNpb258ZXhhbXBsZXM6fGlPUyAtIGlQaG9uZSA4LjAgLSA5LjB8QW5kcm9pZCAtIE1vdG8gRyAtIDkgUEtRMS4xODEyMDMuMDF8XG58aXBhZGRyfHxPcHRpb25hbCBmaWVsZHxcbnxzb3VyY2V8QVBJfHxcblxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xMb2dpbiBTdWNjZXNzIE9yIGZhaWx1cmUgc3RhdHVzfFxufHN1c2VydG9rZW58fEl0IHdpbGwgYmUgcHJlc2VudCBvbmx5IG9uIGxvZ2luIHN1Y2Nlc3MuIFRoaXMgZGF0YSB0byBiZSBzZW50IGluIHN1YnNlcXVlbnQgcmVxdWVzdHMgaW4gaktleSBmaWVsZCBhbmQgd2ViIHNvY2tldCBjb25uZWN0aW9uIHdoaWxlIGNvbm5lY3RpbmcuIHxcbnxsYXN0YWNjZXNzdGltZXx8SXQgd2lsbCBiZSBwcmVzZW50IG9ubHkgb24gbG9naW4gc3VjY2Vzcy58XG58c3Bhc3N3b3JkcmVzZXR8WSB8SWYgWSBNYW5kYXRvcnkgcGFzc3dvcmQgcmVzZXQgdG8gYmUgZW5mb3JjZWQuIE90aGVyd2lzZSB0aGUgZmllbGQgd2lsbCBiZSBhYnNlbnQufFxufGV4YXJyfHxKc29uIGFycmF5IG9mIHN0cmluZ3Mgd2l0aCBlbmFibGVkIGV4Y2hhbmdlIG5hbWVzfFxufHVuYW1lfHxVc2VyIG5hbWV8XG58cHJhcnJ8fEpzb24gYXJyYXkgb2YgUHJvZHVjdCBPYmogd2l0aCBlbmFibGVkIHByb2R1Y3RzLCBhcyBkZWZpbmVkIGJlbG93LnxcbnxhY3RpZHx8QWNjb3VudCBpZHxcbnxlbWFpbHx8RW1haWwgSWR8XG58YnJrbmFtZXx8QnJva2VyIGlkfFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgTG9naW4gZmFpbHMufChSZWRpcmVjdCB0byBmb3JjZSBjaGFuZ2UgcGFzc3dvcmQgaWYgbWVzc2FnZSBpcyDigJxJbnZhbGlkIElucHV0IDogUGFzc3dvcmQgRXhwaXJlZOKAnSBvciDigJxJbnZhbGlkIElucHV0IDogQ2hhbmdlIFBhc3N3b3Jk4oCdKXxcblxuXG5TYW1wbGUgU3VjY2VzcyBSZXNwb25zZSA6XG57XG4gICAgXCJyZXF1ZXN0X3RpbWVcIjogXCIyMDoxODo0NyAxOS0wNS0yMDIwXCIsXG4gICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICBcInN1c2VydG9rZW5cIjogXCIzYjk3ZjRjNjc3NjIyNTlhOWRlZDZkYmQ3YmZhZmUyNzg3ZTY2MmIzODcwNDIyZGRkMzQzYTU5ODk1ZjQyM2EwXCIsXG4gICAgXCJsYXN0YWNjZXNzdGltZVwiOiBcIjE1ODk4OTk3MjdcIlxufVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gICAgXCJyZXF1ZXN0X3RpbWVcIjogXCIyMDozMjoxNCAxOS0wNS0yMDIwXCIsXG4gICAgXCJzdGF0XCI6IFwiTm90X09rXCIsXG4gICAgXCJlbXNnXCI6IFwiSW52YWxpZCBJbnB1dCA6IFdyb25nIFBhc3N3b3JkXCJcbn1cblxuIyMjIyA8YSBuYW1lPVwibWQtbG9nb3V0XCI+PC9hPiBsb2dvdXQoKVxuVGVybWluYXRlIHRoZSBzZXNzaW9uXG5cbkV4YW1wbGU6IFxuYGBgXG5yZXQgPSBhcGkubG9nb3V0KClcbmBgYFxuXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnx1aWQqfHxVc2VyIElkIG9mIHRoZSBsb2dpbiB1c2VyfFxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIGZvcm1hdCB3aXRoIGJlbG93IGZpZWxkcy5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfExvZ291dCBTdWNjZXNzIE9yIGZhaWx1cmUgc3RhdHVzfFxufHJlcXVlc3RfdGltZXx8SXQgd2lsbCBiZSBwcmVzZW50IG9ubHkgb24gc3VjY2Vzc2Z1bCBsb2dvdXQufFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgTG9nb3V0IGZhaWxzLnxcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxue1xuICAgXCJzdGF0XCI6XCJPa1wiLFxuICAgXCJyZXF1ZXN0X3RpbWVcIjpcIjEwOjQzOjQxIDI4LTA1LTIwMjBcIlxufVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgXCJlbXNnXCI6XCJTZXJ2ZXIgVGltZW91dCA6ICBcIlxufVxuXG5cbiMjIyMgPGEgbmFtZT1cIm1kLXBsYWNlX29yZGVyXCI+PC9hPiBwbGFjZV9vcmRlcihidXlfb3Jfc2VsbCwgcHJvZHVjdF90eXBlLGV4Y2hhbmdlLCB0cmFkaW5nc3ltYm9sLCBxdWFudGl0eSwgZGlzY2xvc2VxdHksIHByaWNlX3R5cGUsIHByaWNlPTAuMCwgdHJpZ2dlcl9wcmljZT1Ob25lLCByZXRlbnRpb249J0RBWScsIGFtbz0nTk8nLCByZW1hcmtzPU5vbmUpXG5wbGFjZSBhbiBvcmRlciB0byBvbXNcblxuRXhhbXBsZTogXG5cbmBgYFxucmV0ID0gYXBpLnBsYWNlX29yZGVyKGJ1eV9vcl9zZWxsPSdCJywgcHJvZHVjdF90eXBlPSdDJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlPSdOU0UnLCB0cmFkaW5nc3ltYm9sPSdDQU5CSy1FUScsIFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk9MSwgZGlzY2xvc2VxdHk9MCxwcmljZV90eXBlPSdTTC1MTVQnLCBwcmljZT0yMDAuMDAsIHRyaWdnZXJfcHJpY2U9MTk5LjUwLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ZW50aW9uPSdEQVknLCByZW1hcmtzPSdteV9vcmRlcl8wMDEnKVxuYGBgXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnx1aWQqfHxMb2dnZWQgaW4gVXNlciBJZHxcbnxhY3RpZCp8fExvZ2luIHVzZXJzIGFjY291bnQgSUR8XG58ZXhjaCp8TlNFICAvIE5GTyAvIEJTRSAvIE1DWHxFeGNoYW5nZSAoU2VsZWN0IGZyb20g4oCYZXhhcnLigJkgQXJyYXkgcHJvdmlkZWQgaW4gVXNlciBEZXRhaWxzIHJlc3BvbnNlKXxcbnx0c3ltKnx8VW5pcXVlIGlkIG9mIGNvbnRyYWN0IG9uIHdoaWNoIG9yZGVyIHRvIGJlIHBsYWNlZC4gKHVzZSB1cmwgZW5jb2RpbmcgdG8gYXZvaWQgc3BlY2lhbCBjaGFyIGVycm9yIGZvciBzeW1ib2xzIGxpa2UgTSZNKXxcbnxxdHkqfHxPcmRlciBRdWFudGl0eSB8XG58cHJjKnx8T3JkZXIgUHJpY2V8XG58dHJncHJjfHxPbmx5IHRvIGJlIHNlbnQgaW4gY2FzZSBvZiBTTCAvIFNMLU0gb3JkZXIufFxufGRzY3F0eXx8RGlzY2xvc2VkIHF1YW50aXR5IChNYXggMTAlIGZvciBOU0UsIGFuZCA1MCUgZm9yIE1DWCl8XG58cHJkKnxDIC8gTSAvIEh8UHJvZHVjdCBuYW1lIChTZWxlY3QgZnJvbSDigJhwcmFycuKAmSBBcnJheSBwcm92aWRlZCBpbiBVc2VyIERldGFpbHMgcmVzcG9uc2UsIGFuZCBpZiBzYW1lIGlzIGFsbG93ZWQgZm9yIHNlbGVjdGVkLCBleGNoYW5nZS4gU2hvdyBwcm9kdWN0IGRpc3BsYXkgbmFtZSwgZm9yIHVzZXIgdG8gc2VsZWN0LCBhbmQgc2VuZCBjb3JyZXNwb25kaW5nIHByZCBpbiBBUEkgY2FsbCl8XG58dHJhbnR5cGUqfEIgLyBTfEIgLT4gQlVZLCBTIC0+IFNFTEx8XG58cHJjdHlwKnxMTVQgLyBNS1QgIC8gU0wtTE1UIC8gU0wtTUtUIC8gRFMgLyAyTCAvIDNMfHx8fFxufHJldCp8REFZIC8gRU9TIC8gSU9DIHxSZXRlbnRpb24gdHlwZSAoU2hvdyBvcHRpb25zIGFzIHBlciBhbGxvd2VkIGV4Y2hhbmdlcykgfFxufHJlbWFya3N8fEFueSB0YWcgYnkgdXNlciB0byBtYXJrIG9yZGVyLnxcbnxvcmRlcnNvdXJjZXxNT0IgLyBXRUIgLyBUVCB8VXNlZCB0byBnZW5lcmF0ZSBleGNoYW5nZSBpbmZvIGZpZWxkcy58XG58YnBwcmN8fEJvb2sgUHJvZml0IFByaWNlIGFwcGxpY2FibGUgb25seSBpZiBwcm9kdWN0IGlzIHNlbGVjdGVkIGFzIEIgKEJyYWNrZXQgb3JkZXIgKSB8XG58YmxwcmN8fEJvb2sgbG9zcyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxufHRyYWlscHJjfHxUcmFpbGluZyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxufGFtb3x8WWVzICwgSWYgbm90IHNlbnQsIG9mIE5vdCDigJxZZXPigJ0sIHdpbGwgYmUgdHJlYXRlZCBhcyBSZWd1bGFyIG9yZGVyLiB8XG58dHN5bTJ8fFRyYWRpbmcgc3ltYm9sIG9mIHNlY29uZCBsZWcsIG1hbmRhdG9yeSBmb3IgcHJpY2UgdHlwZSAyTCBhbmQgM0wgKHVzZSB1cmwgZW5jb2RpbmcgdG8gYXZvaWQgc3BlY2lhbCBjaGFyIGVycm9yIGZvciBzeW1ib2xzIGxpa2UgTSZNKXxcbnx0cmFudHlwZTJ8fFRyYW5zYWN0aW9uIHR5cGUgb2Ygc2Vjb25kIGxlZywgbWFuZGF0b3J5IGZvciBwcmljZSB0eXBlIDJMIGFuZCAzTHxcbnxxdHkyfHxRdWFudGl0eSBmb3Igc2Vjb25kIGxlZywgbWFuZGF0b3J5IGZvciBwcmljZSB0eXBlIDJMIGFuZCAzTHxcbnxwcmMyfHxQcmljZSBmb3Igc2Vjb25kIGxlZywgbWFuZGF0b3J5IGZvciBwcmljZSB0eXBlIDJMIGFuZCAzTHxcbnx0c3ltM3x8VHJhZGluZyBzeW1ib2wgb2YgdGhpcmQgbGVnLCBtYW5kYXRvcnkgZm9yIHByaWNlIHR5cGUgM0wgKHVzZSB1cmwgZW5jb2RpbmcgdG8gYXZvaWQgc3BlY2lhbCBjaGFyIGVycm9yIGZvciBzeW1ib2xzIGxpa2UgTSZNKXxcbnx0cmFudHlwZTN8fFRyYW5zYWN0aW9uIHR5cGUgb2YgdGhpcmQgbGVnLCBtYW5kYXRvcnkgZm9yIHByaWNlIHR5cGUgM0x8XG58cXR5M3x8UXVhbnRpdHkgZm9yIHRoaXJkIGxlZywgbWFuZGF0b3J5IGZvciBwcmljZSB0eXBlIDNMfFxufHByYzN8fFByaWNlIGZvciB0aGlyZCBsZWcsIG1hbmRhdG9yeSBmb3IgcHJpY2UgdHlwZSAzTHxcblxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuUmVzcG9uc2UgZGF0YSB3aWxsIGJlIGluIGpzb24gZm9ybWF0IHdpdGggYmVsb3cgZmllbGRzLlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xQbGFjZSBvcmRlciBzdWNjZXNzIG9yIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxub3Jlbm9yZG5vfHxJdCB3aWxsIGJlIHByZXNlbnQgb25seSBvbiBzdWNjZXNzZnVsIE9yZGVyIHBsYWNlbWVudCB0byBPTVMufFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgT3JkZXIgcGxhY2VtZW50IGZhaWxzfFxuXG5TYW1wbGUgU3VjY2VzcyBSZXNwb25zZTpcbntcbiAgICBcInJlcXVlc3RfdGltZVwiOiBcIjEwOjQ4OjAzIDIwLTA1LTIwMjBcIixcbiAgICBcInN0YXRcIjogXCJPa1wiLFxuICAgIFwibm9yZW5vcmRub1wiOiBcIjIwMDUyMDAwMDAwMDE3XCJcbn1cblxuU2FtcGxlIEVycm9yIFJlc3BvbnNlIDpcbntcbiAgICBcInN0YXRcIjogXCJOb3RfT2tcIixcbiAgICBcInJlcXVlc3RfdGltZVwiOiBcIjIwOjQwOjAxIDE5LTA1LTIwMjBcIixcbiAgICBcImVtc2dcIjogXCJFcnJvciBPY2N1cnJlZCA6IDIgXFxcImludmFsaWQgaW5wdXRcXFwiXCJcbn1cblxuIyMjIyA8YSBuYW1lPVwibWQtbW9kaWZ5X29yZGVyXCI+PC9hPiBtb2RpZnlfb3JkZXIob3JkZXJubywgZXhjaGFuZ2UsIHRyYWRpbmdzeW1ib2wsIG5ld3F1YW50aXR5LG5ld3ByaWNlX3R5cGUsIG5ld3ByaWNlLCBuZXd0cmlnZ2VyX3ByaWNlLCBhbW8pOlxubW9kaWZ5IHRoZSBxdWFudGl0eSBwcmljZXR5cGUgb3IgcHJpY2Ugb2YgYW4gb3JkZXJcblxuRXhhbXBsZTogXG5cbmBgYFxub3JkZXJubyA9IHJldFsnbm9yZW5vcmRubyddICNmcm9tIHBsYWNlb3JkZXIgcmV0dXJuIHZhbHVlXG5yZXQgPSBhcGkubW9kaWZ5X29yZGVyKGV4Y2hhbmdlPSdOU0UnLCB0cmFkaW5nc3ltYm9sPSdDQU5CSy1FUScsIG9yZGVybm89b3JkZXJubyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3cXVhbnRpdHk9MiwgbmV3cHJpY2VfdHlwZT0nTUtUJywgbmV3cHJpY2U9MC4wMClcbiMjIHNsIG1vZGlmaWNhdGlvblxucmV0ID0gYXBpLm1vZGlmeV9vcmRlcihleGNoYW5nZT0nTlNFJywgdHJhZGluZ3N5bWJvbD0nQ0FOQkstRVEnLCBvcmRlcm5vPW9yZGVybm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld3F1YW50aXR5PTIsIG5ld3ByaWNlX3R5cGU9J1NMLUxNVCcsIG5ld3ByaWNlPTIwMS4wMCwgbmV3dHJpZ2dlcl9wcmljZT0yMDAuMDApXG5gYGBcblxuUmVxdWVzdCBEZXRhaWxzIDpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58ZXhjaCp8fEV4Y2hhbmdlfFxufG5vcmVub3Jkbm8qfHxOb3JlbiBvcmRlciBudW1iZXIsIHdoaWNoIG5lZWRzIHRvIGJlIG1vZGlmaWVkfFxufHByY3R5cHxMTVQgLyBNS1QgLyBTTC1NS1QgLyBTTC1MTVR8VGhpcyBjYW4gYmUgbW9kaWZpZWQufFxufHByY3x8TW9kaWZpZWQgLyBOZXcgcHJpY2V8XG58cXR5fHxNb2RpZmllZCAvIE5ldyBRdWFudGl0eXx8UXVhbnRpdHkgdG8gRmlsbCAvIE9yZGVyIFF0eSAtIFRoaXMgaXMgdGhlIHRvdGFsIHF0eSB0byBiZSBmaWxsZWQgZm9yIHRoZSBvcmRlci4gSXRzIE9wZW4gUXR5L1BlbmRpbmcgUXR5IHBsdXMgRmlsbGVkIFNoYXJlcyAoY3VtdWxhdGl2ZSBmb3IgdGhlIG9yZGVyKSBmb3IgdGhlIG9yZGVyLnwqIFBsZWFzZSBkbyBub3Qgc2VuZCBvbmx5IHRoZSBwZW5kaW5nIHF0eSBpbiB0aGlzIGZpZWxkfFxufHRzeW0qfHxVbnF1ZSBpZCBvZiBjb250cmFjdCBvbiB3aGljaCBvcmRlciB3YXMgcGxhY2VkLiBDYW7igJl0IGJlIG1vZGlmaWVkLCBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoYXQgb2Ygb3JpZ2luYWwgb3JkZXIuICh1c2UgdXJsIGVuY29kaW5nIHRvIGF2b2lkIHNwZWNpYWwgY2hhciBlcnJvciBmb3Igc3ltYm9scyBsaWtlIE0mTSl8XG58cmV0fERBWSAvIElPQyAvIEVPU3xOZXcgUmV0ZW50aW9uIHR5cGUgb2YgdGhlIG9yZGVyIHxcbnx8fHxcbnx0cmdwcmN8fE5ldyB0cmlnZ2VyIHByaWNlIGluIGNhc2Ugb2YgU0wtTUtUIG9yIFNMLUxNVHxcbnx1aWQqfHxVc2VyIGlkIG9mIHRoZSBsb2dnZWQgaW4gdXNlci58XG58YnBwcmN8fEJvb2sgUHJvZml0IFByaWNlIGFwcGxpY2FibGUgb25seSBpZiBwcm9kdWN0IGlzIHNlbGVjdGVkIGFzIEIgKEJyYWNrZXQgb3JkZXIgKSB8XG58YmxwcmN8fEJvb2sgbG9zcyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxufHRyYWlscHJjfHxUcmFpbGluZyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuUmVzcG9uc2UgZGF0YSB3aWxsIGJlIGluIGpzb24gZm9ybWF0IHdpdGggYmVsb3cgZmllbGRzLlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xNb2RpZnkgb3JkZXIgc3VjY2VzcyBvciBmYWlsdXJlIGluZGljYXRpb24ufFxufHJlc3VsdHx8Tm9yZW4gT3JkZXIgbnVtYmVyIG9mIHRoZSBvcmRlciBtb2RpZmllZC58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxlbXNnfHxUaGlzIHdpbGwgYmUgcHJlc2VudCBvbmx5IGlmIE9yZGVyIG1vZGlmaWNhdGlvbiBmYWlsc3xcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxue1xuICAgICBcInJlcXVlc3RfdGltZVwiOlwiMTQ6MTQ6MDggMjYtMDUtMjAyMFwiLFxuICAgICBcInN0YXRcIjpcIk9rXCIsXG4gICAgIFwicmVzdWx0XCI6XCIyMDA1MjYwMDAwMDEwM1wiXG59XG5cblNhbXBsZSBGYWlsdXJlIFJlc3BvbnNlIDpcbntcbiAgIFwicmVxdWVzdF90aW1lXCI6XCIxNjowMzoyOSAyOC0wNS0yMDIwXCIsXG4gICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgXCJlbXNnXCI6XCJSZWplY3RlZCA6IE9SQTpPcmRlciBub3QgZm91bmRcIlxufVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1jYW5jZWxfb3JkZXJcIj48L2E+IGNhbmNlbF9vcmRlcihvcmRlcm5vKVxuY2FuY2VsIGFuIG9yZGVyXG5cbkV4YW1wbGU6XG5cbmBgYFxub3JkZXJubyA9IHJldFsnbm9yZW5vcmRubyddICNmcm9tIHBsYWNlb3JkZXIgcmV0dXJuIHZhbHVlXG5yZXQgPSBhcGkuY2FuY2VsX29yZGVyKG9yZGVybm89b3JkZXJubylcbmBgYFxuXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxub3Jlbm9yZG5vKnx8Tm9yZW4gb3JkZXIgbnVtYmVyLCB3aGljaCBuZWVkcyB0byBiZSBtb2RpZmllZHxcbnx1aWQqfHxVc2VyIGlkIG9mIHRoZSBsb2dnZWQgaW4gdXNlci58XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfENhbmNlbCBvcmRlciBzdWNjZXNzIG9yIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVzdWx0fHxOb3JlbiBPcmRlciBudW1iZXIgb2YgdGhlIGNhbmNlbGVkIG9yZGVyLnxcbnxyZXF1ZXN0X3RpbWV8fFJlc3BvbnNlIHJlY2VpdmVkIHRpbWUufFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgT3JkZXIgY2FuY2VsYXRpb24gZmFpbHN8XG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcbntcbiAgIFwicmVxdWVzdF90aW1lXCI6XCIxNDoxNDoxMCAyNi0wNS0yMDIwXCIsXG4gICBcInN0YXRcIjpcIk9rXCIsXG4gICBcInJlc3VsdFwiOlwiMjAwNTI2MDAwMDAxMDNcIlxufVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gICBcInJlcXVlc3RfdGltZVwiOlwiMTY6MDE6NDggMjgtMDUtMjAyMFwiLFxuICAgXCJzdGF0XCI6XCJOb3RfT2tcIixcbiAgIFwiZW1zZ1wiOlwiUmVqZWN0ZWQgOiBPUkE6T3JkZXIgbm90IGZvdW5kIHRvIENhbmNlbFwiXG59XG5cblxuIyMjIyA8YSBuYW1lPVwibWQtZXhpdF9vcmRlclwiPjwvYT4gZXhpdF9vcmRlcihvcmRlcm5vKVxuZXhpdHMgYSBjb3ZlciBvciBicmFja2V0IG9yZGVyXG5cblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufG5vcmVub3Jkbm8qfHxOb3JlbiBvcmRlciBudW1iZXIsIHdoaWNoIG5lZWRzIHRvIGJlIG1vZGlmaWVkfFxufHByZCp8SCAvIEIgfEFsbG93ZWQgZm9yIG9ubHkgSCBhbmQgQiBwcm9kdWN0cyAoQ292ZXIgb3JkZXIgYW5kIGJyYWNrZXQgb3JkZXIpfFxufHVpZCp8fFVzZXIgaWQgb2YgdGhlIGxvZ2dlZCBpbiB1c2VyLnxcblxuUmVzcG9uc2UgRGV0YWlscyA6XG5cblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIGZvcm1hdCB3aXRoIGJlbG93IGZpZWxkcy5cblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58c3RhdHxPayBvciBOb3RfT2t8Q2FuY2VsIG9yZGVyIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxkbXNnfHxEaXNwbGF5IG1lc3NhZ2UsICh3aWxsIGJlIHByZXNlbnQgb25seSBpbiBjYXNlIG9mIHN1Y2Nlc3MpLnxcbnxyZXF1ZXN0X3RpbWV8fFJlc3BvbnNlIHJlY2VpdmVkIHRpbWUufFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgT3JkZXIgY2FuY2VsYXRpb24gZmFpbHN8XG5cblxuIyMjIyA8YSBuYW1lPVwibWQtcHJkX2NvbnZlcnRcIj48L2E+IHBvc2l0aW9uX3Byb2R1Y3RfY29udmVyc2lvbihleGNoYW5nZSwgdHJhZGluZ3N5bWJvbCwgcXVhbnRpdHksIG5ld19wcm9kdWN0X3R5cGUsIHByZXZpb3VzX3Byb2R1Y3RfdHlwZSwgYnV5X29yX3NlbGwsIGRheV9vcl9jZilcblxuQ29udmVydCBhIHByb2R1Y3Qgb2YgYSBwb3NpdGlvbiBcblxuRXhhbXBsZTpcblxuYGBgXG5yZXQgPSBhcGkuZ2V0X3Bvc2l0aW9ucygpXG4jY29udmVydHMgdGhlIGZpcnN0IHBvc2l0aW9uIGZyb20gZXhpc3RpbmcgcHJvZHVjdCB0byBpbnRyYWRheVxucCA9IHJldFswXVxucmV0ID0gYXBpLnBvc2l0aW9uX3Byb2R1Y3RfY29udmVyc2lvbihwWydleGNoJ10sIHBbJ3RzeW0nXSwgcFsnbmV0cXR5J10sICdJJywgcFsncHJkJ10sICdCJywgJ0RBWScpXG5gYGBcblxuUmVxdWVzdCBEZXRhaWxzIDpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58ZXhjaCp8fEV4Y2hhbmdlfFxufHRzeW0qfHxVbmlxdWUgaWQgb2YgY29udHJhY3Qgb24gd2hpY2ggb3JkZXIgd2FzIHBsYWNlZC4gQ2Fu4oCZdCBiZSBtb2RpZmllZCwgbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGF0IG9mIG9yaWdpbmFsIG9yZGVyLiAodXNlIHVybCBlbmNvZGluZyB0byBhdm9pZCBzcGVjaWFsIGNoYXIgZXJyb3IgZm9yIHN5bWJvbHMgbGlrZSBNJk0pfFxufHF0eSp8fFF1YW50aXR5IHRvIGJlIGNvbnZlcnRlZC58XG58dWlkKnx8VXNlciBpZCBvZiB0aGUgbG9nZ2VkIGluIHVzZXIufFxufGFjdGlkKnx8QWNjb3VudCBpZHxcbnxwcmQqfHxQcm9kdWN0IHRvIHdoaWNoIHRoZSB1c2VyIHdhbnRzIHRvIGNvbnZlcnQgcG9zaXRpb24uIHxcbnxwcmV2cHJkKnx8T3JpZ2luYWwgcHJvZHVjdCBvZiB0aGUgcG9zaXRpb24ufFxufHRyYW50eXBlKnx8VHJhbnNhY3Rpb24gdHlwZXxcbnxwb3N0eXBlKnxEYXkgLyBDRnxDb252ZXJ0aW5nIERheSBvciBDYXJyeSBmb3J3YXJkIHBvc2l0aW9ufFxufG9yZGVyc291cmNlfE1PQiB8Rm9yIExvZ2dpbmd8XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfFBvc2l0aW9uIGNvbnZlcnNpb24gc3VjY2VzcyBvciBmYWlsdXJlIGluZGljYXRpb24ufFxufGVtc2d8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaWYgUG9zaXRpb24gY29udmVyc2lvbiBmYWlscy58XG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcbntcbiAgIFwicmVxdWVzdF90aW1lXCI6XCIxMDo1MjoxMiAwMi0wNi0yMDIwXCIsXG4gICBcInN0YXRcIjpcIk9rXCJcbn1cblxuU2FtcGxlIEZhaWx1cmUgUmVzcG9uc2UgOlxue1xuICAgXCJzdGF0XCI6XCJOb3RfT2tcIixcbiAgIFwiZW1zZ1wiOlwiSW52YWxpZCBJbnB1dCA6ICBJbnZhbGlkIFBvc2l0aW9uIFR5cGVcIlxufVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1nZXRfb3JkZXJib29rXCI+PC9hPiAgT3JkZXIgQm9va1xuTGlzdCBvZiBPcmRlcnMgcGxhY2VkIGZvciB0aGUgYWNjb3VudFxuXG5FeGFtcGxlIDpcbmBgYFxucmV0ID0gYXBpLmdldF9vcmRlcl9ib29rKClcbnByaW50KHJldClcbmBgYFxuUmVxdWVzdCBEZXRhaWxzIDpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58dWlkKnx8TG9nZ2VkIGluIFVzZXIgSWR8XG58cHJkfEggLyBNIC8gLi4ufFByb2R1Y3QgbmFtZXxcblxuUmVzcG9uc2UgRGV0YWlscyA6XG5cblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIEFycmF5IG9mIG9iamVjdHMgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBzdWNjZXNzLlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xPcmRlciBib29rIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxleGNofHxFeGNoYW5nZSBTZWdtZW50fFxufHRzeW18fFRyYWRpbmcgc3ltYm9sIC8gY29udHJhY3Qgb24gd2hpY2ggb3JkZXIgaXMgcGxhY2VkLnxcbnxub3Jlbm9yZG5vfHxOb3JlbiBPcmRlciBOdW1iZXJ8XG58cHJjfHxPcmRlciBQcmljZXxcbnxxdHl8fE9yZGVyIFF1YW50aXR5fFxufHByZHx8RGlzcGxheSBwcm9kdWN0IGFsaWFzIG5hbWUsIHVzaW5nIHByYXJyIHJldHVybmVkIGluIHVzZXIgZGV0YWlscy58XG58c3RhdHVzfHx8XG58dHJhbnR5cGV8QiAvIFN8VHJhbnNhY3Rpb24gdHlwZSBvZiB0aGUgb3JkZXJ8XG58cHJjdHlwfExNVCAvIE1LVHxQcmljZSB0eXBlfFxufGZpbGxzaGFyZXN8fFRvdGFsIFRyYWRlZCBRdWFudGl0eSBvZiB0aGlzIG9yZGVyfFxufGF2Z3ByY3x8QXZlcmFnZSB0cmFkZSBwcmljZSBvZiB0b3RhbCB0cmFkZWQgcXVhbnRpdHkgfFxufHJlanJlYXNvbnx8SWYgb3JkZXIgaXMgcmVqZWN0ZWQsIHJlYXNvbiBpbiB0ZXh0IGZvcm18XG58ZXhjaG9yZGlkfHxFeGNoYW5nZSBPcmRlciBOdW1iZXJ8XG58Y2FuY2VscXR5fHxDYW5jZWxlZCBxdWFudGl0eSBmb3Igb3JkZXIgd2hpY2ggaXMgaW4gc3RhdHVzIGNhbmNlbGxlZC58XG58cmVtYXJrc3x8QW55IG1lc3NhZ2UgRW50ZXJlZCBkdXJpbmcgb3JkZXIgZW50cnkufFxufGRzY3F0eXx8T3JkZXIgZGlzY2xvc2VkIHF1YW50aXR5Lnxcbnx0cmdwcmN8fE9yZGVyIHRyaWdnZXIgcHJpY2V8XG58cmV0fERBWSAvIElPQyAvIEVPU3xPcmRlciB2YWxpZGl0eXxcbnx1aWR8fHxcbnxhY3RpZHx8fFxufGJwcHJjfHxCb29rIFByb2ZpdCBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBCIChCcmFja2V0IG9yZGVyICkgfFxufGJscHJjfHxCb29rIGxvc3MgUHJpY2UgYXBwbGljYWJsZSBvbmx5IGlmIHByb2R1Y3QgaXMgc2VsZWN0ZWQgYXMgSCBhbmQgQiAoSGlnaCBMZXZlcmFnZSBhbmQgQnJhY2tldCBvcmRlciApIHxcbnx0cmFpbHByY3x8VHJhaWxpbmcgUHJpY2UgYXBwbGljYWJsZSBvbmx5IGlmIHByb2R1Y3QgaXMgc2VsZWN0ZWQgYXMgSCBhbmQgQiAoSGlnaCBMZXZlcmFnZSBhbmQgQnJhY2tldCBvcmRlciApIHxcbnxhbW98fFllcyAvIE5vfFxufHBwfHxQcmljZSBwcmVjaXNpb258XG58dGl8fFRpY2sgc2l6ZXxcbnxsc3x8TG90IHNpemV8XG58dG9rZW58fENvbnRyYWN0IFRva2VufFxufG5vcmVudG18fHxcbnxvcmRlbnR0bXx8fFxufGV4Y2hfdG18fHxcbnxzbm9vcmR0fHwwIGZvciBwcm9maXQgbGVnIGFuZCAxIGZvciBzdG9wbG9zcyBsZWd8XG58c25vbnVtfHxUaGlzIGZpZWxkIHdpbGwgYmUgcHJlc2VudCBmb3IgcHJvZHVjdCBIIGFuZCBCOyBhbmQgb25seSBpZiBpdCBpcyBwcm9maXQvc2wgb3JkZXIufFxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBmYWlsdXJlOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE5vdF9Pa3xPcmRlciBib29rIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxlbXNnfHxFcnJvciBtZXNzYWdlfFxuXG5TYW1wbGUgU3VjY2VzcyBPdXRwdXQgOlxuU3VjY2VzcyByZXNwb25zZSA6XG5bXG4gICAgICB7XG7igJxzdGF04oCdIDog4oCcT2vigJ0sXG7igJxleGNo4oCdIDog4oCcTlNF4oCdICxcbuKAnHRzeW3igJ0gOiDigJxBQ0MtRVHigJ0gLFxu4oCcbm9yZW5vcmRub+KAnSA6IOKAnDIwMDYyNTAwMDAwMDAxMjIz4oCdLFxuICAgICAgICAgICAgICAg4oCccHJj4oCdIDog4oCcMTI3MjMw4oCdLFxuICAgICAgICAgICAgICAg4oCccXR54oCdIDog4oCcMTAw4oCdLFxuICAgICAgICAgICAgICAg4oCccHJk4oCdIDog4oCcQ+KAnSxcbuKAnHN0YXR1c+KAnTog4oCcT3BlbuKAnSxcbiAgICAgICAgICAgICAgIOKAnHRyYW50eXBl4oCdIDog4oCcQuKAnSxcbiDigJxwcmN0eXDigJ0gOiDigJ1MTVTigJ0sXG4gICAgICAgICAgICAgICDigJxmaWxsc2hhcmVz4oCdIDog4oCcMOKAnSxcbiAgICAgICAgICAgICAgIOKAnGF2Z3ByY+KAnSA6IOKAnDDigJ0sXG7igJxleGNob3JkaWTigJ0gOiDigJwyNTA2MjAwMDAwMDAzNDM0MjHigJ0sXG4g4oCcdWlk4oCdIDog4oCcVklEWUHigJ0sIFxuIOKAnGFjdGlk4oCdIDog4oCcQ0xJRU5UMeKAnSxcbiDigJxyZXTigJ0gOiDigJxEQVnigJ0sXG4g4oCcYW1v4oCdIDog4oCcWWVz4oCdXG4gICAgIH0sXG4gICAge1xu4oCcc3RhdOKAnSA6IOKAnE9r4oCdLFxu4oCcZXhjaOKAnSA6IOKAnE5TReKAnSAsXG7igJx0c3lt4oCdIDog4oCcQUJCLUVR4oCdICxcbuKAnG5vcmVub3Jkbm/igJ0gOiDigJwyMDA2MjUwMDAwMDAwMjU0M+KAnSxcbiAgICAgICAgICAgICAgIOKAnHByY+KAnSA6IOKAnDEyNzgzMOKAnSxcbiAgICAgICAgICAgIOKAnHF0eeKAnSA6IOKAnDUw4oCdLFxuICAgICAgICAgICAgICAg4oCccHJk4oCdIDog4oCcQ+KAnSxcbuKAnHN0YXR1c+KAnTog4oCcUkVKRUNU4oCdLFxuICAgICAgICAgICAgICDigJx0cmFudHlwZeKAnSA6IOKAnELigJ0sXG7igJxwcmN0eXDigJ0gOiDigJ1MTVTigJ0sXG4gICAgICAgICAgICAg4oCcZmlsbHNoYXJlc+KAnSA6IOKAnDDigJ0sXG4gICAgICAgICAgICAg4oCcYXZncHJj4oCdIDog4oCcMOKAnSxcbiAgICAgICAgICAgICAg4oCccmVqcmVhc29u4oCdIDog4oCcSW5zdWZmaWNpZW50IGZ1bmRz4oCdXG7igJx1aWTigJ0gOiDigJxWSURZQeKAnSwgXG7igJxhY3RpZOKAnSA6IOKAnENMSUVOVDHigJ0sXG7igJxyZXTigJ0gOiDigJxEQVnigJ0sXG7igJxhbW/igJ0gOiDigJxOb+KAnVxuICAgIH1cbl1cblxuU2FtcGxlIEZhaWx1cmUgUmVzcG9uc2UgOlxue1xuICAgXCJzdGF0XCI6XCJOb3RfT2tcIixcbiAgIFwiZW1zZ1wiOlwiU2Vzc2lvbiBFeHBpcmVkIDogSW52YWxpZCBTZXNzaW9uIEtleVwiXG59XG5cbiMjIyMgPGEgbmFtZT1cIm1kLWdldF90cmFkZWJvb2tcIj48L2E+ICBUcmFkZSBCb29rIFxuTGlzdCBvZiBUcmFkZXMgb2YgdGhlIGFjY291bnRcblxuRXhhbXBsZTpcbmBgYFxucmV0ID0gYXBpLmdldF90cmFkZV9ib29rKClcbnByaW50KHJldClcbmBgYFxuXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnx1aWQqfHxMb2dnZWQgaW4gVXNlciBJZHxcbnxhY3RpZCp8fEFjY291bnQgSWQgb2YgbG9nZ2VkIGluIHVzZXJ8XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBBcnJheSBvZiBvYmplY3RzIHdpdGggYmVsb3cgZmllbGRzIGluIGNhc2Ugb2Ygc3VjY2Vzcy5cblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58c3RhdHxPayBvciBOb3RfT2t8T3JkZXIgYm9vayBzdWNjZXNzIG9yIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58ZXhjaHx8RXhjaGFuZ2UgU2VnbWVudHxcbnx0c3ltfHxUcmFkaW5nIHN5bWJvbCAvIGNvbnRyYWN0IG9uIHdoaWNoIG9yZGVyIGlzIHBsYWNlZC58XG58bm9yZW5vcmRub3x8Tm9yZW4gT3JkZXIgTnVtYmVyfFxufHF0eXx8T3JkZXIgUXVhbnRpdHl8XG58cHJkfHxEaXNwbGF5IHByb2R1Y3QgYWxpYXMgbmFtZSwgdXNpbmcgcHJhcnIgcmV0dXJuZWQgaW4gdXNlciBkZXRhaWxzLnxcbnx0cmFudHlwZXxCIC8gU3xUcmFuc2FjdGlvbiB0eXBlIG9mIHRoZSBvcmRlcnxcbnxwcmN0eXB8TE1UIC8gTUtUfFByaWNlIHR5cGV8XG58ZmlsbHNoYXJlc3x8VG90YWwgVHJhZGVkIFF1YW50aXR5IG9mIHRoaXMgb3JkZXJ8XG58YXZncHJjfHxBdmVyYWdlIHRyYWRlIHByaWNlIG9mIHRvdGFsIHRyYWRlZCBxdWFudGl0eSB8XG58ZXhjaG9yZGlkfHxFeGNoYW5nZSBPcmRlciBOdW1iZXJ8XG58cmVtYXJrc3x8QW55IG1lc3NhZ2UgRW50ZXJlZCBkdXJpbmcgb3JkZXIgZW50cnkufFxufHJldHxEQVkgLyBJT0MgLyBFT1N8T3JkZXIgdmFsaWRpdHl8XG58dWlkfHx8XG58YWN0aWR8fHxcbnxwcHx8UHJpY2UgcHJlY2lzaW9ufFxufHRpfHxUaWNrIHNpemV8XG58bHN8fExvdCBzaXplfFxufGNzdEZybXx8Q3VzdG9tIEZpcm18XG58Zmx0bXx8RmlsbCBUaW1lfFxufGZsaWR8fEZpbGwgSUR8XG58ZmxxdHl8fEZpbGwgUXR5fFxufGZscHJjfHxGaWxsIFByaWNlfFxufG9yZGVyc291cmNlfHxPcmRlciBTb3VyY2V8XG58dG9rZW58fFRva2VufFxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBmYWlsdXJlOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE5vdF9Pa3xPcmRlciBib29rIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxlbXNnfHxFcnJvciBtZXNzYWdlfFxuXG5TYW1wbGUgU3VjY2VzcyBPdXRwdXQgOlxuXG5bXG4gICB7XG4gICAgICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICAgICBcIm5vcmVub3Jkbm9cIjogXCIyMDEyMTMwMDA2NTcxNVwiLFxuICAgICAgIFwidWlkXCI6IFwiR1VSVVJBSlwiLFxuICAgICAgIFwiYWN0aWRcIjogXCJHVVJVUkFKXCIsXG4gICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgXCJwcmN0eXBcIjogXCJMTVRcIixcbiAgICAgICBcInJldFwiOiBcIkRBWVwiLFxuICAgICAgIFwicHJkXCI6IFwiTVwiLFxuICAgICAgIFwiZmxpZFwiOiBcIjEwMlwiLFxuICAgICAgIFwiZmx0bVwiOiBcIjAxLTAxLTE5ODAgMDA6MDA6MDBcIixcbiAgICAgICBcInRyYW50eXBlXCI6IFwiU1wiLFxuICAgICAgIFwidHN5bVwiOiBcIkFDQ0VMWUEtRVFcIixcbiAgICAgICBcInF0eVwiOiBcIjE4MFwiLFxuICAgICAgIFwidG9rZW5cIjogXCI3MDUzXCIsXG4gICAgICAgXCJmaWxsc2hhcmVzXCI6IFwiMTgwXCIsXG4gICAgICAgXCJmbHF0eVwiOiBcIjE4MFwiLFxuICAgICAgIFwicHBcIjogXCIyXCIsXG4gICAgICAgXCJsc1wiOiBcIjFcIixcbiAgICAgICBcInRpXCI6IFwiMC4wNVwiLFxuICAgICAgIFwicHJjXCI6IFwiODAwLjAwXCIsXG4gICAgICAgXCJmbHByY1wiOiBcIjgwMC4wMFwiLFxuICAgICAgIFwibm9yZW50bVwiOiBcIjE5OjU5OjMyIDEzLTEyLTIwMjBcIixcbiAgICAgICBcImV4Y2hfdG1cIjogXCIwMDowMDowMCAwMS0wMS0xOTgwXCIsXG4gICAgICAgXCJyZW1hcmtzXCI6IFwiV0MgVEVTVCBPcmRlclwiLFxuICAgICAgIFwiZXhjaG9yZGlkXCI6IFwiNjg1N1wiXG4gICB9LFxuICAge1xuICAgICAgIFwic3RhdFwiOiBcIk9rXCIsXG4gICAgICAgXCJub3Jlbm9yZG5vXCI6IFwiMjAxMjEzMDAwNjU3MTZcIixcbiAgICAgICBcInVpZFwiOiBcIkdVUlVSQUpcIixcbiAgICAgICBcImFjdGlkXCI6IFwiR1VSVVJBSlwiLFxuICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgIFwicHJjdHlwXCI6IFwiTE1UXCIsXG4gICAgICAgXCJyZXRcIjogXCJEQVlcIixcbiAgICAgICBcInByZFwiOiBcIk1cIixcbiAgICAgICBcImZsaWRcIjogXCIxMDFcIixcbiAgICAgICBcImZsdG1cIjogXCIwMS0wMS0xOTgwIDAwOjAwOjAwXCIsXG4gICAgICAgXCJ0cmFudHlwZVwiOiBcIkJcIixcbiAgICAgICBcInRzeW1cIjogXCJBQ0NFTFlBLUVRXCIsXG4gICAgICAgXCJxdHlcIjogXCIxODBcIixcbiAgICAgICBcInRva2VuXCI6IFwiNzA1M1wiLFxuICAgICAgIFwiZmlsbHNoYXJlc1wiOiBcIjE4MFwiLFxuICAgICAgIFwiZmxxdHlcIjogXCIxODBcIixcbiAgICAgICBcInBwXCI6IFwiMlwiLFxuICAgICAgIFwibHNcIjogXCIxXCIsXG4gICAgICAgXCJ0aVwiOiBcIjAuMDVcIixcbiAgICAgICBcInByY1wiOiBcIjgwMC4wMFwiLFxuICAgICAgIFwiZmxwcmNcIjogXCI4MDAuMDBcIixcbiAgICAgICBcIm5vcmVudG1cIjogXCIxOTo1OTozMiAxMy0xMi0yMDIwXCIsXG4gICAgICAgXCJleGNoX3RtXCI6IFwiMDA6MDA6MDAgMDEtMDEtMTk4MFwiLFxuICAgICAgIFwicmVtYXJrc1wiOiBcIldDIFRFU1QgT3JkZXJcIixcbiAgICAgICBcImV4Y2hvcmRpZFwiOiBcIjY4NThcIlxuICAgfVxuXVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1nZXRfc2luZ2xlb3JkZXJoaXN0b3J5XCI+PC9hPiAgc2luZ2xlIG9yZGVyIGhpc3Rvcnkob3JkZXJubylcbmhpc3RvcnkgYW4gb3JkZXJcblxuYGBgXG5vcmRlcm5vID0gcmV0Wydub3Jlbm9yZG5vJ10gI2Zyb20gcGxhY2VvcmRlciByZXR1cm4gdmFsdWVcbnJldCA9IGFwaS5zaW5nbGVfb3JkZXJfaGlzdG9yeShvcmRlcm5vPW9yZGVybm8pXG5gYGBcblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHVpZCp8fExvZ2dlZCBpbiBVc2VyIElkfFxufG5vcmVub3Jkbm8qfHxOb3JlbiBPcmRlciBOdW1iZXJ8XG5cblxuUmVzcG9uc2UgRGV0YWlscyA6XG5cblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIEFycmF5IG9mIG9iamVjdHMgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBzdWNjZXNzLlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xPcmRlciBib29rIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxleGNofHxFeGNoYW5nZSBTZWdtZW50fFxufHRzeW18fFRyYWRpbmcgc3ltYm9sIC8gY29udHJhY3Qgb24gd2hpY2ggb3JkZXIgaXMgcGxhY2VkLnxcbnxub3Jlbm9yZG5vfHxOb3JlbiBPcmRlciBOdW1iZXJ8XG58cHJjfHxPcmRlciBQcmljZXxcbnxxdHl8fE9yZGVyIFF1YW50aXR5fFxufHByZHx8RGlzcGxheSBwcm9kdWN0IGFsaWFzIG5hbWUsIHVzaW5nIHByYXJyIHJldHVybmVkIGluIHVzZXIgZGV0YWlscy58XG58c3RhdHVzfHx8XG58cnB0fHwgKGZpbGwvY29tcGxldGUgZXRjKXxcbnx0cmFudHlwZXxCIC8gU3xUcmFuc2FjdGlvbiB0eXBlIG9mIHRoZSBvcmRlcnxcbnxwcmN0eXB8TE1UIC8gTUtUfFByaWNlIHR5cGV8XG58ZmlsbHNoYXJlc3x8VG90YWwgVHJhZGVkIFF1YW50aXR5IG9mIHRoaXMgb3JkZXJ8XG58YXZncHJjfHxBdmVyYWdlIHRyYWRlIHByaWNlIG9mIHRvdGFsIHRyYWRlZCBxdWFudGl0eSB8XG58cmVqcmVhc29ufHxJZiBvcmRlciBpcyByZWplY3RlZCwgcmVhc29uIGluIHRleHQgZm9ybXxcbnxleGNob3JkaWR8fEV4Y2hhbmdlIE9yZGVyIE51bWJlcnxcbnxjYW5jZWxxdHl8fENhbmNlbGVkIHF1YW50aXR5IGZvciBvcmRlciB3aGljaCBpcyBpbiBzdGF0dXMgY2FuY2VsbGVkLnxcbnxyZW1hcmtzfHxBbnkgbWVzc2FnZSBFbnRlcmVkIGR1cmluZyBvcmRlciBlbnRyeS58XG58ZHNjcXR5fHxPcmRlciBkaXNjbG9zZWQgcXVhbnRpdHkufFxufHRyZ3ByY3x8T3JkZXIgdHJpZ2dlciBwcmljZXxcbnxyZXR8REFZIC8gSU9DIC8gRU9TfE9yZGVyIHZhbGlkaXR5fFxufHVpZHx8fFxufGFjdGlkfHx8XG58YnBwcmN8fEJvb2sgUHJvZml0IFByaWNlIGFwcGxpY2FibGUgb25seSBpZiBwcm9kdWN0IGlzIHNlbGVjdGVkIGFzIEIgKEJyYWNrZXQgb3JkZXIgKSB8XG58YmxwcmN8fEJvb2sgbG9zcyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxufHRyYWlscHJjfHxUcmFpbGluZyBQcmljZSBhcHBsaWNhYmxlIG9ubHkgaWYgcHJvZHVjdCBpcyBzZWxlY3RlZCBhcyBIIGFuZCBCIChIaWdoIExldmVyYWdlIGFuZCBCcmFja2V0IG9yZGVyICkgfFxufGFtb3x8WWVzIC8gTm98XG58cHB8fFByaWNlIHByZWNpc2lvbnxcbnx0aXx8VGljayBzaXplfFxufGxzfHxMb3Qgc2l6ZXxcbnx0b2tlbnx8Q29udHJhY3QgVG9rZW58XG58bm9yZW50bXx8fFxufG9yZGVudHRtfHx8XG58ZXhjaF90bXx8fFxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBmYWlsdXJlOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE5vdF9Pa3xPcmRlciBib29rIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxlbXNnfHxFcnJvciBtZXNzYWdlfFxuXG5TYW1wbGUgU3VjY2VzcyBPdXRwdXQgOlxuXG5bXG4gICB7XG4gICAgICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICAgICBcIm5vcmVub3Jkbm9cIjogXCIyMDEyMTMwMDA2NTcxNlwiLFxuICAgICAgIFwidWlkXCI6IFwiREVNTzFcIixcbiAgICAgICBcImFjdGlkXCI6IFwiREVNTzFcIixcbiAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICBcInRzeW1cIjogXCJBQ0NFTFlBLUVRXCIsXG4gICAgICAgXCJxdHlcIjogXCIxODBcIixcbiAgICAgICBcInRyYW50eXBlXCI6IFwiQlwiLFxuICAgICAgIFwicHJjdHlwXCI6IFwiTE1UXCIsXG4gICAgICAgXCJyZXRcIjogXCJEQVlcIixcbiAgICAgICBcInRva2VuXCI6IFwiNzA1M1wiLFxuICAgICAgIFwicHBcIjogXCIyXCIsXG4gICAgICAgXCJsc1wiOiBcIjFcIixcbiAgICAgICBcInRpXCI6IFwiMC4wNVwiLFxuICAgICAgIFwicHJjXCI6IFwiODAwLjAwXCIsXG4gICAgICAgXCJhdmdwcmNcIjogXCI4MDAuMDBcIixcbiAgICAgICBcImRzY3F0eVwiOiBcIjBcIixcbiAgICAgICBcInByZFwiOiBcIk1cIixcbiAgICAgICBcInN0YXR1c1wiOiBcIkNPTVBMRVRFXCIsXG4gICAgICAgXCJycHRcIjogXCJGaWxsXCIsXG4gICAgICAgXCJmaWxsc2hhcmVzXCI6IFwiMTgwXCIsXG4gICAgICAgXCJub3JlbnRtXCI6IFwiMTk6NTk6MzIgMTMtMTItMjAyMFwiLFxuICAgICAgIFwiZXhjaF90bVwiOiBcIjAwOjAwOjAwIDAxLTAxLTE5ODBcIixcbiAgICAgICBcInJlbWFya3NcIjogXCJXQyBURVNUIE9yZGVyXCIsXG4gICAgICAgXCJleGNob3JkaWRcIjogXCI2ODU4XCJcbiAgIH0sXG4gICB7XG4gICAgICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICAgICBcIm5vcmVub3Jkbm9cIjogXCIyMDEyMTMwMDA2NTcxNlwiLFxuICAgICAgIFwidWlkXCI6IFwiREVNTzFcIixcbiAgICAgICBcImFjdGlkXCI6IFwiREVNTzFcIixcbiAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICBcInRzeW1cIjogXCJBQ0NFTFlBLUVRXCIsXG4gICAgICAgXCJxdHlcIjogXCIxODBcIixcbiAgICAgICBcInRyYW50eXBlXCI6IFwiQlwiLFxuICAgICAgIFwicHJjdHlwXCI6IFwiTE1UXCIsXG4gICAgICAgXCJyZXRcIjogXCJEQVlcIixcbiAgICAgICBcInRva2VuXCI6IFwiNzA1M1wiLFxuICAgICAgIFwicHBcIjogXCIyXCIsXG4gICAgICAgXCJsc1wiOiBcIjFcIixcbiAgICAgICBcInRpXCI6IFwiMC4wNVwiLFxuICAgICAgIFwicHJjXCI6IFwiODAwLjAwXCIsXG4gICAgICAgXCJkc2NxdHlcIjogXCIwXCIsXG4gICAgICAgXCJwcmRcIjogXCJNXCIsXG4gICAgICAgXCJzdGF0dXNcIjogXCJPUEVOXCIsXG4gICAgICAgXCJycHRcIjogXCJOZXdcIixcbiAgICAgICBcIm5vcmVudG1cIjogXCIxOTo1OTozMiAxMy0xMi0yMDIwXCIsXG4gICAgICAgXCJleGNoX3RtXCI6IFwiMDA6MDA6MDAgMDEtMDEtMTk4MFwiLFxuICAgICAgIFwicmVtYXJrc1wiOiBcIldDIFRFU1QgT3JkZXJcIixcbiAgICAgICBcImV4Y2hvcmRpZFwiOiBcIjY4NThcIlxuICAgfSxcbiAgIHtcbiAgICAgICBcInN0YXRcIjogXCJPa1wiLFxuICAgICAgIFwibm9yZW5vcmRub1wiOiBcIjIwMTIxMzAwMDY1NzE2XCIsXG4gICAgICAgXCJ1aWRcIjogXCJERU1PMVwiLFxuICAgICAgIFwiYWN0aWRcIjogXCJERU1PMVwiLFxuICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgIFwidHN5bVwiOiBcIkFDQ0VMWUEtRVFcIixcbiAgICAgICBcInF0eVwiOiBcIjE4MFwiLFxuICAgICAgIFwidHJhbnR5cGVcIjogXCJCXCIsXG4gICAgICAgXCJwcmN0eXBcIjogXCJMTVRcIixcbiAgICAgICBcInJldFwiOiBcIkRBWVwiLFxuICAgICAgIFwidG9rZW5cIjogXCI3MDUzXCIsXG4gICAgICAgXCJwcFwiOiBcIjJcIixcbiAgICAgICBcImxzXCI6IFwiMVwiLFxuICAgICAgIFwidGlcIjogXCIwLjA1XCIsXG4gICAgICAgXCJwcmNcIjogXCI4MDAuMDBcIixcbiAgICAgICBcImRzY3F0eVwiOiBcIjBcIixcbiAgICAgICBcInByZFwiOiBcIk1cIixcbiAgICAgICBcInN0YXR1c1wiOiBcIlBFTkRJTkdcIixcbiAgICAgICBcInJwdFwiOiBcIlBlbmRpbmdOZXdcIixcbiAgICAgICBcIm5vcmVudG1cIjogXCIxOTo1OTozMiAxMy0xMi0yMDIwXCIsXG4gICAgICAgXCJyZW1hcmtzXCI6IFwiV0MgVEVTVCBPcmRlclwiXG4gICB9LFxuICAge1xuICAgICAgIFwic3RhdFwiOiBcIk9rXCIsXG4gICAgICAgXCJub3Jlbm9yZG5vXCI6IFwiMjAxMjEzMDAwNjU3MTZcIixcbiAgICAgICBcInVpZFwiOiBcIkRFTU8xXCIsXG4gICAgICAgXCJhY3RpZFwiOiBcIkRFTU8xXCIsXG4gICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgXCJ0c3ltXCI6IFwiQUNDRUxZQS1FUVwiLFxuICAgICAgIFwicXR5XCI6IFwiMTgwXCIsXG4gICAgICAgXCJ0cmFudHlwZVwiOiBcIkJcIixcbiAgICAgICBcInByY3R5cFwiOiBcIkxNVFwiLFxuICAgICAgIFwicmV0XCI6IFwiREFZXCIsXG4gICAgICAgXCJ0b2tlblwiOiBcIjcwNTNcIixcbiAgICAgICBcInBwXCI6IFwiMlwiLFxuICAgICAgIFwibHNcIjogXCIxXCIsXG4gICAgICAgXCJ0aVwiOiBcIjAuMDVcIixcbiAgICAgICBcInByY1wiOiBcIjgwMC4wMFwiLFxuICAgICAgIFwicHJkXCI6IFwiTVwiLFxuICAgICAgIFwic3RhdHVzXCI6IFwiUEVORElOR1wiLFxuICAgICAgIFwicnB0XCI6IFwiTmV3QWNrXCIsXG4gICAgICAgXCJub3JlbnRtXCI6IFwiMTk6NTk6MzIgMTMtMTItMjAyMFwiLFxuICAgICAgIFwicmVtYXJrc1wiOiBcIldDIFRFU1QgT3JkZXJcIlxuICAgfVxuXVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1nZXRfaG9sZGluZ3NcIj48L2E+IGdldF9ob2xkaW5ncyhwcm9kdWN0X3R5cGUpXG5yZXRyaWV2ZXMgdGhlIGhvbGRpbmdzIGFzIGEgbGlzdFxuXG5FeGFtcGxlOlxuYGBgXG5yZXQgPSBhcGkuZ2V0X2hvbGRpbmdzKClcbmBgYFxuUmVxdWVzdCBEZXRhaWxzIDpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58dWlkKnx8TG9nZ2VkIGluIFVzZXIgSWR8XG58YWN0aWQqfHxBY2NvdW50IGlkIG9mIHRoZSBsb2dnZWQgaW4gdXNlci58XG58cHJkKnx8UHJvZHVjdCBuYW1lfFxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIGZvcm1hdCB3aXRoIGJlbG93IGZpZWxkcyBpbiBjYXNlIG9mIFN1Y2Nlc3M6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfEhvbGRpbmcgcmVxdWVzdCBzdWNjZXNzIG9yIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58ZXhjaF90c3ltfHxBcnJheSBvZiBvYmplY3RzIGV4Y2hfdHN5bSBvYmplY3RzIGFzIGRlZmluZWQgYmVsb3cufFxufGhvbGRxdHl8fEhvbGRpbmcgcXVhbnRpdHl8XG58ZHBxdHl8fERQIEhvbGRpbmcgcXVhbnRpdHl8XG58bnBvYWRxdHl8fE5vbiBQb2EgZGlzcGxheSBxdWFudGl0eXxcbnxjb2xxdHl8fENvbGxhdGVyYWwgcXVhbnRpdHl8XG58YmVucXR5fHxCZW5lZmljaWFyeSBxdWFudGl0eXxcbnx1bnBsZ2RxdHl8fFVucGxlZGdlZCBxdWFudGl0eXxcbnxicmtjb2xxdHl8fEJyb2tlciBDb2xsYXRlcmFsfFxufGJ0c3RxdHl8fEJUU1QgcXVhbnRpdHl8XG58YnRzdGNvbHF0eXx8QlRTVCBDb2xsYXRlcmFsIHF1YW50aXR5fFxufHVzZWRxdHl8fEhvbGRpbmcgdXNlZCB0b2RheXxcbnx1cGxkcHJjfHxBdmVyYWdlIHByaWNlIHVwbG9hZGVkIGFsb25nIHdpdGggaG9sZGluZ3N8XG5Ob3RlczpcblZhbHVhdGlvbiA6IGJ0c3RxdHkgKyBob2xkcXR5ICsgYnJrY29scXR5ICsgdW5wbGdkcXR5ICsgYmVucXR5ICsgTWF4KG5wb2FkcXR5LCBkcHF0eSkgLSB1c2VkcXR5XG5TYWxhYmxlOiBidHN0cXR5ICsgaG9sZHF0eSArIHVucGxnZHF0eSArIGJlbnF0eSArIGRwcXR5IC0gdXNlZHF0eVxuXG5cbkV4Y2hfdHN5bSBvYmplY3Q6XG58SnNvbiBGaWVsZHMgb2Ygb2JqZWN0IGluIHZhbHVlcyBBcnJheXxQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufGV4Y2h8TlNFLCBCU0UsIE5GTyAuLi58RXhjaGFuZ2UgfFxufHRzeW18fFRyYWRpbmcgc3ltYm9sIG9mIHRoZSBzY3JpcCAoY29udHJhY3QpfFxufHRva2VufHxUb2tlbiBvZiB0aGUgc2NyaXAgKGNvbnRyYWN0KXxcbnxwcHx8UHJpY2UgcHJlY2lzaW9ufFxufHRpfHxUaWNrIHNpemV8XG58bHN8fExvdCBzaXplfFxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMgaW4gY2FzZSBvZiBmYWlsdXJlOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE5vdF9Pa3xQb3NpdGlvbiBib29rIHJlcXVlc3QgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxyZXF1ZXN0X3RpbWV8fFJlc3BvbnNlIHJlY2VpdmVkIHRpbWUufFxufGVtc2d8fEVycm9yIG1lc3NhZ2V8XG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcblsgICBcbiAgICAgIHtcbiAgICAgICAgICAgIFwic3RhdFwiOlwiT2tcIiwgXG4gICAgICAgICAgICBcImV4Y2hfdHN5bVwiOltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImV4Y2hcIjpcIk5TRVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRva2VuXCI6XCIxM1wiLFxuICAgICAgICAgICAgICAgICAgICAgXCJ0c3ltXCI6XCJBQkItRVFcIlxuICAgfVxuICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiaG9sZHF0eVwiOlwiMjAwMDAwMFwiLFxuICAgICAgICAgICAgXCJjb2xxdHlcIjpcIjIwMFwiLFxuICAgICAgICAgICAgXCJidHN0cXR5XCI6XCIwXCIsXG4gICAgICAgICAgICBcImJ0c3Rjb2xxdHlcIjpcIjBcIixcbiAgICAgICAgICAgIFwidXNlZHF0eVwiOlwiMFwiLFxuICAgICAgICAgICAgXCJ1cGxkcHJjXCIgOiBcIjE4MDAuMDBcIlxuICAgICAgfSxcbiAgICAgIHtcblwic3RhdFwiOlwiT2tcIixcblwiZXhjaF90c3ltXCI6W1xuICAge1xuICAgICAgICAgIFwiZXhjaFwiOlwiTlNFXCIsXG4gICAgICAgICAgXCJ0b2tlblwiOlwiMjJcIixcbiAgICAgICAgICBcInRzeW1cIjpcIkFDQy1FUVwiXG4gICB9XG4gICAgICAgICBdLFxuXCJob2xkcXR5XCI6XCIyMDAwMDAwXCIsXG5cImNvbHF0eVwiOlwiMjAwXCIsXG5cImJ0c3RxdHlcIjpcIjBcIixcblwiYnRzdGNvbHF0eVwiOlwiMFwiLFxuXCJ1c2VkcXR5XCI6XCIwXCIsXG4gICAgICAgICAgICAgICBcInVwbGRwcmNcIiA6IFwiMTQwMC4wMFwiXG4gICAgICAgIH1cbl1cblxuU2FtcGxlIEZhaWx1cmUgUmVzcG9uc2UgOlxue1xuICAgXCJzdGF0XCI6XCJOb3RfT2tcIixcbiAgIFwiZW1zZ1wiOlwiSW52YWxpZCBJbnB1dCA6IE1pc3NpbmcgdWlkIG9yIGFjdGlkIG9yIHByZC5cIlxufVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1nZXRfcG9zaXRpb25zXCI+PC9hPiBnZXRfcG9zaXRpb25zKClcblxucmV0cmlldmVzIHRoZSBvdmVybmlnaHQgYW5kIGRheSBwb3NpdGlvbnMgYXMgYSBsaXN0XG5cbkV4YW1wbGU6IFxuYGBgXG5yZXQgPSBhcGkuZ2V0X3Bvc2l0aW9ucygpXG5tdG0gPSAwXG5wbmwgPSAwXG5mb3IgaSBpbiByZXQ6XG4gICAgbXRtICs9IGZsb2F0KGlbJ3VybXRvbSddKVxuICAgIHBubCArPSBmbG9hdChpWydycG5sJ10pXG4gICAgZGF5X20ybSA9IG10bSArIHBubFxucHJpbnQoZid7ZGF5X20ybX0gaXMgeW91ciBEYWlseSBNVE0nKVxuYGBgXG5cblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHVpZCp8fExvZ2dlZCBpbiBVc2VyIElkfFxufGFjdGlkKnx8QWNjb3VudCBpZCBvZiB0aGUgbG9nZ2VkIGluIHVzZXIufFxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuUmVzcG9uc2UgZGF0YSB3aWxsIGJlIGluIGpzb24gZm9ybWF0IHdpdGggQXJyYXkgb2YgT2JqZWN0cyB3aXRoIGJlbG93IGZpZWxkcyBpbiBjYXNlIG9mIHN1Y2Nlc3MuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfFBvc2l0aW9uIGJvb2sgc3VjY2VzcyBvciBmYWlsdXJlIGluZGljYXRpb24ufFxufGV4Y2h8fEV4Y2hhbmdlIHNlZ21lbnR8XG58dHN5bXx8VHJhZGluZyBzeW1ib2wgLyBjb250cmFjdC58XG58dG9rZW58fENvbnRyYWN0IHRva2VufFxufHVpZHx8VXNlciBJZHxcbnxhY3RpZHx8QWNjb3VudCBJZHxcbnxwcmR8fFByb2R1Y3QgbmFtZSB0byBiZSBzaG93bi58XG58bmV0cXR5fHxOZXQgUG9zaXRpb24gcXVhbnRpdHl8XG58bmV0YXZncHJjfHxOZXQgcG9zaXRpb24gYXZlcmFnZSBwcmljZXxcbnxkYXlidXlxdHl8fERheSBCdXkgUXVhbnRpdHl8XG58ZGF5c2VsbHF0eXx8RGF5IFNlbGwgUXVhbnRpdHl8XG58ZGF5YnV5YXZncHJjfHxEYXkgQnV5IGF2ZXJhZ2UgcHJpY2V8XG58ZGF5c2VsbGF2Z3ByY3x8RGF5IGJ1eSBhdmVyYWdlIHByaWNlfFxufGRheWJ1eWFtdHx8RGF5IEJ1eSBBbW91bnR8XG58ZGF5c2VsbGFtdHx8RGF5IFNlbGwgQW1vdW50fFxufGNmYnV5cXR5fHxDYXJyeSBGb3J3YXJkIEJ1eSBRdWFudGl0eXxcbnxjZm9yZ2F2Z3ByY3x8T3JpZ2luYWwgQXZnIFByaWNlfFxufGNmc2VsbHF0eXx8Q2FycnkgRm9yd2FyZCBTZWxsIFF1YW50aXR5fFxufGNmYnV5YXZncHJjfHxDYXJyeSBGb3J3YXJkIEJ1eSBhdmVyYWdlIHByaWNlfFxufGNmc2VsbGF2Z3ByY3x8Q2FycnkgRm9yd2FyZCBCdXkgYXZlcmFnZSBwcmljZXxcbnxjZmJ1eWFtdHx8Q2FycnkgRm9yd2FyZCBCdXkgQW1vdW50fFxufGNmc2VsbGFtdHx8Q2FycnkgRm9yd2FyZCBTZWxsIEFtb3VudHxcbnxscHx8TFRQfFxufHJwbmx8fFJlYWxpemVkUE5MfFxufHVybXRvbXx8VW5yZWFsaXplZE1UT00ufChDYW4gYmUgcmVjYWxjdWxhdGVkIGluIExUUCB1cGRhdGUgOnwgPSBuZXRxdHkgKiAobHAgZnJvbSB3ZWIgc29ja2V0IC0gbmV0YXZncHJjKSAqIHByY2Z0ciB8fFxufGJlcHx8QnJlYWsgZXZlbiBwcmljZXxcbnxvcGVuYnV5cXR5fHx8XG58b3BlbnNlbGxxdHl8fHxcbnxvcGVuYnV5YW10fHx8XG58b3BlbnNlbGxhbXR8fHxcbnxvcGVuYnV5YXZncHJjfHx8XG58b3BlbnNlbGxhdmdwcmN8fHxcbnxtdWx0fHx8XG58cHB8fHxcbnxwcmNmdHJ8fGduKnBuLyhnZCpwZCkuIHxcbnx0aXx8VGljayBzaXplfFxufGxzfHxMb3Qgc2l6ZXxcbnxyZXF1ZXN0X3RpbWV8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaW4gYSBmYWlsdXJlIHJlc3BvbnNlLnxcblxuUmVzcG9uc2UgZGF0YSB3aWxsIGJlIGluIGpzb24gZm9ybWF0IHdpdGggYmVsb3cgZmllbGRzIGluIGNhc2Ugb2YgZmFpbHVyZTpcblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58c3RhdHxOb3RfT2t8UG9zaXRpb24gYm9vayByZXF1ZXN0IGZhaWx1cmUgaW5kaWNhdGlvbi58XG58cmVxdWVzdF90aW1lfHxSZXNwb25zZSByZWNlaXZlZCB0aW1lLnxcbnxlbXNnfHxFcnJvciBtZXNzYWdlfFxuXG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcbltcbiAgICAge1xuXCJzdGF0XCI6XCJPa1wiLFxuXCJ1aWRcIjpcIlBPT1JOQVwiLFxuXCJhY3RpZFwiOlwiUE9PUk5BXCIsXG5cImV4Y2hcIjpcIk5TRVwiLFxuXCJ0c3ltXCI6XCJBQ0MtRVFcIixcblwicHJhcnJcIjpcIkNcIixcblwicHBcIjpcIjJcIixcblwibHNcIjpcIjFcIixcblwidGlcIjpcIjUuMDBcIixcblwibXVsdFwiOlwiMVwiLFxuXCJwcmNmdHJcIjpcIjEuMDAwMDAwXCIsXG5cImRheWJ1eXF0eVwiOlwiMlwiLFxuXCJkYXlzZWxscXR5XCI6XCIyXCIsXG5cImRheWJ1eWFtdFwiOlwiMjYxMC4wMFwiLFxuXCJkYXlidXlhdmdwcmNcIjpcIjEzMDUuMDBcIixcblwiZGF5c2VsbGFtdFwiOlwiMjYxMC4wMFwiLFxuXCJkYXlzZWxsYXZncHJjXCI6XCIxMzA1LjAwXCIsXG5cImNmYnV5cXR5XCI6XCIwXCIsXG5cImNmc2VsbHF0eVwiOlwiMFwiLFxuXCJjZmJ1eWFtdFwiOlwiMC4wMFwiLFxuXCJjZmJ1eWF2Z3ByY1wiOlwiMC4wMFwiLFxuXCJjZnNlbGxhbXRcIjpcIjAuMDBcIixcblwiY2ZzZWxsYXZncHJjXCI6XCIwLjAwXCIsXG5cIm9wZW5idXlxdHlcIjpcIjBcIixcblwib3BlbnNlbGxxdHlcIjpcIjIzXCIsXG5cIm9wZW5idXlhbXRcIjpcIjAuMDBcIixcblwib3BlbmJ1eWF2Z3ByY1wiOlwiMC4wMFwiLFxuXCJvcGVuc2VsbGFtdFwiOlwiMzAwMTUuMDBcIixcblwib3BlbnNlbGxhdmdwcmNcIjpcIjEzMDUuMDBcIixcblwibmV0cXR5XCI6XCIwXCIsXG5cIm5ldGF2Z3ByY1wiOlwiMC4wMFwiLFxuXCJscFwiOlwiMC4wMFwiLFxuXCJ1cm10b21cIjpcIjAuMDBcIixcblwicnBubFwiOlwiMC4wMFwiLFxuXCJjZm9yZ2F2Z3ByY1wiOlwiMC4wMFwiXG5cbiAgICB9XG5dXG5cblNhbXBsZSBGYWlsdXJlIFJlc3BvbnNlIDpcbntcbiAgICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgIFwicmVxdWVzdF90aW1lXCI6XCIxNDoxNDoxMSAyNi0wNS0yMDIwXCIsXG4gICAgXCJlbXNnXCI6XCJFcnJvciBPY2N1cnJlZCA6IDUgXFxcIm5vIGRhdGFcXFwiXCJcbn1cblxuIyMjIyA8YSBuYW1lPVwibWQtZ2V0X2xpbWl0c1wiPjwvYT4gZ2V0X2xpbWl0c1xucmV0cmlldmVzIHRoZSBtYXJnaW4gYW5kIGxpbWl0cyBzZXRcblxuUmVxdWVzdCBEZXRhaWxzOlxuXG58IFBhcmFtIHwgVHlwZSB8IE9wdGlvbmFsIHxEZXNjcmlwdGlvbiB8XG58IC0tLSB8IC0tLSB8IC0tLSB8IC0tLXxcbnwgcHJvZHVjdF90eXBlIHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8IHJldHJlaXZlcyB0aGUgZGVsaXZlcnkgaG9sZGluZ3Mgb3IgZm9yIGEgZ2l2ZW4gcHJvZHVjdCAgfFxufCBzZWdtZW50IHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8IENNIC8gRk8gLyBGWCAgfFxufCBleGNoYW5nZSB8IGBgYHN0cmluZ2BgYCB8IFRydWUgfCBFeGNoYW5nZSBOU0UvQlNFL01DWCB8XG5cbnRoZSByZXNwb25zZSBpcyBhcyBmb2xsb3dzLFxuXG58IFBhcmFtIHwgVHlwZSB8IE9wdGlvbmFsIHxEZXNjcmlwdGlvbiB8XG58IC0tLSB8IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3wgRmFsc2UgfExpbWl0cyByZXF1ZXN0IHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxhY3RpZHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QWNjb3VudCBpZHxcbnxwcmR8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFByb2R1Y3QgbmFtZXxcbnxzZWd8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFNlZ21lbnQgQ00gLyBGTyAvIEZYIHxcbnxleGNofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxFeGNoYW5nZXxcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tQ2FzaCBQcmltYXJ5IEZpZWxkcy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG58Y2FzaHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q2FzaCBNYXJnaW4gYXZhaWxhYmxlfFxufHBheWlufCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxUb3RhbCBBbW91bnQgdHJhbnNmZXJyZWQgdXNpbmcgUGF5aW5zIHRvZGF5IHxcbnxwYXlvdXR8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFRvdGFsIGFtb3VudCByZXF1ZXN0ZWQgZm9yIHdpdGhkcmF3YWwgdG9kYXl8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLUNhc2ggQWRkaXRpb25hbCBGaWVsZHMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxufGJya2NvbGxhbXR8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFByZXZhbHVlZCBDb2xsYXRlcmFsIEFtb3VudHxcbnx1bmNsZWFyZWRjYXNofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxVbmNsZWFyZWQgQ2FzaCAoUGF5aW4gdGhyb3VnaCBjaGVxdWVzKXxcbnxkYXljYXNofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxBZGRpdGlvbmFsIGxldmVyYWdlIGFtb3VudCAvIEFtb3VudCBhZGRlZCB0byBoYW5kbGUgc3lzdGVtIGVycm9ycyAtIGJ5IGJyb2tlci4gIHxcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tTWFyZ2luIFV0aWxpemVkLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbnxtYXJnaW51c2VkfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxUb3RhbCBtYXJnaW4gLyBmdW5kIHVzZWQgdG9kYXl8XG58bXRvbWN1cnBlcnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8TXRvbSBjdXJyZW50IHBlcmNlbnRhZ2V8XG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLU1hcmdpbiBVc2VkIGNvbXBvbmVudHMtLS0tLS0tLS0tLS0tLS0tLS0tLS18XG58Y2J1fCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDQUMgQnV5IHVzZWR8XG58Y3NjfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDQUMgU2VsbCBDcmVkaXRzfFxufHJwbmx8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgcmVhbGl6ZWQgUE5MfFxufHVubXRvbXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q3VycmVudCB1bnJlYWxpemVkIG10b218XG58bWFycHJ0fCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDb3ZlcmVkIFByb2R1Y3QgbWFyZ2luc3xcbnxzcGFufCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTcGFuIHVzZWR8XG58ZXhwb3wgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8RXhwb3N1cmUgbWFyZ2lufFxufHByZW1pdW18IGBgYHN0cmluZ2BgYCB8IFRydWUgfFByZW1pdW0gdXNlZHxcbnx2YXJlbG18IGBgYHN0cmluZ2BgYCB8IFRydWUgfFZhciBFbG0gTWFyZ2lufFxufGdyZXhwb3wgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8R3Jvc3MgRXhwb3N1cmV8XG58Z3JlZXhwb19kfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxHcm9zcyBFeHBvc3VyZSBkZXJpdmF0aXZlfFxufHNjcmlwYnNrbWFyfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTY3JpcCBiYXNrZXQgbWFyZ2lufFxufGFkZHNjcmlwYnNrbXJnfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxBZGRpdGlvbmFsIHNjcmlwIGJhc2tldCBtYXJnaW58XG58YnJva2VyYWdlfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxCcm9rZXJhZ2UgYW1vdW50fFxufGNvbGxhdGVyYWx8IGBgYHN0cmluZ2BgYCB8IFRydWUgfENvbGxhdGVyYWwgY2FsY3VsYXRlZCBiYXNlZCBvbiB1cGxvYWRlZCBob2xkaW5nc3xcbnxncmNvbGx8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFZhbHVhdGlvbiBvZiB1cGxvYWRlZCBob2xkaW5nIHByZSBoYWlyY3V0fFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1BZGRpdGlvbmFsIFJpc2sgTGltaXRzLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxufHR1cm5vdmVybG10fCBgYGBzdHJpbmdgYGAgfCBUcnVlIHx8XG58cGVuZG9yZHZhbGxtdHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8fFxufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1BZGRpdGlvbmFsIFJpc2sgSW5kaWNhdG9ycy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbnx0dXJub3ZlcnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8VHVybm92ZXJ8XG58cGVuZG9yZHZhbHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8UGVuZGluZyBPcmRlciB2YWx1ZXxcbnwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tTWFyZ2luIHVzZWQgZGV0YWlsZWQgYnJlYWt1cCBmaWVsZHMtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxufHJ6cG5sX2VfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q3VycmVudCByZWFsaXplZCBQTkwgKEVxdWl0eSBJbnRyYWRheSl8XG58cnpwbmxfZV9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHJlYWxpemVkIFBOTCAoRXF1aXR5IE1hcmdpbil8XG58cnpwbmxfZV9jfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHJlYWxpemVkIFBOTCAoRXF1aXR5IENhc2ggbiBDYXJyeSl8XG58cnpwbmxfZF9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHJlYWxpemVkIFBOTCAoRGVyaXZhdGl2ZSBJbnRyYWRheSl8XG58cnpwbmxfZF9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHJlYWxpemVkIFBOTCAoRGVyaXZhdGl2ZSBNYXJnaW4pfFxufHJ6cG5sX2ZfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q3VycmVudCByZWFsaXplZCBQTkwgKEZYIEludHJhZGF5KXxcbnxyenBubF9mX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgcmVhbGl6ZWQgUE5MIChGWCBNYXJnaW4pfFxufHJ6cG5sX2NfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q3VycmVudCByZWFsaXplZCBQTkwgKENvbW1vZGl0eSBJbnRyYWRheSl8XG58cnpwbmxfY19tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHJlYWxpemVkIFBOTCAoQ29tbW9kaXR5IE1hcmdpbil8XG58dXpwbmxfZV9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHVucmVhbGl6ZWQgTVRPTSAoRXF1aXR5IEludHJhZGF5KXxcbnx1enBubF9lX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgdW5yZWFsaXplZCBNVE9NIChFcXVpdHkgTWFyZ2luKXxcbnx1enBubF9lX2N8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgdW5yZWFsaXplZCBNVE9NIChFcXVpdHkgQ2FzaCBuIENhcnJ5KXxcbnx1enBubF9kX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgdW5yZWFsaXplZCBNVE9NIChEZXJpdmF0aXZlIEludHJhZGF5KXxcbnx1enBubF9kX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgdW5yZWFsaXplZCBNVE9NIChEZXJpdmF0aXZlIE1hcmdpbil8XG58dXpwbmxfZl9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHVucmVhbGl6ZWQgTVRPTSAoRlggSW50cmFkYXkpfFxufHV6cG5sX2ZfbXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q3VycmVudCB1bnJlYWxpemVkIE1UT00gKEZYIE1hcmdpbil8XG58dXpwbmxfY19pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDdXJyZW50IHVucmVhbGl6ZWQgTVRPTSAoQ29tbW9kaXR5IEludHJhZGF5KXxcbnx1enBubF9jX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEN1cnJlbnQgdW5yZWFsaXplZCBNVE9NIChDb21tb2RpdHkgTWFyZ2luKXxcbnxzcGFuX2RfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8U3BhbiBNYXJnaW4gKERlcml2YXRpdmUgSW50cmFkYXkpfFxufHNwYW5fZF9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTcGFuIE1hcmdpbiAoRGVyaXZhdGl2ZSBNYXJnaW4pfFxufHNwYW5fZl9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTcGFuIE1hcmdpbiAoRlggSW50cmFkYXkpfFxufHNwYW5fZl9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTcGFuIE1hcmdpbiAoRlggTWFyZ2luKXxcbnxzcGFuX2NfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8U3BhbiBNYXJnaW4gKENvbW1vZGl0eSBJbnRyYWRheSl8XG58c3Bhbl9jX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfFNwYW4gTWFyZ2luIChDb21tb2RpdHkgTWFyZ2luKXxcbnxleHBvX2RfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8RXhwb3N1cmUgTWFyZ2luIChEZXJpdmF0aXZlIEludHJhZGF5KXxcbnxleHBvX2RfbXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8RXhwb3N1cmUgTWFyZ2luIChEZXJpdmF0aXZlIE1hcmdpbil8XG58ZXhwb19mX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEV4cG9zdXJlIE1hcmdpbiAoRlggSW50cmFkYXkpfFxufGV4cG9fZl9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxFeHBvc3VyZSBNYXJnaW4gKEZYIE1hcmdpbil8XG58ZXhwb19jX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEV4cG9zdXJlIE1hcmdpbiAoQ29tbW9kaXR5IEludHJhZGF5KXxcbnxleHBvX2NfbXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8RXhwb3N1cmUgTWFyZ2luIChDb21tb2RpdHkgTWFyZ2luKXxcbnxwcmVtaXVtX2RfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8T3B0aW9uIHByZW1pdW0gKERlcml2YXRpdmUgSW50cmFkYXkpfFxufHByZW1pdW1fZF9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxPcHRpb24gcHJlbWl1bSAoRGVyaXZhdGl2ZSBNYXJnaW4pfFxufHByZW1pdW1fZl9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxPcHRpb24gcHJlbWl1bSAoRlggSW50cmFkYXkpfFxufHByZW1pdW1fZl9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxPcHRpb24gcHJlbWl1bSAoRlggTWFyZ2luKXxcbnxwcmVtaXVtX2NfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8T3B0aW9uIHByZW1pdW0gKENvbW1vZGl0eSBJbnRyYWRheSl8XG58cHJlbWl1bV9jX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfE9wdGlvbiBwcmVtaXVtIChDb21tb2RpdHkgTWFyZ2luKXxcbnx2YXJlbG1fZV9pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxWYXIgRWxtIChFcXVpdHkgSW50cmFkYXkpfFxufHZhcmVsbV9lX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfFZhciBFbG0gKEVxdWl0eSBNYXJnaW4pfFxufHZhcmVsbV9lX2N8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFZhciBFbG0gKEVxdWl0eSBDYXNoIG4gQ2FycnkpfFxufG1hcnBydF9lX2h8IGBgYHN0cmluZ2BgYCB8IFRydWUgfENvdmVyZWQgUHJvZHVjdCBtYXJnaW5zIChFcXVpdHkgSGlnaCBsZXZlcmFnZSl8XG58bWFycHJ0X2VfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q292ZXJlZCBQcm9kdWN0IG1hcmdpbnMgKEVxdWl0eSBCcmFja2V0IE9yZGVyKXxcbnxtYXJwcnRfZF9ofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDb3ZlcmVkIFByb2R1Y3QgbWFyZ2lucyAoRGVyaXZhdGl2ZSBIaWdoIGxldmVyYWdlKXxcbnxtYXJwcnRfZF9ifCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDb3ZlcmVkIFByb2R1Y3QgbWFyZ2lucyAoRGVyaXZhdGl2ZSBCcmFja2V0IE9yZGVyKXxcbnxtYXJwcnRfZl9ofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxDb3ZlcmVkIFByb2R1Y3QgbWFyZ2lucyAoRlggSGlnaCBsZXZlcmFnZSl8XG58bWFycHJ0X2ZfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q292ZXJlZCBQcm9kdWN0IG1hcmdpbnMgKEZYIEJyYWNrZXQgT3JkZXIpfFxufG1hcnBydF9jX2h8IGBgYHN0cmluZ2BgYCB8IFRydWUgfENvdmVyZWQgUHJvZHVjdCBtYXJnaW5zIChDb21tb2RpdHkgSGlnaCBsZXZlcmFnZSl8XG58bWFycHJ0X2NfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8Q292ZXJlZCBQcm9kdWN0IG1hcmdpbnMgKENvbW1vZGl0eSBCcmFja2V0IE9yZGVyKXxcbnxzY3JpcGJza21hcl9lX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFNjcmlwIGJhc2tldCBtYXJnaW4gKEVxdWl0eSBJbnRyYWRheSl8XG58c2NyaXBic2ttYXJfZV9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxTY3JpcCBiYXNrZXQgbWFyZ2luIChFcXVpdHkgTWFyZ2luKXxcbnxzY3JpcGJza21hcl9lX2N8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFNjcmlwIGJhc2tldCBtYXJnaW4gKEVxdWl0eSBDYXNoIG4gQ2FycnkpfFxufGFkZHNjcmlwYnNrbXJnX2RfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QWRkaXRpb25hbCBzY3JpcCBiYXNrZXQgbWFyZ2luIChEZXJpdmF0aXZlIEludHJhZGF5KXxcbnxhZGRzY3JpcGJza21yZ19kX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEFkZGl0aW9uYWwgc2NyaXAgYmFza2V0IG1hcmdpbiAoRGVyaXZhdGl2ZSBNYXJnaW4pfFxufGFkZHNjcmlwYnNrbXJnX2ZfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QWRkaXRpb25hbCBzY3JpcCBiYXNrZXQgbWFyZ2luIChGWCBJbnRyYWRheSl8XG58YWRkc2NyaXBic2ttcmdfZl9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxBZGRpdGlvbmFsIHNjcmlwIGJhc2tldCBtYXJnaW4gKEZYIE1hcmdpbil8XG58YWRkc2NyaXBic2ttcmdfY19pfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxBZGRpdGlvbmFsIHNjcmlwIGJhc2tldCBtYXJnaW4gKENvbW1vZGl0eSBJbnRyYWRheSl8XG58YWRkc2NyaXBic2ttcmdfY19tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxBZGRpdGlvbmFsIHNjcmlwIGJhc2tldCBtYXJnaW4gKENvbW1vZGl0eSBNYXJnaW4pfFxufGJya2FnZV9lX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoRXF1aXR5IEludHJhZGF5KXxcbnxicmthZ2VfZV9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxCcm9rZXJhZ2UgKEVxdWl0eSBNYXJnaW4pfFxufGJya2FnZV9lX2N8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoRXF1aXR5IENBQyl8XG58YnJrYWdlX2VfaHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChFcXVpdHkgSGlnaCBMZXZlcmFnZSl8XG58YnJrYWdlX2VfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChFcXVpdHkgQnJhY2tldCBPcmRlcil8XG58YnJrYWdlX2RfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChEZXJpdmF0aXZlIEludHJhZGF5KXxcbnxicmthZ2VfZF9tfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxCcm9rZXJhZ2UgKERlcml2YXRpdmUgTWFyZ2luKXxcbnxicmthZ2VfZF9ofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxCcm9rZXJhZ2UgKERlcml2YXRpdmUgSGlnaCBMZXZlcmFnZSl8XG58YnJrYWdlX2RfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChEZXJpdmF0aXZlIEJyYWNrZXQgT3JkZXIpfFxufGJya2FnZV9mX2l8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoRlggSW50cmFkYXkpfFxufGJya2FnZV9mX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoRlggTWFyZ2luKXxcbnxicmthZ2VfZl9ofCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxCcm9rZXJhZ2UgKEZYIEhpZ2ggTGV2ZXJhZ2UpfFxufGJya2FnZV9mX2J8IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoRlggQnJhY2tldCBPcmRlcil8XG58YnJrYWdlX2NfaXwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChDb21tb2RpdHkgSW50cmFkYXkpfFxufGJya2FnZV9jX218IGBgYHN0cmluZ2BgYCB8IFRydWUgfEJyb2tlcmFnZSAoQ29tbW9kaXR5IE1hcmdpbil8XG58YnJrYWdlX2NfaHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChDb21tb2RpdHkgSGlnaCBMZXZlcmFnZSl8XG58YnJrYWdlX2NfYnwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8QnJva2VyYWdlIChDb21tb2RpdHkgQnJhY2tldCBPcmRlcil8XG58cGVha19tYXJ8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFBlYWsgbWFyZ2luIHVzZWQgYnkgdGhlIGNsaWVudHxcbnxyZXF1ZXN0X3RpbWV8IGBgYHN0cmluZ2BgYCB8IFRydWUgfFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaW4gYSBzdWNjZXNzZnVsIHJlc3BvbnNlLnxcbnxlbXNnfCBgYGBzdHJpbmdgYGAgfCBUcnVlIHxUaGlzIHdpbGwgYmUgcHJlc2VudCBvbmx5IGluIGEgZmFpbHVyZSByZXNwb25zZS58XG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcbntcbiAgICBcInJlcXVlc3RfdGltZVwiOlwiMTg6MDc6MzEgMjktMDUtMjAyMFwiLFxuXCJzdGF0XCI6XCJPa1wiLFxuXCJjYXNoXCI6XCIxNTAwMDAwMDAwMDAwMDAwLjAwXCIsXG5cInBheWluXCI6XCIwLjAwXCIsXG5cInBheW91dFwiOlwiMC4wMFwiLFxuXCJicmtjb2xsYW10XCI6XCIwLjAwXCIsXG5cInVuY2xlYXJlZGNhc2hcIjpcIjAuMDBcIixcblwiZGF5Y2FzaFwiOlwiMC4wMFwiLFxuXCJ0dXJub3ZlcmxtdFwiOlwiNTAwMDAwMDAwMDAwMDAuMDBcIixcblwicGVuZG9yZHZhbGxtdFwiOlwiMjAwMDAwMDAwMDAwMDAwMC4wMFwiLFxuXCJ0dXJub3ZlclwiOlwiMzkxNTAwMC4wMFwiLFxuXCJwZW5kb3JkdmFsXCI6XCIyODcxMDAwLjAwXCIsXG5cIm1hcmdpbnVzZWRcIjpcIjM5NDU1NDAuMDBcIixcblwibXRvbWN1cnBlclwiOlwiMC4wMFwiLFxuXCJ1cm10b21cIjpcIjMwNTQwLjAwXCIsXG5cImdyZXhwb1wiOlwiMzkxNTAwMC4wMFwiLFxuXCJ1enBubF9lX2lcIjpcIjE1MjcwLjAwXCIsXG5cInV6cG5sX2VfbVwiOlwiNjEwODAuMDBcIixcblwidXpwbmxfZV9jXCI6XCItNDU4MTAuMDBcIlxufVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgXCJlbXNnXCI6XCJTZXJ2ZXIgVGltZW91dCA6ICBcIlxufVxuTWFya2V0IEluZm9cblxuXG4jIyMjIDxhIG5hbWU9XCJtZC1zcGFuX2NhbGN1bGF0b3JcIj48L2E+IHNwYW5fY2FsY3VsYXRvcihhY3RpZCxwb3NpdGlvbmxpc3QpXG5UaGlzIGNhbGN1bGF0ZXMgdGhlIG1hcmdpbiByZXF1aXJlbWVudCBmb3IgYSBsaXN0IG9mIGlucHV0IHBvc2l0aW9ucy5cblxuRXhhbXBsZTogXG5cbmBgYFxucmV0ID0gYXBpLnNwYW5fY2FsY3VsYXRvcihhY3RpZCxwb3NpdGlvbmxpc3QpXG5gYGBcblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufGFjdGlkKnx8QW55IEFjY291bnQgaWQsIHByZWZlcmFibHkgYWN0dWFsIGFjY291bnQgaWQgaWYgc2VuZGluZyBmcm9tIHBvc3QgbG9naW4gc2NyZWVuLnxcbnxwb3MqfHxBcnJheSBvZiBqc29uIG9iamVjdHMuIChvYmplY3QgZmllbGRzIGdpdmVuIGluIGJlbG93IHRhYmxlKXxcblxuUG9zaXRpb24gc3RydWN0dXJlIGFzIGZvbGxvd3M6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufCBwcmQgfCBDIC8gTSAvIEggIHwgUHJvZHVjdCB8IFxufGV4Y2h8TkZPLCBDRFMsIE1DWCAuLi58RXhjaGFuZ2V8XG58aW5zdG5hbWV8RlVUU1RLLCBGVVRJRFgsIE9QVFNUSywgRlVUQ1VSLi4ufEluc3RydW1lbnQgbmFtZXxcbnxzeW1uYW1lfFVTRElOUiwgQUNDLCBBQkIsTklGVFkuLiB8U3ltYm9sIG5hbWV8XG58ZXhkfDI5LURFQy0yMDIyfERELU1NTS1ZWVlZIGZvcm1hdHxcbnxvcHR0fENFLCBQRXxPcHRpb24gVHlwZXxcbnxzdHJwcmN8MTE5MDAuMDAsIDcxLjAwMjV8U3RyaWtlIHByaWNlfFxufGJ1eXF0eXx8QnV5IE9wZW4gUXVhbnRpdHl8XG58c2VsbHF0eXx8U2VsbCBPcGVuIFF1YW50aXR5fFxufG5ldHF0eXx8TmV0IHRyYWRlZCBxdWFudGl0eXxcblxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rIG9yIE5vdF9Pa3xNYXJrZXQgd2F0Y2ggc3VjY2VzcyBvciBmYWlsdXJlIGluZGljYXRpb24ufFxufHNwYW58fFNwYW4gdmFsdWUgfFxufGV4cG98fElFeHBvc3VyZSBtYXJnaW58XG58c3Bhbl90cmFkZXx8U3BhbiB2YWx1ZSBpZ25vcmluZyBpbnB1dCBmaWVsZHMgYnV5cXR5LCBzZWxscXR5fFxufGV4cG9fdHJhZGV8fEV4cG9zdXJlIG1hcmdpbiBpZ25vcmluZyBpbnB1dCBmaWVsZHMgYnV5cXR5LCBzZWxscXR5fFxuXG5TYW1wbGUgU3VjY2VzcyBSZXNwb25zZSA6XG57XG4gICAgXCJyZXF1ZXN0X3RpbWVcIjogXCIxMTowMTo1OSAyNS0xMS0yMDIyXCIsXG4gICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICBcInNwYW5cIjogXCIxOTQxNi4wMFwiLFxuICAgIFwiZXhwb1wiOiBcIjQzMzguMzRcIixcbiAgICBcInNwYW5fdHJhZGVcIjogXCIxOTQxNi4wMFwiLFxuICAgIFwiZXhwb190cmFkZVwiOiBcIjQzMzguMzRcIlxufVxuXG5cbiMjIyMgPGEgbmFtZT1cIm1kLWdldF9vcHRpb25fZ3JlZWtcIj48L2E+Z2V0X29wdGlvbl9ncmVlayhleHBpcmVkYXRlLFN0cmlrZVByaWNlLFNwb3RQcmljZSxJbml0UmF0ZSxWb2xhdGlsaXR5LE9wdGlvblR5cGUpXG5PcHRpb25zIGdyZWVla3MgY29tcHV0ZWQgdGhlIGRlbHRhLCB0aGV0aGEsIHZlZ2EgLCByaG8gdmFsdWVzLlxuXG5FeGFtcGxlOiBcblxuYGBgXG5yZXQgPSBhcGkub3B0aW9uX2dyZWVrKGV4cGlyZWRhdGUgPScyNC1OT1YtMjAyMicsU3RyaWtlUHJpY2U9JzE1MCcsU3BvdFByaWNlICA9ICcyMDAnLEluaXRSYXRlICA9ICcxMDAnLFZvbGF0aWxpdHkgPSAnMTAnLE9wdGlvblR5cGU9JzUnKVxuYGBgXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxleGQqfHxFeHBpcnkgRGF0ZXxcbnxzdHJwcmMqfHxTdHJpa2UgUHJpY2UgfFxufHNwdHByYyp8fFNwb3QgUHJpY2V8XG58aW50X3JhdGUqfHxJbml0IFJhdGV8XG58dm9sYXRpbGl0eSp8fFZvbGF0aWxpdHl8XG58b3B0dHx8T3B0aW9uIFR5cGV8XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxyZXF1ZXN0X3RpbWV8fFRoaXMgd2lsbCBiZSBwcmVzZW50IG9ubHkgaW4gYSBzdWNjZXNzZnVsIHJlc3BvbnNlLnxcbnxjYWxfcHJpY2V8fENhbCBQcmljZXxcbnxwdXRfcHJpY2V8fFB1dCBQcmljZXxcbnxjYWxfZGVsdGF8fENhbCBEZWx0YXxcbnxwdXRfZGVsdGF8fFB1dCBEZWx0YXxcbnxjYWxfZ2FtbWF8fENhbCBHYW1tYXxcbnxwdXRfZ2FtbWF8fFB1dCBHYW1tYXxcbnxjYWxfdGhldGF8fENhbCBUaGV0YXxcbnxwdXRfdGhldGF8fFB1dCBUaGV0YXxcbnxjYWxfZGVsdGF8fENhbCBEZWx0YXxcbnxjYWxfcmhvfHxDYWwgUmhvfFxufHB1dF9yaG98fFB1dCBSaG98XG58Y2FsX3ZlZ298fENhbCBWZWdvfFxufHB1dF92ZWdvfHxQdXQgVmVnb3xcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxuIHtcblwicmVxdWVzdF90aW1lXCI6XCIxNzoyMjo1OCAyOC0wNy0yMDIxXCIsXG5cInN0YXRcIjpcIk9LXCIsXG5cImNhbF9wcmljZVwiOlwiMTQ0MVwiLFxuXCJwdXRfcHJpY2VcIjpcIjAuNDE3MDcxXCIsXG5cImNhbF9kZWx0YVwiOlwiMC45OTczMDRcIixcblwicHV0X2RlbHRhXCI6XCItMC4wMDI2OTZcIixcblwiY2FsX2dhbW1hXCI6XCIwLjAwMDAwMVwiLFxuXCJwdXRfZ2FtbWFcIjpcIjAuMDAwMDAxXCIsXG5cImNhbF90aGV0YVwiOlwiLTMxLjUzNTAxNVwiLFxuXCJwdXRfdGhldGFcIjpcIi0zMS40MDEzNDZcIixcblwiY2FsX3Job1wiOlwiMC4wMDAxMTlcIixcblwicHV0X3Job1wiOlwiLTAuMDE2NTkwXCIsXG5cImNhbF92ZWdvXCI6XCIwLjAwNjMwN1wiLFxucHV0X3ZlZ29cIjpcIjAuMDA2MzA3XCJcbiAgfVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gXCJzdGF0XCI6XCJOb3RfT2tcIixcbiBcImVtc2dcIjpcIkludmFsaWQgSW5wdXQgOiAgakRhdGEgaXMgTWlzc2luZy5cIlxufVxuXG5cbiMjIyMgPGEgbmFtZT1cIm1kLXNlYXJjaHNjcmlwXCI+PC9hPiBzZWFyY2hzY3JpcChleGNoYW5nZSwgc2VhcmNodGV4dCk6XG5TZWFyY2ggZm9yIHNjcmlwIG9yIGNvbnRyYWN0IGFuZCBpdHMgcHJvcGVydGllcyAgXG5cblRoZSBjYWxsIGNhbiBiZSBtYWRlIHRvIGdldCB0aGUgZXhjaGFuZ2UgcHJvdmlkZWQgdG9rZW4gZm9yIGEgc2NyaXAgb3IgYWx0ZXJuYXRlbHkgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWFsIHN0cmluZyB0byBnZXQgYSBsaXN0IG9mIG1hdGNoaW5nIHNjcmlwc1xuVHJhZGluZyBTeW1ib2w6XG5cblN5bWJvbE5hbWUgKyBFeHBEYXRlICsgJ0YnIGZvciBhbGwgZGF0YSBoYXZpbmcgSW5zdHJ1bWVudE5hbWUgc3RhcnRpbmcgd2l0aCBGVVRcblxuU3ltYm9sTmFtZSArIEV4cERhdGUgKyAnUCcgKyBTdHJpa2VQcmljZSBmb3IgYWxsIGRhdGEgaGF2aW5nIEluc3RydW1lbnROYW1lIHN0YXJ0aW5nIHdpdGggT1BUIGFuZCB3aXRoIE9wdGlvblR5cGUgUEVcblxuU3ltYm9sTmFtZSArIEV4cERhdGUgKyAnQycgKyBTdHJpa2VQcmljZSBmb3IgYWxsIGRhdGEgaGF2aW5nIEluc3RydW1lbnROYW1lIHN0YXJ0aW5nIHdpdGggT1BUIGFuZCB3aXRoIE9wdGlvblR5cGUgQ1xuXG5Gb3IgTUNYLCBGIHRvIGJlIGlnbm9yZWQgZm9yIEZVVCBpbnN0cnVtZW50c1xuXG5FeGFtcGxlOlxuYGBgXG5leGNoICA9ICdORk8nXG5xdWVyeSA9ICdCQU5LTklGVFkgMzBERUMgQ0UnICMgbXVsdGlwbGUgY3JpdGVyaWEgdG8gbmFycm93IHJlc3VsdHMgXG5yZXQgPSBhcGkuc2VhcmNoc2NyaXAoZXhjaGFuZ2U9ZXhjaCwgc2VhcmNodGV4dD1xdWVyeSlcblxuaWYgcmV0ICE9IE5vbmU6XG4gICAgc3ltYm9scyA9IHJldFsndmFsdWVzJ11cbiAgICBmb3Igc3ltYm9sIGluIHN5bWJvbHM6XG4gICAgICAgIHByaW50KCd7MH0gdG9rZW4gaXMgezF9Jy5mb3JtYXQoc3ltYm9sWyd0c3ltJ10sIHN5bWJvbFsndG9rZW4nXSkpXG5gYGBcbkV4YW1wbGUgMjpcbmBgYFxuYXBpLnNlYXJjaHNjcmlwKGV4Y2hhbmdlPSdOU0UnLCBzZWFyY2h0ZXh0PSdSRUwnKVxuYGBgXG5UaGlzIHdpbGwgcmVwbHkgYXMgZm9sbG93aW5nXG5gYGBcbntcbiAgICBcInN0YXRcIjogXCJPa1wiLFxuICAgIFwidmFsdWVzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNjlcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTDEwME5BVi1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjI0MjI1XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxBWE8tRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCI0MzI3XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxBWE9GT09ULUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNjhcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTEJBTktOQVYtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIyODgyXCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxDQVBJVEFMLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzBcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTENPTlNOQVYtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIxODA3MVwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMRElWTkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzJcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTEdPTEROQVYtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIyODg1XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxJQU5DRS1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE1MDY4XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxJR0FSRS1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjU1M1wiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMSU5GUkEtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIxODA3NFwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMTlYyME5BVi1FUVwiXG4gICAgICAgIH1cbiAgICBdXG59XG5gYGBcblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHVpZCp8fExvZ2dlZCBpbiBVc2VyIElkfFxufHN0ZXh0Knx8U2VhcmNoIFRleHR8XG58ZXhjaHx8RXhjaGFuZ2UgKFNlbGVjdCBmcm9tIOKAmGV4YXJy4oCZIEFycmF5IHByb3ZpZGVkIGluIFVzZXIgRGV0YWlscyByZXNwb25zZSl8XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfE1hcmtldCB3YXRjaCBzdWNjZXNzIG9yIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58dmFsdWVzfHxBcnJheSBvZiBqc29uIG9iamVjdHMuIChvYmplY3QgZmllbGRzIGdpdmVuIGluIGJlbG93IHRhYmxlKXxcbnxlbXNnfHxUaGlzIHdpbGwgYmUgcHJlc2VudCBvbmx5IGluIGNhc2Ugb2YgZXJyb3JzLiB8VGhhdCBpcyA6IDEpIEludmFsaWQgSW5wdXR8ICAgICAgICAgICAgICAyKSBTZXNzaW9uIEV4cGlyZWR8XG5cblxufEpzb24gRmllbGRzIG9mIG9iamVjdCBpbiB2YWx1ZXMgQXJyYXl8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxleGNofE5TRSwgQlNFLCBORk8gLi4ufEV4Y2hhbmdlIHxcbnx0c3ltfHxUcmFkaW5nIHN5bWJvbCBvZiB0aGUgc2NyaXAgKGNvbnRyYWN0KXxcbnx0b2tlbnx8VG9rZW4gb2YgdGhlIHNjcmlwIChjb250cmFjdCl8XG58cHB8fFByaWNlIHByZWNpc2lvbnxcbnx0aXx8VGljayBzaXplfFxufGxzfHxMb3Qgc2l6ZXxcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxuXG57XG4gICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDY5XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUwxMDBOQVYtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIyNDIyNVwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQVhPLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiNDMyN1wiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQVhPRk9PVC1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDY4XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxCQU5LTkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMjg4MlwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQ0FQSVRBTC1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDcwXCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxDT05TTkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzFcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTERJVk5BVi1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDcyXCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxHT0xETkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMjg4NVwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMSUFOQ0UtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIxNTA2OFwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMSUdBUkUtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCI1NTNcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTElORlJBLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzRcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTE5WMjBOQVYtRVFcIlxuICAgICAgICB9XG4gICAgXVxufVxuXG5TYW1wbGUgRmFpbHVyZSBSZXNwb25zZSA6XG57XG4gICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgXCJlbXNnXCI6XCJObyBEYXRhIDogIFwiXG59XG5cbiMjIyMgPGEgbmFtZT1cIm1kLWdldF9zZWN1cml0eV9pbmZvXCI+PC9hPiBnZXRfc2VjdXJpdHlfaW5mbyhleGNoYW5nZSwgdG9rZW4pOlxuZ2V0cyB0aGUgY29tcGxldGUgZGV0YWlscyBhbmQgaXRzIHByb3BlcnRpZXMgXG5cbkV4YW1wbGU6XG5gYGBcbmV4Y2ggID0gJ05TRSdcbnRva2VuID0gJzIyJ1xucmV0ID0gYXBpLmdldF9zZWN1cml0eV9pbmZvKGV4Y2hhbmdlPWV4Y2gsIHRva2VuPXRva2VuKVxuYGBgXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnx1aWQqfHxMb2dnZWQgaW4gVXNlciBJZHxcbnxleGNofHxFeGNoYW5nZSB8XG58dG9rZW58fENvbnRyYWN0IFRva2VufFxuXG5SZXNwb25zZSBEZXRhaWxzIDpcblxuUmVzcG9uc2UgZGF0YSB3aWxsIGhhdmUgYmVsb3cgZmllbGRzLlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxyZXF1ZXN0X3RpbWV8fEl0IHdpbGwgYmUgcHJlc2VudCBvbmx5IGluIGEgc3VjY2Vzc2Z1bCByZXNwb25zZS58XG58c3RhdHxPayBvciBOb3RfT2t8TWFya2V0IHdhdGNoIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxleGNofE5TRSwgQlNFLCBORk8gLi4ufEV4Y2hhbmdlIHxcbnx0c3ltfHxUcmFkaW5nIFN5bWJvbHxcbnxjbmFtZXx8Q29tcGFueSBOYW1lfFxufHN5bW5hbXx8U3ltYm9sIE5hbWV8XG58c2VnfHxTZWdtZW50fFxufGV4ZHx8RXhwaXJ5IERhdGV8XG58aW5zdG5hbWV8fEludHJ1bWVudCBOYW1lfFxufHN0cnByY3x8U3RyaWtlIFByaWNlIHxcbnxvcHR0fHxPcHRpb24gVHlwZXxcbnxpc2lufHxJU0lOfFxufHRpIHx8VGljayBTaXplIHxcbnxsc3x8TG90IFNpemUgfFxufHBwfHxQcmljZSBwcmVjaXNpb258XG58bXVsdHx8TXVsdGlwbGllcnxcbnxncF9uZHx8Z24vZ2QgKiBwbi9wZHxcbnxwcmN1bnR8fFByaWNlIFVuaXRzIHxcbnxwcmNxcXR5fHxQcmljZSBRdW90ZSBRdHl8XG58dHJkdW50fHxUcmFkZSBVbml0cyAgIHxcbnxkZWx1bnR8fERlbGl2ZXJ5IFVuaXRzfFxufGZyenF0eXx8RnJlZXplIFF0eXxcbnxnc21pbmR8fHNjcmlwdXBkYXRlICAgR3NtIEluZHxcbnxlbG1ibXJnfHxFbG0gQnV5IE1hcmdpbnxcbnxlbG1zbXJnfHxFbG0gU2VsbCBNYXJnaW58XG58YWRkYm1yZ3x8QWRkaXRpb25hbCBMb25nIE1hcmdpbnxcbnxhZGRzbXJnfHxBZGRpdGlvbmFsIFNob3J0IE1hcmdpbnxcbnxzcGxibXJnfHxTcGVjaWFsIExvbmcgTWFyZ2luICAgIHxcbnxzcGxzbXJnfHxTcGVjaWFsIFNob3J0IE1hcmdpbnxcbnxkZWxtcmd8fERlbGl2ZXJ5IE1hcmdpbiB8XG58dGVubXJnfHxUZW5kZXIgTWFyZ2lufFxufHRlbnN0cmR8fFRlbmRlciBTdGFydCBEYXRlfFxufHRlbmVuZGR8fFRlbmRlciBFbmQgRWF0ZXxcbnxleGVzdHJkfHxFeGVyY2lzZSBTdGFydCBEYXRlfFxufGV4ZWVuZGR8fEV4ZXJjaXNlIEVuZCBEYXRlIHxcbnxlbG1tcmd8fEVsbSBNYXJnaW4gfFxufHZhcm1yZ3x8VmFyIE1hcmdpbiB8XG58ZXhwbXJnfHxFeHBvc3VyZSBNYXJnaW58XG58dG9rZW58fENvbnRyYWN0IFRva2VuICB8XG58cHJjZnRyX2R8fCgoR04gLyBHRCkgKiAoUE4vUEQpKXxcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxue1xuICAgICAgXCJyZXF1ZXN0X3RpbWVcIjogXCIxNzo0MzozOCAzMS0xMC0yMDIwXCIsXG4gICAgICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgXCJ0c3ltXCI6IFwiQUNDLUVRXCIsXG4gICBcImNuYW1lXCI6IFwiQUNDIExJTUlURURcIixcbiAgIFwic3ltbmFtZVwiOiBcIkFDQ1wiLFxuICAgXCJzZWdcIjogXCJFUVRcIixcbiAgIFwiaW5zdG5hbWVcIjogXCJFUVwiLFxuICAgXCJpc2luXCI6IFwiSU5FMDEyQTAxMDI1XCIsXG4gICBcInBwXCI6IFwiMlwiLFxuICAgXCJsc1wiOiBcIjFcIixcbiAgIFwidGlcIjogXCIwLjA1XCIsXG4gICBcIm11bHRcIjogXCIxXCIsXG4gICBcInByY2Z0cl9kXCI6IFwiKDEgLyAxICkgKiAoMSAvIDEpXCIsXG4gICBcInRyZHVudFwiOiBcIlwiLFxuICAgXCJkZWx1bnRcIjogXCJBQ0NcIixcbiAgIFwidG9rZW5cIjogXCIyMlwiLFxuICAgXCJ2YXJtcmdcIjogXCI0MC4wMFwiXG59XG5cblNhbXBsZSBGYWlsdXJlIFJlc3BvbnNlIDpcbntcbiAgICBcInN0YXRcIjpcIk5vdF9Pa1wiLFxuICAgIFwicmVxdWVzdF90aW1lXCI6XCIxMDo1MDo1NCAxMC0xMi0yMDIwXCIsXG4gICAgXCJlbXNnXCI6XCJFcnJvciBPY2N1cnJlZCA6IDUgXFxcIm5vIGRhdGFcXFwiXCJcbn1cblxuIyMjIyA8YSBuYW1lPVwibWQtZ2V0X3F1b3Rlc1wiPjwvYT4gZ2V0X3F1b3RlcyhleGNoYW5nZSwgdG9rZW4pOlxuZ2V0cyB0aGUgY29tcGxldGUgZGV0YWlscyBhbmQgaXRzIHByb3BlcnRpZXMgXG5cbkV4YW1wbGU6IFxuYGBgXG5leGNoICA9ICdOU0UnXG50b2tlbiA9ICcyMidcbnJldCA9IGFwaS5nZXRfcXVvdGVzKGV4Y2hhbmdlPWV4Y2gsIHRva2VuPXRva2VuKVxuYGBgXG5cblJlcXVlc3QgRGV0YWlscyA6XG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHVpZCp8fExvZ2dlZCBpbiBVc2VyIElkfFxufGV4Y2h8fEV4Y2hhbmdlIHxcbnx0b2tlbnx8Q29udHJhY3QgVG9rZW58XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgd2l0aCBiZWxvdyBmaWVsZHMuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2sgb3IgTm90X09rfFdhdGNoIGxpc3QgdXBkYXRlIHN1Y2Nlc3Mgb3IgZmFpbHVyZSBpbmRpY2F0aW9uLnxcbnxyZXF1ZXN0X3RpbWV8fEl0IHdpbGwgYmUgcHJlc2VudCBvbmx5IGluIGEgc3VjY2Vzc2Z1bCByZXNwb25zZS58XG58ZXhjaHxOU0UsIEJTRSwgTkZPIC4uLnxFeGNoYW5nZSB8XG58dHN5bXx8VHJhZGluZyBTeW1ib2x8XG58Y25hbWV8fENvbXBhbnkgTmFtZXxcbnxzeW1uYW1lfHxTeW1ib2wgTmFtZXxcbnxzZWd8fFNlZ21lbnR8XG58aW5zdG5hbWV8fEluc3RydW1lbnQgTmFtZXxcbnxpc2lufHxJU0lOfFxufHBwfHxQcmljZSBwcmVjaXNpb258XG58bHN8fExvdCBTaXplIHxcbnx0aXx8VGljayBTaXplIHxcbnxtdWx0fHxNdWx0aXBsaWVyfFxufHVjfHxVcHBlciBjaXJjdWl0IGxpbWl0bGN8XG58bGN8fExvd2VyIGNpcmN1aXQgbGltaXR8XG58cHJjZnRyX2R8fFByaWNlIGZhY3RvcnwoKEdOIC8gR0QpICogKFBOL1BEKSl8XG58dG9rZW58fFRva2VufFxufGxwfHxMVFB8XG58b3x8T3BlbiBQcmljZXxcbnxofHxEYXkgSGlnaCBQcmljZXxcbnxsfHxEYXkgTG93IFByaWNlfFxufHZ8fFZvbHVtZXxcbnxsdHF8fExhc3QgdHJhZGUgcXVhbnRpdHl8XG58bHR0fHxMYXN0IHRyYWRlIHRpbWV8XG58YnAxfHxCZXN0IEJ1eSBQcmljZSAxfFxufHNwMXx8QmVzdCBTZWxsIFByaWNlIDF8XG58YnAyfHxCZXN0IEJ1eSBQcmljZSAyfFxufHNwMnx8QmVzdCBTZWxsIFByaWNlIDJ8XG58YnAzfHxCZXN0IEJ1eSBQcmljZSAzfFxufHNwM3x8QmVzdCBTZWxsIFByaWNlIDN8XG58YnA0fHxCZXN0IEJ1eSBQcmljZSA0fFxufHNwNHx8QmVzdCBTZWxsIFByaWNlIDR8XG58YnA1fHxCZXN0IEJ1eSBQcmljZSA1fFxufHNwNXx8QmVzdCBTZWxsIFByaWNlIDV8XG58YnExfHxCZXN0IEJ1eSBRdWFudGl0eSAxfFxufHNxMXx8QmVzdCBTZWxsIFF1YW50aXR5IDF8XG58YnEyfHxCZXN0IEJ1eSBRdWFudGl0eSAyfFxufHNxMnx8QmVzdCBTZWxsIFF1YW50aXR5IDJ8XG58YnEzfHxCZXN0IEJ1eSBRdWFudGl0eSAzfFxufHNxM3x8QmVzdCBTZWxsIFF1YW50aXR5IDN8XG58YnE0fHxCZXN0IEJ1eSBRdWFudGl0eSA0fFxufHNxNHx8QmVzdCBTZWxsIFF1YW50aXR5IDR8XG58YnE1fHxCZXN0IEJ1eSBRdWFudGl0eSA1fFxufHNxNXx8QmVzdCBTZWxsIFF1YW50aXR5IDV8XG58Ym8xfHxCZXN0IEJ1eSBPcmRlcnMgMXxcbnxzbzF8fEJlc3QgU2VsbCBPcmRlcnMgMXxcbnxibzJ8fEJlc3QgQnV5IE9yZGVycyAyfFxufHNvMnx8QmVzdCBTZWxsIE9yZGVycyAyfFxufGJvM3x8QmVzdCBCdXkgT3JkZXJzIDN8XG58c28zfHxCZXN0IFNlbGwgT3JkZXJzIDN8XG58Ym80fHxCZXN0IEJ1eSBPcmRlcnMgNHxcbnxzbzR8fEJlc3QgU2VsbCBPcmRlcnMgNHxcbnxibzV8fEJlc3QgQnV5IE9yZGVycyA1fFxufHNvNXx8QmVzdCBTZWxsIE9yZGVycyA1fFxuXG5cblNhbXBsZSBTdWNjZXNzIFJlc3BvbnNlIDpcbntcbiAgICBcInJlcXVlc3RfdGltZVwiOlwiMTI6MDU6MjEgMTgtMDUtMjAyMVwiLFxuXCJzdGF0XCI6XCJPa1wiXG4sXCJleGNoXCI6XCJOU0VcIixcblwidHN5bVwiOlwiQUNDLUVRXCIsXG5cImNuYW1lXCI6XCJBQ0MgTElNSVRFRFwiLFxuXCJzeW1uYW1lXCI6XCJBQ0NcIixcblwic2VnXCI6XCJFUVRcIixcblwiaW5zdG5hbWVcIjpcIkVRXCIsXG5cImlzaW5cIjpcIklORTAxMkEwMTAyNVwiLFxuXCJwcFwiOlwiMlwiLFxuXCJsc1wiOlwiMVwiLFxuXCJ0aVwiOlwiMC4wNVwiLFxuXCJtdWx0XCI6XCIxXCIsXG5cInVjXCI6XCIyMDkzLjk1XCIsXG5cImxjXCI6XCIxNzEzLjI1XCIsXG5cInByY2Z0cl9kXCI6XCIoMSAvIDEgKSAqICgxIC8gMSlcIixcblwidG9rZW5cIjpcIjIyXCIsXG5cImxwXCI6XCIwLjAwXCIsXG5cImhcIjpcIjAuMDBcIixcblwibFwiOlwiMC4wMFwiLFxuXCJ2XCI6XCIwXCIsXG5cImx0cVwiOlwiMFwiLFxuXCJsdHRcIjpcIjA1OjMwOjAwXCIsXG5cImJwMVwiOlwiMjAwMC4wMFwiLFxuXCJzcDFcIjpcIjAuMDBcIixcblwiYnAyXCI6XCIwLjAwXCIsXG5cInNwMlwiOlwiMC4wMFwiLFxuXCJicDNcIjpcIjAuMDBcIixcblwic3AzXCI6XCIwLjAwXCIsXG5cImJwNFwiOlwiMC4wMFwiLFxuXCJzcDRcIjpcIjAuMDBcIixcblwiYnA1XCI6XCIwLjAwXCIsXG5cInNwNVwiOlwiMC4wMFwiLFxuXCJicTFcIjpcIjJcIixcblwic3ExXCI6XCIwXCIsXG5cImJxMlwiOlwiMFwiLFxuXCJzcTJcIjpcIjBcIixcblwiYnEzXCI6XCIwXCIsXG5cInNxM1wiOlwiMFwiLFxuXCJicTRcIjpcIjBcIixcblwic3E0XCI6XCIwXCIsXG5cImJxNVwiOlwiMFwiLFxuXCJzcTVcIjpcIjBcIixcblwiYm8xXCI6XCIyXCIsXG5cInNvMVwiOlwiMFwiLFxuXCJibzJcIjpcIjBcIixcblwic28yXCI6XCIwXCIsXG5cImJvM1wiOlwiMFwiLFxuXCJzbzNcIjpcIjBcIixcblwiYm80XCI6XCIwXCIsXG5cInNvNFwiOlwiMFwiLFxuXCJibzVcIjpcIjBcIixcblwiU281XCI6XCIwXCJcbn1cblxuU2FtcGxlIEZhaWx1cmUgUmVzcG9uc2UgOlxue1xuICAgIFwic3RhdFwiOlwiTm90X09rXCIsXG4gICAgXCJyZXF1ZXN0X3RpbWVcIjpcIjEwOjUwOjU0IDEwLTEyLTIwMjBcIixcbiAgICBcImVtc2dcIjpcIkVycm9yIE9jY3VycmVkIDogNSBcXFwibm8gZGF0YVxcXCJcIlxufVxuXG4jIyMjIDxhIG5hbWU9XCJtZC1nZXRfdGltZV9wcmljZV9zZXJpZXNcIj48L2E+IGdldF90aW1lX3ByaWNlX3NlcmllcyhleGNoYW5nZSwgdG9rZW4sIHN0YXJ0dGltZSwgZW5kdGltZSwgaW50ZXJ2YWwpOlxuZ2V0cyB0aGUgY2hhcnQgZGF0ZSBmb3IgdGhlIHN5bWJvbFxuXG5FeGFtcGxlOlxuYGBgXG5sYXN0QnVzRGF5ID0gZGF0ZXRpbWUuZGF0ZXRpbWUudG9kYXkoKVxubGFzdEJ1c0RheSA9IGxhc3RCdXNEYXkucmVwbGFjZShob3VyPTAsIG1pbnV0ZT0wLCBzZWNvbmQ9MCwgbWljcm9zZWNvbmQ9MClcbnJldCA9IGFwaS5nZXRfdGltZV9wcmljZV9zZXJpZXMoZXhjaGFuZ2U9J05TRScsIHRva2VuPScyMicsIHN0YXJ0dGltZT1sYXN0QnVzRGF5LnRpbWVzdGFtcCgpLCBpbnRlcnZhbD01KVxuYGBgXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnx1aWQqfHxMb2dnZWQgaW4gVXNlciBJZHxcbnxleGNoKnx8RXhjaGFuZ2V8XG58dG9rZW4qfHx8XG58c3R8fFN0YXJ0IHRpbWUgKHNlY29uZHMgc2luY2UgMSBqYW4gMTk3MCl8XG58ZXR8fEVuZCBUaW1lIChzZWNvbmRzIHNpbmNlIDEgamFuIDE5NzApfFxufGludHJ2fOKAnDHigJ0sIOKAnTPigJ0sIOKAnDXigJ0sIOKAnDEw4oCdLCDigJwxNeKAnSwg4oCcMzDigJ0sIOKAnDYw4oCdLCDigJwxMjDigJ0sIOKAnDI0MOKAnXxDYW5kbGUgc2l6ZSBpbiBtaW51dGVzIChvcHRpb25hbCBmaWVsZCwgaWYgbm90IGdpdmVuIGFzc3VtZSB0byBiZSDigJwx4oCdKXxcblxuUmVzcG9uc2UgRGV0YWlscyA6XG5cblJlc3BvbnNlIGRhdGEgd2lsbCBiZSBpbiBqc29uIGZvcm1hdCAgaW4gY2FzZSBmb3IgZmFpbHVyZS5cblxufEpzb24gRmllbGRzfFBvc3NpYmxlIHZhbHVlfERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS18XG58c3RhdHxOb3RfT2t8VFBEYXRhIGZhaWx1cmUgaW5kaWNhdGlvbi58XG58ZW1zZ3x8VGhpcyB3aWxsIGJlIHByZXNlbnQgb25seSBpbiBjYXNlIG9mIGVycm9ycy4gfFxuXG5SZXNwb25zZSBkYXRhIHdpbGwgYmUgaW4ganNvbiBmb3JtYXQgIGluIGNhc2UgZm9yIHN1Y2Nlc3MuXG5cbnxKc29uIEZpZWxkc3xQb3NzaWJsZSB2YWx1ZXxEZXNjcmlwdGlvbnxcbnwgLS0tIHwgLS0tIHwgLS0tfFxufHN0YXR8T2t8VFBEYXRhIHN1Y2Nlc3MgaW5kaWNhdGlvbi58XG58dGltZXx8REQvTU0vQ0NZWSBoaDptbTpzc3xcbnxpbnRvfHxJbnRlcnZhbCBvcGVufFxufGludGh8fEludGVydmFsIGhpZ2h8XG58aW50bHx8SW50ZXJ2YWwgbG93fFxufGludGN8fEludGVydmFsIGNsb3NlfFxufGludHZ3YXB8fEludGVydmFsIHZ3YXB8XG58aW50dnx8SW50ZXJ2YWwgdm9sdW1lfFxufHZ8fHZvbHVtZXxcbnxpbnRvaXx8SW50ZXJ2YWwgaW8gY2hhbmdlfFxufG9pfHxvaXxcblxuXG5TYW1wbGUgU3VjY2VzcyBSZXNwb25zZSA6XG5bXG4gICAge1xuICAgICAgIFwic3RhdFwiOlwiT2tcIixcbiAgICAgICBcInRpbWVcIjpcIjAyLTA2LTIwMjAgMTU6NDY6MjNcIixcbiAgICAgICBcImludG9cIjpcIjAuMDBcIixcblwiaW50aFwiOlwiMC4wMFwiLFxuXCJpbnRsXCI6XCIwLjAwXCIsXG5cImludGNcIjpcIjAuMDBcIixcblwiaW50dndhcFwiOlwiMC4wMFwiLFxuXCJpbnR2XCI6XCIwXCIsXG5cImludG9pXCI6XCIwXCIsXG5cInZcIjpcIjk4MDUxNVwiLFxuXCJvaVwiOlwiMTI4NzAyXCJcbiAgICB9LFxuICAgIHtcblwic3RhdFwiOlwiT2tcIixcblwidGltZVwiOlwiMDItMDYtMjAyMCAxNTo0NToyM1wiLFxuXCJpbnRvXCI6XCIwLjAwXCIsXG5cImludGhcIjpcIjAuMDBcIixcblwiaW50bFwiOlwiMC4wMFwiLFxuXCJpbnRjXCI6XCIwLjAwXCIsXG5cImludHZ3YXBcIjpcIjAuMDBcIixcblwiaW50dlwiOlwiMFwiLFxuXCJpbnRvaVwiOlwiMFwiLFxuXCJ2XCI6XCI5ODA1MTVcIixcblwib2lcIjpcIjEyODcwMlwiXG4gICAgIH0sXG4gICAge1xuXCJzdGF0XCI6XCJPa1wiLFxuXCJ0aW1lXCI6XCIwMi0wNi0yMDIwIDE1OjQ0OjIzXCIsXG5cImludG9cIjpcIjAuMDBcIixcblwiaW50aFwiOlwiMC4wMFwiLFxuXCJpbnRsXCI6XCIwLjAwXCIsXG5cImludGNcIjpcIjAuMDBcIixcblwiaW50dndhcFwiOlwiMC4wMFwiLFxuXCJpbnR2XCI6XCIwXCIsXG5cImludG9pXCI6XCIwXCIsXG5cInZcIjpcIjk4MDUxNVwiLFxuXCJvaVwiOlwiMTI4NzAyXCJcbiAgICB9LFxuICAgIHtcblwic3RhdFwiOlwiT2tcIixcblwidGltZVwiOlwiMDItMDYtMjAyMCAxNTo0MzoyM1wiLFxuXCJpbnRvXCI6XCIxMjg3LjAwXCIsXG5cImludGhcIjpcIjEyODcuMDBcIixcblwiaW50bFwiOlwiMC4wMFwiLFxuXCJpbnRjXCI6XCIxMjg3LjAwXCIsXG5cImludHZ3YXBcIjpcIjEyODcwMi4wMFwiLFxuXCJpbnR2XCI6XCI0XCIsXG5cImludG9pXCI6XCIxMjg3MDJcIixcblwidlwiOlwiOTgwNTE1XCIsXG5cIm9pXCI6XCIxMjg3MDJcIlxuICAgIH0sXG4gICAge1xuXCJzdGF0XCI6XCJPa1wiLFxuXCJ0aW1lXCI6XCIwMi0wNi0yMDIwIDE1OjQyOjIzXCIsXG5cImludG9cIjpcIjAuMDBcIixcblwiaW50aFwiOlwiMC4wMFwiLFxuXCJpbnRsXCI6XCIwLjAwXCIsXG5cImludGNcIjpcIjAuMDBcIixcblwiaW50dndhcFwiOlwiMC4wMFwiLFxuXCJpbnR2XCI6XCIwXCIsXG5cImludG9pXCI6XCIwXCIsXG5cInZcIjpcIjk4MDUxMVwiLFxuXCJvaVwiOlwiMTI4NzAyXCJcbiAgICB9XG5dXG5cblNhbXBsZSBGYWlsdXJlIFJlc3BvbnNlIDpcbntcbiAgICAgXCJzdGF0XCI6XCJOb3RfT2tcIixcbiAgICAgXCJlbXNnXCI6XCJTZXNzaW9uIEV4cGlyZWQgOiBJbnZhbGlkIFNlc3Npb24gS2V5XCJcbn1cblxuIyMjIyA8YSBuYW1lPVwibWQtZ2V0X2RhaWx5X3ByaWNlX3Nlcmllc1wiPjwvYT5nZXRfZGFpbHlfcHJpY2Vfc2VyaWVzKFN5bWJvbCBuYW1lLCBGcm9tIGRhdGUsIFRvIGRhdGUpOlxuZ2V0cyB0aGUgY2hhcnQgZGF0ZSBmb3IgdGhlIHN5bWJvbFxuXG5FeGFtcGxlOlxuYGBgXG5yZXQgPWFwaS5nZXRfZGFpbHlfcHJpY2Vfc2VyaWVzKGV4Y2hhbmdlPVwiTlNFXCIsdHJhZGluZ3N5bWJvbD1cIlBBWVRNLUVRXCIsc3RhcnRkYXRlPVwiNDU3NDAxNjAwXCIsZW5kZGF0ZT1cIjQ4MDU1NjgwMFwiKVxuYGBgXG5SZXF1ZXN0IERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzeW0qfHxTeW1ib2wgbmFtZXxcbnxmcm9tKnx8RnJvbSBkYXRlfFxufHRvKnx8VG8gZGF0ZSB8XG5cblJlc3BvbnNlIERldGFpbHMgOlxuXG58SnNvbiBGaWVsZHN8UG9zc2libGUgdmFsdWV8RGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLXxcbnxzdGF0fE9rfFRQRGF0YSBzdWNjZXNzIGluZGljYXRpb24ufFxufHRpbWV8fEREL01NL0NDWVkgaGg6bW06c3N8XG58aW50b3x8SW50ZXJ2YWwgb3BlbnxcbnxpbnRofHxJbnRlcnZhbCBoaWdofFxufGludGx8fEludGVydmFsIGxvd3xcbnxpbnRjfHxJbnRlcnZhbCBjbG9zZXxcbnxzc2JvZXx8RGF0ZSxTZWNvbmRzIGluIDE5NzAgZm9ybWF0fFxufGludHZ8fEludGVydmFsIHZvbHVtZXxcblxuU2FtcGxlIFN1Y2Nlc3MgUmVzcG9uc2UgOlxuW1xuICBcIntcbiAgICAgICBcXFwidGltZVxcXCI6XFxcIjIxLVNFUC0yMDIyXFxcIixcbiAgICAgICBcXFwiaW50b1xcXCI6XFxcIjI0OTYuNzVcXFwiLFxuICAgICAgIFxcXCJpbnRoXFxcIjpcXFwiMjUzMy4wMFxcXCIsXG4gICAgICAgXFxcImludGxcXFwiOlxcXCIyNDk1LjAwXFxcIiwgXG4gICAgICAgXFxcImludGNcXFwiOlxcXCIyNTA5Ljc1XFxcIixcbiAgICAgICBcXFwic3Nib2VcXFwiOlxcXCIxNjYzNzE4NDAwXFxcIixcbiAgICAgICBcXFwiaW50dlxcXCI6XFxcIjQyNDkxNzIuMDBcXFwiXG4gICB9XCIsXG4gXCJ7XG4gICAgICAgXFxcInRpbWVcXFwiOlxcXCIxNS1TRVAtMjAyMlxcXCIsXG4gICAgICAgXFxcImludG9cXFwiOlxcXCIyNTgzLjAwXFxcIixcbiAgICAgICBcXFwiaW50aFxcXCI6XFxcIjI2MDMuNTVcXFwiLFxuICAgICAgIFxcXCJpbnRsXFxcIjpcXFwiMjU1Ni43NVxcXCIsXG4gICAgICAgXFxcImludGNcXFwiOlxcXCIyNTYyLjcwXFxcIiwgXG4gICAgICAgXFxcInNzYm9lXFxcIjpcXFwiMTY2MzIwMDAwMFxcXCIsXG4gICAgICAgXFxcImludHZcXFwiOlxcXCI0NzgzNzIzLjAwXFxcIlxuICB9XCIsXG4gXCJ7IFx0XG4gICAgICAgXFxcInRpbWVcXFwiOlxcXCIyOC1KVU4tMjAyMVxcXCIsXG4gICAgICAgXFxcImludG9cXFwiOlxcXCIyMTIyLjAwXFxcIixcbiAgICAgICBcXFwiaW50aFxcXCI6XFxcIjIxMjYuNTBcXFwiLCBcbiAgICAgICBcXFwiaW50bFxcXCI6XFxcIjIwODEuMDBcXFwiLCBcbiAgICAgICBcXFwiaW50Y1xcXCI6XFxcIjIwODYuMDBcXFwiLCBcbiAgICAgICBcXFwic3Nib2VcXFwiOlxcXCIxNjI0ODM4NDAwXFxcIixcbiAgICAgICAgXFxcImludHZcXFwiOlxcXCI5MzU3ODUyLjAwXFxcIlxuICB9XCJcbl1cblxuIyMjIyA8YSBuYW1lPVwibWQtZ2V0X29wdGlvbmNoYWluXCI+PC9hPiBnZXRfb3B0aW9uX2NoYWluKGV4Y2hhbmdlLCB0cmFkaW5nc3ltYm9sLCBzdHJpa2VwcmljZSwgY291bnQpOlxuXG5nZXRzIHRoZSBjb250cmFjdHMgb2YgcmVsYXRlZCBzdHJpa2VzXG5cbnwgUGFyYW0gfCBUeXBlIHwgT3B0aW9uYWwgfERlc2NyaXB0aW9uIHxcbnwgLS0tIHwgLS0tIHwgLS0tIHwgLS0tfFxufCBleGNoYW5nZSB8IGBgYHN0cmluZ2BgYCB8IEZhbHNlIHwgRXhjaGFuZ2UgKFVJIG5lZWQgdG8gY2hlY2sgaWYgZXhjaGFuZ2UgaW4gTkZPIC8gQ0RTIC8gTUNYIC8gb3IgYW55IG90aGVyIGV4Y2hhbmdlIHdoaWNoIGhhcyBvcHRpb25zLCBpZiBub3QgZG9uJ3QgYWxsb3cpfFxufCB0cmFkaW5nc3ltYm9sIHwgYGBgc3RyaW5nYGBgIHwgRmFsc2UgfCBUcmFkaW5nIHN5bWJvbCBvZiBhbnkgb2YgdGhlIG9wdGlvbiBvciBmdXR1cmUuIE9wdGlvbiBjaGFpbiBmb3IgdGhhdCB1bmRlcmx5aW5nIHdpbGwgYmUgcmV0dXJuZWQuICh1c2UgdXJsIGVuY29kaW5nIHRvIGF2b2lkIHNwZWNpYWwgY2hhciBlcnJvciBmb3Igc3ltYm9scyBsaWtlIE0mTSl8XG58IHN0cmlrZXByaWNlIHwgYGBgZmxvYXRgYGAgfCBGYWxzZSB8IE1pZCBwcmljZSBmb3Igb3B0aW9uIGNoYWluIHNlbGVjdGlvbnxcbnwgY291bnQgfCBgYGBpbnRgYGAgfCBUcnVlIHwgTnVtYmVyIG9mIHN0cmlrZSB0byByZXR1cm4gb24gb25lIHNpZGUgb2YgdGhlIG1pZCBwcmljZSBmb3IgUFVUIGFuZCBDQUxMLiAgKGV4YW1wbGUgY250IGlzIDQsIHRvdGFsIDE2IGNvbnRyYWN0cyB3aWxsIGJlIHJldHVybmVkLCBpZiBjbnQgaXMgaXMgNSB0b3RhbCAyMCBjb250cmFjdCB3aWxsIGJlIHJldHVybmVkKXxcblxudGhlIHJlc3BvbnNlIGlzIGFzIGZvbGxvd3MsXG5cbnwgUGFyYW0gfCBUeXBlIHwgT3B0aW9uYWwgfERlc2NyaXB0aW9uIHxcbnwgLS0tIHwgLS0tIHwgLS0tIHwgLS0tfFxufCBzdGF0IHwgYGBgc3RyaW5nYGBgIHwgVHJ1ZSB8IG9rIG9yIE5vdF9vayB8XG58IHZhbHVlcyB8IGBgYHN0cmluZ2BgYCB8IFRydWUgfCBwcm9wZXJ0aWVzIG9mIHRoZSBzY3JpcCB8XG58IGVtc2cgfCBgYGBzdHJpbmdgYGAgfCBGYWxzZSB8IEVycm9yIE1lc3NhZ2UgfFxuXG58IFBhcmFtIHwgVHlwZSB8IE9wdGlvbmFsIHxEZXNjcmlwdGlvbiB8XG58IC0tLSB8IC0tLSB8IC0tLSB8IC0tLXxcbnwgZXhjaCB8IGBgYHN0cmluZ2BgYCB8IEZhbHNlIHwgRXhjaGFuZ2UgfFxufCB0c3ltIHwgYGBgc3RyaW5nYGBgIHwgRmFsc2UgfCBUcmFkaW5nIFN5bWJvbCBvZiBDb250cmFjdCB8XG58IHRva2VuIHwgYGBgc3RyaW5nYGBgIHwgRmFsc2UgfCBDb250cmFjdCB0b2tlbiB8XG58IG9wdHQgfCBgYGBzdHJpbmdgYGAgfCBGYWxzZSB8IE9wdGlvbiB0eXBlIHxcbnwgc3RycHJjIHwgYGBgc3RyaW5nYGBgIHwgRmFsc2UgfCBTdHJpa2UgUHJpY2UgfFxufCBwcCB8IGBgYHN0cmluZ2BgYCB8IEZhbHNlIHwgUHJpY2UgUHJlY2lzaW9uIHxcbnwgdGkgfCBgYGBzdHJpbmdgYGAgfCBGYWxzZSB8IFRpY2sgU2l6ZSB8XG58IGxzIHwgYGBgc3RyaW5nYGBgIHwgRmFsc2UgfCBMb3QgU2l6ZSB8XG5cbiMjIyMgPGEgbmFtZT1cIm1kLXN0YXJ0X3dlYnNvY2tldFwiPjwvYT4gc3RhcnRfd2Vic29ja2V0KClcbnN0YXJ0cyB0aGUgd2Vic29ja2V0LCBXZWJTb2NrZXQgZmVlZCBoYXMgMiB0eXBlcyBvZiB0aWNrcyggdD10b3VjaGxpbmUgZD1kZXB0aClhbmQgMiBzdGFnZXMgKGs9YWNrbm93bGVkZ2VtZW50LCBmPWZ1cnRoZXIgY2hhbmdlIGluIHRpY2spLiBcblxufCBQYXJhbSB8IFR5cGUgfCBPcHRpb25hbCB8RGVzY3JpcHRpb24gfFxufCAtLS0gfCAtLS0gfCAtLS0gfCAtLS18XG58IHN1YnNjcmliZV9jYWxsYmFjayB8IGBgYGZ1bmN0aW9uYGBgIHwgRmFsc2UgfCBjYWxsYmFjayBmb3IgbWFya2V0IHVwZGF0ZXMgfFxufCBvcmRlcl91cGRhdGVfY2FsbGJhY2sgfCBgYGBmdW5jdGlvbmBgYHwgRmFsc2UgfCBjYWxsYmFjayBmb3Igb3JkZXIgdXBkYXRlcyB8XG58IHNvY2tldF9vcGVuX2NhbGxiYWNrIHwgYGBgZnVuY3Rpb25gYGAgfCBGYWxzZSB8IGNhbGxiYWNrIHdoZW4gc29ja2V0IGlzIG9wZW4gKHJlY29ubmVjdGlvbiBhbHNvKSB8XG58IHNvY2tldF9jbG9zZV9jYWxsYmFjayB8IGBgYGZ1bmN0aW9uYGBgfCBGYWxzZSB8IGNhbGxiYWNrIHdoZW4gc29ja2V0IGlzIGNsb3NlZCB8XG5cbiMjIyMgPGEgbmFtZT1cIm1kLXN1YnNjcmliZV9vcmRlcnNcIj48L2E+IHN1YnNjcmliZV9vcmRlcnMoKVxuZ2V0IG9yZGVyIGFuZCB0cmFkZSB1cGRhdGUgY2FsbGJhY2tzXG5cblN1YnNjcmlwdGlvbiBBY2tub3dsZWRnZW1lbnQ6XG5cbnwgSnNvbiBGaWVsZHN8IFBvc3NpYmxlIHZhbHVlfCBEZXNjcmlwdGlvbnwgXG58IC0tLSB8IC0tLSB8IC0tLSB8XG58IHQgIHwgIG9rIHwgIOKAmG9r4oCZIHJlcHJlc2VudHMgb3JkZXIgdXBkYXRlIHN1YnNjcmlwdGlvbiBhY2tub3dsZWRnZW1lbnQgfCBcblxuT3JkZXIgVXBkYXRlIHN1YnNjcmlwdGlvbiBVcGRhdGVzIDpcblxuIHwgSnNvbiBGaWVsZHMgfCBQb3NzaWJsZSB2YWx1ZSB8ICBEZXNjcmlwdGlvbiB8IFxuIHwgLS0tIHwgLS0tIHwgLS0tIHxcbiB8IHQgfCBvbSB8IOKAmG9t4oCZIHJlcHJlc2VudHMgdG91Y2hsaW5lIGZlZWQgfCBcbiB8IG5vcmVub3Jkbm8gfCAgIHwgTm9yZW4gT3JkZXIgTnVtYmVyIHwgXG4gfCB1aWQgfCAgIHwgVXNlciBJZCB8IFxuIHwgYWN0aWQgfCAgIHwgQWNjb3VudCBJRCB8IFxuIHwgZXhjaCB8ICAgfCBFeGNoYW5nZSB8IFxuIHwgdHN5bSB8ICAgfCBUcmFkaW5nIHN5bWJvbCB8IFxuIHwgcXR5IHwgICB8IE9yZGVyIHF1YW50aXR5IHwgXG4gfCBwcmMgfCAgIHwgT3JkZXIgUHJpY2UgfCBcbiB8IHByZCB8ICAgfCBQcm9kdWN0IHwgXG4gfCBzdGF0dXMgfCAgIHwgT3JkZXIgc3RhdHVzIChOZXcsIFJlcGxhY2VkLCAgQ29tcGxldGUsIFJlamVjdGVkIGV0YykgfCBcbiB8IHJlcG9ydHR5cGUgfCAgIHwgT3JkZXIgZXZlbnQgZm9yIHdoaWNoIHRoaXMgbWVzc2FnZSBpcyBzZW50IG91dC4gKEZpbGwsIFJlamVjdGVkLCBDYW5jZWxlZCkgfCBcbiB8IHRyYW50eXBlIHwgICB8IE9yZGVyIHRyYW5zYWN0aW9uIHR5cGUsIGJ1eSBvciBzZWxsIHwgXG4gfCBwcmN0eXAgfCAgIHwgT3JkZXIgcHJpY2UgdHlwZSAoTE1ULCBNS1QsIFNMLUxNVCwgU0wtTUtUKSB8IFxuIHwgcmV0IHwgICB8IE9yZGVyIHJldGVudGlvbiB0eXBlIChEQVksIEVPUywgSU9DLC4uLikgfCBcbiB8IGZpbGxzaGFyZXMgfCAgIHwgVG90YWwgRmlsbGVkIHNoYXJlcyBmb3IgdGhpcyBvcmRlciB8IFxuIHwgYXZncHJjIHwgICB8IEF2ZXJhZ2UgZmlsbCBwcmljZSB8IFxuIHwgZmx0bSB8ICAgfCBGaWxsIFRpbWUocHJlc2VudCBvbmx5IHdoZW4gcmVwb3J0dHlwZSBpcyBGaWxsKSB8IFxuIHwgZmxpZCB8ICAgfCBGaWxsIElEIChwcmVzZW50IG9ubHkgd2hlbiByZXBvcnR0eXBlIGlzIEZpbGwpIHwgXG4gfCBmbHF0eSB8ICAgfCBGaWxsIFF0eShwcmVzZW50IG9ubHkgd2hlbiByZXBvcnR0eXBlIGlzIEZpbGwpIHwgXG4gfCBmbHByYyB8ICAgfCBGaWxsIFByaWNlKHByZXNlbnQgb25seSB3aGVuIHJlcG9ydHR5cGUgaXMgRmlsbCkgfCBcbiB8IHJlanJlYXNvbiB8ICAgfCBPcmRlciByZWplY3Rpb24gcmVhc29uLCBpZiByZWplY3RlZCB8IFxuIHwgZXhjaG9yZGlkIHwgICB8IEV4Y2hhbmdlIE9yZGVyIElEIHwgXG4gfCBjYW5jZWxxdHkgfCAgIHwgQ2FuY2VsZWQgcXVhbnRpdHksIGluIGNhc2Ugb2YgY2FuY2VsZWQgb3JkZXIgfCBcbiB8IHJlbWFya3MgfCAgIHwgVXNlciBhZGRlZCB0YWcsIHdoaWxlIHBsYWNpbmcgb3JkZXIgfCBcbiB8IGRzY3F0eSB8ICAgfCBEaXNjbG9zZWQgcXVhbnRpdHkgfCBcbiB8IHRyZ3ByYyB8ICAgfCBUcmlnZ2VyIHByaWNlIGZvciBTTCBvcmRlcnMgfCBcbiB8IHNub251bSB8ICAgfCBUaGlzIHdpbGwgYmUgcHJlc2VudCBmb3IgY2hpbGQgb3JkZXJzIGluIGNhc2Ugb2YgY292ZXIgYW5kIGJyYWNrZXQgb3JkZXJzLCBpZiBwcmVzZW50IG5lZWRzIHRvIGJlIHNlbnQgZHVyaW5nIGV4aXQgfCBcbiB8IHNub29yZHQgfCAgIHwgVGhpcyB3aWxsIGJlIHByZXNlbnQgZm9yIGNoaWxkIG9yZGVycyBpbiBjYXNlIG9mIGNvdmVyIGFuZCBicmFja2V0IG9yZGVycywgaXQgd2lsbCBpbmRpY2F0ZSB3aGV0aGVyIHRoZSBvcmRlciBpcyBwcm9maXQgb3Igc3RvcGxvc3MgfCBcbiB8IGJscHJjIHwgICB8IFRoaXMgd2lsbCBiZSBwcmVzZW50IGZvciBjb3ZlciBhbmQgYnJhY2tldCBwYXJlbnQgb3JkZXIuIFRoaXMgaXMgdGhlIGRpZmZlcmVudGlhbCBzdG9wIGxvc3MgdHJpZ2dlciBwcmljZSB0byBiZSBlbnRlcmVkLiAgfCBcbiB8IGJwcHJjIHwgICB8IFRoaXMgd2lsbCBiZSBwcmVzZW50IGZvciBicmFja2V0IHBhcmVudCBvcmRlci4gVGhpcyBpcyB0aGUgZGlmZmVyZW50aWFsIHByb2ZpdCBwcmljZSB0byBiZSBlbnRlcmVkLiAgfCBcbiB8IHRyYWlscHJjIHwgICB8IFRoaXMgd2lsbCBiZSBwcmVzZW50IGZvciBjb3ZlciBhbmQgYnJhY2tldCBwYXJlbnQgb3JkZXIuIFRoaXMgaXMgcmVxdWlyZWQgaWYgdHJhaWxpbmcgdGlja3MgaXMgdG8gYmUgZW5hYmxlZC4gfCBcbiB8IGV4Y2hfdG0gfCAgIHwgVGhpcyB3aWxsIGhhdmUgdGhlIGV4Y2hhbmdlIHVwZGF0ZSB0aW1lIHwgXG5cblxuIyMjIyA8YSBuYW1lPVwibWQtc3Vic2NyaWJlXCI+PC9hPiBzdWJzY3JpYmUoW2luc3RydW1lbnRzXSlcbnNlbmQgYSBsaXN0IG9mIGluc3RydW1lbnRzIHRvIHdhdGNoXG5cbnQ9J3RrJyBpcyBzZW50IG9uY2Ugb24gc3Vic2NyaXB0aW9uIGZvciBlYWNoIGluc3RydW1lbnQuIHRoaXMgd2lsbCBoYXZlIGFsbCB0aGUgZmllbGRzIHdpdGggdGhlIG1vc3QgcmVjZW50IHZhbHVlXG50aGVyZW9uIHQ9J3RmJyBpcyBzZW50IGZvciBmaWVsZHMgdGhhdCBoYXZlIGNoYW5nZWQuXG5gYGBcbkZvciBleGFtcGxlXG5xdW90ZSBldmVudDogMDMtMTItMjAyMSAxMTo1NDo0NHsndCc6ICd0aycsICdlJzogJ05TRScsICd0ayc6ICcxMTYzMCcsICd0cyc6ICdOVFBDLUVRJywgJ3BwJzogJzInLCAnbHMnOiAnMScsICd0aSc6ICcwLjA1JywgJ2xwJzogJzExOC41NScsICdoJzogJzExOC42NScsICdsJzogJzExOC4xMCcsICdhcCc6ICcxMTguMzknLCAndic6ICcxNjIyMjAnLCAnYnAxJzogJzExOC40NScsICdzcDEnOiAnMTE4LjUwJywgJ2JxMSc6ICcyNicsICdzcTEnOiAnNjMyNSd9XG5xdW90ZSBldmVudDogMDMtMTItMjAyMSAxMTo1NDo0NXsndCc6ICd0ZicsICdlJzogJ05TRScsICd0ayc6ICcxMTYzMCcsICdscCc6ICcxMTguNDUnLCAnYXAnOiAnMTE4LjQwJywgJ3YnOiAnMTY2NjM3JywgJ3NwMSc6ICcxMTguNTUnLCAnYnExJzogJzMxMzUnLCAnc3ExJzogJzMwJ31cbnF1b3RlIGV2ZW50OiAwMy0xMi0yMDIxIDExOjU0OjQ2eyd0JzogJ3RmJywgJ2UnOiAnTlNFJywgJ3RrJzogJzExNjMwJywgJ2xwJzogJzExOC42MCd9XG5gYGBcbmluIHRoZSBleGFtcGxlIGFib3ZlIHdlIHNlZSBmaXJzdCBtZXNzYWdlIHQ9J3RrJyB3aXRoIGFsbCB0aGUgdmFsdWVzLCAybmQgbWVzc2FnZSBoYXMgbGFzdHRyYWRlcHJpY2UgYXZnIHByaWNlIGFuZCBmZXcgb3RoZXIgZmllbGRzIHdpdGggdmFsdWUgY2hhbmdlZC4uIG5vdGUgYnAxIGlzbnQgc2VudCBhcyBpdHMgc3RpbGwgMTE4LjQ1XG5pbiB0aGUgbmV4dCB0aWNrICggM3JkIG1lc3NhZ2UpIG9ubHkgbGFzdCBwcmljZSBpcyBjaGFuZ2VkIHRvIDExOC42XG5cblRoaXMgbWV0aG9kIGNhbiBiZSB1c2VkIHRvIHN1YnNjcmliZSBpbmRpY2VzIGFzIHdlbGwgc3VjaCBhcyBOaWZ0eS01MCBbTlNFfDI2MDAwXSwgQmFua05pZnR5W05TRXwyNjAwOV1cblxufCBQYXJhbSB8IFR5cGUgfCBPcHRpb25hbCB8RGVzY3JpcHRpb24gfFxufCAtLS0gfCAtLS0gfCAtLS0gfCAtLS0tLXxcbnwgaW5zdHJ1bWVudHMgfCBgYGBsaXN0YGBgIHwgRmFsc2UgfCBsaXN0IG9mIGluc3RydW1lbnRzIFtOU0VcXHwyMixDRFNcXHwxXSB8XG5cblN1YnNjcmlwdGlvbiBBY2tub3dsZWRnZW1lbnQ6XG5cbk51bWJlciBvZiBBY2tub3dsZWRnZW1lbnRzIGZvciBhIHNpbmdsZSBzdWJzY3JpcHRpb24gd2lsbCBiZSB0aGUgc2FtZSBhcyB0aGUgbnVtYmVyIG9mIHNjcmlwcyBtZW50aW9uZWQgaW4gdGhlIGtleSAoaykgZmllbGQuXG5cbnwgSnNvbiBGaWVsZHMgfCBQb3NzaWJsZSB2YWx1ZSB8IERlc2NyaXB0aW9ufFxufCAtLS0gfCAtLS0gfCAtLS0gfCBcbnwgdCB8IHRrIHzigJh0a+KAmSByZXByZXNlbnRzIHRvdWNobGluZSBhY2tub3dsZWRnZW1lbnQgfFxufCBlICB8TlNFLCBCU0UsIE5GTyAuLnxFeGNoYW5nZSBuYW1lIHwgXG58IHRrIHwyMnxTY3JpcCBUb2tlbiB8XG58IHBwIHwyIGZvciBOU0UsIEJTRSAmIDQgZm9yIENEUyBVU0RJTlJ8UHJpY2UgcHJlY2lzaW9uICB8XG58IHRzIHwgfCBUcmFkaW5nIFN5bWJvbCB8XG58IHRpIHwgfCBUaWNrIHNpemUgfFxufCBscyB8IHwgTG90IHNpemUgfFxufCBscCB8IHxMVFAgfFxufCBwYyB8IHxQZXJjZW50YWdlIGNoYW5nZSB8XG58IHYgfCB8IHZvbHVtZSB8XG58IG8gfCB8IE9wZW4gcHJpY2UgfFxufCBoIHwgfCBIaWdoIHByaWNlIHxcbnwgbCB8IHwgTG93IHByaWNlIHxcbnwgYyB8IHwgQ2xvc2UgcHJpY2UgfFxufCBhcCB8IHwgQXZlcmFnZSB0cmFkZSBwcmljZSB8XG58IG9pIHwgfCBPcGVuIGludGVyZXN0IHxcbnwgcG9pIHwgfCBQcmV2aW91cyBkYXkgY2xvc2luZyBPcGVuIEludGVyZXN0IHxcbnwgdG9pIHwgfCBUb3RhbCBvcGVuIGludGVyZXN0IGZvciB1bmRlcmx5aW5nIHxcbnwgYnExICB8IHwgQmVzdCBCdXkgUXVhbnRpdHkgMSB8XG58IGJwMSAgfCB8IEJlc3QgQnV5IFByaWNlIDEgfFxufCBzcTEgIHwgfCBCZXN0IFNlbGwgUXVhbnRpdHkgMSB8XG58IHNwMSAgfCB8IEJlc3QgU2VsbCBQcmljZSAxfFxuXG5Ub3VjaExpbmUgc3Vic2NyaXB0aW9uIFVwZGF0ZXMgOlxuQWNjZXB0IGZvciB0LCBlLCBhbmQgdGsgb3RoZXIgZmllbGRzIG1heSAvIG1heSBub3QgYmUgcHJlc2VudC5cblxufCBKc29uIEZpZWxkcyB8IFBvc3NpYmxlIHZhbHVlIHwgRGVzY3JpcHRpb258XG58IC0tLSB8IC0tLSB8IC0tLSB8IFxufCB0IHwgdGYgfOKAmHRm4oCZIHJlcHJlc2VudHMgdG91Y2hsaW5lIGFja25vd2xlZGdlbWVudCB8XG58IGUgIHxOU0UsIEJTRSwgTkZPIC4ufEV4Y2hhbmdlIG5hbWUgfCBcbnwgdGsgfCAyMiB8U2NyaXAgVG9rZW4gfFxufCBscCB8IHxMVFAgfFxufCBwYyB8IHxQZXJjZW50YWdlIGNoYW5nZSB8XG58IHYgfCB8IHZvbHVtZSB8XG58IG8gfCB8IE9wZW4gcHJpY2UgfFxufCBoIHwgfCBIaWdoIHByaWNlIHxcbnwgbCB8IHwgTG93IHByaWNlIHxcbnwgYyB8IHwgQ2xvc2UgcHJpY2UgfFxufCBhcCB8IHwgQXZlcmFnZSB0cmFkZSBwcmljZSB8XG58IG9pIHwgfCBPcGVuIGludGVyZXN0IHxcbnwgcG9pIHwgfCBQcmV2aW91cyBkYXkgY2xvc2luZyBPcGVuIEludGVyZXN0IHxcbnwgdG9pIHwgfCBUb3RhbCBvcGVuIGludGVyZXN0IGZvciB1bmRlcmx5aW5nIHxcbnwgYnExICB8IHwgQmVzdCBCdXkgUXVhbnRpdHkgMSB8XG58IGJwMSAgfCB8IEJlc3QgQnV5IFByaWNlIDEgfFxufCBzcTEgIHwgfCBCZXN0IFNlbGwgUXVhbnRpdHkgMSB8XG58IHNwMSAgfCB8IEJlc3QgU2VsbCBQcmljZSAxfFxuXG4jIyMjIDxhIG5hbWU9XCJtZC11bnN1YnNjcmliZVwiPjwvYT4gdW5zdWJzY3JpYmUoKVxuc2VuZCBhIGxpc3Qgb2YgaW5zdHJ1bWVudHMgdG8gc3RvcCB3YXRjaFxuXG4qKioqXG4jIyA8YSBuYW1lPVwibWQtZXhhbXBsZS1iYXNpY1wiPjwvYT4gRXhhbXBsZSAtIEdldHRpbmcgU3RhcnRlZFxuRmlyc3QgY29uZmlndXJlIHRoZSBlbmRwb2ludHMgaW4gdGhlIGFwaV9oZWxwZXIgY29uc3RydWN0b3IuIFxuVGhlcmVvbiBwcm92aWRlIHlvdXIgY3JlZGVudGlhbHMgYW5kIGxvZ2luIGFzIGZvbGxvd3MuXG5cbmBgYHB5dGhvblxuZnJvbSBhcGlfaGVscGVyIGltcG9ydCBOb3JlbkFwaVB5XG5pbXBvcnQgbG9nZ2luZ1xuXG4jZW5hYmxlIGRidWcgdG8gc2VlIHJlcXVlc3QgYW5kIHJlc3BvbnNlc1xubG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLkRFQlVHKVxuXG4jc3RhcnQgb2Ygb3VyIHByb2dyYW1cbmFwaSA9IE5vcmVuQXBpUHkoKVxuXG4jY3JlZGVudGlhbHNcbnVzZXIgICAgICAgID0gJzwgdXNlciBpZD4nXG51X3B3ZCAgICAgICA9ICc8IHBhc3N3b3JkID4nXG5mYWN0b3IyICAgICA9ICdzZWNvbmQgZmFjdG9yJ1xudmMgICAgICAgICAgPSAndmVuZG9yIGNvZGUnXG5hcHBfa2V5ICAgICA9ICdzZWNyZXQga2V5J1xuaW1laSAgICAgICAgPSAndW5pcSBpZGVudGlmaWVyJ1xuXG5cbnJldCA9IGFwaS5sb2dpbih1c2VyaWQ9dXNlciwgcGFzc3dvcmQ9cHdkLCB0d29GQT1mYWN0b3IyLCB2ZW5kb3JfY29kZT12YywgYXBpX3NlY3JldD1hcHBfa2V5LCBpbWVpPWltZWkpXG5wcmludChyZXQpXG5gYGBcblxuIyMgPGEgbmFtZT1cIm1kLWV4YW1wbGUtbWFya2V0XCI+PC9hPiBFeGFtcGxlIFN5bWJvbC9Db250cmFjdCA6IEV4YW1wbGVfbWFya2V0LnB5XG5UaGlzIEV4YW1wbGUgc2hvd3MgQVBJIHVzYWdlIGZvciBmaW5kaW5nIHNjcmlwcyBhbmQgaXRzIHByb3BlcnRpZXNcblxuIyMjIFNlYXJjaCBTY3JpcHNcblRoZSBjYWxsIGNhbiBiZSBtYWRlIHRvIGdldCB0aGUgZXhjaGFuZ2UgcHJvdmlkZWQgdG9rZW4gZm9yIGEgc2NyaXAgb3IgYWx0ZXJuYXRlbHkgY2FuIHNlYXJjaCBmb3IgYSBwYXJ0aWFsIHN0cmluZyB0byBnZXQgYSBsaXN0IG9mIG1hdGNoaW5nIHNjcmlwc1xuVHJhZGluZyBTeW1ib2w6XG5cblN5bWJvbE5hbWUgKyBFeHBEYXRlICsgJ0YnIGZvciBhbGwgZGF0YSBoYXZpbmcgSW5zdHJ1bWVudE5hbWUgc3RhcnRpbmcgd2l0aCBGVVRcblxuU3ltYm9sTmFtZSArIEV4cERhdGUgKyAnUCcgKyBTdHJpa2VQcmljZSBmb3IgYWxsIGRhdGEgaGF2aW5nIEluc3RydW1lbnROYW1lIHN0YXJ0aW5nIHdpdGggT1BUIGFuZCB3aXRoIE9wdGlvblR5cGUgUEVcblxuU3ltYm9sTmFtZSArIEV4cERhdGUgKyAnQycgKyBTdHJpa2VQcmljZSBmb3IgYWxsIGRhdGEgaGF2aW5nIEluc3RydW1lbnROYW1lIHN0YXJ0aW5nIHdpdGggT1BUIGFuZCB3aXRoIE9wdGlvblR5cGUgQ1xuXG5Gb3IgTUNYLCBGIHRvIGJlIGlnbm9yZWQgZm9yIEZVVCBpbnN0cnVtZW50c1xuXG5gYGBcbmFwaS5zZWFyY2hzY3JpcChleGNoYW5nZT0nTlNFJywgc2VhcmNodGV4dD0nUkVMJylcbmBgYFxuVGhpcyB3aWxsIHJlcGx5IGFzIGZvbGxvd2luZ1xuYGBgXG57XG4gICAgXCJzdGF0XCI6IFwiT2tcIixcbiAgICBcInZhbHVlc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDY5XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUwxMDBOQVYtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIyNDIyNVwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQVhPLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiNDMyN1wiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQVhPRk9PVC1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDY4XCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxCQU5LTkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMjg4MlwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMQ0FQSVRBTC1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDcwXCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxDT05TTkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzFcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTERJVk5BVi1FUVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhjaFwiOiBcIk5TRVwiLFxuICAgICAgICAgICAgXCJ0b2tlblwiOiBcIjE4MDcyXCIsXG4gICAgICAgICAgICBcInRzeW1cIjogXCJSRUxHT0xETkFWLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMjg4NVwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMSUFOQ0UtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCIxNTA2OFwiLFxuICAgICAgICAgICAgXCJ0c3ltXCI6IFwiUkVMSUdBUkUtRVFcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcImV4Y2hcIjogXCJOU0VcIixcbiAgICAgICAgICAgIFwidG9rZW5cIjogXCI1NTNcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTElORlJBLUVRXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJleGNoXCI6IFwiTlNFXCIsXG4gICAgICAgICAgICBcInRva2VuXCI6IFwiMTgwNzRcIixcbiAgICAgICAgICAgIFwidHN5bVwiOiBcIlJFTE5WMjBOQVYtRVFcIlxuICAgICAgICB9XG4gICAgXVxufVxuYGBgXG4jIyMgU2VjdXJpdHkgSW5mb1xuVGhpcyBjYWxsIGlzIGRvbmUgdG8gZ2V0IHRoZSBwcm9wZXJ0aWVzIG9mIHRoZSBzY3JpcCBzdWNoIGFzIGZyZWV6ZSBxdHkgYW5kIG1hcmdpbnNcbmBgYFxuYXBpLmdldF9zZWN1cml0eV9pbmZvKGV4Y2hhbmdlPSdOU0UnLCB0b2tlbj0nMjInKVxuYGBgXG5UaGUgcmVzcG9uc2UgZm9yIHRoZSBzYW1lIHdvdWxkIGJlIFxuYGBgXG57XG4gICBcInJlcXVlc3RfdGltZVwiOiBcIjE3OjQzOjM4IDMxLTEwLTIwMjBcIixcbiAgIFwic3RhdFwiOiBcIk9rXCIsXG4gICBcImV4Y2hcIjogXCJOU0VcIixcbiAgIFwidHN5bVwiOiBcIkFDQy1FUVwiLFxuICAgXCJjbmFtZVwiOiBcIkFDQyBMSU1JVEVEXCIsXG4gICBcInN5bW5hbWVcIjogXCJBQ0NcIixcbiAgIFwic2VnXCI6IFwiRVFUXCIsXG4gICBcImluc3RuYW1lXCI6IFwiRVFcIixcbiAgIFwiaXNpblwiOiBcIklORTAxMkEwMTAyNVwiLFxuICAgXCJwcFwiOiBcIjJcIixcbiAgIFwibHNcIjogXCIxXCIsXG4gICBcInRpXCI6IFwiMC4wNVwiLFxuICAgXCJtdWx0XCI6IFwiMVwiLFxuICAgXCJwcmNmdHJfZFwiOiBcIigxIC8gMSApICogKDEgLyAxKVwiLFxuICAgXCJ0cmR1bnRcIjogXCJBQ0MuQk9cIixcbiAgIFwiZGVsdW50XCI6IFwiQUNDXCIsXG4gICBcInRva2VuXCI6IFwiMjJcIixcbiAgIFwidmFybXJnXCI6IFwiNDAuMDBcIlxufVxuXG5gYGBcbiMjIyBTdWJzY3JpYmUgdG8gYSBsaXZlIGZlZWRcblN1YnNjcmliZSB0byBhIHNpbmdsZSB0b2tlbiBhcyBmb2xsb3dzXG5cbmBgYFxuYXBpLnN1YnNjcmliZSgnTlNFfDEzJylcbmBgYFxuXG5TdWJzY3JpYmUgdG8gYSBsaXN0IG9mIHRva2VucyBhcyBmb2xsb3dzXG5gYGBcbmFwaS5zdWJzY3JpYmUoWydOU0V8MjInLCAnQlNFfDUyMjAzMiddKVxuYGBgXG5cbkZpcnN0IHdlIG5lZWQgdG8gY29ubmVjdCB0byB0aGUgV2ViU29ja2V0IGFuZCB0aGVuIHN1YnNjcmliZSBhcyBmb2xsb3dzXG5gYGBcbmZlZWRfb3BlbmVkID0gRmFsc2VcblxuZGVmIGV2ZW50X2hhbmRsZXJfZmVlZF91cGRhdGUodGlja19kYXRhKTpcbiAgICBwcmludChmXCJmZWVkIHVwZGF0ZSB7dGlja19kYXRhfVwiKVxuXG5kZWYgb3Blbl9jYWxsYmFjaygpOlxuICAgIGdsb2JhbCBmZWVkX29wZW5lZFxuICAgIGZlZWRfb3BlbmVkID0gVHJ1ZVxuXG5cbmFwaS5zdGFydF93ZWJzb2NrZXQoIG9yZGVyX3VwZGF0ZV9jYWxsYmFjaz1ldmVudF9oYW5kbGVyX29yZGVyX3VwZGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZV9jYWxsYmFjaz1ldmVudF9oYW5kbGVyX2ZlZWRfdXBkYXRlLCBcbiAgICAgICAgICAgICAgICAgICAgIHNvY2tldF9vcGVuX2NhbGxiYWNrPW9wZW5fY2FsbGJhY2spXG5cbndoaWxlKGZlZWRfb3BlbmVkPT1GYWxzZSk6XG4gICAgcGFzc1xuXG4jIHN1YnNjcmliZSB0byBhIHNpbmdsZSB0b2tlbiBcbmFwaS5zdWJzY3JpYmUoJ05TRXwxMycpXG5cbiNzdWJzY3JpYmUgdG8gbXVsdGlwbGUgdG9rZW5zXG5hcGkuc3Vic2NyaWJlKFsnTlNFfDIyJywgJ0JTRXw1MjIwMzInXSlcbmBgYFxuIyMgPGEgbmFtZT1cIm1kLWV4YW1wbGUtb3JkZXJzXCI+PC9hPiBFeGFtcGxlIC0gT3JkZXJzIGFuZCBUcmFkZXMgOiBleGFtcGxlX29yZGVycy5weVxuIyMjIFBsYWNlIE9yZGVyXG4gICAgUGxhY2UgYSBMaW1pdCBvcmRlciBhcyBmb2xsb3dzXG5gYGBcbiAgICBhcGkucGxhY2Vfb3JkZXIoYnV5X29yX3NlbGw9J0InLCBwcm9kdWN0X3R5cGU9J0MnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhjaGFuZ2U9J05TRScsIHRyYWRpbmdzeW1ib2w9J0lORlktRVEnLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5PTEsIGRpc2Nsb3NlcXR5PTAscHJpY2VfdHlwZT0nTE1UJywgcHJpY2U9MTUwMCwgdHJpZ2dlcl9wcmljZT1Ob25lLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ZW50aW9uPSdEQVknLCByZW1hcmtzPSdteV9vcmRlcl8wMDEnKVxuYGBgXG4gICAgUGxhY2UgYSBNYXJrZXQgT3JkZXIgYXMgZm9sbG93c1xuYGBgXG4gICAgYXBpLnBsYWNlX29yZGVyKGJ1eV9vcl9zZWxsPSdCJywgcHJvZHVjdF90eXBlPSdDJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlPSdOU0UnLCB0cmFkaW5nc3ltYm9sPSdJTkZZLUVRJywgXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eT0xLCBkaXNjbG9zZXF0eT0wLHByaWNlX3R5cGU9J01LVCcsIHByaWNlPTAsIHRyaWdnZXJfcHJpY2U9Tm9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldGVudGlvbj0nREFZJywgcmVtYXJrcz0nbXlfb3JkZXJfMDAxJylcbmBgYFxuICAgIFBsYWNlIGEgU3RvcExvc3MgT3JkZXIgYXMgZm9sbG93c1xuYGBgXG4gICAgYXBpLnBsYWNlX29yZGVyKGJ1eV9vcl9zZWxsPSdCJywgcHJvZHVjdF90eXBlPSdDJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlPSdOU0UnLCB0cmFkaW5nc3ltYm9sPSdJTkZZLUVRJywgXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eT0xLCBkaXNjbG9zZXF0eT0wLHByaWNlX3R5cGU9J1NMLUxNVCcsIHByaWNlPTE1MDAsIHRyaWdnZXJfcHJpY2U9MTQ1MCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldGVudGlvbj0nREFZJywgcmVtYXJrcz0nbXlfb3JkZXJfMDAxJylcbmBgYFxuICAgIFBsYWNlIGEgQ292ZXIgT3JkZXIgYXMgZm9sbG93c1xuYGBgXG4gICAgYXBpLnBsYWNlX29yZGVyKGJ1eV9vcl9zZWxsPSdCJywgcHJvZHVjdF90eXBlPSdIJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2hhbmdlPSdOU0UnLCB0cmFkaW5nc3ltYm9sPSdJTkZZLUVRJywgXG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFudGl0eT0xLCBkaXNjbG9zZXF0eT0wLHByaWNlX3R5cGU9J0xNVCcsIHByaWNlPTE1MDAsIHRyaWdnZXJfcHJpY2U9Tm9uZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldGVudGlvbj0nREFZJywgcmVtYXJrcz0nbXlfb3JkZXJfMDAxJywgYm9va2xvc3NfcHJpY2UgPSAxNDkwKVxuYGBgXG4gICAgUGxhY2UgYSBCcmFja2V0IE9yZGVyIGFzIGZvbGxvd3NcbmBgYFxuICAgIGFwaS5wbGFjZV9vcmRlcihidXlfb3Jfc2VsbD0nQicsIHByb2R1Y3RfdHlwZT0nQicsXG4gICAgICAgICAgICAgICAgICAgICAgICBleGNoYW5nZT0nTlNFJywgdHJhZGluZ3N5bWJvbD0nSU5GWS1FUScsIFxuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpdHk9MSwgZGlzY2xvc2VxdHk9MCxwcmljZV90eXBlPSdMTVQnLCBwcmljZT0xNTAwLCB0cmlnZ2VyX3ByaWNlPU5vbmUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXRlbnRpb249J0RBWScsIHJlbWFya3M9J215X29yZGVyXzAwMScsIGJvb2tsb3NzX3ByaWNlID0gMTQ5MCwgYm9va3Byb2ZpdF9wcmljZSA9IDE1MTApXG5gYGBcbiMjIyBNb2RpZnkgT3JkZXJcbiAgICBNb2RpZnkgYSBOZXcgT3JkZXIgYnkgcHJvdmlkaW5nIHRoZSBPcmRlck51bWJlclxuYGBgXG4gICAgYXBpLm1vZGlmeV9vcmRlcihleGNoYW5nZT0nTlNFJywgdHJhZGluZ3N5bWJvbD0nSU5GWS1FUScsIG9yZGVybm89b3JkZXJubyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3cXVhbnRpdHk9MiwgbmV3cHJpY2VfdHlwZT0nTE1UJywgbmV3cHJpY2U9MTUwNSlcbmBgYFxuIyMjIENhbmNlbCBPcmRlclxuICAgIENhbmNlbCBhIE5ldyBPcmRlciBieSBwcm92aWRpbmcgdGhlIE9yZGVyIE51bWJlclxuYGBgXG4gICAgYXBpLmNhbmNlbF9vcmRlcihvcmRlcm5vPW9yZGVybm8pXG5gYGBcbiMjIyBTdWJzY3JpYmUgdG8gT3JkZXIgVXBkYXRlc1xuXG5Db25uZWN0aW5nIHRvIHRoZSBXZWJzb2NrZXQgd2lsbCBhdXRvbWF0aWNhbGx5IHN1YnNjcmliZSBhbmQgcHJvdmlkZSB0aGUgb3JkZXIgdXBkYXRlcyBpbiB0aGUgY2FsbCBiYWNrIGFzIGZvbGxvd3Ncbk5vdGU6IEZlZWQgYW5kIE9yZGVyIHVwZGF0ZXMgYXJlIHJlY2VpdmVkIGZyb20gdGhlIHNhbWUgd2Vic29ja2V0IGFuZCBuZWVkcyB0byBiZSBjb25uZWN0ZWQgb25jZSBvbmx5LlxuXG5gYGBcbmZlZWRfb3BlbmVkID0gRmFsc2VcblxuZGVmIGV2ZW50X2hhbmRsZXJfb3JkZXJfdXBkYXRlKG9yZGVyKTpcbiAgICBwcmludChmXCJvcmRlciBmZWVkIHtvcmRlcn1cIilcblxuZGVmIG9wZW5fY2FsbGJhY2soKTpcbiAgICBnbG9iYWwgZmVlZF9vcGVuZWRcbiAgICBmZWVkX29wZW5lZCA9IFRydWVcblxuXG5hcGkuc3RhcnRfd2Vic29ja2V0KCBvcmRlcl91cGRhdGVfY2FsbGJhY2s9ZXZlbnRfaGFuZGxlcl9vcmRlcl91cGRhdGUsXG4gICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVfY2FsbGJhY2s9ZXZlbnRfaGFuZGxlcl9mZWVkX3VwZGF0ZSwgXG4gICAgICAgICAgICAgICAgICAgICBzb2NrZXRfb3Blbl9jYWxsYmFjaz1vcGVuX2NhbGxiYWNrKVxuXG53aGlsZShmZWVkX29wZW5lZD09RmFsc2UpOlxuICAgIHBhc3NcblxuXG5gYGBcblxuKioqKlxuXG4jIyBBdXRob3JcblxuS3VtYXIgQW5hbmRcblxuKioqKlxuXG4jIyBMaWNlbnNlXG5cbkNvcHlyaWdodCAoQykgMjAyMSBLYW1iYWxhIFNvbHV0aW9ucyBQdnQgTHRkLSBBbGwgUmlnaHRzIFJlc2VydmVkXG5Db3B5aW5nIG9mIHRoaXMgZmlsZSwgdmlhIGFueSBtZWRpdW0gaXMgc3RyaWN0bHkgcHJvaGliaXRlZC5cblByb3ByaWV0YXJ5IGFuZCBjb25maWRlbnRpYWwuXG5BbGwgZmlsZSB0cmFuc2ZlcnMgYXJlIGxvZ2dlZC5cblxuKioqKlxuXG5cbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiIiw=
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogIk5vcmVuUmVzdEFwaSIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvTm9yZW5SZXN0QXBpLyIs
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvTm9yZW5SZXN0QXBpLyIs
ICAgICJwcm9qZWN0X3VybHMiOiBudWxsLA==
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvTm9yZW5SZXN0QXBpLzAuMC4yMy8iLA==
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgInJlcXVlc3RzICg9PTIuMjguMikiLA==
ICAgICAgIndlYnNvY2tldC1jbGllbnQgKD09MS41LjEpIiw=
ICAgICAgInBhbmRhcyAoPT0xLjUuMykiLA==
ICAgICAgIlB5WUFNTCAoPT02LjApIg==
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIkEgcGFja2FnZSBmb3IgTm9yZW5PTVMiLA==
ICAgICJ2ZXJzaW9uIjogIjAuMC4yMyIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNjk4OTkxNCw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjAuMjMiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkYzU4OWQzOTE0NzVhNTlhNTc3Y2Q1YmNjOGUwZTJkNTY0YTg4ZDFlNjExOWZhNGY5NWU0ZjIyMjFhNTc2OWUzIiw=
ICAgICAgICAgICJtZDUiOiAiZDhjZjI4YzE2MzkyOWU0ZDRlZTQ3OThkOThkOWNkOTAiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOWQzMzVmY2JkMDVkNWY2NTVlOGIzMjk4YzlkNzBkNzU1OTQyMzIxMjhlYzZlYzU1MWQ1NzZkMDVkMDEwNzA4YiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiTm9yZW5SZXN0QXBpLTAuMC4yMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJkOGNmMjhjMTYzOTI5ZTRkNGVlNDc5OGQ5OGQ5Y2Q5MCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDIyMzAyLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMi0yM1QwNzo0NjozNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMi0yM1QwNzo0NjozNS4yNjYwNzNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kYy81OC85ZDM5MTQ3NWE1OWE1NzdjZDViY2M4ZTBlMmQ1NjRhODhkMWU2MTE5ZmE0Zjk1ZTRmMjIyMWE1NzY5ZTMvTm9yZW5SZXN0QXBpLTAuMC4yMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkOWFmYzI4NmQzMjM2M2FkYzM4NWE1ZTM5YjkwMWNjMTJjNzY3OTdhMjhhOWE0MWM3NWE1NzM5MWUwNzI4YWVjIiw=
ICAgICAgICAgICJtZDUiOiAiZGJjYjYxZTczMTg3MTg3Y2JkZWQwZTY0ZDY3MmVlMjkiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYTdiZWEwNGEyZjJmNjc3ZmQwZjUyYjE0OTJkYTAwM2NjNDA1NWJkOGE5NzJmMzM4ZDMyMzZkNzJmOWQwMTY1MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiTm9yZW5SZXN0QXBpLTAuMC4yMy50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJkYmNiNjFlNzMxODcxODdjYmRlZDBlNjRkNjcyZWUyOSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDUxMzc5LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMi0yM1QwNzo0NjozOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMi0yM1QwNzo0NjozOC44MzM0ODdaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kOS9hZi9jMjg2ZDMyMzYzYWRjMzg1YTVlMzliOTAxY2MxMmM3Njc5N2EyOGE5YTQxYzc1YTU3MzkxZTA3MjhhZWMvTm9yZW5SZXN0QXBpLTAuMC4yMy50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiZGM1ODlkMzkxNDc1YTU5YTU3N2NkNWJjYzhlMGUyZDU2NGE4OGQxZTYxMTlmYTRmOTVlNGYyMjIxYTU3NjllMyIs
ICAgICAgICAibWQ1IjogImQ4Y2YyOGMxNjM5MjllNGQ0ZWU0Nzk4ZDk4ZDljZDkwIiw=
ICAgICAgICAic2hhMjU2IjogIjlkMzM1ZmNiZDA1ZDVmNjU1ZThiMzI5OGM5ZDcwZDc1NTk0MjMyMTI4ZWM2ZWM1NTFkNTc2ZDA1ZDAxMDcwOGIi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogIk5vcmVuUmVzdEFwaS0wLjAuMjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiZDhjZjI4YzE2MzkyOWU0ZDRlZTQ3OThkOThkOWNkOTAiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAyMjMwMiw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDItMjNUMDc6NDY6MzUiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDItMjNUMDc6NDY6MzUuMjY2MDczWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvZGMvNTgvOWQzOTE0NzVhNTlhNTc3Y2Q1YmNjOGUwZTJkNTY0YTg4ZDFlNjExOWZhNGY5NWU0ZjIyMjFhNTc2OWUzL05vcmVuUmVzdEFwaS0wLjAuMjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiZDlhZmMyODZkMzIzNjNhZGMzODVhNWUzOWI5MDFjYzEyYzc2Nzk3YTI4YTlhNDFjNzVhNTczOTFlMDcyOGFlYyIs
ICAgICAgICAibWQ1IjogImRiY2I2MWU3MzE4NzE4N2NiZGVkMGU2NGQ2NzJlZTI5Iiw=
ICAgICAgICAic2hhMjU2IjogImE3YmVhMDRhMmYyZjY3N2ZkMGY1MmIxNDkyZGEwMDNjYzQwNTViZDhhOTcyZjMzOGQzMjM2ZDcyZjlkMDE2NTIi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogIk5vcmVuUmVzdEFwaS0wLjAuMjMudGFyLmd6Iiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiZGJjYjYxZTczMTg3MTg3Y2JkZWQwZTY0ZDY3MmVlMjkiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA1MTM3OSw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDItMjNUMDc6NDY6MzgiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDItMjNUMDc6NDY6MzguODMzNDg3WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvZDkvYWYvYzI4NmQzMjM2M2FkYzM4NWE1ZTM5YjkwMWNjMTJjNzY3OTdhMjhhOWE0MWM3NWE1NzM5MWUwNzI4YWVjL05vcmVuUmVzdEFwaS0wLjAuMjMudGFyLmd6Iiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
