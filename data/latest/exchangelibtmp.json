ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiRXJpayBDZWRlcnN0cmFuZCIs
ICAgICJhdXRob3JfZW1haWwiOiAiZXJpa0BjZWRlcnN0cmFuZC5kayIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEJTRCBMaWNlbnNlIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAyIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlRvcGljIDo6IENvbW11bmljYXRpb25zIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICJFeGNoYW5nZSBXZWIgU2VydmljZXMgY2xpZW50IGxpYnJhcnlcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG5UaGlzIG1vZHVsZSBwcm92aWRlcyBhbiB3ZWxsLXBlcmZvcm1pbmcsIHdlbGwtYmVoYXZpbmcsXG5wbGF0Zm9ybS1pbmRlcGVuZGVudCBhbmQgc2ltcGxlIGludGVyZmFjZSBmb3IgY29tbXVuaWNhdGluZyB3aXRoIGFcbk1pY3Jvc29mdCBFeGNoYW5nZSAyMDA3LTIwMTYgU2VydmVyIG9yIE9mZmljZTM2NSB1c2luZyBFeGNoYW5nZSBXZWJcblNlcnZpY2VzIChFV1MpLiBJdCBjdXJyZW50bHkgaW1wbGVtZW50cyBhdXRvZGlzY292ZXIsIGFuZCBmdW5jdGlvbnMgZm9yXG5zZWFyY2hpbmcsIGNyZWF0aW5nLCB1cGRhdGluZywgZGVsZXRpbmcsIGV4cG9ydGluZyBhbmQgdXBsb2FkaW5nXG5jYWxlbmRhciwgbWFpbGJveCwgdGFzaywgY29udGFjdCBhbmQgZGlzdHJpYnV0aW9uIGxpc3QgaXRlbXMuXG5cblshW2ltYWdlXShodHRwczovL2ltZy5zaGllbGRzLmlvL3B5cGkvdi9leGNoYW5nZWxpYi5zdmcpXShodHRwczovL3B5cGkub3JnL3Byb2plY3QvZXhjaGFuZ2VsaWIvKVxuWyFbaW1hZ2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vcHlwaS9weXZlcnNpb25zL2V4Y2hhbmdlbGliLnN2ZyldKGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9leGNoYW5nZWxpYi8pXG5bIVtpbWFnZV0oaHR0cHM6Ly9hcGkuY29kYWN5LmNvbS9wcm9qZWN0L2JhZGdlL0dyYWRlLzVmODA1YWQ5MDEwNTRhODg5ZjRiOTlhODJkNmMxY2I3KV0oaHR0cHM6Ly93d3cuY29kYWN5LmNvbS9hcHAvZWNlZGVyc3RyYW5kL2V4Y2hhbmdlbGliP3V0bV9zb3VyY2U9Z2l0aHViLmNvbSZhbXA7dXRtX21lZGl1bT1yZWZlcnJhbCZhbXA7dXRtX2NvbnRlbnQ9ZWNlZGVyc3RyYW5kL2V4Y2hhbmdlbGliJmFtcDt1dG1fY2FtcGFpZ249QmFkZ2VfR3JhZGUpXG5bIVtpbWFnZV0oaHR0cHM6Ly9zZWN1cmUudHJhdmlzLWNpLm9yZy9lY2VkZXJzdHJhbmQvZXhjaGFuZ2VsaWIucG5nKV0oaHR0cDovL3RyYXZpcy1jaS5vcmcvZWNlZGVyc3RyYW5kL2V4Y2hhbmdlbGliKVxuWyFbaW1hZ2VdKGh0dHBzOi8vY292ZXJhbGxzLmlvL3JlcG9zL2dpdGh1Yi9lY2VkZXJzdHJhbmQvZXhjaGFuZ2VsaWIvYmFkZ2Uuc3ZnP2JyYW5jaD1tYXN0ZXIpXShodHRwczovL2NvdmVyYWxscy5pby9naXRodWIvZWNlZGVyc3RyYW5kL2V4Y2hhbmdlbGliP2JyYW5jaD1tYXN0ZXIpXG5cblshW2ltYWdlXShodHRwczovL2xpYmVyYXBheS5jb20vYXNzZXRzL3dpZGdldHMvZG9uYXRlLnN2ZyldKGh0dHBzOi8vZW4ubGliZXJhcGF5LmNvbS9lY2VkZXJzdHJhbmQpXG5cbiMjIFRlYXNlclxuXG5IZXJlJ3MgYSBzaG9ydCBleGFtcGxlIG9mIGhvdyBgZXhjaGFuZ2VsaWJgIHdvcmtzLiBMZXQncyBwcmludCB0aGUgZmlyc3RcbjEwMCBpbmJveCBtZXNzYWdlcyBpbiByZXZlcnNlIG9yZGVyOlxuXG5gYGBweXRob25cbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IENyZWRlbnRpYWxzLCBBY2NvdW50XG5cbmNyZWRlbnRpYWxzID0gQ3JlZGVudGlhbHMoJ2pvaG5AZXhhbXBsZS5jb20nLCAndG9wc2VjcmV0JylcbmFjY291bnQgPSBBY2NvdW50KCdqb2huQGV4YW1wbGUuY29tJywgY3JlZGVudGlhbHM9Y3JlZGVudGlhbHMsIGF1dG9kaXNjb3Zlcj1UcnVlKVxuXG5mb3IgaXRlbSBpbiBhY2NvdW50LmluYm94LmFsbCgpLm9yZGVyX2J5KCctZGF0ZXRpbWVfcmVjZWl2ZWQnKVs6MTAwXTpcbiAgICBwcmludChpdGVtLnN1YmplY3QsIGl0ZW0uc2VuZGVyLCBpdGVtLmRhdGV0aW1lX3JlY2VpdmVkKVxuYGBgXG5cblxuIyMgSW5zdGFsbGF0aW9uXG5Zb3UgY2FuIGluc3RhbGwgdGhpcyBwYWNrYWdlIGZyb20gUHlQSTpcblxuYGBgYmFzaFxucGlwIGluc3RhbGwgZXhjaGFuZ2VsaWJcbmBgYFxuXG5UaGUgZGVmYXVsdCBpbnN0YWxsYXRpb24gZG9lcyBub3Qgc3VwcG9ydCBLZXJiZXJvcy4gRm9yIGFkZGl0aW9uYWwgS2VyYmVyb3Mgc3VwcG9ydCwgaW5zdGFsbFxud2l0aCB0aGUgZXh0cmEgYGtlcmJlcm9zYCBkZXBlbmRlbmNpZXM6XG5cbmBgYGJhc2hcbnBpcCBpbnN0YWxsIGV4Y2hhbmdlbGliW2tlcmJlcm9zXVxuYGBgXG5cblRvIGluc3RhbGwgdGhlIHZlcnkgbGF0ZXN0IGNvZGUsIGluc3RhbGwgZGlyZWN0bHkgZnJvbSBHaXRIdWIgaW5zdGVhZDpcblxuYGBgYmFzaFxucGlwIGluc3RhbGwgZ2l0K2h0dHBzOi8vZ2l0aHViLmNvbS9lY2VkZXJzdHJhbmQvZXhjaGFuZ2VsaWIuZ2l0XG5gYGBcblxuYGV4Y2hhbmdlbGliYCB1c2VzIHRoZSBgbHhtbGAgcGFja2FnZSwgYW5kIGBweWtlcmJlcm9zYCB0byBzdXBwb3J0IEtlcmJlcm9zIGF1dGhlbnRpY2F0aW9uLlxuVG8gYmUgYWJsZSB0byBpbnN0YWxsIHRoZXNlLCB5b3UgbWF5IG5lZWQgdG8gaW5zdGFsbCBzb21lIGFkZGl0aW9uYWwgb3BlcmF0aW5nIHN5c3RlbSBwYWNrYWdlcy5cblxuT24gVWJ1bnR1OlxuYGBgYmFzaFxuYXB0LWdldCBpbnN0YWxsIGxpYnhtbDItZGV2IGxpYnhzbHQxLWRldlxuXG4jIEZvciBLZXJiZXJvcyBzdXBwb3J0LCBhbHNvIGluc3RhbGwgdGhlc2U6XG5hcHQtZ2V0IGluc3RhbGwgbGlia3JiNS1kZXYgYnVpbGQtZXNzZW50aWFsIGxpYnNzbC1kZXYgbGliZmZpLWRldiBweXRob24tZGV2XG5gYGBcblxuT24gQ2VudE9TOlxuYGBgYmFzaFxuIyBGb3IgS2VyYmVyb3Mgc3VwcG9ydCwgaW5zdGFsbCB0aGVzZTpcbnl1bSBpbnN0YWxsIGdjYyBweXRob24tZGV2ZWwga3JiNS1kZXZlbCBrcmI1LXdvcmtzdGF0aW9uIHB5dGhvbi1kZXZlbFxuYGBgXG5cbk9uIEZyZWVCU0QsIGBwaXBgIG5lZWRzIGEgbGl0dGxlIGhlbHA6XG5gYGBiYXNoXG5wa2cgaW5zdGFsbCBsaWJ4bWwyIGxpYnhzbHRcbkNGTEFHUz0tSS91c3IvbG9jYWwvaW5jbHVkZSBwaXAgaW5zdGFsbCBseG1sXG5cbiMgRm9yIEtlcmJlcm9zIHN1cHBvcnQsIGFsc28gaW5zdGFsbCB0aGVzZTpcbnBrZyBpbnN0YWxsIGtyYjVcbkNGTEFHUz0tSS91c3IvbG9jYWwvaW5jbHVkZSBwaXAgaW5zdGFsbCBrZXJiZXJvcyBweWtlcmJlcm9zXG5gYGBcblxuRm9yIG90aGVyIG9wZXJhdGluZyBzeXN0ZW1zLCBwbGVhc2UgY29uc3VsdCB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgdGhlIFB5dGhvbiBwYWNrYWdlIHRoYXRcbmZhaWxzIHRvIGluc3RhbGwuXG5cblxuIyMgU2V0dXAgYW5kIGNvbm5lY3RpbmdcblxuYGBgcHl0aG9uXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBERUxFR0FURSwgSU1QRVJTT05BVElPTiwgQWNjb3VudCwgQ3JlZGVudGlhbHMsIFNlcnZpY2VBY2NvdW50LCBcXFxuICAgIENvbmZpZ3VyYXRpb24sIE5UTE0sIEdTU0FQSSwgQnVpbGQsIFZlcnNpb25cblxuIyBTcGVjaWZ5IHlvdXIgY3JlZGVudGlhbHMuIFVzZXJuYW1lIGlzIHVzdWFsbHkgaW4gV0lORE9NQUlOXFx1c2VybmFtZSBmb3JtYXQsIHdoZXJlIFdJTkRPTUFJTiBpc1xuIyB0aGUgbmFtZSBvZiB0aGUgV2luZG93cyBEb21haW4geW91ciB1c2VybmFtZSBpcyBjb25uZWN0ZWQgdG8sIGJ1dCBzb21lIHNlcnZlcnMgYWxzb1xuIyBhY2NlcHQgdXNlcm5hbWVzIGluIFByaW1hcnlTTVRQQWRkcmVzcyAoJ215dXNlcm5hbWVAZXhhbXBsZS5jb20nKSBmb3JtYXQgKE9mZmljZTM2NSByZXF1aXJlcyBpdCkuXG4jIFVQTiBmb3JtYXQgaXMgYWxzbyBzdXBwb3J0ZWQsIGlmIHlvdXIgc2VydmVyIGV4cGVjdHMgdGhhdC5cbmNyZWRlbnRpYWxzID0gQ3JlZGVudGlhbHModXNlcm5hbWU9J01ZV0lORE9NQUlOXFxcXG15dXNlcm5hbWUnLCBwYXNzd29yZD0ndG9wc2VjcmV0JylcblxuIyBJZiB5b3UncmUgcnVubmluZyBsb25nLXJ1bm5pbmcgam9icywgeW91IG1heSB3YW50IHRvIGVuYWJsZSBmYXVsdC10b2xlcmFuY2UuIEZhdWx0LXRvbGVyYW5jZVxuIyBtZWFucyB0aGF0IHJlcXVlc3RzIHRvIHRoZSBzZXJ2ZXIgZG8gYW4gZXhwb25lbnRpYWwgYmFja29mZiBhbmQgc2xlZXAgZm9yIHVwIHRvIGEgY2VydGFpblxuIyB0aHJlc2hvbGQgYmVmb3JlIGdpdmluZyB1cCwgaWYgdGhlIHNlcnZlciBpcyB1bmF2YWlsYWJsZSBvciByZXNwb25kaW5nIHdpdGggZXJyb3IgbWVzc2FnZXMuXG4jIFRoaXMgcHJldmVudHMgYXV0b21hdGVkIHNjcmlwdHMgZnJvbSBvdmVyd2hlbG1pbmcgYSBmYWlsaW5nIG9yIG92ZXJsb2FkZWQgc2VydmVyLCBhbmQgaGlkZXNcbiMgaW50ZXJtaXR0ZW50IHNlcnZpY2Ugb3V0YWdlcyB0aGF0IG9mdGVuIGhhcHBlbiBpbiBsYXJnZSBFeGNoYW5nZSBpbnN0YWxsYXRpb25zLlxuXG4jIElmIHlvdSB3YW50IHRvIGVuYWJsZSB0aGUgZmF1bHQgdG9sZXJhbmNlLCBjcmVhdGUgY3JlZGVudGlhbHMgYXMgYSBzZXJ2aWNlIGFjY291bnQgaW5zdGVhZDpcbmNyZWRlbnRpYWxzID0gU2VydmljZUFjY291bnQodXNlcm5hbWU9J0ZPT1xcXFxiYXInLCBwYXNzd29yZD0ndG9wc2VjcmV0JylcblxuIyBBbiBBY2NvdW50IGlzIHRoZSBhY2NvdW50IG9uIHRoZSBFeGNoYW5nZSBzZXJ2ZXIgdGhhdCB5b3Ugd2FudCB0byBjb25uZWN0IHRvLiBUaGlzIGNhbiBiZVxuIyB0aGUgYWNjb3VudCBhc3NvY2lhdGVkIHdpdGggdGhlIGNyZWRlbnRpYWxzIHlvdSBjb25uZWN0IHdpdGgsIG9yIGFueSBvdGhlciBhY2NvdW50IG9uIHRoZVxuIyBzZXJ2ZXIgdGhhdCB5b3UgaGF2ZSBiZWVuIGdyYW50ZWQgYWNjZXNzIHRvLiBJZiwgZm9yIGV4YW1wbGUsIHlvdSB3YW50IHRvIGFjY2VzcyBhIHNoYXJlZFxuIyBmb2xkZXIsIGNyZWF0ZSBhbiBBY2NvdW50IGluc3RhbmNlIHVzaW5nIHRoZSBlbWFpbCBhZGRyZXNzIG9mIHRoZSBhY2NvdW50IHRoYXQgdGhlIHNoYXJlZCBcbiMgZm9sZGVyIGJlbG9uZ3MgdG8sIGFuZCBhY2Nlc3MgdGhlIHNoYXJlZCBmb2xkZXIgdGhyb3VnaCB0aGlzIGFjY291bnQuXG5cbiMgJ3ByaW1hcnlfc210cF9hZGRyZXNzJyBpcyB0aGUgcHJpbWFyeSBTTVRQIGFkZHJlc3MgYXNzaWduZWQgdGhlIGFjY291bnQuIElmIHlvdSBlbmFibGVcbiMgYXV0b2Rpc2NvdmVyLCBhbiBhbGlhcyBhZGRyZXNzIHdpbGwgd29yaywgdG9vLiBJbiB0aGlzIGNhc2UsICdBY2NvdW50LnByaW1hcnlfc210cF9hZGRyZXNzJ1xuIyB3aWxsIGJlIHNldCB0byB0aGUgcHJpbWFyeSBTTVRQIGFkZHJlc3MuXG5teV9hY2NvdW50ID0gQWNjb3VudChwcmltYXJ5X3NtdHBfYWRkcmVzcz0nbXl1c2VybmFtZUBleGFtcGxlLmNvbScsIGNyZWRlbnRpYWxzPWNyZWRlbnRpYWxzLFxuICAgICAgICAgICAgICAgICAgICAgYXV0b2Rpc2NvdmVyPVRydWUsIGFjY2Vzc190eXBlPURFTEVHQVRFKVxuam9obnNfYWNjb3VudCA9IEFjY291bnQocHJpbWFyeV9zbXRwX2FkZHJlc3M9J2pvaG5AZXhhbXBsZS5jb20nLCBjcmVkZW50aWFscz1jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9kaXNjb3Zlcj1UcnVlLCBhY2Nlc3NfdHlwZT1ERUxFR0FURSlcbm1hcnlzX2FjY291bnQgPSBBY2NvdW50KHByaW1hcnlfc210cF9hZGRyZXNzPSdtYXJ5QGV4YW1wbGUuY29tJywgY3JlZGVudGlhbHM9Y3JlZGVudGlhbHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBhdXRvZGlzY292ZXI9VHJ1ZSwgYWNjZXNzX3R5cGU9REVMRUdBVEUpXG5zdGlsbF9tYXJ5c19hY2NvdW50ID0gQWNjb3VudChwcmltYXJ5X3NtdHBfYWRkcmVzcz0nYWxpYXNfZm9yX21hcnlAZXhhbXBsZS5jb20nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlZGVudGlhbHM9Y3JlZGVudGlhbHMsIGF1dG9kaXNjb3Zlcj1UcnVlLCBhY2Nlc3NfdHlwZT1ERUxFR0FURSlcblxuIyBTZXQgdXAgYSB0YXJnZXQgYWNjb3VudCBhbmQgZG8gYW4gYXV0b2Rpc2NvdmVyIGxvb2t1cCB0byBmaW5kIHRoZSB0YXJnZXQgRVdTIGVuZHBvaW50LlxuYWNjb3VudCA9IEFjY291bnQocHJpbWFyeV9zbXRwX2FkZHJlc3M9J2pvaG5AZXhhbXBsZS5jb20nLCBjcmVkZW50aWFscz1jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICAgIGF1dG9kaXNjb3Zlcj1UcnVlLCBhY2Nlc3NfdHlwZT1ERUxFR0FURSlcblxuIyBJZiB5b3VyIGNyZWRlbnRpYWxzIGhhdmUgYmVlbiBnaXZlbiBpbXBlcnNvbmF0aW9uIGFjY2VzcyB0byB0aGUgdGFyZ2V0IGFjY291bnQsIHNldCBhXG4jIGRpZmZlcmVudCAnYWNjZXNzX3R5cGUnOlxuYWNjb3VudCA9IEFjY291bnQocHJpbWFyeV9zbXRwX2FkZHJlc3M9J2pvaG5AZXhhbXBsZS5jb20nLCBjcmVkZW50aWFscz1jcmVkZW50aWFscyxcbiAgICAgICAgICAgICAgICAgIGF1dG9kaXNjb3Zlcj1UcnVlLCBhY2Nlc3NfdHlwZT1JTVBFUlNPTkFUSU9OKVxuXG4jIElmIHRoZSBzZXJ2ZXIgZG9lc24ndCBzdXBwb3J0IGF1dG9kaXNjb3Zlciwgb3IgeW91IHdhbnQgdG8gYXZvaWQgdGhlIG92ZXJoZWFkIG9mIGF1dG9kaXNjb3ZlcixcbiMgdXNlIGEgQ29uZmlndXJhdGlvbiBvYmplY3QgdG8gc2V0IHRoZSBzZXJ2ZXIgbG9jYXRpb24gaW5zdGVhZDpcbmNvbmZpZyA9IENvbmZpZ3VyYXRpb24oc2VydmVyPSdtYWlsLmV4YW1wbGUuY29tJywgY3JlZGVudGlhbHM9Y3JlZGVudGlhbHMpXG5hY2NvdW50ID0gQWNjb3VudChwcmltYXJ5X3NtdHBfYWRkcmVzcz0nam9obkBleGFtcGxlLmNvbScsIGNvbmZpZz1jb25maWcsXG4gICAgICAgICAgICAgICAgICBhdXRvZGlzY292ZXI9RmFsc2UsIGFjY2Vzc190eXBlPURFTEVHQVRFKVxuXG4jICdleGNoYW5nZWxpYicgd2lsbCBhdHRlbXB0IHRvIGd1ZXNzIHRoZSBzZXJ2ZXIgdmVyc2lvbiBhbmQgYXV0aGVudGljYXRpb24gbWV0aG9kLiBJZiB5b3VcbiMgaGF2ZSBhIHJlYWxseSBiaXphcnJlIG9yIGxvY2tlZC1kb3duIGluc3RhbGxhdGlvbiBhbmQgdGhlIGd1ZXNzaW5nIGZhaWxzLCBvciB5b3Ugd2FudCB0byBhdm9pZFxuIyB0aGUgZXh0cmEgbmV0d29yayB0cmFmZmljLCB5b3UgY2FuIHNldCB0aGUgYXV0aCBtZXRob2QgYW5kIHZlcnNpb24gZXhwbGljaXRseSBpbnN0ZWFkOlxudmVyc2lvbiA9IFZlcnNpb24oYnVpbGQ9QnVpbGQoMTUsIDAsIDEyLCAzNCkpXG5jb25maWcgPSBDb25maWd1cmF0aW9uKFxuICAgIHNlcnZlcj0nZXhhbXBsZS5jb20nLCBjcmVkZW50aWFscz1jcmVkZW50aWFscywgdmVyc2lvbj12ZXJzaW9uLCBhdXRoX3R5cGU9TlRMTVxuKVxuXG4jIEtlcmJlcm9zIGF1dGhlbnRpY2F0aW9uIGlzIHN1cHBvcnRlZCB2aWEgdGhlICdnc3NhcGknIGF1dGggdHlwZS4gRW5hYmxpbmcgaXQgaXMgc2xpZ2h0bHkgYXdrd2FyZCxcbiMgZG9lcyBub3Qgd29yayB3aXRoIGF1dG9kaXNjb3ZlciAoeWV0KSBhbmQgaXMgbGlrZWx5IHRvIGNoYW5nZSBpbiBmdXR1cmUgdmVyc2lvbnMuXG5jcmVkZW50aWFscyA9IENyZWRlbnRpYWxzKCcnLCAnJylcbmNvbmZpZyA9IENvbmZpZ3VyYXRpb24oc2VydmVyPSdleGFtcGxlLmNvbScsIGNyZWRlbnRpYWxzPWNyZWRlbnRpYWxzLCBhdXRoX3R5cGU9R1NTQVBJKVxuXG4jIElmIHlvdSdyZSBjb25uZWN0aW5nIHRvIHRoZSBzYW1lIGFjY291bnQgdmVyeSBvZnRlbiwgeW91IGNhbiBjYWNoZSB0aGUgYXV0b2Rpc2NvdmVyIHJlc3VsdCBmb3JcbiMgbGF0ZXIgc28geW91IGNhbiBza2lwIHRoZSBhdXRvZGlzY292ZXIgbG9va3VwOlxuZXdzX3VybCA9IGFjY291bnQucHJvdG9jb2wuc2VydmljZV9lbmRwb2ludFxuZXdzX2F1dGhfdHlwZSA9IGFjY291bnQucHJvdG9jb2wuYXV0aF90eXBlXG5wcmltYXJ5X3NtdHBfYWRkcmVzcyA9IGFjY291bnQucHJpbWFyeV9zbXRwX2FkZHJlc3NcblxuIyBZb3UgY2FuIG5vdyBjcmVhdGUgdGhlIEFjY291bnQgd2l0aG91dCBhdXRvZGlzY292ZXJpbmcsIHVzaW5nIHRoZSBjYWNoZWQgdmFsdWVzOlxuY29uZmlnID0gQ29uZmlndXJhdGlvbihzZXJ2aWNlX2VuZHBvaW50PWV3c191cmwsIGNyZWRlbnRpYWxzPWNyZWRlbnRpYWxzLCBhdXRoX3R5cGU9ZXdzX2F1dGhfdHlwZSlcbmFjY291bnQgPSBBY2NvdW50KFxuICAgIHByaW1hcnlfc210cF9hZGRyZXNzPXByaW1hcnlfc210cF9hZGRyZXNzLCBcbiAgICBjb25maWc9Y29uZmlnLCBhdXRvZGlzY292ZXI9RmFsc2UsIFxuICAgIGFjY2Vzc190eXBlPURFTEVHQVRFLFxuKVxuXG4jIEF1dG9kaXNjb3ZlciBjYW4gdGFrZSBhIGxvdCBvZiB0aW1lLCBzcGVjaWFsbHkgdGhlIHBhcnQgdGhhdCBmaWd1cmVzIG91dCB0aGUgYXV0b2Rpc2NvdmVyIFxuIyBzZXJ2ZXIgdG8gY29udGFjdCBmb3IgYSBzcGVjaWZpYyBlbWFpbCBkb21haW4uIEZvciB0aGlzIHJlYXNvbiwgd2Ugd2lsbCBjcmVhdGUgYSBwZXJzaXN0ZW50LCBcbiMgcGVyLXVzZXIsIG9uLWRpc2sgY2FjaGUgY29udGFpbmluZyBhIG1hcCBvZiBwcmV2aW91cywgc3VjY2Vzc2Z1bCBkb21haW4gLT4gYXV0b2Rpc2NvdmVyIHNlcnZlclxuIyBsb29rdXBzLiBUaGlzIGNhY2hlIGlzIHNoYXJlZCBiZXR3ZWVuIHByb2Nlc3NlcyBhbmQgaXMgbm90IGRlbGV0ZWQgd2hlbiB5b3VyIHByb2dyYW0gZXhpdHMuXG5cbiMgQSBjYWNoZSBlbnRyeSBmb3IgYSBkb21haW4gaXMgcmVtb3ZlZCBhdXRvbWF0aWNhbGx5IGlmIGF1dG9kaXNjb3ZlcnkgZmFpbHMgZm9yIGFuIGVtYWlsIGluIHRoYXRcbiMgZG9tYWluLiBJdCdzIHBvc3NpYmxlIHRvIGNsZWFyIHRoZSBlbnRpcmUgY2FjaGUgY29tcGxldGVseSBpZiB5b3Ugd2FudDpcbmZyb20gZXhjaGFuZ2VsaWIuYXV0b2Rpc2NvdmVyIGltcG9ydCBfYXV0b2Rpc2NvdmVyX2NhY2hlXG5fYXV0b2Rpc2NvdmVyX2NhY2hlLmNsZWFyKClcbmBgYFxuXG4jIyBQcm94aWVzIGFuZCBjdXN0b20gVExTIHZhbGlkYXRpb25cblxuSWYgeW91IG5lZWQgcHJveHkgc3VwcG9ydCBvciBjdXN0b20gVExTIHZhbGlkYXRpb24sIHlvdSBjYW4gc3VwcGx5IGFcbmN1c3RvbSAncmVxdWVzdHMnIHRyYW5zcG9ydCBhZGFwdGVyIGNsYXNzLCBhcyBkZXNjcmliZWQgaW5cbjxodHRwOi8vZG9jcy5weXRob24tcmVxdWVzdHMub3JnL2VuL21hc3Rlci91c2VyL2FkdmFuY2VkLyN0cmFuc3BvcnQtYWRhcHRlcnM+LlxuXG5IZXJlJ3MgYW4gZXhhbXBsZSB1c2luZyBkaWZmZXJlbnQgY3VzdG9tIHJvb3QgY2VydGlmaWNhdGVzIGRlcGVuZGluZyBvblxudGhlIHNlcnZlciB0byBjb25uZWN0IHRvOlxuXG5gYGBweXRob25cbmZyb20gdXJsbGliLnBhcnNlIGltcG9ydCB1cmxwYXJzZVxuaW1wb3J0IHJlcXVlc3RzLmFkYXB0ZXJzXG5mcm9tIGV4Y2hhbmdlbGliLnByb3RvY29sIGltcG9ydCBCYXNlUHJvdG9jb2xcblxuY2xhc3MgUm9vdENBQWRhcHRlcihyZXF1ZXN0cy5hZGFwdGVycy5IVFRQQWRhcHRlcik6XG4gICAgIyBBbiBIVFRQIGFkYXB0ZXIgdGhhdCB1c2VzIGEgY3VzdG9tIHJvb3QgQ0EgY2VydGlmaWNhdGUgYXQgYSBoYXJkIGNvZGVkIGxvY2F0aW9uXG4gICAgZGVmIGNlcnRfdmVyaWZ5KHNlbGYsIGNvbm4sIHVybCwgdmVyaWZ5LCBjZXJ0KTpcbiAgICAgICAgY2VydF9maWxlID0ge1xuICAgICAgICAgICAgJ2V4YW1wbGUuY29tJzogJy9wYXRoL3RvL2V4YW1wbGUuY29tLmNydCcsXG4gICAgICAgICAgICAnbWFpbC5pbnRlcm5hbCc6ICcvcGF0aC90by9tYWlsLmludGVybmFsLmNydCcsXG4gICAgICAgIH1bdXJscGFyc2UodXJsKS5ob3N0bmFtZV1cbiAgICAgICAgc3VwZXIoUm9vdENBQWRhcHRlciwgc2VsZikuY2VydF92ZXJpZnkoY29ubj1jb25uLCB1cmw9dXJsLCB2ZXJpZnk9Y2VydF9maWxlLCBjZXJ0PWNlcnQpXG5cbiMgVGVsbCBleGNoYW5nZWxpYiB0byB1c2UgdGhpcyBhZGFwdGVyIGNsYXNzIGluc3RlYWQgb2YgdGhlIGRlZmF1bHRcbkJhc2VQcm90b2NvbC5IVFRQX0FEQVBURVJfQ0xTID0gUm9vdENBQWRhcHRlclxuYGBgXG5cbkhlcmUncyBhbiBleGFtcGxlIG9mIGFkZGluZyBwcm94eSBzdXBwb3J0OlxuXG5gYGBweXRob25cbmltcG9ydCByZXF1ZXN0cy5hZGFwdGVyc1xuZnJvbSBleGNoYW5nZWxpYi5wcm90b2NvbCBpbXBvcnQgQmFzZVByb3RvY29sXG5cbmNsYXNzIFByb3h5QWRhcHRlcihyZXF1ZXN0cy5hZGFwdGVycy5IVFRQQWRhcHRlcik6XG4gICAgZGVmIHNlbmQoc2VsZiwgKmFyZ3MsICoqa3dhcmdzKTpcbiAgICAgICAga3dhcmdzWydwcm94aWVzJ10gPSB7XG4gICAgICAgICAgICAnaHR0cCc6ICdodHRwOi8vMTAuMC4wLjE6MTI0MycsXG4gICAgICAgICAgICAnaHR0cHMnOiAnaHR0cDovLzEwLjAuMC4xOjQzMjEnLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlcihQcm94eUFkYXB0ZXIsIHNlbGYpLnNlbmQoKmFyZ3MsICoqa3dhcmdzKVxuXG4jIFRlbGwgZXhjaGFuZ2VsaWIgdG8gdXNlIHRoaXMgYWRhcHRlciBjbGFzcyBpbnN0ZWFkIG9mIHRoZSBkZWZhdWx0XG5CYXNlUHJvdG9jb2wuSFRUUF9BREFQVEVSX0NMUyA9IFByb3h5QWRhcHRlclxuYGBgXG5cbmBleGNoYW5nZWxpYmAgcHJvdmlkZXMgYSBzYW1wbGUgYWRhcHRlciB3aGljaCBpZ25vcmVzIFRMUyB2YWxpZGF0aW9uXG5lcnJvcnMuIFVzZSBhdCBvd24gcmlzay5cblxuYGBgcHl0aG9uXG5mcm9tIGV4Y2hhbmdlbGliLnByb3RvY29sIGltcG9ydCBCYXNlUHJvdG9jb2wsIE5vVmVyaWZ5SFRUUEFkYXB0ZXJcblxuIyBUZWxsIGV4Y2hhbmdlbGliIHRvIHVzZSB0aGlzIGFkYXB0ZXIgY2xhc3MgaW5zdGVhZCBvZiB0aGUgZGVmYXVsdFxuQmFzZVByb3RvY29sLkhUVFBfQURBUFRFUl9DTFMgPSBOb1ZlcmlmeUhUVFBBZGFwdGVyXG5gYGBcblxuIyMgRm9sZGVyc1xuQWxsIHdlbGxrbm93biBmb2xkZXJzIGFyZSBhdmFpbGFibGUgYXMgcHJvcGVydGllcyBvbiB0aGUgYWNjb3VudCwgZS5nLiBhcyBgYWNjb3VudC5yb290YCwgYGFjY291bnQuY2FsZW5kYXJgLFxuYGFjY291bnQudHJhc2hgLCBgYWNjb3VudC5pbmJveGAsIGBhY2NvdW50Lm91dGJveGAsIGBhY2NvdW50LnNlbnRgLCBgYWNjb3VudC5qdW5rYCwgYGFjY291bnQudGFza3NgIGFuZFxuYGFjY291bnQuY29udGFjdHNgLlxuXG5gYGBweXRob25cbiMgVGhlcmUgYXJlIG11bHRpcGxlIHdheXMgb2YgbmF2aWdhdGluZyB0aGUgZm9sZGVyIHRyZWUgYW5kIHNlYXJjaGluZyBmb3IgZm9sZGVycy4gR2xvYmJpbmcgYW5kIFxuIyBhYnNvbHV0ZSBwYXRoIG1heSBjcmVhdGUgdW5leHBlY3RlZCByZXN1bHRzIGlmIHlvdXIgZm9sZGVyIG5hbWVzIGNvbnRhaW4gc2xhc2hlcy5cblxuIyBUaGUgZm9sZGVyIHN0cnVjdHVyZSBpcyBjYWNoZWQgYWZ0ZXIgZmlyc3QgYWNjZXNzIHRvIGEgZm9sZGVyIGhpZXJhcmNoeS4gVGhpcyBtZWFucyB0aGF0IGV4dGVybmFsXG4jIGNoYW5nZXMgdG8gdGhlIGZvbGRlciBzdHJ1Y3R1cmUgd2lsbCBub3Qgc2hvdyB1cCB1bnRpbCB5b3UgY2xlYXIgdGhlIGNhY2hlLiBIZXJlJ3MgaG93IHRvIGNsZWFyXG4jIHRoZSBjYWNoZSBvZiBlYWNoIG9mIHRoZSBjdXJyZW50bHkgc3VwcG9ydGVkIGZvbGRlciBoaWVyYXJjaGllczpcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIEZvbGRlclxuXG5hID0gQWNjb3VudCguLi4pXG5hLnJvb3QucmVmcmVzaCgpXG5hLnB1YmxpY19mb2xkZXJzX3Jvb3QucmVmcmVzaCgpXG5hLmFyY2hpdmVfcm9vdC5yZWZyZXNoKClcblxuc29tZV9mb2xkZXIgPSBhLnJvb3QgLyAnU29tZSBGb2xkZXInXG5zb21lX2ZvbGRlci5wYXJlbnRcbnNvbWVfZm9sZGVyLnBhcmVudC5wYXJlbnQucGFyZW50XG5zb21lX2ZvbGRlci5yb290ICAjIFJldHVybnMgdGhlIHJvb3Qgb2YgdGhlIGZvbGRlciBzdHJ1Y3R1cmUsIGF0IGFueSBsZXZlbC4gU2FtZSBhcyBBY2NvdW50LnJvb3RcbnNvbWVfZm9sZGVyLmNoaWxkcmVuICAjIEEgZ2VuZXJhdG9yIG9mIGNoaWxkIGZvbGRlcnNcbnNvbWVfZm9sZGVyLmFic29sdXRlICAjIFJldHVybnMgdGhlIGFic29sdXRlIHBhdGgsIGFzIGEgc3RyaW5nXG5zb21lX2ZvbGRlci53YWxrKCkgICMgQSBnZW5lcmF0b3IgcmV0dXJuaW5nIGFsbCBzdWJmb2xkZXJzIGF0IGFyYml0cmFyeSBkZXB0aCB0aGlzIGxldmVsXG4jIEdsb2JiaW5nIHVzZXMgdGhlIG5vcm1hbCBVTklYIGdsb2JiaW5nIHN5bnRheFxuc29tZV9mb2xkZXIuZ2xvYignZm9vKicpICAjIFJldHVybiBjaGlsZCBmb2xkZXJzIG1hdGNoaW5nIHRoZSBwYXR0ZXJuXG5zb21lX2ZvbGRlci5nbG9iKCcqL2ZvbycpICAjIFJldHVybiBzdWJmb2xkZXJzIG5hbWVkICdmb28nIGluIGFueSBjaGlsZCBmb2xkZXJcbnNvbWVfZm9sZGVyLmdsb2IoJyoqL2ZvbycpICAjIFJldHVybiBzdWJmb2xkZXJzIG5hbWVkICdmb28nIGF0IGFueSBkZXB0aFxuc29tZV9mb2xkZXIgLyAnc3ViX2ZvbGRlcicgLyAnZXZlbl9kZWVwZXInIC8gJ2xlYWYnICAjIFdvcmtzIGxpa2UgcGF0aGxpYi5QYXRoXG4jIFlvdSBjYW4gYWxzbyBkcmlsbCBkb3duIGludG8gdGhlIGZvbGRlciBzdHJ1Y3R1cmUgd2l0aG91dCB1c2luZyB0aGUgY2FjaGUuIFRoaXMgd29ya3MgbGlrZVxuIyB0aGUgc2luZ2xlIHNsYXNoIHN5bnRheCwgYnV0IGRvZXMgbm90IHN0YXJ0IGJ5IGNyZWF0aW5nIGEgY2FjaGUgdGhlIGZvbGRlciBoaWVyYXJjaHkuIFRoaXMgaXNcbiMgdXNlZnVsIGlmIHlvdXIgYWNjb3VudCBjb250YWlucyBhIGh1Z2UgbnVtYmVyIG9mIGZvbGRlcnMsIGFuZCB5b3UgYWxyZWFkeSBrbm93IHdoZXJlIHRvIGdvLlxuc29tZV9mb2xkZXIgLy8gJ3N1Yl9mb2xkZXInIC8vICdldmVuX2RlZXBlcicgLy8gJ2xlYWYnXG5zb21lX2ZvbGRlci5wYXJ0cyAgIyByZXR1cm5zIHNvbWVfZm9sZGVyIGFuZCBhbGwgaXRzIHBhcmVudHMsIGFzIEZvbGRlciBpbnN0YW5jZXNcbiMgdHJlZSgpIHJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRyZWUgc3RydWN0dXJlIGF0IHRoZSBnaXZlbiBsZXZlbFxucHJpbnQoYS5yb290LnRyZWUoKSlcbicnJ1xucm9vdFxu4pSc4pSA4pSAIGluYm94XG7ilIIgICDilJTilIDilIAgdG9kb3NcbuKUlOKUgOKUgCBhcmNoaXZlXG4gICAg4pSc4pSA4pSAIExhc3QgSm9iXG4gICAg4pSc4pSA4pSAIGV4Y2hhbmdlbGliIGlzc3Vlc1xuICAgIOKUlOKUgOKUgCBNb21cbicnJ1xuXG4jIEZvbGRlcnMgaGF2ZSBzb21lIHVzZWZ1bCBjb3VudGVyczpcbmEuaW5ib3gudG90YWxfY291bnRcbmEuaW5ib3guY2hpbGRfZm9sZGVyX2NvdW50XG5hLmluYm94LnVucmVhZF9jb3VudFxuIyBVcGRhdGUgdGhlIGNvdW50ZXJzXG5hLmluYm94LnJlZnJlc2goKVxuXG4jIEZvbGRlcnMgY2FuIGJlIGNyZWF0ZWQsIHVwZGF0ZWQgYW5kIGRlbGV0ZWQ6XG5mID0gRm9sZGVyKHBhcmVudD1hLmluYm94LCBuYW1lPSdNeSBOZXcgRm9sZGVyJylcbmYuc2F2ZSgpXG5cbmYubmFtZSA9ICdNeSBOZXcgU3ViZm9sZGVyJ1xuZi5zYXZlKClcbmYuZGVsZXRlKClcblxuIyBEZWxldGUgYWxsIGl0ZW1zIGluIGEgZm9sZGVyXG5mLmVtcHR5KClcbiMgQWxzbyBkZWxldGUgYWxsIHN1YmZvbGRlcnMgaW4gdGhlIGZvbGRlclxuZi5lbXB0eShkZWxldGVfc3ViX2ZvbGRlcnM9VHJ1ZSlcbiMgUmVjdXJzaXZlbHkgZGVsZXRlIGFsbCBpdGVtcyBpbiBhIGZvbGRlciwgYW5kIGFsbCBzdWJmb2xkZXJzIGFuZCB0aGVpciBjb250ZW50LiBUaGlzIGlzXG4jIGxpa2UgYGVtcHR5KGRlbGV0ZV9zdWJfZm9sZGVycz1UcnVlKWAgYnV0IGF0dGVtcHRzIHRvIHByb3RlY3QgZGlzdGluZ3Vpc2hlZCBmb2xkZXJzIGZyb21cbiMgYmVpbmcgZGVsZXRlZC4gVXNlIHdpdGggY2F1dGlvbiFcbmYud2lwZSgpXG5gYGBcblxuIyMgRGF0ZXMsIGRhdGV0aW1lcyBhbmQgdGltZXpvbmVzXG5cbkVXUyBoYXMgc29tZSBzcGVjaWFsIHJlcXVpcmVtZW50cyBvbiBkYXRldGltZXMgYW5kIHRpbWV6b25lcy4gWW91IG5lZWRcbnRvIHVzZSB0aGUgc3BlY2lhbCBgRVdTRGF0ZWAsIGBFV1NEYXRlVGltZWAgYW5kIGBFV1NUaW1lWm9uZWAgY2xhc3Nlc1xud2hlbiB3b3JraW5nIHdpdGggZGF0ZXMuXG5cbmBgYHB5dGhvblxuZnJvbSBkYXRldGltZSBpbXBvcnQgZGF0ZXRpbWUsIHRpbWVkZWx0YVxuaW1wb3J0IHB5dHpcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEVXU1RpbWVab25lLCBFV1NEYXRlVGltZSwgRVdTRGF0ZVxuXG4jIEVXU1RpbWVab25lIHdvcmtzIGp1c3QgbGlrZSBweXR6LnRpbWV6b25lKClcbnR6ID0gRVdTVGltZVpvbmUudGltZXpvbmUoJ0V1cm9wZS9Db3BlbmhhZ2VuJylcbiMgWW91IGNhbiBhbHNvIGdldCB0aGUgbG9jYWwgdGltZXpvbmUgZGVmaW5lZCBpbiB5b3VyIG9wZXJhdGluZyBzeXN0ZW1cbnR6ID0gRVdTVGltZVpvbmUubG9jYWx6b25lKClcblxuIyBFV1NEYXRlIGFuZCBFV1NEYXRlVGltZSB3b3JrIGp1c3QgbGlrZSBkYXRldGltZS5kYXRldGltZSBhbmQgZGF0ZXRpbWUuZGF0ZS4gQWx3YXlzIGNyZWF0ZVxuIyB0aW1lem9uZS1hd2FyZSBkYXRldGltZXMgd2l0aCBFV1NUaW1lWm9uZS5sb2NhbGl6ZSgpOlxubG9jYWxpemVkX2R0ID0gdHoubG9jYWxpemUoRVdTRGF0ZVRpbWUoMjAxNywgOSwgNSwgOCwgMzApKVxucmlnaHRfbm93ID0gdHoubG9jYWxpemUoRVdTRGF0ZVRpbWUubm93KCkpXG5cbiMgRGF0ZXRpbWUgbWF0aCB3b3JrcyB0cmFuc3BhcmVudGx5XG50d29faG91cnNfbGF0ZXIgPSBsb2NhbGl6ZWRfZHQgKyB0aW1lZGVsdGEoaG91cnM9MilcbnR3b19ob3VycyA9IHR3b19ob3Vyc19sYXRlciAtIGxvY2FsaXplZF9kdFxudHdvX2hvdXJzX2xhdGVyICs9IHRpbWVkZWx0YShob3Vycz0yKVxuXG4jIERhdGVzXG5teV9kYXRlID0gRVdTRGF0ZSgyMDE3LCA5LCA1KVxudG9kYXkgPSBFV1NEYXRlLnRvZGF5KClcbmFsc29fdG9kYXkgPSByaWdodF9ub3cuZGF0ZSgpXG5hbHNvX3RvZGF5ICs9IHRpbWVkZWx0YShkYXlzPTEwKVxuXG4jIFVUQyBoZWxwZXJzLiAnVVRDJyBpcyB0aGUgVVRDIHRpbWV6b25lIGFzIGFuIEVXU1RpbWVab25lIGluc3RhbmNlLlxuIyAnVVRDX05PVycgcmV0dXJucyBhIHRpbWV6b25lLWF3YXJlIFVUQyB0aW1lc3RhbXAgb2YgY3VycmVudCB0aW1lLlxuZnJvbSBleGNoYW5nZWxpYiBpbXBvcnQgVVRDLCBVVENfTk9XXG5cbnJpZ2h0X25vd19pbl91dGMgPSBVVEMubG9jYWxpemUoRVdTRGF0ZVRpbWUubm93KCkpXG5yaWdodF9ub3dfaW5fdXRjID0gVVRDX05PVygpXG5cbiMgQWxyZWFkeSBoYXZlIGEgUHl0aG9uIGRhdGV0aW1lIG9iamVjdCB5b3Ugd2FudCB0byB1c2U/IE1ha2Ugc3VyZSBpdCdzIGxvY2FsaXplZC4gVGhlbiBwYXNzIFxuIyBpdCB0byBmcm9tX2RhdGV0aW1lKCkuXG5weXR6X3R6ID0gcHl0ei50aW1lem9uZSgnRXVyb3BlL0NvcGVuaGFnZW4nKVxucHlfZHQgPSBweXR6X3R6LmxvY2FsaXplKGRhdGV0aW1lKDIwMTcsIDEyLCAxMSwgMTAsIDksIDgpKVxuZXdzX25vdyA9IEVXU0RhdGVUaW1lLmZyb21fZGF0ZXRpbWUocHlfZHQpXG5gYGBcblxuIyMgQ3JlYXRpbmcsIHVwZGF0aW5nLCBkZWxldGluZywgc2VuZGluZyBhbmQgbW92aW5nXG5cbmBgYHB5dGhvblxuIyBIZXJlJ3MgYW4gZXhhbXBsZSBvZiBjcmVhdGluZyBhIGNhbGVuZGFyIGl0ZW0gaW4gdGhlIHVzZXIncyBzdGFuZGFyZCBjYWxlbmRhci4gIElmIHlvdSB3YW50IHRvXG4jIGFjY2VzcyBhIG5vbi1zdGFuZGFyZCBjYWxlbmRhciwgY2hvb3NlIGEgZGlmZmVyZW50IG9uZSBmcm9tIGFjY291bnQuZm9sZGVyc1tDYWxlbmRhcl0uXG4jXG4jIFlvdSBjYW4gY3JlYXRlLCB1cGRhdGUgYW5kIGRlbGV0ZSBzaW5nbGUgaXRlbXM6XG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBBY2NvdW50LCBDYWxlbmRhckl0ZW0sIE1lc3NhZ2UsIE1haWxib3gsIEZpbGVBdHRhY2htZW50LCBIVE1MQm9keVxuZnJvbSBleGNoYW5nZWxpYi5pdGVtcyBpbXBvcnQgU0VORF9PTkxZX1RPX0FMTCwgU0VORF9PTkxZX1RPX0NIQU5HRURcblxuYSA9IEFjY291bnQoLi4uKVxuaXRlbSA9IENhbGVuZGFySXRlbShmb2xkZXI9YS5jYWxlbmRhciwgc3ViamVjdD0nZm9vJylcbml0ZW0uc2F2ZSgpICAjIFRoaXMgZ2l2ZXMgdGhlIGl0ZW0gYW4gJ2lkJyBhbmQgYSAnY2hhbmdla2V5JyB2YWx1ZVxuaXRlbS5zYXZlKHNlbmRfbWVldGluZ19pbnZpdGF0aW9ucz1TRU5EX09OTFlfVE9fQUxMKSAgIyBTZW5kIGEgbWVldGluZyBpbnZpdGF0aW9uIHRvIGF0dGVuZGVlc1xuIyBVcGRhdGUgYSBmaWVsZC4gQWxsIGZpZWxkcyBoYXZlIGEgY29ycmVzcG9uZGluZyBQeXRob24gdHlwZSB0aGF0IG11c3QgYmUgdXNlZC5cbml0ZW0uc3ViamVjdCA9ICdiYXInXG4jIFByaW50IGFsbCBhdmFpbGFibGUgZmllbGRzIG9uIHRoZSAnQ2FsZW5kYXJJdGVtJyBjbGFzcy4gQmV3YXJlIHRoYXQgc29tZSBmaWVsZHMgYXJlIHJlYWQtb25seSwgb3JcbiMgcmVhZC1vbmx5IGFmdGVyIHRoZSBpdGVtIGhhcyBiZWVuIHNhdmVkIG9yIHNlbnQsIGFuZCBzb21lIGZpZWxkcyBhcmUgbm90IHN1cHBvcnRlZCBvbiBvbGRcbiMgdmVyc2lvbnMgb2YgRXhjaGFuZ2UuXG5wcmludChDYWxlbmRhckl0ZW0uRklFTERTKVxuaXRlbS5zYXZlKCkgICMgV2hlbiB0aGUgaXRlbXMgaGFzIGFuIGl0ZW1faWQsIHRoaXMgd2lsbCB1cGRhdGUgdGhlIGl0ZW1cbml0ZW0uc2F2ZSh1cGRhdGVfZmllbGRzPVsnc3ViamVjdCddKSAgIyBPbmx5IHVwZGF0ZXMgY2VydGFpbiBmaWVsZHMuIEFjY2VwdHMgYSBsaXN0IG9mIGZpZWxkIG5hbWVzLlxuaXRlbS5zYXZlKHNlbmRfbWVldGluZ19pbnZpdGF0aW9ucz1TRU5EX09OTFlfVE9fQ0hBTkdFRCkgICMgU2VuZCBpbnZpdGVzIG9ubHkgdG8gYXR0ZW5kZWUgY2hhbmdlc1xuaXRlbS5kZWxldGUoKSAgIyBIYXJkIGRlbGV0aW5vblxuaXRlbS5kZWxldGUoc2VuZF9tZWV0aW5nX2NhbmNlbGxhdGlvbnM9U0VORF9PTkxZX1RPX0FMTCkgICMgU2VuZCBjYW5jZWxsYXRpb25zIHRvIGFsbCBhdHRlbmRlZXNcbml0ZW0uc29mdF9kZWxldGUoKSAgIyBEZWxldGUsIGJ1dCBrZWVwIGEgY29weSBpbiB0aGUgcmVjb3ZlcmFibGUgaXRlbXMgZm9sZGVyXG5pdGVtLm1vdmVfdG9fdHJhc2goKSAgIyBNb3ZlIHRvIHRoZSB0cmFzaCBmb2xkZXJcbml0ZW0ubW92ZShhLnRyYXNoKSAgIyBBbHNvIG1vdmVzIHRoZSBpdGVtIHRvIHRoZSB0cmFzaCBmb2xkZXJcbml0ZW0uY29weShhLnRyYXNoKSAgIyBDcmVhdGVzIGEgY29weSBvZiB0aGUgaXRlbSB0byB0aGUgdHJhc2ggZm9sZGVyXG5cbiMgWW91IGNhbiBhbHNvIHNlbmQgZW1haWxzLiBJZiB5b3UgZG9uJ3Qgd2FudCBhIGxvY2FsIGNvcHk6XG5tID0gTWVzc2FnZShcbiAgICBhY2NvdW50PWEsXG4gICAgc3ViamVjdD0nRGFpbHkgbW90aXZhdGlvbicsXG4gICAgYm9keT0nQWxsIGJvZGllcyBhcmUgYmVhdXRpZnVsJyxcbiAgICB0b19yZWNpcGllbnRzPVtcbiAgICAgICAgTWFpbGJveChlbWFpbF9hZGRyZXNzPSdhbm5lQGV4YW1wbGUuY29tJyksXG4gICAgICAgIE1haWxib3goZW1haWxfYWRkcmVzcz0nYm9iQGV4YW1wbGUuY29tJyksXG4gICAgXSxcbiAgICBjY19yZWNpcGllbnRzPVsnY2FybEBleGFtcGxlLmNvbScsICdkZW5pY2VAZXhhbXBsZS5jb20nXSwgICMgU2ltcGxlIHN0cmluZ3Mgd29yaywgdG9vXG4gICAgYmNjX3JlY2lwaWVudHM9W1xuICAgICAgICBNYWlsYm94KGVtYWlsX2FkZHJlc3M9J2VyaWtAZXhhbXBsZS5jb20nKSxcbiAgICAgICAgJ2ZlbGljaXR5QGV4YW1wbGUuY29tJyxcbiAgICBdLCAgIyBPciBhIG1peCBvZiBib3RoXG4pXG5tLnNlbmQoKVxuXG4jIE9yLCBpZiB5b3Ugd2FudCBhIGNvcHkgaW4gZS5nLiB0aGUgJ1NlbnQnIGZvbGRlclxubSA9IE1lc3NhZ2UoXG4gICAgYWNjb3VudD1hLFxuICAgIGZvbGRlcj1hLnNlbnQsXG4gICAgc3ViamVjdD0nRGFpbHkgbW90aXZhdGlvbicsXG4gICAgYm9keT0nQWxsIGJvZGllcyBhcmUgYmVhdXRpZnVsJyxcbiAgICB0b19yZWNpcGllbnRzPVtNYWlsYm94KGVtYWlsX2FkZHJlc3M9J2FubmVAZXhhbXBsZS5jb20nKV1cbilcbm0uc2VuZF9hbmRfc2F2ZSgpXG5cbiMgTGlrZXdpc2UsIHlvdSBjYW4gcmVwbHkgdG8gYW5kIGZvcndhcmQgbWVzc2FnZXMgdGhhdCBhcmUgc3RvcmVkIGluIHlvdXIgbWFpbGJveCAoaS5lLiB0aGV5XG4jIGhhdmUgYW4gaXRlbSBJRCkuXG5tID0gYS5zZW50LmdldChzdWJqZWN0PSdEYWlseSBtb3RpdmF0aW9uJylcbm0ucmVwbHkoXG4gICAgc3ViamVjdD0nUmU6IERhaWx5IG1vdGl2YXRpb24nLFxuICAgIGJvZHk9J0kgYWdyZWUnLFxuICAgIHRvX3JlY2lwaWVudHM9WydjYXJsQGV4YW1wbGUuY29tJywgJ2RlbmljZUBleGFtcGxlLmNvbSddXG4pXG5tLnJlcGx5X2FsbChzdWJqZWN0PSdSZTogRGFpbHkgbW90aXZhdGlvbicsIGJvZHk9J0kgYWdyZWUnKVxubS5mb3J3YXJkKFxuICAgIHN1YmplY3Q9J0Z3ZDogRGFpbHkgbW90aXZhdGlvbicsXG4gICAgYm9keT0nSGV5LCBsb29rIGF0IHRoaXMhJywgXG4gICAgdG9fcmVjaXBpZW50cz1bJ2NhcmxAZXhhbXBsZS5jb20nLCAnZGVuaWNlQGV4YW1wbGUuY29tJ11cbilcblxuIyBZb3UgY2FuIGFsc28gZWRpdCBhIGRyYWZ0IG9mIGEgcmVwbHkgb3IgZm9yd2FyZFxuZm9yd2FyZF9kcmFmdCA9IG0uY3JlYXRlX2ZvcndhcmQoXG4gICAgc3ViamVjdD0nRndkOiBEYWlseSBtb3RpdmF0aW9uJyxcbiAgICBib2R5PSdIZXksIGxvb2sgYXQgdGhpcyEnLFxuICAgIHRvX3JlY2lwaWVudHM9WydjYXJsQGV4YW1wbGUuY29tJywgJ2RlbmljZUBleGFtcGxlLmNvbSddXG4pLnNhdmUoYS5kcmFmdHMpICMgZ2l2ZXMgeW91IGJhY2sgdGhlIGl0ZW1cbmZvcndhcmRfZHJhZnQucmVwbHlfdG8gPSAnZXJpY0BleGFtcGxlLmNvbSdcbmZvcndhcmRfZHJhZnQuYXR0YWNoKEZpbGVBdHRhY2htZW50KG5hbWU9J215X2ZpbGUudHh0JywgY29udGVudD0naGVsbG8gd29ybGQnLmVuY29kZSgndXRmLTgnKSkpXG5mb3J3YXJkX2RyYWZ0LnNlbmQoKSAjIG5vdyBvdXIgZm9yd2FyZCBoYXMgYW4gZXh0cmEgcmVwbHlfdG8gZmllbGQgYW5kIGFuIGV4dHJhIGF0dGFjaG1lbnQuXG5cbiMgRVdTIGRpc3Rpbmd1aXNoZXMgYmV0d2VlbiBwbGFpbiB0ZXh0IGFuZCBIVE1MIGJvZHkgY29udGVudHMuIElmIHlvdSB3YW50IHRvIHNlbmQgSFRNTCBib2R5XG4jIGNvbnRlbnQsIHVzZSB0aGUgSFRNTEJvZHkgaGVscGVyLiBDbGllbnRzIHdpbGwgc2VlIHRoaXMgYXMgSFRNTCBhbmQgZGlzcGxheSB0aGUgYm9keSBjb3JyZWN0bHk6XG5pdGVtLmJvZHkgPSBIVE1MQm9keSgnPGh0bWw+PGJvZHk+SGVsbG8gaGFwcHkgPGJsaW5rPk9XQSB1c2VyITwvYmxpbms+PC9ib2R5PjwvaHRtbD4nKVxuYGBgXG5cbiMjIEJ1bGsgb3BlcmF0aW9uc1xuXG5gYGBweXRob25cbiMgQnVpbGQgYSBsaXN0IG9mIGNhbGVuZGFyIGl0ZW1zXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBBY2NvdW50LCBDYWxlbmRhckl0ZW0sIEVXU0RhdGVUaW1lLCBFV1NUaW1lWm9uZSwgQXR0ZW5kZWUsIE1haWxib3hcblxuYSA9IEFjY291bnQoLi4uKVxudHogPSBFV1NUaW1lWm9uZS50aW1lem9uZSgnRXVyb3BlL0NvcGVuaGFnZW4nKVxueWVhciwgbW9udGgsIGRheSA9IDIwMTYsIDMsIDIwXG5jYWxlbmRhcl9pdGVtcyA9IFtdXG5mb3IgaG91ciBpbiByYW5nZSg3LCAxNyk6XG4gICAgY2FsZW5kYXJfaXRlbXMuYXBwZW5kKENhbGVuZGFySXRlbShcbiAgICAgICAgc3RhcnQ9dHoubG9jYWxpemUoRVdTRGF0ZVRpbWUoeWVhciwgbW9udGgsIGRheSwgaG91ciwgMzApKSxcbiAgICAgICAgZW5kPXR6LmxvY2FsaXplKEVXU0RhdGVUaW1lKHllYXIsIG1vbnRoLCBkYXksIGhvdXIgKyAxLCAxNSkpLFxuICAgICAgICBzdWJqZWN0PSdUZXN0IGl0ZW0nLFxuICAgICAgICBib2R5PSdIZWxsbyBmcm9tIFB5dGhvbicsXG4gICAgICAgIGxvY2F0aW9uPSdkZXZudWxsJyxcbiAgICAgICAgY2F0ZWdvcmllcz1bJ2ZvbycsICdiYXInXSxcbiAgICAgICAgcmVxdWlyZWRfYXR0ZW5kZWVzID0gW0F0dGVuZGVlKFxuICAgICAgICAgICAgbWFpbGJveD1NYWlsYm94KGVtYWlsX2FkZHJlc3M9J3VzZXIxQGV4YW1wbGUuY29tJyksXG4gICAgICAgICAgICByZXNwb25zZV90eXBlPSdBY2NlcHQnXG4gICAgICAgICldXG4gICAgKSlcblxuIyBDcmVhdGUgYWxsIGl0ZW1zIGF0IG9uY2VcbnJldHVybl9pZHMgPSBhLmJ1bGtfY3JlYXRlKGZvbGRlcj1hLmNhbGVuZGFyLCBpdGVtcz1jYWxlbmRhcl9pdGVtcylcblxuIyBCdWxrIGZldGNoLCB3aGVuIHlvdSBoYXZlIGEgbGlzdCBvZiBpdGVtIElEcyBhbmQgd2FudCB0aGUgZnVsbCBvYmplY3RzLiBSZXR1cm5zIGEgZ2VuZXJhdG9yLlxuY2FsZW5kYXJfaWRzID0gWyhpLmlkLCBpLmNoYW5nZWtleSkgZm9yIGkgaW4gY2FsZW5kYXJfaXRlbXNdXG5pdGVtc19pdGVyID0gYS5mZXRjaChpZHM9Y2FsZW5kYXJfaWRzKVxuIyBJZiB5b3Ugb25seSB3YW50IHNvbWUgZmllbGRzLCB1c2UgdGhlICdvbmx5X2ZpZWxkcycgYXR0cmlidXRlXG5pdGVtc19pdGVyID0gYS5mZXRjaChpZHM9Y2FsZW5kYXJfaWRzLCBvbmx5X2ZpZWxkcz1bJ3N0YXJ0JywgJ3N1YmplY3QnXSlcblxuIyBCdWxrIHVwZGF0ZSBpdGVtcy4gRWFjaCBpdGVtIG11c3QgYmUgYWNjb21wYW5pZWQgYnkgYSBsaXN0IG9mIGF0dHJpYnV0ZXMgdG8gdXBkYXRlXG51cGRhdGVkX2lkcyA9IGEuYnVsa191cGRhdGUoaXRlbXM9WyhpLCAoJ3N0YXJ0JywgJ3N1YmplY3QnKSkgZm9yIGkgaW4gY2FsZW5kYXJfaXRlbXNdKVxuXG4jIE1vdmUgbWFueSBpdGVtcyB0byBhIG5ldyBmb2xkZXJcbm5ld19pZHMgPSBhLmJ1bGtfbW92ZShpZHM9Y2FsZW5kYXJfaWRzLCB0b19mb2xkZXI9YS5vdGhlcl9jYWxlbmRhcilcblxuIyBTZW5kIGRyYWZ0IG1lc3NhZ2VzIGluIGJ1bGtcbm1lc3NhZ2VfaWRzID0gYS5kcmFmdHMuYWxsKCkub25seSgnaWQnLCAnY2hhbmdla2V5Jylcbm5ld19pZHMgPSBhLmJ1bGtfc2VuZChpZHM9bWVzc2FnZV9pZHMsIHNhdmVfY29weT1GYWxzZSlcblxuIyBEZWxldGUgaW4gYnVsa1xuZGVsZXRlX3Jlc3VsdHMgPSBhLmJ1bGtfZGVsZXRlKGlkcz1jYWxlbmRhcl9pZHMpXG5cbiMgQnVsayBkZWxldGUgaXRlbXMgZm91bmQgYXMgYSBxdWVyeXNldFxuYS5pbmJveC5maWx0ZXIoc3ViamVjdF9fc3RhcnRzd2l0aD0nSW52b2ljZScpLmRlbGV0ZSgpXG5gYGBcblxuIyMgU2VhcmNoaW5nXG5cblNlYXJjaGluZyBpcyBtb2RlbGVkIGFmdGVyIHRoZSBEamFuZ28gUXVlcnlTZXQgQVBJLCBhbmQgYSBsYXJnZSBwYXJ0IG9mXG50aGUgQVBJIGlzIHN1cHBvcnRlZC4gTGlrZSBpbiBEamFuZ28sIHRoZSBRdWVyeVNldCBpcyBsYXp5IGFuZCBkb2Vzbid0XG5mZXRjaCBhbnl0aGluZyBiZWZvcmUgdGhlIFF1ZXJ5U2V0IGlzIGl0ZXJhdGVkLiBRdWVyeVNldHMgc3VwcG9ydFxuY2hhaW5pbmcsIHNvIHlvdSBjYW4gYnVpbGQgdGhlIGZpbmFsIHF1ZXJ5IGluIG11bHRpcGxlIHN0ZXBzLCBhbmQgeW91XG5jYW4gcmUtdXNlIGEgYmFzZSBRdWVyeVNldCBmb3IgbXVsdGlwbGUgc3ViLXNlYXJjaGVzLiBUaGUgUXVlcnlTZXRcbnJldHVybnMgYW4gaXRlcmF0b3IsIGFuZCByZXN1bHRzIGFyZSBjYWNoZWQgd2hlbiB0aGUgUXVlcnlTZXQgaXMgZnVsbHlcbml0ZXJhdGVkIHRoZSBmaXJzdCB0aW1lLlxuXG5IZXJlIGFyZSBzb21lIGV4YW1wbGVzIG9mIHVzaW5nIHRoZSBBUEk6XG5cbmBgYHB5dGhvblxuZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBBY2NvdW50LCBFV1NEYXRlVGltZSwgRm9sZGVyQ29sbGVjdGlvbiwgUVxuXG5hID0gQWNjb3VudCguLi4pXG5hbGxfaXRlbXMgPSBhLmluYm94LmFsbCgpICAjIEdldCBldmVyeXRoaW5nXG5hbGxfaXRlbXNfd2l0aG91dF9jYWNoaW5nID0gYS5pbmJveC5hbGwoKS5pdGVyYXRvcigpICAjIEdldCBldmVyeXRoaW5nLCBidXQgZG9uJ3QgY2FjaGVcbiMgQ2hhaW4gbXVsdGlwbGUgbW9kaWZpZXJzIHJvIHJlZmluZSB0aGUgcXVlcnlcbmZpbHRlcmVkX2l0ZW1zID0gYS5pbmJveC5maWx0ZXIoc3ViamVjdF9fY29udGFpbnM9J2ZvbycpLmV4Y2x1ZGUoY2F0ZWdvcmllc19faWNvbnRhaW5zPSdiYXInKVxuc3RhdHVzX3JlcG9ydCA9IGEuaW5ib3guYWxsKCkuZGVsZXRlKCkgICMgRGVsZXRlIHRoZSBpdGVtcyByZXR1cm5lZCBieSB0aGUgUXVlcnlTZXRcbnN0YXJ0ID0gYS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTcsIDEsIDEpKVxuZW5kID0gYS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTgsIDEsIDEpKVxuaXRlbXNfZm9yXzIwMTcgPSBhLmNhbGVuZGFyLmZpbHRlcihzdGFydF9fcmFuZ2U9KHN0YXJ0LCBlbmQpKSAgIyBGaWx0ZXIgYnkgYSBkYXRlIHJhbmdlXG5cbiMgU2FtZSBhcyBmaWx0ZXIoKSBidXQgdGhyb3dzIGFuIGVycm9yIGlmIGV4YWN0bHkgb25lIGl0ZW0gaXNuJ3QgcmV0dXJuZWRcbml0ZW0gPSBhLmluYm94LmdldChzdWJqZWN0PSd1bmlxdWVfc3RyaW5nJylcblxuIyBJZiB5b3Ugb25seSBoYXZlIHRoZSBJRCBhbmQgcG9zc2libHkgdGhlIGNoYW5nZWtleSBvZiBhbiBpdGVtLCB5b3UgY2FuIGdldCB0aGUgZnVsbCBpdGVtOlxuYS5pbmJveC5nZXQoaWQ9J0FBTWtBRFF5PScpXG5hLmluYm94LmdldChpZD0nQUFNa0FEUXk9JywgY2hhbmdla2V5PSdGd0FBQUJZQScpXG5cbiMgWW91IGNhbiBzb3J0IGJ5IGEgc2luZ2xlIG9yIG11bHRpcGxlIGZpZWxkcy4gUHJlZml4IGEgZmllbGQgd2l0aCAnLScgdG8gcmV2ZXJzZSB0aGUgc29ydGluZy4gXG4jIFNvcnRpbmcgaXMgZWZmaWNpZW50IHNpbmNlIGl0IGlzIGRvbmUgc2VydmVyLXNpZGUsIGV4Y2VwdCB3aGVuIGEgY2FsZW5kYXIgdmlldyBzb3J0aW5nIG9uIFxuIyBtdWx0aXBsZSBmaWVsZHMuXG5vcmRlcmVkX2l0ZW1zID0gYS5pbmJveC5hbGwoKS5vcmRlcl9ieSgnc3ViamVjdCcpXG5yZXZlcnNlX29yZGVyZWRfaXRlbXMgPSBhLmluYm94LmFsbCgpLm9yZGVyX2J5KCctc3ViamVjdCcpXG4gIyBJbmRleGVkIHByb3BlcnRpZXMgY2FuIGJlIG9yZGVyZWQgb24gdGhlaXIgaW5kaXZpZHVhbCBjb21wb25lbnRzXG5zb3J0ZWRfYnlfaG9tZV9zdHJlZXQgPSBhLmNvbnRhY3RzLmFsbCgpLm9yZGVyX2J5KCdwaHlzaWNhbF9hZGRyZXNzZXNfX0hvbWVfX3N0cmVldCcpXG4jIEJld2FyZSB0aGF0IHNvcnRpbmcgaXMgZG9uZSBjbGllbnQtc2lkZSBoZXJlXG5hLmNhbGVuZGFyLnZpZXcoc3RhcnQ9c3RhcnQsIGVuZD1lbmQpLm9yZGVyX2J5KCdzdWJqZWN0JywgJ2NhdGVnb3JpZXMnKVxuXG4jIENvdW50aW5nIGFuZCBleGlzdHNcbm4gPSBhLmluYm94LmFsbCgpLmNvdW50KCkgICMgRWZmaWNpZW50IGNvdW50aW5nXG5mb2xkZXJfaXNfZW1wdHkgPSBub3QgYS5pbmJveC5hbGwoKS5leGlzdHMoKSAgIyBFZmZpY2llbnQgdGFzdGluZ1xuXG4jIFJlc3RyaWN0aW5nIHJldHVybmVkIGF0dHJpYnV0ZXNcbnNwYXJzZV9pdGVtcyA9IGEuaW5ib3guYWxsKCkub25seSgnc3ViamVjdCcsICdzdGFydCcpXG4jIERpZyBkZWVwZXIgb24gaW5kZXhlZCBwcm9wZXJ0aWVzXG5zcGFyc2VfaXRlbXMgPSBhLmNvbnRhY3RzLmFsbCgpLm9ubHkoJ3Bob25lX251bWJlcnMnKVxuc3BhcnNlX2l0ZW1zID0gYS5jb250YWN0cy5hbGwoKS5vbmx5KCdwaG9uZV9udW1iZXJzX19DYXJQaG9uZScpXG5zcGFyc2VfaXRlbXMgPSBhLmNvbnRhY3RzLmFsbCgpLm9ubHkoJ3BoeXNpY2FsX2FkZHJlc3Nlc19fSG9tZV9fc3RyZWV0JylcblxuIyBSZXR1cm4gdmFsdWVzIGFzIGRpY3RzLCBub3Qgb2JqZWN0c1xuaWRzX2FzX2RpY3QgPSBhLmluYm94LmFsbCgpLnZhbHVlcygnaWQnLCAnY2hhbmdla2V5JylcbiMgUmV0dXJuIHZhbHVlcyBhcyBuZXN0ZWQgbGlzdHNcbnZhbHVlc19hc19saXN0ID0gYS5pbmJveC5hbGwoKS52YWx1ZXNfbGlzdCgnc3ViamVjdCcsICdib2R5JylcbiMgUmV0dXJuIHZhbHVlcyBhcyBhIGZsYXQgbGlzdFxuYWxsX3N1YmplY3RzID0gYS5pbmJveC5hbGwoKS52YWx1ZXNfbGlzdCgncGh5c2ljYWxfYWRkcmVzc2VzX19Ib21lX19zdHJlZXQnLCBmbGF0PVRydWUpXG5cbiMgQSBRdWVyeVNldCBjYW4gYmUgaW5kZXhlZCBhbmQgc2xpY2VkIGxpa2UgYSBub3JtYWwgUHl0aG9uIGxpc3QuIFNsaWNpbmcgYW5kIGluZGV4aW5nIG9mIHRoZVxuIyBRdWVyeVNldCBpcyBlZmZpY2llbnQgYmVjYXVzZSBpdCBvbmx5IGZldGNoZXMgdGhlIG5lY2Vzc2FyeSBpdGVtcyB0byBwZXJmb3JtIHRoZSBzbGljaW5nLlxuIyBTbGljaW5nIGZyb20gdGhlIGVuZCBpcyBhbHNvIGVmZmljaWVudCwgYnV0IHRoZW4geW91IG1pZ2h0IGFzIHdlbGwgcmV2ZXJzZSB0aGUgc29ydGluZy5cbmZpcnN0X3RlbiA9IGEuaW5ib3guYWxsKCkub3JkZXJfYnkoJy1zdWJqZWN0JylbOjEwXSAgIyBFZmZpY2llbnQuIFdlIG9ubHkgZmV0Y2ggMTAgaXRlbXNcbmxhc3RfdGVuID0gYS5pbmJveC5hbGwoKS5vcmRlcl9ieSgnLXN1YmplY3QnKVs6LTEwXSAgIyBFZmZpY2llbnQsIGJ1dCBjb252b2x1dGVkXG5uZXh0X3RlbiA9IGEuaW5ib3guYWxsKCkub3JkZXJfYnkoJy1zdWJqZWN0JylbMTA6MjBdICAjIEVmZmljaWVudC4gV2Ugb25seSBmZXRjaCAxMCBpdGVtc1xuc2luZ2xlX2l0ZW0gPSBhLmluYm94LmFsbCgpLm9yZGVyX2J5KCctc3ViamVjdCcpWzM0Mjk4XSAgIyBFZmZpY2llbnQuIFdlIG9ubHkgZmV0Y2ggMSBpdGVtXG50ZW5faXRlbXMgPSBhLmluYm94LmFsbCgpLm9yZGVyX2J5KCctc3ViamVjdCcpWzM0MjA6MzQzMF0gICMgRWZmaWNpZW50LiBXZSBvbmx5IGZldGNoIDEwIGl0ZW1zXG5yYW5kb21fZW1haWxzID0gYS5pbmJveC5hbGwoKS5vcmRlcl9ieSgnLXN1YmplY3QnKVs6OjNdICAjIFRoaXMgaXMganVzdCBzdHVwaWQsIGJ1dCB3b3Jrc1xuXG4jIFRoZSBzeW50YXggZm9yIGZpbHRlcigpIGlzIG1vZGVsZWQgYWZ0ZXIgRGphbmdvIFF1ZXJ5U2V0IGZpbHRlcnMuIFRoZSBmb2xsb3dpbmcgZmlsdGVyIGxvb2t1cCBcbiMgdHlwZXMgYXJlIHN1cHBvcnRlZC4gU29tZSBsb29rdXBzIG9ubHkgd29yayB3aXRoIHN0cmluZyBhdHRyaWJ1dGVzLiBSYW5nZSBhbmQgbGVzcy9ncmVhdGVyIFxuIyBvcGVyYXRvcnMgb25seSB3b3JrIGZvciBkYXRlIG9yIG51bWVyaWNhbCBhdHRyaWJ1dGVzLiBTb21lIGF0dHJpYnV0ZXMgYXJlIG5vdCBzZWFyY2hhYmxlIGF0IGFsbCBcbiMgdmlhIEVXUzpcbnFzID0gYS5jYWxlbmRhci5hbGwoKVxucXMuZmlsdGVyKHN1YmplY3Q9J2ZvbycpICAjIFJldHVybnMgaXRlbXMgd2hlcmUgc3ViamVjdCBpcyBleGFjdGx5ICdmb28nLiBDYXNlLXNlbnNpdGl2ZVxucXMuZmlsdGVyKHN0YXJ0X19yYW5nZT0oc3RhcnQsIGVuZCkpICAjIFJldHVybnMgaXRlbXMgd2l0aGluIHJhbmdlXG5xcy5maWx0ZXIoc3ViamVjdF9faW49KCdmb28nLCAnYmFyJykpICAjIFJldHVybiBpdGVtcyB3aGVyZSBzdWJqZWN0IGlzIGVpdGhlciAnZm9vJyBvciAnYmFyJ1xucXMuZmlsdGVyKHN1YmplY3RfX25vdD0nZm9vJykgICMgUmV0dXJucyBpdGVtcyB3aGVyZSBzdWJqZWN0IGlzIG5vdCAnZm9vJ1xucXMuZmlsdGVyKHN0YXJ0X19ndD1zdGFydCkgICMgUmV0dXJucyBpdGVtcyBzdGFydGluZyBhZnRlciAnZHQnXG5xcy5maWx0ZXIoc3RhcnRfX2d0ZT1zdGFydCkgICMgUmV0dXJucyBpdGVtcyBzdGFydGluZyBvbiBvciBhZnRlciAnZHQnXG5xcy5maWx0ZXIoc3RhcnRfX2x0PXN0YXJ0KSAgIyBSZXR1cm5zIGl0ZW1zIHN0YXJ0aW5nIGJlZm9yZSAnZHQnXG5xcy5maWx0ZXIoc3RhcnRfX2x0ZT1zdGFydCkgICMgUmV0dXJucyBpdGVtcyBzdGFydGluZyBvbiBvciBiZWZvcmUgJ2R0J1xucXMuZmlsdGVyKHN1YmplY3RfX2V4YWN0PSdmb28nKSAgIyBTYW1lIGFzIGZpbHRlcihzdWJqZWN0PSdmb28nKVxucXMuZmlsdGVyKHN1YmplY3RfX2lleGFjdD0nZm9vJykgICMgIFJldHVybnMgaXRlbXMgd2hlcmUgc3ViamVjdCBpcyAnZm9vJywgJ0ZPTycgb3IgJ0ZvbydcbnFzLmZpbHRlcihzdWJqZWN0X19jb250YWlucz0nZm9vJykgICMgUmV0dXJucyBpdGVtcyB3aGVyZSBzdWJqZWN0IGNvbnRhaW5zICdmb28nXG5xcy5maWx0ZXIoc3ViamVjdF9faWNvbnRhaW5zPSdmb28nKSAgIyBSZXR1cm5zIGl0ZW1zIHdoZXJlIHN1YmplY3QgY29udGFpbnMgJ2ZvbycsICdGT08nIG9yICdGb28nXG5xcy5maWx0ZXIoc3ViamVjdF9fc3RhcnRzd2l0aD0nZm9vJykgICMgUmV0dXJucyBpdGVtcyB3aGVyZSBzdWJqZWN0IHN0YXJ0cyB3aXRoICdmb28nXG4jIFJldHVybnMgaXRlbXMgd2hlcmUgc3ViamVjdCBzdGFydHMgd2l0aCAnZm9vJywgJ0ZPTycgb3IgJ0ZvbydcbnFzLmZpbHRlcihzdWJqZWN0X19pc3RhcnRzd2l0aD0nZm9vJylcbiMgUmV0dXJucyBpdGVtcyB0aGF0IGhhdmUgYXQgbGVhc3Qgb25lIGNhdGVnb3J5IGFzc2lnbmVkLCBpLmUuIHRoZSBmaWVsZCBleGlzdHMgb24gdGhlIGl0ZW0gb24gdGhlIFxuIyBzZXJ2ZXIuXG5xcy5maWx0ZXIoY2F0ZWdvcmllc19fZXhpc3RzPVRydWUpXG4jIFJldHVybnMgaXRlbXMgdGhhdCBoYXZlIG5vIGNhdGVnb3JpZXMgc2V0LCBpLmUuIHRoZSBmaWVsZCBkb2VzIG5vdCBleGlzdCBvbiB0aGUgaXRlbSBvbiB0aGUgXG4jIHNlcnZlci5cbnFzLmZpbHRlcihjYXRlZ29yaWVzX19leGlzdHM9RmFsc2UpXG5cbiMgZmlsdGVyKCkgYWxzbyBzdXBwb3J0cyBFV1MgUXVlcnlTdHJpbmdzLiBKdXN0IHBhc3MgdGhlIHN0cmluZyB0byBmaWx0ZXIoKS4gUXVlcnlTdHJpbmdzIGNhbm5vdFxuIyBiZSBjb21iaW5lZCB3aXRoIG90aGVyIGZpbHRlcnMuIFdlIG1ha2Ugbm8gYXR0ZW1wdCBhdCB2YWxpZGF0aW5nIHRoZSBzeW50YXggb2YgdGhlIFF1ZXJ5U3RyaW5nIFxuIyAtIHdlIGp1c3QgcGFzcyB0aGUgc3RyaW5nIHZlcmJhdGltIHRvIEVXUy5cbiNcbiMgUmVhZCBtb3JlIGFib3V0IHRoZSBRdWVyeVN0cmluZyBzeW50YXggaGVyZTpcbiMgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9lZTY5MzYxNS5hc3B4XG5hLmluYm94LmZpbHRlcignc3ViamVjdDpYWFgnKVxuXG4jIGZpbHRlcigpIGFsc28gc3VwcG9ydHMgUSBvYmplY3RzIHRoYXQgYXJlIG1vZGVsZWQgYWZ0ZXIgRGphbmdvIFEgb2JqZWN0cywgZm9yIGJ1aWxkaW5nIGNvbXBsZXhcbiMgYm9vbGVhbiBsb2dpYyBzZWFyY2ggZXhwcmVzc2lvbnMuXG5xID0gKFEoc3ViamVjdF9faWV4YWN0PSdmb28nKSB8IFEoc3ViamVjdF9fY29udGFpbnM9J2JhcicpKSAmIH5RKHN1YmplY3RfX3N0YXJ0c3dpdGg9J2JheicpXG5hLmluYm94LmZpbHRlcihxKVxuXG4jIEluIHRoaXMgZXhhbXBsZSwgd2UgZmlsdGVyIGJ5IGNhdGVnb3JpZXMgc28gd2Ugb25seSBnZXQgdGhlIGl0ZW1zIGNyZWF0ZWQgYnkgdXMuXG5hLmNhbGVuZGFyLmZpbHRlcihcbiAgICBzdGFydF9fbHQ9YS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTksIDEsIDEpKSxcbiAgICBlbmRfX2d0PWEuZGVmYXVsdF90aW1lem9uZS5sb2NhbGl6ZShFV1NEYXRlVGltZSgyMDE5LCAxLCAzMSkpLFxuICAgIGNhdGVnb3JpZXNfX2NvbnRhaW5zPVsnZm9vJywgJ2JhciddLFxuKVxuXG4jIEJ5IGRlZmF1bHQsIEVXUyByZXR1cm5zIG9ubHkgdGhlIG1hc3RlciByZWN1cnJpbmcgaXRlbS4gSWYgeW91IHdhbnQgcmVjdXJyaW5nIGNhbGVuZGFyXG4jIGl0ZW1zIHRvIGJlIGV4cGFuZGVkLCB1c2UgY2FsZW5kYXIudmlldyhzdGFydD0uLi4sIGVuZD0uLi4pIGluc3RlYWQuXG5pdGVtcyA9IGEuY2FsZW5kYXIudmlldyhcbiAgICBzdGFydD1hLmRlZmF1bHRfdGltZXpvbmUubG9jYWxpemUoRVdTRGF0ZVRpbWUoMjAxOSwgMSwgMzEpKSxcbiAgICBlbmQ9YS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTksIDEsIDMxKSkgKyB0aW1lZGVsdGEoZGF5cz0xKSxcbilcbmZvciBpdGVtIGluIGl0ZW1zOlxuICAgIHByaW50KGl0ZW0uc3RhcnQsIGl0ZW0uZW5kLCBpdGVtLnN1YmplY3QsIGl0ZW0uYm9keSwgaXRlbS5sb2NhdGlvbilcblxuIyBZb3UgY2FuIGNvbWJpbmUgdmlldygpIHdpdGggb3RoZXIgbW9kaWZpZXJzLiBGb3IgZXhhbXBsZSwgdG8gY2hlY2sgZm9yIGNvbmZsaWN0cyBiZWZvcmUgXG4jIGFkZGluZyBhIG1lZXRpbmcgZnJvbSA4OjAwIHRvIDEwOjAwOlxuaGFzX2NvbmZsaWN0cyA9IGEuY2FsZW5kYXIudmlldyhcbiAgICBzdGFydD1hLmRlZmF1bHRfdGltZXpvbmUubG9jYWxpemUoRVdTRGF0ZVRpbWUoMjAxOSwgMSwgMzEsIDgpKSxcbiAgICBlbmQ9YS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTksIDEsIDMxLCAxMCkpLFxuICAgIG1heF9pdGVtcz0xXG4pLmV4aXN0cygpXG5cbiMgVGhlIGZpbHRlcmluZyBzeW50YXggYWxzbyB3b3JrcyBvbiBjb2xsZWN0aW9ucyBvZiBmb2xkZXJzLCBzbyB5b3UgY2FuIHNlYXJjaCBtdWx0aXBsZSBmb2xkZXJzIGluIFxuIyBhIHNpbmdsZSByZXF1ZXN0LlxuYS5pbmJveC5jaGlsZHJlbi5maWx0ZXIoc3ViamVjdD0nZm9vJylcbmEuaW5ib3gud2FsaygpLmZpbHRlcihzdWJqZWN0PSdmb28nKVxuYS5pbmJveC5nbG9iKCdmb28qJykuZmlsdGVyKHN1YmplY3Q9J2ZvbycpXG4jIE9yIHNlbGVjdCB0aGUgZm9sZGVycyBpbmRpdmlkdWFsbHlcbkZvbGRlckNvbGxlY3Rpb24oYWNjb3VudD1hLCBmb2xkZXJzPVthLmluYm94LCBhLmNhbGVuZGFyXSkuZmlsdGVyKHN1YmplY3Q9J2ZvbycpXG5gYGBcblxuIyMgUGFnaW5nXG5cblBhZ2luZyBFV1Mgc2VydmljZXMsIGUuZy4gRmluZEl0ZW0gYW5kLCBoYXZlIGEgZGVmYXVsdCBwYWdlIHNpemUgb2YgMTAwLiBZb3UgY2FuXG5jaGFuZ2UgdGhpcyB2YWx1ZSBnbG9iYWxseSBpZiB5b3Ugd2FudDpcblxuYGBgcHl0aG9uXG5pbXBvcnQgZXhjaGFuZ2VsaWIuc2VydmljZXNcbmV4Y2hhbmdlbGliLnNlcnZpY2VzLkNIVU5LX1NJWkUgPSAyNVxuYGBgXG5cbklmIHlvdSBhcmUgd29ya2luZyB3aXRoIHZlcnkgc21hbGwgb3IgdmVyeSBsYXJnZSBpdGVtcywgdGhpcyBtYXkgbm90IGJlIGEgcmVhc29uYWJsZVxudmFsdWUuIEZvciBleGFtcGxlLCBpZiB5b3Ugd2FudCB0byByZXRyaWV2ZSBhbmQgc2F2ZSBlbWFpbHMgd2l0aCBsYXJnZSBhdHRhY2htZW50cyxcbnlvdSBjYW4gY2hhbmdlIHRoaXMgdmFsdWUgb24gYSBwZXItcXVlcnlzZXQgYmFzaXM6XG5cbmBgYHB5dGhvblxuZnJvbSBleGNoYW5nZWxpYiBpbXBvcnQgQWNjb3VudFxuXG5hID0gQWNjb3VudCguLi4pXG5xcyA9IGEuaW5ib3guYWxsKCkub25seSgnbWltZV9jb250ZW50JylcbnFzLnBhZ2Vfc2l6ZSA9IDVcbmZvciBtc2cgaW4gcXMuaXRlcmF0b3IoKTpcbiAgICB3aXRoIG9wZW4oJyVzLmVtbCcgJSBtc2cuaXRlbV9pZCwgJ3diJykgYXMgZjpcbiAgICAgICAgZi53cml0ZShtc2cubWltZV9jb250ZW50KVxuYGBgXG5cbkZpbmFsbHksIHRoZSBidWxrIG1ldGhvZHMgZGVmaW5lZCBvbiB0aGUgYEFjY291bnRgIGNsYXNzIGhhdmUgYW4gb3B0aW9uYWwgYGNodW5rX3NpemVgXG5hcmd1bWVudCB0aGF0IHlvdSBjYW4gdXNlIHRvIHNldCBhIG5vbi1kZWZhdWx0IHBhZ2Ugc2l6ZSB3aGVuIGZldGNoaW5nLCBjcmVhdGluZywgdXBkYXRpbmdcbm9yIGRlbGV0aW5nIGl0ZW1zLlxuXG5gYGBweXRob25cbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIE1lc3NhZ2VcblxuYSA9IEFjY291bnQoLi4uKVxuaHVnZV9saXN0X29mX2l0ZW1zID0gW01lc3NhZ2UoLi4uKSBmb3IgaSBpbiByYW5nZSgxMDAwMCldXG5yZXR1cm5faWRzID0gYS5idWxrX2NyZWF0ZShmb2xkZXI9YS5pbmJveCwgaXRlbXM9aHVnZV9saXN0X29mX2l0ZW1zLCBjaHVua19zaXplPTUpXG5gYGBcblxuIyMgTWVldGluZ3NcblxuVGhlIGBDYWxlbmRhckl0ZW1gIGNsYXNzIGFsbG93cyB5b3Ugc2VuZCBvdXQgcmVxdWVzdHMgZm9yIG1lZXRpbmdzIHRoYXRcbnlvdSBpbml0aWF0ZSBvciB0byBjYW5jZWwgbWVldGluZ3MgdGhhdCB5b3UgYWxyZWFkeSBzZXQgb3V0IGJlZm9yZS4gSXRcbmlzIGFsc28gcG9zc2libGUgdG8gcHJvY2VzcyBgTWVldGluZ1JlcXVlc3RgIG1lc3NhZ2VzIHRoYXQgYXJlIHJlY2VpdmVkLlxuWW91IGNhbiByZXBseSB0byB0aGVzZSBtZXNzYWdlcyB1c2luZyB0aGUgYEFjY2VwdEl0ZW1gLFxuYFRlbnRhdGl2ZWx5QWNjZXB0SXRlbWAgYW5kIGBEZWNsaW5lSXRlbWAgY2xhc3Nlcy4gSWYgeW91IHJlY2VpdmUgYVxuY2FuY2VsbGF0aW9uIGZvciBhIG1lZXRpbmcgKGNsYXNzIGBNZWV0aW5nQ2FuY2VsbGF0aW9uYCkgdGhhdCB5b3VcbmFscmVhZHkgYWNjZXB0ZWQgdGhlbiB5b3UgY2FuIGFsc28gcHJvY2VzcyB0aGVzZSBieSByZW1vdmluZyB0aGUgZW50cnlcbmZyb20gdGhlIGNhbGVuZGFyLlxuXG5gYGBweXRob25cbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIENhbGVuZGFySXRlbSwgRVdTRGF0ZVRpbWVcbmZyb20gZXhjaGFuZ2VsaWIuaXRlbXMgaW1wb3J0IE1lZXRpbmdSZXF1ZXN0LCBNZWV0aW5nQ2FuY2VsbGF0aW9uLCBTRU5EX1RPX0FMTF9BTkRfU0FWRV9DT1BZXG5cbmEgPSBBY2NvdW50KC4uLilcblxuIyBjcmVhdGUgYSBtZWV0aW5nIHJlcXVlc3QgYW5kIHNlbmQgaXQgb3V0XG5pdGVtID0gQ2FsZW5kYXJJdGVtKFxuICAgIGFjY291bnQ9YSxcbiAgICBmb2xkZXI9YS5jYWxlbmRhcixcbiAgICBzdGFydD1hLmRlZmF1bHRfdGltZXpvbmUubG9jYWxpemUoRVdTRGF0ZVRpbWUoMjAxOSwgMSwgMzEsIDgsIDE1KSksXG4gICAgZW5kPWEuZGVmYXVsdF90aW1lem9uZS5sb2NhbGl6ZShFV1NEYXRlVGltZSgyMDE5LCAxLCAzMSwgOCwgNDUpKSxcbiAgICBzdWJqZWN0PVwiU3ViamVjdCBvZiBNZWV0aW5nXCIsXG4gICAgYm9keT1cIlBsZWFzZSBjb21lIHRvIG15IG1lZXRpbmdcIixcbiAgICByZXF1aXJlZF9hdHRlbmRlZXM9Wydhbm5lQGV4YW1wbGUuY29tJywgJ2JvYkBleGFtcGxlLmNvbSddXG4pXG5pdGVtLnNhdmUoc2VuZF9tZWV0aW5nX2ludml0YXRpb25zPVNFTkRfVE9fQUxMX0FORF9TQVZFX0NPUFkpXG5cbiMgY2FuY2VsIGEgbWVldGluZyB0aGF0IHdhcyBzZW50IG91dCB1c2luZyB0aGUgQ2FsZW5kYXJJdGVtIGNsYXNzXG5mb3IgY2FsZW5kYXJfaXRlbSBpbiBhLmNhbGVuZGFyLmFsbCgpLm9yZGVyX2J5KCctZGF0ZXRpbWVfcmVjZWl2ZWQnKVs6NV06XG4gICAgIyBvbmx5IHRoZSBvcmdhbml6ZXIgb2YgYSBtZWV0aW5nIGNhbiBjYW5jZWwgaXRcbiAgICBpZiBjYWxlbmRhcl9pdGVtLm9yZ2FuaXplci5lbWFpbF9hZGRyZXNzID09IGEucHJpbWFyeV9zbXRwX2FkZHJlc3M6XG4gICAgICAgIGNhbGVuZGFyX2l0ZW0uY2FuY2VsKClcblxuIyBwcm9jZXNzaW5nIGFuIGluY29taW5nIE1lZXRpbmdSZXF1ZXN0XG5mb3IgaXRlbSBpbiBhLmluYm94LmFsbCgpLm9yZGVyX2J5KCctZGF0ZXRpbWVfcmVjZWl2ZWQnKVs6NV06XG4gICAgaWYgaXNpbnN0YW5jZShpdGVtLCBNZWV0aW5nUmVxdWVzdCk6XG4gICAgICAgIGl0ZW0uYWNjZXB0KGJvZHk9XCJTdXJlLCBJJ2xsIGNvbWVcIilcbiAgICAgICAgIyBPcjpcbiAgICAgICAgaXRlbS5kZWNsaW5lKGJvZHk9XCJObyB3YXkhXCIpXG4gICAgICAgICMgT3I6XG4gICAgICAgIGl0ZW0udGVudGF0aXZlbHlfYWNjZXB0KGJvZHk9XCJNYXliZS4uLlwiKVxuXG4jIG1lZXRpbmcgcmVxdWVzdHMgY2FuIGFsc28gYmUgaGFuZGxlZCBmcm9tIHRoZSBjYWxlbmRhciAtIGUuZy4gZGVjbGluZSB0aGUgbWVldGluZyB0aGF0IHdhcyBcbiMgcmVjZWl2ZWQgbGFzdC5cbmZvciBjYWxlbmRhcl9pdGVtIGluIGEuY2FsZW5kYXIuYWxsKCkub3JkZXJfYnkoJy1kYXRldGltZV9yZWNlaXZlZCcpWzoxXTpcbiAgICBjYWxlbmRhcl9pdGVtLmRlY2xpbmUoKVxuXG4jIHByb2Nlc3NpbmcgYW4gaW5jb21pbmcgTWVldGluZ0NhbmNlbGxhdGlvbiAoYWxzbyBkZWxldGUgZnJvbSBjYWxlbmRhcilcbmZvciBpdGVtIGluIGEuaW5ib3guYWxsKCkub3JkZXJfYnkoJy1kYXRldGltZV9yZWNlaXZlZCcpWzo1XTpcbiAgICBpZiBpc2luc3RhbmNlKGl0ZW0sIE1lZXRpbmdDYW5jZWxsYXRpb24pOlxuICAgICAgICBpZiBpdGVtLmFzc29jaWF0ZWRfY2FsZW5kYXJfaXRlbV9pZDpcbiAgICAgICAgICAgIGNhbGVuZGFyX2l0ZW0gPSBhLmluYm94LmdldChcbiAgICAgICAgICAgICAgICBpZD1pdGVtLmFzc29jaWF0ZWRfY2FsZW5kYXJfaXRlbV9pZC5pZCxcbiAgICAgICAgICAgICAgICBjaGFuZ2VrZXk9aXRlbS5hc3NvY2lhdGVkX2NhbGVuZGFyX2l0ZW1faWQuY2hhbmdla2V5XG4gICAgICAgICAgICApXG4gICAgICAgICAgICBjYWxlbmRhcl9pdGVtLmRlbGV0ZSgpXG4gICAgICAgIGl0ZW0ubW92ZV90b190cmFzaCgpXG5gYGBcblxuIyMgU2VhcmNoaW5nIGNvbnRhY3RzXG5cbkZldGNoaW5nIHBlcnNvbmFzIGZyb20gYSBjb250YWN0IGZvbGRlciBpcyBzdXBwb3J0ZWQgdXNpbmcgdGhlIHNhbWVcbnN5bnRheCBhcyBmb2xkZXJzLiBKdXN0IHN0YXJ0IHlvdXIgcXVlcnkgd2l0aCBgLnBlb3BsZSgpYDpcblxuYGBgcHl0aG9uXG4jIE5hdmlnYXRlIHRvIGEgY29udGFjdCBmb2xkZXIgYW5kIHN0YXJ0IHRoZSBzZWFyY2hcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnRcblxuYSA9IEFjY291bnQoLi4uKVxuZm9sZGVyID0gYS5yb290IC8gJ0FsbENvbnRhY3RzJ1xuZm9yIHAgaW4gZm9sZGVyLnBlb3BsZSgpOlxuICAgIHByaW50KHApXG5mb3IgcCBpbiBmb2xkZXIucGVvcGxlKCkub25seSgnZGlzcGxheV9uYW1lJykuZmlsdGVyKGRpc3BsYXlfbmFtZT0nam9obicpLm9yZGVyX2J5KCdkaXNwbGF5X25hbWUnKTpcbiAgICBwcmludChwKVxuYGBgXG5cbiMjIEV4dGVuZGVkIHByb3BlcnRpZXNcblxuRXh0ZW5kZWQgcHJvcGVydGllcyBtYWtlcyBpdCBwb3NzaWJsZSB0byBhdHRhY2ggY3VzdG9tIGtleS12YWx1ZSBwYWlyc1xudG8gaXRlbXMgYW5kIGZvbGRlcnMgb24gdGhlIEV4Y2hhbmdlIHNlcnZlci4gVGhlcmUgYXJlIG11bHRpcGxlIG9ubGluZVxucmVzb3VyY2VzIHRoYXQgZGVzY3JpYmUgd29ya2luZyB3aXRoIGV4dGVuZGVkIHByb3BlcnRpZXMsIGFuZCBsaXN0IG1hbnlcbm9mIHRoZSBtYWdpYyB2YWx1ZXMgdGhhdCBhcmUgdXNlZCBieSBleGlzdGluZyBFeGNoYW5nZSBjbGllbnRzIHRvIHN0b3JlXG5jb21tb24gYW5kIGN1c3RvbSBwcm9wZXJ0aWVzLiBUaGUgZm9sbG93aW5nIGlzIG5vdCBhIGNvbXByZWhlbnNpdmVcbmRlc2NyaXB0aW9uIG9mIHRoZSBwb3NzaWJpbGl0aWVzLCBidXQgd2UgZG8gaW50ZW5kIHRvIHN1cHBvcnQgYWxsIHRoZVxucG9zc2liaWxpdGllcyBwcm92aWRlZCBieSBFV1MuXG5cbmBgYHB5dGhvblxuIyBJZiBmb2xkZXIgaXRlbXMgaGF2ZSBleHRlbmRlZCBwcm9wZXJ0aWVzLCB5b3UgbmVlZCB0byByZWdpc3RlciB0aGVtIGJlZm9yZSB5b3UgY2FuIGFjY2VzcyB0aGVtLiBcbiMgQ3JlYXRlIGEgc3ViY2xhc3Mgb2YgRXh0ZW5kZWRQcm9wZXJ0eSBhbmQgZGVmaW5lIGEgc2V0IG9mIG1hdGNoaW5nIHNldHVwIHZhbHVlczpcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIEV4dGVuZGVkUHJvcGVydHksIENhbGVuZGFySXRlbSwgRm9sZGVyLCBNZXNzYWdlXG5cbmEgPSBBY2NvdW50KC4uLilcblxuY2xhc3MgTHVuY2hNZW51KEV4dGVuZGVkUHJvcGVydHkpOlxuICAgIHByb3BlcnR5X3NldF9pZCA9ICcxMjM0NTY3OC0xMjM0LTEyMzQtMTIzNC0xMjM0NTY3ODEyMzQnXG4gICAgcHJvcGVydHlfbmFtZSA9ICdDYXRlcmluZyBmcm9tIHRoZSBjYWZldGVyaWEnXG4gICAgcHJvcGVydHlfdHlwZSA9ICdTdHJpbmcnXG5cbiMgUmVnaXN0ZXIgdGhlIHByb3BlcnR5IG9uIHRoZSBpdGVtIHR5cGUgb2YgeW91ciBjaG9pY2VcbkNhbGVuZGFySXRlbS5yZWdpc3RlcignbHVuY2hfbWVudScsIEx1bmNoTWVudSlcbiMgTm93IHlvdXIgcHJvcGVydHkgaXMgYXZhaWxhYmxlIGFzIHRoZSBhdHRyaWJ1dGUgJ2x1bmNoX21lbnUnLCBqdXN0IGxpa2UgYW55IG90aGVyIGF0dHJpYnV0ZVxuaXRlbSA9IENhbGVuZGFySXRlbSguLi4sIGx1bmNoX21lbnU9J0ZvaWUgZ3JhcyBldCBjb25zb21tw6kgZGUgbMOpZ3VtZXMnKVxuaXRlbS5zYXZlKClcbmZvciBpIGluIGEuY2FsZW5kYXIuYWxsKCk6XG4gICAgcHJpbnQoaS5sdW5jaF9tZW51KVxuIyBJZiB5b3UgY2hhbmdlIHlvdXIgbWluZCwganN1dCByZW1vdmUgdGhlIHByb3BlcnR5IGFnYWluXG5DYWxlbmRhckl0ZW0uZGVyZWdpc3RlcignbHVuY2hfbWVudScpXG5cbiMgWW91IGNhbiBhbHNvIGNyZWF0ZSBuYW1lZCBwcm9wZXJ0aWVzIChlLmcuIGNyZWF0ZWQgZnJvbSBVc2VyIERlZmluZWQgRmllbGRzIGluIE91dGxvb2ssIHNlZSBcbiMgaXNzdWUgIzEzNyk6XG5jbGFzcyBMdW5jaE1lbnUoRXh0ZW5kZWRQcm9wZXJ0eSk6XG4gICAgZGlzdGluZ3Vpc2hlZF9wcm9wZXJ0eV9zZXRfaWQgPSAnUHVibGljU3RyaW5ncydcbiAgICBwcm9wZXJ0eV9uYW1lID0gJ0NhdGVyaW5nIGZyb20gdGhlIGNhZmV0ZXJpYSdcbiAgICBwcm9wZXJ0eV90eXBlID0gJ1N0cmluZydcblxuIyBXZSBzdXBwb3J0IGV4dGVuZGVkIHByb3BlcnRpZXMgd2l0aCB0YWdzLiBUaGlzIGlzIHRoZSBkZWZpbml0aW9uIGZvciB0aGUgJ2NvbXBsZXRlZCcgYW5kIFxuIyAnZm9sbG93dXAnIGZsYWcgeW91IGNhbiBhZGQgdG8gaXRlbXMgaW4gT3V0bG9vayAoc2VlIGFsc28gaXNzdWUgIzg1KTpcbmNsYXNzIEZsYWcoRXh0ZW5kZWRQcm9wZXJ0eSk6XG4gICAgcHJvcGVydHlfdGFnID0gMHgxMDkwXG4gICAgcHJvcGVydHlfdHlwZSA9ICdJbnRlZ2VyJ1xuXG4jIE9yIHdpdGggcHJvcGVydHkgSUQ6XG5jbGFzcyBNeU1lZXRpbmdBcnJheShFeHRlbmRlZFByb3BlcnR5KTpcbiAgICBwcm9wZXJ0eV9zZXRfaWQgPSAnMDAwNjIwMDQtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2J1xuICAgIHByb3BlcnR5X3R5cGUgPSAnQmluYXJ5QXJyYXknXG4gICAgcHJvcGVydHlfaWQgPSAzMjg1MlxuXG4jIE9yIHVzaW5nIGRpc3Rpbmd1aXNoZWQgcHJvcGVydHkgc2V0cyBjb21iaW5lZCB3aXRoIHByb3BlcnR5IElEIChoZXJlIGFzIGEgaGV4IHZhbHVlIHRvIGFsaWduIFxuIyB3aXRoIHRoZSBmb3JtYXQgdXN1YWxseSBtZW50aW9uZWQgaW4gTWljcm9zb2Z0IGRvY3MpLiBUaGlzIGlzIHRoZSBkZWZpbml0aW9uIGZvciBhIHJlc3BvbnNlIHRvXG4jIGFuIE91dGxvb2sgVm90ZSByZXF1ZXN0IChzZWUgaXNzdWUgIzE5OCk6XG5jbGFzcyBWb3RlUmVzcG9uc2UoRXh0ZW5kZWRQcm9wZXJ0eSk6XG4gICAgZGlzdGluZ3Vpc2hlZF9wcm9wZXJ0eV9zZXRfaWQgPSAnQ29tbW9uJ1xuICAgIHByb3BlcnR5X2lkID0gMHgwMDAwODUyNFxuICAgIHByb3BlcnR5X3R5cGUgPSAnU3RyaW5nJ1xuXG4jIEV4dGVuZGVkIHByb3BlcnRpZXMgYWxzbyB3b3JrIHdpdGggZm9sZGVycy4gSGVyZSdzIGFuIGV4YW1wbGUgb2YgZ2V0dGluZyB0aGUgc2l6ZSAoaW4gYnl0ZXMpIG9mXG4jIGEgZm9sZGVyOlxuY2xhc3MgRm9sZGVyU2l6ZShFeHRlbmRlZFByb3BlcnR5KTpcbiAgICBwcm9wZXJ0eV90YWcgPSAweDBlMDhcbiAgICBwcm9wZXJ0eV90eXBlID0gJ0ludGVnZXInXG5cbkZvbGRlci5yZWdpc3Rlcignc2l6ZScsIEZvbGRlclNpemUpXG5wcmludChhLmluYm94LnNpemUpXG5cbiMgSW4gZ2VuZXJhbCwgaGVyZSdzIGhvdyB0byB3b3JrIHdpdGggYW55IE1BUEkgcHJvcGVydHkgYXMgbGlzdGVkIGluIGUuZy5cbiMgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vRU4tVVMvbGlicmFyeS9vZmZpY2UvY2M4MTU1MTcuYXNweC4gTGV0J3MgdGFrZSBgUGlkTGlkVGFza0R1ZURhdGVgIGFzXG4jIGFuIGV4YW1wbGUuIFRoaXMgaXMgdGhlIGR1ZSBkYXRlIGZvciBhIG1lc3NhZ2UgbWFrZWQgd2l0aCB0aGUgZm9sbG93LXVwIGZsYWcgaW4gTWljcm9zb2Z0IFxuIyBPdXRsb29rLlxuI1xuIyBQaWRMaWRUYXNrRHVlRGF0ZSBpcyBkb2N1bWVudGVkIGF0IGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvb2ZmaWNlL2NjODM5NjQxLmFzcHguXG4jIFRoZSBwcm9wZXJ0eSBJRCBpcyBgMHgwMDAwODEwNWAgYW5kIHRoZSBwcm9wZXJ0eSBzZXQgaXMgYFBTRVRJRF9UYXNrYC4gQnV0IEVXUyB3YW50cyB0aGUgVVVJRCBmb3JcbiMgYFBTRVRJRF9UYXNrYCwgc28gd2UgbG9vayB0aGF0IHVwIGluIHRoZSBNUy1PWFBST1BTIHBkZjpcbiMgaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9jYzQzMzQ5MCh2PWV4Y2hnLjgwKS5hc3B4LiBUaGUgVVVJRCBpc1xuIyBgMDAwNjIwMDMtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2YC4gVGhlIHByb3BlcnR5IHR5cGUgaXMgYFBUX1NZU1RJTUVgIHdoaWNoIGlzIGFsc28gY2FsbGVkXG4jIGBTeXN0ZW1UaW1lYCAoc2VlXG4jIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbWljcm9zb2Z0LmV4Y2hhbmdlLndlYnNlcnZpY2VzLmRhdGEubWFwaXByb3BlcnR5dHlwZSh2PWV4Y2hnLjgwKS5hc3B4KS5cbiNcbiMgSW4gY29uY2x1c2lvbiwgdGhlIGRlZmluaXRpb24gZm9yIHRoZSBkdWUgZGF0ZSBiZWNvbWVzOlxuXG5jbGFzcyBGbGFnRHVlKEV4dGVuZGVkUHJvcGVydHkpOlxuICAgIHByb3BlcnR5X3NldF9pZCA9ICcwMDA2MjAwMy0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYnXG4gICAgcHJvcGVydHlfaWQgPSAweDgxMDVcbiAgICBwcm9wZXJ0eV90eXBlID0gJ1N5c3RlbVRpbWUnXG5cbk1lc3NhZ2UucmVnaXN0ZXIoJ2ZsYWdfZHVlJywgRmxhZ0R1ZSlcbmBgYFxuXG4jIyBBdHRhY2htZW50c1xuXG5gYGBweXRob25cbiMgSXQncyBwb3NzaWJsZSB0byBjcmVhdGUsIGRlbGV0ZSBhbmQgZ2V0IGF0dGFjaG1lbnRzIGNvbm5lY3RlZCB0byBhbnkgaXRlbSB0eXBlOlxuIyBQcm9jZXNzIGF0dGFjaG1lbnRzIG9uIGV4aXN0aW5nIGl0ZW1zLiBGaWxlQXR0YWNobWVudHMgaGF2ZSBhICdjb250ZW50JyBhdHRyaWJ1dGVcbiMgY29udGFpbmluZyB0aGUgYmluYXJ5IGNvbnRlbnQgb2YgdGhlIGZpbGUsIGFuZCBJdGVtQXR0YWNobWVudHMgaGF2ZSBhbiAnaXRlbScgYXR0cmlidXRlXG4jIGNvbnRhaW5pbmcgdGhlIGl0ZW0uIFRoZSBpdGVtIGNhbiBiZSBhIE1lc3NhZ2UsIENhbGVuZGFySXRlbSwgVGFzayBldGMuXG5pbXBvcnQgb3MucGF0aFxuZnJvbSBleGNoYW5nZWxpYiBpbXBvcnQgQWNjb3VudCwgRmlsZUF0dGFjaG1lbnQsIEl0ZW1BdHRhY2htZW50LCBNZXNzYWdlLCBDYWxlbmRhckl0ZW0sIEhUTUxCb2R5XG5cbmEgPSBBY2NvdW50XG5mb3IgaXRlbSBpbiBhLmluYm94LmFsbCgpOlxuICAgIGZvciBhdHRhY2htZW50IGluIGl0ZW0uYXR0YWNobWVudHM6XG4gICAgICAgIGlmIGlzaW5zdGFuY2UoYXR0YWNobWVudCwgRmlsZUF0dGFjaG1lbnQpOlxuICAgICAgICAgICAgbG9jYWxfcGF0aCA9IG9zLnBhdGguam9pbignL3RtcCcsIGF0dGFjaG1lbnQubmFtZSlcbiAgICAgICAgICAgIHdpdGggb3Blbihsb2NhbF9wYXRoLCAnd2InKSBhcyBmOlxuICAgICAgICAgICAgICAgIGYud3JpdGUoYXR0YWNobWVudC5jb250ZW50KVxuICAgICAgICAgICAgcHJpbnQoJ1NhdmVkIGF0dGFjaG1lbnQgdG8nLCBsb2NhbF9wYXRoKVxuICAgICAgICBlbGlmIGlzaW5zdGFuY2UoYXR0YWNobWVudCwgSXRlbUF0dGFjaG1lbnQpOlxuICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShhdHRhY2htZW50Lml0ZW0sIE1lc3NhZ2UpOlxuICAgICAgICAgICAgICAgIHByaW50KGF0dGFjaG1lbnQuaXRlbS5zdWJqZWN0LCBhdHRhY2htZW50Lml0ZW0uYm9keSlcblxuIyBTdHJlYW1pbmcgZG93bmxvYWRzIG9mIGZpbGUgYXR0YWNobWVudCBpcyBzdXBwb3J0ZWQuIFRoaXMgcmVkdWNlcyBtZW1vcnkgY29uc3VtcHRpb24gc2luY2Ugd2VcbiMgbmV2ZXIgc3RvcmUgdGhlIGZ1bGwgY29udGVudCBvZiB0aGUgZmlsZSBpbi1tZW1vcnk6XG5mb3IgaXRlbSBpbiBhLmluYm94LmFsbCgpOlxuICAgIGZvciBhdHRhY2htZW50IGluIGl0ZW0uYXR0YWNobWVudHM6XG4gICAgICAgIGlmIGlzaW5zdGFuY2UoYXR0YWNobWVudCwgRmlsZUF0dGFjaG1lbnQpOlxuICAgICAgICAgICAgbG9jYWxfcGF0aCA9IG9zLnBhdGguam9pbignL3RtcCcsIGF0dGFjaG1lbnQubmFtZSlcbiAgICAgICAgICAgIHdpdGggb3Blbihsb2NhbF9wYXRoLCAnd2InKSBhcyBmLCBhdHRhY2htZW50LmZwIGFzIGZwOlxuICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGZwLnJlYWQoMTAyNClcbiAgICAgICAgICAgICAgICB3aGlsZSBidWZmZXI6XG4gICAgICAgICAgICAgICAgICAgIGYud3JpdGUoYnVmZmVyKVxuICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBmcC5yZWFkKDEwMjQpXG4gICAgICAgICAgICBwcmludCgnU2F2ZWQgYXR0YWNobWVudCB0bycsIGxvY2FsX3BhdGgpXG5cbiMgQ3JlYXRlIGEgbmV3IGl0ZW0gd2l0aCBhbiBhdHRhY2htZW50XG5pdGVtID0gTWVzc2FnZSguLi4pXG5iaW5hcnlfZmlsZV9jb250ZW50ID0gJ0hlbGxvIGZyb20gdW5pY29kZSDDpsO4w6UnLmVuY29kZSgndXRmLTgnKSAgIyBPciByZWFkIGZyb20gZmlsZSwgQnl0ZXNJTyBldGMuXG5teV9maWxlID0gRmlsZUF0dGFjaG1lbnQobmFtZT0nbXlfZmlsZS50eHQnLCBjb250ZW50PWJpbmFyeV9maWxlX2NvbnRlbnQpXG5pdGVtLmF0dGFjaChteV9maWxlKVxubXlfY2FsZW5kYXJfaXRlbSA9IENhbGVuZGFySXRlbSguLi4pXG5teV9hcHBvaW50bWVudCA9IEl0ZW1BdHRhY2htZW50KG5hbWU9J215X2FwcG9pbnRtZW50JywgaXRlbT1teV9jYWxlbmRhcl9pdGVtKVxuaXRlbS5hdHRhY2gobXlfYXBwb2ludG1lbnQpXG5pdGVtLnNhdmUoKVxuXG4jIEFkZCBhbiBhdHRhY2htZW50IG9uIGFuIGV4aXN0aW5nIGl0ZW1cbm15X290aGVyX2ZpbGUgPSBGaWxlQXR0YWNobWVudChuYW1lPSdteV9vdGhlcl9maWxlLnR4dCcsIGNvbnRlbnQ9YmluYXJ5X2ZpbGVfY29udGVudClcbml0ZW0uYXR0YWNoKG15X290aGVyX2ZpbGUpXG5cbiMgUmVtb3ZlIHRoZSBhdHRhY2htZW50IGFnYWluXG5pdGVtLmRldGFjaChteV9maWxlKVxuXG4jIElmIHlvdSB3YW50IHRvIGVtYmVkIGFuIGltYWdlIGluIHRoZSBpdGVtIGJvZHksIHlvdSBjYW4gbGluayB0byB0aGUgZmlsZSBpbiB0aGUgSFRNTFxubWVzc2FnZSA9IE1lc3NhZ2UoLi4uKVxubG9nb19maWxlbmFtZSA9ICdsb2dvLnBuZydcbndpdGggb3Blbihsb2dvX2ZpbGVuYW1lLCAncmInKSBhcyBmOlxuICAgIG15X2xvZ28gPSBGaWxlQXR0YWNobWVudChuYW1lPWxvZ29fZmlsZW5hbWUsIGNvbnRlbnQ9Zi5yZWFkKCksIGlzX2lubGluZT1UcnVlLCBjb250ZW50X2lkPWxvZ29fZmlsZW5hbWUpXG5tZXNzYWdlLmF0dGFjaChteV9sb2dvKVxubWVzc2FnZS5ib2R5ID0gSFRNTEJvZHkoJzxodG1sPjxib2R5PkhlbGxvIGxvZ286IDxpbWcgc3JjPVwiY2lkOiVzXCI+PC9ib2R5PjwvaHRtbD4nICUgbG9nb19maWxlbmFtZSlcblxuIyBBdHRhY2htZW50cyBjYW5ub3QgYmUgdXBkYXRlZCB2aWEgRVdTLiBJbiB0aGlzIGNhc2UsIHlvdSBtdXN0IHRvIGRldGFjaCB0aGUgYXR0YWNobWVudCwgdXBkYXRlXG4jIHRoZSByZWxldmFudCBmaWVsZHMsIGFuZCBhdHRhY2ggdGhlIHVwZGF0ZWQgYXR0YWNobWVudC5cblxuIyBCZSBhd2FyZSB0aGF0IGFkZGluZyBhbmQgZGVsZXRpbmcgYXR0YWNobWVudHMgZnJvbSBpdGVtcyB0aGF0IGFyZSBhbHJlYWR5IGNyZWF0ZWQgaW4gRXhjaGFuZ2VcbiMgKGl0ZW1zIHRoYXQgaGF2ZSBhbiBpdGVtX2lkKSB3aWxsIHVwZGF0ZSB0aGUgY2hhbmdla2V5IG9mIHRoZSBpdGVtLlxuYGBgXG5cbiMjIFJlY3VycmluZyBjYWxlbmRhciBpdGVtc1xuXG5UaGVyZSBpcyBmdWxsIHJlYWQtd3JpdGUgc3VwcG9ydCBmb3IgY3JlYXRpbmcgcmVjdXJyaW5nIGNhbGVuZGFyIGl0ZW1zLlxuWW91IGNhbiBjcmVhdGUgZGFpbHksIHdlZWtseSwgbW9udGhseSBhbmQgeWVhcmx5IHJlY3VycmVuY2VzICh0aGUgbGF0dGVyXG50d28gaW4gcmVsYXRpdmUgYW5kIGFic29sdXRlIHZlcnNpb25zKS5cblxuSGVyZSdzIGFuIGV4YW1wbGUgb2YgY3JlYXRpbmcgNyBvY2N1cnJlbmNlcyBvbiBNb25kYXlzIGFuZCBXZWRuZXNkYXlzIG9mXG5ldmVyeSB0aGlyZCB3ZWVrLCBzdGFydGluZyBTZXB0ZW1iZXIgMSwgMjAxNzpcblxuYGBgcHl0aG9uXG5mcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lZGVsdGFcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIENhbGVuZGFySXRlbSwgRVdTRGF0ZVRpbWVcbmZyb20gZXhjaGFuZ2VsaWIuZmllbGRzIGltcG9ydCBNT05EQVksIFdFRE5FU0RBWVxuZnJvbSBleGNoYW5nZWxpYi5yZWN1cnJlbmNlIGltcG9ydCBSZWN1cnJlbmNlLCBXZWVrbHlQYXR0ZXJuXG5cbmEgPSBBY2NvdW50KC4uLilcbnN0YXJ0ID0gYS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTcsIDksIDEsIDExKSlcbmVuZCA9IHN0YXJ0ICsgdGltZWRlbHRhKGhvdXJzPTIpXG5pdGVtID0gQ2FsZW5kYXJJdGVtKFxuICAgIGZvbGRlcj1hLmNhbGVuZGFyLFxuICAgIHN0YXJ0PXN0YXJ0LFxuICAgIGVuZD1lbmQsXG4gICAgc3ViamVjdD0nSGVsbG8gUmVjdXJyZW5jZScsXG4gICAgcmVjdXJyZW5jZT1SZWN1cnJlbmNlKFxuICAgICAgICBwYXR0ZXJuPVdlZWtseVBhdHRlcm4oaW50ZXJ2YWw9Mywgd2Vla2RheXM9W01PTkRBWSwgV0VETkVTREFZXSksXG4gICAgICAgIHN0YXJ0PXN0YXJ0LmRhdGUoKSxcbiAgICAgICAgbnVtYmVyPTdcbiAgICApLFxuKVxuXG4jIE9jY3VycmVuY2UgZGF0YSBmb3IgdGhlIG1hc3RlciBpdGVtXG5mb3IgaSBpbiBhLmNhbGVuZGFyLmZpbHRlcihzdGFydF9fbHQ9ZW5kLCBlbmRfX2d0PXN0YXJ0KTpcbiAgICBwcmludChpLnN1YmplY3QsIGkuc3RhcnQsIGkuZW5kKVxuICAgIHByaW50KGkucmVjdXJyZW5jZSlcbiAgICBwcmludChpLmZpcnN0X29jY3VycmVuY2UpXG4gICAgcHJpbnQoaS5sYXN0X29jY3VycmVuY2UpXG4gICAgZm9yIG8gaW4gaS5tb2RpZmllZF9vY2N1cnJlbmNlczpcbiAgICAgICAgcHJpbnQobylcbiAgICBmb3IgbyBpbiBpLmRlbGV0ZWRfb2NjdXJyZW5jZXM6XG4gICAgICAgIHByaW50KG8pXG5cbiMgQWxsIG9jY3VycmVuY2VzIGV4cGFuZGVkLiBUaGUgcmVjdXJyZW5jZSB3aWxsIHNwYW4gb3ZlciA0IGl0ZXJhdGlvbnMgb2YgYSAzLXdlZWsgcGVyaW9kXG5mb3IgaSBpbiBhLmNhbGVuZGFyLnZpZXcoc3RhcnQ9c3RhcnQsIGVuZD1zdGFydCArIHRpbWVkZWx0YShkYXlzPTQqMyo3KSk6XG4gICAgcHJpbnQoaS5zdWJqZWN0LCBpLnN0YXJ0LCBpLmVuZClcblxuIyAnbW9kaWZpZWRfb2NjdXJyZW5jZXMnIGFuZCAnZGVsZXRlZF9vY2N1cnJlbmNlcycgb2YgbWFzdGVyIGl0ZW1zIGFyZSByZWFkLW9ubHkgZmllbGRzLiBUbyBcbiMgZGVsZXRlIG9yIG1vZGlmeSBhbiBvY2N1cnJlbmNlLCB5b3UgbXVzdCB1c2UgJ3ZpZXcoKScgdG8gZmV0Y2ggdGhlIG9jY3VycmVuY2UgYW5kIG1vZGlmeSBvciBcbiMgZGVsZXRlIGl0OlxuZm9yIG9jY3VycmVuY2UgaW4gYS5jYWxlbmRhci52aWV3KHN0YXJ0PXN0YXJ0LCBlbmQ9c3RhcnQgKyB0aW1lZGVsdGEoZGF5cz00KjMqNykpOlxuICAgICMgRGVsZXRlIG9yIHVwZGF0ZSByYW5kb20gb2NjdXJyZW5jZXMuIFRoaXMgd2lsbCBhZmZlY3QgJ21vZGlmaWVkX29jY3VycmVuY2VzJyBhbmQgXG4gICAgIyAnZGVsZXRlZF9vY2N1cnJlbmNlcycgb2YgdGhlIG1hc3RlciBpdGVtLlxuICAgIGlmIG9jY3VycmVuY2Uuc3RhcnQubWlsbGlzZWNvbmRzICUgMjpcbiAgICAgICAgIyBXZSByZWNlaXZlIHRpbWVzdGFtcHMgYXMgVVRDIGJ1dCB3YW50IHRvIHdyaXRlIHRoZW0gYmFjayBhcyBsb2NhbCB0aW1lem9uZVxuICAgICAgICBvY2N1cnJlbmNlLnN0YXJ0ID0gb2NjdXJyZW5jZS5zdGFydC5hc3RpbWV6b25lKGEuZGVmYXVsdF90aW1lem9uZSlcbiAgICAgICAgb2NjdXJyZW5jZS5zdGFydCArPSB0aW1lZGVsdGEobWludXRlcz0zMClcbiAgICAgICAgb2NjdXJyZW5jZS5lbmQgPSBvY2N1cnJlbmNlLmVuZC5hc3RpbWV6b25lKGEuZGVmYXVsdF90aW1lem9uZSlcbiAgICAgICAgb2NjdXJyZW5jZS5lbmQgKz0gdGltZWRlbHRhKG1pbnV0ZXM9MzApXG4gICAgICAgIG9jY3VycmVuY2Uuc3ViamVjdCA9ICdNeSBuZXcgc3ViamVjdCdcbiAgICAgICAgb2NjdXJyZW5jZS5zYXZlKClcbiAgICBlbHNlOlxuICAgICAgICBvY2N1cnJlbmNlLmRlbGV0ZSgpXG5gYGBcblxuIyMgTWVzc2FnZSB0aW1lc3RhbXAgZmllbGRzXG5cbkVhY2ggYE1lc3NhZ2VgIGl0ZW0gaGFzIGZvdXIgdGltZXN0YW1wIGZpZWxkczpcblxuLSAgIGBkYXRldGltZV9jcmVhdGVkYFxuLSAgIGBkYXRldGltZV9zZW50YFxuLSAgIGBkYXRldGltZV9yZWNlaXZlZGBcbi0gICBgbGFzdF9tb2RpZmllZF90aW1lYFxuXG5UaGUgdmFsdWVzIGZvciB0aGVzZSBmaWVsZHMgYXJlIHNldCBieSB0aGUgRXhjaGFuZ2Ugc2VydmVyIGFuZCBhcmUgbm90XG5tb2RpZmlhYmxlIHZpYSBFV1MuIEFsbCB2YWx1ZXMgYXJlIHRpbWV6b25lLWF3YXJlIGBFV1NEYXRlVGltZWBcbmluc3RhbmNlcy5cblxuVGhlIGBkYXRldGltZV9zZW50YCB2YWx1ZSBtYXkgYmUgZWFybGllciB0aGFuIGBkYXRldGltZV9jcmVhdGVkYC5cblxuIyMgT3V0IG9mIEZhY2lsaXR5XG5cbllvdSBjYW4gZ2V0IGFuZCBzZXQgT09GIG1lc3NhZ2VzIHVzaW5nIHRoZSBgQWNjb3VudC5vb2Zfc2V0dGluZ3NgXG5wcm9wZXJ0eTpcblxuYGBgcHl0aG9uXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBBY2NvdW50LCBPb2ZTZXR0aW5ncywgRVdTRGF0ZVRpbWVcblxuYSA9IEFjY291bnQoLi4uKVxuXG4jIEdldCB0aGUgY3VycmVudCBPT0Ygc2V0dGluZ3NcbmEub29mX3NldHRpbmdzXG4jIENoYW5nZSB0aGUgT09GIHNldHRpbmdzIHRvIHNvbWV0aGluZyBlbHNlXG5hLm9vZl9zZXR0aW5ncyA9IE9vZlNldHRpbmdzKFxuICAgIHN0YXRlPU9vZlNldHRpbmdzLlNDSEVEVUxFRCxcbiAgICBleHRlcm5hbF9hdWRpZW5jZT0nS25vd24nLFxuICAgIGludGVybmFsX3JlcGx5PVwiSSdtIGluIHRoZSBwdWIuIFNlZSB5YSBndXlzIVwiLFxuICAgIGV4dGVybmFsX3JlcGx5PVwiSSdtIGhhdmluZyBhIGJ1c2luZXNzIGRpbm5lciBpbiB0b3duXCIsXG4gICAgc3RhcnQ9YS5kZWZhdWx0X3RpbWV6b25lLmxvY2FsaXplKEVXU0RhdGVUaW1lKDIwMTcsIDExLCAxLCAxMSkpLFxuICAgIGVuZD1hLmRlZmF1bHRfdGltZXpvbmUubG9jYWxpemUoRVdTRGF0ZVRpbWUoMjAxNywgMTIsIDEsIDExKSksXG4pXG4jIERpc2FibGUgT09GIG1lc3NhZ2VzXG5hLm9vZl9zZXR0aW5ncyA9IE9vZlNldHRpbmdzKFxuICAgIHN0YXRlPU9vZlNldHRpbmdzLkRJU0FCTEVELFxuICAgIGludGVybmFsX3JlcGx5PScnLFxuICAgIGV4dGVybmFsX3JlcGx5PScnLFxuKVxuYGBgXG5cbiMjIEV4cG9ydCBhbmQgdXBsb2FkXG5cbkV4Y2hhbmdlIHN1cHBvcnRzIGJhY2t1cCBhbmQgcmVzdG9yZSBvZiBmb2xkZXIgY29udGVudHMgdXNpbmcgc3BlY2lhbFxuZXhwb3J0IGFuZCB1cGxvYWQgc2VydmljZXMuIFRoZXkgYXJlIGF2YWlsYWJsZSBvbiB0aGUgYEFjY291bnRgIG1vZGVsOlxuXG5gYGBweXRob25cbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnRcblxuYSA9IEFjY291bnQoLi4uKVxuaXRlbXMgPSBhLmluYm94LmFsbCgpLm9ubHkoJ2lkJywgJ2NoYW5nZWtleScpXG5kYXRhID0gYS5leHBvcnQoaXRlbXMpICAjIFBhc3MgYSBsaXN0IG9mIEl0ZW0gaW5zdGFuY2VzIG9yIChpdGVtX2lkLCBjaGFuZ2VrZXkpIHR1cGxlc1xuYS51cGxvYWQoKGEuaW5ib3gsIGQpIGZvciBkIGluIGRhdGEpICAjIFJlc3RvcmUgdGhlIGl0ZW1zLiBFeHBlY3RzIGEgbGlzdCBvZiAoZm9sZGVyLCBkYXRhKSB0dXBsZXNcbmBgYFxuXG4jIyBOb24tYWNjb3VudCBtZXRob2RzXG5cbmBgYHB5dGhvblxuZnJvbSBleGNoYW5nZWxpYiBpbXBvcnQgQWNjb3VudCwgRExNYWlsYm94XG5cbmEgPSBBY2NvdW50KC4uLilcblxuIyBHZXQgdGltZXpvbmUgaW5mb3JtYXRpb24gZnJvbSB0aGUgc2VydmVyXG5hLnByb3RvY29sLmdldF90aW1lem9uZXMoKVxuXG4jIEdldCByb29tIGxpc3RzIGRlZmluZWQgb24gdGhlIHNlcnZlclxuYS5wcm90b2NvbC5nZXRfcm9vbWxpc3RzKClcblxuIyBHZXQgcm9vbXMgYmVsb25naW5nIHRvIGEgc3BlY2lmaWMgcm9vbSBsaXN0XG5mb3IgcmwgaW4gYS5wcm90b2NvbC5nZXRfcm9vbWxpc3RzKCk6XG4gICAgYS5wcm90b2NvbC5nZXRfcm9vbXMocmwpXG5cbiMgR2V0IGFjY291bnQgaW5mb3JtYXRpb24gZm9yIGEgbGlzdCBvZiBuYW1lcyBvciBlbWFpbCBhZGRyZXNzZXNcbmZvciBtYWlsYm94IGluIGEucHJvdG9jb2wucmVzb2x2ZV9uYW1lcyhbJ2FubkBleGFtcGxlLmNvbScsICdiYXJ0QGV4YW1wbGUuY29tJ10pOlxuICAgIHByaW50KG1haWxib3guZW1haWxfYWRkcmVzcylcbmZvciBtYWlsYm94LCBjb250YWN0IGluIGEucHJvdG9jb2wucmVzb2x2ZV9uYW1lcyhbJ2FubmUnLCAnYmFydCddLCByZXR1cm5fZnVsbF9jb250YWN0X2RhdGE9VHJ1ZSk6XG4gICAgcHJpbnQobWFpbGJveC5lbWFpbF9hZGRyZXNzLCBjb250YWN0LmRpc3BsYXlfbmFtZSlcblxuIyBHZXQgYWxsIG1haWxib3hlcyBvbiBhIGRpc3RyaWJ1dGlvbiBsaXN0XG5mb3IgbWFpbGJveCBpbiBhLnByb3RvY29sLmV4cGFuZF9kbChETE1haWxib3goZW1haWxfYWRkcmVzcz0nZGlzdHJvQGV4YW1wbGUuY29tJywgbWFpbGJveF90eXBlPSdQdWJsaWNETCcpOlxuICAgIHByaW50KG1haWxib3guZW1haWxfYWRkcmVzcylcbiMgT3IganVzdCBwYXNzIGEgc3RyaW5nIGNvbnRhaW5pbmcgdGhlIFNNVFAgYWRkcmVzc1xuZm9yIG1haWxib3ggaW4gYS5wcm90b2NvbC5leHBhbmRfZGwoJ2Rpc3Ryb0BleGFtcGxlLmNvbScpOlxuICAgIHByaW50KG1haWxib3guZW1haWxfYWRkcmVzcylcblxuIyBHZXQgc2VhcmNoYWJsZSBtYWlsYm94ZXMuIFRoaXMgbWV0aG9kIGlzIG9ubHkgYXZhaWxhYmxlIHRvIHVzZXJzIHdobyBoYXZlIGJlZW4gYXNzaWduZWRcbiMgdGhlIERpc2NvdmVyeSBNYW5hZ2VtZW50IFJCQUMgcm9sZS4gKFRoaXMgZmVhdHVyZSB3b3JrcyBvbiBFeGNoYW5nZSAyMDEzIG9ud2FyZHMpXG5mb3IgbWFpbGJveCBpbiBhLnByb3RvY29sLmdldF9zZWFyY2hhYmxlX21haWxib3hlcygpOlxuICAgIHByaW50KG1haWxib3gpXG5gYGBcblxuRVdTIHN1cHBvcnRzIGdldHRpbmcgYXZhaWxhYmlsaXR5IGluZm9ybWF0aW9uIGZvciBhIHNldCBvZiB1c2VycyBpbiBhIGNlcnRhaW5cbnRpbWVmcmFtZS4gVGhlIHNlcnZlciByZXR1cm5zIGFuIG9iamVjdCBmb3IgZWFjaCBhY2NvdW50IGNvbnRhaW5pbmcgZnJlZS9idXN5XG5pbmZvcm1hdGlvbiwgaW5jbHVkaW5nIGEgbGlzdCBvZiBjYWxlbmRhciBldmVudHMgaW4gdGhlIHVzZXIncyBjYWxlbmRhciwgYW5kXG50aGUgd29ya2luZyBob3VycyBhbmQgdGltZXpvbmUgb2YgdGhlIHVzZXIuXG5cbmBgYHB5dGhvblxuZnJvbSBkYXRldGltZSBpbXBvcnQgdGltZWRlbHRhXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBBY2NvdW50LCBFV1NEYXRlVGltZVxuXG5hID0gQWNjb3VudCguLi4pXG5zdGFydCA9IGEuZGVmYXVsdF90aW1lem9uZS5sb2NhbGl6ZShFV1NEYXRlVGltZS5ub3coKSlcbmVuZCA9IHN0YXJ0ICsgdGltZWRlbHRhKGhvdXJzPTYpXG5hY2NvdW50cyA9IFsoYSwgJ09yZ2FuaXplcicsIEZhbHNlKV1cbmZvciBidXN5X2luZm8gaW4gYS5wcm90b2NvbC5nZXRfZnJlZV9idXN5X2luZm8oYWNjb3VudHM9YWNjb3VudHMsIHN0YXJ0PXN0YXJ0LCBlbmQ9ZW5kKTpcbiAgICBwcmludChidXN5X2luZm8pXG5gYGBcblxuVGhlIGNhbGVuZGFyIGV2ZW50cyBhbmQgd29ya2luZyBob3VycyBhcmUgcmV0dXJuZWQgYXMgbmFpdmUgZGF0ZXRpbWVzLiBUbyBjb252ZXJ0XG50byB0aW1lem9uZS1hd2FyZSBkYXRldGltZXMsIGEgYml0IG9mIGV4dHJhIHdvcmsgaXMgbmVlZGVkIGlmIHRoZSB1c2VycyBhcmUgbm90XG5rbm93biB0byBiZSBpbiB0aGUgc2FtZSB0aW1lem9uZS5cblxuYGBgcHl0aG9uXG4jIEdldCBhbGwgc2VydmVyIHRpbWV6b25lcy4gV2UgbmVlZCB0aGF0IHRvIGNvbnZlcnQgJ3dvcmtpbmdfaG91cnNfdGltZXpvbmUnXG5mcm9tIGRhdGV0aW1lIGltcG9ydCB0aW1lZGVsdGFcbmZyb20gZXhjaGFuZ2VsaWIgaW1wb3J0IEFjY291bnQsIEVXU0RhdGVUaW1lLCBFV1NUaW1lWm9uZVxuXG5hID0gQWNjb3VudCguLi4pXG50aW1lem9uZXMgPSBsaXN0KGEucHJvdG9jb2wuZ2V0X3RpbWV6b25lcyhyZXR1cm5fZnVsbF90aW1lem9uZV9kYXRhPVRydWUpKVxuXG4jIEdldCBhdmFpbGFiaWxpdHkgaW5mb3JtYXRpb24gZm9yIGEgbGlzdCBvZiBhY2NvdW50c1xuc3RhcnQgPSBhLmRlZmF1bHRfdGltZXpvbmUubG9jYWxpemUoRVdTRGF0ZVRpbWUubm93KCkpXG5lbmQgPSBzdGFydCArIHRpbWVkZWx0YShob3Vycz02KVxuIyBnZXRfZnJlZV9idXN5X2luZm8oKSBleHBlY3RzIGEgbGlzdCBvZiAoYWNjb3VudCwgYXR0ZW5kZWVfdHlwZSwgZXhjbHVkZV9jb25mbGljdHMpIHR1cGxlc1xuYWNjb3VudHMgPSBbKGEsICdPcmdhbml6ZXInLCBGYWxzZSldXG5mb3IgYnVzeV9pbmZvIGluIGEucHJvdG9jb2wuZ2V0X2ZyZWVfYnVzeV9pbmZvKGFjY291bnRzPWFjY291bnRzLCBzdGFydD1zdGFydCwgZW5kPWVuZCk6XG4gICAgIyBDb252ZXJ0IHRoZSBUaW1lWm9uZSBvYmplY3QgdG8gYSBNaWNyb3NvZnQgdGltZXpvbmUgSURcbiAgICBtc19pZCA9IGJ1c3lfaW5mby53b3JraW5nX2hvdXJzX3RpbWV6b25lLnRvX3NlcnZlcl90aW1lem9uZSh0aW1lem9uZXMsIHN0YXJ0LnllYXIpXG4gICAgYWNjb3VudF90eiA9IEVXU1RpbWVab25lLmZyb21fbXNfaWQobXNfaWQpXG4gICAgcHJpbnQoYWNjb3VudF90eiwgYnVzeV9pbmZvLndvcmtpbmdfaG91cnMpXG4gICAgZm9yIGV2ZW50IGluIGJ1c3lfaW5mby5jYWxlbmRhcl9ldmVudHM6XG4gICAgICAgIHByaW50KGFjY291bnRfdHoubG9jYWxpemUoZXZlbnQuc3RhcnQpLCBhY2NvdW50X3R6LmxvY2FsaXplKGV2ZW50LmVuZCkpXG5gYGBcblxuXG4jIyBUcm91Ymxlc2hvb3RpbmdcblxuSWYgeW91IGFyZSBoYXZpbmcgdHJvdWJsZSB1c2luZyB0aGlzIGxpYnJhcnksIHRoZSBmaXJzdCB0aGluZyB0byB0cnkgaXNcbnRvIGVuYWJsZSBkZWJ1ZyBsb2dnaW5nLiBUaGlzIHdpbGwgb3V0cHV0IGEgaHVnZSBhbW91bnQgb2YgaW5mb3JtYXRpb25cbmFib3V0IHdoYXQgaXMgZ29pbmcgb24sIG1vc3Qgbm90YWJsZSB0aGUgYWN0dWFsIFhNTCBkb2N1bWVudHMgdGhhdCBhcmVcbmdvaW5nIG92ZXIgdGhlIHdpcmUuIFRoaXMgY2FuIGJlIHJlYWxseSBoYW5keSB0byBzZWUgd2hpY2ggZmllbGRzIGFyZVxuYmVpbmcgc2VudCBhbmQgcmVjZWl2ZWQuXG5cbmBgYHB5dGhvblxuaW1wb3J0IGxvZ2dpbmdcbiMgVGhpcyBoYW5kbGVyIHdpbGwgcHJldHR5LXByaW50IGFuZCBzeW50YXggaGlnaGxpZ2h0IHRoZSByZXF1ZXN0IGFuZCByZXNwb25zZSBYTUwgZG9jdW1lbnRzXG5mcm9tIGV4Y2hhbmdlbGliLnV0aWwgaW1wb3J0IFByZXR0eVhtbEhhbmRsZXJcblxubG9nZ2luZy5iYXNpY0NvbmZpZyhsZXZlbD1sb2dnaW5nLkRFQlVHLCBoYW5kbGVycz1bUHJldHR5WG1sSGFuZGxlcigpXSlcbiMgWW91ciBjb2RlIHVzaW5nIGV4Y2hhbmdlbGliIGdvZXMgaGVyZVxuYGBgXG5cbk1vc3QgY2xhc3MgZGVmaW5pdGlvbnMgaGF2ZSBhIGRvY3N0cmluZyBjb250YWluaW5nIGF0IGxlYXN0IGEgVVJMIHRvIHRoZVxuTVNETiBwYWdlIGZvciB0aGUgY29ycmVzcG9uZGluZyBYTUwgZWxlbWVudC5cblxuYGBgcHl0aG9uXG5mcm9tIGV4Y2hhbmdlbGliIGltcG9ydCBDYWxlbmRhckl0ZW1cbnByaW50KENhbGVuZGFySXRlbS5fX2RvY19fKVxuYGBgXG5cbiMgTm90ZXNcblxuQWxtb3N0IGFsbCBpdGVtIGZpZWxkcyBhcmUgc3VwcG9ydGVkLiBUaGUgcmVtYWluaW5nIG9uZXMgYXJlIHRyYWNrZWQgaW5cbjxodHRwczovL2dpdGh1Yi5jb20vZWNlZGVyc3RyYW5kL2V4Y2hhbmdlbGliL2lzc3Vlcy8yMDM+LiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2VjZWRlcnN0cmFuZC9leGNoYW5nZWxpYiIs
ICAgICJrZXl3b3JkcyI6ICJld3MgZXhjaGFuZ2UgYXV0b2Rpc2NvdmVyIG1pY3Jvc29mdCBvdXRsb29rIGV4Y2hhbmdlLXdlYi1zZXJ2aWNlcyBvMzY1IG9mZmljZTM2NSIs
ICAgICJsaWNlbnNlIjogIkJTRCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImV4Y2hhbmdlbGlidG1wIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZXhjaGFuZ2VsaWJ0bXAvIiw=
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZXhjaGFuZ2VsaWJ0bXAvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9lY2VkZXJzdHJhbmQvZXhjaGFuZ2VsaWIi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZXhjaGFuZ2VsaWJ0bXAvMS4xMi4yLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0yLjcsICE9My4wLiosICE9My4xLiosICE9My4yLiosICE9My4zLioiLA==
ICAgICJzdW1tYXJ5IjogIkNsaWVudCBmb3IgTWljcm9zb2Z0IEV4Y2hhbmdlIFdlYiBTZXJ2aWNlcyAoRVdTKSIs
ICAgICJ2ZXJzaW9uIjogIjEuMTIuMiIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiA1MTgzMzY4LA==
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjEyLjIiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI3NzFhNjdkMmEwNTE2NTU0OGYyYTRhMTQ3YWVmMjM0ZTYyMTE0ODcyMDRmN2U3MzRlOGUwZjA3MmFiNzQwNDVjIiw=
ICAgICAgICAgICJtZDUiOiAiNTZjZmUzY2M1NWI2YTkyNjgwOTU1YzZhNWMwODI3MDUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTBjYWVkOTY5ZjliZmY3ZWVhMmQ4Y2QxNGNlNTlkMDMzMjhlZTUyZTY1OTE0NDRhZGRjMTViMmQ3NDA5NzdmYyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZXhjaGFuZ2VsaWJ0bXAtMS4xMi4yLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1NmNmZTNjYzU1YjZhOTI2ODA5NTVjNmE1YzA4MjcwNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qIiw=
ICAgICAgICAic2l6ZSI6IDE4NjIxMCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAxOS0wNC0yNFQxNjo1MToyMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAxOS0wNC0yNFQxNjo1MToyMC45NTE4MDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy83Ny8xYS82N2QyYTA1MTY1NTQ4ZjJhNGExNDdhZWYyMzRlNjIxMTQ4NzIwNGY3ZTczNGU4ZTBmMDcyYWI3NDA0NWMvZXhjaGFuZ2VsaWJ0bXAtMS4xMi4yLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNzcxYTY3ZDJhMDUxNjU1NDhmMmE0YTE0N2FlZjIzNGU2MjExNDg3MjA0ZjdlNzM0ZThlMGYwNzJhYjc0MDQ1YyIs
ICAgICAgICAibWQ1IjogIjU2Y2ZlM2NjNTViNmE5MjY4MDk1NWM2YTVjMDgyNzA1Iiw=
ICAgICAgICAic2hhMjU2IjogIjkwY2FlZDk2OWY5YmZmN2VlYTJkOGNkMTRjZTU5ZDAzMzI4ZWU1MmU2NTkxNDQ0YWRkYzE1YjJkNzQwOTc3ZmMi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImV4Y2hhbmdlbGlidG1wLTEuMTIuMi50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiNTZjZmUzY2M1NWI2YTkyNjgwOTU1YzZhNWMwODI3MDUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTIuNywgIT0zLjAuKiwgIT0zLjEuKiwgIT0zLjIuKiwgIT0zLjMuKiIs
ICAgICAgInNpemUiOiAxODYyMTAs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMTktMDQtMjRUMTY6NTE6MjAiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMTktMDQtMjRUMTY6NTE6MjAuOTUxODAxWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNzcvMWEvNjdkMmEwNTE2NTU0OGYyYTRhMTQ3YWVmMjM0ZTYyMTE0ODcyMDRmN2U3MzRlOGUwZjA3MmFiNzQwNDVjL2V4Y2hhbmdlbGlidG1wLTEuMTIuMi50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
