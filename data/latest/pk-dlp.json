ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiIiw=
ICAgICJhdXRob3JfZW1haWwiOiAiIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkVudmlyb25tZW50IDo6IENvbnNvbGUiLA==
ICAgICAgIkxpY2Vuc2UgOjogUHVibGljIERvbWFpbiIs
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjEwIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjExIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiBJbXBsZW1lbnRhdGlvbiIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiBJbXBsZW1lbnRhdGlvbiA6OiBDUHl0aG9uIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiBJbXBsZW1lbnRhdGlvbiA6OiBQeVB5Iiw=
ICAgICAgIlRvcGljIDo6IE11bHRpbWVkaWEgOjogVmlkZW8i
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICJPZmZpY2lhbCByZXBvc2l0b3J5OiA8aHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHA+XG5cbioqUFMqKjogU29tZSBsaW5rcyBpbiB0aGlzIGRvY3VtZW50IHdpbGwgbm90IHdvcmsgc2luY2UgdGhpcyBpcyBhIGNvcHkgb2YgdGhlIFJFQURNRS5tZCBmcm9tIEdpdGh1YlxuXG48IS0tIE1BTlBBR0U6IEJFR0lOIEVYQ0xVREVEIFNFQ1RJT04gLS0+XG48ZGl2IGFsaWduPVwiY2VudGVyXCI+XG5cblshW1lULURMUF0oaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3l0LWRscC95dC1kbHAvbWFzdGVyLy5naXRodWIvYmFubmVyLnN2ZyldKCNyZWFkbWUpXG5cblshW1JlbGVhc2UgdmVyc2lvbl0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvdi9yZWxlYXNlL3l0LWRscC95dC1kbHA/Y29sb3I9YnJpZ2h0Z3JlZW4mbGFiZWw9RG93bmxvYWQmc3R5bGU9Zm9yLXRoZS1iYWRnZSldKCNpbnN0YWxsYXRpb24gXCJJbnN0YWxsYXRpb25cIilcblshW1B5UGldKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVB5UGktYmx1ZS5zdmc/bG9nbz1weXBpJmxhYmVsQ29sb3I9NTU1NTU1JnN0eWxlPWZvci10aGUtYmFkZ2UpXShodHRwczovL3B5cGkub3JnL3Byb2plY3QveXQtZGxwIFwiUHlQaVwiKVxuWyFbRG9uYXRlXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlL18tRG9uYXRlLXJlZC5zdmc/bG9nbz1naXRodWJzcG9uc29ycyZsYWJlbENvbG9yPTU1NTU1NSZzdHlsZT1mb3ItdGhlLWJhZGdlKV0oQ29sbGFib3JhdG9ycy5tZCNjb2xsYWJvcmF0b3JzIFwiRG9uYXRlXCIpXG5bIVtNYXRyaXhdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vbWF0cml4L3l0LWRscDptYXRyaXgub3JnP2NvbG9yPWJyaWdodGdyZWVuJmxhYmVsQ29sb3I9NTU1NTU1JmxhYmVsPSZsb2dvPWVsZW1lbnQmc3R5bGU9Zm9yLXRoZS1iYWRnZSldKGh0dHBzOi8vbWF0cml4LnRvLyMvI3l0LWRscDptYXRyaXgub3JnIFwiTWF0cml4XCIpXG5bIVtEaXNjb3JkXShodHRwczovL2ltZy5zaGllbGRzLmlvL2Rpc2NvcmQvODA3MjQ1NjUyMDcyODU3NjEwP2NvbG9yPWJsdWUmbGFiZWxDb2xvcj01NTU1NTUmbGFiZWw9JmxvZ289ZGlzY29yZCZzdHlsZT1mb3ItdGhlLWJhZGdlKV0oaHR0cHM6Ly9kaXNjb3JkLmdnL0g1TU5jRlc2M3IgXCJEaXNjb3JkXCIpXG5bIVtTdXBwb3J0ZWQgU2l0ZXNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVN1cHBvcnRlZF9TaXRlcy1icmlnaHRncmVlbi5zdmc/c3R5bGU9Zm9yLXRoZS1iYWRnZSldKHN1cHBvcnRlZHNpdGVzLm1kIFwiU3VwcG9ydGVkIFNpdGVzXCIpXG5bIVtMaWNlbnNlOiBVbmxpY2Vuc2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVVubGljZW5zZS1ibHVlLnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlKV0oTElDRU5TRSBcIkxpY2Vuc2VcIilcblshW0NJIFN0YXR1c10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvYWN0aW9ucy93b3JrZmxvdy9zdGF0dXMveXQtZGxwL3l0LWRscC9jb3JlLnltbD9icmFuY2g9bWFzdGVyJmxhYmVsPVRlc3RzJnN0eWxlPWZvci10aGUtYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9hY3Rpb25zIFwiQ0kgU3RhdHVzXCIpXG5bIVtDb21taXRzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2dpdGh1Yi9jb21taXQtYWN0aXZpdHkvbS95dC1kbHAveXQtZGxwP2xhYmVsPWNvbW1pdHMmc3R5bGU9Zm9yLXRoZS1iYWRnZSldKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2NvbW1pdHMgXCJDb21taXQgSGlzdG9yeVwiKVxuWyFbTGFzdCBDb21taXRdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL2xhc3QtY29tbWl0L3l0LWRscC95dC1kbHAvbWFzdGVyP2xhYmVsPSZzdHlsZT1mb3ItdGhlLWJhZGdlJmRpc3BsYXlfdGltZXN0YW1wPWNvbW1pdHRlcildKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2NvbW1pdHMgXCJDb21taXQgSGlzdG9yeVwiKVxuXG48L2Rpdj5cbjwhLS0gTUFOUEFHRTogRU5EIEVYQ0xVREVEIFNFQ1RJT04gLS0+XG5cbnl0LWRscCBpcyBhIFt5b3V0dWJlLWRsXShodHRwczovL2dpdGh1Yi5jb20veXRkbC1vcmcveW91dHViZS1kbCkgZm9yayBiYXNlZCBvbiB0aGUgbm93IGluYWN0aXZlIFt5b3V0dWJlLWRsY10oaHR0cHM6Ly9naXRodWIuY29tL2JsYWNramFjazQ0OTQveXQtZGxjKS4gVGhlIG1haW4gZm9jdXMgb2YgdGhpcyBwcm9qZWN0IGlzIGFkZGluZyBuZXcgZmVhdHVyZXMgYW5kIHBhdGNoZXMgd2hpbGUgYWxzbyBrZWVwaW5nIHVwIHRvIGRhdGUgd2l0aCB0aGUgb3JpZ2luYWwgcHJvamVjdFxuXG48IS0tIE1BTlBBR0U6IE1PVkUgXCJVU0FHRSBBTkQgT1BUSU9OU1wiIFNFQ1RJT04gSEVSRSAtLT5cblxuPCEtLSBNQU5QQUdFOiBCRUdJTiBFWENMVURFRCBTRUNUSU9OIC0tPlxuKiBbTkVXIEZFQVRVUkVTXSgjbmV3LWZlYXR1cmVzKVxuICAgICogW0RpZmZlcmVuY2VzIGluIGRlZmF1bHQgYmVoYXZpb3JdKCNkaWZmZXJlbmNlcy1pbi1kZWZhdWx0LWJlaGF2aW9yKVxuKiBbSU5TVEFMTEFUSU9OXSgjaW5zdGFsbGF0aW9uKVxuICAgICogW0RldGFpbGVkIGluc3RydWN0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvd2lraS9JbnN0YWxsYXRpb24pXG4gICAgKiBbVXBkYXRlXSgjdXBkYXRlKVxuICAgICogW1JlbGVhc2UgRmlsZXNdKCNyZWxlYXNlLWZpbGVzKVxuICAgICogW0RlcGVuZGVuY2llc10oI2RlcGVuZGVuY2llcylcbiAgICAqIFtDb21waWxlXSgjY29tcGlsZSlcbiogW1VTQUdFIEFORCBPUFRJT05TXSgjdXNhZ2UtYW5kLW9wdGlvbnMpXG4gICAgKiBbR2VuZXJhbCBPcHRpb25zXSgjZ2VuZXJhbC1vcHRpb25zKVxuICAgICogW05ldHdvcmsgT3B0aW9uc10oI25ldHdvcmstb3B0aW9ucylcbiAgICAqIFtHZW8tcmVzdHJpY3Rpb25dKCNnZW8tcmVzdHJpY3Rpb24pXG4gICAgKiBbVmlkZW8gU2VsZWN0aW9uXSgjdmlkZW8tc2VsZWN0aW9uKVxuICAgICogW0Rvd25sb2FkIE9wdGlvbnNdKCNkb3dubG9hZC1vcHRpb25zKVxuICAgICogW0ZpbGVzeXN0ZW0gT3B0aW9uc10oI2ZpbGVzeXN0ZW0tb3B0aW9ucylcbiAgICAqIFtUaHVtYm5haWwgT3B0aW9uc10oI3RodW1ibmFpbC1vcHRpb25zKVxuICAgICogW0ludGVybmV0IFNob3J0Y3V0IE9wdGlvbnNdKCNpbnRlcm5ldC1zaG9ydGN1dC1vcHRpb25zKVxuICAgICogW1ZlcmJvc2l0eSBhbmQgU2ltdWxhdGlvbiBPcHRpb25zXSgjdmVyYm9zaXR5LWFuZC1zaW11bGF0aW9uLW9wdGlvbnMpXG4gICAgKiBbV29ya2Fyb3VuZHNdKCN3b3JrYXJvdW5kcylcbiAgICAqIFtWaWRlbyBGb3JtYXQgT3B0aW9uc10oI3ZpZGVvLWZvcm1hdC1vcHRpb25zKVxuICAgICogW1N1YnRpdGxlIE9wdGlvbnNdKCNzdWJ0aXRsZS1vcHRpb25zKVxuICAgICogW0F1dGhlbnRpY2F0aW9uIE9wdGlvbnNdKCNhdXRoZW50aWNhdGlvbi1vcHRpb25zKVxuICAgICogW1Bvc3QtcHJvY2Vzc2luZyBPcHRpb25zXSgjcG9zdC1wcm9jZXNzaW5nLW9wdGlvbnMpXG4gICAgKiBbU3BvbnNvckJsb2NrIE9wdGlvbnNdKCNzcG9uc29yYmxvY2stb3B0aW9ucylcbiAgICAqIFtFeHRyYWN0b3IgT3B0aW9uc10oI2V4dHJhY3Rvci1vcHRpb25zKVxuKiBbQ09ORklHVVJBVElPTl0oI2NvbmZpZ3VyYXRpb24pXG4gICAgKiBbQ29uZmlndXJhdGlvbiBmaWxlIGVuY29kaW5nXSgjY29uZmlndXJhdGlvbi1maWxlLWVuY29kaW5nKVxuICAgICogW0F1dGhlbnRpY2F0aW9uIHdpdGggLm5ldHJjIGZpbGVdKCNhdXRoZW50aWNhdGlvbi13aXRoLW5ldHJjLWZpbGUpXG4gICAgKiBbTm90ZXMgYWJvdXQgZW52aXJvbm1lbnQgdmFyaWFibGVzXSgjbm90ZXMtYWJvdXQtZW52aXJvbm1lbnQtdmFyaWFibGVzKVxuKiBbT1VUUFVUIFRFTVBMQVRFXSgjb3V0cHV0LXRlbXBsYXRlKVxuICAgICogW091dHB1dCB0ZW1wbGF0ZSBleGFtcGxlc10oI291dHB1dC10ZW1wbGF0ZS1leGFtcGxlcylcbiogW0ZPUk1BVCBTRUxFQ1RJT05dKCNmb3JtYXQtc2VsZWN0aW9uKVxuICAgICogW0ZpbHRlcmluZyBGb3JtYXRzXSgjZmlsdGVyaW5nLWZvcm1hdHMpXG4gICAgKiBbU29ydGluZyBGb3JtYXRzXSgjc29ydGluZy1mb3JtYXRzKVxuICAgICogW0Zvcm1hdCBTZWxlY3Rpb24gZXhhbXBsZXNdKCNmb3JtYXQtc2VsZWN0aW9uLWV4YW1wbGVzKVxuKiBbTU9ESUZZSU5HIE1FVEFEQVRBXSgjbW9kaWZ5aW5nLW1ldGFkYXRhKVxuICAgICogW01vZGlmeWluZyBtZXRhZGF0YSBleGFtcGxlc10oI21vZGlmeWluZy1tZXRhZGF0YS1leGFtcGxlcylcbiogW0VYVFJBQ1RPUiBBUkdVTUVOVFNdKCNleHRyYWN0b3ItYXJndW1lbnRzKVxuKiBbUExVR0lOU10oI3BsdWdpbnMpXG4gICAgKiBbSW5zdGFsbGluZyBQbHVnaW5zXSgjaW5zdGFsbGluZy1wbHVnaW5zKVxuICAgICogW0RldmVsb3BpbmcgUGx1Z2luc10oI2RldmVsb3BpbmctcGx1Z2lucylcbiogW0VNQkVERElORyBZVC1ETFBdKCNlbWJlZGRpbmcteXQtZGxwKVxuICAgICogW0VtYmVkZGluZyBleGFtcGxlc10oI2VtYmVkZGluZy1leGFtcGxlcylcbiogW0RFUFJFQ0FURUQgT1BUSU9OU10oI2RlcHJlY2F0ZWQtb3B0aW9ucylcbiogW0NPTlRSSUJVVElOR10oQ09OVFJJQlVUSU5HLm1kI2NvbnRyaWJ1dGluZy10by15dC1kbHApXG4gICAgKiBbT3BlbmluZyBhbiBJc3N1ZV0oQ09OVFJJQlVUSU5HLm1kI29wZW5pbmctYW4taXNzdWUpXG4gICAgKiBbRGV2ZWxvcGVyIEluc3RydWN0aW9uc10oQ09OVFJJQlVUSU5HLm1kI2RldmVsb3Blci1pbnN0cnVjdGlvbnMpXG4qIFtXSUtJXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC93aWtpKVxuICAgICogW0ZBUV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvd2lraS9GQVEpXG48IS0tIE1BTlBBR0U6IEVORCBFWENMVURFRCBTRUNUSU9OIC0tPlxuXG5cbiMgTkVXIEZFQVRVUkVTXG5cbiogTWVyZ2VkIHdpdGggKip5b3V0dWJlLWRsIHYyMDIxLjEyLjE3KyBbY29tbWl0LzJkZDZjNmVdKGh0dHBzOi8vZ2l0aHViLmNvbS95dGRsLW9yZy95b3V0dWJlLWRsL2NvbW1pdC8yZGQ2YzZlKSoqIChbZXhjZXB0aW9uc10oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvaXNzdWVzLzIxKSkgYW5kICoqeW91dHViZS1kbGMgdjIwMjAuMTEuMTEtMysgW2NvbW1pdC9mOTQwMWYyXShodHRwczovL2dpdGh1Yi5jb20vYmxhY2tqYWNrNDQ5NC95dC1kbGMvY29tbWl0L2Y5NDAxZjJhOTE5ODcwNjgxMzljNWY3NTdiMTJmYzcxMWQ0YzBjZWUpKio6IFlvdSBnZXQgYWxsIHRoZSBmZWF0dXJlcyBhbmQgcGF0Y2hlcyBvZiBbeW91dHViZS1kbGNdKGh0dHBzOi8vZ2l0aHViLmNvbS9ibGFja2phY2s0NDk0L3l0LWRsYykgaW4gYWRkaXRpb24gdG8gdGhlIGxhdGVzdCBbeW91dHViZS1kbF0oaHR0cHM6Ly9naXRodWIuY29tL3l0ZGwtb3JnL3lvdXR1YmUtZGwpXG5cbiogKipbU3BvbnNvckJsb2NrIEludGVncmF0aW9uXSgjc3BvbnNvcmJsb2NrLW9wdGlvbnMpKio6IFlvdSBjYW4gbWFyay9yZW1vdmUgc3BvbnNvciBzZWN0aW9ucyBpbiBZb3VUdWJlIHZpZGVvcyBieSB1dGlsaXppbmcgdGhlIFtTcG9uc29yQmxvY2tdKGh0dHBzOi8vc3BvbnNvci5hamF5LmFwcCkgQVBJXG5cbiogKipbRm9ybWF0IFNvcnRpbmddKCNzb3J0aW5nLWZvcm1hdHMpKio6IFRoZSBkZWZhdWx0IGZvcm1hdCBzb3J0aW5nIG9wdGlvbnMgaGF2ZSBiZWVuIGNoYW5nZWQgc28gdGhhdCBoaWdoZXIgcmVzb2x1dGlvbiBhbmQgYmV0dGVyIGNvZGVjcyB3aWxsIGJlIG5vdyBwcmVmZXJyZWQgaW5zdGVhZCBvZiBzaW1wbHkgdXNpbmcgbGFyZ2VyIGJpdHJhdGUuIEZ1cnRoZXJtb3JlLCB5b3UgY2FuIG5vdyBzcGVjaWZ5IHRoZSBzb3J0IG9yZGVyIHVzaW5nIGAtU2AuIFRoaXMgYWxsb3dzIGZvciBtdWNoIGVhc2llciBmb3JtYXQgc2VsZWN0aW9uIHRoYW4gd2hhdCBpcyBwb3NzaWJsZSBieSBzaW1wbHkgdXNpbmcgYC0tZm9ybWF0YCAoW2V4YW1wbGVzXSgjZm9ybWF0LXNlbGVjdGlvbi1leGFtcGxlcykpXG5cbiogKipNZXJnZWQgd2l0aCBhbmltZWxvdmVyMTk4NC95b3V0dWJlLWRsKio6IFlvdSBnZXQgbW9zdCBvZiB0aGUgZmVhdHVyZXMgYW5kIGltcHJvdmVtZW50cyBmcm9tIFthbmltZWxvdmVyMTk4NC95b3V0dWJlLWRsXShodHRwczovL2dpdGh1Yi5jb20vYW5pbWVsb3ZlcjE5ODQveW91dHViZS1kbCkgaW5jbHVkaW5nIGAtLXdyaXRlLWNvbW1lbnRzYCwgYEJpbGlCaWxpU2VhcmNoYCwgYEJpbGliaWxpQ2hhbm5lbGAsIEVtYmVkZGluZyB0aHVtYm5haWwgaW4gbXA0L29nZy9vcHVzLCBwbGF5bGlzdCBpbmZvanNvbiBldGMuIE5vdGUgdGhhdCBOaWNvTmljbyBsaXZlc3RyZWFtcyBhcmUgbm90IGF2YWlsYWJsZS4gU2VlIFsjMzFdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3B1bGwvMzEpIGZvciBkZXRhaWxzLlxuXG4qICoqWW91VHViZSBpbXByb3ZlbWVudHMqKjpcbiAgICAqIFN1cHBvcnRzIENsaXBzLCBTdG9yaWVzIChgeXRzdG9yaWVzOjxjaGFubmVsIFVDSUQ+YCksIFNlYXJjaCAoaW5jbHVkaW5nIGZpbHRlcnMpKipcXCoqKiwgWW91VHViZSBNdXNpYyBTZWFyY2gsIENoYW5uZWwtc3BlY2lmaWMgc2VhcmNoLCBTZWFyY2ggcHJlZml4ZXMgKGB5dHNlYXJjaDpgLCBgeXRzZWFyY2hkYXRlOmApKipcXCoqKiwgTWl4ZXMsIFlvdVR1YmUgTXVzaWMgQWxidW1zL0NoYW5uZWxzIChbZXhjZXB0IHNlbGYtdXBsb2FkZWQgbXVzaWNdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2lzc3Vlcy83MjMpKSwgYW5kIEZlZWRzIChgOnl0ZmF2YCwgYDp5dHdhdGNobGF0ZXJgLCBgOnl0c3Vic2AsIGA6eXRoaXN0b3J5YCwgYDp5dHJlY2AsIGA6eXRub3RpZmApXG4gICAgKiBGaXggZm9yIFtuLXNpZyBiYXNlZCB0aHJvdHRsaW5nXShodHRwczovL2dpdGh1Yi5jb20veXRkbC1vcmcveW91dHViZS1kbC9pc3N1ZXMvMjkzMjYpICoqXFwqKipcbiAgICAqIFN1cHBvcnRzIHNvbWUgKGJ1dCBub3QgYWxsKSBhZ2UtZ2F0ZWQgY29udGVudCB3aXRob3V0IGNvb2tpZXNcbiAgICAqIERvd25sb2FkIGxpdmVzdHJlYW1zIGZyb20gdGhlIHN0YXJ0IHVzaW5nIGAtLWxpdmUtZnJvbS1zdGFydGAgKCpleHBlcmltZW50YWwqKVxuICAgICogYDI1NWticHNgIGF1ZGlvIGlzIGV4dHJhY3RlZCAoaWYgYXZhaWxhYmxlKSBmcm9tIFlvdVR1YmUgTXVzaWMgd2hlbiBwcmVtaXVtIGNvb2tpZXMgYXJlIGdpdmVuXG4gICAgKiBDaGFubmVsIFVSTHMgZG93bmxvYWQgYWxsIHVwbG9hZHMgb2YgdGhlIGNoYW5uZWwsIGluY2x1ZGluZyBzaG9ydHMgYW5kIGxpdmVcblxuKiAqKkNvb2tpZXMgZnJvbSBicm93c2VyKio6IENvb2tpZXMgY2FuIGJlIGF1dG9tYXRpY2FsbHkgZXh0cmFjdGVkIGZyb20gYWxsIG1ham9yIHdlYiBicm93c2VycyB1c2luZyBgLS1jb29raWVzLWZyb20tYnJvd3NlciBCUk9XU0VSWytLRVlSSU5HXVs6UFJPRklMRV1bOjpDT05UQUlORVJdYFxuXG4qICoqRG93bmxvYWQgdGltZSByYW5nZSoqOiBWaWRlb3MgY2FuIGJlIGRvd25sb2FkZWQgcGFydGlhbGx5IGJhc2VkIG9uIGVpdGhlciB0aW1lc3RhbXBzIG9yIGNoYXB0ZXJzIHVzaW5nIGAtLWRvd25sb2FkLXNlY3Rpb25zYFxuXG4qICoqU3BsaXQgdmlkZW8gYnkgY2hhcHRlcnMqKjogVmlkZW9zIGNhbiBiZSBzcGxpdCBpbnRvIG11bHRpcGxlIGZpbGVzIGJhc2VkIG9uIGNoYXB0ZXJzIHVzaW5nIGAtLXNwbGl0LWNoYXB0ZXJzYFxuXG4qICoqTXVsdGktdGhyZWFkZWQgZnJhZ21lbnQgZG93bmxvYWRzKio6IERvd25sb2FkIG11bHRpcGxlIGZyYWdtZW50cyBvZiBtM3U4L21wZCB2aWRlb3MgaW4gcGFyYWxsZWwuIFVzZSBgLS1jb25jdXJyZW50LWZyYWdtZW50c2AgKGAtTmApIG9wdGlvbiB0byBzZXQgdGhlIG51bWJlciBvZiB0aHJlYWRzIHVzZWRcblxuKiAqKkFyaWEyYyB3aXRoIEhMUy9EQVNIKio6IFlvdSBjYW4gdXNlIGBhcmlhMmNgIGFzIHRoZSBleHRlcm5hbCBkb3dubG9hZGVyIGZvciBEQVNIKG1wZCkgYW5kIEhMUyhtM3U4KSBmb3JtYXRzXG5cbiogKipOZXcgYW5kIGZpeGVkIGV4dHJhY3RvcnMqKjogTWFueSBuZXcgZXh0cmFjdG9ycyBoYXZlIGJlZW4gYWRkZWQgYW5kIGEgbG90IG9mIGV4aXN0aW5nIG9uZXMgaGF2ZSBiZWVuIGZpeGVkLiBTZWUgdGhlIFtjaGFuZ2Vsb2ddKENoYW5nZWxvZy5tZCkgb3IgdGhlIFtsaXN0IG9mIHN1cHBvcnRlZCBzaXRlc10oc3VwcG9ydGVkc2l0ZXMubWQpXG5cbiogKipOZXcgTVNPcyoqOiBQaGlsbywgU3BlY3RydW0sIFNsaW5nVFYsIENhYmxldmlzaW9uLCBSQ04gZXRjLlxuXG4qICoqU3VidGl0bGUgZXh0cmFjdGlvbiBmcm9tIG1hbmlmZXN0cyoqOiBTdWJ0aXRsZXMgY2FuIGJlIGV4dHJhY3RlZCBmcm9tIHN0cmVhbWluZyBtZWRpYSBtYW5pZmVzdHMuIFNlZSBbY29tbWl0L2JlNjIwMmZdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2NvbW1pdC9iZTYyMDJmMTJiOTc4NThiOWQ3MTZlNjA4Mzk0YjUxMDY1ZDA0MTlmKSBmb3IgZGV0YWlsc1xuXG4qICoqTXVsdGlwbGUgcGF0aHMgYW5kIG91dHB1dCB0ZW1wbGF0ZXMqKjogWW91IGNhbiBnaXZlIGRpZmZlcmVudCBbb3V0cHV0IHRlbXBsYXRlc10oI291dHB1dC10ZW1wbGF0ZSkgYW5kIGRvd25sb2FkIHBhdGhzIGZvciBkaWZmZXJlbnQgdHlwZXMgb2YgZmlsZXMuIFlvdSBjYW4gYWxzbyBzZXQgYSB0ZW1wb3JhcnkgcGF0aCB3aGVyZSBpbnRlcm1lZGlhcnkgZmlsZXMgYXJlIGRvd25sb2FkZWQgdG8gdXNpbmcgYC0tcGF0aHNgIChgLVBgKVxuXG4qICoqUG9ydGFibGUgQ29uZmlndXJhdGlvbioqOiBDb25maWd1cmF0aW9uIGZpbGVzIGFyZSBhdXRvbWF0aWNhbGx5IGxvYWRlZCBmcm9tIHRoZSBob21lIGFuZCByb290IGRpcmVjdG9yaWVzLiBTZWUgW0NPTkZJR1VSQVRJT05dKCNjb25maWd1cmF0aW9uKSBmb3IgZGV0YWlsc1xuXG4qICoqT3V0cHV0IHRlbXBsYXRlIGltcHJvdmVtZW50cyoqOiBPdXRwdXQgdGVtcGxhdGVzIGNhbiBub3cgaGF2ZSBkYXRlLXRpbWUgZm9ybWF0dGluZywgbnVtZXJpYyBvZmZzZXRzLCBvYmplY3QgdHJhdmVyc2FsIGV0Yy4gU2VlIFtvdXRwdXQgdGVtcGxhdGVdKCNvdXRwdXQtdGVtcGxhdGUpIGZvciBkZXRhaWxzLiBFdmVuIG1vcmUgYWR2YW5jZWQgb3BlcmF0aW9ucyBjYW4gYWxzbyBiZSBkb25lIHdpdGggdGhlIGhlbHAgb2YgYC0tcGFyc2UtbWV0YWRhdGFgIGFuZCBgLS1yZXBsYWNlLWluLW1ldGFkYXRhYFxuXG4qICoqT3RoZXIgbmV3IG9wdGlvbnMqKjogTWFueSBuZXcgb3B0aW9ucyBoYXZlIGJlZW4gYWRkZWQgc3VjaCBhcyBgLS1hbGlhc2AsIGAtLXByaW50YCwgYC0tY29uY2F0LXBsYXlsaXN0YCwgYC0td2FpdC1mb3ItdmlkZW9gLCBgLS1yZXRyeS1zbGVlcGAsIGAtLXNsZWVwLXJlcXVlc3RzYCwgYC0tY29udmVydC10aHVtYm5haWxzYCwgYC0tZm9yY2UtZG93bmxvYWQtYXJjaGl2ZWAsIGAtLWZvcmNlLW92ZXJ3cml0ZXNgLCBgLS1icmVhay1tYXRjaC1maWx0ZXJgIGV0Y1xuXG4qICoqSW1wcm92ZW1lbnRzKio6IFJlZ2V4IGFuZCBvdGhlciBvcGVyYXRvcnMgaW4gYC0tZm9ybWF0YC9gLS1tYXRjaC1maWx0ZXJgLCBtdWx0aXBsZSBgLS1wb3N0cHJvY2Vzc29yLWFyZ3NgIGFuZCBgLS1kb3dubG9hZGVyLWFyZ3NgLCBmYXN0ZXIgYXJjaGl2ZSBjaGVja2luZywgbW9yZSBbZm9ybWF0IHNlbGVjdGlvbiBvcHRpb25zXSgjZm9ybWF0LXNlbGVjdGlvbiksIG1lcmdlIG11bHRpLXZpZGVvL2F1ZGlvLCBtdWx0aXBsZSBgLS1jb25maWctbG9jYXRpb25zYCwgYC0tZXhlY2AgYXQgZGlmZmVyZW50IHN0YWdlcywgZXRjXG5cbiogKipQbHVnaW5zKio6IEV4dHJhY3RvcnMgYW5kIFBvc3RQcm9jZXNzb3JzIGNhbiBiZSBsb2FkZWQgZnJvbSBhbiBleHRlcm5hbCBmaWxlLiBTZWUgW3BsdWdpbnNdKCNwbHVnaW5zKSBmb3IgZGV0YWlsc1xuXG4qICoqU2VsZiB1cGRhdGVyKio6IFRoZSByZWxlYXNlcyBjYW4gYmUgdXBkYXRlZCB1c2luZyBgeXQtZGxwIC1VYCwgYW5kIGRvd25ncmFkZWQgdXNpbmcgYC0tdXBkYXRlLXRvYCBpZiByZXF1aXJlZFxuXG4qICoqTmlnaHRseSBidWlsZHMqKjogW0F1dG9tYXRlZCBuaWdodGx5IGJ1aWxkc10oI3VwZGF0ZS1jaGFubmVscykgY2FuIGJlIHVzZWQgd2l0aCBgLS11cGRhdGUtdG8gbmlnaHRseWBcblxuU2VlIFtjaGFuZ2Vsb2ddKENoYW5nZWxvZy5tZCkgb3IgW2NvbW1pdHNdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2NvbW1pdHMpIGZvciB0aGUgZnVsbCBsaXN0IG9mIGNoYW5nZXNcblxuRmVhdHVyZXMgbWFya2VkIHdpdGggYSAqKlxcKioqIGhhdmUgYmVlbiBiYWNrLXBvcnRlZCB0byB5b3V0dWJlLWRsXG5cbiMjIyBEaWZmZXJlbmNlcyBpbiBkZWZhdWx0IGJlaGF2aW9yXG5cblNvbWUgb2YgeXQtZGxwJ3MgZGVmYXVsdCBvcHRpb25zIGFyZSBkaWZmZXJlbnQgZnJvbSB0aGF0IG9mIHlvdXR1YmUtZGwgYW5kIHlvdXR1YmUtZGxjOlxuXG4qIHl0LWRscCBzdXBwb3J0cyBvbmx5IFtQeXRob24gMy43K10oIyMgXCJXaW5kb3dzIDdcIiksIGFuZCAqbWF5KiByZW1vdmUgc3VwcG9ydCBmb3IgbW9yZSB2ZXJzaW9ucyBhcyB0aGV5IFtiZWNvbWUgRU9MXShodHRwczovL2Rldmd1aWRlLnB5dGhvbi5vcmcvdmVyc2lvbnMvI3B5dGhvbi1yZWxlYXNlLWN5Y2xlKTsgd2hpbGUgW3lvdXR1YmUtZGwgc3RpbGwgc3VwcG9ydHMgUHl0aG9uIDIuNisgYW5kIDMuMitdKGh0dHBzOi8vZ2l0aHViLmNvbS95dGRsLW9yZy95b3V0dWJlLWRsL2lzc3Vlcy8zMDU2OCNpc3N1ZS0xMTE4MjM4NzQzKVxuKiBUaGUgb3B0aW9ucyBgLS1hdXRvLW51bWJlcmAgKGAtQWApLCBgLS10aXRsZWAgKGAtdGApIGFuZCBgLS1saXRlcmFsYCAoYC1sYCksIG5vIGxvbmdlciB3b3JrLiBTZWUgW3JlbW92ZWQgb3B0aW9uc10oI1JlbW92ZWQpIGZvciBkZXRhaWxzXG4qIGBhdmNvbnZgIGlzIG5vdCBzdXBwb3J0ZWQgYXMgYW4gYWx0ZXJuYXRpdmUgdG8gYGZmbXBlZ2BcbiogeXQtZGxwIHN0b3JlcyBjb25maWcgZmlsZXMgaW4gc2xpZ2h0bHkgZGlmZmVyZW50IGxvY2F0aW9ucyB0byB5b3V0dWJlLWRsLiBTZWUgW0NPTkZJR1VSQVRJT05dKCNjb25maWd1cmF0aW9uKSBmb3IgYSBsaXN0IG9mIGNvcnJlY3QgbG9jYXRpb25zXG4qIFRoZSBkZWZhdWx0IFtvdXRwdXQgdGVtcGxhdGVdKCNvdXRwdXQtdGVtcGxhdGUpIGlzIGAlKHRpdGxlKXMgWyUoaWQpc10uJShleHQpc2AuIFRoZXJlIGlzIG5vIHJlYWwgcmVhc29uIGZvciB0aGlzIGNoYW5nZS4gVGhpcyB3YXMgY2hhbmdlZCBiZWZvcmUgeXQtZGxwIHdhcyBldmVyIG1hZGUgcHVibGljIGFuZCBub3cgdGhlcmUgYXJlIG5vIHBsYW5zIHRvIGNoYW5nZSBpdCBiYWNrIHRvIGAlKHRpdGxlKXMtJShpZClzLiUoZXh0KXNgLiBJbnN0ZWFkLCB5b3UgbWF5IHVzZSBgLS1jb21wYXQtb3B0aW9ucyBmaWxlbmFtZWBcbiogVGhlIGRlZmF1bHQgW2Zvcm1hdCBzb3J0aW5nXSgjc29ydGluZy1mb3JtYXRzKSBpcyBkaWZmZXJlbnQgZnJvbSB5b3V0dWJlLWRsIGFuZCBwcmVmZXJzIGhpZ2hlciByZXNvbHV0aW9uIGFuZCBiZXR0ZXIgY29kZWNzIHJhdGhlciB0aGFuIGhpZ2hlciBiaXRyYXRlcy4gWW91IGNhbiB1c2UgdGhlIGAtLWZvcm1hdC1zb3J0YCBvcHRpb24gdG8gY2hhbmdlIHRoaXMgdG8gYW55IG9yZGVyIHlvdSBwcmVmZXIsIG9yIHVzZSBgLS1jb21wYXQtb3B0aW9ucyBmb3JtYXQtc29ydGAgdG8gdXNlIHlvdXR1YmUtZGwncyBzb3J0aW5nIG9yZGVyXG4qIFRoZSBkZWZhdWx0IGZvcm1hdCBzZWxlY3RvciBpcyBgYnYqK2JhL2JgLiBUaGlzIG1lYW5zIHRoYXQgaWYgYSBjb21iaW5lZCB2aWRlbyArIGF1ZGlvIGZvcm1hdCB0aGF0IGlzIGJldHRlciB0aGFuIHRoZSBiZXN0IHZpZGVvLW9ubHkgZm9ybWF0IGlzIGZvdW5kLCB0aGUgZm9ybWVyIHdpbGwgYmUgcHJlZmVycmVkLiBVc2UgYC1mIGJ2K2JhL2JgIG9yIGAtLWNvbXBhdC1vcHRpb25zIGZvcm1hdC1zcGVjYCB0byByZXZlcnQgdGhpc1xuKiBVbmxpa2UgeW91dHViZS1kbGMsIHl0LWRscCBkb2VzIG5vdCBhbGxvdyBtZXJnaW5nIG11bHRpcGxlIGF1ZGlvL3ZpZGVvIHN0cmVhbXMgaW50byBvbmUgZmlsZSBieSBkZWZhdWx0IChzaW5jZSB0aGlzIGNvbmZsaWN0cyB3aXRoIHRoZSB1c2Ugb2YgYC1mIGJ2KitiYWApLiBJZiBuZWVkZWQsIHRoaXMgZmVhdHVyZSBtdXN0IGJlIGVuYWJsZWQgdXNpbmcgYC0tYXVkaW8tbXVsdGlzdHJlYW1zYCBhbmQgYC0tdmlkZW8tbXVsdGlzdHJlYW1zYC4gWW91IGNhbiBhbHNvIHVzZSBgLS1jb21wYXQtb3B0aW9ucyBtdWx0aXN0cmVhbXNgIHRvIGVuYWJsZSBib3RoXG4qIGAtLW5vLWFib3J0LW9uLWVycm9yYCBpcyBlbmFibGVkIGJ5IGRlZmF1bHQuIFVzZSBgLS1hYm9ydC1vbi1lcnJvcmAgb3IgYC0tY29tcGF0LW9wdGlvbnMgYWJvcnQtb24tZXJyb3JgIHRvIGFib3J0IG9uIGVycm9ycyBpbnN0ZWFkXG4qIFdoZW4gd3JpdGluZyBtZXRhZGF0YSBmaWxlcyBzdWNoIGFzIHRodW1ibmFpbHMsIGRlc2NyaXB0aW9uIG9yIGluZm9qc29uLCB0aGUgc2FtZSBpbmZvcm1hdGlvbiAoaWYgYXZhaWxhYmxlKSBpcyBhbHNvIHdyaXR0ZW4gZm9yIHBsYXlsaXN0cy4gVXNlIGAtLW5vLXdyaXRlLXBsYXlsaXN0LW1ldGFmaWxlc2Agb3IgYC0tY29tcGF0LW9wdGlvbnMgbm8tcGxheWxpc3QtbWV0YWZpbGVzYCB0byBub3Qgd3JpdGUgdGhlc2UgZmlsZXNcbiogYC0tYWRkLW1ldGFkYXRhYCBhdHRhY2hlcyB0aGUgYGluZm9qc29uYCB0byBgbWt2YCBmaWxlcyBpbiBhZGRpdGlvbiB0byB3cml0aW5nIHRoZSBtZXRhZGF0YSB3aGVuIHVzZWQgd2l0aCBgLS13cml0ZS1pbmZvLWpzb25gLiBVc2UgYC0tbm8tZW1iZWQtaW5mby1qc29uYCBvciBgLS1jb21wYXQtb3B0aW9ucyBuby1hdHRhY2gtaW5mby1qc29uYCB0byByZXZlcnQgdGhpc1xuKiBTb21lIG1ldGFkYXRhIGFyZSBlbWJlZGRlZCBpbnRvIGRpZmZlcmVudCBmaWVsZHMgd2hlbiB1c2luZyBgLS1hZGQtbWV0YWRhdGFgIGFzIGNvbXBhcmVkIHRvIHlvdXR1YmUtZGwuIE1vc3Qgbm90YWJseSwgYGNvbW1lbnRgIGZpZWxkIGNvbnRhaW5zIHRoZSBgd2VicGFnZV91cmxgIGFuZCBgc3lub3BzaXNgIGNvbnRhaW5zIHRoZSBgZGVzY3JpcHRpb25gLiBZb3UgY2FuIFt1c2UgYC0tcGFyc2UtbWV0YWRhdGFgXSgjbW9kaWZ5aW5nLW1ldGFkYXRhKSB0byBtb2RpZnkgdGhpcyB0byB5b3VyIGxpa2luZyBvciB1c2UgYC0tY29tcGF0LW9wdGlvbnMgZW1iZWQtbWV0YWRhdGFgIHRvIHJldmVydCB0aGlzXG4qIGBwbGF5bGlzdF9pbmRleGAgYmVoYXZlcyBkaWZmZXJlbnRseSB3aGVuIHVzZWQgd2l0aCBvcHRpb25zIGxpa2UgYC0tcGxheWxpc3QtcmV2ZXJzZWAgYW5kIGAtLXBsYXlsaXN0LWl0ZW1zYC4gU2VlIFsjMzAyXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9pc3N1ZXMvMzAyKSBmb3IgZGV0YWlscy4gWW91IGNhbiB1c2UgYC0tY29tcGF0LW9wdGlvbnMgcGxheWxpc3QtaW5kZXhgIGlmIHlvdSB3YW50IHRvIGtlZXAgdGhlIGVhcmxpZXIgYmVoYXZpb3JcbiogVGhlIG91dHB1dCBvZiBgLUZgIGlzIGxpc3RlZCBpbiBhIG5ldyBmb3JtYXQuIFVzZSBgLS1jb21wYXQtb3B0aW9ucyBsaXN0LWZvcm1hdHNgIHRvIHJldmVydCB0aGlzXG4qIExpdmUgY2hhdHMgKGlmIGF2YWlsYWJsZSkgYXJlIGNvbnNpZGVyZWQgYXMgc3VidGl0bGVzLiBVc2UgYC0tc3ViLWxhbmdzIGFsbCwtbGl2ZV9jaGF0YCB0byBkb3dubG9hZCBhbGwgc3VidGl0bGVzIGV4Y2VwdCBsaXZlIGNoYXQuIFlvdSBjYW4gYWxzbyB1c2UgYC0tY29tcGF0LW9wdGlvbnMgbm8tbGl2ZS1jaGF0YCB0byBwcmV2ZW50IGFueSBsaXZlIGNoYXQvZGFubWFrdSBmcm9tIGRvd25sb2FkaW5nXG4qIFlvdVR1YmUgY2hhbm5lbCBVUkxzIGRvd25sb2FkIGFsbCB1cGxvYWRzIG9mIHRoZSBjaGFubmVsLiBUbyBkb3dubG9hZCBvbmx5IHRoZSB2aWRlb3MgaW4gYSBzcGVjaWZpYyB0YWIsIHBhc3MgdGhlIHRhYidzIFVSTC4gSWYgdGhlIGNoYW5uZWwgZG9lcyBub3Qgc2hvdyB0aGUgcmVxdWVzdGVkIHRhYiwgYW4gZXJyb3Igd2lsbCBiZSByYWlzZWQuIEFsc28sIGAvbGl2ZWAgVVJMcyByYWlzZSBhbiBlcnJvciBpZiB0aGVyZSBhcmUgbm8gbGl2ZSB2aWRlb3MgaW5zdGVhZCBvZiBzaWxlbnRseSBkb3dubG9hZGluZyB0aGUgZW50aXJlIGNoYW5uZWwuIFlvdSBtYXkgdXNlIGAtLWNvbXBhdC1vcHRpb25zIG5vLXlvdXR1YmUtY2hhbm5lbC1yZWRpcmVjdGAgdG8gcmV2ZXJ0IGFsbCB0aGVzZSByZWRpcmVjdGlvbnNcbiogVW5hdmFpbGFibGUgdmlkZW9zIGFyZSBhbHNvIGxpc3RlZCBmb3IgWW91VHViZSBwbGF5bGlzdHMuIFVzZSBgLS1jb21wYXQtb3B0aW9ucyBuby15b3V0dWJlLXVuYXZhaWxhYmxlLXZpZGVvc2AgdG8gcmVtb3ZlIHRoaXNcbiogVGhlIHVwbG9hZCBkYXRlcyBleHRyYWN0ZWQgZnJvbSBZb3VUdWJlIGFyZSBpbiBVVEMgW3doZW4gYXZhaWxhYmxlXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9ibG9iLzg5ZTRkODYxNzFjN2I3Yzk5N2M3N2Q0NzE0NTQyZTAzODNiZjBkYjAveXRfZGxwL2V4dHJhY3Rvci95b3V0dWJlLnB5I0wzODk4LUwzOTAwKS4gVXNlIGAtLWNvbXBhdC1vcHRpb25zIG5vLXlvdXR1YmUtcHJlZmVyLXV0Yy11cGxvYWQtZGF0ZWAgdG8gcHJlZmVyIHRoZSBub24tVVRDIHVwbG9hZCBkYXRlLlxuKiBJZiBgZmZtcGVnYCBpcyB1c2VkIGFzIHRoZSBkb3dubG9hZGVyLCB0aGUgZG93bmxvYWRpbmcgYW5kIG1lcmdpbmcgb2YgZm9ybWF0cyBoYXBwZW4gaW4gYSBzaW5nbGUgc3RlcCB3aGVuIHBvc3NpYmxlLiBVc2UgYC0tY29tcGF0LW9wdGlvbnMgbm8tZGlyZWN0LW1lcmdlYCB0byByZXZlcnQgdGhpc1xuKiBUaHVtYm5haWwgZW1iZWRkaW5nIGluIGBtcDRgIGlzIGRvbmUgd2l0aCBtdXRhZ2VuIGlmIHBvc3NpYmxlLiBVc2UgYC0tY29tcGF0LW9wdGlvbnMgZW1iZWQtdGh1bWJuYWlsLWF0b21pY3BhcnNsZXlgIHRvIGZvcmNlIHRoZSB1c2Ugb2YgQXRvbWljUGFyc2xleSBpbnN0ZWFkXG4qIFNvbWUgcHJpdmF0ZSBmaWVsZHMgc3VjaCBhcyBmaWxlbmFtZXMgYXJlIHJlbW92ZWQgYnkgZGVmYXVsdCBmcm9tIHRoZSBpbmZvanNvbi4gVXNlIGAtLW5vLWNsZWFuLWluZm9qc29uYCBvciBgLS1jb21wYXQtb3B0aW9ucyBuby1jbGVhbi1pbmZvanNvbmAgdG8gcmV2ZXJ0IHRoaXNcbiogV2hlbiBgLS1lbWJlZC1zdWJzYCBhbmQgYC0td3JpdGUtc3Vic2AgYXJlIHVzZWQgdG9nZXRoZXIsIHRoZSBzdWJ0aXRsZXMgYXJlIHdyaXR0ZW4gdG8gZGlzayBhbmQgYWxzbyBlbWJlZGRlZCBpbiB0aGUgbWVkaWEgZmlsZS4gWW91IGNhbiB1c2UganVzdCBgLS1lbWJlZC1zdWJzYCB0byBlbWJlZCB0aGUgc3VicyBhbmQgYXV0b21hdGljYWxseSBkZWxldGUgdGhlIHNlcGFyYXRlIGZpbGUuIFNlZSBbIzYzMCAoY29tbWVudCldKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2lzc3Vlcy82MzAjaXNzdWVjb21tZW50LTg5MzY1OTQ2MCkgZm9yIG1vcmUgaW5mby4gYC0tY29tcGF0LW9wdGlvbnMgbm8ta2VlcC1zdWJzYCBjYW4gYmUgdXNlZCB0byByZXZlcnQgdGhpc1xuKiBgY2VydGlmaWAgd2lsbCBiZSB1c2VkIGZvciBTU0wgcm9vdCBjZXJ0aWZpY2F0ZXMsIGlmIGluc3RhbGxlZC4gSWYgeW91IHdhbnQgdG8gdXNlIHN5c3RlbSBjZXJ0aWZpY2F0ZXMgKGUuZy4gc2VsZi1zaWduZWQpLCB1c2UgYC0tY29tcGF0LW9wdGlvbnMgbm8tY2VydGlmaWBcbiogeXQtZGxwJ3Mgc2FuaXRpemF0aW9uIG9mIGludmFsaWQgY2hhcmFjdGVycyBpbiBmaWxlbmFtZXMgaXMgZGlmZmVyZW50L3NtYXJ0ZXIgdGhhbiBpbiB5b3V0dWJlLWRsLiBZb3UgY2FuIHVzZSBgLS1jb21wYXQtb3B0aW9ucyBmaWxlbmFtZS1zYW5pdGl6YXRpb25gIHRvIHJldmVydCB0byB5b3V0dWJlLWRsJ3MgYmVoYXZpb3JcbiogeXQtZGxwIHRyaWVzIHRvIHBhcnNlIHRoZSBleHRlcm5hbCBkb3dubG9hZGVyIG91dHB1dHMgaW50byB0aGUgc3RhbmRhcmQgcHJvZ3Jlc3Mgb3V0cHV0IGlmIHBvc3NpYmxlIChDdXJyZW50bHkgaW1wbGVtZW50ZWQ6IFt+fmFyaWEyY35+XShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9pc3N1ZXMvNTkzMSkpLiBZb3UgY2FuIHVzZSBgLS1jb21wYXQtb3B0aW9ucyBuby1leHRlcm5hbC1kb3dubG9hZGVyLXByb2dyZXNzYCB0byBnZXQgdGhlIGRvd25sb2FkZXIgb3V0cHV0IGFzLWlzXG5cbkZvciBlYXNlIG9mIHVzZSwgYSBmZXcgbW9yZSBjb21wYXQgb3B0aW9ucyBhcmUgYXZhaWxhYmxlOlxuXG4qIGAtLWNvbXBhdC1vcHRpb25zIGFsbGA6IFVzZSBhbGwgY29tcGF0IG9wdGlvbnMgKERvIE5PVCB1c2UpXG4qIGAtLWNvbXBhdC1vcHRpb25zIHlvdXR1YmUtZGxgOiBTYW1lIGFzIGAtLWNvbXBhdC1vcHRpb25zIGFsbCwtbXVsdGlzdHJlYW1zYFxuKiBgLS1jb21wYXQtb3B0aW9ucyB5b3V0dWJlLWRsY2A6IFNhbWUgYXMgYC0tY29tcGF0LW9wdGlvbnMgYWxsLC1uby1saXZlLWNoYXQsLW5vLXlvdXR1YmUtY2hhbm5lbC1yZWRpcmVjdGBcbiogYC0tY29tcGF0LW9wdGlvbnMgMjAyMWA6IFNhbWUgYXMgYC0tY29tcGF0LW9wdGlvbnMgMjAyMixuby1jZXJ0aWZpLGZpbGVuYW1lLXNhbml0aXphdGlvbixuby15b3V0dWJlLXByZWZlci11dGMtdXBsb2FkLWRhdGVgXG4qIGAtLWNvbXBhdC1vcHRpb25zIDIwMjJgOiBTYW1lIGFzIGAtLWNvbXBhdC1vcHRpb25zIG5vLWV4dGVybmFsLWRvd25sb2FkZXItcHJvZ3Jlc3NgLiBVc2UgdGhpcyB0byBlbmFibGUgYWxsIGZ1dHVyZSBjb21wYXQgb3B0aW9uc1xuXG5cbiMgSU5TVEFMTEFUSU9OXG5cbjwhLS0gTUFOUEFHRTogQkVHSU4gRVhDTFVERUQgU0VDVElPTiAtLT5cblshW1dpbmRvd3NdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVdpbmRvd3NfeDY0LWJsdWUuc3ZnP3N0eWxlPWZvci10aGUtYmFkZ2UmbG9nbz13aW5kb3dzKV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscC5leGUpXG5bIVtVbml4XShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlLy1MaW51eC9CU0QtcmVkLnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlJmxvZ289bGludXgpXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwKVxuWyFbTWFjT1NdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLU1hY09TLWxpZ2h0Ymx1ZS5zdmc/c3R5bGU9Zm9yLXRoZS1iYWRnZSZsb2dvPWFwcGxlKV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscF9tYWNvcylcblshW1B5UGldKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVB5UGktYmx1ZS5zdmc/bG9nbz1weXBpJmxhYmVsQ29sb3I9NTU1NTU1JnN0eWxlPWZvci10aGUtYmFkZ2UpXShodHRwczovL3B5cGkub3JnL3Byb2plY3QveXQtZGxwKVxuWyFbU291cmNlIFRhcmJhbGxdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLVNvdXJjZV90YXItZ3JlZW4uc3ZnP3N0eWxlPWZvci10aGUtYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwLnRhci5neilcblshW090aGVyIHZhcmlhbnRzXShodHRwczovL2ltZy5zaGllbGRzLmlvL2JhZGdlLy1PdGhlci1ncmV5LnN2Zz9zdHlsZT1mb3ItdGhlLWJhZGdlKV0oI3JlbGVhc2UtZmlsZXMpXG5bIVtBbGwgdmVyc2lvbnNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vYmFkZ2UvLUFsbF9WZXJzaW9ucy1saWdodGdyZXkuc3ZnP3N0eWxlPWZvci10aGUtYmFkZ2UpXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcylcbjwhLS0gTUFOUEFHRTogRU5EIEVYQ0xVREVEIFNFQ1RJT04gLS0+XG5cbllvdSBjYW4gaW5zdGFsbCB5dC1kbHAgdXNpbmcgW3RoZSBiaW5hcmllc10oI3JlbGVhc2UtZmlsZXMpLCBbUElQXShodHRwczovL3B5cGkub3JnL3Byb2plY3QveXQtZGxwKSBvciBvbmUgdXNpbmcgYSB0aGlyZC1wYXJ0eSBwYWNrYWdlIG1hbmFnZXIuIFNlZSBbdGhlIHdpa2ldKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3dpa2kvSW5zdGFsbGF0aW9uKSBmb3IgZGV0YWlsZWQgaW5zdHJ1Y3Rpb25zXG5cblxuIyMgVVBEQVRFXG5Zb3UgY2FuIHVzZSBgeXQtZGxwIC1VYCB0byB1cGRhdGUgaWYgeW91IGFyZSB1c2luZyB0aGUgW3JlbGVhc2UgYmluYXJpZXNdKCNyZWxlYXNlLWZpbGVzKVxuXG5JZiB5b3UgW2luc3RhbGxlZCB3aXRoIFBJUF0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvd2lraS9JbnN0YWxsYXRpb24jd2l0aC1waXApLCBzaW1wbHkgcmUtcnVuIHRoZSBzYW1lIGNvbW1hbmQgdGhhdCB3YXMgdXNlZCB0byBpbnN0YWxsIHRoZSBwcm9ncmFtXG5cbkZvciBvdGhlciB0aGlyZC1wYXJ0eSBwYWNrYWdlIG1hbmFnZXJzLCBzZWUgW3RoZSB3aWtpXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC93aWtpL0luc3RhbGxhdGlvbiN0aGlyZC1wYXJ0eS1wYWNrYWdlLW1hbmFnZXJzKSBvciByZWZlciB0aGVpciBkb2N1bWVudGF0aW9uXG5cbjxhIGlkPVwidXBkYXRlLWNoYW5uZWxzXCIvPlxuXG5UaGVyZSBhcmUgY3VycmVudGx5IHR3byByZWxlYXNlIGNoYW5uZWxzIGZvciBiaW5hcmllcywgYHN0YWJsZWAgYW5kIGBuaWdodGx5YC5cbmBzdGFibGVgIGlzIHRoZSBkZWZhdWx0IGNoYW5uZWwsIGFuZCBtYW55IG9mIGl0cyBjaGFuZ2VzIGhhdmUgYmVlbiB0ZXN0ZWQgYnkgdXNlcnMgb2YgdGhlIG5pZ2h0bHkgY2hhbm5lbC5cblRoZSBgbmlnaHRseWAgY2hhbm5lbCBoYXMgcmVsZWFzZXMgYnVpbHQgYWZ0ZXIgZWFjaCBwdXNoIHRvIHRoZSBtYXN0ZXIgYnJhbmNoLCBhbmQgd2lsbCBoYXZlIHRoZSBtb3N0IHJlY2VudCBmaXhlcyBhbmQgYWRkaXRpb25zLCBidXQgYWxzbyBoYXZlIG1vcmUgcmlzayBvZiByZWdyZXNzaW9ucy4gVGhleSBhcmUgYXZhaWxhYmxlIGluIFt0aGVpciBvd24gcmVwb10oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAtbmlnaHRseS1idWlsZHMvcmVsZWFzZXMpLlxuXG5XaGVuIHVzaW5nIGAtLXVwZGF0ZWAvYC1VYCwgYSByZWxlYXNlIGJpbmFyeSB3aWxsIG9ubHkgdXBkYXRlIHRvIGl0cyBjdXJyZW50IGNoYW5uZWwuXG5UaGlzIHJlbGVhc2UgY2hhbm5lbCBjYW4gYmUgY2hhbmdlZCBieSB1c2luZyB0aGUgYC0tdXBkYXRlLXRvYCBvcHRpb24uIGAtLXVwZGF0ZS10b2AgY2FuIGFsc28gYmUgdXNlZCB0byB1cGdyYWRlIG9yIGRvd25ncmFkZSB0byBzcGVjaWZpYyB0YWdzIGZyb20gYSBjaGFubmVsLlxuXG5FeGFtcGxlIHVzYWdlOlxuKiBgeXQtZGxwIC0tdXBkYXRlLXRvIG5pZ2h0bHlgIGNoYW5nZSB0byBgbmlnaHRseWAgY2hhbm5lbCBhbmQgdXBkYXRlIHRvIGl0cyBsYXRlc3QgcmVsZWFzZVxuKiBgeXQtZGxwIC0tdXBkYXRlLXRvIHN0YWJsZUAyMDIzLjAyLjE3YCB1cGdyYWRlL2Rvd25ncmFkZSB0byByZWxlYXNlIHRvIGBzdGFibGVgIGNoYW5uZWwgdGFnIGAyMDIzLjAyLjE3YFxuKiBgeXQtZGxwIC0tdXBkYXRlLXRvIDIwMjMuMDEuMDZgIHVwZ3JhZGUvZG93bmdyYWRlIHRvIHRhZyBgMjAyMy4wMS4wNmAgaWYgaXQgZXhpc3RzIG9uIHRoZSBjdXJyZW50IGNoYW5uZWxcblxuPCEtLSBNQU5QQUdFOiBCRUdJTiBFWENMVURFRCBTRUNUSU9OIC0tPlxuIyMgUkVMRUFTRSBGSUxFU1xuXG4jIyMjIFJlY29tbWVuZGVkXG5cbkZpbGV8RGVzY3JpcHRpb25cbjotLS18Oi0tLVxuW3l0LWRscF0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscCl8UGxhdGZvcm0taW5kZXBlbmRlbnQgW3ppcGltcG9ydF0oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L3ppcGltcG9ydC5odG1sKSBiaW5hcnkuIE5lZWRzIFB5dGhvbiAocmVjb21tZW5kZWQgZm9yICoqTGludXgvQlNEKiopXG5beXQtZGxwLmV4ZV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscC5leGUpfFdpbmRvd3MgKFdpbjcgU1AxKykgc3RhbmRhbG9uZSB4NjQgYmluYXJ5IChyZWNvbW1lbmRlZCBmb3IgKipXaW5kb3dzKiopXG5beXQtZGxwX21hY29zXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX21hY29zKXxVbml2ZXJzYWwgTWFjT1MgKDEwLjE1Kykgc3RhbmRhbG9uZSBleGVjdXRhYmxlIChyZWNvbW1lbmRlZCBmb3IgKipNYWNPUyoqKVxuXG4jIyMjIEFsdGVybmF0aXZlc1xuXG5GaWxlfERlc2NyaXB0aW9uXG46LS0tfDotLS1cblt5dC1kbHBfeDg2LmV4ZV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscF94ODYuZXhlKXxXaW5kb3dzIChWaXN0YSBTUDIrKSBzdGFuZGFsb25lIHg4NiAoMzItYml0KSBiaW5hcnlcblt5dC1kbHBfbWluLmV4ZV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvcmVsZWFzZXMvbGF0ZXN0L2Rvd25sb2FkL3l0LWRscF9taW4uZXhlKXxXaW5kb3dzIChXaW43IFNQMSspIHN0YW5kYWxvbmUgeDY0IGJpbmFyeSBidWlsdCB3aXRoIGBweTJleGVgPGJyLz4gKFtOb3QgcmVjb21tZW5kZWRdKCNzdGFuZGFsb25lLXB5MmV4ZS1idWlsZHMtd2luZG93cykpXG5beXQtZGxwX2xpbnV4XShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX2xpbnV4KXxMaW51eCBzdGFuZGFsb25lIHg2NCBiaW5hcnlcblt5dC1kbHBfbGludXguemlwXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX2xpbnV4LnppcCl8VW5wYWNrYWdlZCBMaW51eCBleGVjdXRhYmxlIChubyBhdXRvLXVwZGF0ZSlcblt5dC1kbHBfbGludXhfYXJtdjdsXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX2xpbnV4X2FybXY3bCl8TGludXggc3RhbmRhbG9uZSBhcm12N2wgKDMyLWJpdCkgYmluYXJ5XG5beXQtZGxwX2xpbnV4X2FhcmNoNjRdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC95dC1kbHBfbGludXhfYWFyY2g2NCl8TGludXggc3RhbmRhbG9uZSBhYXJjaDY0ICg2NC1iaXQpIGJpbmFyeVxuW3l0LWRscF93aW4uemlwXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX3dpbi56aXApfFVucGFja2FnZWQgV2luZG93cyBleGVjdXRhYmxlIChubyBhdXRvLXVwZGF0ZSlcblt5dC1kbHBfbWFjb3MuemlwXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX21hY29zLnppcCl8VW5wYWNrYWdlZCBNYWNPUyAoMTAuMTUrKSBleGVjdXRhYmxlIChubyBhdXRvLXVwZGF0ZSlcblt5dC1kbHBfbWFjb3NfbGVnYWN5XShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwX21hY29zX2xlZ2FjeSl8TWFjT1MgKDEwLjkrKSBzdGFuZGFsb25lIHg2NCBleGVjdXRhYmxlXG5cbiMjIyMgTWlzY1xuXG5GaWxlfERlc2NyaXB0aW9uXG46LS0tfDotLS1cblt5dC1kbHAudGFyLmd6XShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwLnRhci5neil8U291cmNlIHRhcmJhbGxcbltTSEEyLTUxMlNVTVNdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9TSEEyLTUxMlNVTVMpfEdOVS1zdHlsZSBTSEE1MTIgc3Vtc1xuW1NIQTItNTEyU1VNUy5zaWddKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3JlbGVhc2VzL2xhdGVzdC9kb3dubG9hZC9TSEEyLTUxMlNVTVMuc2lnKXxHUEcgc2lnbmF0dXJlIGZpbGUgZm9yIFNIQTUxMiBzdW1zXG5bU0hBMi0yNTZTVU1TXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvU0hBMi0yNTZTVU1TKXxHTlUtc3R5bGUgU0hBMjU2IHN1bXNcbltTSEEyLTI1NlNVTVMuc2lnXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQvU0hBMi0yNTZTVU1TLnNpZyl8R1BHIHNpZ25hdHVyZSBmaWxlIGZvciBTSEEyNTYgc3Vtc1xuXG5UaGUgcHVibGljIGtleSB0aGF0IGNhbiBiZSB1c2VkIHRvIHZlcmlmeSB0aGUgR1BHIHNpZ25hdHVyZXMgaXMgW2F2YWlsYWJsZSBoZXJlXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9ibG9iL21hc3Rlci9wdWJsaWMua2V5KVxuRXhhbXBsZSB1c2FnZTpcbmBgYFxuY3VybCAtTCBodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yYXcvbWFzdGVyL3B1YmxpYy5rZXkgfCBncGcgLS1pbXBvcnRcbmdwZyAtLXZlcmlmeSBTSEEyLTI1NlNVTVMuc2lnIFNIQTItMjU2U1VNU1xuZ3BnIC0tdmVyaWZ5IFNIQTItNTEyU1VNUy5zaWcgU0hBMi01MTJTVU1TXG5gYGBcbjwhLS0gTUFOUEFHRTogRU5EIEVYQ0xVREVEIFNFQ1RJT04gLS0+XG5cbioqTm90ZSoqOiBUaGUgbWFucGFnZXMsIHNoZWxsIGNvbXBsZXRpb24gZmlsZXMgZXRjLiBhcmUgYXZhaWxhYmxlIGluc2lkZSB0aGUgW3NvdXJjZSB0YXJiYWxsXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9yZWxlYXNlcy9sYXRlc3QvZG93bmxvYWQveXQtZGxwLnRhci5neilcblxuIyMgREVQRU5ERU5DSUVTXG5QeXRob24gdmVyc2lvbnMgMy43KyAoQ1B5dGhvbiBhbmQgUHlQeSkgYXJlIHN1cHBvcnRlZC4gT3RoZXIgdmVyc2lvbnMgYW5kIGltcGxlbWVudGF0aW9ucyBtYXkgb3IgbWF5IG5vdCB3b3JrIGNvcnJlY3RseS5cblxuPCEtLSBQeXRob24gMy41KyB1c2VzIFZDKysxNCBhbmQgaXQgaXMgYWxyZWFkeSBlbWJlZGRlZCBpbiB0aGUgYmluYXJ5IGNyZWF0ZWRcbjwheC0tIGh0dHBzOi8vd3d3Lm1pY3Jvc29mdC5jb20vZW4tdXMvZG93bmxvYWQvZGV0YWlscy5hc3B4P2lkPTI2OTk5IC0teD5cbk9uIHdpbmRvd3MsIFtNaWNyb3NvZnQgVmlzdWFsIEMrKyAyMDEwIFNQMSBSZWRpc3RyaWJ1dGFibGUgUGFja2FnZSAoeDg2KV0oaHR0cHM6Ly9kb3dubG9hZC5taWNyb3NvZnQuY29tL2Rvd25sb2FkLzEvNi81LzE2NTI1NUU3LTEwMTQtNEQwQS1CMDk0LUI2QTQzMEE2QkZGQy92Y3JlZGlzdF94ODYuZXhlKSBpcyBhbHNvIG5lY2Vzc2FyeSB0byBydW4geXQtZGxwLiBZb3UgcHJvYmFibHkgYWxyZWFkeSBoYXZlIHRoaXMsIGJ1dCBpZiB0aGUgZXhlY3V0YWJsZSB0aHJvd3MgYW4gZXJyb3IgZHVlIHRvIG1pc3NpbmcgYE1TVkNSMTAwLmRsbGAgeW91IG5lZWQgdG8gaW5zdGFsbCBpdCBtYW51YWxseS5cbi0tPlxuXG5XaGlsZSBhbGwgdGhlIG90aGVyIGRlcGVuZGVuY2llcyBhcmUgb3B0aW9uYWwsIGBmZm1wZWdgIGFuZCBgZmZwcm9iZWAgYXJlIGhpZ2hseSByZWNvbW1lbmRlZFxuXG4jIyMgU3Ryb25nbHkgcmVjb21tZW5kZWRcblxuKiBbKipmZm1wZWcqKiBhbmQgKipmZnByb2JlKipdKGh0dHBzOi8vd3d3LmZmbXBlZy5vcmcpIC0gUmVxdWlyZWQgZm9yIFttZXJnaW5nIHNlcGFyYXRlIHZpZGVvIGFuZCBhdWRpbyBmaWxlc10oI2Zvcm1hdC1zZWxlY3Rpb24pIGFzIHdlbGwgYXMgZm9yIHZhcmlvdXMgW3Bvc3QtcHJvY2Vzc2luZ10oI3Bvc3QtcHJvY2Vzc2luZy1vcHRpb25zKSB0YXNrcy4gTGljZW5zZSBbZGVwZW5kcyBvbiB0aGUgYnVpbGRdKGh0dHBzOi8vd3d3LmZmbXBlZy5vcmcvbGVnYWwuaHRtbClcblxuICAgIFRoZXJlIGFyZSBidWdzIGluIGZmbXBlZyB0aGF0IGNhdXNlcyB2YXJpb3VzIGlzc3VlcyB3aGVuIHVzZWQgYWxvbmdzaWRlIHl0LWRscC4gU2luY2UgZmZtcGVnIGlzIHN1Y2ggYW4gaW1wb3J0YW50IGRlcGVuZGVuY3ksIHdlIHByb3ZpZGUgW2N1c3RvbSBidWlsZHNdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAvRkZtcGVnLUJ1aWxkcyNmZm1wZWctc3RhdGljLWF1dG8tYnVpbGRzKSB3aXRoIHBhdGNoZXMgZm9yIHNvbWUgb2YgdGhlc2UgaXNzdWVzIGF0IFt5dC1kbHAvRkZtcGVnLUJ1aWxkc10oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC9GRm1wZWctQnVpbGRzKS4gU2VlIFt0aGUgcmVhZG1lXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL0ZGbXBlZy1CdWlsZHMjcGF0Y2hlcy1hcHBsaWVkKSBmb3IgZGV0YWlscyBvbiB0aGUgc3BlY2lmaWMgaXNzdWVzIHNvbHZlZCBieSB0aGVzZSBidWlsZHNcbiAgICBcbiAgICAqKkltcG9ydGFudCoqOiBXaGF0IHlvdSBuZWVkIGlzIGZmbXBlZyAqYmluYXJ5KiwgKipOT1QqKiBbdGhlIHB5dGhvbiBwYWNrYWdlIG9mIHRoZSBzYW1lIG5hbWVdKGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9mZm1wZWcpXG5cbiMjIyBOZXR3b3JraW5nXG4qIFsqKmNlcnRpZmkqKl0oaHR0cHM6Ly9naXRodWIuY29tL2NlcnRpZmkvcHl0aG9uLWNlcnRpZmkpXFwqIC0gUHJvdmlkZXMgTW96aWxsYSdzIHJvb3QgY2VydGlmaWNhdGUgYnVuZGxlLiBMaWNlbnNlZCB1bmRlciBbTVBMdjJdKGh0dHBzOi8vZ2l0aHViLmNvbS9jZXJ0aWZpL3B5dGhvbi1jZXJ0aWZpL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4qIFsqKmJyb3RsaSoqXShodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Jyb3RsaSlcXCogb3IgWyoqYnJvdGxpY2ZmaSoqXShodHRwczovL2dpdGh1Yi5jb20vcHl0aG9uLWh5cGVyL2Jyb3RsaWNmZmkpIC0gW0Jyb3RsaV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQnJvdGxpKSBjb250ZW50IGVuY29kaW5nIHN1cHBvcnQuIEJvdGggbGljZW5zZWQgdW5kZXIgTUlUIDxzdXA+WzFdKGh0dHBzOi8vZ2l0aHViLmNvbS9nb29nbGUvYnJvdGxpL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpIFsyXShodHRwczovL2dpdGh1Yi5jb20vcHl0aG9uLWh5cGVyL2Jyb3RsaWNmZmkvYmxvYi9tYXN0ZXIvTElDRU5TRSkgPC9zdXA+XG4qIFsqKndlYnNvY2tldHMqKl0oaHR0cHM6Ly9naXRodWIuY29tL2FhdWd1c3Rpbi93ZWJzb2NrZXRzKVxcKiAtIEZvciBkb3dubG9hZGluZyBvdmVyIHdlYnNvY2tldC4gTGljZW5zZWQgdW5kZXIgW0JTRC0zLUNsYXVzZV0oaHR0cHM6Ly9naXRodWIuY29tL2FhdWd1c3Rpbi93ZWJzb2NrZXRzL2Jsb2IvbWFpbi9MSUNFTlNFKVxuXG4jIyMgTWV0YWRhdGFcblxuKiBbKiptdXRhZ2VuKipdKGh0dHBzOi8vZ2l0aHViLmNvbS9xdW9kbGliZXQvbXV0YWdlbilcXCogLSBGb3IgYC0tZW1iZWQtdGh1bWJuYWlsYCBpbiBjZXJ0YWluIGZvcm1hdHMuIExpY2Vuc2VkIHVuZGVyIFtHUEx2MitdKGh0dHBzOi8vZ2l0aHViLmNvbS9xdW9kbGliZXQvbXV0YWdlbi9ibG9iL21hc3Rlci9DT1BZSU5HKVxuKiBbKipBdG9taWNQYXJzbGV5KipdKGh0dHBzOi8vZ2l0aHViLmNvbS93ZXovYXRvbWljcGFyc2xleSkgLSBGb3IgYC0tZW1iZWQtdGh1bWJuYWlsYCBpbiBgbXA0YC9gbTRhYCBmaWxlcyB3aGVuIGBtdXRhZ2VuYC9gZmZtcGVnYCBjYW5ub3QuIExpY2Vuc2VkIHVuZGVyIFtHUEx2MitdKGh0dHBzOi8vZ2l0aHViLmNvbS93ZXovYXRvbWljcGFyc2xleS9ibG9iL21hc3Rlci9DT1BZSU5HKVxuKiBbKip4YXR0cioqXShodHRwczovL2dpdGh1Yi5jb20veGF0dHIveGF0dHIpLCBbKipweXhhdHRyKipdKGh0dHBzOi8vZ2l0aHViLmNvbS9pdXN0aW4vcHl4YXR0cikgb3IgWyoqc2V0ZmF0dHIqKl0oaHR0cDovL3NhdmFubmFoLm5vbmdudS5vcmcvcHJvamVjdHMvYXR0cikgLSBGb3Igd3JpdGluZyB4YXR0ciBtZXRhZGF0YSAoYC0teGF0dHJgKSBvbiAqKkxpbnV4KiouIExpY2Vuc2VkIHVuZGVyIFtNSVRdKGh0dHBzOi8vZ2l0aHViLmNvbS94YXR0ci94YXR0ci9ibG9iL21hc3Rlci9MSUNFTlNFLnR4dCksIFtMR1BMMi4xXShodHRwczovL2dpdGh1Yi5jb20vaXVzdGluL3B5eGF0dHIvYmxvYi9tYXN0ZXIvQ09QWUlORykgYW5kIFtHUEx2MitdKGh0dHA6Ly9naXQuc2F2YW5uYWgubm9uZ251Lm9yZy9jZ2l0L2F0dHIuZ2l0L3RyZWUvZG9jL0NPUFlJTkcpIHJlc3BlY3RpdmVseVxuXG4jIyMgTWlzY1xuXG4qIFsqKnB5Y3J5cHRvZG9tZXgqKl0oaHR0cHM6Ly9naXRodWIuY29tL0xlZ3JhbmRpbi9weWNyeXB0b2RvbWUpXFwqIC0gRm9yIGRlY3J5cHRpbmcgQUVTLTEyOCBITFMgc3RyZWFtcyBhbmQgdmFyaW91cyBvdGhlciBkYXRhLiBMaWNlbnNlZCB1bmRlciBbQlNELTItQ2xhdXNlXShodHRwczovL2dpdGh1Yi5jb20vTGVncmFuZGluL3B5Y3J5cHRvZG9tZS9ibG9iL21hc3Rlci9MSUNFTlNFLnJzdClcbiogWyoqcGhhbnRvbWpzKipdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcml5YS9waGFudG9tanMpIC0gVXNlZCBpbiBleHRyYWN0b3JzIHdoZXJlIGphdmFzY3JpcHQgbmVlZHMgdG8gYmUgcnVuLiBMaWNlbnNlZCB1bmRlciBbQlNELTMtQ2xhdXNlXShodHRwczovL2dpdGh1Yi5jb20vYXJpeWEvcGhhbnRvbWpzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UuQlNEKVxuKiBbKipzZWNyZXRzdG9yYWdlKipdKGh0dHBzOi8vZ2l0aHViLmNvbS9taXR5YTU3L3NlY3JldHN0b3JhZ2UpIC0gRm9yIGAtLWNvb2tpZXMtZnJvbS1icm93c2VyYCB0byBhY2Nlc3MgdGhlICoqR25vbWUqKiBrZXlyaW5nIHdoaWxlIGRlY3J5cHRpbmcgY29va2llcyBvZiAqKkNocm9taXVtKiotYmFzZWQgYnJvd3NlcnMgb24gKipMaW51eCoqLiBMaWNlbnNlZCB1bmRlciBbQlNELTMtQ2xhdXNlXShodHRwczovL2dpdGh1Yi5jb20vbWl0eWE1Ny9zZWNyZXRzdG9yYWdlL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4qIEFueSBleHRlcm5hbCBkb3dubG9hZGVyIHRoYXQgeW91IHdhbnQgdG8gdXNlIHdpdGggYC0tZG93bmxvYWRlcmBcblxuIyMjIERlcHJlY2F0ZWRcblxuKiBbKiphdmNvbnYqKiBhbmQgKiphdnByb2JlKipdKGh0dHBzOi8vd3d3LmxpYmF2Lm9yZykgLSBOb3cgKipkZXByZWNhdGVkKiogYWx0ZXJuYXRpdmUgdG8gZmZtcGVnLiBMaWNlbnNlIFtkZXBlbmRzIG9uIHRoZSBidWlsZF0oaHR0cHM6Ly9saWJhdi5vcmcvbGVnYWwpXG4qIFsqKnNwb25za3J1YioqXShodHRwczovL2dpdGh1Yi5jb20vZmFpc3NhbG9vL1Nwb25Ta3J1YikgLSBGb3IgdXNpbmcgdGhlIG5vdyAqKmRlcHJlY2F0ZWQqKiBbc3BvbnNrcnViIG9wdGlvbnNdKCNzcG9uc2tydWItb3B0aW9ucykuIExpY2Vuc2VkIHVuZGVyIFtHUEx2MytdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWlzc2Fsb28vU3BvblNrcnViL2Jsb2IvbWFzdGVyL0xJQ0VOQ0UubWQpXG4qIFsqKnJ0bXBkdW1wKipdKGh0dHA6Ly9ydG1wZHVtcC5tcGxheWVyaHEuaHUpIC0gRm9yIGRvd25sb2FkaW5nIGBydG1wYCBzdHJlYW1zLiBmZm1wZWcgY2FuIGJlIHVzZWQgaW5zdGVhZCB3aXRoIGAtLWRvd25sb2FkZXIgZmZtcGVnYC4gTGljZW5zZWQgdW5kZXIgW0dQTHYyK10oaHR0cDovL3J0bXBkdW1wLm1wbGF5ZXJocS5odSlcbiogWyoqbXBsYXllcioqXShodHRwOi8vbXBsYXllcmhxLmh1L2Rlc2lnbjcvaW5mby5odG1sKSBvciBbKiptcHYqKl0oaHR0cHM6Ly9tcHYuaW8pIC0gRm9yIGRvd25sb2FkaW5nIGByc3RwYC9gbW1zYCBzdHJlYW1zLiBmZm1wZWcgY2FuIGJlIHVzZWQgaW5zdGVhZCB3aXRoIGAtLWRvd25sb2FkZXIgZmZtcGVnYC4gTGljZW5zZWQgdW5kZXIgW0dQTHYyK10oaHR0cHM6Ly9naXRodWIuY29tL21wdi1wbGF5ZXIvbXB2L2Jsb2IvbWFzdGVyL0NvcHlyaWdodClcblxuVG8gdXNlIG9yIHJlZGlzdHJpYnV0ZSB0aGUgZGVwZW5kZW5jaWVzLCB5b3UgbXVzdCBhZ3JlZSB0byB0aGVpciByZXNwZWN0aXZlIGxpY2Vuc2luZyB0ZXJtcy5cblxuVGhlIHN0YW5kYWxvbmUgcmVsZWFzZSBiaW5hcmllcyBhcmUgYnVpbHQgd2l0aCB0aGUgUHl0aG9uIGludGVycHJldGVyIGFuZCB0aGUgcGFja2FnZXMgbWFya2VkIHdpdGggKipcXCoqKiBpbmNsdWRlZC5cblxuSWYgeW91IGRvIG5vdCBoYXZlIHRoZSBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzIGZvciBhIHRhc2sgeW91IGFyZSBhdHRlbXB0aW5nLCB5dC1kbHAgd2lsbCB3YXJuIHlvdS4gQWxsIHRoZSBjdXJyZW50bHkgYXZhaWxhYmxlIGRlcGVuZGVuY2llcyBhcmUgdmlzaWJsZSBhdCB0aGUgdG9wIG9mIHRoZSBgLS12ZXJib3NlYCBvdXRwdXRcblxuXG4jIyBDT01QSUxFXG5cbiMjIyBTdGFuZGFsb25lIFB5SW5zdGFsbGVyIEJ1aWxkc1xuVG8gYnVpbGQgdGhlIHN0YW5kYWxvbmUgZXhlY3V0YWJsZSwgeW91IG11c3QgaGF2ZSBQeXRob24gYW5kIGBweWluc3RhbGxlcmAgKHBsdXMgYW55IG9mIHl0LWRscCdzIFtvcHRpb25hbCBkZXBlbmRlbmNpZXNdKCNkZXBlbmRlbmNpZXMpIGlmIG5lZWRlZCkuIE9uY2UgeW91IGhhdmUgYWxsIHRoZSBuZWNlc3NhcnkgZGVwZW5kZW5jaWVzIGluc3RhbGxlZCwgc2ltcGx5IHJ1biBgcHlpbnN0LnB5YC4gVGhlIGV4ZWN1dGFibGUgd2lsbCBiZSBidWlsdCBmb3IgdGhlIHNhbWUgYXJjaGl0ZWN0dXJlICh4ODYvQVJNLCAzMi82NCBiaXQpIGFzIHRoZSBQeXRob24gdXNlZC5cblxuICAgIHB5dGhvbjMgLW0gcGlwIGluc3RhbGwgLVUgcHlpbnN0YWxsZXIgLXIgcmVxdWlyZW1lbnRzLnR4dFxuICAgIHB5dGhvbjMgZGV2c2NyaXB0cy9tYWtlX2xhenlfZXh0cmFjdG9ycy5weVxuICAgIHB5dGhvbjMgcHlpbnN0LnB5XG5cbk9uIHNvbWUgc3lzdGVtcywgeW91IG1heSBuZWVkIHRvIHVzZSBgcHlgIG9yIGBweXRob25gIGluc3RlYWQgb2YgYHB5dGhvbjNgLlxuXG5gcHlpbnN0LnB5YCBhY2NlcHRzIGFueSBhcmd1bWVudHMgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIGBweWluc3RhbGxlcmAsIHN1Y2ggYXMgYC0tb25lZmlsZS8tRmAgb3IgYC0tb25lZGlyLy1EYCwgd2hpY2ggaXMgZnVydGhlciBbZG9jdW1lbnRlZCBoZXJlXShodHRwczovL3B5aW5zdGFsbGVyLm9yZy9lbi9zdGFibGUvdXNhZ2UuaHRtbCN3aGF0LXRvLWdlbmVyYXRlKS5cblxuKipOb3RlKio6IFB5aW5zdGFsbGVyIHZlcnNpb25zIGJlbG93IDQuNCBbZG8gbm90IHN1cHBvcnRdKGh0dHBzOi8vZ2l0aHViLmNvbS9weWluc3RhbGxlci9weWluc3RhbGxlciNyZXF1aXJlbWVudHMtYW5kLXRlc3RlZC1wbGF0Zm9ybXMpIFB5dGhvbiBpbnN0YWxsZWQgZnJvbSB0aGUgV2luZG93cyBzdG9yZSB3aXRob3V0IHVzaW5nIGEgdmlydHVhbCBlbnZpcm9ubWVudC5cblxuKipJbXBvcnRhbnQqKjogUnVubmluZyBgcHlpbnN0YWxsZXJgIGRpcmVjdGx5ICoqd2l0aG91dCoqIHVzaW5nIGBweWluc3QucHlgIGlzICoqbm90Kiogb2ZmaWNpYWxseSBzdXBwb3J0ZWQuIFRoaXMgbWF5IG9yIG1heSBub3Qgd29yayBjb3JyZWN0bHkuXG5cbiMjIyBQbGF0Zm9ybS1pbmRlcGVuZGVudCBCaW5hcnkgKFVOSVgpXG5Zb3Ugd2lsbCBuZWVkIHRoZSBidWlsZCB0b29scyBgcHl0aG9uYCAoMy43KyksIGB6aXBgLCBgbWFrZWAgKEdOVSksIGBwYW5kb2NgXFwqIGFuZCBgcHl0ZXN0YFxcKi5cblxuQWZ0ZXIgaW5zdGFsbGluZyB0aGVzZSwgc2ltcGx5IHJ1biBgbWFrZWAuXG5cbllvdSBjYW4gYWxzbyBydW4gYG1ha2UgeXQtZGxwYCBpbnN0ZWFkIHRvIGNvbXBpbGUgb25seSB0aGUgYmluYXJ5IHdpdGhvdXQgdXBkYXRpbmcgYW55IG9mIHRoZSBhZGRpdGlvbmFsIGZpbGVzLiAoVGhlIGJ1aWxkIHRvb2xzIG1hcmtlZCB3aXRoICoqXFwqKiogYXJlIG5vdCBuZWVkZWQgZm9yIHRoaXMpXG5cbiMjIyBTdGFuZGFsb25lIFB5MkV4ZSBCdWlsZHMgKFdpbmRvd3MpXG5cbldoaWxlIHdlIHByb3ZpZGUgdGhlIG9wdGlvbiB0byBidWlsZCB3aXRoIFtweTJleGVdKGh0dHBzOi8vd3d3LnB5MmV4ZS5vcmcpLCBpdCBpcyByZWNvbW1lbmRlZCB0byBidWlsZCBbdXNpbmcgUHlJbnN0YWxsZXJdKCNzdGFuZGFsb25lLXB5aW5zdGFsbGVyLWJ1aWxkcykgaW5zdGVhZCBzaW5jZSB0aGUgcHkyZXhlIGJ1aWxkcyAqKmNhbm5vdCBjb250YWluIGBweWNyeXB0b2RvbWV4YC9gY2VydGlmaWAgYW5kIG5lZWRzIFZDKysxNCoqIG9uIHRoZSB0YXJnZXQgY29tcHV0ZXIgdG8gcnVuLlxuXG5JZiB5b3Ugd2lzaCB0byBidWlsZCBpdCBhbnl3YXksIGluc3RhbGwgUHl0aG9uIGFuZCBweTJleGUsIGFuZCB0aGVuIHNpbXBseSBydW4gYHNldHVwLnB5IHB5MmV4ZWBcblxuICAgIHB5IC1tIHBpcCBpbnN0YWxsIC1VIHB5MmV4ZSAtciByZXF1aXJlbWVudHMudHh0XG4gICAgcHkgZGV2c2NyaXB0cy9tYWtlX2xhenlfZXh0cmFjdG9ycy5weVxuICAgIHB5IHNldHVwLnB5IHB5MmV4ZVxuXG4jIyMgUmVsYXRlZCBzY3JpcHRzXG5cbiogKipgZGV2c2NyaXB0cy91cGRhdGUtdmVyc2lvbi5weWAqKiAtIFVwZGF0ZSB0aGUgdmVyc2lvbiBudW1iZXIgYmFzZWQgb24gY3VycmVudCBkYXRlLlxuKiAqKmBkZXZzY3JpcHRzL3NldC12YXJpYW50LnB5YCoqIC0gU2V0IHRoZSBidWlsZCB2YXJpYW50IG9mIHRoZSBleGVjdXRhYmxlLlxuKiAqKmBkZXZzY3JpcHRzL21ha2VfY2hhbmdlbG9nLnB5YCoqIC0gQ3JlYXRlIGEgbWFya2Rvd24gY2hhbmdlbG9nIHVzaW5nIHNob3J0IGNvbW1pdCBtZXNzYWdlcyBhbmQgdXBkYXRlIGBDT05UUklCVVRPUlNgIGZpbGUuXG4qICoqYGRldnNjcmlwdHMvbWFrZV9sYXp5X2V4dHJhY3RvcnMucHlgKiogLSBDcmVhdGUgbGF6eSBleHRyYWN0b3JzLiBSdW5uaW5nIHRoaXMgYmVmb3JlIGJ1aWxkaW5nIHRoZSBiaW5hcmllcyAoYW55IHZhcmlhbnQpIHdpbGwgaW1wcm92ZSB0aGVpciBzdGFydHVwIHBlcmZvcm1hbmNlLiBTZXQgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGBZVERMUF9OT19MQVpZX0VYVFJBQ1RPUlM9MWAgaWYgeW91IHdpc2ggdG8gZm9yY2VmdWxseSBkaXNhYmxlIGxhenkgZXh0cmFjdG9yIGxvYWRpbmcuXG5cbk5vdGU6IFNlZSB0aGVpciBgLS1oZWxwYCBmb3IgbW9yZSBpbmZvLlxuXG4jIyMgRm9ya2luZyB0aGUgcHJvamVjdFxuSWYgeW91IGZvcmsgdGhlIHByb2plY3Qgb24gR2l0SHViLCB5b3UgY2FuIHJ1biB5b3VyIGZvcmsncyBbYnVpbGQgd29ya2Zsb3ddKC5naXRodWIvd29ya2Zsb3dzL2J1aWxkLnltbCkgdG8gYXV0b21hdGljYWxseSBidWlsZCB0aGUgc2VsZWN0ZWQgdmVyc2lvbihzKSBhcyBhcnRpZmFjdHMuIEFsdGVybmF0aXZlbHksIHlvdSBjYW4gcnVuIHRoZSBbcmVsZWFzZSB3b3JrZmxvd10oLmdpdGh1Yi93b3JrZmxvd3MvcmVsZWFzZS55bWwpIG9yIGVuYWJsZSB0aGUgW25pZ2h0bHkgd29ya2Zsb3ddKC5naXRodWIvd29ya2Zsb3dzL3JlbGVhc2UtbmlnaHRseS55bWwpIHRvIGNyZWF0ZSBmdWxsIChwcmUtKXJlbGVhc2VzLlxuXG4jIFVTQUdFIEFORCBPUFRJT05TXG5cbjwhLS0gTUFOUEFHRTogQkVHSU4gRVhDTFVERUQgU0VDVElPTiAtLT5cbiAgICB5dC1kbHAgW09QVElPTlNdIFstLV0gVVJMIFtVUkwuLi5dXG5cbmBDdHJsK0ZgIGlzIHlvdXIgZnJpZW5kIDpEXG48IS0tIE1BTlBBR0U6IEVORCBFWENMVURFRCBTRUNUSU9OIC0tPlxuXG48IS0tIEF1dG8gZ2VuZXJhdGVkIC0tPlxuIyMgR2VuZXJhbCBPcHRpb25zOlxuICAgIC1oLCAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgUHJpbnQgdGhpcyBoZWxwIHRleHQgYW5kIGV4aXRcbiAgICAtLXZlcnNpb24gICAgICAgICAgICAgICAgICAgICAgIFByaW50IHByb2dyYW0gdmVyc2lvbiBhbmQgZXhpdFxuICAgIC1VLCAtLXVwZGF0ZSAgICAgICAgICAgICAgICAgICAgVXBkYXRlIHRoaXMgcHJvZ3JhbSB0byB0aGUgbGF0ZXN0IHZlcnNpb25cbiAgICAtLW5vLXVwZGF0ZSAgICAgICAgICAgICAgICAgICAgIERvIG5vdCBjaGVjayBmb3IgdXBkYXRlcyAoZGVmYXVsdClcbiAgICAtLXVwZGF0ZS10byBbQ0hBTk5FTF1AW1RBR10gICAgIFVwZ3JhZGUvZG93bmdyYWRlIHRvIGEgc3BlY2lmaWMgdmVyc2lvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENIQU5ORUwgYW5kIFRBRyBkZWZhdWx0cyB0byBcInN0YWJsZVwiIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJsYXRlc3RcIiByZXNwZWN0aXZlbHkgaWYgb21pdHRlZDsgU2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlVQREFURVwiIGZvciBkZXRhaWxzLiBTdXBwb3J0ZWQgY2hhbm5lbHM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFibGUsIG5pZ2h0bHlcbiAgICAtaSwgLS1pZ25vcmUtZXJyb3JzICAgICAgICAgICAgIElnbm9yZSBkb3dubG9hZCBhbmQgcG9zdHByb2Nlc3NpbmcgZXJyb3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGRvd25sb2FkIHdpbGwgYmUgY29uc2lkZXJlZCBzdWNjZXNzZnVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVuIGlmIHRoZSBwb3N0cHJvY2Vzc2luZyBmYWlsc1xuICAgIC0tbm8tYWJvcnQtb24tZXJyb3IgICAgICAgICAgICAgQ29udGludWUgd2l0aCBuZXh0IHZpZGVvIG9uIGRvd25sb2FkIGVycm9ycztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZy4gdG8gc2tpcCB1bmF2YWlsYWJsZSB2aWRlb3MgaW4gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3QgKGRlZmF1bHQpXG4gICAgLS1hYm9ydC1vbi1lcnJvciAgICAgICAgICAgICAgICBBYm9ydCBkb3dubG9hZGluZyBvZiBmdXJ0aGVyIHZpZGVvcyBpZiBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3Igb2NjdXJzIChBbGlhczogLS1uby1pZ25vcmUtZXJyb3JzKVxuICAgIC0tZHVtcC11c2VyLWFnZW50ICAgICAgICAgICAgICAgRGlzcGxheSB0aGUgY3VycmVudCB1c2VyLWFnZW50IGFuZCBleGl0XG4gICAgLS1saXN0LWV4dHJhY3RvcnMgICAgICAgICAgICAgICBMaXN0IGFsbCBzdXBwb3J0ZWQgZXh0cmFjdG9ycyBhbmQgZXhpdFxuICAgIC0tZXh0cmFjdG9yLWRlc2NyaXB0aW9ucyAgICAgICAgT3V0cHV0IGRlc2NyaXB0aW9ucyBvZiBhbGwgc3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYWN0b3JzIGFuZCBleGl0XG4gICAgLS11c2UtZXh0cmFjdG9ycyBOQU1FUyAgICAgICAgICBFeHRyYWN0b3IgbmFtZXMgdG8gdXNlIHNlcGFyYXRlZCBieSBjb21tYXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3UgY2FuIGFsc28gdXNlIHJlZ2V4ZXMsIFwiYWxsXCIsIFwiZGVmYXVsdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgXCJlbmRcIiAoZW5kIFVSTCBtYXRjaGluZyk7IGUuZy4gLS1pZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaG9sb2RleC4qLGVuZCx5b3V0dWJlXCIuIFByZWZpeCB0aGUgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBhIFwiLVwiIHRvIGV4Y2x1ZGUgaXQsIGUuZy4gLS1pZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsLWdlbmVyaWMuIFVzZSAtLWxpc3QtZXh0cmFjdG9ycyBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgbGlzdCBvZiBleHRyYWN0b3IgbmFtZXMuIChBbGlhczogLS1pZXMpXG4gICAgLS1kZWZhdWx0LXNlYXJjaCBQUkVGSVggICAgICAgICBVc2UgdGhpcyBwcmVmaXggZm9yIHVucXVhbGlmaWVkIFVSTHMuIEUuZy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ3ZzZWFyY2gyOnB5dGhvblwiIGRvd25sb2FkcyB0d28gdmlkZW9zIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdvb2dsZSB2aWRlb3MgZm9yIHRoZSBzZWFyY2ggdGVybSBcInB5dGhvblwiLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXNlIHRoZSB2YWx1ZSBcImF1dG9cIiB0byBsZXQgeXQtZGxwIGd1ZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoXCJhdXRvX3dhcm5pbmdcIiB0byBlbWl0IGEgd2FybmluZyB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBndWVzc2luZykuIFwiZXJyb3JcIiBqdXN0IHRocm93cyBhbiBlcnJvci4gVGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IHZhbHVlIFwiZml4dXBfZXJyb3JcIiByZXBhaXJzIGJyb2tlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVVJMcywgYnV0IGVtaXRzIGFuIGVycm9yIGlmIHRoaXMgaXMgbm90XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZSBpbnN0ZWFkIG9mIHNlYXJjaGluZ1xuICAgIC0taWdub3JlLWNvbmZpZyAgICAgICAgICAgICAgICAgRG9uJ3QgbG9hZCBhbnkgbW9yZSBjb25maWd1cmF0aW9uIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgdGhvc2UgZ2l2ZW4gYnkgLS1jb25maWctbG9jYXRpb25zLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGlmIHRoaXMgb3B0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBmb3VuZCBpbnNpZGUgdGhlIHN5c3RlbSBjb25maWd1cmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlLCB0aGUgdXNlciBjb25maWd1cmF0aW9uIGlzIG5vdCBsb2FkZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQWxpYXM6IC0tbm8tY29uZmlnKVxuICAgIC0tbm8tY29uZmlnLWxvY2F0aW9ucyAgICAgICAgICAgRG8gbm90IGxvYWQgYW55IGN1c3RvbSBjb25maWd1cmF0aW9uIGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCkuIFdoZW4gZ2l2ZW4gaW5zaWRlIGEgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSwgaWdub3JlIGFsbCBwcmV2aW91cyAtLWNvbmZpZy1sb2NhdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZWQgaW4gdGhlIGN1cnJlbnQgZmlsZVxuICAgIC0tY29uZmlnLWxvY2F0aW9ucyBQQVRIICAgICAgICAgTG9jYXRpb24gb2YgdGhlIG1haW4gY29uZmlndXJhdGlvbiBmaWxlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHRoZSBwYXRoIHRvIHRoZSBjb25maWcgb3IgaXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluaW5nIGRpcmVjdG9yeSAoXCItXCIgZm9yIHN0ZGluKS4gQ2FuIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIG11bHRpcGxlIHRpbWVzIGFuZCBpbnNpZGUgb3RoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gZmlsZXNcbiAgICAtLWZsYXQtcGxheWxpc3QgICAgICAgICAgICAgICAgIERvIG5vdCBleHRyYWN0IHRoZSB2aWRlb3Mgb2YgYSBwbGF5bGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgbGlzdCB0aGVtXG4gICAgLS1uby1mbGF0LXBsYXlsaXN0ICAgICAgICAgICAgICBFeHRyYWN0IHRoZSB2aWRlb3Mgb2YgYSBwbGF5bGlzdFxuICAgIC0tbGl2ZS1mcm9tLXN0YXJ0ICAgICAgICAgICAgICAgRG93bmxvYWQgbGl2ZXN0cmVhbXMgZnJvbSB0aGUgc3RhcnQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50bHkgb25seSBzdXBwb3J0ZWQgZm9yIFlvdVR1YmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChFeHBlcmltZW50YWwpXG4gICAgLS1uby1saXZlLWZyb20tc3RhcnQgICAgICAgICAgICBEb3dubG9hZCBsaXZlc3RyZWFtcyBmcm9tIHRoZSBjdXJyZW50IHRpbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0KVxuICAgIC0td2FpdC1mb3ItdmlkZW8gTUlOWy1NQVhdICAgICAgV2FpdCBmb3Igc2NoZWR1bGVkIHN0cmVhbXMgdG8gYmVjb21lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGUuIFBhc3MgdGhlIG1pbmltdW0gbnVtYmVyIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWNvbmRzIChvciByYW5nZSkgdG8gd2FpdCBiZXR3ZWVuIHJldHJpZXNcbiAgICAtLW5vLXdhaXQtZm9yLXZpZGVvICAgICAgICAgICAgIERvIG5vdCB3YWl0IGZvciBzY2hlZHVsZWQgc3RyZWFtcyAoZGVmYXVsdClcbiAgICAtLW1hcmstd2F0Y2hlZCAgICAgICAgICAgICAgICAgIE1hcmsgdmlkZW9zIHdhdGNoZWQgKGV2ZW4gd2l0aCAtLXNpbXVsYXRlKVxuICAgIC0tbm8tbWFyay13YXRjaGVkICAgICAgICAgICAgICAgRG8gbm90IG1hcmsgdmlkZW9zIHdhdGNoZWQgKGRlZmF1bHQpXG4gICAgLS1uby1jb2xvcnMgICAgICAgICAgICAgICAgICAgICBEbyBub3QgZW1pdCBjb2xvciBjb2RlcyBpbiBvdXRwdXQgKEFsaWFzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1uby1jb2xvdXJzKVxuICAgIC0tY29tcGF0LW9wdGlvbnMgT1BUUyAgICAgICAgICAgT3B0aW9ucyB0aGF0IGNhbiBoZWxwIGtlZXAgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB5b3V0dWJlLWRsIG9yIHlvdXR1YmUtZGxjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWd1cmF0aW9ucyBieSByZXZlcnRpbmcgc29tZSBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXMgbWFkZSBpbiB5dC1kbHAuIFNlZSBcIkRpZmZlcmVuY2VzIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IGJlaGF2aW9yXCIgZm9yIGRldGFpbHNcbiAgICAtLWFsaWFzIEFMSUFTRVMgT1BUSU9OUyAgICAgICAgIENyZWF0ZSBhbGlhc2VzIGZvciBhbiBvcHRpb24gc3RyaW5nLiBVbmxlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuIGFsaWFzIHN0YXJ0cyB3aXRoIGEgZGFzaCBcIi1cIiwgaXQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeGVkIHdpdGggXCItLVwiLiBBcmd1bWVudHMgYXJlIHBhcnNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBQeXRob24gc3RyaW5nIGZvcm1hdHRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbmktbGFuZ3VhZ2UuIEUuZy4gLS1hbGlhcyBnZXQtYXVkaW8sLVhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiLVM9YWV4dDp7MH0sYWJyIC14IC0tYXVkaW8tZm9ybWF0IHswfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVzIG9wdGlvbnMgXCItLWdldC1hdWRpb1wiIGFuZCBcIi1YXCIgdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFrZXMgYW4gYXJndW1lbnQgKEFSRzApIGFuZCBleHBhbmRzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi1TPWFleHQ6QVJHMCxhYnIgLXggLS1hdWRpby1mb3JtYXQgQVJHMFwiLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsIGRlZmluZWQgYWxpYXNlcyBhcmUgbGlzdGVkIGluIHRoZSAtLWhlbHBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dC4gQWxpYXMgb3B0aW9ucyBjYW4gdHJpZ2dlciBtb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGlhc2VzOyBzbyBiZSBjYXJlZnVsIHRvIGF2b2lkIGRlZmluaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWN1cnNpdmUgb3B0aW9ucy4gQXMgYSBzYWZldHkgbWVhc3VyZSwgZWFjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxpYXMgbWF5IGJlIHRyaWdnZXJlZCBhIG1heGltdW0gb2YgMTAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lcy4gVGhpcyBvcHRpb24gY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXNcblxuIyMgTmV0d29yayBPcHRpb25zOlxuICAgIC0tcHJveHkgVVJMICAgICAgICAgICAgICAgICAgICAgVXNlIHRoZSBzcGVjaWZpZWQgSFRUUC9IVFRQUy9TT0NLUyBwcm94eS4gVG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuYWJsZSBTT0NLUyBwcm94eSwgc3BlY2lmeSBhIHByb3BlciBzY2hlbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmcuIHNvY2tzNTovL3VzZXI6cGFzc0AxMjcuMC4wLjE6MTA4MC8uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzIGluIGFuIGVtcHR5IHN0cmluZyAoLS1wcm94eSBcIlwiKSBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpcmVjdCBjb25uZWN0aW9uXG4gICAgLS1zb2NrZXQtdGltZW91dCBTRUNPTkRTICAgICAgICBUaW1lIHRvIHdhaXQgYmVmb3JlIGdpdmluZyB1cCwgaW4gc2Vjb25kc1xuICAgIC0tc291cmNlLWFkZHJlc3MgSVAgICAgICAgICAgICAgQ2xpZW50LXNpZGUgSVAgYWRkcmVzcyB0byBiaW5kIHRvXG4gICAgLTQsIC0tZm9yY2UtaXB2NCAgICAgICAgICAgICAgICBNYWtlIGFsbCBjb25uZWN0aW9ucyB2aWEgSVB2NFxuICAgIC02LCAtLWZvcmNlLWlwdjYgICAgICAgICAgICAgICAgTWFrZSBhbGwgY29ubmVjdGlvbnMgdmlhIElQdjZcbiAgICAtLWVuYWJsZS1maWxlLXVybHMgICAgICAgICAgICAgIEVuYWJsZSBmaWxlOi8vIFVSTHMuIFRoaXMgaXMgZGlzYWJsZWQgYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQgZm9yIHNlY3VyaXR5IHJlYXNvbnMuXG5cbiMjIEdlby1yZXN0cmljdGlvbjpcbiAgICAtLWdlby12ZXJpZmljYXRpb24tcHJveHkgVVJMICAgIFVzZSB0aGlzIHByb3h5IHRvIHZlcmlmeSB0aGUgSVAgYWRkcmVzcyBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvbWUgZ2VvLXJlc3RyaWN0ZWQgc2l0ZXMuIFRoZSBkZWZhdWx0IHByb3h5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpZWQgYnkgLS1wcm94eSAob3Igbm9uZSwgaWYgdGhlIG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgbm90IHByZXNlbnQpIGlzIHVzZWQgZm9yIHRoZSBhY3R1YWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nXG4gICAgLS1nZW8tYnlwYXNzICAgICAgICAgICAgICAgICAgICBCeXBhc3MgZ2VvZ3JhcGhpYyByZXN0cmljdGlvbiB2aWEgZmFraW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBYLUZvcndhcmRlZC1Gb3IgSFRUUCBoZWFkZXIgKGRlZmF1bHQpXG4gICAgLS1uby1nZW8tYnlwYXNzICAgICAgICAgICAgICAgICBEbyBub3QgYnlwYXNzIGdlb2dyYXBoaWMgcmVzdHJpY3Rpb24gdmlhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWtpbmcgWC1Gb3J3YXJkZWQtRm9yIEhUVFAgaGVhZGVyXG4gICAgLS1nZW8tYnlwYXNzLWNvdW50cnkgQ09ERSAgICAgICBGb3JjZSBieXBhc3MgZ2VvZ3JhcGhpYyByZXN0cmljdGlvbiB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsaWNpdGx5IHByb3ZpZGVkIHR3by1sZXR0ZXIgSVNPIDMxNjYtMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeSBjb2RlXG4gICAgLS1nZW8tYnlwYXNzLWlwLWJsb2NrIElQX0JMT0NLICBGb3JjZSBieXBhc3MgZ2VvZ3JhcGhpYyByZXN0cmljdGlvbiB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBsaWNpdGx5IHByb3ZpZGVkIElQIGJsb2NrIGluIENJRFIgbm90YXRpb25cblxuIyMgVmlkZW8gU2VsZWN0aW9uOlxuICAgIC1JLCAtLXBsYXlsaXN0LWl0ZW1zIElURU1fU1BFQyAgQ29tbWEgc2VwYXJhdGVkIHBsYXlsaXN0X2luZGV4IG9mIHRoZSBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gZG93bmxvYWQuIFlvdSBjYW4gc3BlY2lmeSBhIHJhbmdlIHVzaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIltTVEFSVF06W1NUT1BdWzpTVEVQXVwiLiBGb3IgYmFja3dhcmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhdGliaWxpdHksIFNUQVJULVNUT1AgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2UgbmVnYXRpdmUgaW5kaWNlcyB0byBjb3VudCBmcm9tIHRoZSByaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIG5lZ2F0aXZlIFNURVAgdG8gZG93bmxvYWQgaW4gcmV2ZXJzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXIuIEUuZy4gXCItSSAxOjMsNywtNTo6MlwiIHVzZWQgb24gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWxpc3Qgb2Ygc2l6ZSAxNSB3aWxsIGRvd25sb2FkIHRoZSBpdGVtc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXQgaW5kZXggMSwyLDMsNywxMSwxMywxNVxuICAgIC0tbWluLWZpbGVzaXplIFNJWkUgICAgICAgICAgICAgQWJvcnQgZG93bmxvYWQgaWYgZmlsZXNpemUgaXMgc21hbGxlciB0aGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVpFLCBlLmcuIDUwayBvciA0NC42TVxuICAgIC0tbWF4LWZpbGVzaXplIFNJWkUgICAgICAgICAgICAgQWJvcnQgZG93bmxvYWQgaWYgZmlsZXNpemUgaXMgbGFyZ2VyIHRoYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJWkUsIGUuZy4gNTBrIG9yIDQ0LjZNXG4gICAgLS1kYXRlIERBVEUgICAgICAgICAgICAgICAgICAgICBEb3dubG9hZCBvbmx5IHZpZGVvcyB1cGxvYWRlZCBvbiB0aGlzIGRhdGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgZGF0ZSBjYW4gYmUgXCJZWVlZTU1ERFwiIG9yIGluIHRoZSBmb3JtYXQgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbbm93fHRvZGF5fHllc3RlcmRheV1bLU5bZGF5fHdlZWt8bW9udGh8eWVhcl1dLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5nLiBcIi0tZGF0ZSB0b2RheS0yd2Vla3NcIiBkb3dubG9hZHMgb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9zIHVwbG9hZGVkIG9uIHRoZSBzYW1lIGRheSB0d28gd2Vla3MgYWdvXG4gICAgLS1kYXRlYmVmb3JlIERBVEUgICAgICAgICAgICAgICBEb3dubG9hZCBvbmx5IHZpZGVvcyB1cGxvYWRlZCBvbiBvciBiZWZvcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgZGF0ZS4gVGhlIGRhdGUgZm9ybWF0cyBhY2NlcHRlZCBpcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbWUgYXMgLS1kYXRlXG4gICAgLS1kYXRlYWZ0ZXIgREFURSAgICAgICAgICAgICAgICBEb3dubG9hZCBvbmx5IHZpZGVvcyB1cGxvYWRlZCBvbiBvciBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBkYXRlLiBUaGUgZGF0ZSBmb3JtYXRzIGFjY2VwdGVkIGlzIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtZSBhcyAtLWRhdGVcbiAgICAtLW1hdGNoLWZpbHRlcnMgRklMVEVSICAgICAgICAgIEdlbmVyaWMgdmlkZW8gZmlsdGVyLiBBbnkgXCJPVVRQVVQgVEVNUExBVEVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQgY2FuIGJlIGNvbXBhcmVkIHdpdGggYSBudW1iZXIgb3IgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHVzaW5nIHRoZSBvcGVyYXRvcnMgZGVmaW5lZCBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJGaWx0ZXJpbmcgRm9ybWF0c1wiLiBZb3UgY2FuIGFsc28gc2ltcGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZ5IGEgZmllbGQgdG8gbWF0Y2ggaWYgdGhlIGZpZWxkIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVzZW50LCB1c2UgXCIhZmllbGRcIiB0byBjaGVjayBpZiB0aGUgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIG5vdCBwcmVzZW50LCBhbmQgXCImXCIgdG8gY2hlY2sgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbnMuIFVzZSBhIFwiXFxcIiB0byBlc2NhcGUgXCImXCIgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1b3RlcyBpZiBuZWVkZWQuIElmIHVzZWQgbXVsdGlwbGUgdGltZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZmlsdGVyIG1hdGNoZXMgaWYgYXRsZWFzdCBvbmUgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25zIGFyZSBtZXQuIEUuZy4gLS1tYXRjaC1maWx0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpc19saXZlIC0tbWF0Y2gtZmlsdGVyIFwibGlrZV9jb3VudD4/MTAwICZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9ufj0nKD9pKVxcYmNhdHMgXFwmIGRvZ3NcXGInXCIgbWF0Y2hlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSB2aWRlb3MgdGhhdCBhcmUgbm90IGxpdmUgT1IgdGhvc2UgdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGF2ZSBhIGxpa2UgY291bnQgbW9yZSB0aGFuIDEwMCAob3IgdGhlIGxpa2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkIGlzIG5vdCBhdmFpbGFibGUpIGFuZCBhbHNvIGhhcyBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiB0aGF0IGNvbnRhaW5zIHRoZSBwaHJhc2UgXCJjYXRzICZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvZ3NcIiAoY2FzZWxlc3MpLiBVc2UgXCItLW1hdGNoLWZpbHRlciAtXCIgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVyYWN0aXZlbHkgYXNrIHdoZXRoZXIgdG8gZG93bmxvYWQgZWFjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9cbiAgICAtLW5vLW1hdGNoLWZpbHRlciAgICAgICAgICAgICAgIERvIG5vdCB1c2UgYW55IC0tbWF0Y2gtZmlsdGVyIChkZWZhdWx0KVxuICAgIC0tYnJlYWstbWF0Y2gtZmlsdGVycyBGSUxURVIgICAgU2FtZSBhcyBcIi0tbWF0Y2gtZmlsdGVyc1wiIGJ1dCBzdG9wcyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkIHByb2Nlc3Mgd2hlbiBhIHZpZGVvIGlzIHJlamVjdGVkXG4gICAgLS1uby1icmVhay1tYXRjaC1maWx0ZXJzICAgICAgICBEbyBub3QgdXNlIGFueSAtLWJyZWFrLW1hdGNoLWZpbHRlcnMgKGRlZmF1bHQpXG4gICAgLS1uby1wbGF5bGlzdCAgICAgICAgICAgICAgICAgICBEb3dubG9hZCBvbmx5IHRoZSB2aWRlbywgaWYgdGhlIFVSTCByZWZlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgdmlkZW8gYW5kIGEgcGxheWxpc3RcbiAgICAtLXllcy1wbGF5bGlzdCAgICAgICAgICAgICAgICAgIERvd25sb2FkIHRoZSBwbGF5bGlzdCwgaWYgdGhlIFVSTCByZWZlcnMgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdmlkZW8gYW5kIGEgcGxheWxpc3RcbiAgICAtLWFnZS1saW1pdCBZRUFSUyAgICAgICAgICAgICAgIERvd25sb2FkIG9ubHkgdmlkZW9zIHN1aXRhYmxlIGZvciB0aGUgZ2l2ZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZVxuICAgIC0tZG93bmxvYWQtYXJjaGl2ZSBGSUxFICAgICAgICAgRG93bmxvYWQgb25seSB2aWRlb3Mgbm90IGxpc3RlZCBpbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyY2hpdmUgZmlsZS4gUmVjb3JkIHRoZSBJRHMgb2YgYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGVkIHZpZGVvcyBpbiBpdFxuICAgIC0tbm8tZG93bmxvYWQtYXJjaGl2ZSAgICAgICAgICAgRG8gbm90IHVzZSBhcmNoaXZlIGZpbGUgKGRlZmF1bHQpXG4gICAgLS1tYXgtZG93bmxvYWRzIE5VTUJFUiAgICAgICAgICBBYm9ydCBhZnRlciBkb3dubG9hZGluZyBOVU1CRVIgZmlsZXNcbiAgICAtLWJyZWFrLW9uLWV4aXN0aW5nICAgICAgICAgICAgIFN0b3AgdGhlIGRvd25sb2FkIHByb2Nlc3Mgd2hlbiBlbmNvdW50ZXJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgZmlsZSB0aGF0IGlzIGluIHRoZSBhcmNoaXZlXG4gICAgLS1icmVhay1wZXItaW5wdXQgICAgICAgICAgICAgICBBbHRlcnMgLS1tYXgtZG93bmxvYWRzLCAtLWJyZWFrLW9uLWV4aXN0aW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1icmVhay1tYXRjaC1maWx0ZXIsIGFuZCBhdXRvbnVtYmVyIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldCBwZXIgaW5wdXQgVVJMXG4gICAgLS1uby1icmVhay1wZXItaW5wdXQgICAgICAgICAgICAtLWJyZWFrLW9uLWV4aXN0aW5nIGFuZCBzaW1pbGFyIG9wdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZXMgdGhlIGVudGlyZSBkb3dubG9hZCBxdWV1ZVxuICAgIC0tc2tpcC1wbGF5bGlzdC1hZnRlci1lcnJvcnMgTiAgTnVtYmVyIG9mIGFsbG93ZWQgZmFpbHVyZXMgdW50aWwgdGhlIHJlc3Qgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwbGF5bGlzdCBpcyBza2lwcGVkXG5cbiMjIERvd25sb2FkIE9wdGlvbnM6XG4gICAgLU4sIC0tY29uY3VycmVudC1mcmFnbWVudHMgTiAgICBOdW1iZXIgb2YgZnJhZ21lbnRzIG9mIGEgZGFzaC9obHNuYXRpdmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvIHRoYXQgc2hvdWxkIGJlIGRvd25sb2FkZWQgY29uY3VycmVudGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCBpcyAxKVxuICAgIC1yLCAtLWxpbWl0LXJhdGUgUkFURSAgICAgICAgICAgTWF4aW11bSBkb3dubG9hZCByYXRlIGluIGJ5dGVzIHBlciBzZWNvbmQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmcuIDUwSyBvciA0LjJNXG4gICAgLS10aHJvdHRsZWQtcmF0ZSBSQVRFICAgICAgICAgICBNaW5pbXVtIGRvd25sb2FkIHJhdGUgaW4gYnl0ZXMgcGVyIHNlY29uZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cgd2hpY2ggdGhyb3R0bGluZyBpcyBhc3N1bWVkIGFuZCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvIGRhdGEgaXMgcmUtZXh0cmFjdGVkLCBlLmcuIDEwMEtcbiAgICAtUiwgLS1yZXRyaWVzIFJFVFJJRVMgICAgICAgICAgIE51bWJlciBvZiByZXRyaWVzIChkZWZhdWx0IGlzIDEwKSwgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5maW5pdGVcIlxuICAgIC0tZmlsZS1hY2Nlc3MtcmV0cmllcyBSRVRSSUVTICAgTnVtYmVyIG9mIHRpbWVzIHRvIHJldHJ5IG9uIGZpbGUgYWNjZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciAoZGVmYXVsdCBpcyAzKSwgb3IgXCJpbmZpbml0ZVwiXG4gICAgLS1mcmFnbWVudC1yZXRyaWVzIFJFVFJJRVMgICAgICBOdW1iZXIgb2YgcmV0cmllcyBmb3IgYSBmcmFnbWVudCAoZGVmYXVsdCBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTApLCBvciBcImluZmluaXRlXCIgKERBU0gsIGhsc25hdGl2ZSBhbmQgSVNNKVxuICAgIC0tcmV0cnktc2xlZXAgW1RZUEU6XUVYUFIgICAgICAgVGltZSB0byBzbGVlcCBiZXR3ZWVuIHJldHJpZXMgaW4gc2Vjb25kc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9wdGlvbmFsbHkpIHByZWZpeGVkIGJ5IHRoZSB0eXBlIG9mIHJldHJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaHR0cCAoZGVmYXVsdCksIGZyYWdtZW50LCBmaWxlX2FjY2VzcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RvcikgdG8gYXBwbHkgdGhlIHNsZWVwIHRvLiBFWFBSIGNhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgYSBudW1iZXIsIGxpbmVhcj1TVEFSVFs6RU5EWzpTVEVQPTFdXSBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwPVNUQVJUWzpFTkRbOkJBU0U9Ml1dLiBUaGlzIG9wdGlvbiBjYW4gYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgbXVsdGlwbGUgdGltZXMgdG8gc2V0IHRoZSBzbGVlcCBmb3IgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWZmZXJlbnQgcmV0cnkgdHlwZXMsIGUuZy4gLS1yZXRyeS1zbGVlcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZWFyPTE6OjIgLS1yZXRyeS1zbGVlcCBmcmFnbWVudDpleHA9MToyMFxuICAgIC0tc2tpcC11bmF2YWlsYWJsZS1mcmFnbWVudHMgICAgU2tpcCB1bmF2YWlsYWJsZSBmcmFnbWVudHMgZm9yIERBU0gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNuYXRpdmUgYW5kIElTTSBkb3dubG9hZHMgKGRlZmF1bHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQWxpYXM6IC0tbm8tYWJvcnQtb24tdW5hdmFpbGFibGUtZnJhZ21lbnRzKVxuICAgIC0tYWJvcnQtb24tdW5hdmFpbGFibGUtZnJhZ21lbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBYm9ydCBkb3dubG9hZCBpZiBhIGZyYWdtZW50IGlzIHVuYXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQWxpYXM6IC0tbm8tc2tpcC11bmF2YWlsYWJsZS1mcmFnbWVudHMpXG4gICAgLS1rZWVwLWZyYWdtZW50cyAgICAgICAgICAgICAgICBLZWVwIGRvd25sb2FkZWQgZnJhZ21lbnRzIG9uIGRpc2sgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nIGlzIGZpbmlzaGVkXG4gICAgLS1uby1rZWVwLWZyYWdtZW50cyAgICAgICAgICAgICBEZWxldGUgZG93bmxvYWRlZCBmcmFnbWVudHMgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nIGlzIGZpbmlzaGVkIChkZWZhdWx0KVxuICAgIC0tYnVmZmVyLXNpemUgU0laRSAgICAgICAgICAgICAgU2l6ZSBvZiBkb3dubG9hZCBidWZmZXIsIGUuZy4gMTAyNCBvciAxNktcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0IGlzIDEwMjQpXG4gICAgLS1yZXNpemUtYnVmZmVyICAgICAgICAgICAgICAgICBUaGUgYnVmZmVyIHNpemUgaXMgYXV0b21hdGljYWxseSByZXNpemVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIGFuIGluaXRpYWwgdmFsdWUgb2YgLS1idWZmZXItc2l6ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQpXG4gICAgLS1uby1yZXNpemUtYnVmZmVyICAgICAgICAgICAgICBEbyBub3QgYXV0b21hdGljYWxseSBhZGp1c3QgdGhlIGJ1ZmZlciBzaXplXG4gICAgLS1odHRwLWNodW5rLXNpemUgU0laRSAgICAgICAgICBTaXplIG9mIGEgY2h1bmsgZm9yIGNodW5rLWJhc2VkIEhUVFBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkaW5nLCBlLmcuIDEwNDg1NzYwIG9yIDEwTSAoZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZGlzYWJsZWQpLiBNYXkgYmUgdXNlZnVsIGZvciBieXBhc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbmR3aWR0aCB0aHJvdHRsaW5nIGltcG9zZWQgYnkgYSB3ZWJzZXJ2ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChleHBlcmltZW50YWwpXG4gICAgLS1wbGF5bGlzdC1yYW5kb20gICAgICAgICAgICAgICBEb3dubG9hZCBwbGF5bGlzdCB2aWRlb3MgaW4gcmFuZG9tIG9yZGVyXG4gICAgLS1sYXp5LXBsYXlsaXN0ICAgICAgICAgICAgICAgICBQcm9jZXNzIGVudHJpZXMgaW4gdGhlIHBsYXlsaXN0IGFzIHRoZXkgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlZC4gVGhpcyBkaXNhYmxlcyBuX2VudHJpZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXBsYXlsaXN0LXJhbmRvbSBhbmQgLS1wbGF5bGlzdC1yZXZlcnNlXG4gICAgLS1uby1sYXp5LXBsYXlsaXN0ICAgICAgICAgICAgICBQcm9jZXNzIHZpZGVvcyBpbiB0aGUgcGxheWxpc3Qgb25seSBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVudGlyZSBwbGF5bGlzdCBpcyBwYXJzZWQgKGRlZmF1bHQpXG4gICAgLS14YXR0ci1zZXQtZmlsZXNpemUgICAgICAgICAgICBTZXQgZmlsZSB4YXR0cmlidXRlIHl0ZGwuZmlsZXNpemUgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhwZWN0ZWQgZmlsZSBzaXplXG4gICAgLS1obHMtdXNlLW1wZWd0cyAgICAgICAgICAgICAgICBVc2UgdGhlIG1wZWd0cyBjb250YWluZXIgZm9yIEhMUyB2aWRlb3M7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2luZyBzb21lIHBsYXllcnMgdG8gcGxheSB0aGUgdmlkZW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIGRvd25sb2FkaW5nLCBhbmQgcmVkdWNpbmcgdGhlIGNoYW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBjb3JydXB0aW9uIGlmIGRvd25sb2FkIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnJ1cHRlZC4gVGhpcyBpcyBlbmFibGVkIGJ5IGRlZmF1bHQgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXZlIHN0cmVhbXNcbiAgICAtLW5vLWhscy11c2UtbXBlZ3RzICAgICAgICAgICAgIERvIG5vdCB1c2UgdGhlIG1wZWd0cyBjb250YWluZXIgZm9yIEhMU1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW9zLiBUaGlzIGlzIGRlZmF1bHQgd2hlbiBub3QgZG93bmxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdmUgc3RyZWFtc1xuICAgIC0tZG93bmxvYWQtc2VjdGlvbnMgUkVHRVggICAgICAgRG93bmxvYWQgb25seSBjaGFwdGVycyB3aG9zZSB0aXRsZSBtYXRjaGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ2l2ZW4gcmVndWxhciBleHByZXNzaW9uLiBUaW1lIHJhbmdlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4ZWQgYnkgYSBcIipcIiBjYW4gYWxzbyBiZSB1c2VkIGluIHBsYWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBjaGFwdGVycyB0byBkb3dubG9hZCB0aGUgc3BlY2lmaWVkIHJhbmdlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmVlZHMgZmZtcGVnLiBUaGlzIG9wdGlvbiBjYW4gYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgdGltZXMgdG8gZG93bmxvYWQgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25zLCBlLmcuIC0tZG93bmxvYWQtc2VjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiKjEwOjE1LWluZlwiIC0tZG93bmxvYWQtc2VjdGlvbnMgXCJpbnRyb1wiXG4gICAgLS1kb3dubG9hZGVyIFtQUk9UTzpdTkFNRSAgICAgICBOYW1lIG9yIHBhdGggb2YgdGhlIGV4dGVybmFsIGRvd25sb2FkZXIgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZSAob3B0aW9uYWxseSkgcHJlZml4ZWQgYnkgdGhlIHByb3RvY29sc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGh0dHAsIGZ0cCwgbTN1OCwgZGFzaCwgcnN0cCwgcnRtcCwgbW1zKSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlIGl0IGZvci4gQ3VycmVudGx5IHN1cHBvcnRzIG5hdGl2ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEyYywgYXZjb252LCBheGVsLCBjdXJsLCBmZm1wZWcsIGh0dHBpZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdnZXQuIFlvdSBjYW4gdXNlIHRoaXMgb3B0aW9uIG11bHRpcGxlIHRpbWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBzZXQgZGlmZmVyZW50IGRvd25sb2FkZXJzIGZvciBkaWZmZXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3RvY29scy4gRS5nLiAtLWRvd25sb2FkZXIgYXJpYTJjXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWRvd25sb2FkZXIgXCJkYXNoLG0zdTg6bmF0aXZlXCIgd2lsbCB1c2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEyYyBmb3IgaHR0cC9mdHAgZG93bmxvYWRzLCBhbmQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmUgZG93bmxvYWRlciBmb3IgZGFzaC9tM3U4IGRvd25sb2Fkc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFsaWFzOiAtLWV4dGVybmFsLWRvd25sb2FkZXIpXG4gICAgLS1kb3dubG9hZGVyLWFyZ3MgTkFNRTpBUkdTICAgICBHaXZlIHRoZXNlIGFyZ3VtZW50cyB0byB0aGUgZXh0ZXJuYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvd25sb2FkZXIuIFNwZWNpZnkgdGhlIGRvd25sb2FkZXIgbmFtZSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBhcmd1bWVudHMgc2VwYXJhdGVkIGJ5IGEgY29sb24gXCI6XCIuIEZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmZtcGVnLCBhcmd1bWVudHMgY2FuIGJlIHBhc3NlZCB0byBkaWZmZXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9ucyB1c2luZyB0aGUgc2FtZSBzeW50YXggYXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tcG9zdHByb2Nlc3Nvci1hcmdzLiBZb3UgY2FuIHVzZSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gbXVsdGlwbGUgdGltZXMgdG8gZ2l2ZSBkaWZmZXJlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3VtZW50cyB0byBkaWZmZXJlbnQgZG93bmxvYWRlcnMgKEFsaWFzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1leHRlcm5hbC1kb3dubG9hZGVyLWFyZ3MpXG5cbiMjIEZpbGVzeXN0ZW0gT3B0aW9uczpcbiAgICAtYSwgLS1iYXRjaC1maWxlIEZJTEUgICAgICAgICAgIEZpbGUgY29udGFpbmluZyBVUkxzIHRvIGRvd25sb2FkIChcIi1cIiBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ZGluKSwgb25lIFVSTCBwZXIgbGluZS4gTGluZXMgc3RhcnRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggXCIjXCIsIFwiO1wiIG9yIFwiXVwiIGFyZSBjb25zaWRlcmVkIGFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50cyBhbmQgaWdub3JlZFxuICAgIC0tbm8tYmF0Y2gtZmlsZSAgICAgICAgICAgICAgICAgRG8gbm90IHJlYWQgVVJMcyBmcm9tIGJhdGNoIGZpbGUgKGRlZmF1bHQpXG4gICAgLVAsIC0tcGF0aHMgW1RZUEVTOl1QQVRIICAgICAgICBUaGUgcGF0aHMgd2hlcmUgdGhlIGZpbGVzIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRlZC4gU3BlY2lmeSB0aGUgdHlwZSBvZiBmaWxlIGFuZCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggc2VwYXJhdGVkIGJ5IGEgY29sb24gXCI6XCIuIEFsbCB0aGUgc2FtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVFlQRVMgYXMgLS1vdXRwdXQgYXJlIHN1cHBvcnRlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZGl0aW9uYWxseSwgeW91IGNhbiBhbHNvIHByb3ZpZGUgXCJob21lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0KSBhbmQgXCJ0ZW1wXCIgcGF0aHMuIEFsbCBpbnRlcm1lZGlhcnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzIGFyZSBmaXJzdCBkb3dubG9hZGVkIHRvIHRoZSB0ZW1wIHBhdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCB0aGVuIHRoZSBmaW5hbCBmaWxlcyBhcmUgbW92ZWQgb3ZlciB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGhvbWUgcGF0aCBhZnRlciBkb3dubG9hZCBpcyBmaW5pc2hlZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgb3B0aW9uIGlzIGlnbm9yZWQgaWYgLS1vdXRwdXQgaXMgYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFic29sdXRlIHBhdGhcbiAgICAtbywgLS1vdXRwdXQgW1RZUEVTOl1URU1QTEFURSAgIE91dHB1dCBmaWxlbmFtZSB0ZW1wbGF0ZTsgc2VlIFwiT1VUUFVUXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBURU1QTEFURVwiIGZvciBkZXRhaWxzXG4gICAgLS1vdXRwdXQtbmEtcGxhY2Vob2xkZXIgVEVYVCAgICBQbGFjZWhvbGRlciBmb3IgdW5hdmFpbGFibGUgZmllbGRzIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIk9VVFBVVCBURU1QTEFURVwiIChkZWZhdWx0OiBcIk5BXCIpXG4gICAgLS1yZXN0cmljdC1maWxlbmFtZXMgICAgICAgICAgICBSZXN0cmljdCBmaWxlbmFtZXMgdG8gb25seSBBU0NJSSBjaGFyYWN0ZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGF2b2lkIFwiJlwiIGFuZCBzcGFjZXMgaW4gZmlsZW5hbWVzXG4gICAgLS1uby1yZXN0cmljdC1maWxlbmFtZXMgICAgICAgICBBbGxvdyBVbmljb2RlIGNoYXJhY3RlcnMsIFwiJlwiIGFuZCBzcGFjZXMgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lcyAoZGVmYXVsdClcbiAgICAtLXdpbmRvd3MtZmlsZW5hbWVzICAgICAgICAgICAgIEZvcmNlIGZpbGVuYW1lcyB0byBiZSBXaW5kb3dzLWNvbXBhdGlibGVcbiAgICAtLW5vLXdpbmRvd3MtZmlsZW5hbWVzICAgICAgICAgIE1ha2UgZmlsZW5hbWVzIFdpbmRvd3MtY29tcGF0aWJsZSBvbmx5IGlmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2luZyBXaW5kb3dzIChkZWZhdWx0KVxuICAgIC0tdHJpbS1maWxlbmFtZXMgTEVOR1RIICAgICAgICAgTGltaXQgdGhlIGZpbGVuYW1lIGxlbmd0aCAoZXhjbHVkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbnNpb24pIHRvIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXJzXG4gICAgLXcsIC0tbm8tb3ZlcndyaXRlcyAgICAgICAgICAgICBEbyBub3Qgb3ZlcndyaXRlIGFueSBmaWxlc1xuICAgIC0tZm9yY2Utb3ZlcndyaXRlcyAgICAgICAgICAgICAgT3ZlcndyaXRlIGFsbCB2aWRlbyBhbmQgbWV0YWRhdGEgZmlsZXMuIFRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbiBpbmNsdWRlcyAtLW5vLWNvbnRpbnVlXG4gICAgLS1uby1mb3JjZS1vdmVyd3JpdGVzICAgICAgICAgICBEbyBub3Qgb3ZlcndyaXRlIHRoZSB2aWRlbywgYnV0IG92ZXJ3cml0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZCBmaWxlcyAoZGVmYXVsdClcbiAgICAtYywgLS1jb250aW51ZSAgICAgICAgICAgICAgICAgIFJlc3VtZSBwYXJ0aWFsbHkgZG93bmxvYWRlZCBmaWxlcy9mcmFnbWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0KVxuICAgIC0tbm8tY29udGludWUgICAgICAgICAgICAgICAgICAgRG8gbm90IHJlc3VtZSBwYXJ0aWFsbHkgZG93bmxvYWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnRzLiBJZiB0aGUgZmlsZSBpcyBub3QgZnJhZ21lbnRlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RhcnQgZG93bmxvYWQgb2YgdGhlIGVudGlyZSBmaWxlXG4gICAgLS1wYXJ0ICAgICAgICAgICAgICAgICAgICAgICAgICBVc2UgLnBhcnQgZmlsZXMgaW5zdGVhZCBvZiB3cml0aW5nIGRpcmVjdGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRvIG91dHB1dCBmaWxlIChkZWZhdWx0KVxuICAgIC0tbm8tcGFydCAgICAgICAgICAgICAgICAgICAgICAgRG8gbm90IHVzZSAucGFydCBmaWxlcyAtIHdyaXRlIGRpcmVjdGx5IGludG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCBmaWxlXG4gICAgLS1tdGltZSAgICAgICAgICAgICAgICAgICAgICAgICBVc2UgdGhlIExhc3QtbW9kaWZpZWQgaGVhZGVyIHRvIHNldCB0aGUgZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpY2F0aW9uIHRpbWUgKGRlZmF1bHQpXG4gICAgLS1uby1tdGltZSAgICAgICAgICAgICAgICAgICAgICBEbyBub3QgdXNlIHRoZSBMYXN0LW1vZGlmaWVkIGhlYWRlciB0byBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBmaWxlIG1vZGlmaWNhdGlvbiB0aW1lXG4gICAgLS13cml0ZS1kZXNjcmlwdGlvbiAgICAgICAgICAgICBXcml0ZSB2aWRlbyBkZXNjcmlwdGlvbiB0byBhIC5kZXNjcmlwdGlvbiBmaWxlXG4gICAgLS1uby13cml0ZS1kZXNjcmlwdGlvbiAgICAgICAgICBEbyBub3Qgd3JpdGUgdmlkZW8gZGVzY3JpcHRpb24gKGRlZmF1bHQpXG4gICAgLS13cml0ZS1pbmZvLWpzb24gICAgICAgICAgICAgICBXcml0ZSB2aWRlbyBtZXRhZGF0YSB0byBhIC5pbmZvLmpzb24gZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgbWF5IGNvbnRhaW4gcGVyc29uYWwgaW5mb3JtYXRpb24pXG4gICAgLS1uby13cml0ZS1pbmZvLWpzb24gICAgICAgICAgICBEbyBub3Qgd3JpdGUgdmlkZW8gbWV0YWRhdGEgKGRlZmF1bHQpXG4gICAgLS13cml0ZS1wbGF5bGlzdC1tZXRhZmlsZXMgICAgICBXcml0ZSBwbGF5bGlzdCBtZXRhZGF0YSBpbiBhZGRpdGlvbiB0byB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvIG1ldGFkYXRhIHdoZW4gdXNpbmcgLS13cml0ZS1pbmZvLWpzb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXdyaXRlLWRlc2NyaXB0aW9uIGV0Yy4gKGRlZmF1bHQpXG4gICAgLS1uby13cml0ZS1wbGF5bGlzdC1tZXRhZmlsZXMgICBEbyBub3Qgd3JpdGUgcGxheWxpc3QgbWV0YWRhdGEgd2hlbiB1c2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS13cml0ZS1pbmZvLWpzb24sIC0td3JpdGUtZGVzY3JpcHRpb24gZXRjLlxuICAgIC0tY2xlYW4taW5mby1qc29uICAgICAgICAgICAgICAgUmVtb3ZlIHNvbWUgcHJpdmF0ZSBmaWVsZHMgc3VjaCBhcyBmaWxlbmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gdGhlIGluZm9qc29uLiBOb3RlIHRoYXQgaXQgY291bGQgc3RpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW4gc29tZSBwZXJzb25hbCBpbmZvcm1hdGlvbiAoZGVmYXVsdClcbiAgICAtLW5vLWNsZWFuLWluZm8tanNvbiAgICAgICAgICAgIFdyaXRlIGFsbCBmaWVsZHMgdG8gdGhlIGluZm9qc29uXG4gICAgLS13cml0ZS1jb21tZW50cyAgICAgICAgICAgICAgICBSZXRyaWV2ZSB2aWRlbyBjb21tZW50cyB0byBiZSBwbGFjZWQgaW4gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvanNvbi4gVGhlIGNvbW1lbnRzIGFyZSBmZXRjaGVkIGV2ZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGhvdXQgdGhpcyBvcHRpb24gaWYgdGhlIGV4dHJhY3Rpb24gaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtub3duIHRvIGJlIHF1aWNrIChBbGlhczogLS1nZXQtY29tbWVudHMpXG4gICAgLS1uby13cml0ZS1jb21tZW50cyAgICAgICAgICAgICBEbyBub3QgcmV0cmlldmUgdmlkZW8gY29tbWVudHMgdW5sZXNzIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFjdGlvbiBpcyBrbm93biB0byBiZSBxdWljayAoQWxpYXM6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLW5vLWdldC1jb21tZW50cylcbiAgICAtLWxvYWQtaW5mby1qc29uIEZJTEUgICAgICAgICAgIEpTT04gZmlsZSBjb250YWluaW5nIHRoZSB2aWRlbyBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNyZWF0ZWQgd2l0aCB0aGUgXCItLXdyaXRlLWluZm8tanNvblwiIG9wdGlvbilcbiAgICAtLWNvb2tpZXMgRklMRSAgICAgICAgICAgICAgICAgIE5ldHNjYXBlIGZvcm1hdHRlZCBmaWxlIHRvIHJlYWQgY29va2llcyBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgZHVtcCBjb29raWUgamFyIGluXG4gICAgLS1uby1jb29raWVzICAgICAgICAgICAgICAgICAgICBEbyBub3QgcmVhZC9kdW1wIGNvb2tpZXMgZnJvbS90byBmaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdClcbiAgICAtLWNvb2tpZXMtZnJvbS1icm93c2VyIEJST1dTRVJbK0tFWVJJTkddWzpQUk9GSUxFXVs6OkNPTlRBSU5FUl1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBuYW1lIG9mIHRoZSBicm93c2VyIHRvIGxvYWQgY29va2llc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbS4gQ3VycmVudGx5IHN1cHBvcnRlZCBicm93c2VycyBhcmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmF2ZSwgY2hyb21lLCBjaHJvbWl1bSwgZWRnZSwgZmlyZWZveCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZXJhLCBzYWZhcmksIHZpdmFsZGkuIE9wdGlvbmFsbHksIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS0VZUklORyB1c2VkIGZvciBkZWNyeXB0aW5nIENocm9taXVtIGNvb2tpZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIExpbnV4LCB0aGUgbmFtZS9wYXRoIG9mIHRoZSBQUk9GSUxFIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkIGNvb2tpZXMgZnJvbSwgYW5kIHRoZSBDT05UQUlORVIgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIEZpcmVmb3gpIChcIm5vbmVcIiBmb3Igbm8gY29udGFpbmVyKSBjYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGdpdmVuIHdpdGggdGhlaXIgcmVzcGVjdGl2ZSBzZXBlcmF0b3JzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgYWxsIGNvbnRhaW5lcnMgb2YgdGhlIG1vc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY2VudGx5IGFjY2Vzc2VkIHByb2ZpbGUgYXJlIHVzZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDdXJyZW50bHkgc3VwcG9ydGVkIGtleXJpbmdzIGFyZTogYmFzaWN0ZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ25vbWVrZXlyaW5nLCBrd2FsbGV0XG4gICAgLS1uby1jb29raWVzLWZyb20tYnJvd3NlciAgICAgICBEbyBub3QgbG9hZCBjb29raWVzIGZyb20gYnJvd3NlciAoZGVmYXVsdClcbiAgICAtLWNhY2hlLWRpciBESVIgICAgICAgICAgICAgICAgIExvY2F0aW9uIGluIHRoZSBmaWxlc3lzdGVtIHdoZXJlIHl0LWRscCBjYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JlIHNvbWUgZG93bmxvYWRlZCBpbmZvcm1hdGlvbiAoc3VjaCBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpZW50IGlkcyBhbmQgc2lnbmF0dXJlcykgcGVybWFuZW50bHkuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0ICR7WERHX0NBQ0hFX0hPTUV9L3l0LWRscFxuICAgIC0tbm8tY2FjaGUtZGlyICAgICAgICAgICAgICAgICAgRGlzYWJsZSBmaWxlc3lzdGVtIGNhY2hpbmdcbiAgICAtLXJtLWNhY2hlLWRpciAgICAgICAgICAgICAgICAgIERlbGV0ZSBhbGwgZmlsZXN5c3RlbSBjYWNoZSBmaWxlc1xuXG4jIyBUaHVtYm5haWwgT3B0aW9uczpcbiAgICAtLXdyaXRlLXRodW1ibmFpbCAgICAgICAgICAgICAgIFdyaXRlIHRodW1ibmFpbCBpbWFnZSB0byBkaXNrXG4gICAgLS1uby13cml0ZS10aHVtYm5haWwgICAgICAgICAgICBEbyBub3Qgd3JpdGUgdGh1bWJuYWlsIGltYWdlIHRvIGRpc2sgKGRlZmF1bHQpXG4gICAgLS13cml0ZS1hbGwtdGh1bWJuYWlscyAgICAgICAgICBXcml0ZSBhbGwgdGh1bWJuYWlsIGltYWdlIGZvcm1hdHMgdG8gZGlza1xuICAgIC0tbGlzdC10aHVtYm5haWxzICAgICAgICAgICAgICAgTGlzdCBhdmFpbGFibGUgdGh1bWJuYWlscyBvZiBlYWNoIHZpZGVvLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2ltdWxhdGUgdW5sZXNzIC0tbm8tc2ltdWxhdGUgaXMgdXNlZFxuXG4jIyBJbnRlcm5ldCBTaG9ydGN1dCBPcHRpb25zOlxuICAgIC0td3JpdGUtbGluayAgICAgICAgICAgICAgICAgICAgV3JpdGUgYW4gaW50ZXJuZXQgc2hvcnRjdXQgZmlsZSwgZGVwZW5kaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiB0aGUgY3VycmVudCBwbGF0Zm9ybSAoLnVybCwgLndlYmxvYyBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRlc2t0b3ApLiBUaGUgVVJMIG1heSBiZSBjYWNoZWQgYnkgdGhlIE9TXG4gICAgLS13cml0ZS11cmwtbGluayAgICAgICAgICAgICAgICBXcml0ZSBhIC51cmwgV2luZG93cyBpbnRlcm5ldCBzaG9ydGN1dC4gVGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUyBjYWNoZXMgdGhlIFVSTCBiYXNlZCBvbiB0aGUgZmlsZSBwYXRoXG4gICAgLS13cml0ZS13ZWJsb2MtbGluayAgICAgICAgICAgICBXcml0ZSBhIC53ZWJsb2MgbWFjT1MgaW50ZXJuZXQgc2hvcnRjdXRcbiAgICAtLXdyaXRlLWRlc2t0b3AtbGluayAgICAgICAgICAgIFdyaXRlIGEgLmRlc2t0b3AgTGludXggaW50ZXJuZXQgc2hvcnRjdXRcblxuIyMgVmVyYm9zaXR5IGFuZCBTaW11bGF0aW9uIE9wdGlvbnM6XG4gICAgLXEsIC0tcXVpZXQgICAgICAgICAgICAgICAgICAgICBBY3RpdmF0ZSBxdWlldCBtb2RlLiBJZiB1c2VkIHdpdGggLS12ZXJib3NlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQgdGhlIGxvZyB0byBzdGRlcnJcbiAgICAtLW5vLXdhcm5pbmdzICAgICAgICAgICAgICAgICAgIElnbm9yZSB3YXJuaW5nc1xuICAgIC1zLCAtLXNpbXVsYXRlICAgICAgICAgICAgICAgICAgRG8gbm90IGRvd25sb2FkIHRoZSB2aWRlbyBhbmQgZG8gbm90IHdyaXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnl0aGluZyB0byBkaXNrXG4gICAgLS1uby1zaW11bGF0ZSAgICAgICAgICAgICAgICAgICBEb3dubG9hZCB0aGUgdmlkZW8gZXZlbiBpZiBwcmludGluZy9saXN0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zIGFyZSB1c2VkXG4gICAgLS1pZ25vcmUtbm8tZm9ybWF0cy1lcnJvciAgICAgICBJZ25vcmUgXCJObyB2aWRlbyBmb3JtYXRzXCIgZXJyb3IuIFVzZWZ1bCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhY3RpbmcgbWV0YWRhdGEgZXZlbiBpZiB0aGUgdmlkZW9zIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90IGFjdHVhbGx5IGF2YWlsYWJsZSBmb3IgZG93bmxvYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChleHBlcmltZW50YWwpXG4gICAgLS1uby1pZ25vcmUtbm8tZm9ybWF0cy1lcnJvciAgICBUaHJvdyBlcnJvciB3aGVuIG5vIGRvd25sb2FkYWJsZSB2aWRlb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0cyBhcmUgZm91bmQgKGRlZmF1bHQpXG4gICAgLS1za2lwLWRvd25sb2FkICAgICAgICAgICAgICAgICBEbyBub3QgZG93bmxvYWQgdGhlIHZpZGVvIGJ1dCB3cml0ZSBhbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWQgZmlsZXMgKEFsaWFzOiAtLW5vLWRvd25sb2FkKVxuICAgIC1PLCAtLXByaW50IFtXSEVOOl1URU1QTEFURSAgICAgRmllbGQgbmFtZSBvciBvdXRwdXQgdGVtcGxhdGUgdG8gcHJpbnQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbiwgb3B0aW9uYWxseSBwcmVmaXhlZCB3aXRoIHdoZW4gdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaW50IGl0LCBzZXBhcmF0ZWQgYnkgYSBcIjpcIi4gU3VwcG9ydGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXMgb2YgXCJXSEVOXCIgYXJlIHRoZSBzYW1lIGFzIHRoYXQgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tdXNlLXBvc3Rwcm9jZXNzb3IgKGRlZmF1bHQ6IHZpZGVvKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEltcGxpZXMgLS1xdWlldC4gSW1wbGllcyAtLXNpbXVsYXRlIHVubGVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1uby1zaW11bGF0ZSBvciBsYXRlciBzdGFnZXMgb2YgV0hFTiBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkIG11bHRpcGxlIHRpbWVzXG4gICAgLS1wcmludC10by1maWxlIFtXSEVOOl1URU1QTEFURSBGSUxFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcHBlbmQgZ2l2ZW4gdGVtcGxhdGUgdG8gdGhlIGZpbGUuIFRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzIG9mIFdIRU4gYW5kIFRFTVBMQVRFIGFyZSBzYW1lIGFzIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIC0tcHJpbnQuIEZJTEUgdXNlcyB0aGUgc2FtZSBzeW50YXggYXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXQgdGVtcGxhdGUuIFRoaXMgb3B0aW9uIGNhbiBiZSB1c2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZSB0aW1lc1xuICAgIC1qLCAtLWR1bXAtanNvbiAgICAgICAgICAgICAgICAgUXVpZXQsIGJ1dCBwcmludCBKU09OIGluZm9ybWF0aW9uIGZvciBlYWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlby4gU2ltdWxhdGUgdW5sZXNzIC0tbm8tc2ltdWxhdGUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQuIFNlZSBcIk9VVFBVVCBURU1QTEFURVwiIGZvciBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiBvZiBhdmFpbGFibGUga2V5c1xuICAgIC1KLCAtLWR1bXAtc2luZ2xlLWpzb24gICAgICAgICAgUXVpZXQsIGJ1dCBwcmludCBKU09OIGluZm9ybWF0aW9uIGZvciBlYWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgb3IgaW5mb2pzb24gcGFzc2VkLiBTaW11bGF0ZSB1bmxlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tbm8tc2ltdWxhdGUgaXMgdXNlZC4gSWYgdGhlIFVSTCByZWZlcnMgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgcGxheWxpc3QsIHRoZSB3aG9sZSBwbGF5bGlzdCBpbmZvcm1hdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgZHVtcGVkIGluIGEgc2luZ2xlIGxpbmVcbiAgICAtLWZvcmNlLXdyaXRlLWFyY2hpdmUgICAgICAgICAgIEZvcmNlIGRvd25sb2FkIGFyY2hpdmUgZW50cmllcyB0byBiZSB3cml0dGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBmYXIgYXMgbm8gZXJyb3JzIG9jY3VyLCBldmVuIGlmIC1zIG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm90aGVyIHNpbXVsYXRpb24gb3B0aW9uIGlzIHVzZWQgKEFsaWFzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1mb3JjZS1kb3dubG9hZC1hcmNoaXZlKVxuICAgIC0tbmV3bGluZSAgICAgICAgICAgICAgICAgICAgICAgT3V0cHV0IHByb2dyZXNzIGJhciBhcyBuZXcgbGluZXNcbiAgICAtLW5vLXByb2dyZXNzICAgICAgICAgICAgICAgICAgIERvIG5vdCBwcmludCBwcm9ncmVzcyBiYXJcbiAgICAtLXByb2dyZXNzICAgICAgICAgICAgICAgICAgICAgIFNob3cgcHJvZ3Jlc3MgYmFyLCBldmVuIGlmIGluIHF1aWV0IG1vZGVcbiAgICAtLWNvbnNvbGUtdGl0bGUgICAgICAgICAgICAgICAgIERpc3BsYXkgcHJvZ3Jlc3MgaW4gY29uc29sZSB0aXRsZWJhclxuICAgIC0tcHJvZ3Jlc3MtdGVtcGxhdGUgW1RZUEVTOl1URU1QTEFURVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGVtcGxhdGUgZm9yIHByb2dyZXNzIG91dHB1dHMsIG9wdGlvbmFsbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeGVkIHdpdGggb25lIG9mIFwiZG93bmxvYWQ6XCIgKGRlZmF1bHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkb3dubG9hZC10aXRsZTpcIiAodGhlIGNvbnNvbGUgdGl0bGUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwb3N0cHJvY2VzczpcIiwgIG9yIFwicG9zdHByb2Nlc3MtdGl0bGU6XCIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgdmlkZW8ncyBmaWVsZHMgYXJlIGFjY2Vzc2libGUgdW5kZXIgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluZm9cIiBrZXkgYW5kIHRoZSBwcm9ncmVzcyBhdHRyaWJ1dGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXNzaWJsZSB1bmRlciBcInByb2dyZXNzXCIga2V5LiBFLmcuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLWNvbnNvbGUtdGl0bGUgLS1wcm9ncmVzcy10ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkb3dubG9hZC10aXRsZTolKGluZm8uaWQpcy0lKHByb2dyZXNzLmV0YSlzXCJcbiAgICAtdiwgLS12ZXJib3NlICAgICAgICAgICAgICAgICAgIFByaW50IHZhcmlvdXMgZGVidWdnaW5nIGluZm9ybWF0aW9uXG4gICAgLS1kdW1wLXBhZ2VzICAgICAgICAgICAgICAgICAgICBQcmludCBkb3dubG9hZGVkIHBhZ2VzIGVuY29kZWQgdXNpbmcgYmFzZTY0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBkZWJ1ZyBwcm9ibGVtcyAodmVyeSB2ZXJib3NlKVxuICAgIC0td3JpdGUtcGFnZXMgICAgICAgICAgICAgICAgICAgV3JpdGUgZG93bmxvYWRlZCBpbnRlcm1lZGlhcnkgcGFnZXMgdG8gZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeSB0byBkZWJ1ZyBwcm9ibGVtc1xuICAgIC0tcHJpbnQtdHJhZmZpYyAgICAgICAgICAgICAgICAgRGlzcGxheSBzZW50IGFuZCByZWFkIEhUVFAgdHJhZmZpY1xuXG4jIyBXb3JrYXJvdW5kczpcbiAgICAtLWVuY29kaW5nIEVOQ09ESU5HICAgICAgICAgICAgIEZvcmNlIHRoZSBzcGVjaWZpZWQgZW5jb2RpbmcgKGV4cGVyaW1lbnRhbClcbiAgICAtLWxlZ2FjeS1zZXJ2ZXItY29ubmVjdCAgICAgICAgIEV4cGxpY2l0bHkgYWxsb3cgSFRUUFMgY29ubmVjdGlvbiB0byBzZXJ2ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGRvIG5vdCBzdXBwb3J0IFJGQyA1NzQ2IHNlY3VyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZWdvdGlhdGlvblxuICAgIC0tbm8tY2hlY2stY2VydGlmaWNhdGVzICAgICAgICAgU3VwcHJlc3MgSFRUUFMgY2VydGlmaWNhdGUgdmFsaWRhdGlvblxuICAgIC0tcHJlZmVyLWluc2VjdXJlICAgICAgICAgICAgICAgVXNlIGFuIHVuZW5jcnlwdGVkIGNvbm5lY3Rpb24gdG8gcmV0cmlldmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm9ybWF0aW9uIGFib3V0IHRoZSB2aWRlbyAoQ3VycmVudGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBwb3J0ZWQgb25seSBmb3IgWW91VHViZSlcbiAgICAtLWFkZC1oZWFkZXJzIEZJRUxEOlZBTFVFICAgICAgIFNwZWNpZnkgYSBjdXN0b20gSFRUUCBoZWFkZXIgYW5kIGl0cyB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcGFyYXRlZCBieSBhIGNvbG9uIFwiOlwiLiBZb3UgY2FuIHVzZSB0aGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gbXVsdGlwbGUgdGltZXNcbiAgICAtLWJpZGktd29ya2Fyb3VuZCAgICAgICAgICAgICAgIFdvcmsgYXJvdW5kIHRlcm1pbmFscyB0aGF0IGxhY2tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpZGlyZWN0aW9uYWwgdGV4dCBzdXBwb3J0LiBSZXF1aXJlcyBiaWRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgZnJpYmlkaSBleGVjdXRhYmxlIGluIFBBVEhcbiAgICAtLXNsZWVwLXJlcXVlc3RzIFNFQ09ORFMgICAgICAgIE51bWJlciBvZiBzZWNvbmRzIHRvIHNsZWVwIGJldHdlZW4gcmVxdWVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmluZyBkYXRhIGV4dHJhY3Rpb25cbiAgICAtLXNsZWVwLWludGVydmFsIFNFQ09ORFMgICAgICAgIE51bWJlciBvZiBzZWNvbmRzIHRvIHNsZWVwIGJlZm9yZSBlYWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZC4gVGhpcyBpcyB0aGUgbWluaW11bSB0aW1lIHRvIHNsZWVwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIHVzZWQgYWxvbmcgd2l0aCAtLW1heC1zbGVlcC1pbnRlcnZhbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFsaWFzOiAtLW1pbi1zbGVlcC1pbnRlcnZhbClcbiAgICAtLW1heC1zbGVlcC1pbnRlcnZhbCBTRUNPTkRTICAgIE1heGltdW0gbnVtYmVyIG9mIHNlY29uZHMgdG8gc2xlZXAuIENhbiBvbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSB1c2VkIGFsb25nIHdpdGggLS1taW4tc2xlZXAtaW50ZXJ2YWxcbiAgICAtLXNsZWVwLXN1YnRpdGxlcyBTRUNPTkRTICAgICAgIE51bWJlciBvZiBzZWNvbmRzIHRvIHNsZWVwIGJlZm9yZSBlYWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0aXRsZSBkb3dubG9hZFxuXG4jIyBWaWRlbyBGb3JtYXQgT3B0aW9uczpcbiAgICAtZiwgLS1mb3JtYXQgRk9STUFUICAgICAgICAgICAgIFZpZGVvIGZvcm1hdCBjb2RlLCBzZWUgXCJGT1JNQVQgU0VMRUNUSU9OXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBtb3JlIGRldGFpbHNcbiAgICAtUywgLS1mb3JtYXQtc29ydCBTT1JUT1JERVIgICAgIFNvcnQgdGhlIGZvcm1hdHMgYnkgdGhlIGZpZWxkcyBnaXZlbiwgc2VlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlNvcnRpbmcgRm9ybWF0c1wiIGZvciBtb3JlIGRldGFpbHNcbiAgICAtLWZvcm1hdC1zb3J0LWZvcmNlICAgICAgICAgICAgIEZvcmNlIHVzZXIgc3BlY2lmaWVkIHNvcnQgb3JkZXIgdG8gaGF2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlY2VkZW5jZSBvdmVyIGFsbCBmaWVsZHMsIHNlZSBcIlNvcnRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZvcm1hdHNcIiBmb3IgbW9yZSBkZXRhaWxzIChBbGlhczogLS1TLWZvcmNlKVxuICAgIC0tbm8tZm9ybWF0LXNvcnQtZm9yY2UgICAgICAgICAgU29tZSBmaWVsZHMgaGF2ZSBwcmVjZWRlbmNlIG92ZXIgdGhlIHVzZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCBzb3J0IG9yZGVyIChkZWZhdWx0KVxuICAgIC0tdmlkZW8tbXVsdGlzdHJlYW1zICAgICAgICAgICAgQWxsb3cgbXVsdGlwbGUgdmlkZW8gc3RyZWFtcyB0byBiZSBtZXJnZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludG8gYSBzaW5nbGUgZmlsZVxuICAgIC0tbm8tdmlkZW8tbXVsdGlzdHJlYW1zICAgICAgICAgT25seSBvbmUgdmlkZW8gc3RyZWFtIGlzIGRvd25sb2FkZWQgZm9yIGVhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCBmaWxlIChkZWZhdWx0KVxuICAgIC0tYXVkaW8tbXVsdGlzdHJlYW1zICAgICAgICAgICAgQWxsb3cgbXVsdGlwbGUgYXVkaW8gc3RyZWFtcyB0byBiZSBtZXJnZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludG8gYSBzaW5nbGUgZmlsZVxuICAgIC0tbm8tYXVkaW8tbXVsdGlzdHJlYW1zICAgICAgICAgT25seSBvbmUgYXVkaW8gc3RyZWFtIGlzIGRvd25sb2FkZWQgZm9yIGVhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dCBmaWxlIChkZWZhdWx0KVxuICAgIC0tcHJlZmVyLWZyZWUtZm9ybWF0cyAgICAgICAgICAgUHJlZmVyIHZpZGVvIGZvcm1hdHMgd2l0aCBmcmVlIGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXIgbm9uLWZyZWUgb25lcyBvZiBzYW1lIHF1YWxpdHkuIFVzZSB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIi1TIGV4dFwiIHRvIHN0cmljdGx5IHByZWZlciBmcmVlIGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlycmVzcGVjdGl2ZSBvZiBxdWFsaXR5XG4gICAgLS1uby1wcmVmZXItZnJlZS1mb3JtYXRzICAgICAgICBEb24ndCBnaXZlIGFueSBzcGVjaWFsIHByZWZlcmVuY2UgdG8gZnJlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVycyAoZGVmYXVsdClcbiAgICAtLWNoZWNrLWZvcm1hdHMgICAgICAgICAgICAgICAgIE1ha2Ugc3VyZSBmb3JtYXRzIGFyZSBzZWxlY3RlZCBvbmx5IGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRob3NlIHRoYXQgYXJlIGFjdHVhbGx5IGRvd25sb2FkYWJsZVxuICAgIC0tY2hlY2stYWxsLWZvcm1hdHMgICAgICAgICAgICAgQ2hlY2sgYWxsIGZvcm1hdHMgZm9yIHdoZXRoZXIgdGhleSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdHVhbGx5IGRvd25sb2FkYWJsZVxuICAgIC0tbm8tY2hlY2stZm9ybWF0cyAgICAgICAgICAgICAgRG8gbm90IGNoZWNrIHRoYXQgdGhlIGZvcm1hdHMgYXJlIGFjdHVhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGFibGVcbiAgICAtRiwgLS1saXN0LWZvcm1hdHMgICAgICAgICAgICAgIExpc3QgYXZhaWxhYmxlIGZvcm1hdHMgb2YgZWFjaCB2aWRlby5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpbXVsYXRlIHVubGVzcyAtLW5vLXNpbXVsYXRlIGlzIHVzZWRcbiAgICAtLW1lcmdlLW91dHB1dC1mb3JtYXQgRk9STUFUICAgIENvbnRhaW5lcnMgdGhhdCBtYXkgYmUgdXNlZCB3aGVuIG1lcmdpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHMsIHNlcGFyYXRlZCBieSBcIi9cIiwgZS5nLiBcIm1wNC9ta3ZcIi5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElnbm9yZWQgaWYgbm8gbWVyZ2UgaXMgcmVxdWlyZWQuIChjdXJyZW50bHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRlZDogYXZpLCBmbHYsIG1rdiwgbW92LCBtcDQsIHdlYm0pXG5cbiMjIFN1YnRpdGxlIE9wdGlvbnM6XG4gICAgLS13cml0ZS1zdWJzICAgICAgICAgICAgICAgICAgICBXcml0ZSBzdWJ0aXRsZSBmaWxlXG4gICAgLS1uby13cml0ZS1zdWJzICAgICAgICAgICAgICAgICBEbyBub3Qgd3JpdGUgc3VidGl0bGUgZmlsZSAoZGVmYXVsdClcbiAgICAtLXdyaXRlLWF1dG8tc3VicyAgICAgICAgICAgICAgIFdyaXRlIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIHN1YnRpdGxlIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBbGlhczogLS13cml0ZS1hdXRvbWF0aWMtc3VicylcbiAgICAtLW5vLXdyaXRlLWF1dG8tc3VicyAgICAgICAgICAgIERvIG5vdCB3cml0ZSBhdXRvLWdlbmVyYXRlZCBzdWJ0aXRsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0KSAoQWxpYXM6IC0tbm8td3JpdGUtYXV0b21hdGljLXN1YnMpXG4gICAgLS1saXN0LXN1YnMgICAgICAgICAgICAgICAgICAgICBMaXN0IGF2YWlsYWJsZSBzdWJ0aXRsZXMgb2YgZWFjaCB2aWRlby5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpbXVsYXRlIHVubGVzcyAtLW5vLXNpbXVsYXRlIGlzIHVzZWRcbiAgICAtLXN1Yi1mb3JtYXQgRk9STUFUICAgICAgICAgICAgIFN1YnRpdGxlIGZvcm1hdDsgYWNjZXB0cyBmb3JtYXRzIHByZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmcuIFwic3J0XCIgb3IgXCJhc3Mvc3J0L2Jlc3RcIlxuICAgIC0tc3ViLWxhbmdzIExBTkdTICAgICAgICAgICAgICAgTGFuZ3VhZ2VzIG9mIHRoZSBzdWJ0aXRsZXMgdG8gZG93bmxvYWQgKGNhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgcmVnZXgpIG9yIFwiYWxsXCIgc2VwYXJhdGVkIGJ5IGNvbW1hcywgZS5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1zdWItbGFuZ3MgXCJlbi4qLGphXCIuIFlvdSBjYW4gcHJlZml4IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgY29kZSB3aXRoIGEgXCItXCIgdG8gZXhjbHVkZSBpdCBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcmVxdWVzdGVkIGxhbmd1YWdlcywgZS5nLiAtLXN1Yi1sYW5nc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsLC1saXZlX2NoYXQuIFVzZSAtLWxpc3Qtc3VicyBmb3IgYSBsaXN0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBhdmFpbGFibGUgbGFuZ3VhZ2UgdGFnc1xuXG4jIyBBdXRoZW50aWNhdGlvbiBPcHRpb25zOlxuICAgIC11LCAtLXVzZXJuYW1lIFVTRVJOQU1FICAgICAgICAgTG9naW4gd2l0aCB0aGlzIGFjY291bnQgSURcbiAgICAtcCwgLS1wYXNzd29yZCBQQVNTV09SRCAgICAgICAgIEFjY291bnQgcGFzc3dvcmQuIElmIHRoaXMgb3B0aW9uIGlzIGxlZnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG91dCwgeXQtZGxwIHdpbGwgYXNrIGludGVyYWN0aXZlbHlcbiAgICAtMiwgLS10d29mYWN0b3IgVFdPRkFDVE9SICAgICAgIFR3by1mYWN0b3IgYXV0aGVudGljYXRpb24gY29kZVxuICAgIC1uLCAtLW5ldHJjICAgICAgICAgICAgICAgICAgICAgVXNlIC5uZXRyYyBhdXRoZW50aWNhdGlvbiBkYXRhXG4gICAgLS1uZXRyYy1sb2NhdGlvbiBQQVRIICAgICAgICAgICBMb2NhdGlvbiBvZiAubmV0cmMgYXV0aGVudGljYXRpb24gZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVpdGhlciB0aGUgcGF0aCBvciBpdHMgY29udGFpbmluZyBkaXJlY3RvcnkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0cyB0byB+Ly5uZXRyY1xuICAgIC0tdmlkZW8tcGFzc3dvcmQgUEFTU1dPUkQgICAgICAgVmlkZW8gcGFzc3dvcmQgKHZpbWVvLCB5b3VrdSlcbiAgICAtLWFwLW1zbyBNU08gICAgICAgICAgICAgICAgICAgIEFkb2JlIFBhc3MgbXVsdGlwbGUtc3lzdGVtIG9wZXJhdG9yIChUVlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXIpIGlkZW50aWZpZXIsIHVzZSAtLWFwLWxpc3QtbXNvIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBsaXN0IG9mIGF2YWlsYWJsZSBNU09zXG4gICAgLS1hcC11c2VybmFtZSBVU0VSTkFNRSAgICAgICAgICBNdWx0aXBsZS1zeXN0ZW0gb3BlcmF0b3IgYWNjb3VudCBsb2dpblxuICAgIC0tYXAtcGFzc3dvcmQgUEFTU1dPUkQgICAgICAgICAgTXVsdGlwbGUtc3lzdGVtIG9wZXJhdG9yIGFjY291bnQgcGFzc3dvcmQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGlzIG9wdGlvbiBpcyBsZWZ0IG91dCwgeXQtZGxwIHdpbGwgYXNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGl2ZWx5XG4gICAgLS1hcC1saXN0LW1zbyAgICAgICAgICAgICAgICAgICBMaXN0IGFsbCBzdXBwb3J0ZWQgbXVsdGlwbGUtc3lzdGVtIG9wZXJhdG9yc1xuICAgIC0tY2xpZW50LWNlcnRpZmljYXRlIENFUlRGSUxFICAgUGF0aCB0byBjbGllbnQgY2VydGlmaWNhdGUgZmlsZSBpbiBQRU1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdC4gTWF5IGluY2x1ZGUgdGhlIHByaXZhdGUga2V5XG4gICAgLS1jbGllbnQtY2VydGlmaWNhdGUta2V5IEtFWUZJTEVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhdGggdG8gcHJpdmF0ZSBrZXkgZmlsZSBmb3IgY2xpZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZXJ0aWZpY2F0ZVxuICAgIC0tY2xpZW50LWNlcnRpZmljYXRlLXBhc3N3b3JkIFBBU1NXT1JEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQYXNzd29yZCBmb3IgY2xpZW50IGNlcnRpZmljYXRlIHByaXZhdGUga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgZW5jcnlwdGVkLiBJZiBub3QgcHJvdmlkZWQsIGFuZCB0aGUga2V5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBlbmNyeXB0ZWQsIHl0LWRscCB3aWxsIGFzayBpbnRlcmFjdGl2ZWx5XG5cbiMjIFBvc3QtUHJvY2Vzc2luZyBPcHRpb25zOlxuICAgIC14LCAtLWV4dHJhY3QtYXVkaW8gICAgICAgICAgICAgQ29udmVydCB2aWRlbyBmaWxlcyB0byBhdWRpby1vbmx5IGZpbGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVxdWlyZXMgZmZtcGVnIGFuZCBmZnByb2JlKVxuICAgIC0tYXVkaW8tZm9ybWF0IEZPUk1BVCAgICAgICAgICAgRm9ybWF0IHRvIGNvbnZlcnQgdGhlIGF1ZGlvIHRvIHdoZW4gLXggaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQuIChjdXJyZW50bHkgc3VwcG9ydGVkOiBiZXN0IChkZWZhdWx0KSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhYywgYWxhYywgZmxhYywgbTRhLCBtcDMsIG9wdXMsIHZvcmJpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhdikuIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBydWxlcyB1c2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2ltaWxhciBzeW50YXggYXMgLS1yZW11eC12aWRlb1xuICAgIC0tYXVkaW8tcXVhbGl0eSBRVUFMSVRZICAgICAgICAgU3BlY2lmeSBmZm1wZWcgYXVkaW8gcXVhbGl0eSB0byB1c2Ugd2hlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydGluZyB0aGUgYXVkaW8gd2l0aCAteC4gSW5zZXJ0IGEgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJldHdlZW4gMCAoYmVzdCkgYW5kIDEwICh3b3JzdCkgZm9yIFZCUiBvciBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpYyBiaXRyYXRlIGxpa2UgMTI4SyAoZGVmYXVsdCA1KVxuICAgIC0tcmVtdXgtdmlkZW8gRk9STUFUICAgICAgICAgICAgUmVtdXggdGhlIHZpZGVvIGludG8gYW5vdGhlciBjb250YWluZXIgaWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lY2Vzc2FyeSAoY3VycmVudGx5IHN1cHBvcnRlZDogYXZpLCBmbHYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaWYsIG1rdiwgbW92LCBtcDQsIHdlYm0sIGFhYywgYWlmZiwgYWxhYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYWMsIG00YSwgbWthLCBtcDMsIG9nZywgb3B1cywgdm9yYmlzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F2KS4gSWYgdGFyZ2V0IGNvbnRhaW5lciBkb2VzIG5vdCBzdXBwb3J0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmlkZW8vYXVkaW8gY29kZWMsIHJlbXV4aW5nIHdpbGwgZmFpbC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBjYW4gc3BlY2lmeSBtdWx0aXBsZSBydWxlczsgZS5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhYWM+bTRhL21vdj5tcDQvbWt2XCIgd2lsbCByZW11eCBhYWMgdG8gbTRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW92IHRvIG1wNCBhbmQgYW55dGhpbmcgZWxzZSB0byBta3ZcbiAgICAtLXJlY29kZS12aWRlbyBGT1JNQVQgICAgICAgICAgIFJlLWVuY29kZSB0aGUgdmlkZW8gaW50byBhbm90aGVyIGZvcm1hdCBpZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVjZXNzYXJ5LiBUaGUgc3ludGF4IGFuZCBzdXBwb3J0ZWQgZm9ybWF0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHRoZSBzYW1lIGFzIC0tcmVtdXgtdmlkZW9cbiAgICAtLXBvc3Rwcm9jZXNzb3ItYXJncyBOQU1FOkFSR1MgIEdpdmUgdGhlc2UgYXJndW1lbnRzIHRvIHRoZSBwb3N0cHJvY2Vzc29ycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwZWNpZnkgdGhlIHBvc3Rwcm9jZXNzb3IvZXhlY3V0YWJsZSBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIGFyZ3VtZW50cyBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBcIjpcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gZ2l2ZSB0aGUgYXJndW1lbnQgdG8gdGhlIHNwZWNpZmllZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdHByb2Nlc3Nvci9leGVjdXRhYmxlLiBTdXBwb3J0ZWQgUFAgYXJlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWVyZ2VyLCBNb2RpZnlDaGFwdGVycywgU3BsaXRDaGFwdGVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV4dHJhY3RBdWRpbywgVmlkZW9SZW11eGVyLCBWaWRlb0NvbnZlcnRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1ldGFkYXRhLCBFbWJlZFN1YnRpdGxlLCBFbWJlZFRodW1ibmFpbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN1YnRpdGxlc0NvbnZlcnRvciwgVGh1bWJuYWlsc0NvbnZlcnRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpeHVwU3RyZXRjaGVkLCBGaXh1cE00YSwgRml4dXBNM3U4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRml4dXBUaW1lc3RhbXAgYW5kIEZpeHVwRHVyYXRpb24uIFRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwcG9ydGVkIGV4ZWN1dGFibGVzIGFyZTogQXRvbWljUGFyc2xleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZGbXBlZyBhbmQgRkZwcm9iZS4gWW91IGNhbiBhbHNvIHNwZWNpZnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiUFArRVhFOkFSR1NcIiB0byBnaXZlIHRoZSBhcmd1bWVudHMgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjaWZpZWQgZXhlY3V0YWJsZSBvbmx5IHdoZW4gYmVpbmcgdXNlZCBieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNwZWNpZmllZCBwb3N0cHJvY2Vzc29yLiBBZGRpdGlvbmFsbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZmZtcGVnL2ZmcHJvYmUsIFwiX2lcIi9cIl9vXCIgY2FuIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlbmRlZCB0byB0aGUgcHJlZml4IG9wdGlvbmFsbHkgZm9sbG93ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IGEgbnVtYmVyIHRvIHBhc3MgdGhlIGFyZ3VtZW50IGJlZm9yZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwZWNpZmllZCBpbnB1dC9vdXRwdXQgZmlsZSwgZS5nLiAtLXBwYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJNZXJnZXIrZmZtcGVnX2kxOi12IHF1aWV0XCIuIFlvdSBjYW4gdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIG9wdGlvbiBtdWx0aXBsZSB0aW1lcyB0byBnaXZlIGRpZmZlcmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzIHRvIGRpZmZlcmVudCBwb3N0cHJvY2Vzc29ycy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBbGlhczogLS1wcGEpXG4gICAgLWssIC0ta2VlcC12aWRlbyAgICAgICAgICAgICAgICBLZWVwIHRoZSBpbnRlcm1lZGlhdGUgdmlkZW8gZmlsZSBvbiBkaXNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZnRlciBwb3N0LXByb2Nlc3NpbmdcbiAgICAtLW5vLWtlZXAtdmlkZW8gICAgICAgICAgICAgICAgIERlbGV0ZSB0aGUgaW50ZXJtZWRpYXRlIHZpZGVvIGZpbGUgYWZ0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3QtcHJvY2Vzc2luZyAoZGVmYXVsdClcbiAgICAtLXBvc3Qtb3ZlcndyaXRlcyAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBwb3N0LXByb2Nlc3NlZCBmaWxlcyAoZGVmYXVsdClcbiAgICAtLW5vLXBvc3Qtb3ZlcndyaXRlcyAgICAgICAgICAgIERvIG5vdCBvdmVyd3JpdGUgcG9zdC1wcm9jZXNzZWQgZmlsZXNcbiAgICAtLWVtYmVkLXN1YnMgICAgICAgICAgICAgICAgICAgIEVtYmVkIHN1YnRpdGxlcyBpbiB0aGUgdmlkZW8gKG9ubHkgZm9yIG1wNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlYm0gYW5kIG1rdiB2aWRlb3MpXG4gICAgLS1uby1lbWJlZC1zdWJzICAgICAgICAgICAgICAgICBEbyBub3QgZW1iZWQgc3VidGl0bGVzIChkZWZhdWx0KVxuICAgIC0tZW1iZWQtdGh1bWJuYWlsICAgICAgICAgICAgICAgRW1iZWQgdGh1bWJuYWlsIGluIHRoZSB2aWRlbyBhcyBjb3ZlciBhcnRcbiAgICAtLW5vLWVtYmVkLXRodW1ibmFpbCAgICAgICAgICAgIERvIG5vdCBlbWJlZCB0aHVtYm5haWwgKGRlZmF1bHQpXG4gICAgLS1lbWJlZC1tZXRhZGF0YSAgICAgICAgICAgICAgICBFbWJlZCBtZXRhZGF0YSB0byB0aGUgdmlkZW8gZmlsZS4gQWxzb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1iZWRzIGNoYXB0ZXJzL2luZm9qc29uIGlmIHByZXNlbnQgdW5sZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLW5vLWVtYmVkLWNoYXB0ZXJzLy0tbm8tZW1iZWQtaW5mby1qc29uIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCAoQWxpYXM6IC0tYWRkLW1ldGFkYXRhKVxuICAgIC0tbm8tZW1iZWQtbWV0YWRhdGEgICAgICAgICAgICAgRG8gbm90IGFkZCBtZXRhZGF0YSB0byBmaWxlIChkZWZhdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFsaWFzOiAtLW5vLWFkZC1tZXRhZGF0YSlcbiAgICAtLWVtYmVkLWNoYXB0ZXJzICAgICAgICAgICAgICAgIEFkZCBjaGFwdGVyIG1hcmtlcnMgdG8gdGhlIHZpZGVvIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBbGlhczogLS1hZGQtY2hhcHRlcnMpXG4gICAgLS1uby1lbWJlZC1jaGFwdGVycyAgICAgICAgICAgICBEbyBub3QgYWRkIGNoYXB0ZXIgbWFya2VycyAoZGVmYXVsdCkgKEFsaWFzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1uby1hZGQtY2hhcHRlcnMpXG4gICAgLS1lbWJlZC1pbmZvLWpzb24gICAgICAgICAgICAgICBFbWJlZCB0aGUgaW5mb2pzb24gYXMgYW4gYXR0YWNobWVudCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWt2L21rYSB2aWRlbyBmaWxlc1xuICAgIC0tbm8tZW1iZWQtaW5mby1qc29uICAgICAgICAgICAgRG8gbm90IGVtYmVkIHRoZSBpbmZvanNvbiBhcyBhbiBhdHRhY2htZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgdmlkZW8gZmlsZVxuICAgIC0tcGFyc2UtbWV0YWRhdGEgW1dIRU46XUZST006VE9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcnNlIGFkZGl0aW9uYWwgbWV0YWRhdGEgbGlrZSB0aXRsZS9hcnRpc3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gb3RoZXIgZmllbGRzOyBzZWUgXCJNT0RJRllJTkcgTUVUQURBVEFcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGRldGFpbHMuIFN1cHBvcnRlZCB2YWx1ZXMgb2YgXCJXSEVOXCIgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgc2FtZSBhcyB0aGF0IG9mIC0tdXNlLXBvc3Rwcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBwcmVfcHJvY2VzcylcbiAgICAtLXJlcGxhY2UtaW4tbWV0YWRhdGEgW1dIRU46XUZJRUxEUyBSRUdFWCBSRVBMQUNFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXBsYWNlIHRleHQgaW4gYSBtZXRhZGF0YSBmaWVsZCB1c2luZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmVuIHJlZ2V4LiBUaGlzIG9wdGlvbiBjYW4gYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgdGltZXMuIFN1cHBvcnRlZCB2YWx1ZXMgb2YgXCJXSEVOXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSB0aGUgc2FtZSBhcyB0aGF0IG9mIC0tdXNlLXBvc3Rwcm9jZXNzb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChkZWZhdWx0OiBwcmVfcHJvY2VzcylcbiAgICAtLXhhdHRycyAgICAgICAgICAgICAgICAgICAgICAgIFdyaXRlIG1ldGFkYXRhIHRvIHRoZSB2aWRlbyBmaWxlJ3MgeGF0dHJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodXNpbmcgZHVibGluIGNvcmUgYW5kIHhkZyBzdGFuZGFyZHMpXG4gICAgLS1jb25jYXQtcGxheWxpc3QgUE9MSUNZICAgICAgICBDb25jYXRlbmF0ZSB2aWRlb3MgaW4gYSBwbGF5bGlzdC4gT25lIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5ldmVyXCIsIFwiYWx3YXlzXCIsIG9yIFwibXVsdGlfdmlkZW9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQ7IG9ubHkgd2hlbiB0aGUgdmlkZW9zIGZvcm0gYSBzaW5nbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3cpLiBBbGwgdGhlIHZpZGVvIGZpbGVzIG11c3QgaGF2ZSBzYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2RlY3MgYW5kIG51bWJlciBvZiBzdHJlYW1zIHRvIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25jYXRhYmxlLiBUaGUgXCJwbF92aWRlbzpcIiBwcmVmaXggY2FuIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIHdpdGggXCItLXBhdGhzXCIgYW5kIFwiLS1vdXRwdXRcIiB0byBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvdXRwdXQgZmlsZW5hbWUgZm9yIHRoZSBjb25jYXRlbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzLiBTZWUgXCJPVVRQVVQgVEVNUExBVEVcIiBmb3IgZGV0YWlsc1xuICAgIC0tZml4dXAgUE9MSUNZICAgICAgICAgICAgICAgICAgQXV0b21hdGljYWxseSBjb3JyZWN0IGtub3duIGZhdWx0cyBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUuIE9uZSBvZiBuZXZlciAoZG8gbm90aGluZyksIHdhcm4gKG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtaXQgYSB3YXJuaW5nKSwgZGV0ZWN0X29yX3dhcm4gKHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDsgZml4IGZpbGUgaWYgd2UgY2FuLCB3YXJuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlcndpc2UpLCBmb3JjZSAodHJ5IGZpeGluZyBldmVuIGlmIGZpbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFscmVhZHkgZXhpc3RzKVxuICAgIC0tZmZtcGVnLWxvY2F0aW9uIFBBVEggICAgICAgICAgTG9jYXRpb24gb2YgdGhlIGZmbXBlZyBiaW5hcnk7IGVpdGhlciB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdGggdG8gdGhlIGJpbmFyeSBvciBpdHMgY29udGFpbmluZyBkaXJlY3RvcnlcbiAgICAtLWV4ZWMgW1dIRU46XUNNRCAgICAgICAgICAgICAgIEV4ZWN1dGUgYSBjb21tYW5kLCBvcHRpb25hbGx5IHByZWZpeGVkIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gdG8gZXhlY3V0ZSBpdCwgc2VwYXJhdGVkIGJ5IGEgXCI6XCIuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdXBwb3J0ZWQgdmFsdWVzIG9mIFwiV0hFTlwiIGFyZSB0aGUgc2FtZSBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBvZiAtLXVzZS1wb3N0cHJvY2Vzc29yIChkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXJfbW92ZSkuIFNhbWUgc3ludGF4IGFzIHRoZSBvdXRwdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlIGNhbiBiZSB1c2VkIHRvIHBhc3MgYW55IGZpZWxkIGFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmd1bWVudHMgdG8gdGhlIGNvbW1hbmQuIEFmdGVyIGRvd25sb2FkLCBhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbCBmaWVsZCBcImZpbGVwYXRoXCIgdGhhdCBjb250YWluc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGZpbmFsIHBhdGggb2YgdGhlIGRvd25sb2FkZWQgZmlsZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxzbyBhdmFpbGFibGUsIGFuZCBpZiBubyBmaWVsZHMgYXJlIHBhc3NlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICUoZmlsZXBhdGgsX2ZpbGVuYW1lfClxIGlzIGFwcGVuZGVkIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIG9mIHRoZSBjb21tYW5kLiBUaGlzIG9wdGlvbiBjYW4gYmUgdXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgdGltZXNcbiAgICAtLW5vLWV4ZWMgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZSBhbnkgcHJldmlvdXNseSBkZWZpbmVkIC0tZXhlY1xuICAgIC0tY29udmVydC1zdWJzIEZPUk1BVCAgICAgICAgICAgQ29udmVydCB0aGUgc3VidGl0bGVzIHRvIGFub3RoZXIgZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY3VycmVudGx5IHN1cHBvcnRlZDogYXNzLCBscmMsIHNydCwgdnR0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFsaWFzOiAtLWNvbnZlcnQtc3VidGl0bGVzKVxuICAgIC0tY29udmVydC10aHVtYm5haWxzIEZPUk1BVCAgICAgQ29udmVydCB0aGUgdGh1bWJuYWlscyB0byBhbm90aGVyIGZvcm1hdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGN1cnJlbnRseSBzdXBwb3J0ZWQ6IGpwZywgcG5nLCB3ZWJwKS4gWW91XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW4gc3BlY2lmeSBtdWx0aXBsZSBydWxlcyB1c2luZyBzaW1pbGFyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW50YXggYXMgLS1yZW11eC12aWRlb1xuICAgIC0tc3BsaXQtY2hhcHRlcnMgICAgICAgICAgICAgICAgU3BsaXQgdmlkZW8gaW50byBtdWx0aXBsZSBmaWxlcyBiYXNlZCBvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJuYWwgY2hhcHRlcnMuIFRoZSBcImNoYXB0ZXI6XCIgcHJlZml4IGNhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCB3aXRoIFwiLS1wYXRoc1wiIGFuZCBcIi0tb3V0cHV0XCIgdG8gc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3V0cHV0IGZpbGVuYW1lIGZvciB0aGUgc3BsaXQgZmlsZXMuIFNlZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJPVVRQVVQgVEVNUExBVEVcIiBmb3IgZGV0YWlsc1xuICAgIC0tbm8tc3BsaXQtY2hhcHRlcnMgICAgICAgICAgICAgRG8gbm90IHNwbGl0IHZpZGVvIGJhc2VkIG9uIGNoYXB0ZXJzIChkZWZhdWx0KVxuICAgIC0tcmVtb3ZlLWNoYXB0ZXJzIFJFR0VYICAgICAgICAgUmVtb3ZlIGNoYXB0ZXJzIHdob3NlIHRpdGxlIG1hdGNoZXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlbiByZWd1bGFyIGV4cHJlc3Npb24uIFRoZSBzeW50YXggaXMgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYW1lIGFzIC0tZG93bmxvYWQtc2VjdGlvbnMuIFRoaXMgb3B0aW9uIGNhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgdXNlZCBtdWx0aXBsZSB0aW1lc1xuICAgIC0tbm8tcmVtb3ZlLWNoYXB0ZXJzICAgICAgICAgICAgRG8gbm90IHJlbW92ZSBhbnkgY2hhcHRlcnMgZnJvbSB0aGUgZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQpXG4gICAgLS1mb3JjZS1rZXlmcmFtZXMtYXQtY3V0cyAgICAgICBGb3JjZSBrZXlmcmFtZXMgYXQgY3V0cyB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGluZy9zcGxpdHRpbmcvcmVtb3Zpbmcgc2VjdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGlzIGlzIHNsb3cgZHVlIHRvIG5lZWRpbmcgYSByZS1lbmNvZGUsIGJ1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJlc3VsdGluZyB2aWRlbyBtYXkgaGF2ZSBmZXdlciBhcnRpZmFjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyb3VuZCB0aGUgY3V0c1xuICAgIC0tbm8tZm9yY2Uta2V5ZnJhbWVzLWF0LWN1dHMgICAgRG8gbm90IGZvcmNlIGtleWZyYW1lcyBhcm91bmQgdGhlIGNoYXB0ZXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIGN1dHRpbmcvc3BsaXR0aW5nIChkZWZhdWx0KVxuICAgIC0tdXNlLXBvc3Rwcm9jZXNzb3IgTkFNRVs6QVJHU11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSAoY2FzZSBzZW5zaXRpdmUpIG5hbWUgb2YgcGx1Z2luXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0cHJvY2Vzc29ycyB0byBiZSBlbmFibGVkLCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcHRpb25hbGx5KSBhcmd1bWVudHMgdG8gYmUgcGFzc2VkIHRvIGl0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwYXJhdGVkIGJ5IGEgY29sb24gXCI6XCIuIEFSR1MgYXJlIGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbWljb2xvbiBcIjtcIiBkZWxpbWl0ZWQgbGlzdCBvZiBOQU1FPVZBTFVFLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIFwid2hlblwiIGFyZ3VtZW50IGRldGVybWluZXMgd2hlbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rwcm9jZXNzb3IgaXMgaW52b2tlZC4gSXQgY2FuIGJlIG9uZSBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcmVfcHJvY2Vzc1wiIChhZnRlciB2aWRlbyBleHRyYWN0aW9uKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWZ0ZXJfZmlsdGVyXCIgKGFmdGVyIHZpZGVvIHBhc3NlcyBmaWx0ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ2aWRlb1wiIChhZnRlciAtLWZvcm1hdDsgYmVmb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXByaW50Ly0tb3V0cHV0KSwgXCJiZWZvcmVfZGxcIiAoYmVmb3JlIGVhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpZGVvIGRvd25sb2FkKSwgXCJwb3N0X3Byb2Nlc3NcIiAoYWZ0ZXIgZWFjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlkZW8gZG93bmxvYWQ7IGRlZmF1bHQpLCBcImFmdGVyX21vdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGFmdGVyIG1vdmluZyB2aWRlbyBmaWxlIHRvIGl0J3MgZmluYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9ucyksIFwiYWZ0ZXJfdmlkZW9cIiAoYWZ0ZXIgZG93bmxvYWRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBwcm9jZXNzaW5nIGFsbCBmb3JtYXRzIG9mIGEgdmlkZW8pLCBvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwbGF5bGlzdFwiIChhdCBlbmQgb2YgcGxheWxpc3QpLiBUaGlzIG9wdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMgdG8gYWRkIGRpZmZlcmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdHByb2Nlc3NvcnNcblxuIyMgU3BvbnNvckJsb2NrIE9wdGlvbnM6XG5NYWtlIGNoYXB0ZXIgZW50cmllcyBmb3IsIG9yIHJlbW92ZSB2YXJpb3VzIHNlZ21lbnRzIChzcG9uc29yLFxuICAgIGludHJvZHVjdGlvbnMsIGV0Yy4pIGZyb20gZG93bmxvYWRlZCBZb3VUdWJlIHZpZGVvcyB1c2luZyB0aGVcbiAgICBbU3BvbnNvckJsb2NrIEFQSV0oaHR0cHM6Ly9zcG9uc29yLmFqYXkuYXBwKVxuXG4gICAgLS1zcG9uc29yYmxvY2stbWFyayBDQVRTICAgICAgICBTcG9uc29yQmxvY2sgY2F0ZWdvcmllcyB0byBjcmVhdGUgY2hhcHRlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciwgc2VwYXJhdGVkIGJ5IGNvbW1hcy4gQXZhaWxhYmxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzIGFyZSBzcG9uc29yLCBpbnRybywgb3V0cm8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmcHJvbW8sIHByZXZpZXcsIGZpbGxlciwgaW50ZXJhY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXNpY19vZmZ0b3BpYywgcG9pX2hpZ2hsaWdodCwgY2hhcHRlciwgYWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgZGVmYXVsdCAoPWFsbCkuIFlvdSBjYW4gcHJlZml4IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgd2l0aCBhIFwiLVwiIHRvIGV4Y2x1ZGUgaXQuIFNlZSBbMV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBkZXNjcmlwdGlvbiBvZiB0aGUgY2F0ZWdvcmllcy4gRS5nLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1zcG9uc29yYmxvY2stbWFyayBhbGwsLXByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxXSBodHRwczovL3dpa2kuc3BvbnNvci5hamF5LmFwcC93L1NlZ21lbnRfQ2F0ZWdvcmllc1xuICAgIC0tc3BvbnNvcmJsb2NrLXJlbW92ZSBDQVRTICAgICAgU3BvbnNvckJsb2NrIGNhdGVnb3JpZXMgdG8gYmUgcmVtb3ZlZCBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmlkZW8gZmlsZSwgc2VwYXJhdGVkIGJ5IGNvbW1hcy4gSWYgYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcnkgaXMgcHJlc2VudCBpbiBib3RoIG1hcmsgYW5kIHJlbW92ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZSB0YWtlcyBwcmVjZWRlbmNlLiBUaGUgc3ludGF4IGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlIGNhdGVnb3JpZXMgYXJlIHRoZSBzYW1lIGFzIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS1zcG9uc29yYmxvY2stbWFyayBleGNlcHQgdGhhdCBcImRlZmF1bHRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmZXJzIHRvIFwiYWxsLC1maWxsZXJcIiBhbmQgcG9pX2hpZ2hsaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXIgYXJlIG5vdCBhdmFpbGFibGVcbiAgICAtLXNwb25zb3JibG9jay1jaGFwdGVyLXRpdGxlIFRFTVBMQVRFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbiBvdXRwdXQgdGVtcGxhdGUgZm9yIHRoZSB0aXRsZSBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwb25zb3JCbG9jayBjaGFwdGVycyBjcmVhdGVkIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXNwb25zb3JibG9jay1tYXJrLiBUaGUgb25seSBhdmFpbGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkcyBhcmUgc3RhcnRfdGltZSwgZW5kX3RpbWUsIGNhdGVnb3J5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcywgbmFtZSwgY2F0ZWdvcnlfbmFtZXMuIERlZmF1bHRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBcIltTcG9uc29yQmxvY2tdOiAlKGNhdGVnb3J5X25hbWVzKWxcIlxuICAgIC0tbm8tc3BvbnNvcmJsb2NrICAgICAgICAgICAgICAgRGlzYWJsZSBib3RoIC0tc3BvbnNvcmJsb2NrLW1hcmsgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLXNwb25zb3JibG9jay1yZW1vdmVcbiAgICAtLXNwb25zb3JibG9jay1hcGkgVVJMICAgICAgICAgIFNwb25zb3JCbG9jayBBUEkgbG9jYXRpb24sIGRlZmF1bHRzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwczovL3Nwb25zb3IuYWpheS5hcHBcblxuIyMgRXh0cmFjdG9yIE9wdGlvbnM6XG4gICAgLS1leHRyYWN0b3ItcmV0cmllcyBSRVRSSUVTICAgICBOdW1iZXIgb2YgcmV0cmllcyBmb3Iga25vd24gZXh0cmFjdG9yIGVycm9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQgaXMgMyksIG9yIFwiaW5maW5pdGVcIlxuICAgIC0tYWxsb3ctZHluYW1pYy1tcGQgICAgICAgICAgICAgUHJvY2VzcyBkeW5hbWljIERBU0ggbWFuaWZlc3RzIChkZWZhdWx0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEFsaWFzOiAtLW5vLWlnbm9yZS1keW5hbWljLW1wZClcbiAgICAtLWlnbm9yZS1keW5hbWljLW1wZCAgICAgICAgICAgIERvIG5vdCBwcm9jZXNzIGR5bmFtaWMgREFTSCBtYW5pZmVzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBbGlhczogLS1uby1hbGxvdy1keW5hbWljLW1wZClcbiAgICAtLWhscy1zcGxpdC1kaXNjb250aW51aXR5ICAgICAgIFNwbGl0IEhMUyBwbGF5bGlzdHMgdG8gZGlmZmVyZW50IGZvcm1hdHMgYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2NvbnRpbnVpdGllcyBzdWNoIGFzIGFkIGJyZWFrc1xuICAgIC0tbm8taGxzLXNwbGl0LWRpc2NvbnRpbnVpdHkgICAgRG8gbm90IHNwbGl0IEhMUyBwbGF5bGlzdHMgdG8gZGlmZmVyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXRzIGF0IGRpc2NvbnRpbnVpdGllcyBzdWNoIGFzIGFkIGJyZWFrc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQpXG4gICAgLS1leHRyYWN0b3ItYXJncyBJRV9LRVk6QVJHUyAgICBQYXNzIEFSR1MgYXJndW1lbnRzIHRvIHRoZSBJRV9LRVkgZXh0cmFjdG9yLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIFwiRVhUUkFDVE9SIEFSR1VNRU5UU1wiIGZvciBkZXRhaWxzLiBZb3VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbiB1c2UgdGhpcyBvcHRpb24gbXVsdGlwbGUgdGltZXMgdG8gZ2l2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJndW1lbnRzIGZvciBkaWZmZXJlbnQgZXh0cmFjdG9yc1xuXG4jIENPTkZJR1VSQVRJT05cblxuWW91IGNhbiBjb25maWd1cmUgeXQtZGxwIGJ5IHBsYWNpbmcgYW55IHN1cHBvcnRlZCBjb21tYW5kIGxpbmUgb3B0aW9uIHRvIGEgY29uZmlndXJhdGlvbiBmaWxlLiBUaGUgY29uZmlndXJhdGlvbiBpcyBsb2FkZWQgZnJvbSB0aGUgZm9sbG93aW5nIGxvY2F0aW9uczpcblxuMS4gKipNYWluIENvbmZpZ3VyYXRpb24qKjpcbiAgICAqIFRoZSBmaWxlIGdpdmVuIGJ5IGAtLWNvbmZpZy1sb2NhdGlvbmBcbjEuICoqUG9ydGFibGUgQ29uZmlndXJhdGlvbioqOiAoUmVjb21tZW5kZWQgZm9yIHBvcnRhYmxlIGluc3RhbGxhdGlvbnMpXG4gICAgKiBJZiB1c2luZyBhIGJpbmFyeSwgYHl0LWRscC5jb25mYCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgYXMgdGhlIGJpbmFyeVxuICAgICogSWYgcnVubmluZyBmcm9tIHNvdXJjZS1jb2RlLCBgeXQtZGxwLmNvbmZgIGluIHRoZSBwYXJlbnQgZGlyZWN0b3J5IG9mIGB5dF9kbHBgXG4xLiAqKkhvbWUgQ29uZmlndXJhdGlvbioqOlxuICAgICogYHl0LWRscC5jb25mYCBpbiB0aGUgaG9tZSBwYXRoIGdpdmVuIGJ5IGAtUGBcbiAgICAqIElmIGAtUGAgaXMgbm90IGdpdmVuLCB0aGUgY3VycmVudCBkaXJlY3RvcnkgaXMgc2VhcmNoZWRcbjEuICoqVXNlciBDb25maWd1cmF0aW9uKio6XG4gICAgKiBgJHtYREdfQ09ORklHX0hPTUV9L3l0LWRscC5jb25mYFxuICAgICogYCR7WERHX0NPTkZJR19IT01FfS95dC1kbHAvY29uZmlnYCAocmVjb21tZW5kZWQgb24gTGludXgvbWFjT1MpXG4gICAgKiBgJHtYREdfQ09ORklHX0hPTUV9L3l0LWRscC9jb25maWcudHh0YFxuICAgICogYCR7QVBQREFUQX0veXQtZGxwLmNvbmZgXG4gICAgKiBgJHtBUFBEQVRBfS95dC1kbHAvY29uZmlnYCAocmVjb21tZW5kZWQgb24gV2luZG93cylcbiAgICAqIGAke0FQUERBVEF9L3l0LWRscC9jb25maWcudHh0YFxuICAgICogYH4veXQtZGxwLmNvbmZgXG4gICAgKiBgfi95dC1kbHAuY29uZi50eHRgXG4gICAgKiBgfi8ueXQtZGxwL2NvbmZpZ2BcbiAgICAqIGB+Ly55dC1kbHAvY29uZmlnLnR4dGBcblxuICAgIFNlZSBhbHNvOiBbTm90ZXMgYWJvdXQgZW52aXJvbm1lbnQgdmFyaWFibGVzXSgjbm90ZXMtYWJvdXQtZW52aXJvbm1lbnQtdmFyaWFibGVzKVxuMS4gKipTeXN0ZW0gQ29uZmlndXJhdGlvbioqOlxuICAgICogYC9ldGMveXQtZGxwLmNvbmZgXG4gICAgKiBgL2V0Yy95dC1kbHAvY29uZmlnYFxuICAgICogYC9ldGMveXQtZGxwL2NvbmZpZy50eHRgXG5cbkUuZy4gd2l0aCB0aGUgZm9sbG93aW5nIGNvbmZpZ3VyYXRpb24gZmlsZSB5dC1kbHAgd2lsbCBhbHdheXMgZXh0cmFjdCB0aGUgYXVkaW8sIG5vdCBjb3B5IHRoZSBtdGltZSwgdXNlIGEgcHJveHkgYW5kIHNhdmUgYWxsIHZpZGVvcyB1bmRlciBgWW91VHViZWAgZGlyZWN0b3J5IGluIHlvdXIgaG9tZSBkaXJlY3Rvcnk6XG5gYGBcbiMgTGluZXMgc3RhcnRpbmcgd2l0aCAjIGFyZSBjb21tZW50c1xuXG4jIEFsd2F5cyBleHRyYWN0IGF1ZGlvXG4teFxuXG4jIERvIG5vdCBjb3B5IHRoZSBtdGltZVxuLS1uby1tdGltZVxuXG4jIFVzZSB0aGlzIHByb3h5XG4tLXByb3h5IDEyNy4wLjAuMTozMTI4XG5cbiMgU2F2ZSBhbGwgdmlkZW9zIHVuZGVyIFlvdVR1YmUgZGlyZWN0b3J5IGluIHlvdXIgaG9tZSBkaXJlY3Rvcnlcbi1vIH4vWW91VHViZS8lKHRpdGxlKXMuJShleHQpc1xuYGBgXG5cbioqTm90ZSoqOiBPcHRpb25zIGluIGNvbmZpZ3VyYXRpb24gZmlsZSBhcmUganVzdCB0aGUgc2FtZSBvcHRpb25zIGFrYSBzd2l0Y2hlcyB1c2VkIGluIHJlZ3VsYXIgY29tbWFuZCBsaW5lIGNhbGxzOyB0aHVzIHRoZXJlICoqbXVzdCBiZSBubyB3aGl0ZXNwYWNlKiogYWZ0ZXIgYC1gIG9yIGAtLWAsIGUuZy4gYC1vYCBvciBgLS1wcm94eWAgYnV0IG5vdCBgLSBvYCBvciBgLS0gcHJveHlgLiBUaGV5IG11c3QgYWxzbyBiZSBxdW90ZWQgd2hlbiBuZWNlc3NhcnkgYXMtaWYgaXQgd2VyZSBhIFVOSVggc2hlbGwuXG5cbllvdSBjYW4gdXNlIGAtLWlnbm9yZS1jb25maWdgIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgYWxsIGNvbmZpZ3VyYXRpb24gZmlsZXMgZm9yIGEgcGFydGljdWxhciB5dC1kbHAgcnVuLiBJZiBgLS1pZ25vcmUtY29uZmlnYCBpcyBmb3VuZCBpbnNpZGUgYW55IGNvbmZpZ3VyYXRpb24gZmlsZSwgbm8gZnVydGhlciBjb25maWd1cmF0aW9uIHdpbGwgYmUgbG9hZGVkLiBGb3IgZXhhbXBsZSwgaGF2aW5nIHRoZSBvcHRpb24gaW4gdGhlIHBvcnRhYmxlIGNvbmZpZ3VyYXRpb24gZmlsZSBwcmV2ZW50cyBsb2FkaW5nIG9mIGhvbWUsIHVzZXIsIGFuZCBzeXN0ZW0gY29uZmlndXJhdGlvbnMuIEFkZGl0aW9uYWxseSwgKGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5KSBpZiBgLS1pZ25vcmUtY29uZmlnYCBpcyBmb3VuZCBpbnNpZGUgdGhlIHN5c3RlbSBjb25maWd1cmF0aW9uIGZpbGUsIHRoZSB1c2VyIGNvbmZpZ3VyYXRpb24gaXMgbm90IGxvYWRlZC5cblxuIyMjIENvbmZpZ3VyYXRpb24gZmlsZSBlbmNvZGluZ1xuXG5UaGUgY29uZmlndXJhdGlvbiBmaWxlcyBhcmUgZGVjb2RlZCBhY2NvcmRpbmcgdG8gdGhlIFVURiBCT00gaWYgcHJlc2VudCwgYW5kIGluIHRoZSBlbmNvZGluZyBmcm9tIHN5c3RlbSBsb2NhbGUgb3RoZXJ3aXNlLlxuXG5JZiB5b3Ugd2FudCB5b3VyIGZpbGUgdG8gYmUgZGVjb2RlZCBkaWZmZXJlbnRseSwgYWRkIGAjIGNvZGluZzogRU5DT0RJTkdgIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGZpbGUgKGUuZy4gYCMgY29kaW5nOiBzaGlmdC1qaXNgKS4gVGhlcmUgbXVzdCBiZSBubyBjaGFyYWN0ZXJzIGJlZm9yZSB0aGF0LCBldmVuIHNwYWNlcyBvciBCT00uXG5cbiMjIyBBdXRoZW50aWNhdGlvbiB3aXRoIGAubmV0cmNgIGZpbGVcblxuWW91IG1heSBhbHNvIHdhbnQgdG8gY29uZmlndXJlIGF1dG9tYXRpYyBjcmVkZW50aWFscyBzdG9yYWdlIGZvciBleHRyYWN0b3JzIHRoYXQgc3VwcG9ydCBhdXRoZW50aWNhdGlvbiAoYnkgcHJvdmlkaW5nIGxvZ2luIGFuZCBwYXNzd29yZCB3aXRoIGAtLXVzZXJuYW1lYCBhbmQgYC0tcGFzc3dvcmRgKSBpbiBvcmRlciBub3QgdG8gcGFzcyBjcmVkZW50aWFscyBhcyBjb21tYW5kIGxpbmUgYXJndW1lbnRzIG9uIGV2ZXJ5IHl0LWRscCBleGVjdXRpb24gYW5kIHByZXZlbnQgdHJhY2tpbmcgcGxhaW4gdGV4dCBwYXNzd29yZHMgaW4gdGhlIHNoZWxsIGNvbW1hbmQgaGlzdG9yeS4gWW91IGNhbiBhY2hpZXZlIHRoaXMgdXNpbmcgYSBbYC5uZXRyY2AgZmlsZV0oaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS90YWdzLy5uZXRyYy9pbmZvKSBvbiBhIHBlci1leHRyYWN0b3IgYmFzaXMuIEZvciB0aGF0IHlvdSB3aWxsIG5lZWQgdG8gY3JlYXRlIGEgYC5uZXRyY2AgZmlsZSBpbiBgLS1uZXRyYy1sb2NhdGlvbmAgYW5kIHJlc3RyaWN0IHBlcm1pc3Npb25zIHRvIHJlYWQvd3JpdGUgYnkgb25seSB5b3U6XG5gYGBcbnRvdWNoICR7SE9NRX0vLm5ldHJjXG5jaG1vZCBhLXJ3eCx1K3J3ICR7SE9NRX0vLm5ldHJjXG5gYGBcbkFmdGVyIHRoYXQgeW91IGNhbiBhZGQgY3JlZGVudGlhbHMgZm9yIGFuIGV4dHJhY3RvciBpbiB0aGUgZm9sbG93aW5nIGZvcm1hdCwgd2hlcmUgKmV4dHJhY3RvciogaXMgdGhlIG5hbWUgb2YgdGhlIGV4dHJhY3RvciBpbiBsb3dlcmNhc2U6XG5gYGBcbm1hY2hpbmUgPGV4dHJhY3Rvcj4gbG9naW4gPHVzZXJuYW1lPiBwYXNzd29yZCA8cGFzc3dvcmQ+XG5gYGBcbkUuZy5cbmBgYFxubWFjaGluZSB5b3V0dWJlIGxvZ2luIG15YWNjb3VudEBnbWFpbC5jb20gcGFzc3dvcmQgbXlfeW91dHViZV9wYXNzd29yZFxubWFjaGluZSB0d2l0Y2ggbG9naW4gbXlfdHdpdGNoX2FjY291bnRfbmFtZSBwYXNzd29yZCBteV90d2l0Y2hfcGFzc3dvcmRcbmBgYFxuVG8gYWN0aXZhdGUgYXV0aGVudGljYXRpb24gd2l0aCB0aGUgYC5uZXRyY2AgZmlsZSB5b3Ugc2hvdWxkIHBhc3MgYC0tbmV0cmNgIHRvIHl0LWRscCBvciBwbGFjZSBpdCBpbiB0aGUgW2NvbmZpZ3VyYXRpb24gZmlsZV0oI2NvbmZpZ3VyYXRpb24pLlxuXG5UaGUgZGVmYXVsdCBsb2NhdGlvbiBvZiB0aGUgLm5ldHJjIGZpbGUgaXMgYH5gIChzZWUgYmVsb3cpLlxuXG4jIyMgTm90ZXMgYWJvdXQgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4qIEVudmlyb25tZW50IHZhcmlhYmxlcyBhcmUgbm9ybWFsbHkgc3BlY2lmaWVkIGFzIGAke1ZBUklBQkxFfWAvYCRWQVJJQUJMRWAgb24gVU5JWCBhbmQgYCVWQVJJQUJMRSVgIG9uIFdpbmRvd3M7IGJ1dCBpcyBhbHdheXMgc2hvd24gYXMgYCR7VkFSSUFCTEV9YCBpbiB0aGlzIGRvY3VtZW50YXRpb25cbiogeXQtZGxwIGFsc28gYWxsb3cgdXNpbmcgVU5JWC1zdHlsZSB2YXJpYWJsZXMgb24gV2luZG93cyBmb3IgcGF0aC1saWtlIG9wdGlvbnM7IGUuZy4gYC0tb3V0cHV0YCwgYC0tY29uZmlnLWxvY2F0aW9uYFxuKiBJZiB1bnNldCwgYCR7WERHX0NPTkZJR19IT01FfWAgZGVmYXVsdHMgdG8gYH4vLmNvbmZpZ2AgYW5kIGAke1hER19DQUNIRV9IT01FfWAgdG8gYH4vLmNhY2hlYFxuKiBPbiBXaW5kb3dzLCBgfmAgcG9pbnRzIHRvIGAke0hPTUV9YCBpZiBwcmVzZW50OyBvciwgYCR7VVNFUlBST0ZJTEV9YCBvciBgJHtIT01FRFJJVkV9JHtIT01FUEFUSH1gIG90aGVyd2lzZVxuKiBPbiBXaW5kb3dzLCBgJHtVU0VSUFJPRklMRX1gIGdlbmVyYWxseSBwb2ludHMgdG8gYEM6XFxVc2Vyc1xcPHVzZXIgbmFtZT5gIGFuZCBgJHtBUFBEQVRBfWAgdG8gYCR7VVNFUlBST0ZJTEV9XFxBcHBEYXRhXFxSb2FtaW5nYFxuXG4jIE9VVFBVVCBURU1QTEFURVxuXG5UaGUgYC1vYCBvcHRpb24gaXMgdXNlZCB0byBpbmRpY2F0ZSBhIHRlbXBsYXRlIGZvciB0aGUgb3V0cHV0IGZpbGUgbmFtZXMgd2hpbGUgYC1QYCBvcHRpb24gaXMgdXNlZCB0byBzcGVjaWZ5IHRoZSBwYXRoIGVhY2ggdHlwZSBvZiBmaWxlIHNob3VsZCBiZSBzYXZlZCB0by5cblxuPCEtLSBNQU5QQUdFOiBCRUdJTiBFWENMVURFRCBTRUNUSU9OIC0tPlxuKip0bDtkcjoqKiBbbmF2aWdhdGUgbWUgdG8gZXhhbXBsZXNdKCNvdXRwdXQtdGVtcGxhdGUtZXhhbXBsZXMpLlxuPCEtLSBNQU5QQUdFOiBFTkQgRVhDTFVERUQgU0VDVElPTiAtLT5cblxuVGhlIHNpbXBsZXN0IHVzYWdlIG9mIGAtb2AgaXMgbm90IHRvIHNldCBhbnkgdGVtcGxhdGUgYXJndW1lbnRzIHdoZW4gZG93bmxvYWRpbmcgYSBzaW5nbGUgZmlsZSwgbGlrZSBpbiBgeXQtZGxwIC1vIGZ1bm55X3ZpZGVvLmZsdiBcImh0dHBzOi8vc29tZS92aWRlb1wiYCAoaGFyZC1jb2RpbmcgZmlsZSBleHRlbnNpb24gbGlrZSB0aGlzIGlzIF9ub3RfIHJlY29tbWVuZGVkIGFuZCBjb3VsZCBicmVhayBzb21lIHBvc3QtcHJvY2Vzc2luZykuXG5cbkl0IG1heSBob3dldmVyIGFsc28gY29udGFpbiBzcGVjaWFsIHNlcXVlbmNlcyB0aGF0IHdpbGwgYmUgcmVwbGFjZWQgd2hlbiBkb3dubG9hZGluZyBlYWNoIHZpZGVvLiBUaGUgc3BlY2lhbCBzZXF1ZW5jZXMgbWF5IGJlIGZvcm1hdHRlZCBhY2NvcmRpbmcgdG8gW1B5dGhvbiBzdHJpbmcgZm9ybWF0dGluZyBvcGVyYXRpb25zXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvc3RkdHlwZXMuaHRtbCNwcmludGYtc3R5bGUtc3RyaW5nLWZvcm1hdHRpbmcpLCBlLmcuIGAlKE5BTUUpc2Agb3IgYCUoTkFNRSkwNWRgLiBUbyBjbGFyaWZ5LCB0aGF0IGlzIGEgcGVyY2VudCBzeW1ib2wgZm9sbG93ZWQgYnkgYSBuYW1lIGluIHBhcmVudGhlc2VzLCBmb2xsb3dlZCBieSBmb3JtYXR0aW5nIG9wZXJhdGlvbnMuXG5cblRoZSBmaWVsZCBuYW1lcyB0aGVtc2VsdmVzICh0aGUgcGFydCBpbnNpZGUgdGhlIHBhcmVudGhlc2lzKSBjYW4gYWxzbyBoYXZlIHNvbWUgc3BlY2lhbCBmb3JtYXR0aW5nOlxuXG4xLiAqKk9iamVjdCB0cmF2ZXJzYWwqKjogVGhlIGRpY3Rpb25hcmllcyBhbmQgbGlzdHMgYXZhaWxhYmxlIGluIG1ldGFkYXRhIGNhbiBiZSB0cmF2ZXJzZWQgYnkgdXNpbmcgYSBkb3QgYC5gIHNlcGFyYXRvcjsgZS5nLiBgJSh0YWdzLjApc2AsIGAlKHN1YnRpdGxlcy5lbi4tMS5leHQpc2AuIFlvdSBjYW4gZG8gUHl0aG9uIHNsaWNpbmcgd2l0aCBjb2xvbiBgOmA7IEUuZy4gYCUoaWQuMzo3Oi0xKXNgLCBgJShmb3JtYXRzLjouZm9ybWF0X2lkKXNgLiBDdXJseSBicmFjZXMgYHt9YCBjYW4gYmUgdXNlZCB0byBidWlsZCBkaWN0aW9uYXJpZXMgd2l0aCBvbmx5IHNwZWNpZmljIGtleXM7IGUuZy4gYCUoZm9ybWF0cy46Lntmb3JtYXRfaWQsaGVpZ2h0fSkjamAuIEFuIGVtcHR5IGZpZWxkIG5hbWUgYCUoKXNgIHJlZmVycyB0byB0aGUgZW50aXJlIGluZm9kaWN0OyBlLmcuIGAlKC57aWQsdGl0bGV9KXNgLiBOb3RlIHRoYXQgYWxsIHRoZSBmaWVsZHMgdGhhdCBiZWNvbWUgYXZhaWxhYmxlIHVzaW5nIHRoaXMgbWV0aG9kIGFyZSBub3QgbGlzdGVkIGJlbG93LiBVc2UgYC1qYCB0byBzZWUgc3VjaCBmaWVsZHNcblxuMS4gKipBZGRpdGlvbioqOiBBZGRpdGlvbiBhbmQgc3VidHJhY3Rpb24gb2YgbnVtZXJpYyBmaWVsZHMgY2FuIGJlIGRvbmUgdXNpbmcgYCtgIGFuZCBgLWAgcmVzcGVjdGl2ZWx5LiBFLmcuIGAlKHBsYXlsaXN0X2luZGV4KzEwKTAzZGAsIGAlKG5fZW50cmllcysxLXBsYXlsaXN0X2luZGV4KWRgXG5cbjEuICoqRGF0ZS90aW1lIEZvcm1hdHRpbmcqKjogRGF0ZS90aW1lIGZpZWxkcyBjYW4gYmUgZm9ybWF0dGVkIGFjY29yZGluZyB0byBbc3RyZnRpbWUgZm9ybWF0dGluZ10oaHR0cHM6Ly9kb2NzLnB5dGhvbi5vcmcvMy9saWJyYXJ5L2RhdGV0aW1lLmh0bWwjc3RyZnRpbWUtYW5kLXN0cnB0aW1lLWZvcm1hdC1jb2RlcykgYnkgc3BlY2lmeWluZyBpdCBzZXBhcmF0ZWQgZnJvbSB0aGUgZmllbGQgbmFtZSB1c2luZyBhIGA+YC4gRS5nLiBgJShkdXJhdGlvbj4lSC0lTS0lUylzYCwgYCUodXBsb2FkX2RhdGU+JVktJW0tJWQpc2AsIGAlKGVwb2NoLTM2MDA+JUgtJU0tJVMpc2BcblxuMS4gKipBbHRlcm5hdGl2ZXMqKjogQWx0ZXJuYXRlIGZpZWxkcyBjYW4gYmUgc3BlY2lmaWVkIHNlcGFyYXRlZCB3aXRoIGEgYCxgLiBFLmcuIGAlKHJlbGVhc2VfZGF0ZT4lWSx1cGxvYWRfZGF0ZT4lWXxVbmtub3duKXNgXG5cbjEuICoqUmVwbGFjZW1lbnQqKjogQSByZXBsYWNlbWVudCB2YWx1ZSBjYW4gYmUgc3BlY2lmaWVkIHVzaW5nIGEgYCZgIHNlcGFyYXRvci4gSWYgdGhlIGZpZWxkIGlzICpub3QqIGVtcHR5LCB0aGlzIHJlcGxhY2VtZW50IHZhbHVlIHdpbGwgYmUgdXNlZCBpbnN0ZWFkIG9mIHRoZSBhY3R1YWwgZmllbGQgY29udGVudC4gVGhpcyBpcyBkb25lIGFmdGVyIGFsdGVybmF0ZSBmaWVsZHMgYXJlIGNvbnNpZGVyZWQ7IHRodXMgdGhlIHJlcGxhY2VtZW50IGlzIHVzZWQgaWYgKmFueSogb2YgdGhlIGFsdGVybmF0aXZlIGZpZWxkcyBpcyAqbm90KiBlbXB0eS5cblxuMS4gKipEZWZhdWx0Kio6IEEgbGl0ZXJhbCBkZWZhdWx0IHZhbHVlIGNhbiBiZSBzcGVjaWZpZWQgZm9yIHdoZW4gdGhlIGZpZWxkIGlzIGVtcHR5IHVzaW5nIGEgYHxgIHNlcGFyYXRvci4gVGhpcyBvdmVycmlkZXMgYC0tb3V0cHV0LW5hLXBsYWNlaG9sZGVyYC4gRS5nLiBgJSh1cGxvYWRlcnxVbmtub3duKXNgXG5cbjEuICoqTW9yZSBDb252ZXJzaW9ucyoqOiBJbiBhZGRpdGlvbiB0byB0aGUgbm9ybWFsIGZvcm1hdCB0eXBlcyBgZGlvdXhYZUVmRmdHY3JzYCwgeXQtZGxwIGFkZGl0aW9uYWxseSBzdXBwb3J0cyBjb252ZXJ0aW5nIHRvIGBCYCA9ICoqQioqeXRlcywgYGpgID0gKipqKipzb24gKGZsYWcgYCNgIGZvciBwcmV0dHktcHJpbnRpbmcsIGArYCBmb3IgVW5pY29kZSksIGBoYCA9IEhUTUwgZXNjYXBpbmcsIGBsYCA9IGEgY29tbWEgc2VwYXJhdGVkICoqbCoqaXN0IChmbGFnIGAjYCBmb3IgYFxcbmAgbmV3bGluZS1zZXBhcmF0ZWQpLCBgcWAgPSBhIHN0cmluZyAqKnEqKnVvdGVkIGZvciB0aGUgdGVybWluYWwgKGZsYWcgYCNgIHRvIHNwbGl0IGEgbGlzdCBpbnRvIGRpZmZlcmVudCBhcmd1bWVudHMpLCBgRGAgPSBhZGQgKipEKiplY2ltYWwgc3VmZml4ZXMgKGUuZy4gMTBNKSAoZmxhZyBgI2AgdG8gdXNlIDEwMjQgYXMgZmFjdG9yKSwgYW5kIGBTYCA9ICoqUyoqYW5pdGl6ZSBhcyBmaWxlbmFtZSAoZmxhZyBgI2AgZm9yIHJlc3RyaWN0ZWQpXG5cbjEuICoqVW5pY29kZSBub3JtYWxpemF0aW9uKio6IFRoZSBmb3JtYXQgdHlwZSBgVWAgY2FuIGJlIHVzZWQgZm9yIE5GQyBbVW5pY29kZSBub3JtYWxpemF0aW9uXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvdW5pY29kZWRhdGEuaHRtbCN1bmljb2RlZGF0YS5ub3JtYWxpemUpLiBUaGUgYWx0ZXJuYXRlIGZvcm0gZmxhZyAoYCNgKSBjaGFuZ2VzIHRoZSBub3JtYWxpemF0aW9uIHRvIE5GRCBhbmQgdGhlIGNvbnZlcnNpb24gZmxhZyBgK2AgY2FuIGJlIHVzZWQgZm9yIE5GS0MvTkZLRCBjb21wYXRpYmlsaXR5IGVxdWl2YWxlbmNlIG5vcm1hbGl6YXRpb24uIEUuZy4gYCUodGl0bGUpKy4xMDBVYCBpcyBORktDXG5cblRvIHN1bW1hcml6ZSwgdGhlIGdlbmVyYWwgc3ludGF4IGZvciBhIGZpZWxkIGlzOlxuYGBgXG4lKG5hbWVbLmtleXNdW2FkZGl0aW9uXVs+c3RyZl1bLGFsdGVybmF0ZV1bJnJlcGxhY2VtZW50XVt8ZGVmYXVsdF0pW2ZsYWdzXVt3aWR0aF1bLnByZWNpc2lvbl1bbGVuZ3RoXXR5cGVcbmBgYFxuXG5BZGRpdGlvbmFsbHksIHlvdSBjYW4gc2V0IGRpZmZlcmVudCBvdXRwdXQgdGVtcGxhdGVzIGZvciB0aGUgdmFyaW91cyBtZXRhZGF0YSBmaWxlcyBzZXBhcmF0ZWx5IGZyb20gdGhlIGdlbmVyYWwgb3V0cHV0IHRlbXBsYXRlIGJ5IHNwZWNpZnlpbmcgdGhlIHR5cGUgb2YgZmlsZSBmb2xsb3dlZCBieSB0aGUgdGVtcGxhdGUgc2VwYXJhdGVkIGJ5IGEgY29sb24gYDpgLiBUaGUgZGlmZmVyZW50IGZpbGUgdHlwZXMgc3VwcG9ydGVkIGFyZSBgc3VidGl0bGVgLCBgdGh1bWJuYWlsYCwgYGRlc2NyaXB0aW9uYCwgYGFubm90YXRpb25gIChkZXByZWNhdGVkKSwgYGluZm9qc29uYCwgYGxpbmtgLCBgcGxfdGh1bWJuYWlsYCwgYHBsX2Rlc2NyaXB0aW9uYCwgYHBsX2luZm9qc29uYCwgYGNoYXB0ZXJgLCBgcGxfdmlkZW9gLiBFLmcuIGAtbyBcIiUodGl0bGUpcy4lKGV4dClzXCIgLW8gXCJ0aHVtYm5haWw6JSh0aXRsZSlzXFwlKHRpdGxlKXMuJShleHQpc1wiYCAgd2lsbCBwdXQgdGhlIHRodW1ibmFpbHMgaW4gYSBmb2xkZXIgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSB2aWRlby4gSWYgYW55IG9mIHRoZSB0ZW1wbGF0ZXMgaXMgZW1wdHksIHRoYXQgdHlwZSBvZiBmaWxlIHdpbGwgbm90IGJlIHdyaXR0ZW4uIEUuZy4gYC0td3JpdGUtdGh1bWJuYWlsIC1vIFwidGh1bWJuYWlsOlwiYCB3aWxsIHdyaXRlIHRodW1ibmFpbHMgb25seSBmb3IgcGxheWxpc3RzIGFuZCBub3QgZm9yIHZpZGVvLlxuXG48YSBpZD1cIm91dHRtcGwtcG9zdHByb2Nlc3Mtbm90ZVwiLz5cblxuKipOb3RlKio6IER1ZSB0byBwb3N0LXByb2Nlc3NpbmcgKGkuZS4gbWVyZ2luZyBldGMuKSwgdGhlIGFjdHVhbCBvdXRwdXQgZmlsZW5hbWUgbWlnaHQgZGlmZmVyLiBVc2UgYC0tcHJpbnQgYWZ0ZXJfbW92ZTpmaWxlcGF0aGAgdG8gZ2V0IHRoZSBuYW1lIGFmdGVyIGFsbCBwb3N0LXByb2Nlc3NpbmcgaXMgY29tcGxldGUuXG5cblRoZSBhdmFpbGFibGUgZmllbGRzIGFyZTpcblxuIC0gYGlkYCAoc3RyaW5nKTogVmlkZW8gaWRlbnRpZmllclxuIC0gYHRpdGxlYCAoc3RyaW5nKTogVmlkZW8gdGl0bGVcbiAtIGBmdWxsdGl0bGVgIChzdHJpbmcpOiBWaWRlbyB0aXRsZSBpZ25vcmluZyBsaXZlIHRpbWVzdGFtcCBhbmQgZ2VuZXJpYyB0aXRsZVxuIC0gYGV4dGAgKHN0cmluZyk6IFZpZGVvIGZpbGVuYW1lIGV4dGVuc2lvblxuIC0gYGFsdF90aXRsZWAgKHN0cmluZyk6IEEgc2Vjb25kYXJ5IHRpdGxlIG9mIHRoZSB2aWRlb1xuIC0gYGRlc2NyaXB0aW9uYCAoc3RyaW5nKTogVGhlIGRlc2NyaXB0aW9uIG9mIHRoZSB2aWRlb1xuIC0gYGRpc3BsYXlfaWRgIChzdHJpbmcpOiBBbiBhbHRlcm5hdGl2ZSBpZGVudGlmaWVyIGZvciB0aGUgdmlkZW9cbiAtIGB1cGxvYWRlcmAgKHN0cmluZyk6IEZ1bGwgbmFtZSBvZiB0aGUgdmlkZW8gdXBsb2FkZXJcbiAtIGBsaWNlbnNlYCAoc3RyaW5nKTogTGljZW5zZSBuYW1lIHRoZSB2aWRlbyBpcyBsaWNlbnNlZCB1bmRlclxuIC0gYGNyZWF0b3JgIChzdHJpbmcpOiBUaGUgY3JlYXRvciBvZiB0aGUgdmlkZW9cbiAtIGB0aW1lc3RhbXBgIChudW1lcmljKTogVU5JWCB0aW1lc3RhbXAgb2YgdGhlIG1vbWVudCB0aGUgdmlkZW8gYmVjYW1lIGF2YWlsYWJsZVxuIC0gYHVwbG9hZF9kYXRlYCAoc3RyaW5nKTogVmlkZW8gdXBsb2FkIGRhdGUgaW4gVVRDIChZWVlZTU1ERClcbiAtIGByZWxlYXNlX3RpbWVzdGFtcGAgKG51bWVyaWMpOiBVTklYIHRpbWVzdGFtcCBvZiB0aGUgbW9tZW50IHRoZSB2aWRlbyB3YXMgcmVsZWFzZWRcbiAtIGByZWxlYXNlX2RhdGVgIChzdHJpbmcpOiBUaGUgZGF0ZSAoWVlZWU1NREQpIHdoZW4gdGhlIHZpZGVvIHdhcyByZWxlYXNlZCBpbiBVVENcbiAtIGBtb2RpZmllZF90aW1lc3RhbXBgIChudW1lcmljKTogVU5JWCB0aW1lc3RhbXAgb2YgdGhlIG1vbWVudCB0aGUgdmlkZW8gd2FzIGxhc3QgbW9kaWZpZWRcbiAtIGBtb2RpZmllZF9kYXRlYCAoc3RyaW5nKTogVGhlIGRhdGUgKFlZWVlNTUREKSB3aGVuIHRoZSB2aWRlbyB3YXMgbGFzdCBtb2RpZmllZCBpbiBVVENcbiAtIGB1cGxvYWRlcl9pZGAgKHN0cmluZyk6IE5pY2tuYW1lIG9yIGlkIG9mIHRoZSB2aWRlbyB1cGxvYWRlclxuIC0gYGNoYW5uZWxgIChzdHJpbmcpOiBGdWxsIG5hbWUgb2YgdGhlIGNoYW5uZWwgdGhlIHZpZGVvIGlzIHVwbG9hZGVkIG9uXG4gLSBgY2hhbm5lbF9pZGAgKHN0cmluZyk6IElkIG9mIHRoZSBjaGFubmVsXG4gLSBgY2hhbm5lbF9mb2xsb3dlcl9jb3VudGAgKG51bWVyaWMpOiBOdW1iZXIgb2YgZm9sbG93ZXJzIG9mIHRoZSBjaGFubmVsXG4gLSBgbG9jYXRpb25gIChzdHJpbmcpOiBQaHlzaWNhbCBsb2NhdGlvbiB3aGVyZSB0aGUgdmlkZW8gd2FzIGZpbG1lZFxuIC0gYGR1cmF0aW9uYCAobnVtZXJpYyk6IExlbmd0aCBvZiB0aGUgdmlkZW8gaW4gc2Vjb25kc1xuIC0gYGR1cmF0aW9uX3N0cmluZ2AgKHN0cmluZyk6IExlbmd0aCBvZiB0aGUgdmlkZW8gKEhIOm1tOnNzKVxuIC0gYHZpZXdfY291bnRgIChudW1lcmljKTogSG93IG1hbnkgdXNlcnMgaGF2ZSB3YXRjaGVkIHRoZSB2aWRlbyBvbiB0aGUgcGxhdGZvcm1cbiAtIGBjb25jdXJyZW50X3ZpZXdfY291bnRgIChudW1lcmljKTogSG93IG1hbnkgdXNlcnMgYXJlIGN1cnJlbnRseSB3YXRjaGluZyB0aGUgdmlkZW8gb24gdGhlIHBsYXRmb3JtLlxuIC0gYGxpa2VfY291bnRgIChudW1lcmljKTogTnVtYmVyIG9mIHBvc2l0aXZlIHJhdGluZ3Mgb2YgdGhlIHZpZGVvXG4gLSBgZGlzbGlrZV9jb3VudGAgKG51bWVyaWMpOiBOdW1iZXIgb2YgbmVnYXRpdmUgcmF0aW5ncyBvZiB0aGUgdmlkZW9cbiAtIGByZXBvc3RfY291bnRgIChudW1lcmljKTogTnVtYmVyIG9mIHJlcG9zdHMgb2YgdGhlIHZpZGVvXG4gLSBgYXZlcmFnZV9yYXRpbmdgIChudW1lcmljKTogQXZlcmFnZSByYXRpbmcgZ2l2ZSBieSB1c2VycywgdGhlIHNjYWxlIHVzZWQgZGVwZW5kcyBvbiB0aGUgd2VicGFnZVxuIC0gYGNvbW1lbnRfY291bnRgIChudW1lcmljKTogTnVtYmVyIG9mIGNvbW1lbnRzIG9uIHRoZSB2aWRlbyAoRm9yIHNvbWUgZXh0cmFjdG9ycywgY29tbWVudHMgYXJlIG9ubHkgZG93bmxvYWRlZCBhdCB0aGUgZW5kLCBhbmQgc28gdGhpcyBmaWVsZCBjYW5ub3QgYmUgdXNlZClcbiAtIGBhZ2VfbGltaXRgIChudW1lcmljKTogQWdlIHJlc3RyaWN0aW9uIGZvciB0aGUgdmlkZW8gKHllYXJzKVxuIC0gYGxpdmVfc3RhdHVzYCAoc3RyaW5nKTogT25lIG9mIFwibm90X2xpdmVcIiwgXCJpc19saXZlXCIsIFwiaXNfdXBjb21pbmdcIiwgXCJ3YXNfbGl2ZVwiLCBcInBvc3RfbGl2ZVwiICh3YXMgbGl2ZSwgYnV0IFZPRCBpcyBub3QgeWV0IHByb2Nlc3NlZClcbiAtIGBpc19saXZlYCAoYm9vbGVhbik6IFdoZXRoZXIgdGhpcyB2aWRlbyBpcyBhIGxpdmUgc3RyZWFtIG9yIGEgZml4ZWQtbGVuZ3RoIHZpZGVvXG4gLSBgd2FzX2xpdmVgIChib29sZWFuKTogV2hldGhlciB0aGlzIHZpZGVvIHdhcyBvcmlnaW5hbGx5IGEgbGl2ZSBzdHJlYW1cbiAtIGBwbGF5YWJsZV9pbl9lbWJlZGAgKHN0cmluZyk6IFdoZXRoZXIgdGhpcyB2aWRlbyBpcyBhbGxvd2VkIHRvIHBsYXkgaW4gZW1iZWRkZWQgcGxheWVycyBvbiBvdGhlciBzaXRlc1xuIC0gYGF2YWlsYWJpbGl0eWAgKHN0cmluZyk6IFdoZXRoZXIgdGhlIHZpZGVvIGlzIFwicHJpdmF0ZVwiLCBcInByZW1pdW1fb25seVwiLCBcInN1YnNjcmliZXJfb25seVwiLCBcIm5lZWRzX2F1dGhcIiwgXCJ1bmxpc3RlZFwiIG9yIFwicHVibGljXCJcbiAtIGBzdGFydF90aW1lYCAobnVtZXJpYyk6IFRpbWUgaW4gc2Vjb25kcyB3aGVyZSB0aGUgcmVwcm9kdWN0aW9uIHNob3VsZCBzdGFydCwgYXMgc3BlY2lmaWVkIGluIHRoZSBVUkxcbiAtIGBlbmRfdGltZWAgKG51bWVyaWMpOiBUaW1lIGluIHNlY29uZHMgd2hlcmUgdGhlIHJlcHJvZHVjdGlvbiBzaG91bGQgZW5kLCBhcyBzcGVjaWZpZWQgaW4gdGhlIFVSTFxuIC0gYGV4dHJhY3RvcmAgKHN0cmluZyk6IE5hbWUgb2YgdGhlIGV4dHJhY3RvclxuIC0gYGV4dHJhY3Rvcl9rZXlgIChzdHJpbmcpOiBLZXkgbmFtZSBvZiB0aGUgZXh0cmFjdG9yXG4gLSBgZXBvY2hgIChudW1lcmljKTogVW5peCBlcG9jaCBvZiB3aGVuIHRoZSBpbmZvcm1hdGlvbiBleHRyYWN0aW9uIHdhcyBjb21wbGV0ZWRcbiAtIGBhdXRvbnVtYmVyYCAobnVtZXJpYyk6IE51bWJlciB0aGF0IHdpbGwgYmUgaW5jcmVhc2VkIHdpdGggZWFjaCBkb3dubG9hZCwgc3RhcnRpbmcgYXQgYC0tYXV0b251bWJlci1zdGFydGBcbiAtIGB2aWRlb19hdXRvbnVtYmVyYCAobnVtZXJpYyk6IE51bWJlciB0aGF0IHdpbGwgYmUgaW5jcmVhc2VkIHdpdGggZWFjaCB2aWRlb1xuIC0gYG5fZW50cmllc2AgKG51bWVyaWMpOiBUb3RhbCBudW1iZXIgb2YgZXh0cmFjdGVkIGl0ZW1zIGluIHRoZSBwbGF5bGlzdFxuIC0gYHBsYXlsaXN0X2lkYCAoc3RyaW5nKTogSWRlbnRpZmllciBvZiB0aGUgcGxheWxpc3QgdGhhdCBjb250YWlucyB0aGUgdmlkZW9cbiAtIGBwbGF5bGlzdF90aXRsZWAgKHN0cmluZyk6IE5hbWUgb2YgdGhlIHBsYXlsaXN0IHRoYXQgY29udGFpbnMgdGhlIHZpZGVvXG4gLSBgcGxheWxpc3RgIChzdHJpbmcpOiBgcGxheWxpc3RfaWRgIG9yIGBwbGF5bGlzdF90aXRsZWBcbiAtIGBwbGF5bGlzdF9jb3VudGAgKG51bWVyaWMpOiBUb3RhbCBudW1iZXIgb2YgaXRlbXMgaW4gdGhlIHBsYXlsaXN0LiBNYXkgbm90IGJlIGtub3duIGlmIGVudGlyZSBwbGF5bGlzdCBpcyBub3QgZXh0cmFjdGVkXG4gLSBgcGxheWxpc3RfaW5kZXhgIChudW1lcmljKTogSW5kZXggb2YgdGhlIHZpZGVvIGluIHRoZSBwbGF5bGlzdCBwYWRkZWQgd2l0aCBsZWFkaW5nIHplcm9zIGFjY29yZGluZyB0aGUgZmluYWwgaW5kZXhcbiAtIGBwbGF5bGlzdF9hdXRvbnVtYmVyYCAobnVtZXJpYyk6IFBvc2l0aW9uIG9mIHRoZSB2aWRlbyBpbiB0aGUgcGxheWxpc3QgZG93bmxvYWQgcXVldWUgcGFkZGVkIHdpdGggbGVhZGluZyB6ZXJvcyBhY2NvcmRpbmcgdG8gdGhlIHRvdGFsIGxlbmd0aCBvZiB0aGUgcGxheWxpc3RcbiAtIGBwbGF5bGlzdF91cGxvYWRlcmAgKHN0cmluZyk6IEZ1bGwgbmFtZSBvZiB0aGUgcGxheWxpc3QgdXBsb2FkZXJcbiAtIGBwbGF5bGlzdF91cGxvYWRlcl9pZGAgKHN0cmluZyk6IE5pY2tuYW1lIG9yIGlkIG9mIHRoZSBwbGF5bGlzdCB1cGxvYWRlclxuIC0gYHdlYnBhZ2VfdXJsYCAoc3RyaW5nKTogQSBVUkwgdG8gdGhlIHZpZGVvIHdlYnBhZ2Ugd2hpY2ggaWYgZ2l2ZW4gdG8geXQtZGxwIHNob3VsZCBhbGxvdyB0byBnZXQgdGhlIHNhbWUgcmVzdWx0IGFnYWluXG4gLSBgd2VicGFnZV91cmxfYmFzZW5hbWVgIChzdHJpbmcpOiBUaGUgYmFzZW5hbWUgb2YgdGhlIHdlYnBhZ2UgVVJMXG4gLSBgd2VicGFnZV91cmxfZG9tYWluYCAoc3RyaW5nKTogVGhlIGRvbWFpbiBvZiB0aGUgd2VicGFnZSBVUkxcbiAtIGBvcmlnaW5hbF91cmxgIChzdHJpbmcpOiBUaGUgVVJMIGdpdmVuIGJ5IHRoZSB1c2VyIChvciBzYW1lIGFzIGB3ZWJwYWdlX3VybGAgZm9yIHBsYXlsaXN0IGVudHJpZXMpXG4gXG5BbGwgdGhlIGZpZWxkcyBpbiBbRmlsdGVyaW5nIEZvcm1hdHNdKCNmaWx0ZXJpbmctZm9ybWF0cykgY2FuIGFsc28gYmUgdXNlZFxuXG5BdmFpbGFibGUgZm9yIHRoZSB2aWRlbyB0aGF0IGJlbG9uZ3MgdG8gc29tZSBsb2dpY2FsIGNoYXB0ZXIgb3Igc2VjdGlvbjpcblxuIC0gYGNoYXB0ZXJgIChzdHJpbmcpOiBOYW1lIG9yIHRpdGxlIG9mIHRoZSBjaGFwdGVyIHRoZSB2aWRlbyBiZWxvbmdzIHRvXG4gLSBgY2hhcHRlcl9udW1iZXJgIChudW1lcmljKTogTnVtYmVyIG9mIHRoZSBjaGFwdGVyIHRoZSB2aWRlbyBiZWxvbmdzIHRvXG4gLSBgY2hhcHRlcl9pZGAgKHN0cmluZyk6IElkIG9mIHRoZSBjaGFwdGVyIHRoZSB2aWRlbyBiZWxvbmdzIHRvXG5cbkF2YWlsYWJsZSBmb3IgdGhlIHZpZGVvIHRoYXQgaXMgYW4gZXBpc29kZSBvZiBzb21lIHNlcmllcyBvciBwcm9ncmFtbWU6XG5cbiAtIGBzZXJpZXNgIChzdHJpbmcpOiBUaXRsZSBvZiB0aGUgc2VyaWVzIG9yIHByb2dyYW1tZSB0aGUgdmlkZW8gZXBpc29kZSBiZWxvbmdzIHRvXG4gLSBgc2Vhc29uYCAoc3RyaW5nKTogVGl0bGUgb2YgdGhlIHNlYXNvbiB0aGUgdmlkZW8gZXBpc29kZSBiZWxvbmdzIHRvXG4gLSBgc2Vhc29uX251bWJlcmAgKG51bWVyaWMpOiBOdW1iZXIgb2YgdGhlIHNlYXNvbiB0aGUgdmlkZW8gZXBpc29kZSBiZWxvbmdzIHRvXG4gLSBgc2Vhc29uX2lkYCAoc3RyaW5nKTogSWQgb2YgdGhlIHNlYXNvbiB0aGUgdmlkZW8gZXBpc29kZSBiZWxvbmdzIHRvXG4gLSBgZXBpc29kZWAgKHN0cmluZyk6IFRpdGxlIG9mIHRoZSB2aWRlbyBlcGlzb2RlXG4gLSBgZXBpc29kZV9udW1iZXJgIChudW1lcmljKTogTnVtYmVyIG9mIHRoZSB2aWRlbyBlcGlzb2RlIHdpdGhpbiBhIHNlYXNvblxuIC0gYGVwaXNvZGVfaWRgIChzdHJpbmcpOiBJZCBvZiB0aGUgdmlkZW8gZXBpc29kZVxuXG5BdmFpbGFibGUgZm9yIHRoZSBtZWRpYSB0aGF0IGlzIGEgdHJhY2sgb3IgYSBwYXJ0IG9mIGEgbXVzaWMgYWxidW06XG5cbiAtIGB0cmFja2AgKHN0cmluZyk6IFRpdGxlIG9mIHRoZSB0cmFja1xuIC0gYHRyYWNrX251bWJlcmAgKG51bWVyaWMpOiBOdW1iZXIgb2YgdGhlIHRyYWNrIHdpdGhpbiBhbiBhbGJ1bSBvciBhIGRpc2NcbiAtIGB0cmFja19pZGAgKHN0cmluZyk6IElkIG9mIHRoZSB0cmFja1xuIC0gYGFydGlzdGAgKHN0cmluZyk6IEFydGlzdChzKSBvZiB0aGUgdHJhY2tcbiAtIGBnZW5yZWAgKHN0cmluZyk6IEdlbnJlKHMpIG9mIHRoZSB0cmFja1xuIC0gYGFsYnVtYCAoc3RyaW5nKTogVGl0bGUgb2YgdGhlIGFsYnVtIHRoZSB0cmFjayBiZWxvbmdzIHRvXG4gLSBgYWxidW1fdHlwZWAgKHN0cmluZyk6IFR5cGUgb2YgdGhlIGFsYnVtXG4gLSBgYWxidW1fYXJ0aXN0YCAoc3RyaW5nKTogTGlzdCBvZiBhbGwgYXJ0aXN0cyBhcHBlYXJlZCBvbiB0aGUgYWxidW1cbiAtIGBkaXNjX251bWJlcmAgKG51bWVyaWMpOiBOdW1iZXIgb2YgdGhlIGRpc2Mgb3Igb3RoZXIgcGh5c2ljYWwgbWVkaXVtIHRoZSB0cmFjayBiZWxvbmdzIHRvXG4gLSBgcmVsZWFzZV95ZWFyYCAobnVtZXJpYyk6IFllYXIgKFlZWVkpIHdoZW4gdGhlIGFsYnVtIHdhcyByZWxlYXNlZFxuXG5BdmFpbGFibGUgb25seSB3aGVuIHVzaW5nIGAtLWRvd25sb2FkLXNlY3Rpb25zYCBhbmQgZm9yIGBjaGFwdGVyOmAgcHJlZml4IHdoZW4gdXNpbmcgYC0tc3BsaXQtY2hhcHRlcnNgIGZvciB2aWRlb3Mgd2l0aCBpbnRlcm5hbCBjaGFwdGVyczpcblxuIC0gYHNlY3Rpb25fdGl0bGVgIChzdHJpbmcpOiBUaXRsZSBvZiB0aGUgY2hhcHRlclxuIC0gYHNlY3Rpb25fbnVtYmVyYCAobnVtZXJpYyk6IE51bWJlciBvZiB0aGUgY2hhcHRlciB3aXRoaW4gdGhlIGZpbGVcbiAtIGBzZWN0aW9uX3N0YXJ0YCAobnVtZXJpYyk6IFN0YXJ0IHRpbWUgb2YgdGhlIGNoYXB0ZXIgaW4gc2Vjb25kc1xuIC0gYHNlY3Rpb25fZW5kYCAobnVtZXJpYyk6IEVuZCB0aW1lIG9mIHRoZSBjaGFwdGVyIGluIHNlY29uZHNcblxuQXZhaWxhYmxlIG9ubHkgd2hlbiB1c2VkIGluIGAtLXByaW50YDpcblxuIC0gYHVybHNgIChzdHJpbmcpOiBUaGUgVVJMcyBvZiBhbGwgcmVxdWVzdGVkIGZvcm1hdHMsIG9uZSBpbiBlYWNoIGxpbmVcbiAtIGBmaWxlbmFtZWAgKHN0cmluZyk6IE5hbWUgb2YgdGhlIHZpZGVvIGZpbGUuIE5vdGUgdGhhdCB0aGUgW2FjdHVhbCBmaWxlbmFtZSBtYXkgZGlmZmVyXSgjb3V0dG1wbC1wb3N0cHJvY2Vzcy1ub3RlKVxuIC0gYGZvcm1hdHNfdGFibGVgICh0YWJsZSk6IFRoZSB2aWRlbyBmb3JtYXQgdGFibGUgYXMgcHJpbnRlZCBieSBgLS1saXN0LWZvcm1hdHNgXG4gLSBgdGh1bWJuYWlsc190YWJsZWAgKHRhYmxlKTogVGhlIHRodW1ibmFpbCBmb3JtYXQgdGFibGUgYXMgcHJpbnRlZCBieSBgLS1saXN0LXRodW1ibmFpbHNgXG4gLSBgc3VidGl0bGVzX3RhYmxlYCAodGFibGUpOiBUaGUgc3VidGl0bGUgZm9ybWF0IHRhYmxlIGFzIHByaW50ZWQgYnkgYC0tbGlzdC1zdWJzYFxuIC0gYGF1dG9tYXRpY19jYXB0aW9uc190YWJsZWAgKHRhYmxlKTogVGhlIGF1dG9tYXRpYyBzdWJ0aXRsZSBmb3JtYXQgdGFibGUgYXMgcHJpbnRlZCBieSBgLS1saXN0LXN1YnNgXG4gXG4gXG5BdmFpbGFibGUgb25seSBpbiBgLS1zcG9uc29yYmxvY2stY2hhcHRlci10aXRsZWA6XG5cbiAtIGBzdGFydF90aW1lYCAobnVtZXJpYyk6IFN0YXJ0IHRpbWUgb2YgdGhlIGNoYXB0ZXIgaW4gc2Vjb25kc1xuIC0gYGVuZF90aW1lYCAobnVtZXJpYyk6IEVuZCB0aW1lIG9mIHRoZSBjaGFwdGVyIGluIHNlY29uZHNcbiAtIGBjYXRlZ29yaWVzYCAobGlzdCk6IFRoZSBbU3BvbnNvckJsb2NrIGNhdGVnb3JpZXNdKGh0dHBzOi8vd2lraS5zcG9uc29yLmFqYXkuYXBwL3cvVHlwZXMjQ2F0ZWdvcnkpIHRoZSBjaGFwdGVyIGJlbG9uZ3MgdG9cbiAtIGBjYXRlZ29yeWAgKHN0cmluZyk6IFRoZSBzbWFsbGVzdCBTcG9uc29yQmxvY2sgY2F0ZWdvcnkgdGhlIGNoYXB0ZXIgYmVsb25ncyB0b1xuIC0gYGNhdGVnb3J5X25hbWVzYCAobGlzdCk6IEZyaWVuZGx5IG5hbWVzIG9mIHRoZSBjYXRlZ29yaWVzXG4gLSBgbmFtZWAgKHN0cmluZyk6IEZyaWVuZGx5IG5hbWUgb2YgdGhlIHNtYWxsZXN0IGNhdGVnb3J5XG4gLSBgdHlwZWAgKHN0cmluZyk6IFRoZSBbU3BvbnNvckJsb2NrIGFjdGlvbiB0eXBlXShodHRwczovL3dpa2kuc3BvbnNvci5hamF5LmFwcC93L1R5cGVzI0FjdGlvbl9UeXBlKSBvZiB0aGUgY2hhcHRlclxuXG5FYWNoIGFmb3JlbWVudGlvbmVkIHNlcXVlbmNlIHdoZW4gcmVmZXJlbmNlZCBpbiBhbiBvdXRwdXQgdGVtcGxhdGUgd2lsbCBiZSByZXBsYWNlZCBieSB0aGUgYWN0dWFsIHZhbHVlIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHNlcXVlbmNlIG5hbWUuIEUuZy4gZm9yIGAtbyAlKHRpdGxlKXMtJShpZClzLiUoZXh0KXNgIGFuZCBhbiBtcDQgdmlkZW8gd2l0aCB0aXRsZSBgeXQtZGxwIHRlc3QgdmlkZW9gIGFuZCBpZCBgQmFXX2plbm96S2NgLCB0aGlzIHdpbGwgcmVzdWx0IGluIGEgYHl0LWRscCB0ZXN0IHZpZGVvLUJhV19qZW5vektjLm1wNGAgZmlsZSBjcmVhdGVkIGluIHRoZSBjdXJyZW50IGRpcmVjdG9yeS5cblxuKipOb3RlKio6IFNvbWUgb2YgdGhlIHNlcXVlbmNlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcHJlc2VudCBzaW5jZSB0aGV5IGRlcGVuZCBvbiB0aGUgbWV0YWRhdGEgb2J0YWluZWQgYnkgYSBwYXJ0aWN1bGFyIGV4dHJhY3Rvci4gU3VjaCBzZXF1ZW5jZXMgd2lsbCBiZSByZXBsYWNlZCB3aXRoIHBsYWNlaG9sZGVyIHZhbHVlIHByb3ZpZGVkIHdpdGggYC0tb3V0cHV0LW5hLXBsYWNlaG9sZGVyYCAoYE5BYCBieSBkZWZhdWx0KS5cblxuKipUaXAqKjogTG9vayBhdCB0aGUgYC1qYCBvdXRwdXQgdG8gaWRlbnRpZnkgd2hpY2ggZmllbGRzIGFyZSBhdmFpbGFibGUgZm9yIHRoZSBwYXJ0aWN1bGFyIFVSTFxuXG5Gb3IgbnVtZXJpYyBzZXF1ZW5jZXMgeW91IGNhbiB1c2UgW251bWVyaWMgcmVsYXRlZCBmb3JtYXR0aW5nXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvc3RkdHlwZXMuaHRtbCNwcmludGYtc3R5bGUtc3RyaW5nLWZvcm1hdHRpbmcpOyBlLmcuIGAlKHZpZXdfY291bnQpMDVkYCB3aWxsIHJlc3VsdCBpbiBhIHN0cmluZyB3aXRoIHZpZXcgY291bnQgcGFkZGVkIHdpdGggemVyb3MgdXAgdG8gNSBjaGFyYWN0ZXJzLCBsaWtlIGluIGAwMDA0MmAuXG5cbk91dHB1dCB0ZW1wbGF0ZXMgY2FuIGFsc28gY29udGFpbiBhcmJpdHJhcnkgaGllcmFyY2hpY2FsIHBhdGgsIGUuZy4gYC1vIFwiJShwbGF5bGlzdClzLyUocGxheWxpc3RfaW5kZXgpcyAtICUodGl0bGUpcy4lKGV4dClzXCJgIHdoaWNoIHdpbGwgcmVzdWx0IGluIGRvd25sb2FkaW5nIGVhY2ggdmlkZW8gaW4gYSBkaXJlY3RvcnkgY29ycmVzcG9uZGluZyB0byB0aGlzIHBhdGggdGVtcGxhdGUuIEFueSBtaXNzaW5nIGRpcmVjdG9yeSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBmb3IgeW91LlxuXG5UbyB1c2UgcGVyY2VudCBsaXRlcmFscyBpbiBhbiBvdXRwdXQgdGVtcGxhdGUgdXNlIGAlJWAuIFRvIG91dHB1dCB0byBzdGRvdXQgdXNlIGAtbyAtYC5cblxuVGhlIGN1cnJlbnQgZGVmYXVsdCB0ZW1wbGF0ZSBpcyBgJSh0aXRsZSlzIFslKGlkKXNdLiUoZXh0KXNgLlxuXG5JbiBzb21lIGNhc2VzLCB5b3UgZG9uJ3Qgd2FudCBzcGVjaWFsIGNoYXJhY3RlcnMgc3VjaCBhcyDkuK0sIHNwYWNlcywgb3IgJiwgc3VjaCBhcyB3aGVuIHRyYW5zZmVycmluZyB0aGUgZG93bmxvYWRlZCBmaWxlbmFtZSB0byBhIFdpbmRvd3Mgc3lzdGVtIG9yIHRoZSBmaWxlbmFtZSB0aHJvdWdoIGFuIDhiaXQtdW5zYWZlIGNoYW5uZWwuIEluIHRoZXNlIGNhc2VzLCBhZGQgdGhlIGAtLXJlc3RyaWN0LWZpbGVuYW1lc2AgZmxhZyB0byBnZXQgYSBzaG9ydGVyIHRpdGxlLlxuXG4jIyMjIE91dHB1dCB0ZW1wbGF0ZSBleGFtcGxlc1xuXG5gYGBiYXNoXG4kIHl0LWRscCAtLXByaW50IGZpbGVuYW1lIC1vIFwidGVzdCB2aWRlby4lKGV4dClzXCIgQmFXX2plbm96S2NcbnRlc3QgdmlkZW8ud2VibSAgICAjIExpdGVyYWwgbmFtZSB3aXRoIGNvcnJlY3QgZXh0ZW5zaW9uXG5cbiQgeXQtZGxwIC0tcHJpbnQgZmlsZW5hbWUgLW8gXCIlKHRpdGxlKXMuJShleHQpc1wiIEJhV19qZW5vektjXG55b3V0dWJlLWRsIHRlc3QgdmlkZW8gJydfw6Tihq3wnZWQLndlYm0gICAgIyBBbGwga2luZHMgb2Ygd2VpcmQgY2hhcmFjdGVyc1xuXG4kIHl0LWRscCAtLXByaW50IGZpbGVuYW1lIC1vIFwiJSh0aXRsZSlzLiUoZXh0KXNcIiBCYVdfamVub3pLYyAtLXJlc3RyaWN0LWZpbGVuYW1lc1xueW91dHViZS1kbF90ZXN0X3ZpZGVvXy53ZWJtICAgICMgUmVzdHJpY3RlZCBmaWxlIG5hbWVcblxuIyBEb3dubG9hZCBZb3VUdWJlIHBsYXlsaXN0IHZpZGVvcyBpbiBzZXBhcmF0ZSBkaXJlY3RvcnkgaW5kZXhlZCBieSB2aWRlbyBvcmRlciBpbiBhIHBsYXlsaXN0XG4kIHl0LWRscCAtbyBcIiUocGxheWxpc3Qpcy8lKHBsYXlsaXN0X2luZGV4KXMgLSAlKHRpdGxlKXMuJShleHQpc1wiIFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vcGxheWxpc3Q/bGlzdD1QTHdpeXgxZGMzUDJKUjlOOGdRYVFOX0JDdmxTbGFwN3JlXCJcblxuIyBEb3dubG9hZCBZb3VUdWJlIHBsYXlsaXN0IHZpZGVvcyBpbiBzZXBhcmF0ZSBkaXJlY3RvcmllcyBhY2NvcmRpbmcgdG8gdGhlaXIgdXBsb2FkZWQgeWVhclxuJCB5dC1kbHAgLW8gXCIlKHVwbG9hZF9kYXRlPiVZKXMvJSh0aXRsZSlzLiUoZXh0KXNcIiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXlsaXN0P2xpc3Q9UEx3aXl4MWRjM1AySlI5TjhnUWFRTl9CQ3ZsU2xhcDdyZVwiXG5cbiMgUHJlZml4IHBsYXlsaXN0IGluZGV4IHdpdGggXCIgLSBcIiBzZXBhcmF0b3IsIGJ1dCBvbmx5IGlmIGl0IGlzIGF2YWlsYWJsZVxuJCB5dC1kbHAgLW8gJyUocGxheWxpc3RfaW5kZXh8KXMlKHBsYXlsaXN0X2luZGV4JiAtIHwpcyUodGl0bGUpcy4lKGV4dClzJyBCYVdfamVub3pLYyBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvVGhlTGludXhGb3VuZGF0aW9uL3BsYXlsaXN0c1wiXG5cbiMgRG93bmxvYWQgYWxsIHBsYXlsaXN0cyBvZiBZb3VUdWJlIGNoYW5uZWwvdXNlciBrZWVwaW5nIGVhY2ggcGxheWxpc3QgaW4gc2VwYXJhdGUgZGlyZWN0b3J5OlxuJCB5dC1kbHAgLW8gXCIlKHVwbG9hZGVyKXMvJShwbGF5bGlzdClzLyUocGxheWxpc3RfaW5kZXgpcyAtICUodGl0bGUpcy4lKGV4dClzXCIgXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL1RoZUxpbnV4Rm91bmRhdGlvbi9wbGF5bGlzdHNcIlxuXG4jIERvd25sb2FkIFVkZW15IGNvdXJzZSBrZWVwaW5nIGVhY2ggY2hhcHRlciBpbiBzZXBhcmF0ZSBkaXJlY3RvcnkgdW5kZXIgTXlWaWRlb3MgZGlyZWN0b3J5IGluIHlvdXIgaG9tZVxuJCB5dC1kbHAgLXUgdXNlciAtcCBwYXNzd29yZCAtUCBcIn4vTXlWaWRlb3NcIiAtbyBcIiUocGxheWxpc3Qpcy8lKGNoYXB0ZXJfbnVtYmVyKXMgLSAlKGNoYXB0ZXIpcy8lKHRpdGxlKXMuJShleHQpc1wiIFwiaHR0cHM6Ly93d3cudWRlbXkuY29tL2phdmEtdHV0b3JpYWxcIlxuXG4jIERvd25sb2FkIGVudGlyZSBzZXJpZXMgc2Vhc29uIGtlZXBpbmcgZWFjaCBzZXJpZXMgYW5kIGVhY2ggc2Vhc29uIGluIHNlcGFyYXRlIGRpcmVjdG9yeSB1bmRlciBDOi9NeVZpZGVvc1xuJCB5dC1kbHAgLVAgXCJDOi9NeVZpZGVvc1wiIC1vIFwiJShzZXJpZXMpcy8lKHNlYXNvbl9udW1iZXIpcyAtICUoc2Vhc29uKXMvJShlcGlzb2RlX251bWJlcilzIC0gJShlcGlzb2RlKXMuJShleHQpc1wiIFwiaHR0cHM6Ly92aWRlb21vcmUucnUva2lub192X2RldGFsYXlhaC81X3Nlem9uLzM2NzYxN1wiXG5cbiMgRG93bmxvYWQgdmlkZW8gYXMgXCJDOlxcTXlWaWRlb3NcXHVwbG9hZGVyXFx0aXRsZS5leHRcIiwgc3VidGl0bGVzIGFzIFwiQzpcXE15VmlkZW9zXFxzdWJzXFx1cGxvYWRlclxcdGl0bGUuZXh0XCJcbiMgYW5kIHB1dCBhbGwgdGVtcG9yYXJ5IGZpbGVzIGluIFwiQzpcXE15VmlkZW9zXFx0bXBcIlxuJCB5dC1kbHAgLVAgXCJDOi9NeVZpZGVvc1wiIC1QIFwidGVtcDp0bXBcIiAtUCBcInN1YnRpdGxlOnN1YnNcIiAtbyBcIiUodXBsb2FkZXIpcy8lKHRpdGxlKXMuJShleHQpc1wiIEJhV19qZW5veiAtLXdyaXRlLXN1YnNcblxuIyBEb3dubG9hZCB2aWRlbyBhcyBcIkM6XFxNeVZpZGVvc1xcdXBsb2FkZXJcXHRpdGxlLmV4dFwiIGFuZCBzdWJ0aXRsZXMgYXMgXCJDOlxcTXlWaWRlb3NcXHVwbG9hZGVyXFxzdWJzXFx0aXRsZS5leHRcIlxuJCB5dC1kbHAgLVAgXCJDOi9NeVZpZGVvc1wiIC1vIFwiJSh1cGxvYWRlcilzLyUodGl0bGUpcy4lKGV4dClzXCIgLW8gXCJzdWJ0aXRsZTolKHVwbG9hZGVyKXMvc3Vicy8lKHRpdGxlKXMuJShleHQpc1wiIEJhV19qZW5vektjIC0td3JpdGUtc3Vic1xuXG4jIFN0cmVhbSB0aGUgdmlkZW8gYmVpbmcgZG93bmxvYWRlZCB0byBzdGRvdXRcbiQgeXQtZGxwIC1vIC0gQmFXX2plbm96S2NcbmBgYFxuXG4jIEZPUk1BVCBTRUxFQ1RJT05cblxuQnkgZGVmYXVsdCwgeXQtZGxwIHRyaWVzIHRvIGRvd25sb2FkIHRoZSBiZXN0IGF2YWlsYWJsZSBxdWFsaXR5IGlmIHlvdSAqKmRvbid0KiogcGFzcyBhbnkgb3B0aW9ucy5cblRoaXMgaXMgZ2VuZXJhbGx5IGVxdWl2YWxlbnQgdG8gdXNpbmcgYC1mIGJlc3R2aWRlbyorYmVzdGF1ZGlvL2Jlc3RgLiBIb3dldmVyLCBpZiBtdWx0aXBsZSBhdWRpb3N0cmVhbXMgaXMgZW5hYmxlZCAoYC0tYXVkaW8tbXVsdGlzdHJlYW1zYCksIHRoZSBkZWZhdWx0IGZvcm1hdCBjaGFuZ2VzIHRvIGAtZiBiZXN0dmlkZW8rYmVzdGF1ZGlvL2Jlc3RgLiBTaW1pbGFybHksIGlmIGZmbXBlZyBpcyB1bmF2YWlsYWJsZSwgb3IgaWYgeW91IHVzZSB5dC1kbHAgdG8gc3RyZWFtIHRvIGBzdGRvdXRgIChgLW8gLWApLCB0aGUgZGVmYXVsdCBiZWNvbWVzIGAtZiBiZXN0L2Jlc3R2aWRlbytiZXN0YXVkaW9gLlxuXG4qKkRlcHJlY2F0aW9uIHdhcm5pbmcqKjogTGF0ZXN0IHZlcnNpb25zIG9mIHl0LWRscCBjYW4gc3RyZWFtIG11bHRpcGxlIGZvcm1hdHMgdG8gdGhlIHN0ZG91dCBzaW11bHRhbmVvdXNseSB1c2luZyBmZm1wZWcuIFNvLCBpbiBmdXR1cmUgdmVyc2lvbnMsIHRoZSBkZWZhdWx0IGZvciB0aGlzIHdpbGwgYmUgc2V0IHRvIGAtZiBidiorYmEvYmAgc2ltaWxhciB0byBub3JtYWwgZG93bmxvYWRzLiBJZiB5b3Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgYC1mIGIvYnYrYmFgIHNldHRpbmcsIGl0IGlzIHJlY29tbWVuZGVkIHRvIGV4cGxpY2l0bHkgc3BlY2lmeSBpdCBpbiB0aGUgY29uZmlndXJhdGlvbiBvcHRpb25zLlxuXG5UaGUgZ2VuZXJhbCBzeW50YXggZm9yIGZvcm1hdCBzZWxlY3Rpb24gaXMgYC1mIEZPUk1BVGAgKG9yIGAtLWZvcm1hdCBGT1JNQVRgKSB3aGVyZSBgRk9STUFUYCBpcyBhICpzZWxlY3RvciBleHByZXNzaW9uKiwgaS5lLiBhbiBleHByZXNzaW9uIHRoYXQgZGVzY3JpYmVzIGZvcm1hdCBvciBmb3JtYXRzIHlvdSB3b3VsZCBsaWtlIHRvIGRvd25sb2FkLlxuXG48IS0tIE1BTlBBR0U6IEJFR0lOIEVYQ0xVREVEIFNFQ1RJT04gLS0+XG4qKnRsO2RyOioqIFtuYXZpZ2F0ZSBtZSB0byBleGFtcGxlc10oI2Zvcm1hdC1zZWxlY3Rpb24tZXhhbXBsZXMpLlxuPCEtLSBNQU5QQUdFOiBFTkQgRVhDTFVERUQgU0VDVElPTiAtLT5cblxuVGhlIHNpbXBsZXN0IGNhc2UgaXMgcmVxdWVzdGluZyBhIHNwZWNpZmljIGZvcm1hdDsgZS5nLiB3aXRoIGAtZiAyMmAgeW91IGNhbiBkb3dubG9hZCB0aGUgZm9ybWF0IHdpdGggZm9ybWF0IGNvZGUgZXF1YWwgdG8gMjIuIFlvdSBjYW4gZ2V0IHRoZSBsaXN0IG9mIGF2YWlsYWJsZSBmb3JtYXQgY29kZXMgZm9yIHBhcnRpY3VsYXIgdmlkZW8gdXNpbmcgYC0tbGlzdC1mb3JtYXRzYCBvciBgLUZgLiBOb3RlIHRoYXQgdGhlc2UgZm9ybWF0IGNvZGVzIGFyZSBleHRyYWN0b3Igc3BlY2lmaWMuXG5cbllvdSBjYW4gYWxzbyB1c2UgYSBmaWxlIGV4dGVuc2lvbiAoY3VycmVudGx5IGAzZ3BgLCBgYWFjYCwgYGZsdmAsIGBtNGFgLCBgbXAzYCwgYG1wNGAsIGBvZ2dgLCBgd2F2YCwgYHdlYm1gIGFyZSBzdXBwb3J0ZWQpIHRvIGRvd25sb2FkIHRoZSBiZXN0IHF1YWxpdHkgZm9ybWF0IG9mIGEgcGFydGljdWxhciBmaWxlIGV4dGVuc2lvbiBzZXJ2ZWQgYXMgYSBzaW5nbGUgZmlsZSwgZS5nLiBgLWYgd2VibWAgd2lsbCBkb3dubG9hZCB0aGUgYmVzdCBxdWFsaXR5IGZvcm1hdCB3aXRoIHRoZSBgd2VibWAgZXh0ZW5zaW9uIHNlcnZlZCBhcyBhIHNpbmdsZSBmaWxlLlxuXG5Zb3UgY2FuIHVzZSBgLWYgLWAgdG8gaW50ZXJhY3RpdmVseSBwcm92aWRlIHRoZSBmb3JtYXQgc2VsZWN0b3IgKmZvciBlYWNoIHZpZGVvKlxuXG5Zb3UgY2FuIGFsc28gdXNlIHNwZWNpYWwgbmFtZXMgdG8gc2VsZWN0IHBhcnRpY3VsYXIgZWRnZSBjYXNlIGZvcm1hdHM6XG5cbiAtIGBhbGxgOiBTZWxlY3QgKiphbGwgZm9ybWF0cyoqIHNlcGFyYXRlbHlcbiAtIGBtZXJnZWFsbGA6IFNlbGVjdCBhbmQgKiptZXJnZSBhbGwgZm9ybWF0cyoqIChNdXN0IGJlIHVzZWQgd2l0aCBgLS1hdWRpby1tdWx0aXN0cmVhbXNgLCBgLS12aWRlby1tdWx0aXN0cmVhbXNgIG9yIGJvdGgpXG4gLSBgYipgLCBgYmVzdCpgOiBTZWxlY3QgdGhlIGJlc3QgcXVhbGl0eSBmb3JtYXQgdGhhdCAqKmNvbnRhaW5zIGVpdGhlcioqIGEgdmlkZW8gb3IgYW4gYXVkaW8gb3IgYm90aCAoaWU7IGB2Y29kZWMhPW5vbmUgb3IgYWNvZGVjIT1ub25lYClcbiAtIGBiYCwgYGJlc3RgOiBTZWxlY3QgdGhlIGJlc3QgcXVhbGl0eSBmb3JtYXQgdGhhdCAqKmNvbnRhaW5zIGJvdGgqKiB2aWRlbyBhbmQgYXVkaW8uIEVxdWl2YWxlbnQgdG8gYGJlc3QqW3Zjb2RlYyE9bm9uZV1bYWNvZGVjIT1ub25lXWBcbiAtIGBidmAsIGBiZXN0dmlkZW9gOiBTZWxlY3QgdGhlIGJlc3QgcXVhbGl0eSAqKnZpZGVvLW9ubHkqKiBmb3JtYXQuIEVxdWl2YWxlbnQgdG8gYGJlc3QqW2Fjb2RlYz1ub25lXWBcbiAtIGBidipgLCBgYmVzdHZpZGVvKmA6IFNlbGVjdCB0aGUgYmVzdCBxdWFsaXR5IGZvcm1hdCB0aGF0ICoqY29udGFpbnMgdmlkZW8qKi4gSXQgbWF5IGFsc28gY29udGFpbiBhdWRpby4gRXF1aXZhbGVudCB0byBgYmVzdCpbdmNvZGVjIT1ub25lXWBcbiAtIGBiYWAsIGBiZXN0YXVkaW9gOiBTZWxlY3QgdGhlIGJlc3QgcXVhbGl0eSAqKmF1ZGlvLW9ubHkqKiBmb3JtYXQuIEVxdWl2YWxlbnQgdG8gYGJlc3QqW3Zjb2RlYz1ub25lXWBcbiAtIGBiYSpgLCBgYmVzdGF1ZGlvKmA6IFNlbGVjdCB0aGUgYmVzdCBxdWFsaXR5IGZvcm1hdCB0aGF0ICoqY29udGFpbnMgYXVkaW8qKi4gSXQgbWF5IGFsc28gY29udGFpbiB2aWRlby4gRXF1aXZhbGVudCB0byBgYmVzdCpbYWNvZGVjIT1ub25lXWAgKFtEbyBub3QgdXNlIV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvaXNzdWVzLzk3OSNpc3N1ZWNvbW1lbnQtOTE5NjI5MzU0KSlcbiAtIGB3KmAsIGB3b3JzdCpgOiBTZWxlY3QgdGhlIHdvcnN0IHF1YWxpdHkgZm9ybWF0IHRoYXQgY29udGFpbnMgZWl0aGVyIGEgdmlkZW8gb3IgYW4gYXVkaW9cbiAtIGB3YCwgYHdvcnN0YDogU2VsZWN0IHRoZSB3b3JzdCBxdWFsaXR5IGZvcm1hdCB0aGF0IGNvbnRhaW5zIGJvdGggdmlkZW8gYW5kIGF1ZGlvLiBFcXVpdmFsZW50IHRvIGB3b3JzdCpbdmNvZGVjIT1ub25lXVthY29kZWMhPW5vbmVdYFxuIC0gYHd2YCwgYHdvcnN0dmlkZW9gOiBTZWxlY3QgdGhlIHdvcnN0IHF1YWxpdHkgdmlkZW8tb25seSBmb3JtYXQuIEVxdWl2YWxlbnQgdG8gYHdvcnN0KlthY29kZWM9bm9uZV1gXG4gLSBgd3YqYCwgYHdvcnN0dmlkZW8qYDogU2VsZWN0IHRoZSB3b3JzdCBxdWFsaXR5IGZvcm1hdCB0aGF0IGNvbnRhaW5zIHZpZGVvLiBJdCBtYXkgYWxzbyBjb250YWluIGF1ZGlvLiBFcXVpdmFsZW50IHRvIGB3b3JzdCpbdmNvZGVjIT1ub25lXWBcbiAtIGB3YWAsIGB3b3JzdGF1ZGlvYDogU2VsZWN0IHRoZSB3b3JzdCBxdWFsaXR5IGF1ZGlvLW9ubHkgZm9ybWF0LiBFcXVpdmFsZW50IHRvIGB3b3JzdCpbdmNvZGVjPW5vbmVdYFxuIC0gYHdhKmAsIGB3b3JzdGF1ZGlvKmA6IFNlbGVjdCB0aGUgd29yc3QgcXVhbGl0eSBmb3JtYXQgdGhhdCBjb250YWlucyBhdWRpby4gSXQgbWF5IGFsc28gY29udGFpbiB2aWRlby4gRXF1aXZhbGVudCB0byBgd29yc3QqW2Fjb2RlYyE9bm9uZV1gXG5cbkZvciBleGFtcGxlLCB0byBkb3dubG9hZCB0aGUgd29yc3QgcXVhbGl0eSB2aWRlby1vbmx5IGZvcm1hdCB5b3UgY2FuIHVzZSBgLWYgd29yc3R2aWRlb2AuIEl0IGlzIGhvd2V2ZXIgcmVjb21tZW5kZWQgbm90IHRvIHVzZSBgd29yc3RgIGFuZCByZWxhdGVkIG9wdGlvbnMuIFdoZW4geW91ciBmb3JtYXQgc2VsZWN0b3IgaXMgYHdvcnN0YCwgdGhlIGZvcm1hdCB3aGljaCBpcyB3b3JzdCBpbiBhbGwgcmVzcGVjdHMgaXMgc2VsZWN0ZWQuIE1vc3Qgb2YgdGhlIHRpbWUsIHdoYXQgeW91IGFjdHVhbGx5IHdhbnQgaXMgdGhlIHZpZGVvIHdpdGggdGhlIHNtYWxsZXN0IGZpbGVzaXplIGluc3RlYWQuIFNvIGl0IGlzIGdlbmVyYWxseSBiZXR0ZXIgdG8gdXNlIGAtUyArc2l6ZWAgb3IgbW9yZSByaWdvcm91c2x5LCBgLVMgK3NpemUsK2JyLCtyZXMsK2Zwc2AgaW5zdGVhZCBvZiBgLWYgd29yc3RgLiBTZWUgW1NvcnRpbmcgRm9ybWF0c10oI3NvcnRpbmctZm9ybWF0cykgZm9yIG1vcmUgZGV0YWlscy5cblxuWW91IGNhbiBzZWxlY3QgdGhlIG4ndGggYmVzdCBmb3JtYXQgb2YgYSB0eXBlIGJ5IHVzaW5nIGBiZXN0PHR5cGU+LjxuPmAuIEZvciBleGFtcGxlLCBgYmVzdC4yYCB3aWxsIHNlbGVjdCB0aGUgMm5kIGJlc3QgY29tYmluZWQgZm9ybWF0LiBTaW1pbGFybHksIGBidiouM2Agd2lsbCBzZWxlY3QgdGhlIDNyZCBiZXN0IGZvcm1hdCB0aGF0IGNvbnRhaW5zIGEgdmlkZW8gc3RyZWFtLlxuXG5JZiB5b3Ugd2FudCB0byBkb3dubG9hZCBtdWx0aXBsZSB2aWRlb3MsIGFuZCB0aGV5IGRvbid0IGhhdmUgdGhlIHNhbWUgZm9ybWF0cyBhdmFpbGFibGUsIHlvdSBjYW4gc3BlY2lmeSB0aGUgb3JkZXIgb2YgcHJlZmVyZW5jZSB1c2luZyBzbGFzaGVzLiBOb3RlIHRoYXQgZm9ybWF0cyBvbiB0aGUgbGVmdCBoYW5kIHNpZGUgYXJlIHByZWZlcnJlZDsgZS5nLiBgLWYgMjIvMTcvMThgIHdpbGwgZG93bmxvYWQgZm9ybWF0IDIyIGlmIGl0J3MgYXZhaWxhYmxlLCBvdGhlcndpc2UgaXQgd2lsbCBkb3dubG9hZCBmb3JtYXQgMTcgaWYgaXQncyBhdmFpbGFibGUsIG90aGVyd2lzZSBpdCB3aWxsIGRvd25sb2FkIGZvcm1hdCAxOCBpZiBpdCdzIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGl0IHdpbGwgY29tcGxhaW4gdGhhdCBubyBzdWl0YWJsZSBmb3JtYXRzIGFyZSBhdmFpbGFibGUgZm9yIGRvd25sb2FkLlxuXG5JZiB5b3Ugd2FudCB0byBkb3dubG9hZCBzZXZlcmFsIGZvcm1hdHMgb2YgdGhlIHNhbWUgdmlkZW8gdXNlIGEgY29tbWEgYXMgYSBzZXBhcmF0b3IsIGUuZy4gYC1mIDIyLDE3LDE4YCB3aWxsIGRvd25sb2FkIGFsbCB0aGVzZSB0aHJlZSBmb3JtYXRzLCBvZiBjb3Vyc2UgaWYgdGhleSBhcmUgYXZhaWxhYmxlLiBPciBhIG1vcmUgc29waGlzdGljYXRlZCBleGFtcGxlIGNvbWJpbmVkIHdpdGggdGhlIHByZWNlZGVuY2UgZmVhdHVyZTogYC1mIDEzNi8xMzcvbXA0L2Jlc3R2aWRlbywxNDAvbTRhL2Jlc3RhdWRpb2AuXG5cbllvdSBjYW4gbWVyZ2UgdGhlIHZpZGVvIGFuZCBhdWRpbyBvZiBtdWx0aXBsZSBmb3JtYXRzIGludG8gYSBzaW5nbGUgZmlsZSB1c2luZyBgLWYgPGZvcm1hdDE+Kzxmb3JtYXQyPisuLi5gIChyZXF1aXJlcyBmZm1wZWcgaW5zdGFsbGVkKTsgZS5nLiBgLWYgYmVzdHZpZGVvK2Jlc3RhdWRpb2Agd2lsbCBkb3dubG9hZCB0aGUgYmVzdCB2aWRlby1vbmx5IGZvcm1hdCwgdGhlIGJlc3QgYXVkaW8tb25seSBmb3JtYXQgYW5kIG11eCB0aGVtIHRvZ2V0aGVyIHdpdGggZmZtcGVnLlxuXG4qKkRlcHJlY2F0aW9uIHdhcm5pbmcqKjogU2luY2UgdGhlICpiZWxvdyogZGVzY3JpYmVkIGJlaGF2aW9yIGlzIGNvbXBsZXggYW5kIGNvdW50ZXItaW50dWl0aXZlLCB0aGlzIHdpbGwgYmUgcmVtb3ZlZCBhbmQgbXVsdGlzdHJlYW1zIHdpbGwgYmUgZW5hYmxlZCBieSBkZWZhdWx0IGluIHRoZSBmdXR1cmUuIEEgbmV3IG9wZXJhdG9yIHdpbGwgYmUgaW5zdGVhZCBhZGRlZCB0byBsaW1pdCBmb3JtYXRzIHRvIHNpbmdsZSBhdWRpby92aWRlb1xuXG5Vbmxlc3MgYC0tdmlkZW8tbXVsdGlzdHJlYW1zYCBpcyB1c2VkLCBhbGwgZm9ybWF0cyB3aXRoIGEgdmlkZW8gc3RyZWFtIGV4Y2VwdCB0aGUgZmlyc3Qgb25lIGFyZSBpZ25vcmVkLiBTaW1pbGFybHksIHVubGVzcyBgLS1hdWRpby1tdWx0aXN0cmVhbXNgIGlzIHVzZWQsIGFsbCBmb3JtYXRzIHdpdGggYW4gYXVkaW8gc3RyZWFtIGV4Y2VwdCB0aGUgZmlyc3Qgb25lIGFyZSBpZ25vcmVkLiBFLmcuIGAtZiBiZXN0dmlkZW8rYmVzdCtiZXN0YXVkaW8gLS12aWRlby1tdWx0aXN0cmVhbXMgLS1hdWRpby1tdWx0aXN0cmVhbXNgIHdpbGwgZG93bmxvYWQgYW5kIG1lcmdlIGFsbCAzIGdpdmVuIGZvcm1hdHMuIFRoZSByZXN1bHRpbmcgZmlsZSB3aWxsIGhhdmUgMiB2aWRlbyBzdHJlYW1zIGFuZCAyIGF1ZGlvIHN0cmVhbXMuIEJ1dCBgLWYgYmVzdHZpZGVvK2Jlc3QrYmVzdGF1ZGlvIC0tbm8tdmlkZW8tbXVsdGlzdHJlYW1zYCB3aWxsIGRvd25sb2FkIGFuZCBtZXJnZSBvbmx5IGBiZXN0dmlkZW9gIGFuZCBgYmVzdGF1ZGlvYC4gYGJlc3RgIGlzIGlnbm9yZWQgc2luY2UgYW5vdGhlciBmb3JtYXQgY29udGFpbmluZyBhIHZpZGVvIHN0cmVhbSAoYGJlc3R2aWRlb2ApIGhhcyBhbHJlYWR5IGJlZW4gc2VsZWN0ZWQuIFRoZSBvcmRlciBvZiB0aGUgZm9ybWF0cyBpcyB0aGVyZWZvcmUgaW1wb3J0YW50LiBgLWYgYmVzdCtiZXN0YXVkaW8gLS1uby1hdWRpby1tdWx0aXN0cmVhbXNgIHdpbGwgZG93bmxvYWQgb25seSBgYmVzdGAgd2hpbGUgYC1mIGJlc3RhdWRpbytiZXN0IC0tbm8tYXVkaW8tbXVsdGlzdHJlYW1zYCB3aWxsIGlnbm9yZSBgYmVzdGAgYW5kIGRvd25sb2FkIG9ubHkgYGJlc3RhdWRpb2AuXG5cbiMjIEZpbHRlcmluZyBGb3JtYXRzXG5cbllvdSBjYW4gYWxzbyBmaWx0ZXIgdGhlIHZpZGVvIGZvcm1hdHMgYnkgcHV0dGluZyBhIGNvbmRpdGlvbiBpbiBicmFja2V0cywgYXMgaW4gYC1mIFwiYmVzdFtoZWlnaHQ9NzIwXVwiYCAob3IgYC1mIFwiW2ZpbGVzaXplPjEwTV1cImApLlxuXG5UaGUgZm9sbG93aW5nIG51bWVyaWMgbWV0YSBmaWVsZHMgY2FuIGJlIHVzZWQgd2l0aCBjb21wYXJpc29ucyBgPGAsIGA8PWAsIGA+YCwgYD49YCwgYD1gIChlcXVhbHMpLCBgIT1gIChub3QgZXF1YWxzKTpcblxuIC0gYGZpbGVzaXplYDogVGhlIG51bWJlciBvZiBieXRlcywgaWYga25vd24gaW4gYWR2YW5jZVxuIC0gYGZpbGVzaXplX2FwcHJveGA6IEFuIGVzdGltYXRlIGZvciB0aGUgbnVtYmVyIG9mIGJ5dGVzXG4gLSBgd2lkdGhgOiBXaWR0aCBvZiB0aGUgdmlkZW8sIGlmIGtub3duXG4gLSBgaGVpZ2h0YDogSGVpZ2h0IG9mIHRoZSB2aWRlbywgaWYga25vd25cbiAtIGBhc3BlY3RfcmF0aW9gOiBBc3BlY3QgcmF0aW8gb2YgdGhlIHZpZGVvLCBpZiBrbm93blxuIC0gYHRicmA6IEF2ZXJhZ2UgYml0cmF0ZSBvZiBhdWRpbyBhbmQgdmlkZW8gaW4gS0JpdC9zXG4gLSBgYWJyYDogQXZlcmFnZSBhdWRpbyBiaXRyYXRlIGluIEtCaXQvc1xuIC0gYHZicmA6IEF2ZXJhZ2UgdmlkZW8gYml0cmF0ZSBpbiBLQml0L3NcbiAtIGBhc3JgOiBBdWRpbyBzYW1wbGluZyByYXRlIGluIEhlcnR6XG4gLSBgZnBzYDogRnJhbWUgcmF0ZVxuIC0gYGF1ZGlvX2NoYW5uZWxzYDogVGhlIG51bWJlciBvZiBhdWRpbyBjaGFubmVsc1xuIC0gYHN0cmV0Y2hlZF9yYXRpb2A6IGB3aWR0aDpoZWlnaHRgIG9mIHRoZSB2aWRlbydzIHBpeGVscywgaWYgbm90IHNxdWFyZVxuXG5BbHNvIGZpbHRlcmluZyB3b3JrIGZvciBjb21wYXJpc29ucyBgPWAgKGVxdWFscyksIGBePWAgKHN0YXJ0cyB3aXRoKSwgYCQ9YCAoZW5kcyB3aXRoKSwgYCo9YCAoY29udGFpbnMpLCBgfj1gIChtYXRjaGVzIHJlZ2V4KSBhbmQgZm9sbG93aW5nIHN0cmluZyBtZXRhIGZpZWxkczpcblxuIC0gYHVybGA6IFZpZGVvIFVSTFxuIC0gYGV4dGA6IEZpbGUgZXh0ZW5zaW9uXG4gLSBgYWNvZGVjYDogTmFtZSBvZiB0aGUgYXVkaW8gY29kZWMgaW4gdXNlXG4gLSBgdmNvZGVjYDogTmFtZSBvZiB0aGUgdmlkZW8gY29kZWMgaW4gdXNlXG4gLSBgY29udGFpbmVyYDogTmFtZSBvZiB0aGUgY29udGFpbmVyIGZvcm1hdFxuIC0gYHByb3RvY29sYDogVGhlIHByb3RvY29sIHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgYWN0dWFsIGRvd25sb2FkLCBsb3dlci1jYXNlIChgaHR0cGAsIGBodHRwc2AsIGBydHNwYCwgYHJ0bXBgLCBgcnRtcGVgLCBgbW1zYCwgYGY0bWAsIGBpc21gLCBgaHR0cF9kYXNoX3NlZ21lbnRzYCwgYG0zdThgLCBvciBgbTN1OF9uYXRpdmVgKVxuIC0gYGxhbmd1YWdlYDogTGFuZ3VhZ2UgY29kZVxuIC0gYGR5bmFtaWNfcmFuZ2VgOiBUaGUgZHluYW1pYyByYW5nZSBvZiB0aGUgdmlkZW9cbiAtIGBmb3JtYXRfaWRgOiBBIHNob3J0IGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXRcbiAtIGBmb3JtYXRgOiBBIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSBmb3JtYXRcbiAtIGBmb3JtYXRfbm90ZWA6IEFkZGl0aW9uYWwgaW5mbyBhYm91dCB0aGUgZm9ybWF0XG4gLSBgcmVzb2x1dGlvbmA6IFRleHR1YWwgZGVzY3JpcHRpb24gb2Ygd2lkdGggYW5kIGhlaWdodFxuXG5Bbnkgc3RyaW5nIGNvbXBhcmlzb24gbWF5IGJlIHByZWZpeGVkIHdpdGggbmVnYXRpb24gYCFgIGluIG9yZGVyIHRvIHByb2R1Y2UgYW4gb3Bwb3NpdGUgY29tcGFyaXNvbiwgZS5nLiBgISo9YCAoZG9lcyBub3QgY29udGFpbikuIFRoZSBjb21wYXJhbmQgb2YgYSBzdHJpbmcgY29tcGFyaXNvbiBuZWVkcyB0byBiZSBxdW90ZWQgd2l0aCBlaXRoZXIgZG91YmxlIG9yIHNpbmdsZSBxdW90ZXMgaWYgaXQgY29udGFpbnMgc3BhY2VzIG9yIHNwZWNpYWwgY2hhcmFjdGVycyBvdGhlciB0aGFuIGAuXy1gLlxuXG4qKk5vdGUqKjogTm9uZSBvZiB0aGUgYWZvcmVtZW50aW9uZWQgbWV0YSBmaWVsZHMgYXJlIGd1YXJhbnRlZWQgdG8gYmUgcHJlc2VudCBzaW5jZSB0aGlzIHNvbGVseSBkZXBlbmRzIG9uIHRoZSBtZXRhZGF0YSBvYnRhaW5lZCBieSBwYXJ0aWN1bGFyIGV4dHJhY3RvciwgaS5lLiB0aGUgbWV0YWRhdGEgb2ZmZXJlZCBieSB0aGUgd2Vic2l0ZS4gQW55IG90aGVyIGZpZWxkIG1hZGUgYXZhaWxhYmxlIGJ5IHRoZSBleHRyYWN0b3IgY2FuIGFsc28gYmUgdXNlZCBmb3IgZmlsdGVyaW5nLlxuXG5Gb3JtYXRzIGZvciB3aGljaCB0aGUgdmFsdWUgaXMgbm90IGtub3duIGFyZSBleGNsdWRlZCB1bmxlc3MgeW91IHB1dCBhIHF1ZXN0aW9uIG1hcmsgKGA/YCkgYWZ0ZXIgdGhlIG9wZXJhdG9yLiBZb3UgY2FuIGNvbWJpbmUgZm9ybWF0IGZpbHRlcnMsIHNvIGAtZiBcIltoZWlnaHQ8PT83MjBdW3Ricj41MDBdXCJgIHNlbGVjdHMgdXAgdG8gNzIwcCB2aWRlb3MgKG9yIHZpZGVvcyB3aGVyZSB0aGUgaGVpZ2h0IGlzIG5vdCBrbm93bikgd2l0aCBhIGJpdHJhdGUgb2YgYXQgbGVhc3QgNTAwIEtCaXQvcy4gWW91IGNhbiBhbHNvIHVzZSB0aGUgZmlsdGVycyB3aXRoIGBhbGxgIHRvIGRvd25sb2FkIGFsbCBmb3JtYXRzIHRoYXQgc2F0aXNmeSB0aGUgZmlsdGVyLCBlLmcuIGAtZiBcImFsbFt2Y29kZWM9bm9uZV1cImAgc2VsZWN0cyBhbGwgYXVkaW8tb25seSBmb3JtYXRzLlxuXG5Gb3JtYXQgc2VsZWN0b3JzIGNhbiBhbHNvIGJlIGdyb3VwZWQgdXNpbmcgcGFyZW50aGVzZXM7IGUuZy4gYC1mIFwiKG1wNCx3ZWJtKVtoZWlnaHQ8NDgwXVwiYCB3aWxsIGRvd25sb2FkIHRoZSBiZXN0IHByZS1tZXJnZWQgbXA0IGFuZCB3ZWJtIGZvcm1hdHMgd2l0aCBhIGhlaWdodCBsb3dlciB0aGFuIDQ4MC5cblxuIyMgU29ydGluZyBGb3JtYXRzXG5cbllvdSBjYW4gY2hhbmdlIHRoZSBjcml0ZXJpYSBmb3IgYmVpbmcgY29uc2lkZXJlZCB0aGUgYGJlc3RgIGJ5IHVzaW5nIGAtU2AgKGAtLWZvcm1hdC1zb3J0YCkuIFRoZSBnZW5lcmFsIGZvcm1hdCBmb3IgdGhpcyBpcyBgLS1mb3JtYXQtc29ydCBmaWVsZDEsZmllbGQyLi4uYC5cblxuVGhlIGF2YWlsYWJsZSBmaWVsZHMgYXJlOlxuXG4gLSBgaGFzdmlkYDogR2l2ZXMgcHJpb3JpdHkgdG8gZm9ybWF0cyB0aGF0IGhhdmUgYSB2aWRlbyBzdHJlYW1cbiAtIGBoYXNhdWRgOiBHaXZlcyBwcmlvcml0eSB0byBmb3JtYXRzIHRoYXQgaGF2ZSBhbiBhdWRpbyBzdHJlYW1cbiAtIGBpZV9wcmVmYDogVGhlIGZvcm1hdCBwcmVmZXJlbmNlXG4gLSBgbGFuZ2A6IFRoZSBsYW5ndWFnZSBwcmVmZXJlbmNlXG4gLSBgcXVhbGl0eWA6IFRoZSBxdWFsaXR5IG9mIHRoZSBmb3JtYXRcbiAtIGBzb3VyY2VgOiBUaGUgcHJlZmVyZW5jZSBvZiB0aGUgc291cmNlXG4gLSBgcHJvdG9gOiBQcm90b2NvbCB1c2VkIGZvciBkb3dubG9hZCAoYGh0dHBzYC9gZnRwc2AgPiBgaHR0cGAvYGZ0cGAgPiBgbTN1OF9uYXRpdmVgL2BtM3U4YCA+IGBodHRwX2Rhc2hfc2VnbWVudHNgPiBgd2Vic29ja2V0X2ZyYWdgID4gYG1tc2AvYHJ0c3BgID4gYGY0ZmAvYGY0bWApXG4gLSBgdmNvZGVjYDogVmlkZW8gQ29kZWMgKGBhdjAxYCA+IGB2cDkuMmAgPiBgdnA5YCA+IGBoMjY1YCA+IGBoMjY0YCA+IGB2cDhgID4gYGgyNjNgID4gYHRoZW9yYWAgPiBvdGhlcilcbiAtIGBhY29kZWNgOiBBdWRpbyBDb2RlYyAoYGZsYWNgL2BhbGFjYCA+IGB3YXZgL2BhaWZmYCA+IGBvcHVzYCA+IGB2b3JiaXNgID4gYGFhY2AgPiBgbXA0YWAgPiBgbXAzYCA+IGBhYzRgID4gYGVhYzNgID4gYGFjM2AgPiBgZHRzYCA+IG90aGVyKVxuIC0gYGNvZGVjYDogRXF1aXZhbGVudCB0byBgdmNvZGVjLGFjb2RlY2BcbiAtIGB2ZXh0YDogVmlkZW8gRXh0ZW5zaW9uIChgbXA0YCA+IGBtb3ZgID4gYHdlYm1gID4gYGZsdmAgPiBvdGhlcikuIElmIGAtLXByZWZlci1mcmVlLWZvcm1hdHNgIGlzIHVzZWQsIGB3ZWJtYCBpcyBwcmVmZXJyZWQuXG4gLSBgYWV4dGA6IEF1ZGlvIEV4dGVuc2lvbiAoYG00YWAgPiBgYWFjYCA+IGBtcDNgID4gYG9nZ2AgPiBgb3B1c2AgPiBgd2VibWAgPiBvdGhlcikuIElmIGAtLXByZWZlci1mcmVlLWZvcm1hdHNgIGlzIHVzZWQsIHRoZSBvcmRlciBjaGFuZ2VzIHRvIGBvZ2dgID4gYG9wdXNgID4gYHdlYm1gID4gYG1wM2AgPiBgbTRhYCA+IGBhYWNgXG4gLSBgZXh0YDogRXF1aXZhbGVudCB0byBgdmV4dCxhZXh0YFxuIC0gYGZpbGVzaXplYDogRXhhY3QgZmlsZXNpemUsIGlmIGtub3duIGluIGFkdmFuY2VcbiAtIGBmc19hcHByb3hgOiBBcHByb3hpbWF0ZSBmaWxlc2l6ZSBjYWxjdWxhdGVkIGZyb20gdGhlIG1hbmlmZXN0c1xuIC0gYHNpemVgOiBFeGFjdCBmaWxlc2l6ZSBpZiBhdmFpbGFibGUsIG90aGVyd2lzZSBhcHByb3hpbWF0ZSBmaWxlc2l6ZVxuIC0gYGhlaWdodGA6IEhlaWdodCBvZiB2aWRlb1xuIC0gYHdpZHRoYDogV2lkdGggb2YgdmlkZW9cbiAtIGByZXNgOiBWaWRlbyByZXNvbHV0aW9uLCBjYWxjdWxhdGVkIGFzIHRoZSBzbWFsbGVzdCBkaW1lbnNpb24uXG4gLSBgZnBzYDogRnJhbWVyYXRlIG9mIHZpZGVvXG4gLSBgaGRyYDogVGhlIGR5bmFtaWMgcmFuZ2Ugb2YgdGhlIHZpZGVvIChgRFZgID4gYEhEUjEyYCA+IGBIRFIxMCtgID4gYEhEUjEwYCA+IGBITEdgID4gYFNEUmApXG4gLSBgY2hhbm5lbHNgOiBUaGUgbnVtYmVyIG9mIGF1ZGlvIGNoYW5uZWxzXG4gLSBgdGJyYDogVG90YWwgYXZlcmFnZSBiaXRyYXRlIGluIEtCaXQvc1xuIC0gYHZicmA6IEF2ZXJhZ2UgdmlkZW8gYml0cmF0ZSBpbiBLQml0L3NcbiAtIGBhYnJgOiBBdmVyYWdlIGF1ZGlvIGJpdHJhdGUgaW4gS0JpdC9zXG4gLSBgYnJgOiBFcXVpdmFsZW50IHRvIHVzaW5nIGB0YnIsdmJyLGFicmBcbiAtIGBhc3JgOiBBdWRpbyBzYW1wbGUgcmF0ZSBpbiBIelxuIFxuKipEZXByZWNhdGlvbiB3YXJuaW5nKio6IE1hbnkgb2YgdGhlc2UgZmllbGRzIGhhdmUgKGN1cnJlbnRseSB1bmRvY3VtZW50ZWQpIGFsaWFzZXMsIHRoYXQgbWF5IGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgdmVyc2lvbi4gSXQgaXMgcmVjb21tZW5kZWQgdG8gdXNlIG9ubHkgdGhlIGRvY3VtZW50ZWQgZmllbGQgbmFtZXMuXG5cbkFsbCBmaWVsZHMsIHVubGVzcyBzcGVjaWZpZWQgb3RoZXJ3aXNlLCBhcmUgc29ydGVkIGluIGRlc2NlbmRpbmcgb3JkZXIuIFRvIHJldmVyc2UgdGhpcywgcHJlZml4IHRoZSBmaWVsZCB3aXRoIGEgYCtgLiBFLmcuIGArcmVzYCBwcmVmZXJzIGZvcm1hdCB3aXRoIHRoZSBzbWFsbGVzdCByZXNvbHV0aW9uLiBBZGRpdGlvbmFsbHksIHlvdSBjYW4gc3VmZml4IGEgcHJlZmVycmVkIHZhbHVlIGZvciB0aGUgZmllbGRzLCBzZXBhcmF0ZWQgYnkgYSBgOmAuIEUuZy4gYHJlczo3MjBgIHByZWZlcnMgbGFyZ2VyIHZpZGVvcywgYnV0IG5vIGxhcmdlciB0aGFuIDcyMHAgYW5kIHRoZSBzbWFsbGVzdCB2aWRlbyBpZiB0aGVyZSBhcmUgbm8gdmlkZW9zIGxlc3MgdGhhbiA3MjBwLiBGb3IgYGNvZGVjYCBhbmQgYGV4dGAsIHlvdSBjYW4gcHJvdmlkZSB0d28gcHJlZmVycmVkIHZhbHVlcywgdGhlIGZpcnN0IGZvciB2aWRlbyBhbmQgdGhlIHNlY29uZCBmb3IgYXVkaW8uIEUuZy4gYCtjb2RlYzphdmM6bTRhYCAoZXF1aXZhbGVudCB0byBgK3Zjb2RlYzphdmMsK2Fjb2RlYzptNGFgKSBzZXRzIHRoZSB2aWRlbyBjb2RlYyBwcmVmZXJlbmNlIHRvIGBoMjY0YCA+IGBoMjY1YCA+IGB2cDlgID4gYHZwOS4yYCA+IGBhdjAxYCA+IGB2cDhgID4gYGgyNjNgID4gYHRoZW9yYWAgYW5kIGF1ZGlvIGNvZGVjIHByZWZlcmVuY2UgdG8gYG1wNGFgID4gYGFhY2AgPiBgdm9yYmlzYCA+IGBvcHVzYCA+IGBtcDNgID4gYGFjM2AgPiBgZHRzYC4gWW91IGNhbiBhbHNvIG1ha2UgdGhlIHNvcnRpbmcgcHJlZmVyIHRoZSBuZWFyZXN0IHZhbHVlcyB0byB0aGUgcHJvdmlkZWQgYnkgdXNpbmcgYH5gIGFzIHRoZSBkZWxpbWl0ZXIuIEUuZy4gYGZpbGVzaXplfjFHYCBwcmVmZXJzIHRoZSBmb3JtYXQgd2l0aCBmaWxlc2l6ZSBjbG9zZXN0IHRvIDEgR2lCLlxuXG5UaGUgZmllbGRzIGBoYXN2aWRgIGFuZCBgaWVfcHJlZmAgYXJlIGFsd2F5cyBnaXZlbiBoaWdoZXN0IHByaW9yaXR5IGluIHNvcnRpbmcsIGlycmVzcGVjdGl2ZSBvZiB0aGUgdXNlci1kZWZpbmVkIG9yZGVyLiBUaGlzIGJlaGF2aW91ciBjYW4gYmUgY2hhbmdlZCBieSB1c2luZyBgLS1mb3JtYXQtc29ydC1mb3JjZWAuIEFwYXJ0IGZyb20gdGhlc2UsIHRoZSBkZWZhdWx0IG9yZGVyIHVzZWQgaXM6IGBsYW5nLHF1YWxpdHkscmVzLGZwcyxoZHI6MTIsdmNvZGVjOnZwOS4yLGNoYW5uZWxzLGFjb2RlYyxzaXplLGJyLGFzcixwcm90byxleHQsaGFzYXVkLHNvdXJjZSxpZGAuIFRoZSBleHRyYWN0b3JzIG1heSBvdmVycmlkZSB0aGlzIGRlZmF1bHQgb3JkZXIsIGJ1dCB0aGV5IGNhbm5vdCBvdmVycmlkZSB0aGUgdXNlci1wcm92aWRlZCBvcmRlci5cblxuTm90ZSB0aGF0IHRoZSBkZWZhdWx0IGhhcyBgdmNvZGVjOnZwOS4yYDsgaS5lLiBgYXYxYCBpcyBub3QgcHJlZmVycmVkLiBTaW1pbGFybHksIHRoZSBkZWZhdWx0IGZvciBoZHIgaXMgYGhkcjoxMmA7IGkuZS4gZG9sYnkgdmlzaW9uIGlzIG5vdCBwcmVmZXJyZWQuIFRoZXNlIGNob2ljZXMgYXJlIG1hZGUgc2luY2UgRFYgYW5kIEFWMSBmb3JtYXRzIGFyZSBub3QgeWV0IGZ1bGx5IGNvbXBhdGlibGUgd2l0aCBtb3N0IGRldmljZXMuIFRoaXMgbWF5IGJlIGNoYW5nZWQgaW4gdGhlIGZ1dHVyZSBhcyBtb3JlIGRldmljZXMgYmVjb21lIGNhcGFibGUgb2Ygc21vb3RobHkgcGxheWluZyBiYWNrIHRoZXNlIGZvcm1hdHMuXG5cbklmIHlvdXIgZm9ybWF0IHNlbGVjdG9yIGlzIGB3b3JzdGAsIHRoZSBsYXN0IGl0ZW0gaXMgc2VsZWN0ZWQgYWZ0ZXIgc29ydGluZy4gVGhpcyBtZWFucyBpdCB3aWxsIHNlbGVjdCB0aGUgZm9ybWF0IHRoYXQgaXMgd29yc3QgaW4gYWxsIHJlc3BlY3RzLiBNb3N0IG9mIHRoZSB0aW1lLCB3aGF0IHlvdSBhY3R1YWxseSB3YW50IGlzIHRoZSB2aWRlbyB3aXRoIHRoZSBzbWFsbGVzdCBmaWxlc2l6ZSBpbnN0ZWFkLiBTbyBpdCBpcyBnZW5lcmFsbHkgYmV0dGVyIHRvIHVzZSBgLWYgYmVzdCAtUyArc2l6ZSwrYnIsK3JlcywrZnBzYC5cblxuKipUaXAqKjogWW91IGNhbiB1c2UgdGhlIGAtdiAtRmAgdG8gc2VlIGhvdyB0aGUgZm9ybWF0cyBoYXZlIGJlZW4gc29ydGVkICh3b3JzdCB0byBiZXN0KS5cblxuIyMgRm9ybWF0IFNlbGVjdGlvbiBleGFtcGxlc1xuXG5gYGBiYXNoXG4jIERvd25sb2FkIGFuZCBtZXJnZSB0aGUgYmVzdCB2aWRlby1vbmx5IGZvcm1hdCBhbmQgdGhlIGJlc3QgYXVkaW8tb25seSBmb3JtYXQsXG4jIG9yIGRvd25sb2FkIHRoZSBiZXN0IGNvbWJpbmVkIGZvcm1hdCBpZiB2aWRlby1vbmx5IGZvcm1hdCBpcyBub3QgYXZhaWxhYmxlXG4kIHl0LWRscCAtZiBcImJ2K2JhL2JcIlxuXG4jIERvd25sb2FkIGJlc3QgZm9ybWF0IHRoYXQgY29udGFpbnMgdmlkZW8sXG4jIGFuZCBpZiBpdCBkb2Vzbid0IGFscmVhZHkgaGF2ZSBhbiBhdWRpbyBzdHJlYW0sIG1lcmdlIGl0IHdpdGggYmVzdCBhdWRpby1vbmx5IGZvcm1hdFxuJCB5dC1kbHAgLWYgXCJidiorYmEvYlwiXG5cbiMgU2FtZSBhcyBhYm92ZVxuJCB5dC1kbHBcblxuIyBEb3dubG9hZCB0aGUgYmVzdCB2aWRlby1vbmx5IGZvcm1hdCBhbmQgdGhlIGJlc3QgYXVkaW8tb25seSBmb3JtYXQgd2l0aG91dCBtZXJnaW5nIHRoZW1cbiMgRm9yIHRoaXMgY2FzZSwgYW4gb3V0cHV0IHRlbXBsYXRlIHNob3VsZCBiZSB1c2VkIHNpbmNlXG4jIGJ5IGRlZmF1bHQsIGJlc3R2aWRlbyBhbmQgYmVzdGF1ZGlvIHdpbGwgaGF2ZSB0aGUgc2FtZSBmaWxlIG5hbWUuXG4kIHl0LWRscCAtZiBcImJ2LGJhXCIgLW8gXCIlKHRpdGxlKXMuZiUoZm9ybWF0X2lkKXMuJShleHQpc1wiXG5cbiMgRG93bmxvYWQgYW5kIG1lcmdlIHRoZSBiZXN0IGZvcm1hdCB0aGF0IGhhcyBhIHZpZGVvIHN0cmVhbSxcbiMgYW5kIGFsbCBhdWRpby1vbmx5IGZvcm1hdHMgaW50byBvbmUgZmlsZVxuJCB5dC1kbHAgLWYgXCJidiorbWVyZ2VhbGxbdmNvZGVjPW5vbmVdXCIgLS1hdWRpby1tdWx0aXN0cmVhbXNcblxuIyBEb3dubG9hZCBhbmQgbWVyZ2UgdGhlIGJlc3QgZm9ybWF0IHRoYXQgaGFzIGEgdmlkZW8gc3RyZWFtLFxuIyBhbmQgdGhlIGJlc3QgMiBhdWRpby1vbmx5IGZvcm1hdHMgaW50byBvbmUgZmlsZVxuJCB5dC1kbHAgLWYgXCJidiorYmErYmEuMlwiIC0tYXVkaW8tbXVsdGlzdHJlYW1zXG5cblxuIyBUaGUgZm9sbG93aW5nIGV4YW1wbGVzIHNob3cgdGhlIG9sZCBtZXRob2QgKHdpdGhvdXQgLVMpIG9mIGZvcm1hdCBzZWxlY3Rpb25cbiMgYW5kIGhvdyB0byB1c2UgLVMgdG8gYWNoaWV2ZSBhIHNpbWlsYXIgYnV0IChnZW5lcmFsbHkpIGJldHRlciByZXN1bHRcblxuIyBEb3dubG9hZCB0aGUgd29yc3QgdmlkZW8gYXZhaWxhYmxlIChvbGQgbWV0aG9kKVxuJCB5dC1kbHAgLWYgXCJ3diord2Evd1wiXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgdmlkZW8gYXZhaWxhYmxlIGJ1dCB3aXRoIHRoZSBzbWFsbGVzdCByZXNvbHV0aW9uXG4kIHl0LWRscCAtUyBcIityZXNcIlxuXG4jIERvd25sb2FkIHRoZSBzbWFsbGVzdCB2aWRlbyBhdmFpbGFibGVcbiQgeXQtZGxwIC1TIFwiK3NpemUsK2JyXCJcblxuXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgbXA0IHZpZGVvIGF2YWlsYWJsZSwgb3IgdGhlIGJlc3QgdmlkZW8gaWYgbm8gbXA0IGF2YWlsYWJsZVxuJCB5dC1kbHAgLWYgXCJidipbZXh0PW1wNF0rYmFbZXh0PW00YV0vYltleHQ9bXA0XSAvIGJ2KitiYS9iXCJcblxuIyBEb3dubG9hZCB0aGUgYmVzdCB2aWRlbyB3aXRoIHRoZSBiZXN0IGV4dGVuc2lvblxuIyAoRm9yIHZpZGVvLCBtcDQgPiBtb3YgPiB3ZWJtID4gZmx2LiBGb3IgYXVkaW8sIG00YSA+IGFhYyA+IG1wMyAuLi4pXG4kIHl0LWRscCAtUyBcImV4dFwiXG5cblxuXG4jIERvd25sb2FkIHRoZSBiZXN0IHZpZGVvIGF2YWlsYWJsZSBidXQgbm8gYmV0dGVyIHRoYW4gNDgwcCxcbiMgb3IgdGhlIHdvcnN0IHZpZGVvIGlmIHRoZXJlIGlzIG5vIHZpZGVvIHVuZGVyIDQ4MHBcbiQgeXQtZGxwIC1mIFwiYnYqW2hlaWdodDw9NDgwXStiYS9iW2hlaWdodDw9NDgwXSAvIHd2KitiYS93XCJcblxuIyBEb3dubG9hZCB0aGUgYmVzdCB2aWRlbyBhdmFpbGFibGUgd2l0aCB0aGUgbGFyZ2VzdCBoZWlnaHQgYnV0IG5vIGJldHRlciB0aGFuIDQ4MHAsXG4jIG9yIHRoZSBiZXN0IHZpZGVvIHdpdGggdGhlIHNtYWxsZXN0IHJlc29sdXRpb24gaWYgdGhlcmUgaXMgbm8gdmlkZW8gdW5kZXIgNDgwcFxuJCB5dC1kbHAgLVMgXCJoZWlnaHQ6NDgwXCJcblxuIyBEb3dubG9hZCB0aGUgYmVzdCB2aWRlbyBhdmFpbGFibGUgd2l0aCB0aGUgbGFyZ2VzdCByZXNvbHV0aW9uIGJ1dCBubyBiZXR0ZXIgdGhhbiA0ODBwLFxuIyBvciB0aGUgYmVzdCB2aWRlbyB3aXRoIHRoZSBzbWFsbGVzdCByZXNvbHV0aW9uIGlmIHRoZXJlIGlzIG5vIHZpZGVvIHVuZGVyIDQ4MHBcbiMgUmVzb2x1dGlvbiBpcyBkZXRlcm1pbmVkIGJ5IHVzaW5nIHRoZSBzbWFsbGVzdCBkaW1lbnNpb24uXG4jIFNvIHRoaXMgd29ya3MgY29ycmVjdGx5IGZvciB2ZXJ0aWNhbCB2aWRlb3MgYXMgd2VsbFxuJCB5dC1kbHAgLVMgXCJyZXM6NDgwXCJcblxuXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgdmlkZW8gKHRoYXQgYWxzbyBoYXMgYXVkaW8pIGJ1dCBubyBiaWdnZXIgdGhhbiA1MCBNQixcbiMgb3IgdGhlIHdvcnN0IHZpZGVvICh0aGF0IGFsc28gaGFzIGF1ZGlvKSBpZiB0aGVyZSBpcyBubyB2aWRlbyB1bmRlciA1MCBNQlxuJCB5dC1kbHAgLWYgXCJiW2ZpbGVzaXplPDUwTV0gLyB3XCJcblxuIyBEb3dubG9hZCBsYXJnZXN0IHZpZGVvICh0aGF0IGFsc28gaGFzIGF1ZGlvKSBidXQgbm8gYmlnZ2VyIHRoYW4gNTAgTUIsXG4jIG9yIHRoZSBzbWFsbGVzdCB2aWRlbyAodGhhdCBhbHNvIGhhcyBhdWRpbykgaWYgdGhlcmUgaXMgbm8gdmlkZW8gdW5kZXIgNTAgTUJcbiQgeXQtZGxwIC1mIFwiYlwiIC1TIFwiZmlsZXNpemU6NTBNXCJcblxuIyBEb3dubG9hZCBiZXN0IHZpZGVvICh0aGF0IGFsc28gaGFzIGF1ZGlvKSB0aGF0IGlzIGNsb3Nlc3QgaW4gc2l6ZSB0byA1MCBNQlxuJCB5dC1kbHAgLWYgXCJiXCIgLVMgXCJmaWxlc2l6ZX41ME1cIlxuXG5cblxuIyBEb3dubG9hZCBiZXN0IHZpZGVvIGF2YWlsYWJsZSB2aWEgZGlyZWN0IGxpbmsgb3ZlciBIVFRQL0hUVFBTIHByb3RvY29sLFxuIyBvciB0aGUgYmVzdCB2aWRlbyBhdmFpbGFibGUgdmlhIGFueSBwcm90b2NvbCBpZiB0aGVyZSBpcyBubyBzdWNoIHZpZGVvXG4kIHl0LWRscCAtZiBcIihidiorYmEvYilbcHJvdG9jb2xePWh0dHBdW3Byb3RvY29sISo9ZGFzaF0gLyAoYnYqK2JhL2IpXCJcblxuIyBEb3dubG9hZCBiZXN0IHZpZGVvIGF2YWlsYWJsZSB2aWEgdGhlIGJlc3QgcHJvdG9jb2xcbiMgKGh0dHBzL2Z0cHMgPiBodHRwL2Z0cCA+IG0zdThfbmF0aXZlID4gbTN1OCA+IGh0dHBfZGFzaF9zZWdtZW50cyAuLi4pXG4kIHl0LWRscCAtUyBcInByb3RvXCJcblxuXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgdmlkZW8gd2l0aCBlaXRoZXIgaDI2NCBvciBoMjY1IGNvZGVjLFxuIyBvciB0aGUgYmVzdCB2aWRlbyBpZiB0aGVyZSBpcyBubyBzdWNoIHZpZGVvXG4kIHl0LWRscCAtZiBcIihidipbdmNvZGVjfj0nXigoaGV8YSl2Y3xoMjZbNDVdKSddK2JhKSAvIChidiorYmEvYilcIlxuXG4jIERvd25sb2FkIHRoZSBiZXN0IHZpZGVvIHdpdGggYmVzdCBjb2RlYyBubyBiZXR0ZXIgdGhhbiBoMjY0LFxuIyBvciB0aGUgYmVzdCB2aWRlbyB3aXRoIHdvcnN0IGNvZGVjIGlmIHRoZXJlIGlzIG5vIHN1Y2ggdmlkZW9cbiQgeXQtZGxwIC1TIFwiY29kZWM6aDI2NFwiXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgdmlkZW8gd2l0aCB3b3JzdCBjb2RlYyBubyB3b3JzZSB0aGFuIGgyNjQsXG4jIG9yIHRoZSBiZXN0IHZpZGVvIHdpdGggYmVzdCBjb2RlYyBpZiB0aGVyZSBpcyBubyBzdWNoIHZpZGVvXG4kIHl0LWRscCAtUyBcIitjb2RlYzpoMjY0XCJcblxuXG5cbiMgTW9yZSBjb21wbGV4IGV4YW1wbGVzXG5cbiMgRG93bmxvYWQgdGhlIGJlc3QgdmlkZW8gbm8gYmV0dGVyIHRoYW4gNzIwcCBwcmVmZXJyaW5nIGZyYW1lcmF0ZSBncmVhdGVyIHRoYW4gMzAsXG4jIG9yIHRoZSB3b3JzdCB2aWRlbyAoc3RpbGwgcHJlZmVycmluZyBmcmFtZXJhdGUgZ3JlYXRlciB0aGFuIDMwKSBpZiB0aGVyZSBpcyBubyBzdWNoIHZpZGVvXG4kIHl0LWRscCAtZiBcIigoYnYqW2Zwcz4zMF0vYnYqKVtoZWlnaHQ8PTcyMF0vKHd2KltmcHM+MzBdL3d2KikpICsgYmEgLyAoYltmcHM+MzBdL2IpW2hlaWdodDw9NzIwXS8od1tmcHM+MzBdL3cpXCJcblxuIyBEb3dubG9hZCB0aGUgdmlkZW8gd2l0aCB0aGUgbGFyZ2VzdCByZXNvbHV0aW9uIG5vIGJldHRlciB0aGFuIDcyMHAsXG4jIG9yIHRoZSB2aWRlbyB3aXRoIHRoZSBzbWFsbGVzdCByZXNvbHV0aW9uIGF2YWlsYWJsZSBpZiB0aGVyZSBpcyBubyBzdWNoIHZpZGVvLFxuIyBwcmVmZXJyaW5nIGxhcmdlciBmcmFtZXJhdGUgZm9yIGZvcm1hdHMgd2l0aCB0aGUgc2FtZSByZXNvbHV0aW9uXG4kIHl0LWRscCAtUyBcInJlczo3MjAsZnBzXCJcblxuXG5cbiMgRG93bmxvYWQgdGhlIHZpZGVvIHdpdGggc21hbGxlc3QgcmVzb2x1dGlvbiBubyB3b3JzZSB0aGFuIDQ4MHAsXG4jIG9yIHRoZSB2aWRlbyB3aXRoIHRoZSBsYXJnZXN0IHJlc29sdXRpb24gYXZhaWxhYmxlIGlmIHRoZXJlIGlzIG5vIHN1Y2ggdmlkZW8sXG4jIHByZWZlcnJpbmcgYmV0dGVyIGNvZGVjIGFuZCB0aGVuIGxhcmdlciB0b3RhbCBiaXRyYXRlIGZvciB0aGUgc2FtZSByZXNvbHV0aW9uXG4kIHl0LWRscCAtUyBcIityZXM6NDgwLGNvZGVjLGJyXCJcbmBgYFxuXG4jIE1PRElGWUlORyBNRVRBREFUQVxuXG5UaGUgbWV0YWRhdGEgb2J0YWluZWQgYnkgdGhlIGV4dHJhY3RvcnMgY2FuIGJlIG1vZGlmaWVkIGJ5IHVzaW5nIGAtLXBhcnNlLW1ldGFkYXRhYCBhbmQgYC0tcmVwbGFjZS1pbi1tZXRhZGF0YWBcblxuYC0tcmVwbGFjZS1pbi1tZXRhZGF0YSBGSUVMRFMgUkVHRVggUkVQTEFDRWAgaXMgdXNlZCB0byByZXBsYWNlIHRleHQgaW4gYW55IG1ldGFkYXRhIGZpZWxkIHVzaW5nIFtweXRob24gcmVndWxhciBleHByZXNzaW9uXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvcmUuaHRtbCNyZWd1bGFyLWV4cHJlc3Npb24tc3ludGF4KS4gW0JhY2tyZWZlcmVuY2VzXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvcmUuaHRtbD9oaWdobGlnaHQ9YmFja3JlZmVyZW5jZXMjcmUuc3ViKSBjYW4gYmUgdXNlZCBpbiB0aGUgcmVwbGFjZSBzdHJpbmcgZm9yIGFkdmFuY2VkIHVzZS5cblxuVGhlIGdlbmVyYWwgc3ludGF4IG9mIGAtLXBhcnNlLW1ldGFkYXRhIEZST006VE9gIGlzIHRvIGdpdmUgdGhlIG5hbWUgb2YgYSBmaWVsZCBvciBhbiBbb3V0cHV0IHRlbXBsYXRlXSgjb3V0cHV0LXRlbXBsYXRlKSB0byBleHRyYWN0IGRhdGEgZnJvbSwgYW5kIHRoZSBmb3JtYXQgdG8gaW50ZXJwcmV0IGl0IGFzLCBzZXBhcmF0ZWQgYnkgYSBjb2xvbiBgOmAuIEVpdGhlciBhIFtweXRob24gcmVndWxhciBleHByZXNzaW9uXShodHRwczovL2RvY3MucHl0aG9uLm9yZy8zL2xpYnJhcnkvcmUuaHRtbCNyZWd1bGFyLWV4cHJlc3Npb24tc3ludGF4KSB3aXRoIG5hbWVkIGNhcHR1cmUgZ3JvdXBzLCBhIHNpbmdsZSBmaWVsZCBuYW1lLCBvciBhIHNpbWlsYXIgc3ludGF4IHRvIHRoZSBbb3V0cHV0IHRlbXBsYXRlXSgjb3V0cHV0LXRlbXBsYXRlKSAob25seSBgJShmaWVsZClzYCBmb3JtYXR0aW5nIGlzIHN1cHBvcnRlZCkgY2FuIGJlIHVzZWQgZm9yIGBUT2AuIFRoZSBvcHRpb24gY2FuIGJlIHVzZWQgbXVsdGlwbGUgdGltZXMgdG8gcGFyc2UgYW5kIG1vZGlmeSB2YXJpb3VzIGZpZWxkcy5cblxuTm90ZSB0aGF0IHRoZXNlIG9wdGlvbnMgcHJlc2VydmUgdGhlaXIgcmVsYXRpdmUgb3JkZXIsIGFsbG93aW5nIHJlcGxhY2VtZW50cyB0byBiZSBtYWRlIGluIHBhcnNlZCBmaWVsZHMgYW5kIHZpY2V2ZXJzYS4gQWxzbywgYW55IGZpZWxkIHRodXMgY3JlYXRlZCBjYW4gYmUgdXNlZCBpbiB0aGUgW291dHB1dCB0ZW1wbGF0ZV0oI291dHB1dC10ZW1wbGF0ZSkgYW5kIHdpbGwgYWxzbyBhZmZlY3QgdGhlIG1lZGlhIGZpbGUncyBtZXRhZGF0YSBhZGRlZCB3aGVuIHVzaW5nIGAtLWVtYmVkLW1ldGFkYXRhYC5cblxuVGhpcyBvcHRpb24gYWxzbyBoYXMgYSBmZXcgc3BlY2lhbCB1c2VzOlxuXG4qIFlvdSBjYW4gZG93bmxvYWQgYW4gYWRkaXRpb25hbCBVUkwgYmFzZWQgb24gdGhlIG1ldGFkYXRhIG9mIHRoZSBjdXJyZW50bHkgZG93bmxvYWRlZCB2aWRlby4gVG8gZG8gdGhpcywgc2V0IHRoZSBmaWVsZCBgYWRkaXRpb25hbF91cmxzYCB0byB0aGUgVVJMIHRoYXQgeW91IHdhbnQgdG8gZG93bmxvYWQuIEUuZy4gYC0tcGFyc2UtbWV0YWRhdGEgXCJkZXNjcmlwdGlvbjooP1A8YWRkaXRpb25hbF91cmxzPmh0dHBzPzovL3d3d1xcLnZpbWVvXFwuY29tL1xcZCspYCB3aWxsIGRvd25sb2FkIHRoZSBmaXJzdCB2aW1lbyB2aWRlbyBmb3VuZCBpbiB0aGUgZGVzY3JpcHRpb25cblxuKiBZb3UgY2FuIHVzZSB0aGlzIHRvIGNoYW5nZSB0aGUgbWV0YWRhdGEgdGhhdCBpcyBlbWJlZGRlZCBpbiB0aGUgbWVkaWEgZmlsZS4gVG8gZG8gdGhpcywgc2V0IHRoZSB2YWx1ZSBvZiB0aGUgY29ycmVzcG9uZGluZyBmaWVsZCB3aXRoIGEgYG1ldGFfYCBwcmVmaXguIEZvciBleGFtcGxlLCBhbnkgdmFsdWUgeW91IHNldCB0byBgbWV0YV9kZXNjcmlwdGlvbmAgZmllbGQgd2lsbCBiZSBhZGRlZCB0byB0aGUgYGRlc2NyaXB0aW9uYCBmaWVsZCBpbiB0aGUgZmlsZSAtIHlvdSBjYW4gdXNlIHRoaXMgdG8gc2V0IGEgZGlmZmVyZW50IFwiZGVzY3JpcHRpb25cIiBhbmQgXCJzeW5vcHNpc1wiLiBUbyBtb2RpZnkgdGhlIG1ldGFkYXRhIG9mIGluZGl2aWR1YWwgc3RyZWFtcywgdXNlIHRoZSBgbWV0YTxuPl9gIHByZWZpeCAoZS5nLiBgbWV0YTFfbGFuZ3VhZ2VgKS4gQW55IHZhbHVlIHNldCB0byB0aGUgYG1ldGFfYCBmaWVsZCB3aWxsIG92ZXJ3cml0ZSBhbGwgZGVmYXVsdCB2YWx1ZXMuXG5cbioqTm90ZSoqOiBNZXRhZGF0YSBtb2RpZmljYXRpb24gaGFwcGVucyBiZWZvcmUgZm9ybWF0IHNlbGVjdGlvbiwgcG9zdC1leHRyYWN0aW9uIGFuZCBvdGhlciBwb3N0LXByb2Nlc3Npbmcgb3BlcmF0aW9ucy4gU29tZSBmaWVsZHMgbWF5IGJlIGFkZGVkIG9yIGNoYW5nZWQgZHVyaW5nIHRoZXNlIHN0ZXBzLCBvdmVycmlkaW5nIHlvdXIgY2hhbmdlcy5cblxuRm9yIHJlZmVyZW5jZSwgdGhlc2UgYXJlIHRoZSBmaWVsZHMgeXQtZGxwIGFkZHMgYnkgZGVmYXVsdCB0byB0aGUgZmlsZSBtZXRhZGF0YTpcblxuTWV0YWRhdGEgZmllbGRzICAgICAgICAgICAgfCBGcm9tXG46LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18Oi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuYHRpdGxlYCAgICAgICAgICAgICAgICAgICAgfCBgdHJhY2tgIG9yIGB0aXRsZWBcbmBkYXRlYCAgICAgICAgICAgICAgICAgICAgIHwgYHVwbG9hZF9kYXRlYFxuYGRlc2NyaXB0aW9uYCwgIGBzeW5vcHNpc2AgfCBgZGVzY3JpcHRpb25gXG5gcHVybGAsIGBjb21tZW50YCAgICAgICAgICB8IGB3ZWJwYWdlX3VybGBcbmB0cmFja2AgICAgICAgICAgICAgICAgICAgIHwgYHRyYWNrX251bWJlcmBcbmBhcnRpc3RgICAgICAgICAgICAgICAgICAgIHwgYGFydGlzdGAsIGBjcmVhdG9yYCwgYHVwbG9hZGVyYCBvciBgdXBsb2FkZXJfaWRgXG5gZ2VucmVgICAgICAgICAgICAgICAgICAgICB8IGBnZW5yZWBcbmBhbGJ1bWAgICAgICAgICAgICAgICAgICAgIHwgYGFsYnVtYFxuYGFsYnVtX2FydGlzdGAgICAgICAgICAgICAgfCBgYWxidW1fYXJ0aXN0YFxuYGRpc2NgICAgICAgICAgICAgICAgICAgICAgfCBgZGlzY19udW1iZXJgXG5gc2hvd2AgICAgICAgICAgICAgICAgICAgICB8IGBzZXJpZXNgXG5gc2Vhc29uX251bWJlcmAgICAgICAgICAgICB8IGBzZWFzb25fbnVtYmVyYFxuYGVwaXNvZGVfaWRgICAgICAgICAgICAgICAgfCBgZXBpc29kZWAgb3IgYGVwaXNvZGVfaWRgXG5gZXBpc29kZV9zb3J0YCAgICAgICAgICAgICB8IGBlcGlzb2RlX251bWJlcmBcbmBsYW5ndWFnZWAgb2YgZWFjaCBzdHJlYW0gIHwgdGhlIGZvcm1hdCdzIGBsYW5ndWFnZWBcblxuKipOb3RlKio6IFRoZSBmaWxlIGZvcm1hdCBtYXkgbm90IHN1cHBvcnQgc29tZSBvZiB0aGVzZSBmaWVsZHNcblxuXG4jIyBNb2RpZnlpbmcgbWV0YWRhdGEgZXhhbXBsZXNcblxuYGBgYmFzaFxuIyBJbnRlcnByZXQgdGhlIHRpdGxlIGFzIFwiQXJ0aXN0IC0gVGl0bGVcIlxuJCB5dC1kbHAgLS1wYXJzZS1tZXRhZGF0YSBcInRpdGxlOiUoYXJ0aXN0KXMgLSAlKHRpdGxlKXNcIlxuXG4jIFJlZ2V4IGV4YW1wbGVcbiQgeXQtZGxwIC0tcGFyc2UtbWV0YWRhdGEgXCJkZXNjcmlwdGlvbjpBcnRpc3QgLSAoP1A8YXJ0aXN0Pi4rKVwiXG5cbiMgU2V0IHRpdGxlIGFzIFwiU2VyaWVzIG5hbWUgUzAxRTA1XCJcbiQgeXQtZGxwIC0tcGFyc2UtbWV0YWRhdGEgXCIlKHNlcmllcylzIFMlKHNlYXNvbl9udW1iZXIpMDJkRSUoZXBpc29kZV9udW1iZXIpMDJkOiUodGl0bGUpc1wiXG5cbiMgUHJpb3JpdGl6ZSB1cGxvYWRlciBhcyB0aGUgXCJhcnRpc3RcIiBmaWVsZCBpbiB2aWRlbyBtZXRhZGF0YVxuJCB5dC1kbHAgLS1wYXJzZS1tZXRhZGF0YSBcIiUodXBsb2FkZXJ8KXM6JShtZXRhX2FydGlzdClzXCIgLS1lbWJlZC1tZXRhZGF0YVxuXG4jIFNldCBcImNvbW1lbnRcIiBmaWVsZCBpbiB2aWRlbyBtZXRhZGF0YSB1c2luZyBkZXNjcmlwdGlvbiBpbnN0ZWFkIG9mIHdlYnBhZ2VfdXJsLFxuIyBoYW5kbGluZyBtdWx0aXBsZSBsaW5lcyBjb3JyZWN0bHlcbiQgeXQtZGxwIC0tcGFyc2UtbWV0YWRhdGEgXCJkZXNjcmlwdGlvbjooP3MpKD9QPG1ldGFfY29tbWVudD4uKylcIiAtLWVtYmVkLW1ldGFkYXRhXG5cbiMgRG8gbm90IHNldCBhbnkgXCJzeW5vcHNpc1wiIGluIHRoZSB2aWRlbyBtZXRhZGF0YVxuJCB5dC1kbHAgLS1wYXJzZS1tZXRhZGF0YSBcIjooP1A8bWV0YV9zeW5vcHNpcz4pXCJcblxuIyBSZW1vdmUgXCJmb3JtYXRzXCIgZmllbGQgZnJvbSB0aGUgaW5mb2pzb24gYnkgc2V0dGluZyBpdCB0byBhbiBlbXB0eSBzdHJpbmdcbiQgeXQtZGxwIC0tcGFyc2UtbWV0YWRhdGEgXCI6KD9QPGZvcm1hdHM+KVwiIC1qXG5cbiMgUmVwbGFjZSBhbGwgc3BhY2VzIGFuZCBcIl9cIiBpbiB0aXRsZSBhbmQgdXBsb2FkZXIgd2l0aCBhIGAtYFxuJCB5dC1kbHAgLS1yZXBsYWNlLWluLW1ldGFkYXRhIFwidGl0bGUsdXBsb2FkZXJcIiBcIlsgX11cIiBcIi1cIlxuXG5gYGBcblxuIyBFWFRSQUNUT1IgQVJHVU1FTlRTXG5cblNvbWUgZXh0cmFjdG9ycyBhY2NlcHQgYWRkaXRpb25hbCBhcmd1bWVudHMgd2hpY2ggY2FuIGJlIHBhc3NlZCB1c2luZyBgLS1leHRyYWN0b3ItYXJncyBLRVk6QVJHU2AuIGBBUkdTYCBpcyBhIGA7YCAoc2VtaWNvbG9uKSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGBBUkc9VkFMMSxWQUwyYC4gRS5nLiBgLS1leHRyYWN0b3ItYXJncyBcInlvdXR1YmU6cGxheWVyLWNsaWVudD1hbmRyb2lkX2VtYmVkZGVkLHdlYjtpbmNsdWRlX2xpdmVfZGFzaFwiIC0tZXh0cmFjdG9yLWFyZ3MgXCJmdW5pbWF0aW9uOnZlcnNpb249dW5jdXRcImBcblxuTm90ZTogSW4gQ0xJLCBgQVJHYCBjYW4gdXNlIGAtYCBpbnN0ZWFkIG9mIGBfYDsgZS5nLiBgeW91dHViZTpwbGF5ZXItY2xpZW50XCJgIGJlY29tZXMgYHlvdXR1YmU6cGxheWVyX2NsaWVudFwiYFxuXG5UaGUgZm9sbG93aW5nIGV4dHJhY3RvcnMgdXNlIHRoaXMgZmVhdHVyZTpcblxuIyMjIyB5b3V0dWJlXG4qIGBsYW5nYDogUHJlZmVyIHRyYW5zbGF0ZWQgbWV0YWRhdGEgKGB0aXRsZWAsIGBkZXNjcmlwdGlvbmAgZXRjKSBvZiB0aGlzIGxhbmd1YWdlIGNvZGUgKGNhc2Utc2Vuc2l0aXZlKS4gQnkgZGVmYXVsdCwgdGhlIHZpZGVvIHByaW1hcnkgbGFuZ3VhZ2UgbWV0YWRhdGEgaXMgcHJlZmVycmVkLCB3aXRoIGEgZmFsbGJhY2sgdG8gYGVuYCB0cmFuc2xhdGVkLiBTZWUgW3lvdXR1YmUucHldKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL2Jsb2IvYzI2ZjliOTkxYTA2ODFmZDNlYTU0OGQ1MzU5MTljZWMxZmJiZDQzMC95dF9kbHAvZXh0cmFjdG9yL3lvdXR1YmUucHkjTDM4MS1MMzkwKSBmb3IgbGlzdCBvZiBzdXBwb3J0ZWQgY29udGVudCBsYW5ndWFnZSBjb2Rlc1xuKiBgc2tpcGA6IE9uZSBvciBtb3JlIG9mIGBobHNgLCBgZGFzaGAgb3IgYHRyYW5zbGF0ZWRfc3Vic2AgdG8gc2tpcCBleHRyYWN0aW9uIG9mIHRoZSBtM3U4IG1hbmlmZXN0cywgZGFzaCBtYW5pZmVzdHMgYW5kIFthdXRvLXRyYW5zbGF0ZWQgc3VidGl0bGVzXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9pc3N1ZXMvNDA5MCNpc3N1ZWNvbW1lbnQtMTE1ODEwMjAzMikgcmVzcGVjdGl2ZWx5XG4qIGBwbGF5ZXJfY2xpZW50YDogQ2xpZW50cyB0byBleHRyYWN0IHZpZGVvIGRhdGEgZnJvbS4gVGhlIG1haW4gY2xpZW50cyBhcmUgYHdlYmAsIGBhbmRyb2lkYCBhbmQgYGlvc2Agd2l0aCB2YXJpYW50cyBgX211c2ljYCwgYF9lbWJlZGRlZGAsIGBfZW1iZWRzY3JlZW5gLCBgX2NyZWF0b3JgIChlLmcuIGB3ZWJfZW1iZWRkZWRgKTsgYW5kIGBtd2ViYCBhbmQgYHR2X2VtYmVkZGVkYCAoYWdlZ2F0ZSBieXBhc3MpIHdpdGggbm8gdmFyaWFudHMuIEJ5IGRlZmF1bHQsIGBhbmRyb2lkLHdlYmAgaXMgdXNlZCwgYnV0IGB0dl9lbWJlZGRlZGAgYW5kIGBjcmVhdG9yYCB2YXJpYW50cyBhcmUgYWRkZWQgYXMgcmVxdWlyZWQgZm9yIGFnZS1nYXRlZCB2aWRlb3MuIFNpbWlsYXJseSwgdGhlIG11c2ljIHZhcmlhbnRzIGFyZSBhZGRlZCBmb3IgYG11c2ljLnlvdXR1YmUuY29tYCB1cmxzLiBZb3UgY2FuIHVzZSBgYWxsYCB0byB1c2UgYWxsIHRoZSBjbGllbnRzLCBhbmQgYGRlZmF1bHRgIGZvciB0aGUgZGVmYXVsdCBjbGllbnRzLlxuKiBgcGxheWVyX3NraXBgOiBTa2lwIHNvbWUgbmV0d29yayByZXF1ZXN0cyB0aGF0IGFyZSBnZW5lcmFsbHkgbmVlZGVkIGZvciByb2J1c3QgZXh0cmFjdGlvbi4gT25lIG9yIG1vcmUgb2YgYGNvbmZpZ3NgIChza2lwIGNsaWVudCBjb25maWdzKSwgYHdlYnBhZ2VgIChza2lwIGluaXRpYWwgd2VicGFnZSksIGBqc2AgKHNraXAganMgcGxheWVyKS4gV2hpbGUgdGhlc2Ugb3B0aW9ucyBjYW4gaGVscCByZWR1Y2UgdGhlIG51bWJlciBvZiByZXF1ZXN0cyBuZWVkZWQgb3IgYXZvaWQgc29tZSByYXRlLWxpbWl0aW5nLCB0aGV5IGNvdWxkIGNhdXNlIHNvbWUgaXNzdWVzLiBTZWUgWyM4NjBdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3B1bGwvODYwKSBmb3IgbW9yZSBkZXRhaWxzXG4qIGBjb21tZW50X3NvcnRgOiBgdG9wYCBvciBgbmV3YCAoZGVmYXVsdCkgLSBjaG9vc2UgY29tbWVudCBzb3J0aW5nIG1vZGUgKG9uIFlvdVR1YmUncyBzaWRlKVxuKiBgbWF4X2NvbW1lbnRzYDogTGltaXQgdGhlIGFtb3VudCBvZiBjb21tZW50cyB0byBnYXRoZXIuIENvbW1hLXNlcGFyYXRlZCBsaXN0IG9mIGludGVnZXJzIHJlcHJlc2VudGluZyBgbWF4LWNvbW1lbnRzLG1heC1wYXJlbnRzLG1heC1yZXBsaWVzLG1heC1yZXBsaWVzLXBlci10aHJlYWRgLiBEZWZhdWx0IGlzIGBhbGwsYWxsLGFsbCxhbGxgXG4gICAgKiBFLmcuIGBhbGwsYWxsLDEwMDAsMTBgIHdpbGwgZ2V0IGEgbWF4aW11bSBvZiAxMDAwIHJlcGxpZXMgdG90YWwsIHdpdGggdXAgdG8gMTAgcmVwbGllcyBwZXIgdGhyZWFkLiBgMTAwMCxhbGwsMTAwYCB3aWxsIGdldCBhIG1heGltdW0gb2YgMTAwMCBjb21tZW50cywgd2l0aCBhIG1heGltdW0gb2YgMTAwIHJlcGxpZXMgdG90YWxcbiogYGluY2x1ZGVfZHVwbGljYXRlX2Zvcm1hdHNgOiBFeHRyYWN0IGZvcm1hdHMgd2l0aCBpZGVudGljYWwgY29udGVudCBidXQgZGlmZmVyZW50IFVSTHMgb3IgcHJvdG9jb2wuIFRoaXMgaXMgdXNlZnVsIGlmIHNvbWUgb2YgdGhlIGZvcm1hdHMgYXJlIHVuYXZhaWxhYmxlIG9yIHRocm90dGxlZC5cbiogYGluY2x1ZGVfaW5jb21wbGV0ZV9mb3JtYXRzYDogRXh0cmFjdCBmb3JtYXRzIHRoYXQgY2Fubm90IGJlIGRvd25sb2FkZWQgY29tcGxldGVseSAobGl2ZSBkYXNoIGFuZCBwb3N0LWxpdmUgbTN1OClcbiogYGlubmVydHViZV9ob3N0YDogSW5uZXJ0dWJlIEFQSSBob3N0IHRvIHVzZSBmb3IgYWxsIEFQSSByZXF1ZXN0czsgZS5nLiBgc3R1ZGlvLnlvdXR1YmUuY29tYCwgYHlvdXR1YmVpLmdvb2dsZWFwaXMuY29tYC4gTm90ZSB0aGF0IGNvb2tpZXMgZXhwb3J0ZWQgZnJvbSBvbmUgc3ViZG9tYWluIHdpbGwgbm90IHdvcmsgb24gb3RoZXJzXG4qIGBpbm5lcnR1YmVfa2V5YDogSW5uZXJ0dWJlIEFQSSBrZXkgdG8gdXNlIGZvciBhbGwgQVBJIHJlcXVlc3RzXG5cbiMjIyMgeW91dHViZXRhYiAoWW91VHViZSBwbGF5bGlzdHMsIGNoYW5uZWxzLCBmZWVkcywgZXRjLilcbiogYHNraXBgOiBPbmUgb3IgbW9yZSBvZiBgd2VicGFnZWAgKHNraXAgaW5pdGlhbCB3ZWJwYWdlIGRvd25sb2FkKSwgYGF1dGhjaGVja2AgKGFsbG93IHRoZSBkb3dubG9hZCBvZiBwbGF5bGlzdHMgcmVxdWlyaW5nIGF1dGhlbnRpY2F0aW9uIHdoZW4gbm8gaW5pdGlhbCB3ZWJwYWdlIGlzIGRvd25sb2FkZWQuIFRoaXMgbWF5IGNhdXNlIHVud2FudGVkIGJlaGF2aW9yLCBzZWUgWyMxMTIyXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9wdWxsLzExMjIpIGZvciBtb3JlIGRldGFpbHMpXG4qIGBhcHByb3hpbWF0ZV9kYXRlYDogRXh0cmFjdCBhcHByb3hpbWF0ZSBgdXBsb2FkX2RhdGVgIGFuZCBgdGltZXN0YW1wYCBpbiBmbGF0LXBsYXlsaXN0LiBUaGlzIG1heSBjYXVzZSBkYXRlLWJhc2VkIGZpbHRlcnMgdG8gYmUgc2xpZ2h0bHkgb2ZmXG5cbiMjIyMgZ2VuZXJpY1xuKiBgZnJhZ21lbnRfcXVlcnlgOiBQYXNzdGhyb3VnaCBhbnkgcXVlcnkgaW4gbXBkL20zdTggbWFuaWZlc3QgVVJMcyB0byB0aGVpciBmcmFnbWVudHMuIERvZXMgbm90IGFwcGx5IHRvIGZmbXBlZ1xuKiBgdmFyaWFudF9xdWVyeWA6IFBhc3N0aHJvdWdoIHRoZSBtYXN0ZXIgbTN1OCBVUkwgcXVlcnkgdG8gaXRzIHZhcmlhbnQgcGxheWxpc3QgVVJMc1xuKiBgaGxzX2tleWA6IEFuIEhMUyBBRVMtMTI4IGtleSBVUkkgKm9yKiBrZXkgKGFzIGhleCksIGFuZCBvcHRpb25hbGx5IHRoZSBJViAoYXMgaGV4KSwgaW4gdGhlIGZvcm0gb2YgYChVUkl8S0VZKVssSVZdYDsgZS5nLiBgZ2VuZXJpYzpobHNfa2V5PUFCQ0RFRjEyMzQ1Njc5ODAsMHhGRURDQkEwOTg3NjU0MzIxYC4gUGFzc2luZyBhbnkgb2YgdGhlc2UgdmFsdWVzIHdpbGwgZm9yY2UgdXNhZ2Ugb2YgdGhlIG5hdGl2ZSBITFMgZG93bmxvYWRlciBhbmQgb3ZlcnJpZGUgdGhlIGNvcnJlc3BvbmRpbmcgdmFsdWVzIGZvdW5kIGluIHRoZSBtM3U4IHBsYXlsaXN0XG5cbiMjIyMgZnVuaW1hdGlvblxuKiBgbGFuZ3VhZ2VgOiBBdWRpbyBsYW5ndWFnZXMgdG8gZXh0cmFjdCwgZS5nLiBgZnVuaW1hdGlvbjpsYW5ndWFnZT1lbmdsaXNoLGphcGFuZXNlYFxuKiBgdmVyc2lvbmA6IFRoZSB2aWRlbyB2ZXJzaW9uIHRvIGV4dHJhY3QgLSBgdW5jdXRgIG9yIGBzaW11bGNhc3RgXG5cbiMjIyMgY3J1bmNoeXJvbGxiZXRhIChDcnVuY2h5cm9sbClcbiogYGZvcm1hdGA6IFdoaWNoIHN0cmVhbSB0eXBlKHMpIHRvIGV4dHJhY3QgKGRlZmF1bHQ6IGBhZGFwdGl2ZV9obHNgKS4gUG90ZW50aWFsbHkgdXNlZnVsIHZhbHVlcyBpbmNsdWRlIGBhZGFwdGl2ZV9obHNgLCBgYWRhcHRpdmVfZGFzaGAsIGB2b19hZGFwdGl2ZV9obHNgLCBgdm9fYWRhcHRpdmVfZGFzaGAsIGBkb3dubG9hZF9obHNgLCBgZG93bmxvYWRfZGFzaGAsIGBtdWx0aXRyYWNrX2FkYXB0aXZlX2hsc192MmBcbiogYGhhcmRzdWJgOiBQcmVmZXJlbmNlIG9yZGVyIGZvciB3aGljaCBoYXJkc3ViIHZlcnNpb25zIHRvIGV4dHJhY3QsIG9yIGBhbGxgIChkZWZhdWx0OiBgTm9uZWAgPSBubyBoYXJkc3VicyksIGUuZy4gYGNydW5jaHlyb2xsYmV0YTpoYXJkc3ViPWVuLVVTLE5vbmVgXG5cbiMjIyMgdmlraWNoYW5uZWxcbiogYHZpZGVvX3R5cGVzYDogVHlwZXMgb2YgdmlkZW9zIHRvIGRvd25sb2FkIC0gb25lIG9yIG1vcmUgb2YgYGVwaXNvZGVzYCwgYG1vdmllc2AsIGBjbGlwc2AsIGB0cmFpbGVyc2BcblxuIyMjIyBuaWNvbmljb1xuKiBgc2VnbWVudF9kdXJhdGlvbmA6IFNlZ21lbnQgZHVyYXRpb24gaW4gbWlsbGlzZWNvbmRzIGZvciBITFMtRE1DIGZvcm1hdHMuIFVzZSBpdCBhdCB5b3VyIG93biByaXNrIHNpbmNlIHRoaXMgZmVhdHVyZSAqKm1heSByZXN1bHQgaW4geW91ciBhY2NvdW50IHRlcm1pbmF0aW9uLioqXG5cbiMjIyMgeW91dHViZXdlYmFyY2hpdmVcbiogYGNoZWNrX2FsbGA6IFRyeSB0byBjaGVjayBtb3JlIGF0IHRoZSBjb3N0IG9mIG1vcmUgcmVxdWVzdHMuIE9uZSBvciBtb3JlIG9mIGB0aHVtYm5haWxzYCwgYGNhcHR1cmVzYFxuXG4jIyMjIGdhbWVqb2x0XG4qIGBjb21tZW50X3NvcnRgOiBgaG90YCAoZGVmYXVsdCksIGB5b3VgIChjb29raWVzIG5lZWRlZCksIGB0b3BgLCBgbmV3YCAtIGNob29zZSBjb21tZW50IHNvcnRpbmcgbW9kZSAob24gR2FtZUpvbHQncyBzaWRlKVxuXG4jIyMjIGhvdHN0YXJcbiogYHJlc2A6IHJlc29sdXRpb24gdG8gaWdub3JlIC0gb25lIG9yIG1vcmUgb2YgYHNkYCwgYGhkYCwgYGZoZGBcbiogYHZjb2RlY2A6IHZjb2RlYyB0byBpZ25vcmUgLSBvbmUgb3IgbW9yZSBvZiBgaDI2NGAsIGBoMjY1YCwgYGR2aDI2NWBcbiogYGRyYDogZHluYW1pYyByYW5nZSB0byBpZ25vcmUgLSBvbmUgb3IgbW9yZSBvZiBgc2RyYCwgYGhkcjEwYCwgYGR2YFxuXG4jIyMjIHRpa3Rva1xuKiBgYXBpX2hvc3RuYW1lYDogSG9zdG5hbWUgdG8gdXNlIGZvciBtb2JpbGUgQVBJIHJlcXVlc3RzLCBlLmcuIGBhcGktaDIudGlrdG9rdi5jb21gXG4qIGBhcHBfdmVyc2lvbmA6IEFwcCB2ZXJzaW9uIHRvIGNhbGwgbW9iaWxlIEFQSXMgd2l0aCAtIHNob3VsZCBiZSBzZXQgYWxvbmcgd2l0aCBgbWFuaWZlc3RfYXBwX3ZlcnNpb25gLCBlLmcuIGAyMC4yLjFgXG4qIGBtYW5pZmVzdF9hcHBfdmVyc2lvbmA6IE51bWVyaWMgYXBwIHZlcnNpb24gdG8gY2FsbCBtb2JpbGUgQVBJcyB3aXRoLCBlLmcuIGAyMjFgXG5cbiMjIyMgcm9rZmluY2hhbm5lbFxuKiBgdGFiYDogV2hpY2ggdGFiIHRvIGRvd25sb2FkIC0gb25lIG9mIGBuZXdgLCBgdG9wYCwgYHZpZGVvc2AsIGBwb2RjYXN0c2AsIGBzdHJlYW1zYCwgYHN0YWNrc2BcblxuIyMjIyB0d2l0dGVyXG4qIGBmb3JjZV9ncmFwaHFsYDogRm9yY2UgdXNhZ2Ugb2YgdGhlIEdyYXBoUUwgQVBJLiBCeSBkZWZhdWx0IGl0IHdpbGwgb25seSBiZSB1c2VkIGlmIGxvZ2luIGNvb2tpZXMgYXJlIHByb3ZpZGVkXG5cbioqTm90ZSoqOiBUaGVzZSBvcHRpb25zIG1heSBiZSBjaGFuZ2VkL3JlbW92ZWQgaW4gdGhlIGZ1dHVyZSB3aXRob3V0IGNvbmNlcm4gZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblxuPCEtLSBNQU5QQUdFOiBNT1ZFIFwiSU5TVEFMTEFUSU9OXCIgU0VDVElPTiBIRVJFIC0tPlxuXG5cbiMgUExVR0lOU1xuXG5Ob3RlIHRoYXQgKiphbGwqKiBwbHVnaW5zIGFyZSBpbXBvcnRlZCBldmVuIGlmIG5vdCBpbnZva2VkLCBhbmQgdGhhdCAqKnRoZXJlIGFyZSBubyBjaGVja3MqKiBwZXJmb3JtZWQgb24gcGx1Z2luIGNvZGUuICoqVXNlIHBsdWdpbnMgYXQgeW91ciBvd24gcmlzayBhbmQgb25seSBpZiB5b3UgdHJ1c3QgdGhlIGNvZGUhKipcblxuUGx1Z2lucyBjYW4gYmUgb2YgYDx0eXBlPmBzIGBleHRyYWN0b3JgIG9yIGBwb3N0cHJvY2Vzc29yYC4gXG4tIEV4dHJhY3RvciBwbHVnaW5zIGRvIG5vdCBuZWVkIHRvIGJlIGVuYWJsZWQgZnJvbSB0aGUgQ0xJIGFuZCBhcmUgYXV0b21hdGljYWxseSBpbnZva2VkIHdoZW4gdGhlIGlucHV0IFVSTCBpcyBzdWl0YWJsZSBmb3IgaXQuIFxuLSBFeHRyYWN0b3IgcGx1Z2lucyB0YWtlIHByaW9yaXR5IG92ZXIgYnVpbHRpbiBleHRyYWN0b3JzLlxuLSBQb3N0cHJvY2Vzc29yIHBsdWdpbnMgY2FuIGJlIGludm9rZWQgdXNpbmcgYC0tdXNlLXBvc3Rwcm9jZXNzb3IgTkFNRWAuXG5cblxuUGx1Z2lucyBhcmUgbG9hZGVkIGZyb20gdGhlIG5hbWVzcGFjZSBwYWNrYWdlcyBgeXRfZGxwX3BsdWdpbnMuZXh0cmFjdG9yYCBhbmQgYHl0X2RscF9wbHVnaW5zLnBvc3Rwcm9jZXNzb3JgLlxuXG5JbiBvdGhlciB3b3JkcywgdGhlIGZpbGUgc3RydWN0dXJlIG9uIHRoZSBkaXNrIGxvb2tzIHNvbWV0aGluZyBsaWtlOlxuICAgIFxuICAgICAgICB5dF9kbHBfcGx1Z2lucy9cbiAgICAgICAgICAgIGV4dHJhY3Rvci9cbiAgICAgICAgICAgICAgICBteXBsdWdpbi5weVxuICAgICAgICAgICAgcG9zdHByb2Nlc3Nvci9cbiAgICAgICAgICAgICAgICBteXBsdWdpbi5weVxuXG55dC1kbHAgbG9va3MgZm9yIHRoZXNlIGB5dF9kbHBfcGx1Z2luc2AgbmFtZXNwYWNlIGZvbGRlcnMgaW4gbWFueSBsb2NhdGlvbnMgKHNlZSBiZWxvdykgYW5kIGxvYWRzIGluIHBsdWdpbnMgZnJvbSAqKmFsbCoqIG9mIHRoZW0uXG5cblNlZSB0aGUgW3dpa2kgZm9yIHNvbWUga25vd24gcGx1Z2luc10oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvd2lraS9QbHVnaW5zKVxuXG4jIyBJbnN0YWxsaW5nIFBsdWdpbnNcblxuUGx1Z2lucyBjYW4gYmUgaW5zdGFsbGVkIHVzaW5nIHZhcmlvdXMgbWV0aG9kcyBhbmQgbG9jYXRpb25zLlxuXG4xLiAqKkNvbmZpZ3VyYXRpb24gZGlyZWN0b3JpZXMqKjpcbiAgIFBsdWdpbiBwYWNrYWdlcyAoY29udGFpbmluZyBhIGB5dF9kbHBfcGx1Z2luc2AgbmFtZXNwYWNlIGZvbGRlcikgY2FuIGJlIGRyb3BwZWQgaW50byB0aGUgZm9sbG93aW5nIHN0YW5kYXJkIFtjb25maWd1cmF0aW9uIGxvY2F0aW9uc10oI2NvbmZpZ3VyYXRpb24pOlxuICAgICogKipVc2VyIFBsdWdpbnMqKlxuICAgICAgKiBgJHtYREdfQ09ORklHX0hPTUV9L3l0LWRscC9wbHVnaW5zLzxwYWNrYWdlIG5hbWU+L3l0X2RscF9wbHVnaW5zL2AgKHJlY29tbWVuZGVkIG9uIExpbnV4L21hY09TKVxuICAgICAgKiBgJHtYREdfQ09ORklHX0hPTUV9L3l0LWRscC1wbHVnaW5zLzxwYWNrYWdlIG5hbWU+L3l0X2RscF9wbHVnaW5zL2BcbiAgICAgICogYCR7QVBQREFUQX0veXQtZGxwL3BsdWdpbnMvPHBhY2thZ2UgbmFtZT4veXRfZGxwX3BsdWdpbnMvYCAocmVjb21tZW5kZWQgb24gV2luZG93cylcbiAgICAgICogYCR7QVBQREFUQX0veXQtZGxwLXBsdWdpbnMvPHBhY2thZ2UgbmFtZT4veXRfZGxwX3BsdWdpbnMvYFxuICAgICAgKiBgfi8ueXQtZGxwL3BsdWdpbnMvPHBhY2thZ2UgbmFtZT4veXRfZGxwX3BsdWdpbnMvYFxuICAgICAgKiBgfi95dC1kbHAtcGx1Z2lucy88cGFja2FnZSBuYW1lPi95dF9kbHBfcGx1Z2lucy9gXG4gICAgKiAqKlN5c3RlbSBQbHVnaW5zKipcbiAgICAgICogYC9ldGMveXQtZGxwL3BsdWdpbnMvPHBhY2thZ2UgbmFtZT4veXRfZGxwX3BsdWdpbnMvYFxuICAgICAgKiBgL2V0Yy95dC1kbHAtcGx1Z2lucy88cGFja2FnZSBuYW1lPi95dF9kbHBfcGx1Z2lucy9gXG4yLiAqKkV4ZWN1dGFibGUgbG9jYXRpb24qKjogUGx1Z2luIHBhY2thZ2VzIGNhbiBzaW1pbGFybHkgYmUgaW5zdGFsbGVkIGluIGEgYHl0LWRscC1wbHVnaW5zYCBkaXJlY3RvcnkgdW5kZXIgdGhlIGV4ZWN1dGFibGUgbG9jYXRpb246XG4gICAgKiBCaW5hcnk6IHdoZXJlIGA8cm9vdC1kaXI+L3l0LWRscC5leGVgLCBgPHJvb3QtZGlyPi95dC1kbHAtcGx1Z2lucy88cGFja2FnZSBuYW1lPi95dF9kbHBfcGx1Z2lucy9gXG4gICAgKiBTb3VyY2U6IHdoZXJlIGA8cm9vdC1kaXI+L3l0X2RscC9fX21haW5fXy5weWAsIGA8cm9vdC1kaXI+L3l0LWRscC1wbHVnaW5zLzxwYWNrYWdlIG5hbWU+L3l0X2RscF9wbHVnaW5zL2BcblxuMy4gKipwaXAgYW5kIG90aGVyIGxvY2F0aW9ucyBpbiBgUFlUSE9OUEFUSGAqKlxuICAgICogUGx1Z2luIHBhY2thZ2VzIGNhbiBiZSBpbnN0YWxsZWQgYW5kIG1hbmFnZWQgdXNpbmcgYHBpcGAuIFNlZSBbeXQtZGxwLXNhbXBsZS1wbHVnaW5zXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC1zYW1wbGUtcGx1Z2lucykgZm9yIGFuIGV4YW1wbGUuXG4gICAgICAqIE5vdGU6IHBsdWdpbiBmaWxlcyBiZXR3ZWVuIHBsdWdpbiBwYWNrYWdlcyBpbnN0YWxsZWQgd2l0aCBwaXAgbXVzdCBoYXZlIHVuaXF1ZSBmaWxlbmFtZXMuXG4gICAgKiBBbnkgcGF0aCBpbiBgUFlUSE9OUEFUSGAgaXMgc2VhcmNoZWQgaW4gZm9yIHRoZSBgeXRfZGxwX3BsdWdpbnNgIG5hbWVzcGFjZSBmb2xkZXIuXG4gICAgICAqIE5vdGU6IFRoaXMgZG9lcyBub3QgYXBwbHkgZm9yIFB5aW5zdGFsbGVyL3B5MmV4ZSBidWlsZHMuXG5cblxuYC56aXBgLCBgLmVnZ2AgYW5kIGAud2hsYCBhcmNoaXZlcyBjb250YWluaW5nIGEgYHl0X2RscF9wbHVnaW5zYCBuYW1lc3BhY2UgZm9sZGVyIGluIHRoZWlyIHJvb3QgYXJlIGFsc28gc3VwcG9ydGVkIGFzIHBsdWdpbiBwYWNrYWdlcy5cbiogZS5nLiBgJHtYREdfQ09ORklHX0hPTUV9L3l0LWRscC9wbHVnaW5zL215cGx1Z2lucGtnLnppcGAgd2hlcmUgYG15cGx1Z2lucGtnLnppcGAgY29udGFpbnMgYHl0X2RscF9wbHVnaW5zLzx0eXBlPi9teXBsdWdpbi5weWBcblxuUnVuIHl0LWRscCB3aXRoIGAtLXZlcmJvc2VgIHRvIGNoZWNrIGlmIHRoZSBwbHVnaW4gaGFzIGJlZW4gbG9hZGVkLlxuXG4jIyBEZXZlbG9waW5nIFBsdWdpbnNcblxuU2VlIHRoZSBbeXQtZGxwLXNhbXBsZS1wbHVnaW5zXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC1zYW1wbGUtcGx1Z2lucykgcmVwbyBmb3IgYSB0ZW1wbGF0ZSBwbHVnaW4gcGFja2FnZSBhbmQgdGhlIFtQbHVnaW4gRGV2ZWxvcG1lbnRdKGh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwL3dpa2kvUGx1Z2luLURldmVsb3BtZW50KSBzZWN0aW9uIG9mIHRoZSB3aWtpIGZvciBhIHBsdWdpbiBkZXZlbG9wbWVudCBndWlkZS5cblxuQWxsIHB1YmxpYyBjbGFzc2VzIHdpdGggYSBuYW1lIGVuZGluZyBpbiBgSUVgL2BQUGAgYXJlIGltcG9ydGVkIGZyb20gZWFjaCBmaWxlIGZvciBleHRyYWN0b3JzIGFuZCBwb3N0cHJvY2Vzc29ycyByZXBlY3RpdmVseS4gVGhpcyByZXNwZWN0cyB1bmRlcnNjb3JlIHByZWZpeCAoZS5nLiBgX015QmFzZVBsdWdpbklFYCBpcyBwcml2YXRlKSBhbmQgYF9fYWxsX19gLiBNb2R1bGVzIGNhbiBzaW1pbGFybHkgYmUgZXhjbHVkZWQgYnkgcHJlZml4aW5nIHRoZSBtb2R1bGUgbmFtZSB3aXRoIGFuIHVuZGVyc2NvcmUgKGUuZy4gYF9teXBsdWdpbi5weWApLlxuXG5UbyByZXBsYWNlIGFuIGV4aXN0aW5nIGV4dHJhY3RvciB3aXRoIGEgc3ViY2xhc3Mgb2Ygb25lLCBzZXQgdGhlIGBwbHVnaW5fbmFtZWAgY2xhc3Mga2V5d29yZCBhcmd1bWVudCAoZS5nLiBgY2xhc3MgTXlQbHVnaW5JRShBQnVpbHRJbklFLCBwbHVnaW5fbmFtZT0nbXlwbHVnaW4nKWAgd2lsbCByZXBsYWNlIGBBQnVpbHRJbklFYCB3aXRoIGBNeVBsdWdpbklFYCkuIFNpbmNlIHRoZSBleHRyYWN0b3IgcmVwbGFjZXMgdGhlIHBhcmVudCwgeW91IHNob3VsZCBleGNsdWRlIHRoZSBzdWJjbGFzcyBleHRyYWN0b3IgZnJvbSBiZWluZyBpbXBvcnRlZCBzZXBhcmF0ZWx5IGJ5IG1ha2luZyBpdCBwcml2YXRlIHVzaW5nIG9uZSBvZiB0aGUgbWV0aG9kcyBkZXNjcmliZWQgYWJvdmUuXG5cbklmIHlvdSBhcmUgYSBwbHVnaW4gYXV0aG9yLCBhZGQgW3l0LWRscC1wbHVnaW5zXShodHRwczovL2dpdGh1Yi5jb20vdG9waWNzL3l0LWRscC1wbHVnaW5zKSBhcyBhIHRvcGljIHRvIHlvdXIgcmVwb3NpdG9yeSBmb3IgZGlzY292ZXJhYmlsaXR5LlxuXG5TZWUgdGhlIFtEZXZlbG9wZXIgSW5zdHJ1Y3Rpb25zXShodHRwczovL2dpdGh1Yi5jb20veXQtZGxwL3l0LWRscC9ibG9iL21hc3Rlci9DT05UUklCVVRJTkcubWQjZGV2ZWxvcGVyLWluc3RydWN0aW9ucykgb24gaG93IHRvIHdyaXRlIGFuZCB0ZXN0IGFuIGV4dHJhY3Rvci5cblxuIyBFTUJFRERJTkcgWVQtRExQXG5cbnl0LWRscCBtYWtlcyB0aGUgYmVzdCBlZmZvcnQgdG8gYmUgYSBnb29kIGNvbW1hbmQtbGluZSBwcm9ncmFtLCBhbmQgdGh1cyBzaG91bGQgYmUgY2FsbGFibGUgZnJvbSBhbnkgcHJvZ3JhbW1pbmcgbGFuZ3VhZ2UuXG5cbllvdXIgcHJvZ3JhbSBzaG91bGQgYXZvaWQgcGFyc2luZyB0aGUgbm9ybWFsIHN0ZG91dCBzaW5jZSB0aGV5IG1heSBjaGFuZ2UgaW4gZnV0dXJlIHZlcnNpb25zLiBJbnN0ZWFkIHRoZXkgc2hvdWxkIHVzZSBvcHRpb25zIHN1Y2ggYXMgYC1KYCwgYC0tcHJpbnRgLCBgLS1wcm9ncmVzcy10ZW1wbGF0ZWAsIGAtLWV4ZWNgIGV0YyB0byBjcmVhdGUgY29uc29sZSBvdXRwdXQgdGhhdCB5b3UgY2FuIHJlbGlhYmx5IHJlcHJvZHVjZSBhbmQgcGFyc2UuXG5cbkZyb20gYSBQeXRob24gcHJvZ3JhbSwgeW91IGNhbiBlbWJlZCB5dC1kbHAgaW4gYSBtb3JlIHBvd2VyZnVsIGZhc2hpb24sIGxpa2UgdGhpczpcblxuYGBgcHl0aG9uXG5mcm9tIHl0X2RscCBpbXBvcnQgWW91dHViZURMXG5cblVSTFMgPSBbJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9QmFXX2plbm96S2MnXVxud2l0aCBZb3V0dWJlREwoKSBhcyB5ZGw6XG4gICAgeWRsLmRvd25sb2FkKFVSTFMpXG5gYGBcblxuTW9zdCBsaWtlbHksIHlvdSdsbCB3YW50IHRvIHVzZSB2YXJpb3VzIG9wdGlvbnMuIEZvciBhIGxpc3Qgb2Ygb3B0aW9ucyBhdmFpbGFibGUsIGhhdmUgYSBsb29rIGF0IFtgeXRfZGxwL1lvdXR1YmVETC5weWBdKHl0X2RscC9Zb3V0dWJlREwucHkjTDE4NCkuXG5cbioqVGlwKio6IElmIHlvdSBhcmUgcG9ydGluZyB5b3VyIGNvZGUgZnJvbSB5b3V0dWJlLWRsIHRvIHl0LWRscCwgb25lIGltcG9ydGFudCBwb2ludCB0byBsb29rIG91dCBmb3IgaXMgdGhhdCB3ZSBkbyBub3QgZ3VhcmFudGVlIHRoZSByZXR1cm4gdmFsdWUgb2YgYFlvdXR1YmVETC5leHRyYWN0X2luZm9gIHRvIGJlIGpzb24gc2VyaWFsaXphYmxlLCBvciBldmVuIGJlIGEgZGljdGlvbmFyeS4gSXQgd2lsbCBiZSBkaWN0aW9uYXJ5LWxpa2UsIGJ1dCBpZiB5b3Ugd2FudCB0byBlbnN1cmUgaXQgaXMgYSBzZXJpYWxpemFibGUgZGljdGlvbmFyeSwgcGFzcyBpdCB0aHJvdWdoIGBZb3V0dWJlREwuc2FuaXRpemVfaW5mb2AgYXMgc2hvd24gaW4gdGhlIFtleGFtcGxlIGJlbG93XSgjZXh0cmFjdGluZy1pbmZvcm1hdGlvbilcblxuIyMgRW1iZWRkaW5nIGV4YW1wbGVzXG5cbiMjIyMgRXh0cmFjdGluZyBpbmZvcm1hdGlvblxuXG5gYGBweXRob25cbmltcG9ydCBqc29uXG5pbXBvcnQgeXRfZGxwXG5cblVSTCA9ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUJhV19qZW5vektjJ1xuXG4jIOKEue+4jyBTZWUgaGVscCh5dF9kbHAuWW91dHViZURMKSBmb3IgYSBsaXN0IG9mIGF2YWlsYWJsZSBvcHRpb25zIGFuZCBwdWJsaWMgZnVuY3Rpb25zXG55ZGxfb3B0cyA9IHt9XG53aXRoIHl0X2RscC5Zb3V0dWJlREwoeWRsX29wdHMpIGFzIHlkbDpcbiAgICBpbmZvID0geWRsLmV4dHJhY3RfaW5mbyhVUkwsIGRvd25sb2FkPUZhbHNlKVxuXG4gICAgIyDihLnvuI8geWRsLnNhbml0aXplX2luZm8gbWFrZXMgdGhlIGluZm8ganNvbi1zZXJpYWxpemFibGVcbiAgICBwcmludChqc29uLmR1bXBzKHlkbC5zYW5pdGl6ZV9pbmZvKGluZm8pKSlcbmBgYFxuIyMjIyBEb3dubG9hZCB1c2luZyBhbiBpbmZvLWpzb25cblxuYGBgcHl0aG9uXG5pbXBvcnQgeXRfZGxwXG5cbklORk9fRklMRSA9ICdwYXRoL3RvL3ZpZGVvLmluZm8uanNvbidcblxud2l0aCB5dF9kbHAuWW91dHViZURMKCkgYXMgeWRsOlxuICAgIGVycm9yX2NvZGUgPSB5ZGwuZG93bmxvYWRfd2l0aF9pbmZvX2ZpbGUoSU5GT19GSUxFKVxuXG5wcmludCgnU29tZSB2aWRlb3MgZmFpbGVkIHRvIGRvd25sb2FkJyBpZiBlcnJvcl9jb2RlXG4gICAgICBlbHNlICdBbGwgdmlkZW9zIHN1Y2Nlc3NmdWxseSBkb3dubG9hZGVkJylcbmBgYFxuXG4jIyMjIEV4dHJhY3QgYXVkaW9cblxuYGBgcHl0aG9uXG5pbXBvcnQgeXRfZGxwXG5cblVSTFMgPSBbJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9QmFXX2plbm96S2MnXVxuXG55ZGxfb3B0cyA9IHtcbiAgICAnZm9ybWF0JzogJ200YS9iZXN0YXVkaW8vYmVzdCcsXG4gICAgIyDihLnvuI8gU2VlIGhlbHAoeXRfZGxwLnBvc3Rwcm9jZXNzb3IpIGZvciBhIGxpc3Qgb2YgYXZhaWxhYmxlIFBvc3Rwcm9jZXNzb3JzIGFuZCB0aGVpciBhcmd1bWVudHNcbiAgICAncG9zdHByb2Nlc3NvcnMnOiBbeyAgIyBFeHRyYWN0IGF1ZGlvIHVzaW5nIGZmbXBlZ1xuICAgICAgICAna2V5JzogJ0ZGbXBlZ0V4dHJhY3RBdWRpbycsXG4gICAgICAgICdwcmVmZXJyZWRjb2RlYyc6ICdtNGEnLFxuICAgIH1dXG59XG5cbndpdGggeXRfZGxwLllvdXR1YmVETCh5ZGxfb3B0cykgYXMgeWRsOlxuICAgIGVycm9yX2NvZGUgPSB5ZGwuZG93bmxvYWQoVVJMUylcbmBgYFxuXG4jIyMjIEZpbHRlciB2aWRlb3NcblxuYGBgcHl0aG9uXG5pbXBvcnQgeXRfZGxwXG5cblVSTFMgPSBbJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9QmFXX2plbm96S2MnXVxuXG5kZWYgbG9uZ2VyX3RoYW5fYV9taW51dGUoaW5mbywgKiwgaW5jb21wbGV0ZSk6XG4gICAgXCJcIlwiRG93bmxvYWQgb25seSB2aWRlb3MgbG9uZ2VyIHRoYW4gYSBtaW51dGUgKG9yIHdpdGggdW5rbm93biBkdXJhdGlvbilcIlwiXCJcbiAgICBkdXJhdGlvbiA9IGluZm8uZ2V0KCdkdXJhdGlvbicpXG4gICAgaWYgZHVyYXRpb24gYW5kIGR1cmF0aW9uIDwgNjA6XG4gICAgICAgIHJldHVybiAnVGhlIHZpZGVvIGlzIHRvbyBzaG9ydCdcblxueWRsX29wdHMgPSB7XG4gICAgJ21hdGNoX2ZpbHRlcic6IGxvbmdlcl90aGFuX2FfbWludXRlLFxufVxuXG53aXRoIHl0X2RscC5Zb3V0dWJlREwoeWRsX29wdHMpIGFzIHlkbDpcbiAgICBlcnJvcl9jb2RlID0geWRsLmRvd25sb2FkKFVSTFMpXG5gYGBcblxuIyMjIyBBZGRpbmcgbG9nZ2VyIGFuZCBwcm9ncmVzcyBob29rXG5cbmBgYHB5dGhvblxuaW1wb3J0IHl0X2RscFxuXG5VUkxTID0gWydodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUJhV19qZW5vektjJ11cblxuY2xhc3MgTXlMb2dnZXI6XG4gICAgZGVmIGRlYnVnKHNlbGYsIG1zZyk6XG4gICAgICAgICMgRm9yIGNvbXBhdGliaWxpdHkgd2l0aCB5b3V0dWJlLWRsLCBib3RoIGRlYnVnIGFuZCBpbmZvIGFyZSBwYXNzZWQgaW50byBkZWJ1Z1xuICAgICAgICAjIFlvdSBjYW4gZGlzdGluZ3Vpc2ggdGhlbSBieSB0aGUgcHJlZml4ICdbZGVidWddICdcbiAgICAgICAgaWYgbXNnLnN0YXJ0c3dpdGgoJ1tkZWJ1Z10gJyk6XG4gICAgICAgICAgICBwYXNzXG4gICAgICAgIGVsc2U6XG4gICAgICAgICAgICBzZWxmLmluZm8obXNnKVxuXG4gICAgZGVmIGluZm8oc2VsZiwgbXNnKTpcbiAgICAgICAgcGFzc1xuXG4gICAgZGVmIHdhcm5pbmcoc2VsZiwgbXNnKTpcbiAgICAgICAgcGFzc1xuXG4gICAgZGVmIGVycm9yKHNlbGYsIG1zZyk6XG4gICAgICAgIHByaW50KG1zZylcblxuXG4jIOKEue+4jyBTZWUgXCJwcm9ncmVzc19ob29rc1wiIGluIGhlbHAoeXRfZGxwLllvdXR1YmVETClcbmRlZiBteV9ob29rKGQpOlxuICAgIGlmIGRbJ3N0YXR1cyddID09ICdmaW5pc2hlZCc6XG4gICAgICAgIHByaW50KCdEb25lIGRvd25sb2FkaW5nLCBub3cgcG9zdC1wcm9jZXNzaW5nIC4uLicpXG5cblxueWRsX29wdHMgPSB7XG4gICAgJ2xvZ2dlcic6IE15TG9nZ2VyKCksXG4gICAgJ3Byb2dyZXNzX2hvb2tzJzogW215X2hvb2tdLFxufVxuXG53aXRoIHl0X2RscC5Zb3V0dWJlREwoeWRsX29wdHMpIGFzIHlkbDpcbiAgICB5ZGwuZG93bmxvYWQoVVJMUylcbmBgYFxuXG4jIyMjIEFkZCBhIGN1c3RvbSBQb3N0UHJvY2Vzc29yXG5cbmBgYHB5dGhvblxuaW1wb3J0IHl0X2RscFxuXG5VUkxTID0gWydodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PUJhV19qZW5vektjJ11cblxuIyDihLnvuI8gU2VlIGhlbHAoeXRfZGxwLnBvc3Rwcm9jZXNzb3IuUG9zdFByb2Nlc3NvcilcbmNsYXNzIE15Q3VzdG9tUFAoeXRfZGxwLnBvc3Rwcm9jZXNzb3IuUG9zdFByb2Nlc3Nvcik6XG4gICAgZGVmIHJ1bihzZWxmLCBpbmZvKTpcbiAgICAgICAgc2VsZi50b19zY3JlZW4oJ0RvaW5nIHN0dWZmJylcbiAgICAgICAgcmV0dXJuIFtdLCBpbmZvXG5cblxud2l0aCB5dF9kbHAuWW91dHViZURMKCkgYXMgeWRsOlxuICAgICMg4oS577iPIFwid2hlblwiIGNhbiB0YWtlIGFueSB2YWx1ZSBpbiB5dF9kbHAudXRpbHMuUE9TVFBST0NFU1NfV0hFTlxuICAgIHlkbC5hZGRfcG9zdF9wcm9jZXNzb3IoTXlDdXN0b21QUCgpLCB3aGVuPSdwcmVfcHJvY2VzcycpXG4gICAgeWRsLmRvd25sb2FkKFVSTFMpXG5gYGBcblxuXG4jIyMjIFVzZSBhIGN1c3RvbSBmb3JtYXQgc2VsZWN0b3JcblxuYGBgcHl0aG9uXG5pbXBvcnQgeXRfZGxwXG5cblVSTCA9IFsnaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1CYVdfamVub3pLYyddXG5cbmRlZiBmb3JtYXRfc2VsZWN0b3IoY3R4KTpcbiAgICBcIlwiXCIgU2VsZWN0IHRoZSBiZXN0IHZpZGVvIGFuZCB0aGUgYmVzdCBhdWRpbyB0aGF0IHdvbid0IHJlc3VsdCBpbiBhbiBta3YuXG4gICAgTk9URTogVGhpcyBpcyBqdXN0IGFuIGV4YW1wbGUgYW5kIGRvZXMgbm90IGhhbmRsZSBhbGwgY2FzZXMgXCJcIlwiXG5cbiAgICAjIGZvcm1hdHMgYXJlIGFscmVhZHkgc29ydGVkIHdvcnN0IHRvIGJlc3RcbiAgICBmb3JtYXRzID0gY3R4LmdldCgnZm9ybWF0cycpWzo6LTFdXG5cbiAgICAjIGFjb2RlYz0nbm9uZScgbWVhbnMgdGhlcmUgaXMgbm8gYXVkaW9cbiAgICBiZXN0X3ZpZGVvID0gbmV4dChmIGZvciBmIGluIGZvcm1hdHNcbiAgICAgICAgICAgICAgICAgICAgICBpZiBmWyd2Y29kZWMnXSAhPSAnbm9uZScgYW5kIGZbJ2Fjb2RlYyddID09ICdub25lJylcblxuICAgICMgZmluZCBjb21wYXRpYmxlIGF1ZGlvIGV4dGVuc2lvblxuICAgIGF1ZGlvX2V4dCA9IHsnbXA0JzogJ200YScsICd3ZWJtJzogJ3dlYm0nfVtiZXN0X3ZpZGVvWydleHQnXV1cbiAgICAjIHZjb2RlYz0nbm9uZScgbWVhbnMgdGhlcmUgaXMgbm8gdmlkZW9cbiAgICBiZXN0X2F1ZGlvID0gbmV4dChmIGZvciBmIGluIGZvcm1hdHMgaWYgKFxuICAgICAgICBmWydhY29kZWMnXSAhPSAnbm9uZScgYW5kIGZbJ3Zjb2RlYyddID09ICdub25lJyBhbmQgZlsnZXh0J10gPT0gYXVkaW9fZXh0KSlcblxuICAgICMgVGhlc2UgYXJlIHRoZSBtaW5pbXVtIHJlcXVpcmVkIGZpZWxkcyBmb3IgYSBtZXJnZWQgZm9ybWF0XG4gICAgeWllbGQge1xuICAgICAgICAnZm9ybWF0X2lkJzogZid7YmVzdF92aWRlb1tcImZvcm1hdF9pZFwiXX0re2Jlc3RfYXVkaW9bXCJmb3JtYXRfaWRcIl19JyxcbiAgICAgICAgJ2V4dCc6IGJlc3RfdmlkZW9bJ2V4dCddLFxuICAgICAgICAncmVxdWVzdGVkX2Zvcm1hdHMnOiBbYmVzdF92aWRlbywgYmVzdF9hdWRpb10sXG4gICAgICAgICMgTXVzdCBiZSArIHNlcGFyYXRlZCBsaXN0IG9mIHByb3RvY29sc1xuICAgICAgICAncHJvdG9jb2wnOiBmJ3tiZXN0X3ZpZGVvW1wicHJvdG9jb2xcIl19K3tiZXN0X2F1ZGlvW1wicHJvdG9jb2xcIl19J1xuICAgIH1cblxuXG55ZGxfb3B0cyA9IHtcbiAgICAnZm9ybWF0JzogZm9ybWF0X3NlbGVjdG9yLFxufVxuXG53aXRoIHl0X2RscC5Zb3V0dWJlREwoeWRsX29wdHMpIGFzIHlkbDpcbiAgICB5ZGwuZG93bmxvYWQoVVJMUylcbmBgYFxuXG48IS0tIE1BTlBBR0U6IE1PVkUgXCJORVcgRkVBVFVSRVNcIiBTRUNUSU9OIEhFUkUgLS0+XG5cbiMgREVQUkVDQVRFRCBPUFRJT05TXG5cblRoZXNlIGFyZSBhbGwgdGhlIGRlcHJlY2F0ZWQgb3B0aW9ucyBhbmQgdGhlIGN1cnJlbnQgYWx0ZXJuYXRpdmUgdG8gYWNoaWV2ZSB0aGUgc2FtZSBlZmZlY3RcblxuIyMjIyBBbG1vc3QgcmVkdW5kYW50IG9wdGlvbnNcbldoaWxlIHRoZXNlIG9wdGlvbnMgYXJlIGFsbW9zdCB0aGUgc2FtZSBhcyB0aGVpciBuZXcgY291bnRlcnBhcnRzLCB0aGVyZSBhcmUgc29tZSBkaWZmZXJlbmNlcyB0aGF0IHByZXZlbnRzIHRoZW0gYmVpbmcgcmVkdW5kYW50XG5cbiAgICAtaiwgLS1kdW1wLWpzb24gICAgICAgICAgICAgICAgICAtLXByaW50IFwiJSgpalwiXG4gICAgLUYsIC0tbGlzdC1mb3JtYXRzICAgICAgICAgICAgICAgLS1wcmludCBmb3JtYXRzX3RhYmxlXG4gICAgLS1saXN0LXRodW1ibmFpbHMgICAgICAgICAgICAgICAgLS1wcmludCB0aHVtYm5haWxzX3RhYmxlIC0tcHJpbnQgcGxheWxpc3Q6dGh1bWJuYWlsc190YWJsZVxuICAgIC0tbGlzdC1zdWJzICAgICAgICAgICAgICAgICAgICAgIC0tcHJpbnQgYXV0b21hdGljX2NhcHRpb25zX3RhYmxlIC0tcHJpbnQgc3VidGl0bGVzX3RhYmxlXG5cbiMjIyMgUmVkdW5kYW50IG9wdGlvbnNcbldoaWxlIHRoZXNlIG9wdGlvbnMgYXJlIHJlZHVuZGFudCwgdGhleSBhcmUgc3RpbGwgZXhwZWN0ZWQgdG8gYmUgdXNlZCBkdWUgdG8gdGhlaXIgZWFzZSBvZiB1c2VcblxuICAgIC0tZ2V0LWRlc2NyaXB0aW9uICAgICAgICAgICAgICAgIC0tcHJpbnQgZGVzY3JpcHRpb25cbiAgICAtLWdldC1kdXJhdGlvbiAgICAgICAgICAgICAgICAgICAtLXByaW50IGR1cmF0aW9uX3N0cmluZ1xuICAgIC0tZ2V0LWZpbGVuYW1lICAgICAgICAgICAgICAgICAgIC0tcHJpbnQgZmlsZW5hbWVcbiAgICAtLWdldC1mb3JtYXQgICAgICAgICAgICAgICAgICAgICAtLXByaW50IGZvcm1hdFxuICAgIC0tZ2V0LWlkICAgICAgICAgICAgICAgICAgICAgICAgIC0tcHJpbnQgaWRcbiAgICAtLWdldC10aHVtYm5haWwgICAgICAgICAgICAgICAgICAtLXByaW50IHRodW1ibmFpbFxuICAgIC1lLCAtLWdldC10aXRsZSAgICAgICAgICAgICAgICAgIC0tcHJpbnQgdGl0bGVcbiAgICAtZywgLS1nZXQtdXJsICAgICAgICAgICAgICAgICAgICAtLXByaW50IHVybHNcbiAgICAtLW1hdGNoLXRpdGxlIFJFR0VYICAgICAgICAgICAgICAtLW1hdGNoLWZpbHRlciBcInRpdGxlIH49ICg/aSlSRUdFWFwiXG4gICAgLS1yZWplY3QtdGl0bGUgUkVHRVggICAgICAgICAgICAgLS1tYXRjaC1maWx0ZXIgXCJ0aXRsZSAhfj0gKD9pKVJFR0VYXCJcbiAgICAtLW1pbi12aWV3cyBDT1VOVCAgICAgICAgICAgICAgICAtLW1hdGNoLWZpbHRlciBcInZpZXdfY291bnQgPj0/IENPVU5UXCJcbiAgICAtLW1heC12aWV3cyBDT1VOVCAgICAgICAgICAgICAgICAtLW1hdGNoLWZpbHRlciBcInZpZXdfY291bnQgPD0/IENPVU5UXCJcbiAgICAtLWJyZWFrLW9uLXJlamVjdCAgICAgICAgICAgICAgICBVc2UgLS1icmVhay1tYXRjaC1maWx0ZXJcbiAgICAtLXVzZXItYWdlbnQgVUEgICAgICAgICAgICAgICAgICAtLWFkZC1oZWFkZXIgXCJVc2VyLUFnZW50OlVBXCJcbiAgICAtLXJlZmVyZXIgVVJMICAgICAgICAgICAgICAgICAgICAtLWFkZC1oZWFkZXIgXCJSZWZlcmVyOlVSTFwiXG4gICAgLS1wbGF5bGlzdC1zdGFydCBOVU1CRVIgICAgICAgICAgLUkgTlVNQkVSOlxuICAgIC0tcGxheWxpc3QtZW5kIE5VTUJFUiAgICAgICAgICAgIC1JIDpOVU1CRVJcbiAgICAtLXBsYXlsaXN0LXJldmVyc2UgICAgICAgICAgICAgICAtSSA6Oi0xXG4gICAgLS1uby1wbGF5bGlzdC1yZXZlcnNlICAgICAgICAgICAgRGVmYXVsdFxuXG5cbiMjIyMgTm90IHJlY29tbWVuZGVkXG5XaGlsZSB0aGVzZSBvcHRpb25zIHN0aWxsIHdvcmssIHRoZWlyIHVzZSBpcyBub3QgcmVjb21tZW5kZWQgc2luY2UgdGhlcmUgYXJlIG90aGVyIGFsdGVybmF0aXZlcyB0byBhY2hpZXZlIHRoZSBzYW1lXG5cbiAgICAtLWZvcmNlLWdlbmVyaWMtZXh0cmFjdG9yICAgICAgICAtLWllcyBnZW5lcmljLGRlZmF1bHRcbiAgICAtLWV4ZWMtYmVmb3JlLWRvd25sb2FkIENNRCAgICAgICAtLWV4ZWMgXCJiZWZvcmVfZGw6Q01EXCJcbiAgICAtLW5vLWV4ZWMtYmVmb3JlLWRvd25sb2FkICAgICAgICAtLW5vLWV4ZWNcbiAgICAtLWFsbC1mb3JtYXRzICAgICAgICAgICAgICAgICAgICAtZiBhbGxcbiAgICAtLWFsbC1zdWJzICAgICAgICAgICAgICAgICAgICAgICAtLXN1Yi1sYW5ncyBhbGwgLS13cml0ZS1zdWJzXG4gICAgLS1wcmludC1qc29uICAgICAgICAgICAgICAgICAgICAgLWogLS1uby1zaW11bGF0ZVxuICAgIC0tYXV0b251bWJlci1zaXplIE5VTUJFUiAgICAgICAgIFVzZSBzdHJpbmcgZm9ybWF0dGluZywgZS5nLiAlKGF1dG9udW1iZXIpMDNkXG4gICAgLS1hdXRvbnVtYmVyLXN0YXJ0IE5VTUJFUiAgICAgICAgVXNlIGludGVybmFsIGZpZWxkIGZvcm1hdHRpbmcgbGlrZSAlKGF1dG9udW1iZXIrTlVNQkVSKXNcbiAgICAtLWlkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtbyBcIiUoaWQpcy4lKGV4dClzXCJcbiAgICAtLW1ldGFkYXRhLWZyb20tdGl0bGUgRk9STUFUICAgICAtLXBhcnNlLW1ldGFkYXRhIFwiJSh0aXRsZSlzOkZPUk1BVFwiXG4gICAgLS1obHMtcHJlZmVyLW5hdGl2ZSAgICAgICAgICAgICAgLS1kb3dubG9hZGVyIFwibTN1ODpuYXRpdmVcIlxuICAgIC0taGxzLXByZWZlci1mZm1wZWcgICAgICAgICAgICAgIC0tZG93bmxvYWRlciBcIm0zdTg6ZmZtcGVnXCJcbiAgICAtLWxpc3QtZm9ybWF0cy1vbGQgICAgICAgICAgICAgICAtLWNvbXBhdC1vcHRpb25zIGxpc3QtZm9ybWF0cyAoQWxpYXM6IC0tbm8tbGlzdC1mb3JtYXRzLWFzLXRhYmxlKVxuICAgIC0tbGlzdC1mb3JtYXRzLWFzLXRhYmxlICAgICAgICAgIC0tY29tcGF0LW9wdGlvbnMgLWxpc3QtZm9ybWF0cyBbRGVmYXVsdF0gKEFsaWFzOiAtLW5vLWxpc3QtZm9ybWF0cy1vbGQpXG4gICAgLS15b3V0dWJlLXNraXAtZGFzaC1tYW5pZmVzdCAgICAgLS1leHRyYWN0b3ItYXJncyBcInlvdXR1YmU6c2tpcD1kYXNoXCIgKEFsaWFzOiAtLW5vLXlvdXR1YmUtaW5jbHVkZS1kYXNoLW1hbmlmZXN0KVxuICAgIC0teW91dHViZS1za2lwLWhscy1tYW5pZmVzdCAgICAgIC0tZXh0cmFjdG9yLWFyZ3MgXCJ5b3V0dWJlOnNraXA9aGxzXCIgKEFsaWFzOiAtLW5vLXlvdXR1YmUtaW5jbHVkZS1obHMtbWFuaWZlc3QpXG4gICAgLS15b3V0dWJlLWluY2x1ZGUtZGFzaC1tYW5pZmVzdCAgRGVmYXVsdCAoQWxpYXM6IC0tbm8teW91dHViZS1za2lwLWRhc2gtbWFuaWZlc3QpXG4gICAgLS15b3V0dWJlLWluY2x1ZGUtaGxzLW1hbmlmZXN0ICAgRGVmYXVsdCAoQWxpYXM6IC0tbm8teW91dHViZS1za2lwLWhscy1tYW5pZmVzdClcblxuXG4jIyMjIERldmVsb3BlciBvcHRpb25zXG5UaGVzZSBvcHRpb25zIGFyZSBub3QgaW50ZW5kZWQgdG8gYmUgdXNlZCBieSB0aGUgZW5kLXVzZXJcblxuICAgIC0tdGVzdCAgICAgICAgICAgICAgICAgICAgICAgICAgIERvd25sb2FkIG9ubHkgcGFydCBvZiB2aWRlbyBmb3IgdGVzdGluZyBleHRyYWN0b3JzXG4gICAgLS1sb2FkLXBhZ2VzICAgICAgICAgICAgICAgICAgICAgTG9hZCBwYWdlcyBkdW1wZWQgYnkgLS13cml0ZS1wYWdlc1xuICAgIC0teW91dHViZS1wcmludC1zaWctY29kZSAgICAgICAgIEZvciB0ZXN0aW5nIHlvdXR1YmUgc2lnbmF0dXJlc1xuICAgIC0tYWxsb3ctdW5wbGF5YWJsZS1mb3JtYXRzICAgICAgIExpc3QgdW5wbGF5YWJsZSBmb3JtYXRzIGFsc29cbiAgICAtLW5vLWFsbG93LXVucGxheWFibGUtZm9ybWF0cyAgICBEZWZhdWx0XG5cblxuIyMjIyBPbGQgYWxpYXNlc1xuVGhlc2UgYXJlIGFsaWFzZXMgdGhhdCBhcmUgbm8gbG9uZ2VyIGRvY3VtZW50ZWQgZm9yIHZhcmlvdXMgcmVhc29uc1xuXG4gICAgLS1hdmNvbnYtbG9jYXRpb24gICAgICAgICAgICAgICAgLS1mZm1wZWctbG9jYXRpb25cbiAgICAtLWNsZWFuLWluZm9qc29uICAgICAgICAgICAgICAgICAtLWNsZWFuLWluZm8tanNvblxuICAgIC0tY24tdmVyaWZpY2F0aW9uLXByb3h5IFVSTCAgICAgIC0tZ2VvLXZlcmlmaWNhdGlvbi1wcm94eSBVUkxcbiAgICAtLWR1bXAtaGVhZGVycyAgICAgICAgICAgICAgICAgICAtLXByaW50LXRyYWZmaWNcbiAgICAtLWR1bXAtaW50ZXJtZWRpYXRlLXBhZ2VzICAgICAgICAtLWR1bXAtcGFnZXNcbiAgICAtLWZvcmNlLXdyaXRlLWRvd25sb2FkLWFyY2hpdmUgICAtLWZvcmNlLXdyaXRlLWFyY2hpdmVcbiAgICAtLWxvYWQtaW5mbyAgICAgICAgICAgICAgICAgICAgICAtLWxvYWQtaW5mby1qc29uXG4gICAgLS1uby1jbGVhbi1pbmZvanNvbiAgICAgICAgICAgICAgLS1uby1jbGVhbi1pbmZvLWpzb25cbiAgICAtLW5vLXNwbGl0LXRyYWNrcyAgICAgICAgICAgICAgICAtLW5vLXNwbGl0LWNoYXB0ZXJzXG4gICAgLS1uby13cml0ZS1zcnQgICAgICAgICAgICAgICAgICAgLS1uby13cml0ZS1zdWJzXG4gICAgLS1wcmVmZXItdW5zZWN1cmUgICAgICAgICAgICAgICAgLS1wcmVmZXItaW5zZWN1cmVcbiAgICAtLXJhdGUtbGltaXQgUkFURSAgICAgICAgICAgICAgICAtLWxpbWl0LXJhdGUgUkFURVxuICAgIC0tc3BsaXQtdHJhY2tzICAgICAgICAgICAgICAgICAgIC0tc3BsaXQtY2hhcHRlcnNcbiAgICAtLXNydC1sYW5nIExBTkdTICAgICAgICAgICAgICAgICAtLXN1Yi1sYW5ncyBMQU5HU1xuICAgIC0tdHJpbS1maWxlLW5hbWVzIExFTkdUSCAgICAgICAgIC0tdHJpbS1maWxlbmFtZXMgTEVOR1RIXG4gICAgLS13cml0ZS1zcnQgICAgICAgICAgICAgICAgICAgICAgLS13cml0ZS1zdWJzXG4gICAgLS15ZXMtb3ZlcndyaXRlcyAgICAgICAgICAgICAgICAgLS1mb3JjZS1vdmVyd3JpdGVzXG5cbiMjIyMgU3BvbnNrcnViIE9wdGlvbnNcblN1cHBvcnQgZm9yIFtTcG9uU2tydWJdKGh0dHBzOi8vZ2l0aHViLmNvbS9mYWlzc2Fsb28vU3BvblNrcnViKSBoYXMgYmVlbiBkZXByZWNhdGVkIGluIGZhdm9yIG9mIHRoZSBgLS1zcG9uc29yYmxvY2tgIG9wdGlvbnNcblxuICAgIC0tc3BvbnNrcnViICAgICAgICAgICAgICAgICAgICAgIC0tc3BvbnNvcmJsb2NrLW1hcmsgYWxsXG4gICAgLS1uby1zcG9uc2tydWIgICAgICAgICAgICAgICAgICAgLS1uby1zcG9uc29yYmxvY2tcbiAgICAtLXNwb25za3J1Yi1jdXQgICAgICAgICAgICAgICAgICAtLXNwb25zb3JibG9jay1yZW1vdmUgYWxsXG4gICAgLS1uby1zcG9uc2tydWItY3V0ICAgICAgICAgICAgICAgLS1zcG9uc29yYmxvY2stcmVtb3ZlIC1hbGxcbiAgICAtLXNwb25za3J1Yi1mb3JjZSAgICAgICAgICAgICAgICBOb3QgYXBwbGljYWJsZVxuICAgIC0tbm8tc3BvbnNrcnViLWZvcmNlICAgICAgICAgICAgIE5vdCBhcHBsaWNhYmxlXG4gICAgLS1zcG9uc2tydWItbG9jYXRpb24gICAgICAgICAgICAgTm90IGFwcGxpY2FibGVcbiAgICAtLXNwb25za3J1Yi1hcmdzICAgICAgICAgICAgICAgICBOb3QgYXBwbGljYWJsZVxuXG4jIyMjIE5vIGxvbmdlciBzdXBwb3J0ZWRcblRoZXNlIG9wdGlvbnMgbWF5IG5vIGxvbmdlciB3b3JrIGFzIGludGVuZGVkXG5cbiAgICAtLXByZWZlci1hdmNvbnYgICAgICAgICAgICAgICAgICBhdmNvbnYgaXMgbm90IG9mZmljaWFsbHkgc3VwcG9ydGVkIGJ5IHl0LWRscCAoQWxpYXM6IC0tbm8tcHJlZmVyLWZmbXBlZylcbiAgICAtLXByZWZlci1mZm1wZWcgICAgICAgICAgICAgICAgICBEZWZhdWx0IChBbGlhczogLS1uby1wcmVmZXItYXZjb252KVxuICAgIC1DLCAtLWNhbGwtaG9tZSAgICAgICAgICAgICAgICAgIE5vdCBpbXBsZW1lbnRlZFxuICAgIC0tbm8tY2FsbC1ob21lICAgICAgICAgICAgICAgICAgIERlZmF1bHRcbiAgICAtLWluY2x1ZGUtYWRzICAgICAgICAgICAgICAgICAgICBObyBsb25nZXIgc3VwcG9ydGVkXG4gICAgLS1uby1pbmNsdWRlLWFkcyAgICAgICAgICAgICAgICAgRGVmYXVsdFxuICAgIC0td3JpdGUtYW5ub3RhdGlvbnMgICAgICAgICAgICAgIE5vIHN1cHBvcnRlZCBzaXRlIGhhcyBhbm5vdGF0aW9ucyBub3dcbiAgICAtLW5vLXdyaXRlLWFubm90YXRpb25zICAgICAgICAgICBEZWZhdWx0XG4gICAgLS1jb21wYXQtb3B0aW9ucyBzZXBlcmF0ZS12aWRlby12ZXJzaW9ucyAgTm8gbG9uZ2VyIG5lZWRlZFxuXG4jIyMjIFJlbW92ZWRcblRoZXNlIG9wdGlvbnMgd2VyZSBkZXByZWNhdGVkIHNpbmNlIDIwMTQgYW5kIGhhdmUgbm93IGJlZW4gZW50aXJlbHkgcmVtb3ZlZFxuXG4gICAgLUEsIC0tYXV0by1udW1iZXIgICAgICAgICAgICAgICAgLW8gXCIlKGF1dG9udW1iZXIpcy0lKGlkKXMuJShleHQpc1wiXG4gICAgLXQsIC1sLCAtLXRpdGxlLCAtLWxpdGVyYWwgICAgICAgLW8gXCIlKHRpdGxlKXMtJShpZClzLiUoZXh0KXNcIlxuXG4jIENPTlRSSUJVVElOR1xuU2VlIFtDT05UUklCVVRJTkcubWRdKENPTlRSSUJVVElORy5tZCNjb250cmlidXRpbmctdG8teXQtZGxwKSBmb3IgaW5zdHJ1Y3Rpb25zIG9uIFtPcGVuaW5nIGFuIElzc3VlXShDT05UUklCVVRJTkcubWQjb3BlbmluZy1hbi1pc3N1ZSkgYW5kIFtDb250cmlidXRpbmcgY29kZSB0byB0aGUgcHJvamVjdF0oQ09OVFJJQlVUSU5HLm1kI2RldmVsb3Blci1pbnN0cnVjdGlvbnMpXG5cbiMgV0lLSVxuU2VlIHRoZSBbV2lraV0oaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvd2lraSkgZm9yIG1vcmUgaW5mb3JtYXRpb25cbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAiLA==
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogInB1a2thbmRhbiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogInB1a2thbmRhbi55dGRscEBnbWFpbC5jb20iLA==
ICAgICJuYW1lIjogInBrLWRscCIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcGstZGxwLyIs
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcGstZGxwLyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkRvY3VtZW50YXRpb24iOiAiaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAjcmVhZG1lIiw=
ICAgICAgIkZ1bmRpbmciOiAiaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvYmxvYi9tYXN0ZXIvQ29sbGFib3JhdG9ycy5tZCNjb2xsYWJvcmF0b3JzIiw=
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS95dC1kbHAveXQtZGxwIiw=
ICAgICAgIlNvdXJjZSI6ICJodHRwczovL2dpdGh1Yi5jb20vcGstNjI4OTk2L3BrLWRscCIs
ICAgICAgIlRyYWNrZXIiOiAiaHR0cHM6Ly9naXRodWIuY29tL3l0LWRscC95dC1kbHAvaXNzdWVzIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcGstZGxwLzIwMjMuMy40LyIs
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgIm11dGFnZW4iLA==
ICAgICAgInB5Y3J5cHRvZG9tZXgiLA==
ICAgICAgIndlYnNvY2tldHMiLA==
ICAgICAgImNlcnRpZmkiLA==
ICAgICAgImJyb3RsaWNmZmkgOyBwbGF0Zm9ybV9weXRob25faW1wbGVtZW50YXRpb24gIT0gXCJDUHl0aG9uXCIiLA==
ICAgICAgImJyb3RsaSA7IHBsYXRmb3JtX3B5dGhvbl9pbXBsZW1lbnRhdGlvbiA9PSBcIkNQeXRob25cIiI=
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjciLA==
ICAgICJzdW1tYXJ5IjogIkEgeW91dHViZS1kbCBmb3JrIHdpdGggYWRkaXRpb25hbCBmZWF0dXJlcyBhbmQgcGF0Y2hlcyIs
ICAgICJ2ZXJzaW9uIjogIjIwMjMuMy40Iiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNzQwMDA5OSw=
ICAicmVsZWFzZXMiOiB7
ICAgICIyMDIzLjMuNCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzMWMwYjYzZmIxNmJlMTUzZmM1YjQzZWVlMzFjNTg0MWUyMTlhZTUxZGY5YTAwOWJjY2FkMDJlMWUzODlhOGNjIiw=
ICAgICAgICAgICJtZDUiOiAiN2M4ZDIyNGEzYTVjNTI5YTY4NjA3MWU0OWVkM2M5NWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNGVkZWZiMTNiYjZlZjcxMWZlN2VkNmQwNjZmMjI5OWI5ZjBkNGE2YzAyMmI1MGYyNTRmYTMyOWQzYzNiYzQzOSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicGtfZGxwLTIwMjMuMy40LXB5Mi5weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3YzhkMjI0YTNhNWM1MjlhNjg2MDcxZTQ5ZWQzYzk1YiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkyLnB5MyIs
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43Iiw=
ICAgICAgICAic2l6ZSI6IDI2Njc0NzEs
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yMlQxNTowODo0MSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yMlQxNTowODo0MS43ODA1NDZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zMS9jMC9iNjNmYjE2YmUxNTNmYzViNDNlZWUzMWM1ODQxZTIxOWFlNTFkZjlhMDA5YmNjYWQwMmUxZTM4OWE4Y2MvcGtfZGxwLTIwMjMuMy40LXB5Mi5weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiODY0OTE3ZjQ4MDdlZDI3OWFiZDBmNTVmMTZmYmY4ZTEzZTZmZDNkODJjYzhiNzAwMjVjMmNmM2RiZGQ4M2FiIiw=
ICAgICAgICAgICJtZDUiOiAiMzEwNDE1ZmYzZGM0OGVkZmM5ZjFiZDA3MjEwNDNhN2UiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzE4YjBlYjVkYzViZTJkMjNlMjJiYjFhYzQwZDExYjg2ZTM3MDdkMjAyZTJhMmY1MWJhYWNhODIyZjY0ZGNkMCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicGstZGxwLTIwMjMuMy40LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzMTA0MTVmZjNkYzQ4ZWRmYzlmMWJkMDcyMTA0M2E3ZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43Iiw=
ICAgICAgICAic2l6ZSI6IDIzNzkwNDUs
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yMlQxNTowODo0NCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yMlQxNTowODo0NC44NTYzMjZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iOC82NC85MTdmNDgwN2VkMjc5YWJkMGY1NWYxNmZiZjhlMTNlNmZkM2Q4MmNjOGI3MDAyNWMyY2YzZGJkZDgzYWIvcGstZGxwLTIwMjMuMy40LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMzFjMGI2M2ZiMTZiZTE1M2ZjNWI0M2VlZTMxYzU4NDFlMjE5YWU1MWRmOWEwMDliY2NhZDAyZTFlMzg5YThjYyIs
ICAgICAgICAibWQ1IjogIjdjOGQyMjRhM2E1YzUyOWE2ODYwNzFlNDllZDNjOTViIiw=
ICAgICAgICAic2hhMjU2IjogIjRlZGVmYjEzYmI2ZWY3MTFmZTdlZDZkMDY2ZjIyOTliOWYwZDRhNmMwMjJiNTBmMjU0ZmEzMjlkM2MzYmM0Mzki
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInBrX2RscC0yMDIzLjMuNC1weTIucHkzLW5vbmUtYW55LndobCIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiN2M4ZDIyNGEzYTVjNTI5YTY4NjA3MWU0OWVkM2M5NWIiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5Mi5weTMiLA==
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNyIs
ICAgICAgInNpemUiOiAyNjY3NDcxLA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDMtMjJUMTU6MDg6NDEiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDMtMjJUMTU6MDg6NDEuNzgwNTQ2WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMzEvYzAvYjYzZmIxNmJlMTUzZmM1YjQzZWVlMzFjNTg0MWUyMTlhZTUxZGY5YTAwOWJjY2FkMDJlMWUzODlhOGNjL3BrX2RscC0yMDIzLjMuNC1weTIucHkzLW5vbmUtYW55LndobCIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYjg2NDkxN2Y0ODA3ZWQyNzlhYmQwZjU1ZjE2ZmJmOGUxM2U2ZmQzZDgyY2M4YjcwMDI1YzJjZjNkYmRkODNhYiIs
ICAgICAgICAibWQ1IjogIjMxMDQxNWZmM2RjNDhlZGZjOWYxYmQwNzIxMDQzYTdlIiw=
ICAgICAgICAic2hhMjU2IjogIjcxOGIwZWI1ZGM1YmUyZDIzZTIyYmIxYWM0MGQxMWI4NmUzNzA3ZDIwMmUyYTJmNTFiYWFjYTgyMmY2NGRjZDAi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInBrLWRscC0yMDIzLjMuNC50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMzEwNDE1ZmYzZGM0OGVkZmM5ZjFiZDA3MjEwNDNhN2UiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNyIs
ICAgICAgInNpemUiOiAyMzc5MDQ1LA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDMtMjJUMTU6MDg6NDQiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDMtMjJUMTU6MDg6NDQuODU2MzI2WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYjgvNjQvOTE3ZjQ4MDdlZDI3OWFiZDBmNTVmMTZmYmY4ZTEzZTZmZDNkODJjYzhiNzAwMjVjMmNmM2RiZGQ4M2FiL3BrLWRscC0yMDIzLjMuNC50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
