ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiWWFxaWFuZyBDYW8iLA==
ICAgICJhdXRob3JfZW1haWwiOiAiY2FveWFxaWFuZzA0MTBAZ21haWwuY29tIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkVudmlyb25tZW50IDo6IENvbnNvbGUiLA==
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogTWFjT1MgOjogTWFjT1MgWCIs
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogUE9TSVgiLA==
ICAgICAgIlRvcGljIDo6IFNjaWVudGlmaWMvRW5naW5lZXJpbmcgOjogQmlvLUluZm9ybWF0aWNzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIyBjTG9vcHMyOiBmdWxsIHN0YWNrIGFuYWx5c2lzIHRvb2wgZm9yIGNocm9tYXRpbiBpbnRlcmFjdGlvbnNcbjxwIGFsaWduPVwiY2VudGVyXCI+XG48aW1nIGFsaWduPVwiY2VudGVyXCIgc3JjPVwiaHR0cHM6Ly9naXRodWIuY29tL1lhcWlhbmdDYW8vY0xvb3BzMi9ibG9iL21hc3Rlci9wbmdzL0Zsb3dDaGFydC5wbmdcIj5cbjwvcD4gICBcblxuXG4tLS0tLS0tXG4tLS0tLS0tXG4jIyBJbnRyb2R1Y3Rpb25cbmNMb29wczIgaXMgYW4gZXh0ZW5zaW9uIG9mIG91ciBwcmV2aW91cyB3b3JrLCBbY0xvb3BzXShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMpLiBGcm9tIGxvb3AtY2FsbGluZyBiYXNlZCBvbiBhc3N1bXB0aW9uLWZyZWUgY2x1c3RlcmluZyB0byBhIGZ1bGwgc3VpdGUgb2YgYW5hbHlzaXMgdG9vbHMgZm9yIDNEIGdlbm9taWMgaW50ZXJhY3Rpb24gZGF0YSwgY0xvb3BzMiBoYXMgYmVlbiBhZGFwdGVkIHNwZWNpZmljYWxseSBmb3IgZGF0YSBzdWNoIGFzIEhpLVRyQUMvVHJhYy1sb29waW5nLCBmb3Igd2hpY2ggaW50ZXJhY3Rpb25zIGFyZSBlbnJpY2hlZCBvdmVyIHRoZSBnZW5vbWUgdGhyb3VnaCBleHBlcmltZW50YWwgc3RlcHMuIGNMb29wczIgc3RpbGwgc3VwcG9ydHMgSGktQyAtbGlrZSBkYXRhLCBvZiB3aGljaCB0aGUgaW50ZXJhY3Rpb24gc2lnbmFscyBhcmUgZXZlbmx5IGRpc3RyaWJ1dGVkIGF0IGVuenltZSBjdXR0aW5nIHNpdGVzLiAgVGhlIGNoYW5nZXMgZnJvbSBjTG9vcHMgdG8gY0xvb3BzMiBhcmUgZGVzaWduZWQgdG8gYWRkcmVzcyBjaGFsbGVuZ2VzIGFyb3VuZCBhaW1pbmcgZm9yIGhpZ2hlciByZXNvbHV0aW9ucyB3aXRoIHRoZSBuZXh0LWdlbmVyYXRpb24gb2YgZ2Vub21lIGFyY2hpdGVjdHVyZSBtYXBwaW5nIHRlY2hub2xvZ2llcy4gXG5cbmNMb29wczIgaXMgZGVzaWduZWQgd2l0aCByZXNwZWN0IHJlZmVyZW5jZSB0byBbYmVkdG9vbHNdKGh0dHBzOi8vYmVkdG9vbHMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0LykgYW5kIFtTYW10b29sc10oaHR0cDovL3d3dy5odHNsaWIub3JnLykgZm9yIGNvbW1hbmQtbGluZSBzdHlsZSBwcm9ncmFtbWluZy4gSWYgeW91IGhhdmUgZXhwZXJpZW5jZSB3aXRoIHRoZW0sIHlvdSB3aWxsIGZpbmQgY0xvb3BzMiBlYXN5IGFuZCBlZmZpY2llbnQgdG8gdXNlIGFuZCBjb21iaW5lIGNvbW1hbmRzLCBpbnRlZ3JhdGUgYXMgc3RlcHMgaW4geW91ciBwcm9jZXNzaW5nIHBpcGVsaW5lLiBcblxuUGxlYXNlIHJlZmVyIHRvIG91ciBbSGktVHJBQyBtZXRob2QgbWFudXNjcmlwdF0oKSBvciBbY0xvb3BzMiBtYW51c2NyaXB0XShodHRwczovL3d3dy5iaW9yeGl2Lm9yZy9jb250ZW50LzEwLjExMDEvMjAyMS4wNy4yMC40NTMwNjh2MSkgZm9yIHdoYXQgY0xvb3BzMiBjYW4gZG8gYW5kIHNob3cuIFxuXG5JZiB5b3UgdXNlIGNMb29wczIgaW4geW91ciByZXNlYXJjaCAodGhlIGlkZWEsIHRoZSBhbGdvcml0aG0sIHRoZSBhbmFseXNpcyBzY3JpcHRzIG9yIHRoZSBzdXBwbGVtZW50YWwgZGF0YSksIHBsZWFzZSBnaXZlIHVzIGEgc3RhciBvbiB0aGUgR2l0SHViIHJlcG8gcGFnZSBhbmQgY2l0ZSBvdXIgcGFwZXIgYXMgZm9sbG93czogICAgXG5cblByZXByaW50IGJpb1J4aXY6IFtZYXFpYW5nIENhbyBldCBhbC4gXCJjTG9vcHMyOiBhIGZ1bGwtc3RhY2sgY29tcHJlaGVuc2l2ZSBhbmFseXRpY2FsIHRvb2wgZm9yIGNocm9tYXRpbiBpbnRlcmFjdGlvbnNcIl0oaHR0cHM6Ly93d3cuYmlvcnhpdi5vcmcvY29udGVudC8xMC4xMTAxLzIwMjEuMDcuMjAuNDUzMDY4djEpXG5cblxuLS0tLS0tLVxuLS0tLS0tLVxuIyMgSW5zdGFsbFxuIyMjIyAxLiBFYXN5IHdheSB0aHJvdWdoIHBpcCBmb3Igc3RhYmxlIHZlcnNpb25cblB5dGhvbjMgaXMgcmVxdXJpZWQuICBcbmBgYFxucGlwIGluc3RhbGwgY0xvb3BzMlxuYGBgXG5cbi0tLS0tLS1cbiMjIyMgMi4gSW5zdGFsbCBmcm9tIHNvdXJjZSB3aXRoIHRlc3QgZGF0YSBmb3IgbGF0ZXN0IHZlcnNpb25cbmNMb29wczIgaXMgd3JpdHRlbiBwdXJlbHkgaW4gUHl0aG9uMyAoY0xvb3BzIHdhcyB3cml0dGVuIGluIFB5dGhvbjIpLiBJZiB5b3UgYXJlIGZhbWlsaWFyIHdpdGggW2NvbmRhXShodHRwczovL2RvY3MuY29uZGEuaW8vZW4vbGF0ZXN0LyksIGNMb29wczIgY2FuIGJlIGluc3RhbGxlZCBlYXNpbHkgd2l0aCB0aGUgZm9sbG93aW5nIExpbnV4IHNoZWxsIGNvbW1hbmRzIChhbHNvIHRlc3RlZCB3ZWxsIGluIHdpbjEwIHVidW50dSBzdWJzeXN0ZW0sIE1hY09TKS4gXG5gYGBcbiMgZm9yIG1vc3QgdXBkYXRlZCBjb2RlLCBvciBkb3dubG9hZCB0aGUgcmVsZWFzZSB2ZXJzaW9uIFxuZ2l0IGNsb25lIC0tZGVwdGg9MSBodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyXG5jZCBjTG9vcHMyXG5jb25kYSBlbnYgY3JlYXRlIC0tbmFtZSBjTG9vcHMyIC0tZmlsZSBjTG9vcHMyX2Vudi55YW1sXG5jb25kYSBhY3RpdmF0ZSBjTG9vcHMyIFxucHl0aG9uMyBzZXR1cC5weSBpbnN0YWxsXG5gYGBcblxuTmVjZXNzYXJ5IFB5dGhvbjMgdGhpcmQtcGFydHkgcGFja2FnZXMgYXJlIGxpc3RlZCBiZWxvdywgYWxsIG9mIHdoaWNoIGNhbiBiZSBpbnN0YWxsZWQgdGhyb3VnaCBjb25kYS4gSWYgeW91IGxpa2UgdG8gaW5zdGFsbCBjTG9vcHMyIHRocm91Z2ggdGhlIG9sZCBzY2hvb2wgd2F5ICoqKnB5dGhvbiBzZXR1cC5weSBpbnN0YWxsKioqLCBwbGVhc2UgaW5zdGFsbCB0aGUgM3JkIGRlcGVuZGVuY2llcyBmaXJzdC4gXG5gYGBcbnRxZG1cbm51bXB5IFxuc2NpcHkgXG5wYW5kYXNcbnNrbGVhcm5cbnNlYWJvcm5cbnB5QmlnV2lnXG5tYXRwbG90bGliXG5qb2JsaWJcbm5ldHdvcmt4XG5gYGBcblxuQWZ0ZXIgaW5zdGFsbGF0aW9uLCB3aGVuZXZlciB5b3Ugd2FudCB0byBydW4gY0xvb3BzMiwganVzdCBhY3RpdmF0ZSB0aGUgZW52aXJvbm1lbnQgd2l0aCBjb25kYTogKipjb25kYSBhY3RpdmF0ZSBjTG9vcHMyKiouIFxuSGFwcHkgcGVhay9sb29wLWNhbGxpbmcgYW5kIGhhdmUgZnVuIGV4cGxvcmluZyBhbGwgdGhlIG90aGVyIGtpbmRzIG9mIGFuYWx5c2VzLiAgICAgXG5cblxuLS0tLS0tXG4tLS0tLS1cbiMjIGNMb29wczIgTWFpbiBGdW5jdGlvbnNcblJ1biAqKipjTG9vcHMyKioqIG9yICoqKmNMb29wczIgLWgqKiogY2FuIHNob3cgdGhlIG1haW4gZnVuY3Rpb25zIG9mIGNMb29wczIgd2l0aCBzaG9ydCBkZXNjcmlwdGlvbnMgYW5kIGV4YW1wbGVzLiAgICAgXG5gYGBcbkFuIGVuaGFuY2VkLCBhY2N1cmF0ZSBhbmQgZmxleGlibGUgcGVhay9kb21haW4vbG9vcC1jYWxsaW5nIGFuZCBhbmFseXNpcyB0b29sIFxuZm9yIDNEIGdlbm9taWMgaW50ZXJhY3Rpb24gZGF0YS5cblxuVXNlIGNMb29wczIgc3ViLWNvbW1hbmQgLWggdG8gc2VlIGRldGFpbCBvcHRpb25zIGFuZCBleGFtcGxlcyBmb3Igc3ViLWNvbW1hbmRzLlxuQXZhaWxhYmxlIHN1Yi1jb21tYW5kcyBhcmU6IFxuICAgIHFjOiBxdWFsaXR5IGNvbnRyb2wgb2YgQkVEUEUgZmlsZXMgYmVmb3JlIGFuYWx5c2lzLlxuICAgIHByZTogcHJlcHJvY2VzcyBpbnB1dCBCRURQRSBmaWxlcyBpbnRvIGNMb29wczIgZGF0YS5cbiAgICB1cGRhdGU6IHVwZGF0ZSBjTG9vcHMyIGRhdGEgZmlsZXMgbG9jYXRpb25zLlxuICAgIGNvbWJpbmU6IGNvbWJpbmUgbXVsdGlwbGUgY0xvb29wczIgZGF0YSBkaXJlY3Rvcmllcy5cbiAgICBkdW1wOiBjb252ZXJ0IGNMb29wczIgZGF0YSBmaWxlcyB0byBvdGhlcnMgKEJFRFBFLCBISUMsIHdhc2hVLCBiZWRHcmFwaCBhbmRcbiAgICAgICAgICBjb250YWN0IG1hdHJpeClcbiAgICBlc3RFcHM6IGVzdGltYXRlIGVwcyB1c2luZyBHYXVzc2lhbiBtaXh0dXJlIG1vZGVscyBvciBrLWRpc3RhbmNlIHBsb3QuXG4gICAgZXN0UmVzOiBlc3RpbWF0ZSByZWFzb25hYmxlIGNvbnRhY3QgbWF0cml4IHJlc29sdXRpb24gYmFzZWQgb24gc2lnbmFsIFxuICAgICAgICAgICAgZW5yaWNobWVudC5cbiAgICBlc3REaXM6IGVzdGltYXRlIHNpZ25pZmljYW50IGludGVyYWN0aW9ucyBkaXN0YW5jZSByYW5nZS5cbiAgICBlc3RTYXQ6IGVzdGltYXRlIHNlcXVlbmNpbmcgc2F0dXJhdGlvbiBiYXNlZCBvbiBjb250YWN0IG1hdHJpeC5cbiAgICBlc3RTaW06IGVzdGltYXRlIHNpbWlsYXJpdGllcyBhbW9uZyBzYW1wbGVzIGJhc2VkIG9uIGNvbnRhY3QgbWF0cml4LlxuICAgIGZpbHRlclBFVHM6IGZpbHRlciBQRVRzIGJhc2VkIG9uIHBlYWtzLCBsb29wcywgc2luZ2xldG9uIG1vZGUgb3Iga25uIG1vZGUuIFxuICAgIHNhbXBsZVBFVHM6IHNhbXBsZSBQRVRzIGFjY29yZGluZyB0byBzcGVjaWZpYyB0YXJnZXQgc2l6ZS5cbiAgICBjYWxsUGVha3M6IGNhbGwgcGVha3MgZm9yIENoSVAtc2VxLCBBVEFDLXNlcSwgQ2hJQy1zZXEgYW5kIENVVCZUYWcgb3IgdGhlIFxuICAgICAgICAgICAgICAgM0QgZ2Vub21pYyBkYXRhIHN1Y2ggYXMgVHJhYy1sb29waW5nLCBIaS1UckFDLCBIaUNoSVAgYW5kIG1vcmUuXG4gICAgY2FsbExvb3BzOiBjYWxsIGxvb3BzIGZvciAzRCBnZW5vbWljIGRhdGEuXG4gICAgY2FsbERpZmZMb29wczogY2FsbCBkaWZmZXJlbnRpYWxseSBlbnJpY2hlZCBsb29wcyBmb3IgdHdvIGRhdGFzZXRzLiBcbiAgICBjYWxsRG9tYWluczogY2FsbCBkb21haW5zIGZvciAzRCBnZW5vbWljIGRhdGEuIFxuICAgIHBsb3Q6IHBsb3QgdGhlIGludGVyYWN0aW9uIG1hdHJpeCwgZ2VuZXMsIHZpZXcgcG9pbnQgcGxvdCwgMUQgdHJhY2tzLCBcbiAgICAgICAgICBwZWFrcywgbG9vcHMgYW5kIGRvbWFpbnMgZm9yIGEgc3BlY2lmaWMgcmVnaW9uLiBcbiAgICBtb250YWdlOiBhbmFseXNpcyBvZiBzcGVjaWZpYyByZWdpb25zLCBwcm9kdWNpbmcgV2VzdHdvcmxkIFNlYXNvbiAzIC1saWtlIFxuICAgICAgICAgICAgIFJlaG9ib2FtIHBsb3QuIFxuICAgIGFnZzogYWdncmVnYXRlZCBmZWF0dXJlIGFuYWx5c2lzIGFuZCBwbG90cywgZmVhdHVyZXMgY2FuIGJlIHBlYWtzLCB2aWV3IFxuICAgICAgICAgcG9pbnRzLCBsb29wcyBhbmQgZG9tYWlucy5cbiAgICBxdWFudDogcXVhbnRpZnkgcGVha3MsIGxvb3BzIGFuZCBkb21haW5zLlxuICAgIGFuYUxvb3BzOiBhbm90YXRlIGxvb3BzIGZvciB0YXJnZXQgZ2VuZXMuXG4gICAgZmluZFRhcmdldHM6IGZpbmQgdGFyZ2V0IGdlbmVzIG9mIGdlbm9taWMgcmVnaW9ucyB0aHJvdWdoIG5ldHdvcmtzIGZyb20gXG4gICAgICAgICAgICAgICAgIGFuYUxvb3BzLlxuXG5FeGFtcGxlczpcbiAgICBjTG9vcHMyIHFjIC1mIHRyYWNfcmVwMS5iZWRwZS5neix0cmFjX3JlcDIuYmVkcGUsdHJhY19yZXAzLmJlZHBlLmd6IFxcXG4gICAgICAgICAgICAgICAtbyB0cmFjX3N0YXQgLXAgM1xuICAgIGNMb29wczIgcHJlIC1mIC4uL3Rlc3RfR00xMjg3OF9jaHIyMV90cmFjLmJlZHBlIC1vIHRyYWNcbiAgICBjTG9vcHMyIHVwZGF0ZSAtZCAuL3RyYWNcbiAgICBjTG9vcHMyIGNvbWJpbmUgLWRzIC4vdHJhYzEsLi90cmFjMiwuL3RyYWMzIC1vIHRyYWNfY29tYmluZWQgLWtlZXAgMVxuICAgIGNMb29wczIgZHVtcCAtZCAuL3RyYWMgLW8gdHJhYyAtaGljXG4gICAgY0xvb3BzMiBlc3RFcHMgLWQgdHJhYyAtbyB0cmFjX2VzdEVwc19nbW0gLXAgMTAgLW1ldGhvZCBnbW1cbiAgICBjTG9vcHMyIGVzdFJlcyAtZCB0cmFjIC1vIHRyYWNfZXN0UmVzIC1wIDEwIC1icyAyNTAwMCw1MDAwLDEwMDAsMjAwXG4gICAgY0xvb3BzMiBlc3REaXMgLWQgdHJhYyAtbyB0cmFjIC1wbG90IC1icyAxMDAwIFxuICAgIGNMb29wczIgZXN0U2ltIC1kcyBUcmFjMSxUcmFjMiAtbyB0cmFjX3NpbSAtcCAxMCAtYnMgMjAwMCAtbSBwY2MgLXBsb3RcbiAgICBjTG9vcHMyIGZpbHRlclBFVHMgLWQgdHJhYyAtcGVha3MgdHJhY19wZWFrcy5iZWQgLW8gdHJhY19wZWFrc0ZpbHRlcmVkIC1wIDEwXG4gICAgY0xvb3BzMiBzYW1wbGVQRVRzIC1kIHRyYWMgLW8gdHJhY19zYW1wbGVkIC10IDUwMDAwMDAgLXAgMTBcbiAgICBjTG9vcHMyIGNhbGxQZWFrcyAtZCBIM0s0bWUzX0NoSUMgLWJnZCBJZ0dfQ2hJQyAtbyBIM0s0bWUzX2NMb29wczIgLWVwcyAxNTAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAtbWluUHRzIDEwXG4gICAgY0xvb3BzMiBjYWxsTG9vcHMgLWQgVHJhYyAtZXBzIDIwMCw1MDAsMTAwMCAtbWluUHRzIDMgLWZpbHRlciAtbyBUcmFjIC13IC1qIFxcXG4gICAgICAgICAgICAgICAgICAgICAgLWN1dCAyMDAwXG4gICAgY0xvb3BzMiBjYWxsTG9vcHMgLWQgSGlDIC1lcHMgMTAwMCw1MDAwLDEwMDAwIC1taW5QdHMgMTAsMjAsNTAsMTAwIC13IC1qIFxcXG4gICAgICAgICAgICAgICAgICAgICAgLXRyYW5zIC1vIEhpQ190cmFucyBcbiAgICBjTG9vcHMyIGNhbGxEaWZmTG9vcHMgLXRsb29wIHRhcmdldF9sb29wLnR4dCAtY2xvb3AgY29udHJvbF9sb29wLnR4dCBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAtdGQgLi90YXJnZXQgLWNkIC4vY29udHJvbCAtbyB0YXJnZXRfZGlmZlxuICAgIGNMb29wczIgY2FsbERvbWFpbnMgLWQgdHJhYyAtbyB0cmFjIC1icyAxMDAwMCAtd3MgMjAwMDAwXG4gICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLWJzIDUwMCAtc3RhcnQgMzQ4NDAwMDAgXFxcbiAgICAgICAgICAgICAgICAgLWVuZCAzNDg5NTAwMCAtdHJpdSAtMUQgLWxvb3AgdGVzdF9sb29wcy50eHQgLWxvZyBcXFxuICAgICAgICAgICAgICAgICAtZ3RmIGhnMzguZ3RmIC1id3MgY3RjZi5idyAtYmVkcyBlbmhhbmNlci5iZWRcbiAgICBjTG9vcHMyIG1vbnRhZ2UgLWYgdGVzdC9jaHIyMS1jaHIyMS5peHkgLW8gdGVzdCAtYmVkIHRlc3QuYmVkXG4gICAgY0xvb3BzMiBhZ2cgLWQgdHJhYyAtbG9vcHMgdHJhYy5sb29wIC1wZWFrcyB0cmFjX3BlYWtzLmJlZCBcXFxuICAgICAgICAgICAgICAgIC1kb21haW5zIGhpY19kb21haW5zLmJlZCAtYndzIENUQ0YuYncsQVRBQy5idyAtcCAyMCAtbyB0cmFjIFxuICAgIGNMb29wczIgcXVhbnQgLWQgdHJhYyAtcGVha3MgdHJhY19wZWFrcy5iZWQgLWxvb3BzIHRyYWMubG9vcCBcXFxuICAgICAgICAgICAgICAgICAgLWRvbWFpbnMgdHJhY19kb21haW4udHh0IC1wIDIwIC1vIHRyYWNcbiAgICBjTG9vcHMyIGFuYUxvb3BzIC1sb29wcyB0ZXN0X2xvb3AudHh0IC1ndGYgZ2VuZS5ndGYgLW5ldCAtbyB0ZXN0XG4gICAgY0xvb3BzMiBmaW5kVGFyZ2V0cyAtbmV0IHRlc3RfZXBfbmV0LnNpZiAtdGcgdGVzdF90YXJnZXRzLnR4dCBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgLWJlZCBHV0FTLmJlZCAtbyB0ZXN0IFxuICAgIE1vcmUgdXNhZ2VzIGFuZCBleGFtcGxlcyBhcmUgc2hvd24gd2hlbiBydW4gd2l0aCBjTG9vcHMyIHN1Yi1jb21tYW5kIC1oLlxuXG5cbm9wdGlvbmFsIGFyZ3VtZW50czpcbiAgLWgsIC0taGVscCAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgIE91dHB1dCBkYXRhIGRpcmVjdG9yeSAvIGZpbGUgbmFtZSBwcmVmaXgsIGRlZmF1bHQgaXMgY0xvb3BzMl9vdXRwdXQuXG4gIC1wIENQVSAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgdG9vIG1hbnkgUEVUcy5cbiAgLWN1dCBDVVQgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgIEtlZXAgdGhlIFBFVHMgd2l0aCBkaXN0YW5jZSA8PW1jdXQuIERlZmF1bHQgaXMgLTEsIG5vIGZpbHRlcmluZy5cbiAgLXYgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgdmVyc2lvbiBvZiBjTG9vcHMyLlxuXG5CdWcgcmVwb3J0cyBhcmUgd2VsY29tZSBhbmQgY2FuIGJlIHB1dCBhcyBpc3N1ZSBhdCBnaXRodWIgcmVwbyBvciBzZW50IHRvIFxuY2FveWFxaWFuZzA0MTBAZ21haWwuY29tIG9yIHlhcWlhbmcuY2FvQG5paC5nb3YuIFRoYW5rIHlvdS5cbmBgYFxuXG4tLS0tLS1cbiMjIyAxLiBRdWFsaXR5IGNvbnRyb2wgZm9yIEJFRFBFIGZpbGVzXG5SdW4gKipjTG9vcHMyIHFjIC1oKiogdG8gc2VlIGRldGFpbHMuIFxuYGBgXG5HZXQgdGhlIGJhc2ljIHF1YWxpdHkgY29udHJvbCBzdGF0aXN0aWNhbCBpbmZvcm1hdGlvbiBmcm9tIGludGVyYWN0aW9uIEJFRFBFXG5maWxlcy5cblxuRXhhbXBsZTogXG4gICAgY0xvb3BzMiBxYyAtZiB0cmFjX3JlcDEuYmVkcGUuZ3osdHJhY19yZXAyLmJlZHBlLHRyYWNfcmVwMy5iZWRwZS5neiAtcCAzIFxcXG4gICAgICAgICAgICAgICAtbyB0cmFjX3N0YXRcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLWYgRk5JTiAgICAgSW5wdXQgQkVEUEUgZmlsZShzKSwgLmJlZHBlIGFuZCAuYmVkcGUuZ3ogYXJlIGJvdGggc3VpdGFibGUuIE11bHRpcGxlXG4gICAgICAgICAgICAgIHNhbXBsZXMgY2FuIGJlIGFzc2lnbmVkIGFzIC1mIEEuYmVkcGUuZ3osQi5iZWRwZS5neixDLmJlZHBlLmd6LlxuYGBgXG5cbi0tLS0tLVxuIyMjIDIuIFByZS1wcm9jZXNzIEJFRFBFIGludG8gY0xvb3BzMiBkYXRhXG5SdW4gKipjTG9vcHMyIHByZSAtaCoqIHRvIHNlZSBkZXRhaWxzLiBcbmBgYFxuUHJlcHJvY2VzcyBtYXBwZWQgUEVUcyBpbnRvIGNMb29wczIgZGF0YSBmaWxlcy5cblxuU3VwcG9ydCBpbnB1dCBmaWxlIGZvcm1hdHM6XG5CRURQRTogaHR0cHM6Ly9iZWR0b29scy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvY29udGVudC9nZW5lcmFsLXVzYWdlLmh0bWwgXG5QQUlSUzogaHR0cHM6Ly9wYWlydG9vbHMucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2Zvcm1hdHMuaHRtbCNwYWlyc1xuXG5UaGUgb3V0cHV0IGRpcmVjdG9yeSBjb250YWlucyBvbmUgLmpzb24gZmlsZSBmb3IgdGhlIGJhc2ljIHN0YXRpc3RpY3Mgb2YgUEVUcyBcbmluZm9ybWF0aW9uIGFuZCAuaXh5IGZpbGVzIHdoaWNoIGFyZSBjb29yZGluYXRlcyBmb3IgZXZlcnkgUEVULiBUaGUgY29vcmRpbmF0ZVxuZmlsZXMgd2lsbCBiZSB1c2VkIHRvIGNhbGwgcGVha3MsIGxvb3BzIG9yIGFueSBvdGhlciBhbmFseXNlcyBpbXBsZW1lbnRlZCBpbiBcbmNMb29wczIuIEZvciBkYXRhIGJhY2t1cC9zaGFyaW5nIHB1cnBvc2VzLCB0aGUgZGlyZWN0b3J5IGNhbiBiZSBzYXZlZCBhcyBcbi50YXIuZ3ogZmlsZSB0aHJvdWdoIHRhci4gSWYgY2hhbmdlZCBhbmQgbW92ZWQgbG9jYXRpb24sIHJ1biBcbioqKmNMb29wczIgdXBkYXRlIC1kKioqIHRvIHVwZGF0ZS5cblxuRXhhbXBsZXM6XG4gICAgMS4ga2VlcCBoaWdoIHF1YWxpdHkgUEVUcyBvZiBjaHJvbW9zb21lIGNocjIxXG4gICAgICAgIGNMb29wczIgcHJlIC1mIHRyYWNfcmVwMS5iZXBlZS5neix0cmFjX3JlcDIuYmVkcGUuZ3ogLW8gdHJhYyAtYyBjaHIyMVxuXG4gICAgMi4ga2VlcCBhbGwgY2lzIFBFVHMgdGhhdCBoYXZlIGRpc3RhbmNlID4gMWtiXG4gICAgICAgIGNMb29wczIgcHJlIC1mIHRyYWNfcmVwMS5iZWRwZS5neix0cmFjX3JlcDIuYmVkcGUuZ3ogLW8gdHJhYyAtbWFwcSAwXG5cblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICAgICAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgICAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICAgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICAgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLWYgRk5JTiAgICAgICAgICAgICAgIElucHV0IEJFRFBFIG9yIFBBSVIgZmlsZShzKSwgLmJlZHBlIGFuZCAuYmVkcGUuZ3ogYXJlIGJvdGggc3VpdGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICBSZXBsaWNhdGVzIG9yIG11bHRpcGxlIHNhbXBsZXMgY2FuIGJlIGFzc2lnbmVkIGFzIC1mIEEuYmVkcGUuZ3osXG4gICAgICAgICAgICAgICAgICAgICAgICBCLmJlZHBlLmd6LEMuYmVkcGUuZ3ogdG8gZ2V0IG1lcmdlZCBQRVRzLlxuICAtYyBDSFJPTVMgICAgICAgICAgICAgQXJndW1lbnQgdG8gcHJvY2VzcyBsaW1pdGVkIHNldCBvZiBjaHJvbW9zb21lcywgc3BlY2lmeSBpdCBhcyBjaHIxLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2hyMixjaHIzLiBVc2UgdGhpcyBvcHRpb24gdG8gZmlsdGVyIHJlYWRzIGZyb20gc3VjaCBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hyMjJfS0kyNzA4NzZ2MS4gVGhlIGRlZmF1bHQgc2V0dGluZyBpcyB0byB1c2UgdGhlIGVudGlyZSBzZXQgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocm9tb3NvbWVzIGZyb20gdGhlIGRhdGEuXG4gIC10cmFucyAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHBhcnNlIHRyYW5zLSAoaW50ZXItY2hyb21vc29tYWwpIFBFVHMuIFRoZSBkZWZhdWx0IGlzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmUgdHJhbnMtUEVUcy4gU2V0IHRoaXMgZmxhZyB0byBwcmUtcHJvY2VzcyBhbGwgUEVUcy5cbiAgLW1hcHEgTUFQUSAgICAgICAgICAgIE1BUFEgY3V0b2ZmIHRvIGZpbHRlciByYXcgUEVUcywgZGVmYXVsdCBpcyA+PTEwLiBUaGlzIG9wdGlvbiBpcyBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkIHdoZW4gaW5wdXQgaXMgLnBhaXJzIGZpbGUuXG4gIC1mb3JtYXQge2JlZHBlLHBhaXJzfVxuICAgICAgICAgICAgICAgICAgICAgICAgY0xvb3BzMiBjdXJyZW50bHkgc3VwcG9ydHMgQkVEUEUgYW5kIFBBSVJzIGZpbGUgZm9ybWF0LiBEZWZhdWx0IGlzIGJlZHBlLlxuYGBgXG5cbi0tLS0tLVxuIyMjIDMuIFVwZGF0ZSBjTG9vcHMyIGRhdGEgZGlyZWN0b3J5XG5SdW4gKipjTG9vcHMyIHVwZGF0ZSAtaCoqIHRvIHNlZSBkZXRhaWxzLiBcbmBgYFxuVXBkYXRlIGNMb29wczIgZGF0YSBmaWxlcyBnZW5lcmF0ZWQgYnkgKipjTG9vcHMyIHByZSoqLlxuXG5JbiB0aGUgKipjTG9vcHMyIHByZSoqIG91dHB1dCBkaXJlY3RvcnksIHRoZXJlIGlzIGEgLmpzb24gZmlsZSBhbm5vdGF0ZWQgd2l0aCBcbnRoZSAuaXh5ICoqYWJzb2x1dGUgcGF0aHMqKiBhbmQgb3RoZXIgaW5mb3JtYXRpb24uIFNvIGlmIHRoZSBkaXJlY3RvcnkgaXMgXG5tb3ZlZCwgb3Igc29tZSAuaXh5IGZpbGVzIGFyZSByZW1vdmVkIG9yIGNoYW5nZWQsIHRoaXMgY29tbWFuZCBpcyBuZWVkZWQgdG8gXG51cGRhdGUgdGhlIHBhdGhzLCBvdGhlcndpc2UgdGhlIG90aGVyIGFuYWx5c2lzIG1vZHVsZXMgd2lsbCBub3Qgd29yay5cblxuRXhhbXBsZTpcbiAgICBjTG9vcHMyIHVwZGF0ZSAtZCAuL1RyYWNcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbmBgYFxuXG4tLS0tLS1cbiMjIyA0LiBDb252ZXJ0IGNMb29wczIgZGF0YSB0byBvdGhlcnMgICAgXG5SdW4gKipjTG9vcHMyIGR1bXAgLWgqKiB0byBzZWUgZGV0YWlscy4gICBcbmBgYFxuQ29udmVydCBjTG9vcHMyIGRhdGEgZmlsZXMgdG8gb3RoZXIgdHlwZXMuIEN1cnJlbnRseSBzdXBwb3J0cyBCRUQgZmlsZSxCRURQRSBcbmZpbGUsIEhJQyBmaWxlLCB3YXNoVSBsb25nLXJhbmdlIHRyYWNrLCBiZWRHcmFwaCBmaWxlIGFuZCBtYXRyaXggdHh0IGZpbGUuIFxuXG5Db252ZXJ0aW5nIGNMb29wczIgZGF0YSB0byAuaGljIGZpbGUgbmVlZHMgXCJqdWljZXJfdG9vbHMgcHJlXCIgaW4gdGhlIGNvbW1hbmRcbmxpbmUgZW52aXJvbWVudC4gXG5Db252ZXJ0aW5nIGNMb29wczIgZGF0YSB0byBsZWdhY3kgd2FzaFUgYnJvd3NlciBsb25nLXJhbmdlIHRyYWNrIG5lZWRzIGJnemlwXG5hbmQgdGFiaXguIEZvcm1hdCByZWZlcmVuY2U6IGh0dHA6Ly93aWtpLnd1YnJvd3NlLm9yZy9Mb25nLXJhbmdlLiBcbkNvbnZlcnRpbmcgY0xvb3BzMiBkYXRhIHRvIFVDU0MgYmlnSW50ZXJhY3QgdHJhY2sgbmVlZHMgYmVkVG9CaWdCZWQuIEZvcm1hdCBcbnJlZmVyZW5jZTogaHR0cHM6Ly9nZW5vbWUudWNzYy5lZHUvZ29sZGVuUGF0aC9oZWxwL2ludGVyYWN0Lmh0bWwuXG5Db252ZXJ0aW5nIGNMb29wczIgZGF0YSB0byBiZWRHcmFwaCB0cmFjayB3aWxsIG5vcm1hbGl6ZSB2YWx1ZSBhcyBSUE0gXG4ocmVhZHMgcGVyIG1pbGxpb24pLiBSdW4gd2l0aCAtYmRnX3BlIGZsYWcgZm9yIDFEIGRhdGEgc3VjaCBhcyBDaElDLXNlcSxcbkNoSVAtc2VxIGFuZCBBVEFDLXNlcS4gXG5Db252ZXJ0aW5nIGNMb29wczIgZGF0YSB0byBtYXRyaXggdHh0IGZpbGUgd2lsbCBuZWVkIHNwZWNpZmljIHJlc29sdXRpb24uIFxuVGhlIG91dHB1dCB0eHQgZmlsZSBjYW4gYmUgbG9hZGVkIGluIFRyZWVWaWV3IGZvciB2aXN1YWxpemF0aW9uIG9yIGZ1cnRoZXJcbmFuYWx5c2lzLiBcblxuRXhhbXBsZXM6XG4gICAgMS4gY29udmVydCBjTG9vcHMyIGRhdGEgdG8gc2luZ2xlLWVuZCAuYmVkIGZpbGUgZm8gdXNhZ2Ugb2YgQkVEdG9vbHMgb3IgXG4gICAgICAgTUFDUzIgZm9yIHBlYWstY2FsbGluZyB3aXRoIGNsb3NlIFBFVHNcbiAgICAgICAgY0xvb3BzMiBkdW1wIC1kIHRyYWMgLW8gdHJhYyAtYmVkIC1tY3V0IDEwMDBcblxuICAgIDIuIGNvbnZlcnQgY0xvb3BzMiBkYXRhIHRvIC5iZWRwZSBmaWxlIGZvciB1c2FnZSBvZiBCRUR0b29scywgb25seSBrZWVwIFxuICAgICAgIFBFVHMgZGlzdGFuY2UgPjFrYiBhbmQgPCAxTWJcbiAgICAgICAgY0xvb3BzMiBkdW1wIC1kIHRyYWMgLW8gdHJhYyAtYmVkcGUgLWJlZHBlX2V4dCAtY3V0IDEwMDAgLW1jdXQgMTAwMDAwMCBcblxuICAgIDMuIGNvbnZlcnQgY0xvb3BzMiBkYXRhIHRvIC5oaWMgZmlsZSB0byBsb2FkIGluIGp1aWNlYm94XG4gICAgICAgIGNMb29wczIgZHVtcCAtZCB0cmFjIC1vIHRyYWMgLWhpYyAtaGljX29yZyBoZzM4IFxcXG4gICAgICAgICAgICAgICAgICAgIC1oaWNfcmVzIDIwMDAwMCwyMDAwMCw1MDAwXG5cbiAgICA0LiBjb252ZXJ0IGNMb29wczIgZGF0YSB0byB3YXNoVSBsb25nLXJhbmdlIHRyYWNrIGZpbGUsIG9ubHkga2VlcCBQRVRzIFxuICAgICAgIGRpc3RhbmNlID4gMWtiIFxuICAgICAgICBjTG9vcHMyIGR1bXAgLWQgdHJhYyAtbyB0cmFjIC13YXNoVSAtd2FzaFVfZXh0IDUwIC1jdXQgMTAwMFxuXG4gICAgNS4gY29udmVydCBjTG9vcHMyIGRhdGEgdG8gVUNTQyBiaWdJbnRlcmFjdCB0cmFjayBmaWxlIFxuICAgICAgICBjTG9vcHMyIGR1bXAgLWQgdHJhYyAtbyB0cmFjIC11Y3NjIC11Y3NjX2NzIC4vaGczOC5jaHJvbS5zaXplcyBcblxuICAgIDYuIGNvbnZlcnQgaW50ZXJhY3RpbmcgY0xvb3BzMiBkYXRhIHRvIGJlZEdyYXBoIGZpbGUgd2l0aCBhbGwgUEVUc1xuICAgICAgICBjTG9vcHMyIGR1bXAgLWQgdHJhYyAtbyB0cmFjIC1iZGcgLWJkZ19leHQgMTAwXG5cbiAgICA3LiBjb252ZXJ0IDFEIGNMb29wczIgZGF0YSAoc3VjaCBhcyBDaElDLXNlcS9DaElQLXNlcS9BVEFDLXNlcSkgdG8gYmVkR3JhcGggXG4gICAgICAgZmlsZSBcbiAgICAgICAgY0xvb3BzMiBkdW1wIC1kIHRyYWMgLW8gdHJhYyAtYmRnIC1wZSBcblxuICAgIDguIGNvbnZlcnQgM0QgY0xvb3BzMiBkYXRhIChzdWNoIGFzIFRyYWMtbG9vcGluZykgdG8gYmVkR3JhcGggZmlsZSBmb3IgcGVha3NcbiAgICAgICAgY0xvb3BzMiBkdW1wIC1kIHRyYWMgLW8gdHJhYyAtYmRnIC1tY3V0IDEwMDBcblxuICAgIDkuIGNvbnZlcnQgb25lIHJlZ2lvbiBpbiBjaHIyMSB0byBjb250YWN0IG1hdHJpeCBjb3JyZWxhdGlvbiBtYXRyaXggdHh0IGZpbGUgXG4gICAgICAgIGNMb29wczIgZHVtcCAtZCB0ZXN0IC1tYXQgLW8gdGVzdCAtbWF0X3JlcyAxMDAwMCBcXFxuICAgICAgICAgICAgICAgICAgICAtbWF0X2Nocm9tIGNocjIxLWNocjIxIC1tYXRfc3RhcnQgMzYwMDAwMDAgXFxcbiAgICAgICAgICAgICAgICAgICAgLW1hdF9lbmQgNDAwMDAwMDAgLWxvZyAtY29yclxuXG5cbm9wdGlvbmFsIGFyZ3VtZW50czpcbiAgLWgsIC0taGVscCAgICAgICAgICAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgICAgICAgICAgIEFzc2lnbiBkYXRhIGRpcmVjdG9yeSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBwcmUgdG8gY2Fycnkgb3V0IGFuYWx5c2lzLiBcbiAgLW8gRk5PVVQgICAgICAgICAgICAgIE91dHB1dCBkYXRhIGRpcmVjdG9yeSAvIGZpbGUgbmFtZSBwcmVmaXgsIGRlZmF1bHQgaXMgY0xvb3BzMl9vdXRwdXQuXG4gIC1wIENQVSAgICAgICAgICAgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLiBUb28gbWFueSBDUFUgY291bGQgY2F1c2Ugb3V0LW9mLW1lbW9yeSBwcm9ibGVtIGlmIHRoZXJlIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9vIG1hbnkgUEVUcy5cbiAgLWN1dCBDVVQgICAgICAgICAgICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgID49Y3V0LiBEZWZhdWx0IGlzIDAsIG5vIGZpbHRlcmluZy5cbiAgLW1jdXQgTUNVVCAgICAgICAgICAgIEtlZXAgdGhlIFBFVHMgd2l0aCBkaXN0YW5jZSA8PW1jdXQuIERlZmF1bHQgaXMgLTEsIG5vIGZpbHRlcmluZy5cbiAgLXYgICAgICAgICAgICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgICAgICAgICAgIEZvbGxvd2luZyBhcmUgc3ViLWNvbW1hbmRzIHNwZWNpZmljIG9wdGlvbnMuIFRoaXMgb3B0aW9uIGp1c3Qgc2hvd1xuICAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiBvZiBjTG9vcHMyLlxuICAtYmVkICAgICAgICAgICAgICAgICAgQ29udmVydCBkYXRhIHRvIHNpbmdsZS1lbmQgQkVEIGZpbGUuXG4gIC1iZWRfZXh0IEJFRF9FWFQgICAgICBFeHRlbnNpb24gZnJvbSB0aGUgY2VudGVyIG9mIHRoZSByZWFkIHRvIGJvdGggZW5kcyBmb3IgQkVEIGZpbGUuXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIDUwLlxuICAtYmVkcGUgICAgICAgICAgICAgICAgQ29udmVydCBkYXRhIHRvIEJFRFBFIGZpbGUuXG4gIC1iZWRwZV9leHQgQkVEUEVfRVhUICBFeHRlbnNpb24gZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBQRVQgdG8gYm90aCBlbmRzIGZvciBCRURQRSBmaWxlLlxuICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyA1MC5cbiAgLWhpYyAgICAgICAgICAgICAgICAgIENvbnZlcnQgZGF0YSB0byAuaGljIGZpbGUuXG4gIC1oaWNfb3JnIEhJQ19PUkcgICAgICBPcmdhbmlzbSByZXF1aXJlZCB0byBnZW5lcmF0ZSAuaGljIGZpbGUsZGVmYXVsdCBpcyBoZzM4LiBJZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgIG9yZ2FuaXNtIGlzIG5vdCBhdmFpbGFibGUsIGFzc2lnbiBhIGNocm9tLnNpemUgZmlsZS5cbiAgLWhpY19yZXMgSElDX1JFUyAgICAgIFJlc29sdXRpb25zIHVzZWQgdG8gZ2VuZXJhdGUgLmhpYyBmaWxlLiBEZWZhdWx0IGlzIDEwMDAsNTAwMCwyNTAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDUwMDAwLDEwMDAwMCwyMDAwMDAuXG4gIC13YXNoVSAgICAgICAgICAgICAgICBDb252ZXJ0IGRhdGEgdG8gbGVnYWN5IHdhc2hVIGJyb3dzZXIgbG9uZy1yYW5nZSB0cmFjay5cbiAgLXdhc2hVX2V4dCBXQVNIVV9FWFQgIEV4dGVuc2lvbiBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIFBFVCB0byBib3RoIGVuZHMgZm9yIHdhc2hVIHRyYWNrLlxuICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyA1MC5cbiAgLXVjc2MgICAgICAgICAgICAgICAgIENvbnZlcnQgZGF0YSB0byBVQ1NDIGJpZ0ludGVyYWN0IGZpbGUgdHJhY2suXG4gIC11Y3NjX2V4dCBVQ1NDX0VYVCAgICBFeHRlbnNpb24gZnJvbSB0aGUgY2VudGVyIG9mIHRoZSBQRVQgdG8gYm90aCBlbmRzIGZvciB1Y3NjXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFjay4gRGVmYXVsdCBpcyA1MC5cbiAgLXVjc2NfY3MgVUNTQ19DUyAgICAgIEEgY2hyb20uc2l6ZXMgZmlsZS4gQ2FuIGJlIG9idGFpbmVkIHRocm91Z2ggZmV0Y2hDaHJvbVNpemVzZS5cbiAgICAgICAgICAgICAgICAgICAgICAgIFJlcXVpcmVkIGZvciAtdWNzYyBvcHRpb24uXG4gIC1iZGcgICAgICAgICAgICAgICAgICBDb252ZXJ0IGRhdGEgdG8gMUQgYmVkR3JhcGggdHJhY2sgZmlsZS5cbiAgLWJkZ19leHQgQkRHX0VYVCAgICAgIEV4dGVuc2lvbiBmcm9tIHRoZSBjZW50ZXIgb2YgdGhlIFBFVCB0byBib3RoIGVuZHMgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWRHcmFwaCB0cmFjay4gRGVmYXVsdCBpcyA1MC5cbiAgLWJkZ19wZSAgICAgICAgICAgICAgIFdoZW4gY29udmVydGluZyB0byBiZWRHcmFwaCwgYXJndW1lbnQgZGV0ZXJtaW5lcyB3aGV0aGVyIHRvIHRyZWF0IFBFVHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzIENoSVAtc2VxLCBDaElDLXNlcSBvciBBVEFDLXNlcSBwYWlyZWQtZW5kIGxpYnJhcmllcy4gRGVmYXVsdCBpcyBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICBQRVRzIGFyZSB0cmVhdGVkIGFzIHNpbmdsZS1lbmQgbGlicmFyeSBmb3IgaW50ZXJhY3RpbmcgZGF0YS5cbiAgLW1hdCAgICAgICAgICAgICAgICAgIENvbnZlcnQgZGF0YSB0byBtYXRyaXggdHh0IGZpbGUgd2l0aCByZXF1aXJlZCByZXNvbHV0aW9uLlxuICAtbWF0X3JlcyBNQVRfUkVTICAgICAgQmluIHNpemUvbWF0cml4IHJlc29sdXRpb24gKGJwKSB0byBnZW5lcmF0ZSB0aGUgY29udGFjdCBtYXRyaXguIFxuICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyA1MDAwIGJwLiBcbiAgLW1hdF9jaHJvbSBDSFJPTSAgICAgIFRoZSBjaHJvbS1jaHJvbSBzZXQgd2lsbCBiZSBwcm9jZXNzZWQuIFNwZWNpZnkgaXQgYXMgY2hyMS1jaHIxLlxuICAtbWF0X3N0YXJ0IFNUQVJUICAgICAgU3RhcnQgZ2Vub21pYyBjb29yZGluYXRlIGZvciB0aGUgdGFyZ2V0IHJlZ2lvbi4gRGVmYXVsdCB3aWxsIGJlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgc21hbGxlc3QgY29vcmRpbmF0ZSBmcm9tIHNwZWNpZmllZCBjaHJvbS1jaHJvbSBzZXQuXG4gIC1tYXRfZW5kIEVORCAgICAgICAgICBFbmQgZ2Vub21pYyBjb29yZGluYXRlIGZvciB0aGUgdGFyZ2V0IHJlZ2lvbi4gRGVmYXVsdCB3aWxsIGJlIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgbGFyZ2VzdCBjb29yZGluYXRlIGZyb20gc3BlY2lmaWVkIGNocm9tLWNocm9tIHNldC5cbiAgLWxvZyAgICAgICAgICAgICAgICAgIFdoZXRoZXIgdG8gbG9nIHRyYW5zZm9ybSB0aGUgbWF0cml4LiBEZWZhdWx0IGlzIG5vdC5cbiAgLW0ge29icyxvYnMvZXhwfSAgICAgIFRoZSB0eXBlIG9mIG1hdHJpeCwgb2JzZXJ2ZWQgbWF0cml4IG9yIG9ic2VydmVkL2V4cGVjdGVkIG1hdHJpeCwgXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBlY3RlZCBtYXRyaXggd2lsbCBiZSBnZW5lcmF0ZWQgYnkgc2h1ZmZsaW5nIFBFVHMuIERlZmF1bHQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVkLlxuICAtY29yciAgICAgICAgICAgICAgICAgV2hldGhlciB0byBnZXQgdGhlIGNvcnJlbGF0aW9uIG1hdHJpeC4gRGVmYXVsdCBpcyBub3QuIFxuICAtbm9ybSAgICAgICAgICAgICAgICAgV2hldGhlciB0byBub3JtYWxpemUgdGhlIG1hdHJpeCB3aXRoIHotc2NvcmUuIERlZmF1bHQgaXMgbm90LlxuXG5gYGBcblxuXG4tLS0tLS1cbiMjIyA1LiBFc3RpbWF0ZSBlcHNcblJ1biAqKmNMb29wczIgZXN0RXBzIC1oKiogdG8gc2VlIGRldGFpbHMuIFxuYGBgXG5Fc3RpbWF0ZSBrZXkgcGFyYW1ldGVyIGVwcy4gXG5cblR3byBtZXRob2RzIGFyZSBpbXBsZW1lbnRlZDogMSkgdW5zdXBlcnZpc2VkIEdhdXNzaWFuIG1peHR1cmUgbW9kZWwgKGdtbSksIGFuZCBcbjIpIGstZGlzdGFuY2UgcGxvdCAoay1kaXMsLWsgbmVlZGVkKS4gR21tIGlzIGJhc2VkIG9uIHRoZSBhc3N1bXB0aW9uIHRoYXQgUEVUcyBcbmNhbiBiZSBjbGFzc2lmaWVkIGludG8gc2VsZi1saWdhdGlvbiAocGVha3MpIGFuZCBpbnRlci1saWdhdGlvbiAobG9vcHMpLiBLLWRpc1xuaXMgYmFzZWQgb24gdGhlIGstbmVhcmVzdCBuZWlnaGJvcnMgZGlzdGFuY2UgZGlzdHJpYnV0aW9uIHRvIGZpbmQgdGhlIFwia25lZVwiLCBcbndoaWNoIGlzIHdoZXJlIHRoZSBkaXN0YW5jZSAoZXBzKSBiZXR3ZWVuIG5laWdoYm9ycyBoYXMgYSBzaGFycCBpbmNyZWFzZSBhbG9uZ1xudGhlIGstZGlzdGFuY2UgY3VydmUuIEstZGlzIGlzIHRoZSB0cmFkaXRpb25hbCBhcHByb2FjaCBsaXRlcmF0dXJlcywgYnV0IGl0IGlzXG5tdWNoIG1vcmUgdGltZSBjb25zdW1pbmcgdGhhbiBnbW0sIGFuZCBtYXliZSBvbmx5IGZpdCB0byBzbWFsbCBjYXNlcy4gSWYgYm90aCBcbm1ldGhvZHMgZG8gbm90IGdpdmUgbmljZSBwbG90cywgcGxlYXNlIHR1cm4gdG8gdGhlIGVtcGlyaWNhbCBwYXJhbWV0ZXJzIHlvdSBcbmxpa2UsIHN1Y2ggYXMgMTAwLDIwMCBmb3IgQ2hJUC1zZXEgLWxpa2UgZGF0YSwgNTAwMCwxMDAwIGZvciBIaS1DIGFuZCBldGMuXG5cbkV4YW1wbGVzOiBcbiAgICAxLiBlc3RpbWF0ZSBlcHMgd2l0aCBHYXVzc2lhbiBtaXh0dXJlIG1vZGVsICAgIFxuICAgICAgICBjTG9vcHMyIGVzdEVwcyAtZCB0cmFjIC1vIHRyYWNfZXN0RXBzX2dtbSAtcCAxMCAtbWV0aG9kIGdtbVxuXG4gICAgMi4gZXN0aW1hdGUgZXBzIHdpdGggay1uZWFyZXN0IG5laWdoYm9ycyBkaXN0YW5jZSBkaXN0cmlidXRpb25cbiAgICAgICAgY0xvb3BzMiBlc3RFcHMgLWQgdHJhYyAtbyB0cmFjX2VzdEVwc19rZGlzIC1wIDEwIC1tZXRob2Qgay1kaXMgLWsgNVxuXG5cbm9wdGlvbmFsIGFyZ3VtZW50czpcbiAgLWgsIC0taGVscCAgICAgICAgICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgICAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICAgICAgIE91dHB1dCBkYXRhIGRpcmVjdG9yeSAvIGZpbGUgbmFtZSBwcmVmaXgsIGRlZmF1bHQgaXMgY0xvb3BzMl9vdXRwdXQuXG4gIC1wIENQVSAgICAgICAgICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgdG9vIG1hbnkgUEVUcy5cbiAgLWN1dCBDVVQgICAgICAgICAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICAgICAgIEtlZXAgdGhlIFBFVHMgd2l0aCBkaXN0YW5jZSA8PW1jdXQuIERlZmF1bHQgaXMgLTEsIG5vIGZpbHRlcmluZy5cbiAgLXYgICAgICAgICAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiBvZiBjTG9vcHMyLlxuICAtZml4eSBGSVhZICAgICAgICAgICBBc3NpZ24gdGhlIC5peHkgZmlsZSB0byBlc3RpbWF0ZSBlcHMgaW5zaWRlIG9mIHRoZSB3aG9sZSBkaXJlY3RvcnlcbiAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlLiBGb3IgdmVyeSBsYXJnZSBkYXRhLCBlc3BlY2lhbGx5IEhpLUMsIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uIGlzIHJlY29tbWVuZGVkIGZvciBjaHIxIChvciB0aGUgc21hbGxlciBvbmUpIHRvIHNhdmUgdGltZS5cbiAgLWsgS05OICAgICAgICAgICAgICAgVGhlIGstbmVhcmVzdCBuZWlnaGJvcnMgdXNlZCB0byBkcmF3IHRoZSBrLWRpc3RhbmNlIHBsb3QuIERlZmF1bHQgaXMgMFxuICAgICAgICAgICAgICAgICAgICAgICAobm90IHJ1bm5pbmcpLCBzZXQgdGhpcyB3aGVuIC1tZXRob2Qgay1kaXMuIFN1Z2dlc3RlZCA1IGZvclxuICAgICAgICAgICAgICAgICAgICAgICBDaElBLVBFVC9UcmFjLWxvb3BpbmcgZGF0YSwgMjAgb3IgMzAgZm9yIEhpLUMgbGlrZSBkYXRhLlxuICAtbWV0aG9kIHtnbW0say1kaXN9ICBUd28gbWV0aG9kcyBjYW4gYmUgY2hvc2VuIHRvIGVzdGltYXRlIGVwcy4gRGVmYXVsdCBpcyBHbW0uIFNlZSBhYm92ZVxuICAgICAgICAgICAgICAgICAgICAgICBmb3IgZGlmZmVyZW5jZSBvZiB0aGUgbWV0aG9kcy5cblxuYGBgXG5cbi0tLS0tLVxuIyMjIDYuIEVzdGltYXRlIHJlYXNvbmFibGUgY29udGFjdCBtYXRyaXggcmVzb2x1dGlvbiBcblJ1biAqKmNMb29wczIgZXN0UmVzIC1oKiogdG8gc2VlIGRldGFpbHMuIFxuYGBgXG5Fc3RpbWF0ZSByZWFzb25hYmxlIGdlbm9tZS13aWRlIGNvbnRhY3QgbWF0cml4IHJlc29sdXRpb24gYmFzZWQgb24gc2lnbmFsIFxuZW5yaWNobWVudC4gXG5cblBFVHMgd2lsbCBiZSBhc3NpZ25lZCB0byBjb250YWN0IG1hdHJpeCBiaW5zIGFjY29yZGluZyB0byBpbnB1dCByZXNvbHV0aW9uLiBBIFxuYmluIGlzIG1hcmtlZCBhcyBbbngsbnldLCBhbmQgYSBQRVQgaXMgYXNzaWduZWQgdG8gYSBiaW4gYnkgbnggPSBpbnQoKHgtcykvYnMpLFxubnkgPSBpbnQoKHktcykvYnMpLCB3aGVyZSBzIGlzIHRoZSBtaW5pbWFsIGNvb3JkaW5hdGUgZm9yIGFsbCBQRVRzIGFuZCBicyBpcyBcbnRoZSBiaW4gc2l6ZS4gU2VsZi1pbnRlcmFjdGlvbiBiaW5zIChueD1ueSkgd2lsbCBiZSBpZ25vcmVkLiBUaGUgYmlucyBvbmx5IFxuY29udGFpbmluZyBzaW5nbGV0b24gUEVUcyBhcmUgYXNzdW1lZCBhcyBub2lzZS4gXG5cblRoZSBvdXRwdXQgaXMgYSBQREYgcGxvdCwgZm9yIGVhY2ggcmVzb2x1dGlvbiwgYSBsaW5lIGlzIHNlcGFyYXRlZCBpbnRvIHR3byBcbnBhcnRzOiAxKSBkYXNoIGxpbmUgaW5kaWNhdGVkIGxpbmVhciBpbmNyZWFzZWQgdHJlbmQgb2Ygc2luZ2xldG9uIFBFVHMvYmluczsgMilcbnNvbGlkIHRoaWNrZXIgbGluZSBpbmRpY2F0ZWQgbm9uLWxpbmVhciBpbmNyZWFzZWQgdHJlbmQgb2YgaGlnaGVyIHBvdGVudGlhbCBcbnNpZ25hbCBQRVRzL2JpbnMuIFRoZSBoaWdoZXIgdGhlIHJhdGlvIG9mIHNpZ25hbCBQRVRzL2JpbnMsIHRoZSBlYXNpZXIgaXQgaXQgdG9cbmZpbmQgbG9vcHMgaW4gdGhhdCByZXNvbHV0aW9uLiBUaGUgY2xvc2VyIHRvIHRoZSByYW5kb20gbGluZSwgdGhlIGhpZ2hlciB0aGUgXG5wb3NzaWJpbGl0eSB0byBvYnNlcnZlIGV2ZW5seSBkaXN0cmlidXRlZCBzaWduYWxzLiAgXG5cbldlIGV4cGVjdCB0aGUgaGlnaGVzdCByZXNvbHV0aW9uIHdpdGggPj01MCUgUEVUcyBhcmUgbm90IHNpbmdsZXRvbnMuXG5cbkV4YW1wbGU6XG4gICAgY0xvb3BzMiBlc3RSZXMgLWQgdHJhYyAtbyB0cmFjIC1icyAxMDAwMCw1MDAwLDEwMDAgLXAgMjBcblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgT3V0cHV0IGRhdGEgZGlyZWN0b3J5IC8gZmlsZSBuYW1lIHByZWZpeCwgZGVmYXVsdCBpcyBjTG9vcHMyX291dHB1dC5cbiAgLXAgQ1BVICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICB0b28gbWFueSBQRVRzLlxuICAtY3V0IENVVCAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgS2VlcCB0aGUgUEVUcyB3aXRoIGRpc3RhbmNlIDw9bWN1dC4gRGVmYXVsdCBpcyAtMSwgbm8gZmlsdGVyaW5nLlxuICAtdiAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICB2ZXJzaW9uIG9mIGNMb29wczIuXG4gIC1icyBCSU5TSVpFICBDYW5kaWRhdGUgY29udGFjdCBtYXRyaXggcmVzb2x1dGlvbiAoYmluIHNpemUpIHRvIGVzdGltYXRlIHNpZ25hbFxuICAgICAgICAgICAgICAgZW5yaWNobWVudC4gQSBzZXJpZXMgb2YgY29tbWEtc2VwYXJhdGVkIHZhbHVlcyBvciBhIHNpbmdsZSB2YWx1ZSBjYW5cbiAgICAgICAgICAgICAgIGJlIHVzZWQgYXMgaW5wdXQuIEZvciBleGFtcGxlLC1icyAxMDAwLDUwMDAsMTAwMDAuIERlZmF1bHQgaXMgNTAwMC5cblxuYGBgXG5cbi0tLS0tLVxuIyMjIDcuIEVzdGltYXRlIHNpZ25pZmljYW50IGludGVyYWN0aW9uIGRpc3RhbmNlIHJhbmdlXG5SdW4gKipjTG9vcHMyIGVzdERpcyAtaCoqIHRvIHNlZSBkZXRhaWxzLiBcbmBgYFxuRXN0aW1hdGUgdGhlIHNpZ25pZmljYW50IGludGVyYWN0aW9uIGRpc3RhbmNlIGxpbWl0YXRpb24gYnkgZ2V0dGluZyB0aGUgb2JzZXJ2ZWRcbmFuZCBleHBlY3RlZCByYW5kb20gYmFja2dyb3VuZCBvZiB0aGUgZ2Vub21pYyBkaXN0YW5jZSB2cyBpbnRlcmFjdGlvbiBmcmVxdWVuY3kuXG5cbkV4YW1wbGU6XG4gICAgY0xvb3BzMiBlc3REaXMgLWQgdHJhYyAtbyB0cmFjIC1icyA1MDAwIC1wIDIwIC1wbG90XG5cblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgT3V0cHV0IGRhdGEgZGlyZWN0b3J5IC8gZmlsZSBuYW1lIHByZWZpeCwgZGVmYXVsdCBpcyBjTG9vcHMyX291dHB1dC5cbiAgLXAgQ1BVICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICB0b28gbWFueSBQRVRzLlxuICAtY3V0IENVVCAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgS2VlcCB0aGUgUEVUcyB3aXRoIGRpc3RhbmNlIDw9bWN1dC4gRGVmYXVsdCBpcyAtMSwgbm8gZmlsdGVyaW5nLlxuICAtdiAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICB2ZXJzaW9uIG9mIGNMb29wczIuXG4gIC1jIENIUk9NUyAgICBXaGV0aGVyIHRvIHByb2Nlc3MgbGltaXRlZCBjaHJvbXMsIHNwZWNpZnkgaXQgYXMgY2hyMSxjaHIyLGNocjMsIFxuICAgICAgICAgICAgICAgZGVmYXVsdCBpcyBub3QuIFVzZSB0aGlzIHRvIHNhdmUgdGltZSBmb3IgcXVpdGUgYmlnIGRhdGEuXG4gIC1icyBCSU5TSVpFICBCaW4gc2l6ZSAvIGNvbnRhY3QgbWF0cml4IHJlc29sdXRpb24gKGJwKSB0byBnZW5lcmF0ZSB0aGUgY29udGFjdFxuICAgICAgICAgICAgICAgbWF0cml4IGZvciBlc3RpbWF0aW9uLCBkZWZhdWx0IGlzIDUwMDAgYnAuXG4gIC1yIFJFUEVBVFMgICBUaGUgcmVhcGV0IHRpbWVzIHRvIHNodWZmbGUgUEVUcyB0byBnZXQgdGhlIG1lYW4gZXhwZWN0ZWQgYmFja2dyb3VuZCxcbiAgICAgICAgICAgICAgIGRlZmF1bHQgaXMgMTAuXG4gIC1wbG90ICAgICAgICBTZXQgdG8gcGxvdCB0aGUgcmVzdWx0LlxuYGBgXG5cbi0tLS0tLVxuIyMjIDguIEZpbHRlciBQRVRzICAgIFxuUnVuICoqY0xvb3BzMiBmaWx0ZXJQRVRzIC1oKiogdG8gc2VlIGRldGFpbHMgXG5gYGBcbkZpbHRlciBQRVRzIGFjY29yZGluZyB0byBwZWFrcy9kb21haW5zL2xvb3BzL3NpbmdsZXRvbnMvS05Ocy4gXG5cbklmIGFueSBlbmQgb2YgdGhlIFBFVHMgb3ZlcmxhcCB3aXRoIGZlYXR1cmVzIHN1Y2ggYXMgcGVha3Mgb3IgbG9vcHMsIHRoZSBQRVQgXG53aWxsIGJlIGtlcHQuIEZpbHRlcmluZyBjYW4gYmUgZG9uZSBiZWZvcmUgb3IgYWZ0ZXIgcGVhay9sb29wLWNhbGxpbmcuIElucHV0IFxuY2FuIGJlIHBlYWtzIG9yIGxvb3BzLCBidXQgc2hvdWxkIG5vdCBiZSBiZSBtaXhlZC4gVGhlIC1zaW5nbGV0b24gbW9kZSBpcyBiYXNlZFxub24gYSBzcGVjaWZpZWQgY29udGFjdCBtYXRyaXggcmVzb2x1dGlvbiwgaWYgdGhlcmUgaXMgb25seSBvbmUgUEVUIGluIHRoZSBiaW4sIFxudGhlIHNpbmdsZXRvbiBQRVRzIHdpbGwgYmUgZmlsdGVyZWQuIFRoZSAta25uIGlzIGJhc2VkIG9uIG5vaXNlIHJlbW92aW5nIHN0ZXAgXG5vZiBibG9ja0RCU0NBTi4gXG5cbkV4YW1wbGVzOlxuICAgIDEuIGtlZXAgUEVUcyBvdmVybGFwcGluZyB3aXRoIHBlYWtzXG4gICAgICAgIGNMb29wczIgZmlsdGVyUEVUcyAtZCB0cmFjIC1wZWFrcyBwZWFrcy5iZWQgLW8gdHJhY19maWx0ZXJlZFxuXG4gICAgMi4ga2VlcCBQRVRzIHRoYXQgZG8gbm90IG92ZXJsYXAgd2l0aCBhbnkgYmxhY2tsaXN0IHJlZ2lvbnNcbiAgICAgICAgY0xvb3BzMiBmaWx0ZXJQRVRzIC1kIHRyYWMgLXBlYWtzIGJnLmJlZCAtbyB0cmFjX2ZpbHRlcmVkIC1pdlxuXG4gICAgMy4ga2VlcCBQRVRzIHRoYXQgb3ZlcmxhcCB3aXRoIGxvb3AgYW5jaG9yc1xuICAgICAgICBjTG9vcHMyIGZpbHRlclBFVHMgLWQgdHJhYyAtbG9vcHMgdGVzdF9sb29wcy50eHQgLW8gdHJhY19maWx0ZXJlZFxuXG4gICAgNC4ga2VlcCBQRVRzIHRoYXQgYm90aCBlbmRzIG92ZXJsYXAgd2l0aCBsb29wIGFuY2hvcnNcbiAgICAgICAgY0xvb3BzMiBmaWx0ZXJQRVRzIC1kIHRyYWMgLWxvb3BzIHRlc3RfbG9vcHMudHh0IC1vIHRyYWNfZmlsdGVyZWQgLWJvdGhcblxuICAgIDUuIGtlZXAgbm9uLXNpbmdsZXRvbiBQRVRzIGJhc2VkIG9uIDFrYiBjb250YWN0IG1hdHJpeFxuICAgICAgICBjTG9vcHMyIGZpbHRlclBFVHMgLWQgdHJhYyAtbyB0cmFjX2ZpbHRlcmVkIC1zaW5nbGV0b24gLWJzIDEwMDBcblxuICAgIDYuIGZpbHRlciBQRVRzIGJhc2VkIG9uIGJsb2NrREJTQ0FOIGtubiBub2lzZSByZW1vdmluZ1xuICAgICAgICBjTG9vcHMyIGZpbHRlclBFVHMgLWQgdHJhYyAtbyB0cmFjX2ZpbHRlcmVkIC1rbm4gLWVwcyAxMDAwIC1taW5QdHMgNVxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLXBlYWtzIEZCRUQgICAgIEJFRCBmaWxlIG9mIGdlbm9taWMgZmVhdHVyZXMgKHN1Y2ggYXMgcHJvbW90ZXJzLCBlbmhhbmNlcnMsIENoSVAtc2VxLFxuICAgICAgICAgICAgICAgICAgQVRBQy1zZXEgcGVha3MsVEFEcykgdG8gZmlsdGVyIFBFVHMuXG4gIC1sb29wcyBGTE9PUCAgICBUaGUgbG9vcC50eHQgZmlsZSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiwgY2FuIGJlIGxvb3BzIG9yIGRvbWFpbnMsIHRvXG4gICAgICAgICAgICAgICAgICBmaWx0ZXIgUEVUcy5cbiAgLWdhcCBHQVAgICAgICAgIElmIHRoZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBnZW5vbWljIGZlYXR1cmVzIGlzIDw9Z2FwLCB0aGUgdHdvIHJlZ2lvbnNcbiAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY29tYmluZWQuIERlZmF1bHQgaXMgMS4gU2V0IHRvID49MS5cbiAgLXNpbmdsZXRvbiAgICAgIFdoZXRoZXIgdG8gdXNlIHNpbmdsZXRvbiBtb2RlIHRvIGZpbHRlciBQRVRzLiBDb250YWN0IG1hdHJpeFxuICAgICAgICAgICAgICAgICAgcmVzb2x1dGlvbiB3aXRoIC1icyBpcyByZXF1aXJlZC4gU2luZ2xldG9uIFBFVHMgaW4gY29udGFjdCBtYXRyaXggYmluc1xuICAgICAgICAgICAgICAgICAgd2lsbCBiZSBmaWx0ZXJlZC5cbiAgLWJzIEJJTlNJWkUgICAgIFRoZSBjb250YWN0IG1hdHJpeCBiaW4gc2l6ZSBmb3IgLXNpbmdsZXRvbiBtb2RlIGZpbHRlcmluZy4gRGVmYXVsdCBpc1xuICAgICAgICAgICAgICAgICAgNTAwMC5cbiAgLWtubiAgICAgICAgICAgIFdoZXRoZXIgdG8gdXNlIG5vaXNlIHJlbW92aW5nIG1ldGhvZCBpbiBibG9ja0RCU0NBTiB0byBmaWx0ZXIgUEVUcyxcbiAgICAgICAgICAgICAgICAgIC1lcHMgYW5kIC1taW5QdHMgYXJlIHJlcXVpcmVkLlxuICAtZXBzIEVQUyAgICAgICAgU2FtZSB0byBjYWxsUGVha3MgYW5kIGNhbGxMb29wcywgb25seSB1c2VkIHRvIGZpbHRlciBQRVRzIGZvciAta25uXG4gICAgICAgICAgICAgICAgICBtb2RlLiBEZWZhdWx0IGlzIDEwMDAuIE9ubHkgb25lIHZhbHVlIGlzIHN1cHBvcnRlZC5cbiAgLW1pblB0cyBNSU5QVFMgIFNhbWUgdG8gY2FsbFBlYWtzIGFuZCBjYWxsTG9vcHMsIG9ubHkgdXNlZCB0byBmaWx0ZXIgUEVUcyBmb3IgLWtublxuICAgICAgICAgICAgICAgICAgbW9kZS4gRGVmYXVsdCBpcyA1LiBPbmx5IG9uZSB2YWx1ZSBpcyBzdXBwb3J0ZWQuXG4gIC1pdiAgICAgICAgICAgICBXaGV0aGVyIHRvIG9ubHkga2VlcCBQRVRzIG5vdCBpbiB0aGUgYXNzaWduZWQgcmVnaW9ucywgYmVoYXZlcyBsaWtlXG4gICAgICAgICAgICAgICAgICBncmVwIC12LlxuICAtYm90aCAgICAgICAgICAgV2hldGhlciB0byBvbmx5IGtlZXAgUEVUcyB0aGF0IGJvdGggZW5kcyBvdmVybGFwIHdpdGggbG9vcCBhbmNob3JzLlxuICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBub3QuXG5gYGBcblxuLS0tLS0tXG4jIyMgOS4gU2FtcGxpbmcgUEVUcyAgICAgXG5SdW4gKipjTG9vcHMyIHNhbXBsZVBFVHMgLWgqKiB0byBzZWUgZGV0YWlscy5cbmBgYFxuU2FtcGxpbmcgUEVUcyB0byB0YXJnZXQgdG90YWwgc2l6ZS4gXG5cbklmIHRoZXJlIGFyZSBtdWx0aXBsZSBzYW1wbGUgbGlicmFyaWVzIGFuZCB0aGUgdG90YWwgc2VxdWVuY2luZyBkZXB0aHMgdmFyeSBhIFxubG90LCBhbmQgeW91IHdhbnQgdG8gY29tcGFyZSB0aGUgZGF0YSBmYWlybHksIGl0J3MgYmV0dGVyIHRvIHNhbXBsZSB0aGVtIHRvIFxuc2ltaWxhciB0b3RhbCBQRVRzIChlaXRoZXIgZG93bi1zYW1wbGluZyBvciB1cC1zYW1wbGluZyksIHRoZW4gY2FsbCBwZWFrcy9sb29wc1xud2l0aCB0aGUgc2FtZSBwYXJhbWV0ZXJzLiBcblxuRXhhbXBsZTpcbiAgICBjTG9vcHMyIHNhbXBsZVBFVHMgLWQgdHJhYyAtbyB0cmFjX3NhbXBsZWQgLXRvdCA1MDAwMDAwIC1wIDEwXG5cblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgIEFzc2lnbiBkYXRhIGRpcmVjdG9yeSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBwcmUgdG8gY2Fycnkgb3V0IGFuYWx5c2lzLiBcbiAgLW8gRk5PVVQgICAgT3V0cHV0IGRhdGEgZGlyZWN0b3J5IC8gZmlsZSBuYW1lIHByZWZpeCwgZGVmYXVsdCBpcyBjTG9vcHMyX291dHB1dC5cbiAgLXAgQ1BVICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgYXZhaWxhYmxlLiBUb28gbWFueSBDUFUgY291bGQgY2F1c2Ugb3V0LW9mLW1lbW9yeSBwcm9ibGVtIGlmIHRoZXJlIGFyZVxuICAgICAgICAgICAgICB0b28gbWFueSBQRVRzLlxuICAtY3V0IENVVCAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgID49Y3V0LiBEZWZhdWx0IGlzIDAsIG5vIGZpbHRlcmluZy5cbiAgLW1jdXQgTUNVVCAgS2VlcCB0aGUgUEVUcyB3aXRoIGRpc3RhbmNlIDw9bWN1dC4gRGVmYXVsdCBpcyAtMSwgbm8gZmlsdGVyaW5nLlxuICAtdiAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgIEZvbGxvd2luZyBhcmUgc3ViLWNvbW1hbmRzIHNwZWNpZmljIG9wdGlvbnMuIFRoaXMgb3B0aW9uIGp1c3Qgc2hvd1xuICAgICAgICAgICAgICB2ZXJzaW9uIG9mIGNMb29wczIuXG4gIC10b3QgVE9UICAgIFRhcmdldCB0b3RhbCBudW1iZXIgb2YgUEVUcy5cbmBgYFxuXG4tLS0tLS1cbiMjIyAxMC4gQ2FsbCBwZWFrcyBmb3IgMUQgb3IgM0QgZGF0YVxuUnVuICoqY0xvb3BzMiBjYWxsUGVha3MgLWgqKiB0byBzZWUgZGV0YWlscy5cbmBgYFxuQ2FsbCBwZWFrcyBiYXNlZCBvbiBjbHVzdGVyaW5nLiBcblxuV2VsbCB0ZXN0ZWQgd29yayBmb3IgQ2hJUC1zZXEsIENoSUMtc2VxLCBBVEFDLXNlcSwgQ1VUJlJVTiAtbGlrZSBvciB0aGUgM0Rcbmdlbm9taWMgZGF0YSBzdWNoIGFzIEhpLVRyQUMvVHJhYy1sb29waW5nLCBDaElBLVBFVCBhbmQgSGlDaElQLlxuXG5UaGVyZSBhcmUgdGhyZWUgc3RlcHMgaW4gdGhlIGFsZ29yaXRobTogMSkgY2x1c3RlciB0aGUgUEVUcyB0byBmaW5kIFxuc2VsZi1saWdhdGlvbiBjbHVzdGVycywgd2hpY2ggYXJlIGNhbmRpZGF0ZSBwZWFrczsgMikgZXN0aW1hdGUgdGhlIHNpZ25pZmljYW5jZVxub2YgY2FuZGlkYXRlIHBlYWtzIHdpdGggbG9jYWwgYmFja2dyb3VuZDsgMykgaWYgZ2l2ZW4gY29udHJvbCBkYXRhLCBmdXJ0aGVyIFxuY29tcGFyZSBjYW5kaWRhdGUgcGVha3MgdG8gY29udHJvbCBkYXRhLiBJZiBydW5uaW5nIG11bHRpcGxlIGNsdXN0ZXJpbmdzIHdpdGhcbnNlcGFyYXRlZCBwYXJhbWV0ZXJzLCB0aGUgY2x1c3RlcnMgd2lsbCBiZSBjb21iaW5lZCBhbmQgY2FsbFBlYWtzIHdpbGwgb3V0cHV0IFxudGhlIG1vc3Qgc2lnbmlmaWNhbnQgb25lIGJhc2VkIG9uIG92ZXJsYXBzLiBcblxuS2V5IHBhcmFtZXRlcnMgYXJlIC1lcHMgYW5kIC1taW5QdHMsIGJvdGggYXJlIGtleSBwYXJhbWV0ZXJzIGluIHRoZSBjbHVzdGVyaW5nXG5hbGdvcml0aG0gYmxvY2tEQlNDQU4uIEVwcyBpbmRpY2F0ZXMgdGhlIGRpc3RhbmNlIHRoYXQgZGVmaW5lIHR3byBwb2ludHMgKFBFVHMpIFxuYmVpbmcgbmVpZ2hib3JzLCB3aGlsZSBtaW5QdHMgaW5kaWNhdGVzcyB0aGUgbWluaWFsIG51bWJlciBvZiBwb2ludHMgcmVxdWlyZWQgXG5mb3IgYSBjbHVzdGVyIHRvIGZvcm0uICBGb3Igc2hhcnAtcGVhayBsaWtlIGRhdGEgKEFUQUMtc2VxLCBURiBDaElDLXNlcSksIHNldFxuLWVwcyBzbWFsbCBzdWNoIGFzIDEwMCBvciAxNTAuIEZvciBicm9hZC1wZWFrIGxpa2UgZGF0YSwgc3VjaCBhcyBIM0syN21lMyBcbkNoSVAtc2VxIGFuZCBDaElDLXNlcSwgc2V0IC1lcHMgbGFyZ2UgYXMgNTAwIG9yIDEwMDAuIFxuXG5FcHMgd2lsbCBhZmZlY3QgbW9yZSB0aGFuIG1pblB0cyBmb3Igc2Vuc2l0aXZpdHkuXG5cbkV4YW1wbGVzOlxuICAgIDEuIGNhbGwgcGVha3MgZm9yIFRyYWMtbG9vcGluZyAgXG4gICAgICAgIGNMb29wczIgY2FsbFBlYWtzIC1kIHRyYWMgLWVwcyAxMDAgLW1pblB0cyAxMCAtbyB0cmFjIC1wIDEwXG5cbiAgICAyLiBjYWxsIHBlYWtzIGZvciBzaGFycC1wZWFrIGxpa2UgQ2hJQy1zZXEgd2l0aG91dCBjb250cm9sIGRhdGFcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgY3RjZl9jaGljIC1vIGN0Y2ZfY2hpYyAtcCAxMFxuXG4gICAgMy4gY2FsbCBwZWFrcyBmb3IgYnJvYWQtcGVhayBsaWtlIENoSUMtc2VxIHdpdGggSWdHIGFzIGNvbnRyb2xcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgSDNLMjdtZTMgLWJnZCBJZ0cgLWVwcyA1MDAsMTAwMCAtbWluUHRzIDEwIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC1vIEgzSzI3bWUzIFxuXG4gICAgNC4gY2FsbCBwZWFrcyBmb3Igc2hhcnAtcGVhayBDaElDLXNlcSB3aXRoIGxpbmVhciBmaXR0aW5nIHNjYWxlZCBjb250cm9sIFxuICAgICAgIGRhdGFcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgY3RjZiAtYmdkIElnRyAtZXBzIDE1MCAtbWluUHRzIDEwIC1vIGN0Y2YgLXAgMTBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAtYmdtIGxmXG5cbiAgICA1LiBjYWxsIHBlYWtzIHdpdGggc2VudGl0aXZlIG1vZGUgdG8gZ2V0IGNvbXByZWhlbnNpdmUgcGVha3MgZm9yIENVVCZUQUdcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgSDNLMjdhYyAtYmdkIElnRyAtc2VuIC1wIDEwXG5cbiAgICA2LiBmaWx0ZXIgUEVUcyBmaXJzdCBhbmQgdGhlbiBjYWxsIHBlYWtzIGZvciBIM0syN2FjIEhpQ2hJUCwgcmVzdWx0aW5nIG11Y2hcbiAgICAgICBtdWNoIGFjY3VyYXRlIHBlYWtzXG4gICAgICAgIGNMb29wczIgZmlsdGVyUEVUcyAtZCBoM2syN2FjX2hpY2hpcCAtbyBoM2syN2FjX2hpY2hpcF9maWx0ZXJlZCAta25uIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAtZXBzIDUwMCAtbWluUHRzIDVcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgaDNrMjdhY19oaWNoaXBfZmlsdGVyZWQgLWVwcyAyMDAsNTAwIC1taW5QdHMgMTAgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLXAgMTBcblxuICAgIDcuIGNhbGwgcGVha3MgZm9yIGludGVyYWN0aW9uIGRhdGEgYXMgc2luZ2xlLWVuZCBkYXRhIFxuICAgICAgICBjTG9vcHMyIGNhbGxQZWFrcyAtZCBoM2syN2FjIC1vIGgzazI3YWMgLXNwbGl0IC1lcHMgMjAwLDUwMCAtbWluUHRzIDEwIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC1wIDEwXG5cbiAgICA4LiBjYWxsIGRpZmZlcmVudGlhbCBwZWFrcyBiZXR3ZWVuIFdUIGFuZCBLTyBjb25kaXRpb25cbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgTUxMNF9XVCAtYmdkIE1MTDRfS08gLW8gTUxMNF9XVHZzS08gLXAgMTBcbiAgICAgICAgY0xvb3BzMiBjYWxsUGVha3MgLWQgTUxMNF9LTyAtYmdkIE1MTDRfV1QgLW8gTUxMNF9LT3ZzV1QgLXAgMTBcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICAgICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgICAgICAgIEFzc2lnbiBkYXRhIGRpcmVjdG9yeSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBwcmUgdG8gY2Fycnkgb3V0IGFuYWx5c2lzLiBcbiAgLW8gRk5PVVQgICAgICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLiBUb28gbWFueSBDUFUgY291bGQgY2F1c2Ugb3V0LW9mLW1lbW9yeSBwcm9ibGVtIGlmIHRoZXJlIGFyZVxuICAgICAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgID49Y3V0LiBEZWZhdWx0IGlzIDAsIG5vIGZpbHRlcmluZy5cbiAgLW1jdXQgTUNVVCAgICAgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgICAgICAgIEZvbGxvd2luZyBhcmUgc3ViLWNvbW1hbmRzIHNwZWNpZmljIG9wdGlvbnMuIFRoaXMgb3B0aW9uIGp1c3Qgc2hvd1xuICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLWVwcyBFUFMgICAgICAgICAgICBEaXN0YW5jZSB0aGF0IGRlZmluZXMgdHdvIHBvaW50cyAoUEVUcykgYmVpbmcgbmVpZ2hib3JzLCBlcHMgaW5cbiAgICAgICAgICAgICAgICAgICAgICBibG9ja0RCU0NBTiBhcyBrZXkgcGFyYW1ldGVyLCBtdWx0aXBsZSBlcHMgY2FuIGJlIGFzc2lnbmVkIHN1Y2ggYXNcbiAgICAgICAgICAgICAgICAgICAgICAxMDAsMjAwLDMwMCB0byBydW4gbXVsdGlwbGUgY2x1c3RlcmluZ3MsIHRoZSByZXN1bHRzIHdpbGwgYmUgY29tYmluZWQuXG4gICAgICAgICAgICAgICAgICAgICAgRm9yIGNhbGxQZWFrcywgdGhlIGRlZmF1bHQgaXMgMTAwLDIwMC4gSWYgdGhlIGRhdGEgc2hvdyBtdWNoIG1vcmUgYnJvYWRcbiAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlIHN1Y2ggYXMgSDNLMjdtZTMgYW5kIEgzSzRtZTEsIGluY3JlYXNlIGl0IHRvIDUwMCwxMDAwIG9yIGxhcmdlci5cbiAgICAgICAgICAgICAgICAgICAgICBJZiBleHBlY3RpbmcgYm90aCBuYXJyb3cgYW5kIGJyb2FkIHBlYWtzIGluIHRoZSBkYXRhLCBzZXQgLWVwcyAxMDAsMjAwLFxuICAgICAgICAgICAgICAgICAgICAgIDUwMCwxMDAwLlxuICAtbWluUHRzIE1JTlBUUyAgICAgIFBvaW50cyByZXF1aXJlZCBpbiBhIGNsdXN0ZXIsIG1pblB0cyBpbiBibG9ja0RCU0NBTiwga2V5IHBhcmFtZXRlcixcbiAgICAgICAgICAgICAgICAgICAgICBtdWx0aXBsZSBtaW5QdHMgY2FuIGJlIGFzc2lnbmVkIHN1Y2ggYXMgMyw1IHRvIHJ1biBtdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICAgIGNsdXN0ZXJpbmdzLCB0aGUgcmVzdWx0cyB3aWxsIGJlIGNvbWJpbmVkLiBGb3IgY2FsbFBlYWtzLCB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgIGlzIDUuIElmIHRoZSBkYXRhIGhhdmUgbWFueSByZWFkcywgaW5jcmVhc2luZyBtaW5QdHMgc3VjaCBhcyAxMCwyMC5cbiAgLXBjdXQgUENVVCAgICAgICAgICBCb25mZXJyb25pIGNvcnJlY3RlZCBwb2lzc29uIHAtdmFsdWUgY3V0b2ZmIHRvIGRldGVybWluZSBzaWduaWZpY2FudFxuICAgICAgICAgICAgICAgICAgICAgIHBlYWtzLiBEZWZhdWx0IGlzIDFlLTIuXG4gIC1iZ2QgQkdEICAgICAgICAgICAgQXNzaWduIGNvbnRyb2wgZGF0YSAoSWdHLCBJbnB1dCkgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0b1xuICAgICAgICAgICAgICAgICAgICAgIGNhcnJ5IG91dCBhbmFseXNpcy4gRGVmYXVsdCBpcyBubyBiYWNrZ3JvdW5kLlxuICAtYmdtIHtyYXRpbyxsZn0gICAgIEhvdyB0byBzY2FsZSB0aGUgdGFyZ2V0IGRhdGEgd2l0aCBjb250cm9sIGRhdGEuIEF2YWlsYWJsZSBvcHRpb25zIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICdyYXRpbycgYW5kICdsZicuICdyYXRpbycgaXMgYmFzZWQgb24gbGlicmFyeSBzaXplIGFuZCAnbGYnIG1lYW5zXG4gICAgICAgICAgICAgICAgICAgICAgbGluZWFyIGZpdHRpbmcgZm9yIGNvbnRyb2wgYW5kIHRhcmdldCBjYW5kaWRhdGUgcGVha3MgbmVhcmJ5IHJlZ2lvbnMuXG4gICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyAnbGYnLiBUaGUgc2NhbGluZyBmYWN0b3IgZXN0aW1hdGVkIGJ5IGxmIHVzdWFsbHkgaXMgYSBsaXR0bGVcbiAgICAgICAgICAgICAgICAgICAgICBsYXJnZXIgdGhhbiByYXRpby4gSW4gb3RoZXIgd29yZHMsIHRoZSBoaWdoZXIgdGhlIHNjYWxpbmcgZmFjdG9yLCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICBsZXNzIHNlbnNpdGl2ZSB0aGUgcmVzdWx0cy5cbiAgLXBzZXVkbyBQU0VVRE8gICAgICBQc2V1ZG8gY291bnRzIGZvciBsb2NhbCBiYWNrZ3JvdW5kIG9yIGNvbnRyb2wgZGF0YSB0byBlc3RpbWF0ZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICBzaWduaWZpY2FuY2Ugb2YgcGVha3MgaWYgbm8gUEVUcy9yZWFkcyBpbiB0aGUgYmFja2dyb3VuZC4gRGVmYXVsdCBpc1xuICAgICAgICAgICAgICAgICAgICAgIDEuIFNldCBpdCBsYXJnZXIgZm9yIG5vaXN5IGRhdGEsIDAgaXMgcmVjb21tZW5kIGZvciB2ZXJ5IGNsZWFuIGRhdGFcbiAgICAgICAgICAgICAgICAgICAgICBzdWNoIGFzIHdlbGwgcHJlcGFyZWQgQ1VUJlRhZy5cbiAgLXNlbiAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHVzZSBzZW5zaXRpdmUgbW9kZSB0byBjYWxsIHBlYWtzLiBEZWZhdWx0IGlzIG5vdC4gSWYgb25seSBhXG4gICAgICAgICAgICAgICAgICAgICAgZmV3IHBlYWtzIHdlcmUgY2FsbGVkLCB3aGlsZSBhIGxvdCBtb3JlIGNhbiBiZSBvYnNlcnZlZFxuICAgICAgICAgICAgICAgICAgICAgIGZyb20gdmlzdWFsaXphdGlvbiwgdHJ5IHRoaXMgb3B0aW9uLiBBZGp1c3QgLXBjdXQgb3IgZmlsdGVyIGJ5XG4gICAgICAgICAgICAgICAgICAgICAgeW91cnNlbGYgdG8gc2VsZWN0IHNpZ25pZmljYW50IG9uZXMuXG4gIC1zcGxpdCAgICAgICAgICAgICAgV2hldGhlciB0byBzcGxpdCBwYWlyZWQtZW5kIGFzIHNpbmdsZSBlbmQgZGF0YSB0byBjYWxsIHBlYWtzLiBTb21ldGltZXNcbiAgICAgICAgICAgICAgICAgICAgICB3b3JrcyB3ZWxsIGZvciBUcmFjLWxvb3BpbmcgYW5kIEhpQ2hJUC5cbiAgLXNwbGl0RXh0IFNQTElURVhUICBXaGVuIHJ1biB3aXRoIC1zcGxpdCwgdGhlIGV4dGVuc2lvbiB0byB1cHN0cmFlbSBhbmQgZG93bnN0cmVhbSwgXG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCBpcyA1MC5cbmBgYFxuXG5cbi0tLS0tLVxuIyMjIDExLiBDYWxsIGxvb3BzXG5SdW4gKipjTG9vcHMyIGNhbGxMb29wcyAtaCoqIHRvIHNlZSBkZXRhaWxzLlxuYGBgXG5DYWxsIGxvb3BzIGJhc2VkIG9uIGNsdXN0ZXJpbmcuIFxuXG5XZWxsIHRlc3RlZCB3b3JrIGZvciBIaS1UckFDL1RyQUMtbG9vcGluZywgSGlDSGlQLCBDaElBLVBFVCBhbmQgSGktQy5cblxuU2ltaWxhciB0byBjYWxsIHBlYWtzLCB0aGVyZSBhcmUgdGhyZWUgbWFpbiBzdGVwcyBpbiB0aGUgYWxnb3JpdGhtOiAxKSBjbHVzdGVyIFxudGhlIFBFVHMgdG8gZmluZCBpbnRlci1saWdhdGlvbiBjbHVzdGVycywgd2hpY2ggYXJlIGNhbmRpZGF0ZSBsb29wczsgMikgXG5lc3RpbWF0ZSB0aGUgc2lnbmlmaWNhbmNlIG9mIGNhbmRpZGF0ZSBsb29wcyB3aXRoIHBlcm11dGF0ZWQgbG9jYWwgYmFja2dyb3VuZC4gXG4zKSBJZiAtaGljIG9wdGlvbiBub3Qgc2VsZWN0ZWQsIHRoZSBsb29wIGFuY2hvcnMgd2lsbCBiZSBjaGVja2VkIGZvciBwZWFrLWxpa2UgXG5mZWF0dXJlcywgb25seSBwZWFrLWxpa2UgYW5jaG9ycyBhcmUga2VwdC4gSWYgcnVubmluZyBtdWx0aXBsZSBjbHVzdGVyaW5ncywgXG50aGUgY2x1c3RlcnMgd2lsbCBiZSBjb21iaW5lZCBhbmQgY2FsbExvb3BzIHdpbGwgb3V0cHV0IHRoZSBtb3N0IHNpZ25pZmljYW50IFxub25lIGJhc2VkIG9uIG92ZXJsYXBzLiBcblxuU2ltaWxhciB0byBjYWxsUGVha3MsIGtleXMgcGFyYW1ldGVycyBhcmUgLWVwcyBhbmQgLW1pblB0cy4gRm9yIHNoYXJwLXBlYWsgbGlrZSBcbmludGVyYWN0aW9uIGRhdGEsIHNldCAtZXBzIHNtYWxsIHN1Y2ggYXMgNTAwLDEwMDAuIEZvciBicm9hZC1wZWFrIGxpa2UgZGF0YSwgXG5zdWNoIGFzIEgzSzI3YWMgSGlDaElQLCBzZXQgLWVwcyBiaWcgYXMgMTAwMCwyMDAwLiBGb3IgSGktQyBhbmQgSGlDaElQIGRhdGEsIFxuYmlnZ2VyIC1taW5QdHMgaXMgYWxzbyBuZWVkZWQsIHN1Y2ggYXMgMjAsNTAuIFxuXG5QbGVhc2Ugbm90ZSB0aGF0IHRoZSBibG9ja0RCU0NBTiBpbXBsZW1lbnRhdGlvbiBpbiBjTG9vcHMyIGlzIG11Y2ggbW9yZSBcbnNlbnNpdGl2ZSB0aGFuIGNEQlNDQU4gaW4gY0xvb3BzLCBzbyB0aGUgc2FtZSBwYXJhbWV0ZXJzIGNhbiBnZW5lcmF0ZSBxdWl0ZSBcbmRpZmZlcmVudCByZXN1bHRzLiBXaXRoIC1oaWMgb3B0aW9uLCBjREJTQ0FOIHdpbGwgYmUgdXNlZC4gXG5cbkV4YW1wbGVzOlxuICAgIDEuIGNhbGwgbG9vcHMgZm9yIEhpLVRyQUMvVHJhYy1sb29waW5nXG4gICAgICAgIGNMb29wczIgY2FsbExvb3BzIC1kIHRyYWMgLW8gdHJhYyAtZXBzIDIwMCw1MDAsMTAwMCwyMDAwIC1taW5QdHMgNSAtdyAtalxuXG4gICAgMi4gY2FsbCBsb29wcyBmb3IgSGktVHJBQy9UcmFjLWxvb3Bpbmcgd2l0aCBmaWx0ZXJpbmcgc2hvcnQgZGlzdGFuY2UgUEVUcyBcbiAgICAgICBhbmQgdXNpbmcgbWF4aW1hbCBlc3RpbWF0ZWQgZGlzdGFuY2UgY3V0b2ZmXG4gICAgICAgIGNMb29wczIgY2FsbExvb3BzIC1kIHRyYWMgLW8gdHJhYyAtZXBzIDIwMCw1MDAsMTAwMCwyMDAwIC1taW5QdHMgNSBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAtY3V0IDEwMDAgLW1heF9jdXQgLXcgLWpcblxuICAgIDMuIGNhbGwgbG9vcHMgZm9yIEhpLVRyQUMvVHJhYy1sb29waW5nIGFuZCBnZXQgdGhlIFBFVHMgd2l0aCBhbnkgZW5kIFxuICAgICAgIG92ZXJsYXBwaW5nIGxvb3AgYW5jaG9yc1xuICAgICAgICBjTG9vcHMyIGNhbGxMb29wcyAtZCB0cmFjIC1vIHRyYWMgLWVwcyAyMDAsNTAwLDEwMDAsMjAwMCAtbWluUHRzIDUgLXcgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLWogLWZpbHRlclBFVHNcblxuICAgIDQuIGNhbGwgbG9vcHMgZm9yIGhpZ2gtcmVzb2x1dGlvbiBIaS1DIGxpa2UgZGF0YSBcbiAgICAgICAgY0xvb3BzMiBjYWxsTG9vcHMgLWQgaGljIC1vIGhpYyAtZXBzIDIwMDAsNTAwMCwxMDAwMCAtbWluUHRzIDIwLDUwIC13IC1qXG5cbiAgICA1LiBjYWxsIGludGVyLWNocm9tb3NvbWFsIGxvb3BzIChmb3IgbW9zdCBkYXRhLCB0aGVyZSB3aWxsIGJlIG5vIHNpZ25pZmljYW50IFxuICAgICAgIGludGVyLWNocm9tb3NvbWFsIGxvb3BzKVxuICAgICAgICBjTG9vcHMyIGNhbGxMb29wcyAtZCBIaUMgLWVwcyA1MDAwIC1taW5QdHMgMTAsMjAsNTAsMTAwLDIwMCAtdyAtaiAtdHJhbnNcXCAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC1vIEhpQ190cmFuc1xuXG5cbm9wdGlvbmFsIGFyZ3VtZW50czpcbiAgLWgsIC0taGVscCAgICAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgICAgIEFzc2lnbiBkYXRhIGRpcmVjdG9yeSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBwcmUgdG8gY2Fycnkgb3V0IGFuYWx5c2lzLiBcbiAgLW8gRk5PVVQgICAgICAgIE91dHB1dCBkYXRhIGRpcmVjdG9yeSAvIGZpbGUgbmFtZSBwcmVmaXgsIGRlZmF1bHQgaXMgY0xvb3BzMl9vdXRwdXQuXG4gIC1wIENQVSAgICAgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlLiBUb28gbWFueSBDUFUgY291bGQgY2F1c2Ugb3V0LW9mLW1lbW9yeSBwcm9ibGVtIGlmIHRoZXJlIGFyZVxuICAgICAgICAgICAgICAgICAgdG9vIG1hbnkgUEVUcy5cbiAgLWN1dCBDVVQgICAgICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgID49Y3V0LiBEZWZhdWx0IGlzIDAsIG5vIGZpbHRlcmluZy5cbiAgLW1jdXQgTUNVVCAgICAgIEtlZXAgdGhlIFBFVHMgd2l0aCBkaXN0YW5jZSA8PW1jdXQuIERlZmF1bHQgaXMgLTEsIG5vIGZpbHRlcmluZy5cbiAgLXYgICAgICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgICAgIEZvbGxvd2luZyBhcmUgc3ViLWNvbW1hbmRzIHNwZWNpZmljIG9wdGlvbnMuIFRoaXMgb3B0aW9uIGp1c3Qgc2hvd1xuICAgICAgICAgICAgICAgICAgdmVyc2lvbiBvZiBjTG9vcHMyLlxuICAtZXBzIEVQUyAgICAgICAgRGlzdGFuY2UgdGhhdCBkZWZpbmVzIHR3byBwb2ludHMgKFBFVHMpIGJlaW5nIG5laWdoYm9ycywgZXBzIGluXG4gICAgICAgICAgICAgICAgICBibG9ja0RCU0NBTiBhcyBrZXkgcGFyYW1ldGVyLCBtdWx0aXBsZSBlcHMgY2FuIGJlIGFzc2lnbmVkIHN1Y2ggYXNcbiAgICAgICAgICAgICAgICAgIDIwMCw1MDAsMTAwMCwyMDAwIHRvIHJ1biBtdWx0aXBsZSBjbHVzdGVyaW5ncywgdGhlIHJlc3VsdHMgd2lsbCBiZVxuICAgICAgICAgICAgICAgICAgY29tYmluZWQuIE5vIGRlZmF1bHQgdmFsdWUsIHBsZWFzZSBnaXZlIHRoZSBpbnB1dC5cbiAgLW1pblB0cyBNSU5QVFMgIFBvaW50cyByZXF1aXJlZCBpbiBhIGNsdXN0ZXIuIG1pblB0cyBpbiBibG9ja0RCU0NBTiBpcyBhIGtleSBwYXJhbWV0ZXIuXG4gICAgICAgICAgICAgICAgICBFbXBpcmljYWxseSA1IGlzIGdvb2QgZm9yIFRGcyBhbmQgaGlzdG9uZSBtb2RpZmljYXRpb24gQ2hJQS1QRVQgZGF0YVxuICAgICAgICAgICAgICAgICAgYW5kIFRyYWMtbG9vcGluZy4gRm9yIGRhdGEgbGlrZSBIaUNoSVAgYW5kIEhpLUMsIHNldCBpdCBsYXJnZXIsIGxpa2VcbiAgICAgICAgICAgICAgICAgID49MjAuIFRoZSBpbnB1dCBjYW4gYmUgYSBzZXJpZXMsIGFuZCB0aGUgZmluYWwgbG9vcHMgd2lsbCBoYXZlIHRoZVxuICAgICAgICAgICAgICAgICAgUEVUcz49IG1heChtaW5QdHMpLiBcbiAgLXBsb3QgICAgICAgICAgIFdoZXRoZXIgdG8gcGxvdCBlc3RpbWF0ZWQgaW50ZXItbGlnYXRpb24gYW5kIHNlbGYtbGlnYXRpb24gUEVUc1xuICAgICAgICAgICAgICAgICAgZGlzdGFuY2UgZGlzdHJpYnV0aW9uLiBEZWZhdWx0IGlzIG5vdCB0byBnZW5lcmF0ZSBhIHBsb3QuXG4gIC1pICAgICAgICAgICAgICBXaGV0aGVyIHRvIGNvbnZlcnQgbG9vcHMgdG8gVUNTQyBJbnRlcmFjdCB0cmFjayB0byB2aXN1YWxpemUgaW4gVUNTQy5cbiAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgbm90LCBzZXQgdGhpcyBmbGFnIHRvIHNhdmUuXG4gIC1qICAgICAgICAgICAgICBXaGV0aGVyIHRvIGNvbnZlcnQgbG9vcHMgdG8gMkQgZmVhdHVyZSBhbm5vdGF0aW9ucyB0byB2aXN1YWxpemUgaW5cbiAgICAgICAgICAgICAgICAgIEp1aWNlYm94LiBEZWZhdWx0IGlzIG5vdCwgc2V0IHRoaXMgZmxhZyB0byBzYXZlLlxuICAtdyAgICAgICAgICAgICAgV2hldGhlciB0byBzYXZlIHRyYWNrcyBvZiBsb29wcyB0byB2aXN1YWxpemUgaW4gbGVnYWN5IGFuZCBuZXcgd2FzaFUuXG4gICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIG5vdCwgc2V0IHRoaXMgZmxhZyB0byBzYXZlIHR3byBmaWxlcy5cbiAgLW1heF9jdXQgICAgICAgIFdoZW4gcnVubmluZyBjTG9vcHMgd2l0aCBtdWx0aXBsZSBlcHMgb3IgbWluUHRzLCBtdWx0aXBsZSBkaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgY3V0b2ZmcyBmb3Igc2VsZi1saWdhdGlvbiBhbmQgaW50ZXItbGlnYXRpb24gUEVUcyB3aWxsIGJlIGVzdGltYXRlZFxuICAgICAgICAgICAgICAgICAgYmFzZWQgb24gdGhlIG92ZXJsYXBzIG9mIGFuY2hvcnMuIERlZmF1bHQgb3B0aW9uIGlzIHRoZSBtaW5pbWFsIG9uZVxuICAgICAgICAgICAgICAgICAgd2lsbCBiZSB1c2VkIHRvIGZpbHRlciBQRVRzIGZvciBjYW5kaWRhdGUgbG9vcCBzaWduaWZpY2FuY2UgdGVzdC5cbiAgICAgICAgICAgICAgICAgIFNldCB0aGlzIGZsYWcgdG8gdXNlIG1heGltYWwgb25lLCB3aWxsIHNwZWVkIHVwIGZvciBzaWduaWZpY2FuY2UgdGVzdC5cbiAgLWhpYyAgICAgICAgICAgIFdoZXRoZXIgdG8gdXNlIHN0YXRpc3RpY2FsIGN1dG9mZnMgZm9yIEhpLUMgdG8gb3V0cHV0IHNpZ25pZmljYW50IGxvb3BzLlxuICAgICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBub3QsIHNldCB0aGlzIG9wdGlvbiB0byBlbmFibGUuIEFkZGl0aW9uYWxseSwgd2l0aCAtaGljXG4gICAgICAgICAgICAgICAgICBvcHRpb24sIHRoZXJlIGlzIG5vIGNoZWNrIGZvciBhbmNob3JzIHJlcXVpcmluZyB0aGV5IGxvb2tpbmcgbGlrZSBwZWFrcy5cbiAgLWZpbHRlciAgICAgICAgIFdoZXRoZXIgdG8gZmlsdGVyIHJhdyBQRVRzIGFjY29yZGluZyB0byBjYWxsZWQgbG9vcHMuIFRoZSBmaWx0ZXJlZFxuICAgICAgICAgICAgICAgICAgUEVUcyBjYW4gc2hvdyBjbGVhciB2aWV3IG9mIGludGVyYWN0aW9ucyBvciBiZSB1c2VkIHRvIGNhbGwgbG9vcHMgYWdhaW4uXG4gIC10cmFucyAgICAgICAgICBXaGV0aGVyIHRvIGNhbGwgdHJhbnMtIChpbnRlci1jaHJvbW9zb21hbCkgbG9vcHMuIERlZmF1bHQgaXMgbm90LCBzZXRcbiAgICAgICAgICAgICAgICAgIHRoaXMgZmxhZyB0byBjYWxsLiBGb3IgbW9zdCBjb21tb24gY2FzZXMsIG5vdCByZWNvbW1lbmRlZCwgb25seSBmb3JcbiAgICAgICAgICAgICAgICAgIGRhdGEgdGhlcmUgYXJlIG9idmlvdXMgdmlzaWJsZSB0cmFucyBsb29wcy5cbiAgLWVtUGFpciAgICAgICAgIEJ5IGRlZmF1bHQgZXBzIGFuZCBtaW5QdHMgY29tYmluYXRpb25zIHdpbGwgYmUgdXNlZCB0byBydW4gY2x1c3RlcmluZy5cbiAgICAgICAgICAgICAgICAgIFdpdGggdGhpcyBvcHRpb24sIGZvciBleGFtcGxlIGVwcz01MDAsMTAwMCBhbmQgbWluUHRzPTUsMTAsIG9ubHkgKDUwMCw1KVxuICAgICAgICAgICAgICAgICAgYW5kICgxMDAwLDEwKSBhcyBwYXJhbWV0ZXJzIG9mIGNsdXN0ZXJpbmcgd2lsbCBiZSBydW4uIElucHV0IG51bWJlciBvZlxuICAgICAgICAgICAgICAgICAgZXBzIGFuZCBtaW5QdHMgc2hvdWxkIGJlIHNhbWUuXG5cbmBgYFxuXG4tLS0tLS1cbiMjIyAxMi4gQ2FsbCBkaWZmZXJlbnRpYWxseSBlbnJpY2hlZCBpbnRyYS1jaHJvbW9zb21hbCBsb29wc1xuUnVuICoqY0xvb3BzMiBjYWxsRGlmZkxvb3BzIC1oKiogdG8gc2VlIGRldGFpbHMuXG5gYGBcbkNhbGwgZGlmZmVyZW50aWFsbHkgZW5yaWNoZWQgaW50cmEtY2hyb21vc29tYWwgbG9vcHMgYmV0d2VlbiB0d28gY29uZGl0aW9ucy5cblxuU2ltaWxhciB0byBjYWxsaW5nIHBlYWtzIHdpdGggY29udHJvbCBkYXRhLCBjYWxsaW5nIGRpZmZlcmVudGlhbGx5IGVucmljaGVkIFxubG9vcHMgaXMgYmFzZWQgb24gc2NhbGVkIFBFVHMgYW5kIHRoZSBQb2lzc29uIHRlc3QuIFRoZXJlIGFyZSB0aHJlZSBtYWluIHN0ZXBzIFxuaW4gdGhlIGFsZ29yaXRobTogMSkgbWVyZ2UgdGhlIG92ZXJsYXBwZWQgbG9vcHMsIHF1YW50aWZ5IHRoZW0gYW5kIHRoZWlyIFxucGVybXV0YXRlZCBsb2NhbCBiYWNrZ3JvdW5kIHJlZ2lvbnM7IDIpIGZpdCB0aGUgbGluZWFyIHRyYW5zZm9ybWF0aW9uIG9mIFxuYmFja2dyb3VuZCB0YXJnZXQgaW50ZXJhY3Rpb24gZGVuc2l0eSB0byBjb250cm9sIGJhY2tncm91bmQgZGF0YSBiYXNlZCBvbiBcbk1BTm9ybTI7IHRoZXJlZm9yZSwgaWYgdGhlcmUgYXJlIG1vcmUgdGhhbiB0aGFuIHR3byBzYW1wbGVzLCBvdGhlcnMgY2FuIGJlIFxuc2NhbGVkIHRvIHRoZSByZWZlcmVuY2Ugc2FtcGxlIGZvciBxdWFudGl0YXRpdmUgY29tcGFyaXNvbjsgMykgZXN0aW1hdGUgdGhlIFxuZm9sZCBjaGFuZ2UgKE0pIGN1dG9mZiBhbmQgYXZlcmFnZSAoQSkgY3V0b2ZmIHVzaW5nIHRoZSBiYWNrZ3JvdW5kIGRhdGEgd2l0aCBcbnRoZSBjb250cm9sIG9mIEZEUiwgYXNzdW1pbmcgdGhlcmUgc2hvdWxkIG5vIGRpZmZlcmVudGlhbGx5IHNpZ25pZmljYW50IFxuaW50ZXJhY3Rpb25zIGNhbGxlZCBmcm9tIHRoZSBiYWNrZ3JvdW5kIGRhdGE7IG9yIHVzaW5nIHRoZSBhc3NpZ25lZCBjdXRvZmZzOyA0KSBcbmVzdGltYXRlIHRoZSBzaWduaWZpY2FuY2UgYmFzZWQgb24gdGhlIFBvaXNzb24gdGVzdCBmb3IgdHJhbnNmb3JtZWQgZGF0YSwgYm90aCBcbmZvciB0aGUgbG9vcCBhbmQgbG9vcCBhbmNob3JzLiBGb3IgZXhhbXBsZSwgaWYgdHJhbnNmb3JtZWQgUEVUcyBmb3IgdGFyZ2V0IGlzIFxuNSwgUEVUcyBmb3IgY29udHJvbCBpcyAzIHdoaWxlIGNvbnRyb2wgbmVhcmJ5IHBlcm11dGF0ZWQgYmFja2dyb3VuZCBtZWRpYW4gaXMgXG40LCB0aGVuIGZvciB0aGUgUG9pc3NvbiB0ZXN0LCBsYW1iZGE9NC0xIGlzIHVzZWQgdG8gdGVzdCB0aGUgb2JzZXJ2ZWQgNSB0byBjYWxsXG5wLXZhbHVlLlxuXG5FeGFtcGxlOlxuICAgIDEuIGNsYXNzaWNhbCB1c2FnZSBcbiAgICAgICAgY0xvb3BzMiBjYWxsRGlmZkxvb3BzIC10bG9vcCB0YXJnZXRfbG9vcC50eHQgLWNsb29wIGNvbnRyb2xfbG9vcC50eHQgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLXRkIC4vdGFyZ2V0IC1jZCAuL2NvbnRyb2wgLW8gdGFyZ2V0X2RpZmZcblxuICAgIDIuIGN1c3RvbWl6ZSBNQSBjdXRvZmZzIFxuICAgICAgICBjTG9vcHMyIGNhbGxEaWZmTG9vcHMgLXRsb29wIHRhcmdldF9sb29wLnR4dCAtY2xvb3AgY29udHJvbF9sb29wLnR4dCBcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAtdGQgLi90YXJnZXQgLWNkIC4vY29udHJvbCAtbyB0YXJnZXRfZGlmZiAtY3V0b21pemUgXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLWFjdXQgNSAtbWN1dCAwLjVcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICAgICAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgICAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICAgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICAgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLXRsb29wIFRMT09QICAgICAgICAgIFRoZSB0YXJnZXQgbG9vcHMgaW4gX2xvb3AudHh0IGZpbGUgY2FsbGVkIGJ5IGNMb29wczIuXG4gIC1jbG9vcCBDTE9PUCAgICAgICAgICBUaGUgY29udHJvbCBsb29wcyBpbiBfbG9vcC50eHQgZmlsZSBjYWxsZWQgYnkgY0xvb3BzMi5cbiAgLXRkIFRQUkVEICAgICAgICAgICAgIFRoZSBkYXRhIGRpcmVjdG9yeSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBmb3IgdGFyZ2V0IGRhdGEuXG4gIC1jZCBDUFJFRCAgICAgICAgICAgICBUaGUgZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgZm9yIGNvbnRyb2wgZGF0YS5cbiAgLXBjdXQgUENVVCAgICAgICAgICAgIFBvaXNzb24gcC12YWx1ZSBjdXRvZmYgdG8gZGV0ZXJtaW5lIHNpZ25pZmljYW50IGRpZmZlcmVudGlhbGx5XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnJpY2hlZCBsb29wcyBhZnRlciBCb25mZXJyb25pIGNvcnJlY3Rpb24gLCBkZWZhdWx0IGlzIDFlLTIuXG4gIC1pZ3AgICAgICAgICAgICAgICAgICBJZ25vcmUgUG9pc3NvbiBwLXZhbHVlIGN1dG9mZiBhbmQgb25seSB1c2luZyBGRFIgdG8gY29udHJvbCBNQSBwbG90XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXRvZmZzLlxuICAtbm9QQ29yciAgICAgICAgICAgICAgRG8gbm90IHBlcmZvcm1lIEJvbmZlcnJvbmkgY29ycmVjdGlvbiBvZiBQb2lzc29uIHAtdmFsdWVzLiBXaWxsIGdldFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9yZSBsb29wcy4gRGVmYXVsdCBpcyBhbHdheXMgcGVyZm9ybWluZy5cbiAgLWZkciBGRFIgICAgICAgICAgICAgIEZEUiBjdXRvZmYgZm9yIGVzdGltYXRpbmcgZm9sZCBjaGFuZ2UgKE0pIGFuZCBhdmVyYWdlIHZhbHVlIChBKSBhZnRlclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXphdGlvbiB3aXRoIGJhY2tncm91bmQgZGF0YS4gRGVmYXVsdCBpcyAwLjEuXG4gIC1qICAgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIGNvbnZlcnQgbG9vcHMgdG8gMkQgZmVhdHVyZSBhbm5vdGF0aW9ucyB0byB2aXN1YWxpemUgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgIEp1aWNlYm94LiBEZWZhdWx0IGlzIG5vdCwgc2V0IHRoaXMgZmxhZyB0byBzYXZlLlxuICAtdyAgICAgICAgICAgICAgICAgICAgV2hldGhlciB0byBzYXZlIHRyYWNrcyBvZiBsb29wcyB0byB2aXN1YWxpemUgaW4gbGVnYWN5IGFuZCBuZXcgd2FzaFUuXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIG5vdCwgc2V0IHRoaXMgZmxhZyB0byBzYXZlIHR3byBmaWxlcy5cbiAgLWN1c3RvbWl6ZSAgICAgICAgICAgIFdoZXRoZXIgdG8gdXNlIGN1dG9taXplZCBjdXRvZmZzIG9mIE1BIHBsb3QuIERlZnVsYXQgaXMgbm90LiBJZiBlbmFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgIC1hY3V0IGFuZCAtbWN1dCBpcyBuZWVkZWQuXG4gIC1jYWN1dCBDQUNVVCAgICAgICAgICBBdmVyYWdlIGN1dG9mZiBmb3IgTUEgcGxvdCBvZiBub3JtYWxpemVkIFBFVHMgb2YgbG9vcHMuIEFzc2lnbiB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAtY3VzdG9taXplIG9wdGlvbiB1c2VkLlxuICAtY21jdXQgQ01DVVQgICAgICAgICAgRm9sZCBjaGFuZ2UgY3V0b2ZmIGZvciBNQSBwbG90IG9mIG5vcm1hbGl6ZWQgUEVUcyBvZiBsb29wcy4gQXNzaWduIHdoZW5cbiAgICAgICAgICAgICAgICAgICAgICAgIC1jdXN0b21pemUgb3B0aW9uIHVzZWQuXG4gIC12bWluIFZNSU4gICAgICAgICAgICBUaGUgbWluaW11bSB2YWx1ZSBzaG93biBpbiB0aGUgaGVhdG1hcCBhbmQgY29sb3JiYXIuXG4gIC12bWF4IFZNQVggICAgICAgICAgICBUaGUgbWF4bXVtIHZhbHVlIHNob3duIGluIHRoZSBoZWF0bWFwIGFuZCBjb2xvcmJhci5cbiAgLWNtYXAge3N1bW1lcixyZWQsZGl2LGNvb2x9XG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgaGVhdG1hcCBzdHlsZS4gRGVmYXVsdCBpcyBzdW1tZXIuXG5cblxuYGBgXG5cbi0tLS0tLVxuIyMjIDEzLiBDYWxsIGRvbWFpbnNcblJ1biAqKmNMb29wczIgY2FsbERvbWFpbnMgLWgqKiB0byBzZWUgZGV0YWlscy5cbmBgYFxuQ2FsbCBkb21haW5zIGZvciB0aGUgM0QgZ2Vub21pYyBkYXRhIGJhc2VkIG9uIGNvcnJlbGF0aW9uIG1hdHJpeCBhbmQgbG9jYWwgXG5zZWdyZWdhdGlvbiBzY29yZS5cblxuV2VsbCB0ZXN0ZWQgd29yayBmb3IgSGktVHJBQy9UcmFjLWxvb3BpbmcgZGF0YS5cblxuRXhhbXBsZXM6XG4gICAgMS4gY2FsbCBIaS1DIGxpa2UgVEFEc1xuICAgICAgICBjTG9vcHMyIGNhbGxEb21haW5zIC1kIHRyYWMgLW8gdHJhYyAtYnMgNTAwMCwxMDAwMCAtd3MgNTAwMDAwIC1wIDIwXG5cbiAgICAyLiBjYWxsIEhpLVRyQUMvVHJhYy1sb29waW5nIHNwZWNpZmljIHNtYWxsIGRvbWFpbnNcbiAgICAgICAgY0xvb3BzMiBjYWxsRG9tYWlucyAtZCB0cmFjIC1vIHRyYWMgLWJzIDEwMDAgLXdzIDEwMDAwMCAtcCAyMCBcblxuICAgIDMuIGNhbGwgZG9tYWlucyBmb3IgSGktQ1xuICAgICAgICBjTG9vcHMyIGNhbGxEb21haW5zIC1kIGhpYyAtbyBoaWMgLWJzIDEwMDAwIC13cyA1MDAwMDAgLWhpYyBcblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgT3V0cHV0IGRhdGEgZGlyZWN0b3J5IC8gZmlsZSBuYW1lIHByZWZpeCwgZGVmYXVsdCBpcyBjTG9vcHMyX291dHB1dC5cbiAgLXAgQ1BVICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICB0b28gbWFueSBQRVRzLlxuICAtY3V0IENVVCAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgS2VlcCB0aGUgUEVUcyB3aXRoIGRpc3RhbmNlIDw9bWN1dC4gRGVmYXVsdCBpcyAtMSwgbm8gZmlsdGVyaW5nLlxuICAtdiAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICB2ZXJzaW9uIG9mIGNMb29wczIuXG4gIC1icyBCSU5TSVpFICBDYW5kaWRhdGUgY29udGFjdCBtYXRyaXggcmVzb2x1dGlvbiAoYmluIHNpemUpIHRvIGNhbGwgZG9tYWlucy4gQVxuICAgICAgICAgICAgICAgc2VyaWVzIG9mIHZhbHVlcyBvciBhIHNpbmdsZSB2YWx1ZSBjYW4gYmUgdXNlZCBhcyBpbnB1dC4gRGVmYXVsdCBpc1xuICAgICAgICAgICAgICAgMTAwMDAuIElmIGdpdmVuIG11bHRpcGxlIHZhbHVlcywgY2FsbERvbWFpbnMgd2lsbCB0cnkgdG8gY2FsbCBuZXN0ZWRcbiAgICAgICAgICAgICAgIGRvbWFpbnMuIFNhbWxsIHZhbHVlIG1heSBsZWFkIHRvIHNhbWxsZXIgZG9tYWlucy5cbiAgLXdzIFdJTlNJWkUgIFRoZSBoYWxmIG9mIHRoZSBzbGlkaW5nIHdpbmRvdyBzaXplIHVzZWQgdG8gY2FjdWxhdGUgbG9jYWwgY29ycmVsYXRpb24sXG4gICAgICAgICAgICAgICBEZWZhdWx0IGlzIDUwMDAwMCAoNTAwa2IpLiBMYXJnZXIgdmFsdWUgbWF5IGxlYWQgdG8gbGFyZ2VyIGRvbWFpbnMuXG4gIC1oaWMgICAgICAgICBXaGV0aGVyIHRvIHVzZSBjdXRvZmZzIGZvciBIaS1DIHRvIG91dHB1dCBzaWduaWZpY2FudCBkb21haW5zLlxuICAgICAgICAgICAgICAgRGVmYXVsdCBpcyBub3QuIFNldCB0aGlzIG9wdGlvbiB0byBlbmFibGUsIGN1dG9mZnMgd2lsbCBiZSBtb3JlIGxvb3NlLlxuYGBgXG5cbi0tLS0tLVxuIyMjIDE0LiBQbG90IHRoZSBpbnRlcmFjdGlvbiBhcyBoZWF0bWFwL3NjYXR0ZXIvYXJjaGVzLCAxRCBzaWduYWxzLCBwZWFrcywgbG9vcHMgYW5kIGRvbWFpbnNcblJ1biAqKmNMb29wczIgcGxvdCAtaCoqIHRvIHNlZSBkZXRhaWxzLlxuYGBgXG5QbG90IHRoZSBpbnRlcmFjdGlvbiBkYXRhIGFzIGEgaGVhdG1hcCAob3IgYXJjaGVzL3NjYXR0ZXIpIHdpdGggYWRkaXRpb25hbCBvZiBcbnZpcnR1YWwgNEMgdmlldyBwb2ludCwgMUQgdHJhY2tzIChiaWdXaWcgZmlsZXMpLCAxRCBhbm5vdGF0aW9ucyAocGVha3MsIGdlbmVzKSBcbmFuZCAyRCBhbm5vdGF0aW9ucyAoZG9tYWlucykuIElmIC1mIGlzIG5vdCBhc3NpZ25lZCwgd2lsbCBqdXN0IHBsb3QgcHJvZmlsZXMgXG5mcm9tIGJpZ1dpZyBmaWxlIG9yIGJlZCBmaWxlcy5cblxuRXhhbXBsZXM6XG4gICAgMS4gcGxvdCB0aGUgc2ltcGxlIHNxdWFyZSBoZWF0bWFwIGZvciBhIHNwZWNpZmljIHJlZ2lvbiB3aXRoIDFrYiByZXNvbHV0aW9uIFxuICAgICAgIHdpdGggZ2VuZXMgXG4gICAgICAgIGNMb29wczIgcGxvdCAtZiB0ZXN0L2NocjIxLWNocjIxLml4eSAtbyB0ZXN0IC1icyAxMDAwIC1zdGFydCAzNDg0MDAwMCBcXFxuICAgICAgICAgICAgICAgICAgICAgLWVuZCAzNDg5NTAwMCAtbG9nIC1ndGYgdGVzdC5ndGZcblxuICAgIDIuIHBsb3QgdGhlIHVwcGVyIHRyaWFuZ2xlIGhlYXRtYXAgd2l0aCBkb21haW5zIHN1Y2ggYXMgVEFEIGFuZCBDVENGIGJpZ1dpZ1xuICAgICAgIHRyYWNrXG4gICAgICAgIGNMb29wczIgcGxvdCAtZiB0ZXN0L2NocjIxLWNocjIxLml4eSAtbyB0ZXN0X2RvbWFpbiAtYnMgMTAwMDAgXFxcbiAgICAgICAgICAgICAgICAgICAgIC1zdGFydCAzNDYwMDAwMCAtZW5kIDM1NTAwMDAwIC1kb21haW5zIEhpQ19UQUQuYmVkIC1sb2cgXFxcbiAgICAgICAgICAgICAgICAgICAgLXRyaXUgLWJ3cyBHTTEyODc4X0NUQ0ZfY2hyMjEuYndcblxuICAgIDMuIHBsb3QgdGhlIGhlYXRtYXAgYXMgdXBwZXIgdHJpYW5nbGUgd2l0aCAxRCBzaWduYWwgdHJhY2sgYW5kIGZpbHRlciB0aGUgXG4gICAgICAgUEVUcyBzaG9ydGVyIHRoYW4gMWtiXG4gICAgICAgIGNMb29wczIgcGxvdCAtZiB0ZXN0L2NocjIxLWNocjIxLml4eSAtbyB0ZXN0IC1icyA1MDAgLXN0YXJ0IDM0ODQwMDAwIFxcXG4gICAgICAgICAgICAgICAgICAgICAtZW5kIDM0ODk1MDAwIC1sb2cgLXRyaXUgLTFEIC1jdXQgMTAwMFxuXG4gICAgNC4gcGxvdCB0aGUgb2JzZXJ2YXRpb24vZXhwZWN0YXRpb24gaW50ZXJhY3Rpb24gaGVhdG1hcCB3aXRoIDFEIHNpZ25hbCBcbiAgICAgICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLW0gb2JzL2V4cCAtMUQgLXRyaXUgXFwgXG4gICAgICAgICAgICAgICAgICAgICAtYnMgNTAwIC1zdGFydCAzNDg0MDAwMCAtZW5kIDM0ODk1MDAwXG5cbiAgICA1LiBwbG90IHRoZSBjaHJvbW9zb21lLXdpZGUgY29ycmVsYXRpb24gaGVhdG1hcCBcbiAgICAgICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLWNvcnIgXG5cbiAgICA2LiBwbG90IHVwcGVyIHRyaWFuZ2xlIGludGVyYWN0aW9uIGhlYXRtYXAgdG9nZXRoZXIgd2l0aCBnZW5lcywgYmlnV2lnIFxuICAgICAgIGZpbGVzLCBwZWFrcywgbG9vcHMsIGRvbWFpbnMsIGNvbnRyb2wgdGhlIGhlYXRtYXAgc2NhbGVcbiAgICAgICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLWJzIDUwMCAtc3RhcnQgMzQ4NDAwMDAgXFxcbiAgICAgICAgICAgICAgICAgICAgIC1lbmQgMzQ4OTUwMDAgLXRyaXUgLWJ3cyBBVEFDLmJ3LENUQ0YuYncgLTFEIFxcXG4gICAgICAgICAgICAgICAgICAgICAtbG9vcCB0ZXN0X2xvb3BzLnR4dCAtYmVkcyBFbmguYmVkLFRzcy5iZWQgXFxcbiAgICAgICAgICAgICAgICAgICAgIC1kb21haW5zIHRhZC5iZWQgLW0gb2JzIC1sb2cgLXZtaW4gMC4yIC12bWF4IDIgLWd0ZiBnZW5lcy5ndGZcblxuICAgIDcuIHBsb3Qgc21hbGwgcmVnaW9ucyBpbnRlcmFjdGluZyBQRVRzIGFzIGFyY2hlcyBcbiAgICAgICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLXN0YXJ0IDQ2MjI4NTAwIFxcXG4gICAgICAgICAgICAgICAgICAgICAtZW5kIDQ2MjkwMDAwIC0xRCAtbG9vcHMgZ21fbG9vcHMudHh0IC1hcmNoIC1hdyAwLjA1XG5cbiAgICA4LiBwbG90IHNtYWxsIHJlZ2lvbnMgaW50ZXJhY3RpbmcgUEVUcyBhcyBzY2F0dGVyIHBsb3RcbiAgICAgICAgY0xvb3BzMiBwbG90IC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1vIHRlc3QgLXN0YXJ0IDQ2MjI4NTAwIFxcXG4gICAgICAgICAgICAgICAgICAgICAtZW5kIDQ2MjkwMDAwIC0xRCAtbG9vcHMgZ21fbG9vcHMudHh0IC1zY2F0dGVyXG5cbiAgICA5LiBwbG90IEhpLUMgY29tcGFydG1lbnRzIGFuZCBlaWdlbnZlY3RvciAgXG4gICAgICAgIGNMb29wczIgcGxvdCAtZiB0ZXN0L2NocjIxLWNocjIxLml4eSAtbyB0ZXN0IC1icyAxMDAwMDAgLWxvZyAtY29yciAtZWlnICBcblxub3B0aW9uYWwgYXJndW1lbnRzOlxuICAtaCwgLS1oZWxwICAgICAgICAgICAgc2hvdyB0aGlzIGhlbHAgbWVzc2FnZSBhbmQgZXhpdFxuICAtZCBQUkVESVIgICAgICAgICAgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgICAgICAgICAgT3V0cHV0IGRhdGEgZGlyZWN0b3J5IC8gZmlsZSBuYW1lIHByZWZpeCwgZGVmYXVsdCBpcyBjTG9vcHMyX291dHB1dC5cbiAgLXAgQ1BVICAgICAgICAgICAgICAgIENQVXMgdXNlZCB0byBydW4gdGhlIGpvYiwgZGVmYXVsdCBpcyAxLCBzZXQgLTEgdG8gdXNlIGFsbCBDUFVzXG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICB0b28gbWFueSBQRVRzLlxuICAtY3V0IENVVCAgICAgICAgICAgICAgRGlzdGFuY2UgY3V0b2ZmIHRvIGZpbHRlciBjaXMgUEVUcywgb25seSBrZWVwIFBFVHMgd2l0aCBkaXN0YW5jZVxuICAgICAgICAgICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgICAgICAgICAgS2VlcCB0aGUgUEVUcyB3aXRoIGRpc3RhbmNlIDw9bWN1dC4gRGVmYXVsdCBpcyAtMSwgbm8gZmlsdGVyaW5nLlxuICAtdiAgICAgICAgICAgICAgICAgICAgU2hvdyBjTG9vcHMyIHZlcmlzb24gbnVtYmVyIGFuZCBleGl0LlxuICAtLS0gICAgICAgICAgICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uIG9mIGNMb29wczIuXG4gIC1mIEZJWFkgICAgICAgICAgICAgICBJbnB1dCAuaXh5IGZpbGUgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlLiBJZiBub3QgYXNzaWduZWQsIG5vIGhlYXRtYXBzXG4gICAgICAgICAgICAgICAgICAgICAgICBvciBhcmNoZXMgd2lsbCBiZSBzaG93biBhbmQgLWNocm9tIGlzIG5lZWRlZCB0byBnZW5lcmF0ZSBwbG90cyBzaW1pbGFyXG4gICAgICAgICAgICAgICAgICAgICAgICB0byBJR1Ygb3Igb3RoZXIgYnJvd3Nlci5cbiAgLWJzIEJJTlNJWkUgICAgICAgICAgIEJpbiBzaXplL21hdHJpeCByZXNvbHV0aW9uIChicCkgdG8gZ2VuZXJhdGUgdGhlIGNvbnRhY3QgbWF0cml4IGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgcGxvdHRpbmcsIGRlZmF1bHQgaXMgNTAwMCBicC5cbiAgLWNocm9tIENIUk9NICAgICAgICAgIENocm9tb3NvbWUgZm9yIHRoZSB0YXJnZXQgcmVnaW9uIGlmIC1mIGlzIG5vdCBhc3NpZ25lZC5cbiAgLXN0YXJ0IFNUQVJUICAgICAgICAgIFN0YXJ0IGdlbm9taWMgY29vcmRpbmF0ZSBmb3IgdGhlIHRhcmdldCByZWdpb24uIERlZmF1bHQgaXMgMC5cbiAgLWVuZCBFTkQgICAgICAgICAgICAgIEVuZCBnZW5vbWljIGNvb3JkaW5hdGUgZm9yIHRoZSB0YXJnZXQgcmVnaW9uLiBEZWZhdWx0IGlzIHRvIGluZmVyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSBkYXRhLlxuICAtbG9vcHMgRkxPT1AgICAgICAgICAgVGhlIF9sb29wLnR4dCBmaWxlIGdlbmVyYXRlZCBieSBjTG9vcHMyLCB3aWxsIGJlIHVzZWQgdG8gcGxvdCBsb29wcyBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJjaGVzLlxuICAtbG9vcEN1dCBMT09QQ1VUICAgICAgT25seSBzaG93IGxvb3BzIHdpdGggbW9yZSB0aGFuIGxvb3BDdXQgUEVUcy4gRGVmYXVsdCBpcyAwLlxuICAtZG9tYWlucyBGRE9NQUlOICAgICAgVGhlIGRvbWFpbnMgbmVlZCB0byBhbm5vdGF0ZWQgaW4gdGhlIGhlYXRtYXAgc3VjaCBhcyBUQURzLCBzaG91bGQgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC5iZWQgZmlsZS5cbiAgLWJlZHMgQkVEUyAgICAgICAgICAgIEJFRCB0cmFja3Mgb2YgZ2Vub21pYyBmZWF0dXJlcyB0byBwbG90IGFib3ZlIHRoZSBoZWF0bWFwLCBzdWNoIGFzXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9tb3RlcnMgYW5kIGVuaGFuY2VycywgdHJhY2sgbmFtZSB3aWxsIGJlIGluZmVycmVkIGZyb20gZmlsZSBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIGV4YW1wbGUgZW5oYW5jZXIuYmVkLHByb21vdGVyLmJlZC5cbiAgLWd0ZiBHVEYgICAgICAgICAgICAgIEdURiB0cmFjayBvZiBnZW5lcyB0byBwbG90IGFib3ZlIHRoZSBoZWF0bWFwLlxuICAtYndzIEJXUyAgICAgICAgICAgICAgQmlnV2lnIHRyYWNrcyB0byBwbG90IGFib3ZlIHRoZSBoZWF0bWFwLCB0cmFjayBuYW1lIHdpbGwgYmUgaW5mZXJyZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gZmlsZSBuYW1lLCBmb3IgZXhhbXBsZSBhLmJ3LGIuYncsYy5idy4gXG4gIC1id3ZzIEJXVlMgICAgICAgICAgICBCaWdXaWcgdHJhY2tzIHktYXhpcyBsaW1pdGF0aW9ucy4gRGVmYXVsdCBpcyBhdHVvLWRldGVybWluZWQuIEFzc2lnblxuICAgICAgICAgICAgICAgICAgICAgICAgYXMgJ3ZtaW4sdm1heDt2bWluLHZtYXg7dm1pbix2bWF4Jy4gRm9yIGV4YW1wbGUsICcwLDE7OzAsMScgZm9yIHRocmVlXG4gICAgICAgICAgICAgICAgICAgICAgICBiaWdXaWcgdHJhY2tzLCBhcyB0aGUgc2Vjb25kIHRyYWNrIGtlcHQgYXR1by1kZXRlcm1pbmVkLiBEdWUgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3BhcnNlIGxpbWl0YXRpb24gZm9yIHBhcnNpbmcgbWludXMgdmFsdWUsIGFsc28gY2FuIGJlIGFzc2lnbmVkIGFzXG4gICAgICAgICAgICAgICAgICAgICAgICB2bWF4LHZtaW4uXG4gIC1id2NzIEJXQ1MgICAgICAgICAgICBCaWdXaWcgdHJhY2tzIGNvbG9ycy4gRGVmYXVsdCBpcyBhdHVvLWRldGVybWluZWQuIEFzc2lnbiBhcyBcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsMSwyIGZvciB0aHJlZSBiaWdXaWcgdHJhY2tzLiBWYWx1ZXMgc2VwZXJhdGVkIGJ5IGNvbW1hLlxuICAtbG9nICAgICAgICAgICAgICAgICAgV2hldGhlciB0byBsb2cgdHJhbnNmb3JtIHRoZSBtYXRyaXguXG4gIC1tIHtvYnMsb2JzL2V4cH0gICAgICBUaGUgdHlwZSBvZiBtYXRyaXggdG8gcGxvdCwgb2JzZXJ2ZWQgbWF0cml4IG9yIG9ic2VydmVkL2V4cGVjdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXgsIGV4cGVjdGVkIG1hdHJpeCB3aWxsIGJlIGdlbmVyYXRlZCBieSBzaHVmZmxpbmcgUEVUcywgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgaXMgb2JzZXJ2ZWQuXG4gIC1jb3JyICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHBsb3QgdGhlIGNvcnJlbGF0aW9uIG1hdHJpeC4gRGVmYXVsdCBpcyBub3QuIENvcnJlbGF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWF0bWFwIHdpbGwgdXNlIGRhcmsgbW9kZSBjb2xvciBtYXAsIHVzZWQgdG9nZXRoZXIgd2l0aCBvYnMgbWV0aG9kLlxuICAtbm9ybSAgICAgICAgICAgICAgICAgV2hldGhlciB0byBub3JtYWxpemUgdGhlIG1hdHJpeCB3aXRoIHotc2NvcmUuXG4gIC10cml1ICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHJvdGF0ZSB0aGUgaGVhdG1hcCBvbmx5IHNob3cgdXBwZXIgdHJpYW5nbGUsIGRlZmF1bHQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgIEZhbHNlLlxuICAtdm1pbiBWTUlOICAgICAgICAgICAgVGhlIG1pbmltdW0gdmFsdWUgc2hvd24gaW4gdGhlIGhlYXRtYXAgYW5kIGNvbG9yYmFyLlxuICAtdm1heCBWTUFYICAgICAgICAgICAgVGhlIG1heG11bSB2YWx1ZSBzaG93biBpbiB0aGUgaGVhdG1hcCBhbmQgY29sb3JiYXIuXG4gIC0xRCAgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHBsb3QgdGhlIHBpbGV1cCAxRCBzaWduYWwgZm9yIHRoZSByZWdpb24uIERlZmF1bHQgaXMgbm90LlxuICAgICAgICAgICAgICAgICAgICAgICAgUGxlYXNlIG5vdGUsIHRoZSAxRCBzaWduYWwgaXMgYWdncmVnYXRlZCBmcm9tIHRoZSB2aXN1YWxpemF0aW9uIHJlZ2lvbi5cbiAgICAgICAgICAgICAgICAgICAgICAgIElmIHdhbnQgdG8gY2hlY2sgdGhlIHNpZ25hbCBmcm9tIGVhY2ggcG9zaXRpb24gb2YgYWxsIGdlbm9tZS9jaHJvbW9zb21lLFxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlIGNMb29wczIgZHVtcCAtYmRnIHRvIGdldCB0aGUgYmlnV2lnIGZpbGUuXG4gIC0xRHYgT05FRFYgICAgICAgICAgICAxRCBwcm9maWxlIHktYXhpcyBsaW1pdGF0aW9ucy4gRGVmYXVsdCBpcyBhdXRvLWRldGVybWluZWQuIEFzc2lnbiBhc1xuICAgICAgICAgICAgICAgICAgICAgICAgdm1pbix2bWF4LCBmb3IgZXhhbXBsZSAwLDEuXG4gIC12aXJ0dWFsNEMgICAgICAgICAgICBXaGV0aGVyIHRvIHBsb3QgdGhlIHZpcnR1YWwgNEMgdmlldyBwb2ludCAxRCBzaWduYWwuIERlZmF1bHQgaXMgbm90LlxuICAgICAgICAgICAgICAgICAgICAgICAgSWYgYXNzaWduZWQsIC12aWV3X3N0YXJ0IGFuZCAtdmlld19lbmQgYXJlIG5lZWRlZC5cbiAgLXZpZXdfc3RhcnQgVklFV1NUQVJUXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGFydCBnZW5vbWljIGNvb3JkaW5hdGUgZm9yIHRoZSB2aWV3IHBvaW50IHN0YXJ0IHJlZ2lvbiwgb25seSB2YWxpZFxuICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAtdml0cnV0YWw0QyBpcyBzZXQsIHNob3VsZCA+PXN0YXJ0IGFuZCA8PWVuZC5cbiAgLXZpZXdfZW5kIFZJRVdFTkQgICAgIEVuZCBnZW5vbWljIGNvb3JkaW5hdGUgZm9yIHRoZSB2aWV3IHBvaW50IGVuZCByZWdpb24sIG9ubHkgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gLXZpdHJ1dGFsNEMgaXMgc2V0LCBzaG91bGQgPj1zdGFydCBhbmQgPD1lbmQuXG4gIC00Q3YgVklFV1YgICAgICAgICAgICBWaXJ0dWFsIDRDIHByb2ZpbGUgeS1heGlzIGxpbWl0YXRpb25zLiBEZWZhdWx0IGlzIGF1dG8tZGV0ZXJtaW5lZC5cbiAgICAgICAgICAgICAgICAgICAgICAgIEFzc2lnbiBhcyB2bWluLHZtYXgsIGZvciBleGFtcGxlIDAsMS5cbiAgLWFyY2ggICAgICAgICAgICAgICAgIFdoZXRoZXIgdG8gcGxvdCBpbnRlcmFjdGluZyBQRVRzIGFzIGFyY2hlcy4gRGVmYXVsdCBpcyBub3QuIElmXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXQsIG9ubHkgb3JpZ2luYWwgb25lIFBFVCBvbmUgYXJjaCB3aWxsIGJlIHNob3duLiBVc2VmdWxlIHRvIGNoZWNrXG4gICAgICAgICAgICAgICAgICAgICAgICBzbWFsbCByZWdpb24gZm9yIHJhdyBkYXRhLCBlc3BlY2lhbGx5IHdoZW4gaGVhdG1hcCBpcyBub3QgY2xlYXIuXG4gIC1hdyBBVyAgICAgICAgICAgICAgICBMaW5lIHdpZHRoIGZvciBlYWNoIFBFVCBpbiBhcmNoZXMgcGxvdC4gRGVmYXVsdCBpcyAxLiBUcnkgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZSBpdCBpZiB0b28gbWFueSBvciBmZXcgUEVUcy5cbiAgLWFjIEFDICAgICAgICAgICAgICAgIExpbmUgY29sb3IgZm9yIGVhY2ggUEVUIGluIGFyY2hlcyBwbG90LiBEZWZhdWx0IGlzIDQuIFRyeSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlIGl0IHNlZSBob3cgbWFueSBjb2xvcnMgYXJlIHN1cHBvcnRlZCBieSBjTG9vcHMyLlxuICAtYWEgQUEgICAgICAgICAgICAgICAgQWxwaGEgdG8gY29udHJvbCBhcmNoIGNvbG9yIHNhdHVyYXRpb24uIERlZmF1bHQgaXMgMS5cbiAgLXNjYXR0ZXIgICAgICAgICAgICAgIFdoZXRoZXIgdG8gcGxvdCBpbnRlcmFjdGluZyBQRVRzIGFzIHNjYXR0ZXIgZG90cy4gRGVmYXVsdCBpcyBub3QuXG4gICAgICAgICAgICAgICAgICAgICAgICBJZiBzZXQsIG9ubHkgb3JpZ2luYWwgb25lIFBFVCBvbmUgZG90IHdpbGwgYmUgc2hvd24uIFVzZWZ1bGUgdG8gY2hlY2tcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdyBkYXRhLCBlc3BlY2lhbGx5IHdoZW4gaGVhdG1hcCBpcyBub3QgY2xlYXIgdGhhdCAtdm1heCBpcyB0b28gc21hbGwuXG4gIC1zcyBTUyAgICAgICAgICAgICAgICBEb3Qgc2l6ZSBmb3IgZWFjaCBQRVQgaW4gc2NhdHRlciBwbG90LiBEZWZhdWx0IGlzIDEuIFRyeSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlIGl0IHRvIG9wdGltaXplIHRoZSBwbG90LlxuICAtc2MgU0MgICAgICAgICAgICAgICAgRG90IGNvbG9yIGZvciBlYWNoIFBFVCBpbiBzY2F0dGVyIHBsb3QuIERlZmF1bHQgaXMgMC4gVHJ5IHRvXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UgaXQgc2VlIGhvdyBtYW55IGNvbG9ycyBhcmUgc3VwcG9ydGVkIGJ5IGNMb29wczIuXG4gIC1zYSBTQSAgICAgICAgICAgICAgICBBbHBoYSB0byBjb250cm9sIGRvdCBjb2xvciBzYXR1cmF0aW9uLiBEZWZhdWx0IGlzIDEuXG4gIC1laWcgICAgICAgICAgICAgICAgICBXaGV0aGVyIHRvIHBsb3QgdGhlIFBDMSBvZiBjb3JyZWxhdGlvbiBtYXRpcnggdG8gc2hvdyBjb21wYXJ0bWVudHNcbiAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgbm90LiBPbmx5IHdvcmsgd2VsbCBmb3IgYmlnIHJlZ2lvbnMgc3VjaCBhcyByZXNvbHV0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICBvZiAxMDBrLlxuICAtZWlnX3IgICAgICAgICAgICAgICAgV2hldGhlciB0byBmbGlwIHRoZSBQQzEgdmFsdWVzIG9mIC1laWcuIEl0IHNob3VsZCBiZSBkZXBlbmRlbmQgb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGluYWN0aXZhdGUgb3IgYWN0aXZhdGUgaGlzdG9uZSBtYXJrZXJzLCBhcyBhY3R1YWxseSB0aGUgUENBIHZhbHVlcyBkb1xuICAgICAgICAgICAgICAgICAgICAgICAgbm90IGhhdmUgZGlyZWN0aW9ucywgZXNwZWNpYWxseSBjb21wYXJpbmcgZGlmZmVyZW50IHNhbXBsZXMuXG4gIC1maWdXaWR0aCB7NCw4fSAgICAgICBGaWd1cmUgd2lkdGguIDQgaXMgZ29vZCB0byBzaG93IHRoZSBwbG90IGFzIGhhbGYgb2YgYSBBNCBmaWd1cmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoIGFuZCA4IGlzIGdvb2QgdG8gc2hvdyBtb3JlIHdpZGVyLiBEZWZhdWx0IGlzIDQuXG5cblxuYGBgXG5cbi0tLS0tLVxuIyMjIDE1LiBNb250YWdlIGFuYWx5c2lzIGZvciByZWdpb25zIG9mIGludGVyYWN0aW9uc1xuUnVuICoqY0xvb3BzMiBtb250YWdlIC1oKiogdG8gc2VlIGRldGFpbHMuXG5gYGBcbk1vbnRhZ2UgYW5hbHlzaXMgb2Ygc3BlY2lmaWMgcmVnaW9ucywgcHJvZHVjaW5nIFdlc3R3b3JsZCBTZWFzb24gMyAtbGlrZSBcblJlaG9ib2FtIHBsb3QuIFxuXG5FeGFtcGxlczogXG4gICAgMS4gc2hvd2luZyBhbGwgUEVUcyBmb3IgYSBnZW5lJ3MgcHJvbW90ZXIgYW5kIGVuaGFuY2Vyc1xuICAgICAgICBjTG9vcHMyIG1vbnRhZ2UgLWYgdGVzdC9jaHIyMS1jaHIyMS5peHkgLWJlZCB0ZXN0LmJlZCAtbyB0ZXN0IFxuXG4gICAgMi4gc2hvd2luZyBzaW1wbGlmaWVkIFBFVHMgZm9yIGEgZ2VuZSdzIHByb21vdGVyIGFuZCBlbmhhbmNlcnNcbiAgICAgICAgY0xvb3BzMiBtb250YWdlIC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1iZWQgdGVzdC5iZWQgLW8gdGVzdCAtc2ltcGxlXG5cbiAgICAzLiBhZGp1c3QgaW50ZXJhY3RpbmcgbGluayB3aWR0aCBcbiAgICAgICAgY0xvb3BzMiBtb250YWdlIC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1iZWQgdGVzdC5iZWQgLW8gdGVzdCAtc2ltcGxlIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAtcHBtdyAxMFxuXG4gICAgNC4gc2hvd2luZyBhbGwgUEVUcyBmb3IgYSByZWdpb24sIGlmIGluIHRoZSBiZWQgZmlsZSBvbmx5IGNvbnRhaW5zIG9uZSByZWdpb25cbiAgICAgICAgY0xvb3BzMiBtb250YWdlIC1mIHRlc3QvY2hyMjEtY2hyMjEuaXh5IC1iZWQgdGVzdC5iZWQgLW8gdGVzdCAtZXh0IDBcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLWYgRklYWSAgICAgICAgSW5wdXQgLml4eSBmaWxlIGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZS5cbiAgLWJlZCBCRUQgICAgICAgSW5wdXQgLmJlZCBmaWxlIGZvciB0YXJnZXQgcmVnaW9ucywgNHRoIGNvbHVtbnMgc2hvdWxkIGJlIGlkL25hbWUgZm9yXG4gICAgICAgICAgICAgICAgIHRoZSByZWdpb24uXG4gIC1leHQgRVhUICAgICAgIFVwLXN0cmVhbSBhbmQgZG93bi1zdHJlYW0gZXh0ZXNpb24gb2YgdGFyZ2V0IHJlZ2lvbiBsZW5ndGguIERlZmF1bHQgaXNcbiAgICAgICAgICAgICAgICAgMi4gSWYgdGhlIGlucHV0IGJlZCBhbHJlYWR5IGluY2x1ZGUgdXAvZG93bi1zdHJlYW0gcmVnaW9ucywgYXNzaWduIGFzIDAuXG4gIC1zaW1wbGUgICAgICAgIFdoZXRoZXIgdG8gb25seSBkcmF3IHRoZSByZXByZXNlbnRhdGl2ZSBpbnRlcmFjdGlvbnMgYmV0d2VlbiB0d28gdGFyZ2V0XG4gICAgICAgICAgICAgICAgIHJlZ2lvbnMgYXMgb25lIGFyY2gsIGFuZCBub3QgaW5jbHVkZSB0aGUgaW50ZXJhY3Rpb25zIGluIGV4dGVuZGVkXG4gICAgICAgICAgICAgICAgIHJlZ2lvbnMuIERlZmF1bHQgaXMgbm90LCBhbGwgaW50ZXJhY3Rpb25zIHdpbGwgYmUgc2hvd24gYXMgYXJjaHMuLlxuICAtdnAgVklFV1BPSU5UICBPbmx5IHNob3cgaW50ZXJhY3Rpb25zIHdpdGggc3BlY2lmaWMgcmVnaW9ucyBmcm9tIGFsbCBvdGhlciByZWdpb25zLlxuICAgICAgICAgICAgICAgICBOYW1lL2lkICg0dGggY29sdW1uIGluIC5iZWQgZmlsZSkgaXMgbmVlZC4gRGVmYXVsdCBpcyB0byBzaG93IGFsbFxuICAgICAgICAgICAgICAgICByZWxlYXRlZCBpbnRlcmFjdGlvbnMuIE11bHRpcGxlIG5hbWVzL2lkcyBjYW4gYmUgYXNzaWduZWQgYnkgc2VwZXJhdGlvblxuICAgICAgICAgICAgICAgICBvZiBjb21tYS5cbiAgLXZtaW4gVk1JTiAgICAgVGhlIG1pbmlhbCBzY2FsZSBmb3IgMUQgcGlsZXVwIGRhdGEuIERlZmF1bHQgd2lsbCBiZSBpbmZlcnJlZCBmcm9tIHRoZVxuICAgICAgICAgICAgICAgICBkYXRhLlxuICAtdm1heCBWTUFYICAgICBUaGUgbWF4bWlhbCBzY2FsZSBmb3IgMUQgcGlsZXVwIGRhdGEuIERlZmF1bHQgd2lsbCBiZSBpbmZlcnJlZCBmcm9tIHRoZVxuICAgICAgICAgICAgICAgICBkYXRhLlxuICAtcHBtdyBQUE1XICAgICBMaW5rIGxpbmUgd2lkdGggaW5kaWNhdG9yLCBzaG9ydCBmb3IgMSBQRVRzIHBlciBNaWxsaW9uIFBFVHMgbGluZVxuICAgICAgICAgICAgICAgICB3aWR0aCwgZGVmYXVsdCBpcyAxMC4gQWRqdXN0IHRoaXMgdmFsdWUgd2hlbiAtc2ltcGxlIGlzIHVzZWQuIERlY3JlYXNlXG4gICAgICAgICAgICAgICAgIGl0IGlmIGxpbmtzIGFyZSB0b28gYm9sZCBhbmQgaW5jcmVhc2UgaXQgd2hlbiBsaW5rcyBhcmUgdG9vIHRoaW4uXG4gIC1hdyBBVyAgICAgICAgIExpbmUgd2lkdGggZm9yIGVhY2ggUEVUIGlmIC1zaW1wbGUgaXMgbm90IHNlbGVjdGVkLiBEZWZhdWx0IGlzIDEuXG4gIC1ubzFEICAgICAgICAgIFdoZXRoZXIgdG8gbm90IHBsb3QgMUQgcHJvZmlsZXMuIERlZmF1bHQgaXMgcGxvdC4gU2V0IHRoaXMgZm9yIEhpLUNcbiAgICAgICAgICAgICAgICAgbGlrZSBkYXRhLlxuYGBgXG5cbi0tLS0tLVxuIyMjIDE2LiBBZ2dyZWdhdGlvbiBhbmFseXNpcyBmb3IgcGVha3MsIGxvb3BzIGFuZCBkb21haW5zXG5SdW4gKipjTG9vcHMyIGFnZyAtaCoqIHRvIHNlZSBkZXRhaWxzLlxuYGBgXG5EbyB0aGUgYWdncmVnYXRpb24gYW5hbHlzaXMgZm9yIHBlYWtzLCBsb29wcywgdmlldyBwb2ludHMgYW5kIGRvbWFpbnMuXG5cblRoZSBvdXRwdXQgZmlndXJlcyBjYW4gYmUgdXNlZCBkaXJlY3RseSwgYW5kIHRoZSBkYXRhIHRvIGdlbmVyYXRlIHRoZSBwbG90IGFyZSBcbmFsc28gc2F2ZWQgZm9yIGZ1cnRoZXIgY3VzdG9taXplZCBhbmFseXNpcy4gXG5cbkZvciB0aGUgYWdncmVnYXRlZCBwZWFrcyBhbmFseXNpcyxpbnB1dCBpcyBhIC5iZWQgZmlsZSBhbm5vdGF0ZWQgd2l0aCB0aGUgXG5jb29yZGluYXRlcyBmb3IgdGhlIHRhcmdldCByZWdpb25zL3BlYWtzL2FuY2hvcnMuIE91dHB1dCBpcyBhIC5wZGYgZmlsZSBcbmNvbnRhaW5pbmcgYSBtZWFuIGRlbnNpdHkgcGxvdCBhbmQgaGVhdG1hcCBhbmQgYSAudHh0IGZpbGUgZm9yIHRoZSBkYXRhLiBUaGUgXG5kYXRhIGluIHRoZSAudHh0IGZpbGUgYW5kIHBsb3Qgd2VyZSBub3JtYWxpemVkIHRvIFJQTSAocmVhZHMgcGVyIG1pbGxpb24pLlxuXG5Gb3IgdGhlIGFnZ3JlZ2F0ZWQgdmlldyBwb2ludHMgYW5hbHlzaXMsIGlucHV0IGlzIGEgLmJlZCBmaWxlIGFubm90YXRlZCB3aXRoIFxuY29vcmRpbmF0ZXMgZm9yIHRoZSB0YXJnZXQgcmVnaW9ucy9wZWFrcy9hbmNob3JzIGFzIHZpZXcgcG9pbnQuIE91dHB1dCBpcyBhIFxuLnBkZiBmaWxlIGNvbnRhaW5pbmcgYSBtZWFuIGRlbnNpdHkgcGxvdCBhbmQgaGVhdG1hcCBhbmQgYSAudHh0IGZpbGUgZm9yIHRoZSBcbmRhdGEuIFRoZSBkYXRhIGluIHRoZSAudHh0IGZpbGUgYW5kIHBsb3Qgd2VyZSBub3JtYWxpemVkIHRvIFxubG9nMiggUlBNIChyZWFkcyBwZXIgbWlsbGlvbikrMSkuXG5cbkZvciB0aGUgYWdncmVnYXRlZCBsb29wcyBhbmFseXNpcywgaW5wdXQgaXMgYSBfbG9vcHMudHh0IGZpbGUgYW5ub3RhdGVkIHdpdGggXG50aGUgY29vcmRpbmF0ZXMgZm9yIHRhcmdldCBsb29wcywgc2ltaWxhciB0byB0aGUgZm9ybWF0IG9mIEJFRFBFLiBPdXRwdXQgaXMgYSBcbi5wZGYgZmlsZSBmb3IgbWVhbiBoZWF0bWFwIGFuZCAubnB6IGZpbGUgZ2VuZXJhdGVkIHRocm91Z2ggbnVtcHkuc2F2ZXogZm9yIGFsbCBcbmxvb3BzIGFuZCBuZWFyYnkgcmVnaW9ucyBtYXRyaXguIFRoZSBlbnJpY2htZW50IHNjb3JlIChFUykgaW4gdGhlIHBsb3QgaXMgXG5jYWxjdWxhdGVkIGFzOiBFUyA9IG1lYW4oIChQRVRzIGluIGxvb3ApLyhtZWFuIFBFVHMgb2YgbmVhcmJ5IHJlZ2lvbnMpICkuIE90aGVyIFxuZmlsZXMgZXhjZXB0IF9sb29wcy50eHQgY2FuIGJlIHVzZWQgYXMgaW5wdXQsIGFzIGxvbmcgYXMgdGhlIGZpbGUgY29udGFpbnMga2V5IFxuaW5mb3JtYXRpb24gaW4gdGhlIGZpcnN0IGNvbHVtbnMgc2VwYXJhdGVkIGJ5IHRhYnM6XG5sb29wSWRcdGNockFcdHN0YXJ0QVx0ZW5kQVx0Y2hyQlx0c3RhcnRCXHRlbmRCXHRkaXN0YW5jZVxubG9vcC0xXHRjaHIyMVx0MTAwMFx0MjAwMFx0Y2hyMjFcdDgwMDBcdDkwMDBcdDcwMDBcblxuVGhlcmUgaXMgYW5vdGhlciBvcHRpb24gZm9yIGxvb3BzIGFuYWx5c2lzLCB0ZXJtZWQgYXMgdHdvIGFuY2hvcnMuIElucHV0IGZpbGUgaXMgXG5zYW1lIHRvIGFnZ3JlZ2F0ZWQgbG9vcHMgYW5hbHlzaXMuIFRoZSB3aG9sZSByZWdpb24gd2l0aCBhc3NpZ25lZCBleHRlc2lvblxuYmV0d2VlbiB0d28gYW5jaG9ycyB3aWxsIGJlIGFnZ3JlZ2F0ZWQgYW5kIDFEIHByb2ZpbGUgY2FuIHNob3cgdHdvIGFuY2hvcnMuIFRoZSBcbmFuYWx5c2lzIGNvdWxkIGJlIHVzZWZ1bGUgdG8gc3R1ZHkvY29tYXByZSBkaWZmZXJlbnQgY2xhc3NlcyBvZiBhbmNob3JzIGFuZCBcbmNvbWJpbmF0aW9ucywgZm9yIGV4YW1wbGUsIGNvbnNpZGVyaW5nIENUQ1QgbW90aWYgZGlyZWN0aW9ucywgYWxsIGxlZnQgYW5jaG9yc1xuQ1RDRiBtb3RpZnMgYXJlIGluIHBvc2l0aXZlIHN0cmFuZCBhbmQgaW4gbmVnYXRpdmUgc3RyYW5kIGZvciBhbGwgcmlnaHQgYW5jaG9ycy4gXG5JdCBjb3VsZCBiZSBpbnRlcmVzdGluZyBmb3Igc29tZSBsb29wcyBvbmUgYW5jaG9yIG9ubHkgYm91bmQgYnkgdHJhbnNjcmlwdGlvbiBcbmZhY3RvciBhIGFuZCBhbm90aGVyIGFuY2hvciBvbmx5IGJvdW5kIGJ5IHRyYW5zY3JpcHRpb24gYi4gXG5cbkZvciB0aGUgYWdncmVnYXRlZCBkb21haW5zIGFuYWx5c2lzLCBpbnB1dCBpcyBhIC5iZWQgZmlsZSBhbm5vdGF0ZWQgd2l0aCB0aGVcbmNvb3JkaW5hdGVzIGZvciB0aGUgZG9tYWlucywgc3VjaCBhcyBUQURzLiBPdXRwdXQgYXJlIGEgLnBkZiBmaWxlIGZvciB0aGUgdXBwZXIgXG50cmlhbmd1bGFyIGhlYXRtYXAgYW5kIC5ucHogZmlsZSBnZW5lcmF0ZWQgdGhyb3VnaCBudW1weS5zYXZleiBmb3IgYWxsIGRvbWFpbnMgXG5hbmQgbmVhcmJ5IHJlZ2lvbiBtYXRyaXguIFRoZSBlbnJpY2htZW50IHNjb3JlIChFUykgaW4gdGhlIHBsb3QgaXMgY2FsY3VsYXRlZCBcbmFzIG1lYW4oICh0d28gZW5kcyBib3RoIHdpdGggaW4gZG9tYWluIFBFVHMgbnVtYmVyKS8oIG9ubHkgb25lIGVuZCBpbiBkb21haW4gXG5QRVRzIG51bWJlcikgKS5cblxuRXhhbXBsZXM6XG4gICAgMS4gc2hvdyBhZ2dyZWdhdGVkIHBlYWtzIGhlYXRtYXAgYW5kIHByb2ZpbGUgXG4gICAgICAgIGNMb29wczIgYWdnIC1kIHRlc3QgLXBlYWtzIHBlYWtzLmJlZCAtbyB0ZXN0IC1wZWFrX2V4dCAyNTAwIFxcIFxuICAgICAgICAgICAgICAgICAgICAtcGVha19iaW5zIDIwMCAtcGVha19ub3JtIC1za2lwWmVyb3NcblxuICAgIDIuIHNob3cgYWdncmVnYXRlZCB2aWV3IHBvaW50cyBhbmQgYWdncmVnYXRlZCBiaWdXaWcgc2lnbmFsXG4gICAgICAgIGNMb29wczIgYWdnIC1kIHRlc3QgLW8gdGVzdCAtdmlld1BvaW50cyB0ZXN0X3BlYWtzLmJlZCAtYndzIENUQ0YuYncgXG5cbiAgICAzLiBzaG93IGFnZ3JlZ2F0ZWQgbG9vcHMgaGVhdG1hcCwgMUQgcHJvZmlsZSBhbmQgYWdncmVnYXRlZCBiaWdXaWcgc2lnbmFsXG4gICAgICAgIGNMb29wczIgYWdnIC1kIHRlc3QgLW8gdGVzdCAtbG9vcHMgdGVzdF9sb29wcy50eHQgLWJ3cyBDVENGLmJ3IC0xRCBcXFxuICAgICAgICAgICAgICAgICAgICAtbG9vcF9ub3JtXG5cbiAgICAzLiBzaG93IGFnZ3JlZ2F0ZWQgbG9vcHMgaGVhdG1hcCwgMUQgcHJvZmlsZSBhbmQgYWdncmVnYXRlZCBiaWdXaWcgc2lnbmFsXG4gICAgICAgaW4gdHdvIGFuY2hvcnMgbW9kZVxuICAgICAgICBjTG9vcHMyIGFnZyAtZCB0ZXN0IC1vIHRlc3QgLXR3b0FuY2hvcnMgdGVzdF9sb29wcy50eHQgLWJ3cyBDVENGLmJ3IC0xRCBcXFxuICAgICAgICAgICAgICAgICAgICAtbG9vcF9ub3JtXG5cbiAgICA0LiBzaG93IGFnZ3JlZ2F0ZWQgZG9tYWlucyBoZWF0bWFwLCAxRCBwcm9maWxlIGFuZCBhZ2dyZWdhdGVkIGJpZ1dpZyBzaWduYWxcbiAgICAgICAgY0xvb3BzMiBhZ2cgLWQgdGVzdCAtbyB0ZXN0IC1kb21haW5zIFRBRC5iZWQgLWJ3cyBDVENGLmJ3IC0xRCBcblxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICAgICAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgICAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICAgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICAgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLXBlYWtzIFBFQUtGICAgICAgICAgIFRoZSAuYmVkIGZpbGUgZm9yIHBlYWtzLWNlbnRyaWMgYWdncmVnYXRpb24gYW5hbHlzaXMuXG4gIC1wZWFrX2V4dCBQRUFLX0VYVCAgICBUaGUgbmVhcmJ5IHVwc3RyZWFtIGFuZCBkb3duc3RyZWFtIHJlZ2lvbnMgKGJwKSBmcm9tIHRoZSBwZWFrIGNlbnRlci5cbiAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgNTAwMC5cbiAgLXBlYWtfYmlucyBQRUFLX0JJTlMgIFRoZSBiaW4gc2l6ZSBmb3IgdGhlIHByb2ZpbGUgYXJyYXkgb2YgcGVha3MuIERlZmF1bHQgaXMgMTAwLlxuICAtcGVha19ub3JtICAgICAgICAgICAgV2hldGhlciB0byBub3JtYWxpemUgdGhlIGRhdGEgaW4gdGhlIHBlYWtzIHByb2ZpbGUgcGxvdCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYXRtYXAgd2l0aCByb3ctd2lzZSB6LXNjb3JlLiBEZWZhdWx0IGlzIG5vdC5cbiAgLXZpZXdQb2ludHMgVklFV1BPSU5URlxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIC5iZWQgZmlsZSBmb3IgdmlldyBwb2ludHMgLWNlbnRyaWMgYWdncmVnYXRpb24gYW5hbHlzaXMuXG4gIC12aWV3UG9pbnRVcCBWSUVXUE9JTlRVUFxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHVwc3RyZWFtIHJlZ2lvbnMgaW5jbHVkZWQgZm9yIHRoZSBhZ2dyZWFnZWQgdmlldyBwb2ludHMgYW5hbHlzaXMuXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIDEwMDAwMCBicC5cbiAgLXZpZXdQb2ludERvd24gVklFV1BPSU5URE9XTlxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGRvd25zdHJlYW0gcmVnaW9ucyBpbmNsdWRlZCBmb3IgdGhlIGFnZ3JlYWdlZCB2aWV3IHBvaW50cyBhbmFseXNpcy5cbiAgICAgICAgICAgICAgICAgICAgICAgIERlZmF1bHQgaXMgMTAwMDAwIGJwLlxuICAtdmlld1BvaW50QnMgVklFV1BPSU5UQlNcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbnRhY3QgbWF0cml4IGJpbiBzaXplIGZvciB2aWV3IHBvaW50cyBoZWF0bWFwLiBEZWZhdWx0IGlzIDEwMDAgYnAuIFxuICAtdmlld1BvaW50X25vcm0gICAgICAgV2hldGhlciB0byBub3JtYWxpemUgdGhlIHN1Yi1tYXRyaXggZm9yIGVhY2ggbG9vcCBhcyBkaXZpZGUgdGhlIG1lYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIFBFVHMgZm9yIHRoZSBtYXRyaXguIERlZmF1bHQgaXMgbm90LlxuICAtbG9vcHMgTE9PUEYgICAgICAgICAgVGhlIF9sb29wLnR4dCBmaWxlIGdlbmVyYXRlZCBieSBjTG9vcHMyIGZvciBsb29wcy1jZW50cmljXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2dyZWdhdGlvbiBhbmFseXNpcy4gVGhlIGZpbGUgZmlyc3QgOCBjb2x1bW5zIGFyZSBuZWNlc3NhcnkuXG4gIC1sb29wX2V4dCBMT09QX0VYVCAgICBUaGUgbmVhcmJ5IHJlZ2lvbnMgaW5jbHVkZWQgdG8gcGxvdCBpbiB0aGUgaGVhdG1hcCBhbmQgY2FsY3VsYXRpb24gb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgIGVucmljaG1lbnQgZm9yIGFnZ3JlZ2F0aW9uIGxvb3AgYW5hbHlzaXMsIGRlZmF1bHQgaXMgMTAsIHNob3VsZCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbiBudW1iZXIuXG4gIC1sb29wX2N1dCBMT09QX0NVVCAgICBEaXN0YW5jZSBjdXRvZmYgZm9yIGxvb3BzIHRvIGZpbHRlci4gRGVmYXVsdCBpcyAwLlxuICAtbG9vcF9ub3JtICAgICAgICAgICAgV2hldGhlciB0byBub3JtYWxpemUgdGhlIHN1Yi1tYXRyaXggZm9yIGVhY2ggbG9vcCBhcyBkaXZpZGUgdGhlIG1lYW5cbiAgICAgICAgICAgICAgICAgICAgICAgIFBFVHMgZm9yIHRoZSBtYXRyaXggKGV4Y2VwdCB0aGUgbG9vcCByZWdpb24pLiBEZWZhdWx0IGlzIG5vdC5cbiAgLXR3b0FuY2hvcnMgVFdPQU5DSE9SU0ZcbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBzaW1pbGFyIF9sb29wLnR4dCBmaWxlIGdlbmVyYXRlZCBieSBjTG9vcHMyIGZvciB0d28gYW5jaG9yc1xuICAgICAgICAgICAgICAgICAgICAgICAgYWdncmVnYXRpb24gYW5hbHlzaXMuIFRoZSBmaWxlIGZpcnN0IDggY29sdW1ucyBhcmUgbmVjZXNzYXJ5LlxuICAtdHdvQW5jaG9yX2V4dCBUV09BTkNIT1JfRVhUXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgbmVhcmJ5IHJlZ2lvbnMgb2YgZm9sZCBpbmNsdWRlZCB0byBwbG90IGluIGhlYXRtYXAuXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWZhdWx0IGlzIDAuMS5cbiAgLXR3b0FuY2hvcl92bWluIFRXT0FOQ0hPUl9WTUlOXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgbWluaW11bSB2YWx1ZSBzaG93biBpbiB0aGUgZG9tYWluIGhlYXRtYXAgYW5kIGNvbG9yYmFyLlxuICAtdHdvQW5jaG9yX3ZtYXggVFdPQU5DSE9SX1ZNQVhcbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtYXhtdW0gdmFsdWUgc2hvd24gaW4gdGhlIGRvbWFpbiBoZWF0bWFwIGFuZCBjb2xvcmJhci5cbiAgLWRvbWFpbnMgRE9NQUlORiAgICAgIFRoZSAuYmVkIGZpbGUgYW5ub3RhdGVkIHRoZSBkb21haW5zIHN1Y2ggYXMgVEFEcyBmb3IgYWdncmVnYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWlucy1jZW50cmljIGFuYWx5c2lzLlxuICAtZG9tYWluX2V4dCBET01BSU5fRVhUXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgbmVhcmJ5IHJlZ2lvbnMgb2YgZm9sZCBpbmNsdWRlZCB0byBwbG90IGluIGhlYXRtYXAgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWN1bGF0aW9uIG9mIGVucmljaG1lbnQsIGRlZmF1bHQgaXMgMC41LlxuICAtZG9tYWluX3ZtaW4gRE9NQUlOX1ZNSU5cbiAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBtaW5pbXVtIHZhbHVlIHNob3duIGluIHRoZSBkb21haW4gaGVhdG1hcCBhbmQgY29sb3JiYXIuXG4gIC1kb21haW5fdm1heCBET01BSU5fVk1BWFxuICAgICAgICAgICAgICAgICAgICAgICAgVGhlIG1heG11bSB2YWx1ZSBzaG93biBpbiB0aGUgZG9tYWluIGhlYXRtYXAgYW5kIGNvbG9yYmFyLlxuICAtMUQgICAgICAgICAgICAgICAgICAgV2hldGhlciB0byBwbG90IHRoZSBwaWxldXAgMUQgc2lnbmFsIGZvciBhZ2dyZWdhdGVkIGxvb3BzLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIGFnZ3JlZ2F0ZWQgdmlldyBwb2ludHMgb3IgYWdncmVnYXRlZCBkb21haW5zLiBEZWZhdWx0IGlzIG5vdC5cbiAgLWJ3cyBCV1MgICAgICAgICAgICAgIEJpZ1dpZyB0cmFja3MgdG8gcGxvdCBhYm92ZSB0aGUgYWdncmVnYXRlZCBsb29wcyBoZWF0bWFwIChvciB1bmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGFnZ3JlZ2F0ZWQgZG9tYWlucyBoZWF0bWFwKSwgdHJhY2sgbmFtZSB3aWxsIGJlIGluZmVycmVkIGZyb20gZmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSwgZm9yIGV4YW1wbGUgYS5idyxiLmJ3LGMuYncuIFxuICAtc2tpcFplcm9zICAgICAgICAgICAgV2hldGhlciB0byByZW1vdmUgYWxsIDAgcmVjb3Jkcy4gRGVmYXVsdCBpcyBub3QuXG5cbmBgYFxuXG4tLS0tLS1cbiMjIyAxNy4gUXVhbnRpZmljYXRpb24gb2YgcGVha3MsIGxvb3BzIGFuZCBkb21haW5zXG5SdW4gKipjTG9vcHMyIHF1YW50IC1oKiogdG8gc2VlIGRldGFpbHMuXG5gYGBcblF1YW50aWZ5IHRoZSBwZWFrcywgbG9vcHMgYW5kIGRvbWFpbnMuICBUaGUgb3V0cHV0IGZpbGUgd2lsbCBiZSB0aGUgc2FtZSBhc1xub3V0cHV0cyBvZiBjYWxsUGVha3MsIGNhbGxMb29wcyBhbmQgY2FsbERvbWFpbnMuXG5cbkV4YW1wbGVzOlxuICAgIDEuIHF1YW50aWZ5IHBlYWtzIFxuICAgICAgICBjTG9vcHMyIHF1YW50IC1kIHRlc3QgLXBlYWtzIHBlYWtzLmJlZCAtbyB0ZXN0IFxuXG4gICAgMi4gcXVhbnRpZnkgbG9vcHMgXG4gICAgICAgIGNMb29wczIgcXVhbnQgLWQgdGVzdCAtbG9vcHMgdGVzdF9sb29wcy50eHQgLW8gdGVzdFxuXG4gICAgMy4gcXVhbnRpZnkgZG9tYWlucyBcbiAgICAgICAgY0xvb3BzMiBxdWFudCAtZCB0ZXN0IC1kb21haW5zIHRlc3RfZG9tYWlucy50eHQgLW8gdGVzdFxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgICAgICAgICAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgICAgICAgICBBc3NpZ24gZGF0YSBkaXJlY3RvcnkgZ2VuZXJhdGVkIGJ5IGNMb29wczIgcHJlIHRvIGNhcnJ5IG91dCBhbmFseXNpcy4gXG4gIC1vIEZOT1VUICAgICAgICAgICAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICAgICAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICAgICAgICAgIGF2YWlsYWJsZS4gVG9vIG1hbnkgQ1BVIGNvdWxkIGNhdXNlIG91dC1vZi1tZW1vcnkgcHJvYmxlbSBpZiB0aGVyZSBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgICAgICAgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICA+PWN1dC4gRGVmYXVsdCBpcyAwLCBubyBmaWx0ZXJpbmcuXG4gIC1tY3V0IE1DVVQgICAgICAgICAgICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgICAgICAgICBGb2xsb3dpbmcgYXJlIHN1Yi1jb21tYW5kcyBzcGVjaWZpYyBvcHRpb25zLiBUaGlzIG9wdGlvbiBqdXN0IHNob3dcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLXBlYWtzIFBFQUtGICAgICAgICAgIFRoZSAuYmVkIGZpbGUgZm9yIHBlYWtzLWNlbnRyaWMgcXVhbnRpZmljYXRpb24uXG4gIC1sb29wcyBMT09QRiAgICAgICAgICBUaGUgX2xvb3AudHh0IGZpbGUgZ2VuZXJhdGVkIGJ5IGNMb29wczIgZm9yIGxvb3BzLWNlbnRyaWNcbiAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aWZpY2F0aW9uLCBhcyBsb25nIGFzIHRoZXJlIGFyZSBmaXJzdCA4IGNvbHVtbnMuXG4gIC1kb21haW5zIERPTUFJTkYgICAgICBUaGUgX2RvbWFpbnMudHh0IGZpbGUgZ2VuZXJhdGVkIGJ5IGNMb29wczIgZm9yIGRvbWFpbnMtY2VudHJpY1xuICAgICAgICAgICAgICAgICAgICAgICAgcXVhbnRpZmljYXRpb24sIGFzIGxvbmcgYXMgdGhlcmUgYXJlIGZpcnN0IDMgY29sdW1uc1xuICAtZG9tYWluX2JzIERPTUFJTkJJTlNJWkVcbiAgICAgICAgICAgICAgICAgICAgICAgIENhbmRpZGF0ZSBjb250YWN0IG1hdHJpeCByZXNvbHV0aW9uIChiaW4gc2l6ZSkgdG8gcXVhbnRpZnkgZG9tYWlucywgXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0IGlzIDEwMDAwLiBPbmx5IG9uZSBpbnRlZ2VyIGlzIHN1cHBvcnRlZC5cbiAgLWRvbWFpbl93cyBET01BSU5XSU5TSVpFXG4gICAgICAgICAgICAgICAgICAgICAgICBUaGUgaGFsZiB3aW5kb3cgc2l6ZSB1c2VkIHRvIGNhbGN1bGF0ZSBsb2NhbCBjb3JyZWxhdGlvbiB0byBxdWFudGlmeVxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tYWlucy4gRGVmYXVsdCBpcyA1MDAwMDAgKDUwMGtiKS5cbiAgLWRvbWFpbl9iZGcgICAgICAgICAgIFdoZXRoZXIgdG8gc2F2ZSB0aGUgc2VncmVnYXRpb24gc2NvcmUgYWQgYmVkR3JhcGggZmlsZSwgZGVmYXVsdC5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlzIG5vdC5cbmBgYFxuXG4tLS0tLS1cbiMjIyAxOC4gQW5ub3RhdGlvbiBvZiBsb29wcyB0byBnZW5lcyBcblJ1biAqKmNMb29wczIgYW5hTG9vcHMgLWgqKiB0byBzZWUgZGV0YWlscy5cbmBgYFxuQW5ub3RhdGluZyBsb29wczpcbi0gZmluZCB0aGUgY2xvc2VzdCBUU1MgZm9yIGVhY2ggbG9vcCBhbmNob3JzXG4tIG1lcmdlIHRoZSBsb29wIGFuY2hvcnMgYW5kIGNsYXNzaWZ5IHRoZW0gYXMgZW5oYW5jZXJzIG9yIHByb21vdGVycyBiYXNlZCBvbiBcbiAgZGlzdGFuY2UgdG8gbmVhcmVzdCBUU1Ncbi0gYnVpbGQgdGhlIGludGVyYWN0aW9uIG5ldHdvcmtzIGZvciBtZXJnZWQgYW5jaG9ycyBcbi0gZmluZCB0aGUgYWxsIGludGVyYWN0ZWQgZW5oYW5jZXJzL3Byb21vdGVycyBmb3IgZWFjaCBwcm9tb3RlciAgXG5cbkJhc2ljIG1vZGUgMTogd2l0aCAtZ3RmLCBsb29wcyB3aWxsIGJlIGFubm90YXRlZCBhcyBlbmhhbmNlciBvciBwcm9tb3RlciBiYXNlZCBcbm9uIGRpc3RhbmNlIHRvIG5lYXJlc3QgZ2VuZS4gSWYgYSBhbmNob3Igb3ZlcmxhcHBlZCB3aXRoIHR3by9tdWx0aXBsZSBwcm9tb3RlcnNcbihvZnRlbiBzZWVuIGZvciBjbG9zZSBoZWFkLXRvLWhlYWQgZ2VuZXMpLCBhbGwgd2lsbCBiZSByZXBvcnRlZC4gSWYgbm8gVFNTIFxub3ZlcmxhcHMsIHRoZW4gbmVhcmVzdCBvbmUgd2lsbCBiZSBhc3NpZ25lZC4gIFxuXG5CYXNpYyBtb2RlIDI6IHdpdGggLWd0ZiAtbmV0LCBvdmVybGFwcGVkIGFuY2hvcnMgd2lsbCBiZSBtZXJnZWQgYW5kIGFubm9hdGVkIGFzIFxuZW5oYW5jZXIgb3IgcHJvbW90ZXIgY29uc2lkZXJpbmcgZGlzdGFuY2UgdG8gZ2VuZXMuIEZvciBlYWNoIHByb21vdGVyLCBhbGwgXG5saW5rZWQgZW5oYW5jZXIgYW5kIHByb21vdGVyIHdpbGwgYmUgc2hvd24uIElmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMyBkaXJlY3Qgb3IgXG5pbmRpcmVjdCBlbmhhbmNlcnMgZm9yIGEgcHJvbW90ZXIsIEhJVFMgYWxnb3JpdGhtIHdpbGwgYmUgdXNlZCB0byBpZGVudGlmeSBvbmVcbmh1YiBmb3IgaW5kaXJlY3QgZW5oYW5jZXIgYW5kIG9uZSBodWIgZm9yIGluZGlyZWN0IGVuaGFuY2VyLiBcblxuRXhhbXBsZXM6XG4gICAgMS4gYW5ub3RhdGUgbG9vcHMgZm9yIHRhcmdldCBnZW5lLCBiYXNpYyBtb2RlIDFcbiAgICAgICAgY0xvb3BzMiBhbmFMb29wcyAtbG9vcHMgdGVzdF9sb29wcy50eHQgLWd0ZiBnZW5lY29kZS5ndGZcblxuICAgIDIuIGFubm90YXRlIGxvb3BzIGZvciB0YXJnZXQgdHJhbnNjcmlwdHMgKGFsdGVybmF0aXZlIFRTUyksIGJhc2ljIG1vZGUgMVxuICAgICAgICBjTG9vcHMyIGFuYUxvb3BzIC1sb29wcyB0ZXN0X2xvb3BzLnR4dCAtZ3RmIGdlbmVjb2RlLmd0ZiAtdGlkXG5cbiAgICAzLiBmaW5kIGEgZ2VuZSdzIGFsbCBsaW5rZWQgZW5oYW5jZXIgb3IgcHJvbW90ZXIsIGJhc2ljIG1vZGUgMlxuICAgICAgICBjTG9vcHMyIGFuYUxvb3BzIC1sb29wcyB0ZXN0X2xvb3BzLnR4dCAtZ3RmIGdlbmVjb2RlLmd0ZiAtbmV0XG5cbm9wdGlvbmFsIGFyZ3VtZW50czpcbiAgLWgsIC0taGVscCAgICBzaG93IHRoaXMgaGVscCBtZXNzYWdlIGFuZCBleGl0XG4gIC1kIFBSRURJUiAgICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICAgIE91dHB1dCBkYXRhIGRpcmVjdG9yeSAvIGZpbGUgbmFtZSBwcmVmaXgsIGRlZmF1bHQgaXMgY0xvb3BzMl9vdXRwdXQuXG4gIC1wIENQVSAgICAgICAgQ1BVcyB1c2VkIHRvIHJ1biB0aGUgam9iLCBkZWZhdWx0IGlzIDEsIHNldCAtMSB0byB1c2UgYWxsIENQVXNcbiAgICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgICAgdG9vIG1hbnkgUEVUcy5cbiAgLWN1dCBDVVQgICAgICBEaXN0YW5jZSBjdXRvZmYgdG8gZmlsdGVyIGNpcyBQRVRzLCBvbmx5IGtlZXAgUEVUcyB3aXRoIGRpc3RhbmNlXG4gICAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICAgIEtlZXAgdGhlIFBFVHMgd2l0aCBkaXN0YW5jZSA8PW1jdXQuIERlZmF1bHQgaXMgLTEsIG5vIGZpbHRlcmluZy5cbiAgLXYgICAgICAgICAgICBTaG93IGNMb29wczIgdmVyaXNvbiBudW1iZXIgYW5kIGV4aXQuXG4gIC0tLSAgICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgICAgdmVyc2lvbiBvZiBjTG9vcHMyLlxuICAtbG9vcHMgRkxPT1AgIFRoZSBfbG9vcC50eHQgZmlsZSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBjYWxsTG9vcHMgb3IgY2FsbERpZmZMb29wcy5cbiAgLWd0ZiBHVEYgICAgICBHVEYgZmlsZSBhbm5vdGF0aW9uIGZvciBnZW5lcy5cbiAgLXRpZCAgICAgICAgICBXaGV0aGVyIHRvIHVzZSB0cmFuc2NyaXB0IGlkIGluc3RlYWQgb2YgZ2VuZSBpZCBmb3IgYW5ub3RhdGlvbi4gRGVmYXVsdFxuICAgICAgICAgICAgICAgIGlzIG5vdC5cbiAgLXBkaXMgUERJUyAgICBEaXN0YW5jZSBsaW1pdGF0aW9uIGZvciBhbmNob3IgdG8gbmVhcmVzdCBnZW5lL3RyYW5zY3JpcHQgVFNTIHRvIGRlZmluZVxuICAgICAgICAgICAgICAgIGFzIHByb21vdGVyLiBEZWZhdWx0IGlzIDIwMDAgYnAuXG4gIC1uZXQgICAgICAgICAgV2hldGhlciB0byB1c2UgbmV0d29yayBtZXRob2QgdG8gZmluZCBhbGwgZW5oYW5jZXIvcHJvbW90ZXIgbGlua3MgYmFzZWRcbiAgICAgICAgICAgICAgICBvbiBsb29wcy4gRGVmYXVsdCBpcyBub3QuIEluIHRoaXMgbW9kZSwgb3ZlcmxhcHBlZCBhbmNob3JzIHdpbGwgYmVcbiAgICAgICAgICAgICAgICBtZXJnZWQgYW5kIGFubm90YXRlZCBhcyBlbmhhbmNlci9wcm9tb3RlciwgdGhlbiBmb3IgYSBnZW5lLCBhbGwgbGlua2VkXG4gICAgICAgICAgICAgICAgbm9kZSB3aWxsIGJlIG91dHB1dC5cbiAgLWdhcCBHQVAgICAgICBXaGVuIC1uZXQgaXMgc2V0LCB0aGUgZGlzdGFuY2UgZm9yIGNsb3NlIGFuY2hvcnMgdG8gbWVyZ2UuIERlZmF1bHQgaXMgMS5cblxuYGBgXG5cbi0tLS0tLVxuIyMjIDE5LiBGaW5kIHRhcmdldCBnZW5lcyBvZiBnZW5vbWljIHJlZ2lvbnMgd2l0aCBjTG9vcHMyIGFuYUxvb3BzIG91dHB1dFxuUnVuICoqY0xvb3BzMiBmaW5kVGFyZ2V0cyAtaCoqIHRvIHNlZSBkZXRhaWxzLlxuYGBgXG5GaW5kIHRhcmdldCBnZW5lcyBvZiBnZW5vbWljIHJlZ2lvbnMgKHBlYWtzLCBTTlBzKSB0aHJvdWdoIGVuaGFuY2VyLXByb21vdGVyIFxubmV0d29ya3MuIE91dHB1dCBmcm9tIGNMb29wczIgYW5hTG9vcHMgd2l0aCBzdWZmaXggb2YgX2VwX25ldC5zaWYgYW5kXG5fdGFyZ2V0cy50eHQgYXJlIG5lZWRlZC5cblxuRXhhbXBsZXM6XG4gICAgMS4gZmluZCB0YXJnZXQgZ2VuZXMgb2YgcGVha3MvU05Qc1xuICAgICAgICBjTG9vcHMyIGZpbmRUYXJnZXRzIC1uZXQgdGVzdF9lcF9uZXQuc2lmIC10ZyB0ZXN0X3RhcmdldHMudHh0IFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLWJlZCBHV0FTLmJlZCAtbyB0ZXN0IFxuXG5vcHRpb25hbCBhcmd1bWVudHM6XG4gIC1oLCAtLWhlbHAgIHNob3cgdGhpcyBoZWxwIG1lc3NhZ2UgYW5kIGV4aXRcbiAgLWQgUFJFRElSICAgQXNzaWduIGRhdGEgZGlyZWN0b3J5IGdlbmVyYXRlZCBieSBjTG9vcHMyIHByZSB0byBjYXJyeSBvdXQgYW5hbHlzaXMuIFxuICAtbyBGTk9VVCAgICBPdXRwdXQgZGF0YSBkaXJlY3RvcnkgLyBmaWxlIG5hbWUgcHJlZml4LCBkZWZhdWx0IGlzIGNMb29wczJfb3V0cHV0LlxuICAtcCBDUFUgICAgICBDUFVzIHVzZWQgdG8gcnVuIHRoZSBqb2IsIGRlZmF1bHQgaXMgMSwgc2V0IC0xIHRvIHVzZSBhbGwgQ1BVc1xuICAgICAgICAgICAgICBhdmFpbGFibGUuIFRvbyBtYW55IENQVSBjb3VsZCBjYXVzZSBvdXQtb2YtbWVtb3J5IHByb2JsZW0gaWYgdGhlcmUgYXJlXG4gICAgICAgICAgICAgIHRvbyBtYW55IFBFVHMuXG4gIC1jdXQgQ1VUICAgIERpc3RhbmNlIGN1dG9mZiB0byBmaWx0ZXIgY2lzIFBFVHMsIG9ubHkga2VlcCBQRVRzIHdpdGggZGlzdGFuY2VcbiAgICAgICAgICAgICAgPj1jdXQuIERlZmF1bHQgaXMgMCwgbm8gZmlsdGVyaW5nLlxuICAtbWN1dCBNQ1VUICBLZWVwIHRoZSBQRVRzIHdpdGggZGlzdGFuY2UgPD1tY3V0LiBEZWZhdWx0IGlzIC0xLCBubyBmaWx0ZXJpbmcuXG4gIC12ICAgICAgICAgIFNob3cgY0xvb3BzMiB2ZXJpc29uIG51bWJlciBhbmQgZXhpdC5cbiAgLS0tICAgICAgICAgRm9sbG93aW5nIGFyZSBzdWItY29tbWFuZHMgc3BlY2lmaWMgb3B0aW9ucy4gVGhpcyBvcHRpb24ganVzdCBzaG93XG4gICAgICAgICAgICAgIHZlcnNpb24gb2YgY0xvb3BzMi5cbiAgLW5ldCBGTkVUICAgVGhlIF9lcF9uZXQuc2lmIGZpbGUgZ2VuZXJhdGVkIGJ5IGNMb29wczIgYW5hTG9vcHMuXG4gIC10ZyBGVEcgICAgIFRoZSBfdGFyZ2V0cy50eHQgZmlsZSBnZW5lcmF0ZWQgYnkgY0xvb3BzMiBhbmFMb29wcy5cbiAgLWJlZCBGQkVEICAgRmluZCB0YXJnZXQgZ2VuZXMgZm9yIHJlZ2lvbnMsIHN1Y2ggYXMgYW5jaG9ycywgU05QcyBvciBwZWFrcy5cblxuYGBgXG5cbi0tLS0tLVxuLS0tLS0tXG4jIyBFeHRlbmRlZCBBbmFseXNpcyBBcHBsaWNhdGlvbiBTY3JpcHRzXG5UaGUgZm9sbG93aW5nIGFuYWx5c2lzIGFwcGxpY2F0aW9uIHNjcmlwdHMgYXJlIGF2YWlsYWJsZSB3aGVuIGNMb29wczIgaXMgaW5zdGFsbGVkLiBUaGUgbWFqb3JpdHkgb2YgdGhlbSBjYW4gYmUgaW5kZXBlbmRlbnRseSBydW4uIFRoZSAtaCBvcHRpb24gY2FuIHNob3cgZXhhbXBsZSB1c2FnZXMgYW5kIGRldGFpbHMgb2YgcGFyYW1ldGVycy4gU29tZSBvZiB0aGVtIHdpbGwgYmUgaW50ZWdyYXRlZCBpbnRvIGNMb29wcyBzdWItcHJvZ3JhbW1lcyBpZiB3ZWxsIHRlc3RlZCBhbmQgZnJlcXVlbnRseSB1c2VkLiBNb3JlIHdpbGwgYmUgYWRkZWQuIFxuXG4jIyMgRmlsZSBGb3JtYXQgQ29udmVyc2lvblxuLSBbaGljcHJvMmJlZHBlLnB5XShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyL2Jsb2IvbWFzdGVyL3NjcmlwdHMvaGljcHJvMmJlZHBlLnB5KSA6IGNvbnZlcnQgSGlDLVBybyBvdXRwdXQgYWxsVmFsaWRQYWlycyBmaWxlIHRvIEJFRFBFIGZpbGUgYXMgaW5wdXQgb2YgY0xvb3BzMi4gICBcbi0gW2p1aWNlckxvbmcyYmVkcGUucHldKGh0dHBzOi8vZ2l0aHViLmNvbS9ZYXFpYW5nQ2FvL2NMb29wczIvYmxvYi9tYXN0ZXIvc2NyaXB0cy9qdWljZXJMb25nMmJlZHBlLnB5KTogY29udmVydCBKdWljZXIgb3V0cHV0IGxvbmcgZm9ybWF0IGludGVyYWN0aW9uIGZpbGUgdG8gQkVEUEUgZmlsZSBhcyBpbnB1dCBvZiBjTG9vcHMyLiAgIFxuLSBbZ2V0QmVkcGVGQmVkLnB5XShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyL2Jsb2IvbWFzdGVyL3NjcmlwdHMvZ2V0QmVkcGVGQmVkLnB5KTogY29udmVydCBzaW5nbGUtZW5kIHJlYWRzIGluIEJFRCBmb3JtYXQgdG8gcGFpcmVkLWVuZCByZWFkcyBpbiBCRURQRSBmb3JtYXQgd2l0aCBleHBlY3RlZCBmcmFnbWVudCBzaXplIGFzIGlucHV0IG9mIGNMb29wczIgdG8gY2FsbCBwZWFrcy4gICAgXG5cbi0tLVxuIyMjIEFuYWx5c2lzIHdpdGhvdXQgcGxvdFxuLSBbZ2V0REkucHldKGh0dHBzOi8vZ2l0aHViLmNvbS9ZYXFpYW5nQ2FvL2NMb29wczIvYmxvYi9tYXN0ZXIvc2NyaXB0cy9nZXRESS5weSk6IGNhbGN1bGF0ZSB0aGUgW0RpcmVjdGlvbmFsaXR5IEluZGV4XShodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3BtYy9hcnRpY2xlcy9QTUMzMzU2NDQ4LykgYXMgPGltZyBhbGlnbj1cImNlbnRlclwiIHNyYz1cImh0dHBzOi8vbGF0ZXguY29kZWNvZ3MuY29tL3N2Zy5sYXRleD9cXExhcmdlJnNwYWNlO0RJX3t4fT1cXGZyYWN7KEItQSl9e3xCK0F8fSpcXGZyYWN7KEEtRSleMisoQi1FKV4yfXtFfSxFPVxcZnJhY3tBK0J9ezJ9XCIvPiwgd2hlcmUgKip4KiogaXMgdGhlIGJpbiBhbmQgKipBKiogaXMgdGhlIGludGVyYWN0aW9uIHJlYWRzIHdpdGhpbiB0aGUgcmVnaW9uIGZyb20gc3BlY2lmaWMgdXBzdHJlYW0gdG8gYmluICoqeCoqLCBhbmQgKipCKiogaXMgdGhlIGRvd25zdHJlYW0gcmVhZHMuICBcblxuLSBbZ2V0RlJpRi5weV0oaHR0cHM6Ly9naXRodWIuY29tL1lhcWlhbmdDYW8vY0xvb3BzMi9ibG9iL21hc3Rlci9zY3JpcHRzL2dldEZSaUYucHkpOiBjYWxjdWxhdGUgdGhlICoqRioqcmFjdGlvbiBvZiAqKlIqKmVhZHMgKippKipuICoqRioqZWF0dXJlcyAoRlJpRiksIHRoZSBmZWF0dXJlcyBjb3VsZCBiZSBkb21haW5zIGFuZCBwZWFrcyBhbm5vdGF0ZWQgd2l0aCAuYmVkIGZpbGUgb3IgZG9tYWlucy9zdHJpcGVzL2xvb3BzIHdpdGggLnR4dCBmaWxlIHN1Y2ggYXMgdGhlIFxcX2xvb3AudHh0IGZpbGUuXG5cbi0gW2dldElTLnB5XShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyL2Jsb2IvbWFzdGVyL3NjcmlwdHMvZ2V0SVMucHkpOiBjYWxjdWxhdGUgdGhlIFtpbnN1bGF0aW9uIHNjb3JlXShodHRwczovL3d3dy5uYXR1cmUuY29tL2FydGljbGVzL25hdHVyZTIwMTU4KSB3aXRoIGEgbGl0dGxlIG1vZGlmaWNhdGlvbiBmb3IgdGhlIGRhdGEgd2l0aCBvdXRwdXQgb2YgYSBiZWRHcmFwaCBmaWxlLCB0aGUgbWF0aCBmb3JtdWxhIHVzZWQgaXMgPGltZyBhbGlnbj1cImNlbnRlclwiIHNyYz1cImh0dHBzOi8vbGF0ZXguY29kZWNvZ3MuY29tL3N2Zy5sYXRleD9cXExhcmdlJnNwYWNlO0lTX3t4fT0tbG9nMihcXGZyYWN7SSh4LXMueCtzKS1JKHgseCtzKSxJKHgtcyx4KX17SSh4LXMseCtzKX0pXCIgLz4sIHdoZXJlICoqKngqKiogaXMgdGhlIGdlbm9taWMgbG9jYXRpb24sIHdoaWNoIGNhbiBiZSBiaW5zIG9yIGV4YWN0IGJhc2UgcGFpciwgKioqSSh4LXMseCtzKSoqKiBpcyB0aGUgaW50ZXJhY3Rpb25zL1BFVHMgb2JzZXJ2ZWQgaW4gdGhlIHJlZ2lvbiBmcm9tICoqKngtcyoqKiB0byAqKip4K3MqKiosIGFuZCAqKipzKioqIHNob3VsZCBiZSBzZXQgYSBsaXR0bGUgbGFyZ2UsIHN1Y2ggYXMgMTAwa2IgdG8gb2JzZXJ2ZSBhIGdvb2QgZml0IGZvciB0aGUgaW5zdWxhdGlvbiBzY29yZSBhbmQgVEFEIGJvdW5kYXJpZXMuICBcblxuLSBbZ2V0TG9jYWxJRFMucHldKGh0dHBzOi8vZ2l0aHViLmNvbS9ZYXFpYW5nQ2FvL2NMb29wczIvYmxvYi9tYXN0ZXIvc2NyaXB0cy9nZXRjTG9jYWxJRFMucHkpOiBjYWxjdWxhdGUgdGhlIGxvY2FsIGludGVyYWN0aW9uIGRlbnNpdHkgc2NvcmUgZm9yIHRoZSBkYXRhIHdpdGggb3V0cHV0IGEgYmVkR3JhcGggZmlsZSwgdGhlIG1hdGggZm9ybXVsYSB1c2VkIGlzIDxpbWcgYWxpZ249XCJjZW50ZXJcIiBzcmM9XCJodHRwczovL2xhdGV4LmNvZGVjb2dzLmNvbS9zdmcubGF0ZXg/XFxMYXJnZSZzcGFjZTtJRFNfe3h9PVxcc3VtX3tpPS01fV57NX17XFxmcmFje0koeCx4X3tpfSl9e059fSxpXFxuZXEwXCIgLz4sIHdoZXJlICoqKngqKiogaXMgdGhlIGdlbm9taWMgbG9jYXRpb24gZm9yIHRoZSB0YXJnZXQgYmluLCAqKipOKioqIGlzIHRoZSB0b3RhbCBQRVRzIGluIHRoZSB0YXJnZXQgY2hyb21vc29tYWwsICoqKkkoeCx4X2kpKioqIGlzIHRoZSBvYnNlcnZlZCBQRVRzIGxpbmtpbmcgdGhlIHJlZ2lvbiBiaW4gKioqeCoqKiBhbmQgdGhlIGl0aCBuZWFyYnkgYmluIG9mIHRoZSBzYW1lIHNpemUuIFxuXG4tIFtnZXRQRVRzQW5vLnB5XShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyL2Jsb2IvbWFzdGVyL3NjcmlwdHMvZ2V0UEVUc0Fuby5weSk6IGdldCB0aGUgUEVUcyByYXRpbyBvZiBlbmhhbmNlci1wcm9tb3RlciwgZW5oYW5jZXItZW5oYW5jZXIsIHByb21vdGVyLXByb21vdGVyLCBlbmhhbmNlci1ub25lLCBwcm9tb3Rlci1ub25lLCBub25lLW5vbmUgaW50ZXJhY3Rpb25zLlxuXG4tIFt0cmFjUHJlLnB5XShodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyL2Jsb2IvbWFzdGVyL3NjcmlwdHMvdHJhY1ByZS5weSk6IHByZS1wcm9jZXNzIHRoZSByYXcgcmVhZHMgb2YgRkFTVFEgZmlsZXMgb2YgVHJhYy1sb29waW5nIGRhdGEgdG8gdGhlIHJlZmVyZW5jZSBnZW5vbWUgYW5kIG9idGFpbiB0aGUgdW5pcXVlIFBFVHMgd2l0aCBxdWFsaXR5IGNvbnRyb2wgcmVzdWx0cy5cblxuLSBbdHJhY1ByZTIucHldKGh0dHBzOi8vZ2l0aHViLmNvbS9ZYXFpYW5nQ2FvL2NMb29wczIvYmxvYi9tYXN0ZXIvc2NyaXB0cy90cmFjUHJlMi5weSk6IHByZS1wcm9jZXNzIHRoZSByYXcgcmVhZHMgb2YgRkFTVFEgZmlsZXMgb2YgSGktVHJBQyBkYXRhIHRvIHRoZSByZWZlcmVuY2UgZ2Vub21lIGFuZCBvYnRhaW4gdGhlIHVuaXF1ZSBQRVRzIHdpdGggcXVhbGl0eSBjb250cm9sIHJlc3VsdHMuXG5cbi0tLS0tXG4tLS0tLS1cbiMjIElucHV0LCBJbnRlcm1lZGlhdGUsIE91dHB1dCBGaWxlc1xuLSBbLmJlZHBlXSgjLmJlZHBlKVxuLSBbLml4eV0oIy5peHkpXG4tIFtfcGVha3MudHh0XSgjX3BlYWtzLnR4dClcbi0gW19sb29wcy50eHRdKCNfbG9vcHMudHh0KVxuLSBbX2Rsb29wcy50eHRdKCNfZGxvb3BzLnR4dClcbi0gW19kb21haW5zLnR4dF0oI19kb21haW5zLnR4dClcblxuLS0tLVxuPGEgbmFtZT1cIi5iZWRwZVwiPjwvYT5cbiMjIyBJbnB1dCAuYmVkcGUgZmlsZSBcbk1hcHBlZCBQRVRzIGluIFtCRURQRSBmb3JtYXRdKGh0dHA6Ly9iZWR0b29scy5yZWFkdGhlZG9jcy5pby9lbi9sYXRlc3QvY29udGVudC9nZW5lcmFsLXVzYWdlLmh0bWwpLCBjb21wcmVzc2VkIGZpbGVzIHdpdGggZ3ppcCBhcmUgYWxzbyBhY2NlcHRlZCwgZm9sbG93aW5nIGNvbHVtbnMgYXJlIG5lY2Vzc2FyeTogY2hyb20xICgxc3QpLHN0YXJ0MSAoMiksZW5kMSAoMyksY2hyb20yICg0KSxzdGFydDIgKDUpLGVuZDIgKDYpLHN0cmFuZDEgKDkpLHN0cmFuZDIgKDEwKS4gRm9yIHRoZSBjb2x1bW4gb2YgbmFtZSBvciBzY29yZSwgXCIuXCIgaXMgYWNjZXB0ZWQuIENvbHVtbnMgYXJlIHNlcGFyYXRlZCBieSBcIlxcdFwiLlxuRm9yIGV4YW1wbGUgYXMgZm9sbG93aW5nOlxuYGBgXG5jaHIxXHQ5OTQ1XHQxMDA5NVx0Y2hyMVx0MjQ4OTQ2MjE2XHQyNDg5NDYzNjZcdC5cdC5cdCtcdCtcbmNocjFcdDEwMDM0XHQxMDE4NFx0Y2hyMVx0MTgwOTg3XHQxODExMzdcdC5cdC5cdCtcdC1cbmNocjFcdDEwMjg2XHQxMDQzNlx0Y2hyMVx0MTgxMTAzXHQxODEyNTNcdC5cdC5cdCtcdC1cbmNocjFcdDEwMjg2XHQxMDQzNlx0Y2hyMTFcdDE4MTEwM1x0MTgxMjUzXHQuXHQuXHQrXHQtXG5jaHIxMVx0MTAyODZcdDEwNDM2XHRjaHIxXHQxODExMDNcdDE4MTI1M1x0Llx0Llx0K1x0LVxuLi4uXG5gYGBcblxuLS0tLS0tXG48YSBuYW1lPVwiLml4eVwiPjwvYT5cbiMjIyBJbnRlcm1lZGlhdGUgLml4eSBmaWxlXG5udW1weS5hcnJheSBvZiAoeCx5KSBzYXZlZCB0byBbam9ibGliLmR1bXBdKGh0dHBzOi8vam9ibGliLnJlYWR0aGVkb2NzLmlvL2VuL2xhdGVzdC9nZW5lcmF0ZWQvam9ibGliLmR1bXAuaHRtbCkgZm9yIGZhc3QgYWNjZXNzIG9mIHRoZSBpbnRlcmFjdGlvbiBFUFRzIGFuZCBjb250YWN0IG1hdHJpeCBhdCBhbnkgcmVzb2x1dGlvbiwgbmVhcmx5IGFsbCBjTG9vcHMyIHJlbGF0ZWQgYW5hbHlzaXMgYXJlIGJhc2VkIG9uIHRoaXMgZmlsZSB0eXBlLlxuYGBgXG4xMDA5OTAyNVx0MTAwOTkwNDhcbjM5OTQzODg5XHQzOTk0Mzg5MFxuMTgzOTEwMDdcdDE4MzkxODUzXG4zNTUwMjk1MVx0MzU1MDI5NTFcbjEwMDYxNTU1XHQxMDA2MTU1N1xuLi4uXG5gYGBcblxuLS0tLS0tXG48YSBuYW1lPVwiX3BlYWtzLnR4dFwiPjwvYT5cbiMjIyBPdXRwdXQgXFxfcGVha3MudHh0IGZpbGUgXG5jb2x1bW4gfCBuYW1lIHwgZXhwbGFuYXRpb25cbi0tLS0tLSB8IC0tLS0gfCAtLS0tLS0tLS0tLS1cbjB0aCB8IHBlYWtJZCB8IGlkIGZvciBhIHBlYWssIGZvciBleGFtcGxlIHBlYWtcXF9jaHIxLWNocjEtMVxuMXRoIHwgY2hyb20gfCBjaHJvbW9zb21hbCBmb3IgdGhlIHBlYWsgXG4ydGggfCBzdGFydCB8IGdlbm9taWMgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnQgc2l0ZVxuM3RoIHwgZW5kIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBlbmQgc2l0ZSBcbjR0aCB8IHN1bW1pdCB8IGdlbm9taWMgY29vcmRpbmF0ZSBvZiBwZWFrIHN1bW1pdFxuNXRoIHwgbGVuZ3RoIHwgbGVuZ3RoIG9mIHRoZSBwZWFrXG42dGggfCBjb3VudHMgfCBvYnNlcnZlZCByZWFkcyBudW1iZXIgaW4gdGhlIHBlYWsgXG43dGggfCBSUEtNIHwgUlBLTSBmb3IgdGhlIHJlYWRzIGRlbnNpdHkgaW4gdGhlIHBlYWtcbjh0aCB8IGVucmljaG1lbnRTY29yZSB8IGVucmljaG1lbnQgc2NvcmUgZm9yIHRoZSBwZWFrLCBjYWxjdWxhdGVkIGJ5IG9ic2VydmVkIFBFVHMgbnVtYmVyIGRpdmlkZWQgYnkgdGhlIG1lYW4gUEVUcyBudW1iZXIgb2YgbmVhcmJ5IDEwIGZvbGQgYW5kIDIwIGZvbGQgcmVnaW9uc1xuOXRoIHwgcG9pc3NvblB2YWx1ZSB8IFBvaXNzb24gdGVzdCBwLXZhbHVlIGZvciB0aGUgbG9vcCBhZnRlciBCb25mZXJyb25pIGNvcnJlY3Rpb25cbjEwdGggfCBjb250cm9sQ291bnRzfCBpZiBjb250cm9sIGRhdGEgc3VjaCBhcyBpbnB1dC9JZ0cgaXMgYXNzaWduZWQsIHRoZSBvYnNlcnZlZCByZWFkcyBudW1iZXIgaW4gcGVhayByZWdpb24gZm9yIGNvbnRyb2wgZGF0YVxuMTF0aCB8IGNvbnRyb2xSUEtNIHwgaWYgY29udHJvbCBkYXRhIGFzc2lnbmVkLCBSUEtNIGZvciB0aGUgcmVhZHMgZGVuc2l0eSBpbiB0aGUgcGVhayByZWdpb24gZm9yIGNvbnRyb2wgZGF0YVxuMTJ0aCB8IGNvbnRyb2xTY2FsZWRDb3VudCB8IGlmIGNvbnRyb2wgZGF0YSBhc3NpZ25lZCwgdGhlIHNjYWxlZCBleHBlY3RlZCBjb3VudHMgdXNlZCBmb3IgUG9pc3NvbiB0ZXN0L2VucmljaG1lbnQgc2NvcmUgYWdhaW5zdCBjb250cm9sIGRhdGFcbjEzdGggfCBlbnJpY2htZW50U2NvcmVWc0NvbnRyb2wgfCBpZiBjb250cm9sIGRhdGEgYXNzaWduZWQsIGVucmljaG1lbnQgc2NvcmUgb2YgdGFyZ2V0IHZzLiBjb250cm9sXG4xNHRoIHwgcG9pc3NvblB2YWx1ZVZzQ29udHJvbCB8IGlmIGNvbnRyb2wgZGF0YSBhc3NpZ25lZCwgUG9pc3NvbiB0ZXN0IHAtdmFsdWUgb2YgdGFyZ2V0IHZzLiBjb250cm9sIGFmdGVyIEJvbmZlcnJvbmkgY29ycmVjdGlvblxuMTV0aCB8IHNpZ25pZmljYW50IHwgMSBvciAwLCAxIG1lYW5zIHdlIHRoaW5rIHRoZSBwZWFrIGlzIHNpZ25pZmljYW50IGNvbXBhcmVkIHRvIGxvY2FsIGJhY2tncm91bmQgYW5kIGNvbnRyb2wgKGlmIGFzc2lnbmVkKVxuXG4tLS0tLS1cbjxhIG5hbWU9XCJfbG9vcHMudHh0XCI+PC9hPlxuIyMjIE91dHB1dCBcXF9sb29wcy50eHQgZmlsZSBcbmNvbHVtbiB8IG5hbWUgfCBleHBsYW5hdGlvblxuLS0tLS0tIHwgLS0tLSB8IC0tLS0tLS0tLS0tLVxuMHRoIHwgbG9vcElkIHwgaWQgZm9yIGEgbG9vcCwgZm9yIGV4YW1wbGUgbG9vcFxcX2NocjEtY2hyMS0xXG4xdGggfCBjaHJvbUEgfCBjaHJvbW9zb21hbCBmb3IgdGhlIGxvb3AgZmlyc3QgYW5jaG9yXG4ydGggfCBzdGFydEEgfCBnZW5vbWljIGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0IHNpdGUgZm9yIHRoZSBmaXJzdCBhbmNob3JcbjN0aCB8IGVuZEEgfCBnZW5vbWljIGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBzaXRlIGZvciB0aGUgZmlyc3QgYW5jaG9yXG40dGggfCBjaHJvbUIgfCBjaHJvbW9zb21hbCBmb3IgdGhlIGxvb3Agc2Vjb25kIGFuY2hvclxuNXRoIHwgc3RhcnRCIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBzdGFydCBzaXRlIGZvciB0aGUgc2Vjb25kIGFuY2hvclxuNnRoIHwgZW5kQiB8IGdlbm9taWMgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHNpdGUgZm9yIHRoZSBzZWNvbmQgYW5jaG9yXG43dGggfCBkaXN0YW5jZSB8IGRpc3RhbmNlIChicCkgYmV0d2VlbiB0aGUgY2VudGVycyBvZiB0aGUgYW5jaG9ycyBmb3IgdGhlIGxvb3Bcbjh0aCB8IGNlbnRlckEgfCBnZW5vbWljIGNvb3JkaW5hdGUgb2YgdGhlIGNlbnRlciBzaXRlIGZvciB0aGUgZmlyc3QgYW5jaG9yXG45dGggfCBjZW50ZXJCIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgc2l0ZSBmb3IgdGhlIHNlY29uZCBhbmNob3JcbjEwdGggfCByZWFkc0EgfCBvYnNlcnZlZCBQRVRzIG51bWJlciBmb3IgdGhlIGZpcnN0IGFuY2hvclxuMTF0aCB8IHJlYWRzQiB8IG9ic2VydmVkIFBFVHMgbnVtYmVyIGZvciB0aGUgc2Vjb25kIGFuY2hvclxuMTJ0aCB8IGNpcyB8IHdoZXRoZXIgdGhlIGxvb3AgaXMgYSBpbnRyYS1jaHJvbW9zb21hbCBsb29wIChjaXMpXG4xM3RoIHwgUEVUcyB8IG9ic2VydmVkIFBFVHMgbnVtYmVyIGxpbmtpbmcgdGhlIHR3byBhbmNob3JzXG4xNHRoIHwgZGVuc2l0eSB8IHNpbWlsYXJseSB0byB0aGF0IG9mIFJQS00gKHJlYWRzIHBlciBraWxvYmFzZSBwZXIgbWlsbGlvbik6PGltZyBhbGlnbj1cImNlbnRlclwiIHNyYz1cImh0dHBzOi8vbGF0ZXguY29kZWNvZ3MuY29tL3N2Zy5sYXRleD9cXExhcmdlJnNwYWNlO2RlbnNpdHk9XFxmcmFje3J9e05cXHRpbWVzKGFuY2hvckxlbmd0aEErYW5jaG9yTGVuZ3RoQil9XFx0aW1lczEwXjlcIiAvPlxuMTV0aCB8IGVucmljaG1lbnRTY29yZSB8IGVucmljaG1lbnQgc2NvcmUgZm9yIHRoZSBsb29wLCBjYWxjdWxhdGVkIGJ5IG9ic2VydmVkIFBFVHMgbnVtYmVyIGRpdmlkZWQgYnkgdGhlIG1lYW4gUEVUcyBudW1iZXIgb2YgbmVhcmJ5IHBlcm11dGF0ZWQgcmVnaW9uc1xuMTZ0aCB8IFAyTEwgfCBwZWFrIHRvIHRoZSBsb3dlciBsZWZ0LCBjYWxjdWxhdGVkIHNpbWlsYXIgdG8gdGhhdCBvZiBKdWljZXJcbjE3dGggfCBGRFIgfCBmYWxzZSBkaXNjb3ZlcnkgcmF0ZSBmb3IgdGhlIGxvb3AsIGNhbGN1bGF0ZWQgYXMgdGhlIG51bWJlciBvZiBwZXJtdXRhdGVkIHJlZ2lvbnMgdGhhdCB0aGVyZSBhcmUgbW9yZSBvYnNlcnZlZCBQRVRzIHRoYW4gdGhlIHJlZ2lvbiAgXG4xOHRoIHwgYmlub21hbFB2YWx1ZSB8IGJpbm9tYWwgdGVzdCBwLXZhbHVlIGZvciB0aGUgbG9vcCwgdXBkYXRlZCBjYWN1bGF0aW9uLCBkaWZmZXJlbnQgZnJvbSBjTG9vcHNcbjE5dGggfCBoeXBlcmdlb21ldHJpY1B2YWx1ZSB8IGh5cGVyZ2VvbWV0cmljIHRlc3QgcC12YWx1ZSBmb3IgdGhlIGxvb3BcbjIwdGggfCBwb2lzc29uUHZhbHVlIHwgUG9pc3NvbiB0ZXN0IHAtdmFsdWUgZm9yIHRoZSBsb29wXG4yMXRoIHwgeFBlYWtwb2lzc29uUHZhbHVlIHwgUG9pc3NvbiB0ZXN0IHAtdmFsdWUgZm9yIHRoZSBsZWZ0IGFuY2hvciBwb3RlbnRpYWwgcGVhayBwLXZhbHVlXG4yMnRoIHwgeVBlYWtwb2lzc29uUHZhbHVlIHwgUG9pc3NvbiB0ZXN0IHAtdmFsdWUgZm9yIHRoZSByaWdodCBhbmNob3IgcG90ZW50aWFsIHBlYWsgcC12YWx1ZVxuMjN0aCB8IHNpZ25pZmljYW50IHwgMSBvciAwLCAxIG1lYW5zIHdlIHRoaW5rIHRoZSBsb29wIGlzIHNpZ25pZmljYW50IGNvbXBhcmVkIHRvIHBlcm11dGF0ZWQgcmVnaW9ucy4gSW4gY0xvb3BzMiwgb25seSBzaWduaWZpY2FudCBsb29wcyBhcmUgd3JpdHRlbiB0byB0aGUgZmlsZS4gXG5cbi0tLS0tLVxuPGEgbmFtZT1cIl9kbG9vcHMudHh0XCI+PC9hPlxuIyMjIE91dHB1dCBcXF9kbG9vcHMudHh0IGZpbGUgXG5jb2x1bW4gfCBuYW1lIHwgZXhwbGFuYXRpb25cbi0tLS0tLSB8IC0tLS0gfCAtLS0tLS0tLS0tLS1cbjB0aCB8IGxvb3BJZCB8IGlkIGZvciBhIGxvb3AsIGZvciBleGFtcGxlIGxvb3BcXF9jaHIxLWNocjEtMVxuMXRoIHwgY2hyb21BIHwgY2hyb21vc29tYWwgZm9yIHRoZSBsb29wIGZpcnN0IGFuY2hvclxuMnRoIHwgc3RhcnRBIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBzdGFydCBzaXRlIGZvciB0aGUgZmlyc3QgYW5jaG9yXG4zdGggfCBlbmRBIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBlbmQgc2l0ZSBmb3IgdGhlIGZpcnN0IGFuY2hvclxuNHRoIHwgY2hyb21CIHwgY2hyb21vc29tYWwgZm9yIHRoZSBsb29wIHNlY29uZCBhbmNob3JcbjV0aCB8IHN0YXJ0QiB8IGdlbm9taWMgY29vcmRpbmF0ZSBvZiB0aGUgc3RhcnQgc2l0ZSBmb3IgdGhlIHNlY29uZCBhbmNob3JcbjZ0aCB8IGVuZEIgfCBnZW5vbWljIGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBzaXRlIGZvciB0aGUgc2Vjb25kIGFuY2hvclxuN3RoIHwgZGlzdGFuY2UgfCBkaXN0YW5jZSAoYnApIGJldHdlZW4gdGhlIGNlbnRlcnMgb2YgdGhlIGFuY2hvcnMgZm9yIHRoZSBsb29wXG44dGggfCBjZW50ZXJBIHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBjZW50ZXIgc2l0ZSBmb3IgdGhlIGZpcnN0IGFuY2hvclxuOXRoIHwgY2VudGVyQiB8IGdlbm9taWMgY29vcmRpbmF0ZSBvZiB0aGUgY2VudGVyIHNpdGUgZm9yIHRoZSBzZWNvbmQgYW5jaG9yXG4xMHRoIHwgcmF3VGFyZ2V0QW5jaG9yQVJlYWRzIHwgb2JzZXJ2ZWQgUEVUcyBudW1iZXIgZm9yIHRoZSBmaXJzdCBhbmNob3IgaW4gdGFyZ2V0IHNhbXBsZSBcbjExdGggfCByYXdUYXJnZXRBbmNob3JCUmVhZHMgfCBvYnNlcnZlZCBQRVRzIG51bWJlciBmb3IgdGhlIHNlY29uZCBhbmNob3IgaW4gdGFyZ2V0IHNhbXBsZSBcbjEydGggfCByYXdDb250cm9sQW5jaG9yQVJlYWRzIHwgb2JzZXJ2ZWQgUEVUcyBudW1iZXIgZm9yIHRoZSBmaXJzdCBhbmNob3IgaW4gY29udHJvbCBzYW1wbGUgXG4xM3RoIHwgcmF3Q29udHJvbEFuY2hvckJSZWFkcyB8IG9ic2VydmVkIFBFVHMgbnVtYmVyIGZvciB0aGUgc2Vjb25kIGFuY2hvciBpbiBjb250cm9sIHNhbXBsZSBcbjE0dGggfCBzY2FsZWRUYXJnZXRBbmNob3JBUmVhZHMgfCBzY2FsZWQgUEVUcyBudW1iZXIgZm9yIHRoZSBmaXJzdCBhbmNob3IgaW4gdGFyZ2V0IHNhbXBsZSBcbjE1dGggfCBzY2FsZWRUYXJnZXRBbmNob3JCUmVhZHMgfCBzY2FsZWQgUEVUcyBudW1iZXIgZm9yIHRoZSBzZWNvbmQgYW5jaG9yIGluIHRhcmdldCBzYW1wbGUgXG4xNnRoIHwgcmF3VGFyZ2V0Q291bnRzIHwgcmF3IFBFVHMgbnVtYmVyIGZvciB0aGUgbG9vcCBpbiB0YXJnZXQgc2FtcGxlIFxuMTd0aCB8IHNjYWxlZFRhcmdldENvdW50cyB8IHNjYWxlZCBQRVRzIG51bWJlciBmb3IgdGhlIGxvb3AgaW4gdGFyZ2V0IHNhbXBsZSwgZml0dGluZyB0byBjb250cm9sIHNhbXBsZVxuMTh0aCB8IHJhd0NvbnRyb2xDb3VudHMgfCByYXcgUEVUcyBudW1iZXIgZm9yIHRoZSBsb29wIGluIGNvbnRyb2wgc2FtcGxlIFxuMTl0aCB8IHJhd1RhcmdldE5lYXJieU1lZGlhbkNvdW50cyB8IHJhdyBtZWRpYW4gUEVUcyBudW1iZXIgZm9yIHRoZSBsb29wIG5lYXJieSBwZXJtdXRhdGlvbiByZWdpb25zIGluIHRhcmdldCBzYW1wbGVcbjIwdGggfCBzY2FsZWRUYXJnZXROZWFyYnlNZWRpYW5Db3VudHMgfCBzY2FsZWQgbWVkaWFuIFBFVHMgbnVtYmVyIGZvciB0aGUgbG9vcCBuZWFyYnkgcGVybXV0YXRpb24gcmVnaW9ucyBpbiB0YXJnZXQgc2FtcGxlLCBmaXR0aW5nIHRvIGNvbnRyb2wgc2FtcGxlXG4yMXRoIHwgcmF3Q29udHJvbE5lYXJieU1lZGlhbkNvdW50cyB8IHJhdyBtZWRpYW4gUEVUcyBudW1iZXIgZm9yIHRoZSBsb29wIG5lYXJieSBwZXJtdXRhdGlvbiByZWdpb25zIGluIGNvbnRyb2wgc2FtcGxlIFxuMjJ0aCB8IHJhd1RhcmdldEVTIHwgdGFyZ2V0IHNhbXBsZSByYXdUYXJnZXRDb3VudHMvcmF3VGFyZ2V0TmVhcmJ5TWVkaWFuQ291bnRzIFxuMjN0aCB8IHJhd0NvbnRyb2xFUyB8IGNvbnRyb2wgc2FtcGxlIHJhd0NvbnRyb2xDb3VudHMvcmF3Q29udHJvbE5lYXJieU1lZGlhbkNvdW50cyBcbjI0dGggfCB0YXJnZXREZW5zaXR5IHwgcmF3IGludGVyYWN0aW9uIGRlbnNpdHkgaW4gdGFyZ2V0IHNhbXBsZSwgUlBLTVxuMjV0aCB8IGNvbnRyb2xEZW5zaXR5IHwgcmF3IGludGVyYWN0aW9uIGRlbnNpdHkgaW4gY29udHJvbCBzYW1wbGUsIFJQS01cbjI2dGggfCByYXdGYyB8IHJhdyBmb2xkIGNoYW5nZSBvZiB0aGUgaW50ZXJhY3Rpb24gZGVuc2l0eSwgbG9nMih0YXJnZXQvY29udHJvbClcbjI3dGggfCBzY2FsZWRGYyB8IHNjYWxlZCBmb2xkIGNoYW5nZSBvZiBQRVRzLCBsb2cyKCBzY2FsZWRUYXJnZXRDb3VudHMvcmF3Q29udHJvbENvdW50cyApXG4yOHRoIHwgcG9pc3NvblB2YWx1ZSB8IHBvc3Npb24gcC12YWx1ZSBmb3IgdGhlIHNpZ25pZmljYW5jZSB0ZXN0IGFmdGVyIEJvbmZlcnJvbmkgY29ycmVjdGlvblxuMjl0aCB8IHNpZ25pZmljYW50IHwgMSBvciAwLCAxIG1lYW5zIHdlIHRoaW5rIHRoZSBsb29wIGlzIHNpZ25pZmljYW50IGRpZmZlcmVudGxseSBlbnJpY2hlZFxuXG4tLS0tLS1cbjxhIG5hbWU9XCJfZG9tYWlucy50eHRcIj48L2E+XG4jIyMgT3V0cHV0IFxcX2RvbWFpbnMudHh0IGZpbGUgXG5jb2x1bW4gfCBuYW1lIHwgZXhwbGFuYXRpb25cbi0tLS0tLSB8IC0tLS0gfCAtLS0tLS0tLS0tLS1cbjB0aCB8IGRvbWFpbklkIHwgaWQgZm9yIGEgZG9tYWluLCBmb3IgZXhhbXBsZSBkb21haW5cXF8wXG4xdGggfCBjaHJvbSB8IGNocm9tb3NvbWFsIGZvciB0aGUgbG9vcCBmaXJzdCBhbmNob3JcbjJ0aCB8IHN0YXJ0IHwgZ2Vub21pYyBjb29yZGluYXRlIG9mIHRoZSBzdGFydCBzaXRlIGZvciB0aGUgZG9tYWluXG4zdGggfCBlbmQgfCBnZW5vbWljIGNvb3JkaW5hdGUgb2YgdGhlIGVuZCBzaXRlIGZvciB0aGUgZG9tYWluIFxuNHRoIHwgbGVuZ3RoIHwgbGVuZ3RoIG9mIHRoZSBkb21haW5cbjV0aCB8IGJpblNpemUgfCBiaW4gc2l6ZSB1c2VkIGZvciB0aGUgbWF0cml4IHRvIGNhbGwgdGhlIGRvbWFpbiAgXG42dGggfCB3aW5TaXplIHwgd2luZG93IHNpemUgdXNlZCBmb3IgdGhlIG1hdHJpeCB0byBjYWxsIHRoZSBkb21haW4gIFxuN3RoIHwgc2VncmVnYXRpb25TY29yZSB8IG1lYW4gc2VncmVnYXRpb24gc2NvcmUgZm9yIGFsbCBiaW5zIHdpdGhpbiB0aGUgZG9tYWluICBcbjh0aCB8IHRvdGFsUEVUcyB8IG51bWJlciBvZiB0b3RhbCBQRVRzIGluIHRoZSBkb21haW5cbjl0aCB8IHdpdGhpbkRvbWFpblBFVHMgfCBudW1iZXIgb2YgUEVUcyBvbmx5IGludGVyYWN0aW5nIHdpdGhpbiB0aGUgZG9tYWluXG4xMHRoIHwgZW5yaWNobWVudFNjb3JlIHwgKHdpdGhpbkRvbWFpblBFVHMpIC8gKHRvdGFsUEVUcy13aXRoaW5Eb21haW5QRVRzKVxuMTF0aCB8IGRlbnNpdHkgfCBzaW1pbGFybHkgdG8gdGhhdCBvZiBSUEtNIChyZWFkcyBwZXIga2lsb2Jhc2UgcGVyIG1pbGxpb24pOjxpbWcgYWxpZ249XCJjZW50ZXJcIiBzcmM9XCJodHRwczovL2xhdGV4LmNvZGVjb2dzLmNvbS9zdmcubGF0ZXg/XFxMYXJnZSZzcGFjZTtkZW5zaXR5PVxcZnJhY3t3aXRoaW5Eb21haW5QRVRzfXsobGlicmFyeVRvdGFsUEVUcylcXHRpbWVzKGRvbWFpbkxlbmd0aCl9XFx0aW1lczEwXjlcIiAvPlxuXG4tLS0tLS1cbjxhIG5hbWU9XCJfbG9vcHNHdGZBbm8udHh0XCI+PC9hPlxuIyMjIE91dHB1dCBcXF9sb29wc0d0ZkFuby50eHQgZmlsZSBcbmNvbHVtbiB8IG5hbWUgfCBleHBsYW5hdGlvblxuLS0tLS0tIHwgLS0tLSB8IC0tLS0tLS0tLS0tLVxuMHRoIHwgbG9vcElkICB8IGxvb3BJZCBmcm9tIGlucHV0IGZpbGVcbjF0aCB8IHR5cGVBbmNob3JBICB8IGFubm90YXRlZCB0eXBlIG9mIGFuY2hvciBhIChsZWZ0IGFuY2hvciksIGVuaGFuY2VyIG9yIHByb21vdGVyXG4ydGggfCB0eXBlQW5jaG9yQiAgfCBhbm5vdGF0ZWQgdHlwZSBvZiBhbmNob3IgYiAocmlnaHQgYW5jaG9yKVxuM3RoIHwgbmVhcmVzdERpc3RhbmNlVG9HZW5lQW5jaG9yQSAgfCBkaXN0YW5jZSBvZiBhbmNob3IgYSB0byBuZWFyZXN0IFRTUyBcbjR0aCB8IG5lYXJlc3REaXN0YW5jZVRvR2VuZUFuY2hvckIgIHwgZGlzdGFuY2Ugb2YgYW5jaG9yIGIgdG8gbmVhcmVzdCBUU1MgXG41dGggfCBuZWFyZXN0VGFyZ2V0R2VuZUFuY2hvckEgIHwgYW5jaG9yIGEgbmVhcmVzdCBUU1MgZ2VuZSwgZm9yIGV4YW1wbGUgY2hyMjE6MzQ4MzYyODYtMzQ4ODQ4ODJcXHwrXFx8QVAwMDAzMzEuMSAobmFtZWQgYnkgcnVsZXMgb2YgY2hyb206c3RhcnQtZW5kXFx8c3RyYW5kXFx8Z2VuZU5hbWUpLiBJZiBhIHByb21vdGVyIG92ZXJsYXBzIHR3byBoZWFkLXRvLWhlYWQgZ2VuZXMsIGFsbCBnZW5lcyB3aWxsIGJlIHJlcG9ydGVkIGJ5IHNlcGVyYXRpb24gb2YgYSBjb21tYS5cbjZ0aCB8IG5lYXJlc3RUYXJnZXRHZW5lQW5jaG9yQiAgfCBhbmNob3IgYiBuZWFyZXN0IFRTUyBnZW5lXG5cbi0tLS0tLVxuPGEgbmFtZT1cIl9tZXJnZWRBbmNob3JzLnR4dFwiPjwvYT5cbiMjIyBPdXRwdXQgXFxfbWVyZ2VkQW5jaG9ycy50eHQgZmlsZSBcbmNvbHVtbiB8IG5hbWUgfCBleHBsYW5hdGlvblxuLS0tLS0tIHwgLS0tLSB8IC0tLS0tLS0tLS0tLVxuMHRoIHwgYW5jaG9ySWQgIHwgaWQgZm9yIG1lcmdlZCBhbmNob3JzLiBGb3IgZXhhbXBsZSwgY2hyMjE6MTQwMjUxMjYtMTQwMjYxOTJcXHxQcm9tb3RlciAobmFtZWQgYnkgdGhlIHJ1bGUgb2Y6IGNocm9tOnN0YXJ0LWVuZFxcfHR5cGUpXG4xdGggfCBjaHJvbSAgfCBjaHJvbW9zb21lXG4ydGggfCBzdGFydCAgfCBzdGFydFxuM3RoIHwgZW5kICB8IGVuZFxuNHRoIHwgdHlwZSAgfCBhbm5vdGF0ZWQgdHlwZSBmb3IgdGhlIGFuY2hvciwgZW5oYW5jZXIgb3IgcHJvbW90ZXJcbjV0aCB8IG5lYXJlc3REaXN0YW5jZVRvVFNTICB8IGRpc3RhbmNlIG9mIGFuY2hvciBhIHRvIG5lYXJlc3QgVFNTXG42dGggfCBuZWFyZXN0R2VuZSAgfCBuZWFyZXN0IGdlbmUgbmFtZS4gSWYgYSBwcm9tb3RlciBvdmVybGFwcyB0d28gaGVhZC10by1oZWFkIGdlbmVzLCBhbGwgZ2VuZXMgd2lsbCBiZSByZXBvcnRlZCBieSBzZXBlcmF0aW9uIG9mIGEgY29tbWEuICAgIFxuN3RoIHwgbmVhcmVzdEdlbmVMb2MgfCBuZWFydCBnZW5lIGluZm9ybWF0aW9uLiBGb3IgZXhhbXBsZSwgY2hyMjE6MzQ3ODc4MDEtMzUwNDkzNDRcXHwtXFx8UlVOWDEgKG5hbWVkIGJ5IHRoZSBydWxlIG9mOiBjaHJvbTpzdGFydC1lbmRcXHxzdHJhbmRcXHxuYW1lKS4gSWYgYSBwcm9tb3RlciBvdmVybGFwcyB0d28gaGVhZC10by1oZWFkIGdlbmVzLCBhbGwgZ2VuZXMgd2lsbCBiZSByZXBvcnRlZCBieSBzZXBlcmF0aW9uIG9mIGEgY29tbWEuICAgIFxuXG4tLS0tLS1cbjxhIG5hbWU9XCJfbG9vcDJhbmNob3JzLnR4dFwiPjwvYT5cbiMjIyBPdXRwdXQgXFxfbG9vcDJhbmNob3JzLnR4dCBmaWxlIFxuY29sdW1uIHwgbmFtZSB8IGV4cGxhbmF0aW9uXG4tLS0tLS0gfCAtLS0tIHwgLS0tLS0tLS0tLS0tXG4wdGggfCBsb29wSWQgIHwgbG9vcElkIGZyb20gaW5wdXQgZmlsZVxuMXRoIHwgbWVyZ2VkQW5jaG9yQSAgfCBvcmlnaW5hbCBhbmNob3IgYSAobGVmdCBhbmNob3IpIHRvIG5ldyBtZXJnZWQgYW5jaG9yIGlkXG4ydGggfCBtZXJnZWRBbmNob3JCICB8IG9yaWdpbmFsIGFuY2hvciBiIChyaWdodCBhbmNob3IpIHRvIG5ldyBtZXJnZWQgYW5jaG9yIGlkXG5cbi0tLS0tLVxuPGEgbmFtZT1cIl90YXJnZXRzLnR4dFwiPjwvYT5cbiMjIyBPdXRwdXQgXFxfdGFyZ2V0cy50eHQgZmlsZSBcbmNvbHVtbiB8IG5hbWUgfCBleHBsYW5hdGlvblxuLS0tLS0tIHwgLS0tLSB8IC0tLS0tLS0tLS0tLVxuMHRoIHwgcHJvbW90ZXIgIHwgYW5ub3RhdGVkIGFuY2hvcnMgdGhhdCBvdmVybGFwcGVkIG9yIHZlcnkgY2xvc2UgdG8gZ2VuZSdzIHRyYW5zY3JpcHRpb24gc3RhcnQgc2l0ZS4gRm9yIGV4YW1wbGUsIGNocjIxOjM1MDQzMDYyLTM1MDUxODk1XFx8UHJvbW90ZXIgKG5hbWVkIGJ5IHRoZSBydWxlIG9mOiBjaHJvbTpzdGFydC1lbmRcXHxQcm9tb3RlcikuXG4xdGggfCBQcm9tb3RlclRhcmdldCAgfCBwcm9tb3RlciB0YXJnZXQgZ2VuZXMuIElmIGEgcHJvbW90ZXIgaXMgc2hhcmVkIGJ5IG11bHRpcGxlIGdlbmVzLCBhbGwgZ2VuZXMgd2lsbCBiZSByZXBvcnRlZCBhbmQgc2VwZXJhdGVkIGJ5IGNvbW1hLiBGb3IgZXhhbXBsZSwgY2hyMjE6MzQ3ODc4MDEtMzUwNDkzNDRcXHwtXFx8UlVOWDEgKG5hbWVkIGJ5IHRoZSBydWxlIG9mOiBjaG9ybTpzdGFydC1lbmRcXHxzdHJhbmRcXHxuYW1lLlxuMnRoIHwgZGlyZWN0RW5oYW5jZXIgIHwgZW5oYW5jZXJzIHRoYXQgZGlyZWN0bHkgbG9vcGluZyB3aXRoIHRhcmdldCBwcm9tb3Rlci4gTXVsdGlwbGUgZW5oYW5jZXJzIHdpbGwgYmUgcmVwb3J0ZWQgYW5kIHNlcGVyYXRlZCBieSBjb21tYS4gRm9yIGV4YW1wbGUsIGNocjIxOjM1MDc1NjM2LTM1MDc3NTI3XFx8RW5oYW5jZXIsY2hyMjE6MzUwMjYzNTYtMzUwMjg1MjBcXHxFbmhhbmNlcixjaHIyMTozNDgwMTMwMi0zNDgwNTA1NlxcfEVuaGFuY2VyLlxuM3RoIHwgaW5kaXJlY3RFbmhhbmNlciAgfCBlbmhhbmNlcnMgdGhhdCBpbmRpcmVjdGx5IGxvb3Bpbmcgd2l0aCB0YXJnZXQgcHJvbW90ZXIsIGJ5IGVuaGFuY2VyLWVuaGFuY2VyLXByb21vdGVyIG9yIGVuaGFuY2VyLXByb21vdGVyLXByb21vdGVyLiBNdWx0aXBsZSBlbmhhbmNlcnMgd2lsbCBiZSByZXBvcnRlZCBhbmQgc2VwZXJhdGVkIGJ5IGNvbW1hLlxuNHRoIHwgZGlyZWN0UHJvbW90ZXIgIHwgb3RoZXIgcHJvbW90ZXJzIGRpcmVjdGx5IGxvb3Bpbmcgd2l0aCB0YXJnZXQgcHJvbW90ZXIuIFxuNXRoIHwgaW5kaXJlY3RQcm9tb3RlciB8IG90aGVyIHByb21vdGVycyBpbmRpcmVjdGx5IGxvb3Bpbmcgd2l0aCB0YXJnZXQgcHJvbW90ZXIsIGJ5IHByb21vdGVyLWVuaGFuY2VyLXByb21vdGVyIG9yIHByb21vdGVyLXByb21vdGVyLXByb21vdGVyLiBcbjZ0aCB8IGRpcmVjdEVuaGFuY2VySHViIHwgaHViIG9mIGRpcmVjdCBlbmhhbmNlci4gSWYgdGhlcmUgYXJlIG1vcmUgdGhhbiAyIGRpcmVjdCBlbmhhbmNlcnMsIHVzaW5nIEhJVFMgYWxnb3JpdGhtIHRvIGZpbmQgdGhlIG1vc3QgbGlua2VkIG9uZSBhbmQgcmVwb3J0LiBcbjd0aCB8IGluZGlyZWN0RW5oYW5jZXJIdWIgfCBodWIgb2YgaW5kaXJlY3QgZW5oYW5jZXIuIElmIHRoZXJlIGFyZSBtb3JlIHRoYW4gMiBpbmRpcmVjdCBlbmhhbmNlcnMsIHVzaW5nIEhJVFMgYWxnb3JpdGhtIHRvIGZpbmQgdGhlIG1vc3QgbGlua2VkIG9uZSBhbmQgcmVwb3J0LiBcblxuXG4tLS0tLS0tLVxuLS0tLS0tLS1cbiMjIGNMb29wczIgY2l0YXRpb25zXG5cbi0tLS0tLS0tXG4tLS0tLS0tLVxuIyMgY0xvb3BzMiB1cGRhdGVzXG5cblxuXG5cbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL1lhcWlhbmdDYW8vY0xvb3BzMiIs
ICAgICJrZXl3b3JkcyI6ICJwZWFrLWNhbGxpbmcgbG9vcC1jYWxsaW5nIEhpLVRyYWMgaW50ZXJhY3Rpb24gdmlzdWFsaXphdGlvbiIs
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImNMb29wczIiLA==
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY0xvb3BzMi8iLA==
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY0xvb3BzMi8iLA==
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9ZYXFpYW5nQ2FvL2NMb29wczIiLA==
ICAgICAgIlNvdXJjZSI6ICJodHRwczovL2dpdGh1Yi5jb20vWWFxaWFuZ0Nhby9jTG9vcHMyIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY0xvb3BzMi8wLjAuMy8iLA==
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgImpvYmxpYiIs
ICAgICAgIm51bXB5Iiw=
ICAgICAgInNlYWJvcm4iLA==
ICAgICAgInBhbmRhcyIs
ICAgICAgInNjaXB5Iiw=
ICAgICAgInNjaWtpdC1sZWFybiIs
ICAgICAgIm1hdHBsb3RsaWIiLA==
ICAgICAgInRxZG0iLA==
ICAgICAgInB5QmlnV2lnIiw=
ICAgICAgIm5ldHdvcmt4Ig==
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zIiw=
ICAgICJzdW1tYXJ5IjogIkxvb3AtY2FsbGluZyBhbmQgcGVhay1jYWxsaW5nIGZvciBzZXF1ZW5jaW5nLWJhc2VkIGludGVyYWN0aW9uIGRhdGEsIGluY2x1ZGluZyByZWxhdGVkIGFuYWx5c2lzIHV0aWxpdGllcy4iLA==
ICAgICJ2ZXJzaW9uIjogIjAuMC4zIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxMTkwNjQ1OCw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjAuMiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJlYmU5NDc5MWY4NTE2YjMxYTM1NWI4ZWE5ZmFiMTQyNzUxMmM5OTNiNTlhM2RlMjYzMGZhOGI2ZTk0ZDU2NTYxIiw=
ICAgICAgICAgICJtZDUiOiAiZDdhNDhiYWQxNzU5MzI1ZTZmZGVmMmM3Yzk1MWNhYmEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNGRjYzgyZWE5OTdiNWY4MjdmNzY1OWQxZWI5YWQ5NmUyZjE1YmUyMjhiMDY5NzcyOTY1ZmY3NDIwMzEzMzcwYiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMi1weTMuNi5lZ2ciLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJkN2E0OGJhZDE3NTkzMjVlNmZkZWYyYzdjOTUxY2FiYSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3RfZWdnIiw=
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAiMy42Iiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDM0OTI3Nyw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMS0wMlQxODowMzoxMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMS0wMlQxODowMzoxMi43ODI1MjJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9lYi9lOS80NzkxZjg1MTZiMzFhMzU1YjhlYTlmYWIxNDI3NTEyYzk5M2I1OWEzZGUyNjMwZmE4YjZlOTRkNTY1NjEvY0xvb3BzMi0wLjAuMi1weTMuNi5lZ2ciLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1Y2I5ZGNjMzlmYWI1ZTU2NWYwYTU0NmY5YjcxOWEwNjkzNzU1ODQ4ZjBlNjA4OTJjNGRhMzM4ZTgzNDRmZTgwIiw=
ICAgICAgICAgICJtZDUiOiAiYWY0MTFlYjUzZmZlOWMwZDQ4OWU4NzQ2NWY2MTJiYjkiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTE2MmNlM2E3YTg2MmZiNWNhODU1MzIyMTg1NGJiMWUxZTY3YzQ1NDllNjY3ZDIwNzkwOTFmMWNlMTY0NjEzYyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMi1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhZjQxMWViNTNmZmU5YzBkNDg5ZTg3NDY1ZjYxMmJiOSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDE3MzAzMSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNy0xN1QwMDo1MDoyOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNy0xN1QwMDo1MDoyOS4wMzg0MTRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81Yy9iOS9kY2MzOWZhYjVlNTY1ZjBhNTQ2ZjliNzE5YTA2OTM3NTU4NDhmMGU2MDg5MmM0ZGEzMzhlODM0NGZlODAvY0xvb3BzMi0wLjAuMi1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmYTIzMDUyZDQ5ODQxYTU4NDk3NTMxZmFkYTZlNmE5ZDY3YzU5MzY1OTM2MDg1ZTE5ZTM2ZjI3ZTMyYTI3ZDliIiw=
ICAgICAgICAgICJtZDUiOiAiN2Q4MWFkMDY1ODA3YjkxZmEwOWEwZTA5ZjFlM2UxZmQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMzg1NDEzODliMTRlZjNlZTY2ZWVjYWI1N2RjODFmYTY2ZTJiYjc1MzgzODFiMWE1MTZhYmMwZjFiOTU1M2MxNSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMi50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3ZDgxYWQwNjU4MDdiOTFmYTA5YTBlMDlmMWUzZTFmZCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDY5MzUyMSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNy0xN1QwMDo1MDozMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNy0xN1QwMDo1MDozMC43MDYwNTdaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mYS8yMy8wNTJkNDk4NDFhNTg0OTc1MzFmYWRhNmU2YTlkNjdjNTkzNjU5MzYwODVlMTllMzZmMjdlMzJhMjdkOWIvY0xvb3BzMi0wLjAuMi50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjAuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI2YjY4ZDgwMTQ5YzQ0YWNjOGI3NjIxMDE1ZDc1ZTVkMjRjMmM1MTFhNTk0NzZjOTE5OGYyNGQ3ZWUxYzBiZjU0Iiw=
ICAgICAgICAgICJtZDUiOiAiMjMyNTdjZTM0YjBjYjJjYWVjZDBjNDBlYzJjNWIzOTUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMTMzMWJiZTNlY2VkMmIzODNjYjMxYzYwY2YwNTgzN2FiNWI2MTI5Y2E3YTA1ODAwODEwMzVkYmRjODkxYWI1MCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMy1weTMuNi5lZ2ciLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyMzI1N2NlMzRiMGNiMmNhZWNkMGM0MGVjMmM1YjM5NSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3RfZWdnIiw=
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAiMy42Iiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDM0ODQ0Niw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMS0wMlQxODowMzoxMyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMS0wMlQxODowMzoxMy44OTc5OThaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy82Yi82OC9kODAxNDljNDRhY2M4Yjc2MjEwMTVkNzVlNWQyNGMyYzUxMWE1OTQ3NmM5MTk4ZjI0ZDdlZTFjMGJmNTQvY0xvb3BzMi0wLjAuMy1weTMuNi5lZ2ciLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1MzBhY2QxYWE3NjJhYjU5ZDRkNmUyZWNmZDZlZjAwZGU3ZTJhZmNhYjVlMTExOTI3ODVlOTk5NzA0NmI0OGZhIiw=
ICAgICAgICAgICJtZDUiOiAiMWJjNzgxMzgwZDM0OWFiMDc4OTc1MjZmYWM0ZTYzMzUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzdjYzkwMTA0N2M4OWZlY2IzYmU3ZmYxZjk4NzQzMjc5MmJhZmYyYjJhMDg3ZDA5M2VkMWQ0ZTMzZThhNjFjMiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxYmM3ODEzODBkMzQ5YWIwNzg5NzUyNmZhYzRlNjMzNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDE5NDM1MSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMS0wMlQxODowMzoxMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMS0wMlQxODowMzoxMS4zOTUwOTVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81My8wYS9jZDFhYTc2MmFiNTlkNGQ2ZTJlY2ZkNmVmMDBkZTdlMmFmY2FiNWUxMTE5Mjc4NWU5OTk3MDQ2YjQ4ZmEvY0xvb3BzMi0wLjAuMy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjOWI4YzJiMTRmOWIyNzA1Nzg3MTEwYmE4NWQ4YmQ2YTEwMjQ1N2Q3YjIwMjE1MDQ3ODYxYTcwNmQxMzhiMWI3Iiw=
ICAgICAgICAgICJtZDUiOiAiN2MwNTU1N2YyZTBiZDNhMGZkZDhkYWYyNzdiMzU4MTQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNGE0MDA3MzFhZjhlZDE5OTYxOTg4YjdkNDk5MmM2MjA3YWYwMDkwNGE3ZjgyMDlmMDRmNWM5M2EwMTU2N2VlNSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY0xvb3BzMi0wLjAuMy50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3YzA1NTU3ZjJlMGJkM2EwZmRkOGRhZjI3N2IzNTgxNCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49MyIs
ICAgICAgICAic2l6ZSI6IDc2MDk4Miw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMS0wMlQxODowMzoxNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMS0wMlQxODowMzoxNS41MTU3MjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jOS9iOC9jMmIxNGY5YjI3MDU3ODcxMTBiYTg1ZDhiZDZhMTAyNDU3ZDdiMjAyMTUwNDc4NjFhNzA2ZDEzOGIxYjcvY0xvb3BzMi0wLjAuMy50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNmI2OGQ4MDE0OWM0NGFjYzhiNzYyMTAxNWQ3NWU1ZDI0YzJjNTExYTU5NDc2YzkxOThmMjRkN2VlMWMwYmY1NCIs
ICAgICAgICAibWQ1IjogIjIzMjU3Y2UzNGIwY2IyY2FlY2QwYzQwZWMyYzViMzk1Iiw=
ICAgICAgICAic2hhMjU2IjogIjEzMzFiYmUzZWNlZDJiMzgzY2IzMWM2MGNmMDU4MzdhYjViNjEyOWNhN2EwNTgwMDgxMDM1ZGJkYzg5MWFiNTAi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImNMb29wczItMC4wLjMtcHkzLjYuZWdnIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMjMyNTdjZTM0YjBjYjJjYWVjZDBjNDBlYzJjNWIzOTUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X2VnZyIs
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogIjMuNiIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMiLA==
ICAgICAgInNpemUiOiAzNDg0NDYs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjEtMTEtMDJUMTg6MDM6MTMiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjEtMTEtMDJUMTg6MDM6MTMuODk3OTk4WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNmIvNjgvZDgwMTQ5YzQ0YWNjOGI3NjIxMDE1ZDc1ZTVkMjRjMmM1MTFhNTk0NzZjOTE5OGYyNGQ3ZWUxYzBiZjU0L2NMb29wczItMC4wLjMtcHkzLjYuZWdnIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNTMwYWNkMWFhNzYyYWI1OWQ0ZDZlMmVjZmQ2ZWYwMGRlN2UyYWZjYWI1ZTExMTkyNzg1ZTk5OTcwNDZiNDhmYSIs
ICAgICAgICAibWQ1IjogIjFiYzc4MTM4MGQzNDlhYjA3ODk3NTI2ZmFjNGU2MzM1Iiw=
ICAgICAgICAic2hhMjU2IjogIjc3Y2M5MDEwNDdjODlmZWNiM2JlN2ZmMWY5ODc0MzI3OTJiYWZmMmIyYTA4N2QwOTNlZDFkNGUzM2U4YTYxYzIi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImNMb29wczItMC4wLjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMWJjNzgxMzgwZDM0OWFiMDc4OTc1MjZmYWM0ZTYzMzUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMiLA==
ICAgICAgInNpemUiOiAxOTQzNTEs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjEtMTEtMDJUMTg6MDM6MTEiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjEtMTEtMDJUMTg6MDM6MTEuMzk1MDk1WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNTMvMGEvY2QxYWE3NjJhYjU5ZDRkNmUyZWNmZDZlZjAwZGU3ZTJhZmNhYjVlMTExOTI3ODVlOTk5NzA0NmI0OGZhL2NMb29wczItMC4wLjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYzliOGMyYjE0ZjliMjcwNTc4NzExMGJhODVkOGJkNmExMDI0NTdkN2IyMDIxNTA0Nzg2MWE3MDZkMTM4YjFiNyIs
ICAgICAgICAibWQ1IjogIjdjMDU1NTdmMmUwYmQzYTBmZGQ4ZGFmMjc3YjM1ODE0Iiw=
ICAgICAgICAic2hhMjU2IjogIjRhNDAwNzMxYWY4ZWQxOTk2MTk4OGI3ZDQ5OTJjNjIwN2FmMDA5MDRhN2Y4MjA5ZjA0ZjVjOTNhMDE1NjdlZTUi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImNMb29wczItMC4wLjMudGFyLmd6Iiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiN2MwNTU1N2YyZTBiZDNhMGZkZDhkYWYyNzdiMzU4MTQiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMiLA==
ICAgICAgInNpemUiOiA3NjA5ODIs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjEtMTEtMDJUMTg6MDM6MTUiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjEtMTEtMDJUMTg6MDM6MTUuNTE1NzIzWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYzkvYjgvYzJiMTRmOWIyNzA1Nzg3MTEwYmE4NWQ4YmQ2YTEwMjQ1N2Q3YjIwMjE1MDQ3ODYxYTcwNmQxMzhiMWI3L2NMb29wczItMC4wLjMudGFyLmd6Iiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
