ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiTGlzdGVuIE5vdGVzLCBJbmMuIiw=
ICAgICJhdXRob3JfZW1haWwiOiAiaGVsbG9AbGlzdGVubm90ZXMuY29tIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IERldmVsb3BlcnMiLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlIiw=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjUiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjYiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiBJbXBsZW1lbnRhdGlvbiA6OiBQeVB5Iiw=
ICAgICAgIlRvcGljIDo6IFNvZnR3YXJlIERldmVsb3BtZW50IDo6IExpYnJhcmllcyA6OiBQeXRob24gTW9kdWxlcyI=
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIFBvZGNhc3QgQVBJIFB5dGhvbiBMaWJyYXJ5XG5cblshW1B5dGhvbiBDSV0oaHR0cHM6Ly9naXRodWIuY29tL0xpc3Rlbk5vdGVzL3BvZGNhc3QtYXBpLXB5dGhvbi9hY3Rpb25zL3dvcmtmbG93cy9weXRob24ueW1sL2JhZGdlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS9MaXN0ZW5Ob3Rlcy9wb2RjYXN0LWFwaS1weXRob24vYWN0aW9ucy93b3JrZmxvd3MvcHl0aG9uLnltbClcblxuVGhlIFBvZGNhc3QgQVBJIFB5dGhvbiBsaWJyYXJ5IHByb3ZpZGVzIGNvbnZlbmllbnQgYWNjZXNzIHRvIHRoZSBbTGlzdGVuIE5vdGVzIFBvZGNhc3QgQVBJXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvKSBmcm9tXG5hcHBsaWNhdGlvbnMgd3JpdHRlbiBpbiB0aGUgUHl0aG9uIGxhbmd1YWdlLlxuXG5TaW1wbGUgYW5kIG5vLW5vbnNlbnNlIHBvZGNhc3Qgc2VhcmNoICYgZGlyZWN0b3J5IEFQSS4gU2VhcmNoIHRoZSBtZXRhIGRhdGEgb2YgYWxsIHBvZGNhc3RzIGFuZCBlcGlzb2RlcyBieSBwZW9wbGUsIHBsYWNlcywgb3IgdG9waWNzLiBJdCdzIHRoZSBzYW1lIEFQSSB0aGF0IHBvd2VycyBbdGhlIGJlc3QgcG9kY2FzdCBzZWFyY2ggZW5naW5lIExpc3RlbiBOb3Rlc10oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tLykuXG5cbklmIHlvdSBoYXZlIGFueSBxdWVzdGlvbnMsIHBsZWFzZSBjb250YWN0IFtoZWxsb0BsaXN0ZW5ub3Rlcy5jb21dKGhlbGxvQGxpc3Rlbm5vdGVzLmNvbT9zdWJqZWN0PVF1ZXN0aW9ucythYm91dCt0aGUrUHl0aG9uK1NESytvZitMaXN0ZW4rQVBJKVxuXG48YSBocmVmPVwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL1wiPjxpbWcgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL0xpc3Rlbk5vdGVzL0xpc3RlbkFwaURlbW8vbWFzdGVyL3dlYi9zcmMvcG93ZXJlZF9ieV9saXN0ZW5ub3Rlcy5wbmdcIiB3aWR0aD1cIjMwMFwiIC8+PC9hPlxuXG5cbioqVGFibGUgb2YgQ29udGVudHMqKlxuLSBbUG9kY2FzdCBBUEkgUHl0aG9uIExpYnJhcnldKCNwb2RjYXN0LWFwaS1weXRob24tbGlicmFyeSlcbiAgLSBbSW5zdGFsbGF0aW9uXSgjaW5zdGFsbGF0aW9uKVxuICAgIC0gW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbiAgLSBbVXNhZ2VdKCN1c2FnZSlcbiAgICAtIFtIYW5kbGluZyBleGNlcHRpb25zXSgjaGFuZGxpbmctZXhjZXB0aW9ucylcbiAgLSBbQVBJIFJlZmVyZW5jZV0oI2FwaS1yZWZlcmVuY2UpXG4gICAgLSBbRnVsbC10ZXh0IHNlYXJjaF0oI2Z1bGwtdGV4dC1zZWFyY2gpXG4gICAgLSBbVHlwZWFoZWFkIHNlYXJjaF0oI3R5cGVhaGVhZC1zZWFyY2gpXG4gICAgLSBbRmV0Y2ggZGV0YWlsZWQgbWV0YSBkYXRhIGFuZCBlcGlzb2RlcyBmb3IgYSBwb2RjYXN0IGJ5IGlkXSgjZmV0Y2gtZGV0YWlsZWQtbWV0YS1kYXRhLWFuZC1lcGlzb2Rlcy1mb3ItYS1wb2RjYXN0LWJ5LWlkKVxuICAgIC0gW0ZldGNoIGRldGFpbGVkIG1ldGEgZGF0YSBmb3IgYW4gZXBpc29kZSBieSBpZF0oI2ZldGNoLWRldGFpbGVkLW1ldGEtZGF0YS1mb3ItYW4tZXBpc29kZS1ieS1pZClcbiAgICAtIFtGZXRjaCBhIGxpc3Qgb2Ygc3VwcG9ydGVkIGxhbmd1YWdlcyBmb3IgcG9kY2FzdHNdKCNmZXRjaC1hLWxpc3Qtb2Ytc3VwcG9ydGVkLWxhbmd1YWdlcy1mb3ItcG9kY2FzdHMpXG4gICAgLSBbRmV0Y2ggYSBsaXN0IG9mIHBvZGNhc3QgZ2VucmVzXSgjZmV0Y2gtYS1saXN0LW9mLXBvZGNhc3QtZ2VucmVzKVxuICAgIC0gW0ZldGNoIGEgbGlzdCBvZiBiZXN0IHBvZGNhc3RzIGJ5IGdlbnJlXSgjZmV0Y2gtYS1saXN0LW9mLWJlc3QtcG9kY2FzdHMtYnktZ2VucmUpXG4gICAgLSBbRmV0Y2ggYSBsaXN0IG9mIHN1cHBvcnRlZCBjb3VudHJpZXMvcmVnaW9ucyBmb3IgYmVzdCBwb2RjYXN0c10oI2ZldGNoLWEtbGlzdC1vZi1zdXBwb3J0ZWQtY291bnRyaWVzcmVnaW9ucy1mb3ItYmVzdC1wb2RjYXN0cylcbiAgICAtIFtGZXRjaCByZWNvbW1lbmRhdGlvbnMgZm9yIGEgcG9kY2FzdF0oI2ZldGNoLXJlY29tbWVuZGF0aW9ucy1mb3ItYS1wb2RjYXN0KVxuICAgIC0gW0ZldGNoIHJlY29tbWVuZGF0aW9ucyBmb3IgYW4gZXBpc29kZV0oI2ZldGNoLXJlY29tbWVuZGF0aW9ucy1mb3ItYW4tZXBpc29kZSlcbiAgICAtIFtCYXRjaCBmZXRjaCBiYXNpYyBtZXRhIGRhdGEgZm9yIGVwaXNvZGVzXSgjYmF0Y2gtZmV0Y2gtYmFzaWMtbWV0YS1kYXRhLWZvci1lcGlzb2RlcylcbiAgICAtIFtCYXRjaCBmZXRjaCBiYXNpYyBtZXRhIGRhdGEgZm9yIHBvZGNhc3RzXSgjYmF0Y2gtZmV0Y2gtYmFzaWMtbWV0YS1kYXRhLWZvci1wb2RjYXN0cylcbiAgICAtIFtGZXRjaCBhIHJhbmRvbSBwb2RjYXN0IGVwaXNvZGVdKCNmZXRjaC1hLXJhbmRvbS1wb2RjYXN0LWVwaXNvZGUpXG4gICAgLSBbRmV0Y2ggYSBjdXJhdGVkIGxpc3Qgb2YgcG9kY2FzdHMgYnkgaWRdKCNmZXRjaC1hLWN1cmF0ZWQtbGlzdC1vZi1wb2RjYXN0cy1ieS1pZClcbiAgICAtIFtGZXRjaCBjdXJhdGVkIGxpc3RzIG9mIHBvZGNhc3RzXSgjZmV0Y2gtY3VyYXRlZC1saXN0cy1vZi1wb2RjYXN0cylcbiAgICAtIFtTdWJtaXQgYSBwb2RjYXN0IHRvIExpc3RlbiBOb3RlcyBkYXRhYmFzZV0oI3N1Ym1pdC1hLXBvZGNhc3QtdG8tbGlzdGVuLW5vdGVzLWRhdGFiYXNlKVxuICAgIC0gW1JlcXVlc3QgdG8gZGVsZXRlIGEgcG9kY2FzdF0oI3JlcXVlc3QtdG8tZGVsZXRlLWEtcG9kY2FzdClcbiAgICAtIFtGZXRjaCBhIHBsYXlsaXN0JiN4Mjc7cyBpbmZvIGFuZCBpdGVtcyAoaS5lLiwgZXBpc29kZXMgb3IgcG9kY2FzdHMpLl0oI2ZldGNoLWEtcGxheWxpc3RzLWluZm8tYW5kLWl0ZW1zLWllLWVwaXNvZGVzLW9yLXBvZGNhc3RzKVxuICAgIC0gW0ZldGNoIGEgbGlzdCBvZiB5b3VyIHBsYXlsaXN0cy5dKCNmZXRjaC1hLWxpc3Qtb2YteW91ci1wbGF5bGlzdHMpXG4gICAgLSBbRmV0Y2ggdHJlbmRpbmcgc2VhcmNoIHRlcm1zXSgjZmV0Y2gtdHJlbmRpbmctc2VhcmNoLXRlcm1zKVxuICAgIC0gW0ZldGNoIHJlbGF0ZWQgc2VhcmNoIHRlcm1zXSgjZmV0Y2gtcmVsYXRlZC1zZWFyY2gtdGVybXMpXG4gICAgLSBbU3BlbGwgY2hlY2sgb24gYSBzZWFyY2ggdGVybV0oI3NwZWxsLWNoZWNrLW9uLWEtc2VhcmNoLXRlcm0pXG4gICAgLSBbRmV0Y2ggYXVkaWVuY2UgZGVtb2dyYXBoaWNzIGZvciBhIHBvZGNhc3RdKCNmZXRjaC1hdWRpZW5jZS1kZW1vZ3JhcGhpY3MtZm9yLWEtcG9kY2FzdClcblxuXG4jIyBJbnN0YWxsYXRpb25cblxuSW5zdGFsbCBbdGhlIG9mZmljaWFsIFBJUCBwYWNrYWdlXShodHRwczovL3B5cGkub3JnL3Byb2plY3QvcG9kY2FzdC1hcGkvKSBvZiB0aGUgTGlzdGVuIE5vdGVzIFBvZGNhc3QgQVBJOlxuXG5gYGBzaFxucGlwIGluc3RhbGwgLS11cGdyYWRlIHBvZGNhc3QtYXBpXG5gYGBcblxuWW91IGNhbiBhbHNvIGluc3RhbGwgZnJvbSBzb3VyY2U6XG5cbmBgYHNoXG5tYWtlICYmIHNvdXJjZSB2ZW52L2Jpbi9hY3RpdmF0ZVxuYGBgXG5cbiMjIyBSZXF1aXJlbWVudHNcblxuLSBQeXRob24gMy41K1xuXG4jIyBVc2FnZVxuXG5UaGUgbGlicmFyeSBuZWVkcyB0byBiZSBjb25maWd1cmVkIHdpdGggeW91ciBhY2NvdW50J3MgQVBJIGtleSB3aGljaCBpc1xuYXZhaWxhYmxlIGluIHlvdXIgW0xpc3RlbiBBUEkgRGFzaGJvYXJkXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZGFzaGJvYXJkLyNhcHBzKS4gU2V0IGBhcGlfa2V5YCB0byBpdHNcbnZhbHVlOlxuXG5gYGBweXRob25cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpXG5cbnJlc3BvbnNlID0gY2xpZW50LnNlYXJjaChxPSdzdGFyIHdhcnMnKVxuXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5gYGBcblxuSWYgYGFwaV9rZXlgIGlzIE5vbmUsIHRoZW4gd2UnbGwgY29ubmVjdCB0byBhIFttb2NrIHNlcnZlcl0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL3R1dG9yaWFscy8jZmFxMCkgdGhhdCByZXR1cm5zIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3Nlcy5cblxuXG4jIyMgSGFuZGxpbmcgZXhjZXB0aW9uc1xuXG5VbnN1Y2Nlc3NmdWwgcmVxdWVzdHMgcmFpc2UgZXhjZXB0aW9ucy4gVGhlIGNsYXNzIG9mIHRoZSBleGNlcHRpb24gd2lsbCByZWZsZWN0XG50aGUgc29ydCBvZiBlcnJvciB0aGF0IG9jY3VycmVkLlxuXG58IEV4Y2VwdGlvbiBDbGFzcyAgfCBEZXNjcmlwdGlvbiB8XG58IC0tLS0tLS0tLS0tLS0gfCAtLS0tLS0tLS0tLS0tIHxcbnwgIEF1dGhlbnRpY2F0aW9uRXJyb3IgfCB3cm9uZyBhcGkga2V5IG9yIHlvdXIgYWNjb3VudCBpcyBzdXNwZW5kZWQgIHxcbnwgQVBJQ29ubmVjdGlvbkVycm9yICB8IGZhaWwgdG8gY29ubmVjdCB0byBBUEkgc2VydmVycyAgfFxufCBJbnZhbGlkUmVxdWVzdEVycm9yICB8IHNvbWV0aGluZyB3cm9uZyBvbiB5b3VyIGVuZCAoY2xpZW50IHNpZGUgZXJyb3JzKSwgZS5nLiwgbWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXJzICB8XG58IFJhdGVMaW1pdEVycm9yICB8IGZvciBGUkVFIHBsYW4sIGV4Y2VlZGluZyB0aGUgcXVvdGEgbGltaXQ7IG9yIGZvciBhbGwgcGxhbnMsIHNlbmRpbmcgdG9vIG1hbnkgcmVxdWVzdHMgdG9vIGZhc3QgYW5kIGV4Y2VlZGluZyB0aGUgcmF0ZSBsaW1pdCAgfFxufCBOb3RGb3VuZEVycm9yICB8IGVuZHBvaW50IG5vdCBleGlzdCwgb3IgcG9kY2FzdCAvIGVwaXNvZGUgbm90IGV4aXN0ICB8XG58IFBvZGNhc3RBcGlFcnJvciAgfCBzb21ldGhpbmcgd3Jvbmcgb24gb3VyIGVuZCAodW5leHBlY3RlZCBzZXJ2ZXIgZXJyb3JzKSAgfFxuXG5BbGwgZXhjZXB0aW9uIGNsYXNzZXMgY2FuIGJlIGZvdW5kIGluIFt0aGlzIGZpbGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9MaXN0ZW5Ob3Rlcy9wb2RjYXN0LWFwaS1weXRob24vYmxvYi9tYWluL2xpc3Rlbm5vdGVzL2Vycm9ycy5weSkuXG5cbkFuZCB5b3UgY2FuIHNlZSBzb21lIHNhbXBsZSBjb2RlIFtoZXJlXShodHRwczovL2dpdGh1Yi5jb20vTGlzdGVuTm90ZXMvcG9kY2FzdC1hcGktcHl0aG9uL2Jsb2IvbWFpbi9leGFtcGxlcy9zYW1wbGUucHkjTDE3KS5cblxuXG5cbiMjIEFQSSBSZWZlcmVuY2VcblxuRWFjaCBmdW5jdGlvbiBpcyBhIHdyYXBwZXIgdG8gc2VuZCBhbiBIVFRQIHJlcXVlc3QgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZW5kcG9pbnQgb24gdGhlXG5bQVBJIERvY3NdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLykuXG5cblxuXG4jIyMgRnVsbC10ZXh0IHNlYXJjaFxuXG5GdW5jdGlvbiBOYW1lOiAqKnNlYXJjaCoqXG5cbkZ1bGwtdGV4dCBzZWFyY2ggb24gZXBpc29kZXMsIHBvZGNhc3RzLCBvciBjdXJhdGVkIGxpc3RzIG9mIHBvZGNhc3RzLlxuVXNlIHRoZSBgb2Zmc2V0YCBwYXJhbWV0ZXIgdG8gcGFnaW5hdGUgdGhyb3VnaCBzZWFyY2ggcmVzdWx0cy5cblRoZSBGUkVFIHBsYW4gYWxsb3dzIHRvIHNlZSB1cCB0byAzMCBzZWFyY2ggcmVzdWx0cyAob3IgYG9mZnNldGAgJmx0OyAzMCkgcGVyIHF1ZXJ5LlxuVGhlIFBSTyBwbGFuIGFsbG93cyB0byBzZWUgdXAgdG8gMzAwIHNlYXJjaCByZXN1bHRzIChvciBgb2Zmc2V0YCAmbHQ7IDMwMCkgcGVyIHF1ZXJ5LlxuVGhlIEVOVEVSUFJJU0UgcGxhbiBhbGxvd3MgdG8gc2VlIHVwIHRvIDEwLDAwMCBzZWFyY2ggcmVzdWx0cyAob3IgYG9mZnNldGAgJmx0OyAxMDAwMCkgcGVyIHF1ZXJ5LlxuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LnNlYXJjaChcbiAgICBxPSdzdGFyIHdhcnMnLCBzb3J0X2J5X2RhdGU9MSwgb25seV9pbj0ndGl0bGUsZGVzY3JpcHRpb24nKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItc2VhcmNoKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInRvb2tcIjogMC45NjYsXG4gIFwiY291bnRcIjogMTAsXG4gIFwidG90YWxcIjogOTI3OCxcbiAgXCJyZXN1bHRzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYzg3N2JmMzYwYmRhNGM3NGFkZWEyYmEwNjZkZjY5MjlcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9mZWVkcy5tZWdhcGhvbmUuZm0vUk9PU1RFUjcxOTkyNTA5NjhcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3VwZXJjYXJsaW5icm90aGVycy5saWJzeW4uY29tL3N0YXItd2Fycy10aGVvcnktdGhlLWdyZWF0LXN0YXItd2Fycy1pY2UtY3JlYW0tY29uc3BpcmFjeT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvYzg3N2JmMzYwYmRhNGM3NGFkZWEyYmEwNjZkZjY5MjkvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N1cGVyLWNhcmxpbi1icm90aGVycy1qLWFuZC1iZW4tY2FybGluLUZ5cTdjWVM5Tk9zLUJvZERyN2lJQVIzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI4YmRiYjkwNmVlZjA0ZTVkOGIzOTFlOTQ3OTk4ZTlhZlwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N1cGVyLWNhcmxpbi1icm90aGVycy1qLWFuZC1iZW4tY2FybGluLUZ5cTdjWVM5Tk9zLUJvZERyN2lJQVIzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAgIDY4LFxuICAgICAgICAgIDIxNCxcbiAgICAgICAgICAyNjUsXG4gICAgICAgICAgOTlcbiAgICAgICAgXSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3VwZXItY2FybGluLWJyb3RoZXJzLWotYW5kLWJlbi1jYXJsaW4tVFNmeGlCYXFPd0stQm9kRHI3aUlBUjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTMsXG4gICAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJTdXBlciBDYXJsaW4gQnJvdGhlcnNcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84YmRiYjkwNmVlZjA0ZTVkOGIzOTFlOTQ3OTk4ZTlhZi9cIixcbiAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIlN1cGVyIENhcmxpbiBCcm90aGVyc1wiLFxuICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIkogYW5kIEJlbiBDYXJsaW5cIixcbiAgICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjogXCJKIGFuZCBCZW4gQ2FybGluXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICB9LFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTQ3OTExMjc5OCxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N1cGVyLWNhcmxpbi1icm90aGVycy1qLWFuZC1iZW4tY2FybGluLVRTZnhpQmFxT3dLLUJvZERyN2lJQVIzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NzQzNTU2MDAyNjIsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJkNjU0OWU4Zi0zNzE4LTRjYmMtOGZhMC02YTVjZTdjMDIxYjdcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJTdGFyIFdhcnMgVGhlb3J5OiBUaGUgR3JlYXQgU3RhciBXYXJzIEljZSBDcmVhbSBDb25zcGlyYWN5XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2M4NzdiZjM2MGJkYTRjNzRhZGVhMmJhMDY2ZGY2OTI5L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDYzOCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCI8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IFRoZW9yeTogVGhlIEdyZWF0IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gSWNlIENyZWFtIENvbnNwaXJhY3lcIixcbiAgICAgIFwiZGVzY3JpcHRpb25fb3JpZ2luYWxcIjogXCI8cD5IdXJyeSB0byA8YSBocmVmPVxcXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9yZWRpcmVjdD9xPWh0dHAlM0ElMkYlMkZ1cHN0YXJ0LmNvbSUyRlNDQiZhbXA7cmVkaXJfdG9rZW49N2FtR05PYVI4RDhqZzdsU3VveHdkMzBRdmFCOE1UVTNPVEV4TVRBMU1rQXhOVGM1TURJME5qVXkmYW1wO3Y9cW1CNGljSXA4Sk0mYW1wO2V2ZW50PXZpZGVvX2Rlc2NyaXB0aW9uXFxcIj5odHRwOi8vdXBzdGFydC5jb20vU0NCPC9hPiB0byBmaW5kIG91dCBIT1cgTE9XIHlvdXIgVXBzdGFydCByYXRlIGlzLjwvcD4gPHA+XFx1MDBhMDwvcD4gPHA+VGhlIE1hbmRhbG9yaWFuIGhhcyBpbnRyb2R1Y2VkIHRvIHVzIHNvbWUgYnJhbmQgbmV3IFN0YXIgV2FycyBKYXJnb24uIEluIHRoZSB2ZXJ5IGZpcnN0IGVwaXNvZGUgd2UgbGVhcm4gYWJvdXQgYSBzcGVjaWFsIG1ldGFsIGNhbGxlZCBCZXNrYXIgdGhhdCBjYW4gYmUgbWVsdGVkIGRvd24gYW5kIHJlaW5mb3JjZSB0aGUgTWFuZGFsb3JpYW5cXHUyMDE5cyBhcm1vci4gV2UgYWxzbyBrbm93IHRoYXQgaWYgaGUgY2FuIGNvbXBsZXRlIGhpcyBtaXNzaW9uIGhlIGhhcyBhbiBFTlRJUkUgQ0FNT05UTyBvZiB0aGUgc3R1ZmYgd2FpdGluZyBmb3IgaGltIHVwb24gZGVsaXZlcnkgb2YgdGhlIFlvdW5nIE9ycGhhbiBEYXJsaW5nIEFzc2V0LCBha2EgTElMIFlPREEuIEJ1dCBob3cgbXVjaCBpcyBhIGNhbXRvbm8/IEFuZCBob3cgb24gVEFUT09JTkUgY291bGQgaXQgaGF2ZSBhbnl0aGluZyB0byBkbyB3aXRoIElDRSBDUkVBTSE/PC9wPlwiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9oaWdobGlnaHRlZFwiOiBcIi4uLlRoZSBNYW5kYWxvcmlhbiBoYXMgaW50cm9kdWNlZCB0byB1cyBzb21lIGJyYW5kIG5ldyA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IEphcmdvbi4uLi5cIixcbiAgICAgIFwidHJhbnNjcmlwdHNfaGlnaGxpZ2h0ZWRcIjogW11cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI0MmIxODk4ZGI2YTg0OTczYjQxODc5NjE4MDAyOTM3YlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3RoZXZpbnRhZ2VycGdwb2RjYXN0LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3RoZXZpbnRhZ2VycGdwb2RjYXN0LmxpYnN5bi5jb20vc3Rhci13YXJzLWdhbGF4eS1ndWlkZXM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzQyYjE4OThkYjZhODQ5NzNiNDE4Nzk2MTgwMDI5MzdiL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdmludGFnZS1ycGctcG9kY2FzdC12aW50YWdlLXJwZy1WOE1qdk5uU1JCdC1lcTh1R1VZNnZYTi4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiZjMwOTRhMGIxNDY4NDMwMGEzZDZiNjlhMTA2M2U3MDhcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdmludGFnZS1ycGctcG9kY2FzdC12aW50YWdlLXJwZy1WOE1qdk5uU1JCdC1lcTh1R1VZNnZYTi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgICA4MixcbiAgICAgICAgICA4NSxcbiAgICAgICAgICA4M1xuICAgICAgICBdLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdmludGFnZS1ycGctcG9kY2FzdC12aW50YWdlLXJwZy1NZy0yWlljbUVSVC1lcTh1R1VZNnZYTi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NyxcbiAgICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlRoZSBWaW50YWdlIFJQRyBQb2RjYXN0XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZjMwOTRhMGIxNDY4NDMwMGEzZDZiNjlhMTA2M2U3MDgvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJUaGUgVmludGFnZSBSUEcgUG9kY2FzdFwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIlZpbnRhZ2UgUlBHXCIsXG4gICAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiVmludGFnZSBSUEdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxJVwiXG4gICAgICB9LFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTQwOTQ3NzgzMCxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS12aW50YWdlLXJwZy1wb2RjYXN0LXZpbnRhZ2UtcnBnLU1nLTJaWWNtRVJULWVxOHVHVVk2dlhOLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NzU4Njc2MDAxMjIsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI5ODYxMTA1ZC1iZjk4LTQ2ODQtODcxYS01Y2JlMTE0ODQxNTlcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJTdGFyIFdhcnMgR2FsYXh5IEd1aWRlc1wiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80MmIxODk4ZGI2YTg0OTczYjQxODc5NjE4MDAyOTM3Yi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxNTE5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gR2FsYXh5IEd1aWRlc1wiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9vcmlnaW5hbFwiOiBcIjxwPkJlY2F1c2UgU3RhciBXYXJzIGlzIGhpdHRpbmcgdGhlIGNyaXRpY2FsIG1hc3MgcG9pbnQgZm9yIDIwMTksIHdlIGZpZ3VyZWQgd2UnZCBhZGQgdG8gdGhlIGZ1biB3aXRoIGFuIGVwaXNvZGUgdGhhdCBsb29rcyBhdCB0aGUgR2FsYXh5IEd1aWRlcyBzZXJpZXMgb2Ygc291cmNlYm9va3MgZm9yIHRoZSBXZXN0IEVuZCBHYW1lcyBTdGFyIFdhcnMgUm9sZSBQbGF5aW5nIEdhbWUuIFdlIHRha2UgYSBxdWljayB0b3VyIHRocm91Z2ggZWFjaCBvZiB0aGUgdHdlbHZlIHZvbHVtZXMgYW5kIGNoYXQgYWJvdXQgd2hhdCB0aGV5IGFkZGVkIHRvIHRoZSBSUEcgZXhwZXJpZW5jZSBhbmQgaG93IHRoZXkgZm9ybWVkIHRoZSBiYWNrYm9uZSBvZiB0aGUgZ3JlYXRlciBTdGFyIFdhcnMgRXhwYW5kZWQgVW5pdmVyc2UuPC9wPiA8cCBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXCI+KiAqICo8L3A+IDxwPklmXFx1MDBhMCB5b3UgZGlnIHdoYXQgd2UgZG8sIGpvaW4gdXMgb24gdGhlIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnBhdHJlb24uY29tL3ZpbnRhZ2VycGdcXFwiPlZpbnRhZ2UgUlBHIFBhdHJlb248L2E+IGZvciBtb3JlIHJvbGVwbGF5aW5nIGZ1biBhbmQgc3VycHJpc2VzISBQYXRyb25zIGtlZXAgdXMgZ29pbmchPC9wPiA8cD5MaWtlLCBSYXRlLCBTdWJzY3JpYmUgYW5kIFJldmlldyB0aGUgVmludGFnZSBSUEcgUG9kY2FzdCE8L3A+IDxwPlNlbmQgcXVlc3Rpb25zLCBjb21tZW50cyBvciBjb3JyZWN0aW9ucyB0b1xcdTAwYTA8YSBocmVmPVxcXCJtYWlsdG86dmludGFnZXJwZ0B1bndpbm5hYmxlLmNvbVxcXCI+aW5mb0B2aW50YWdlcnBnLmNvbTwvYT4uPC9wPiA8cD5Gb2xsb3dcXHUwMGEwVmludGFnZSBSUEdcXHUwMGEwb25cXHUwMGEwPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS92aW50YWdlcnBnL1xcXCI+SW5zdGFncmFtPC9hPixcXHUwMGEwPGEgaHJlZj1cXFwiaHR0cHM6Ly92aW50YWdlcnBnLnR1bWJsci5jb20vXFxcIj5UdW1ibHI8L2E+XFx1MDBhMGFuZFxcdTAwYTA8YSBocmVmPVxcXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vdmludGFnZXJwZ1xcXCI+RmFjZWJvb2s8L2E+LiBMZWFybiBtb3JlIGF0IHRoZVxcdTAwYTA8YSBocmVmPVxcXCJodHRwczovL3ZpbnRhZ2VycGcuY29tL3ZpbnRhZ2UtcnBnLWZhcS9cXFwiPlZpbnRhZ2UgUlBHIEZBUTwvYT4uPC9wPiA8cD5Gb2xsb3dcXHUwMGEwPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9TdHVIb3J2YXRoXFxcIj5TdHUgSG9ydmF0aDwvYT4sXFx1MDBhMDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vSGFtYnJlYWtlclxcXCI+Sm9obiBNY0d1aXJlPC9hPixcXHUwMGEwPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9WaW50YWdlX1JQR1xcXCI+VmludGFnZVJQRzwvYT5cXHUwMGEwYW5kXFx1MDBhMDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vdW53aW5uYWJsZVxcXCI+VW53aW5uYWJsZTwvYT5cXHUwMGEwb24gVHdpdHRlci48L3A+IDxwPkludHJvIG11c2ljIGJ5XFx1MDBhMDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmRlYWRnb3dlc3QuY29tL1xcXCI+R2VvcmdlIENvbGxhem88L2E+LjwvcD4gPHA+VGhlIFZpbnRhZ2UgUlBHIGlsbHVzdHJhdGlvbiBpcyBieVxcdTAwYTA8YSBocmVmPVxcXCJodHRwOi8vd3d3LnNoYWZlcmJyb3duLmNvbS9cXFwiPlNoYWZlciBCcm93bjwvYT4uIEZvbGxvd1xcdTAwYTA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL3NoYWZlcmJyb3duXFxcIj5oaW0gb24gVHdpdHRlcjwvYT4uPC9wPiA8cD5UdW5lIGluIG5leHQgd2VlayBmb3IgdGhlIG5leHQgZXBpc29kZS4gVW50aWwgdGhlbiwgbWF5IHRoZSBkaWNlIGFsd2F5cyByb2xsIGluIHlvdXIgZmF2b3IhPC9wPlwiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9oaWdobGlnaHRlZFwiOiBcIi4uLkJlY2F1c2UgPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPiBpcyBoaXR0aW5nIHRoZSBjcml0aWNhbCBtYXNzIHBvaW50IGZvciAyMDE5LCB3ZSBmaWd1cmVkIHdlJ2QgYWRkIHRvIHRoZSBmdW4gd2l0aCBhbiBlcGlzb2RlIHRoYXQgbG9va3MgYXQgdGhlIEdhbGF4eSBHdWlkZXMgc2VyaWVzIG9mIHNvdXJjZWJvb2tzIGZvciB0aGUgV2VzdCBFbmQgR2FtZXMgPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPiBSb2xlLi4uXCIsXG4gICAgICBcInRyYW5zY3JpcHRzX2hpZ2hsaWdodGVkXCI6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiOWNmYjQ5MDFhODkxNDQ5YWEzMDU1M2NkZGZhNTgyZjhcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cDovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3N3N3g3LmxpYnN5bi5jb20vMTk0NS1hbnN3ZXJpbmctc3Rhci13YXJzLXF1ZXN0aW9ucy1mcm9tLXN0YXItd2Fycy03Ny1wYXRyb25zP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC85Y2ZiNDkwMWE4OTE0NDlhYTMwNTUzY2RkZmE1ODJmOC9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUtZGFpbHktc3Rhci13YXJzLXBvZGNhc3QtSE4wOE9vREU3cGMtQUlnM2NaVktDc0wuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUtZGFpbHktc3Rhci13YXJzLXBvZGNhc3QtSE4wOE9vREU3cGMtQUlnM2NaVktDc0wuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgICAgODYsXG4gICAgICAgICAgNjgsXG4gICAgICAgICAgODIsXG4gICAgICAgICAgMTAwLFxuICAgICAgICAgIDEwMSxcbiAgICAgICAgICAxNjAsXG4gICAgICAgICAgMTM4XG4gICAgICAgIF0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLWRhaWx5LXN0YXItd2Fycy1wb2RjYXN0LTJMcnlxTWotc0dQLUFJZzNjWlZLQ3NMLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ4LFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzIDd4NzogVGhlIERhaWx5IFN0YXIgV2FycyBQb2RjYXN0XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTdGFyIFdhcnMgN3g3OiBUaGUgRGFpbHkgU3RhciBXYXJzIFBvZGNhc3RcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJTdGFyIFdhcnMgN3g3XCIsXG4gICAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiU3RhciBXYXJzIDd4N1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgIH0sXG4gICAgICBcIml0dW5lc19pZFwiOiA4OTYzNTQ2MzgsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS1kYWlseS1zdGFyLXdhcnMtcG9kY2FzdC0yTHJ5cU1qLXNHUC1BSWczY1pWS0NzTC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTcyNTA1MjAwOTExLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZGFjZjE0NTEzZGQzNGVkZGFhY2U0ZjFiNGJjMjdmODZcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCIxLDk0NS4gQW5zd2VyaW5nIFN0YXIgV2FycyBRdWVzdGlvbnMgZnJvbSBTdGFyIFdhcnMgN1xcdTAwZDc3IFBhdHJvbnMhXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzljZmI0OTAxYTg5MTQ0OWFhMzA1NTNjZGRmYTU4MmY4L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDc3NyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJBbnN3ZXJpbmcgPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPiBRdWVzdGlvbnMgZnJvbSA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IDdcXHUwMGQ3NyBQYXRyb25zIVwiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9vcmlnaW5hbFwiOiBcIjxwPlBhdHJvbnMgb2YgU3RhciBXYXJzIDd4NyBhdCB0aGUgXFxcIlZhZGVyJ3MgRmlzdFxcXCIgbGV2ZWwgYW5kIGFib3ZlIGNhbiBzdWJtaXQgcXVlc3Rpb25zIGZvciBtZSB0byBhbnN3ZXIgb24gdGhlIHNob3cgZXZlcnkgbW9udGghIEluIHRoaXMgaW5zdGFsbG1lbnQsIHdlJ2xsIGJlIHRhbGtpbmcgYWJvdXQgYW4gYXNwZWN0IG9mIHRoZSBNaWxsZW5uaXVtIEZhbGNvbiBhcyBpdCBhcHBlYXJzIGluIFRoZSBSaXNlIG9mIFNreXdhbGtlcjsgd2h5IEJlbiBTb2xvIG1heSBvciBtYXkgbm90IGhhdmUgdGFsa2VkIHRvIGhpcyBGb3JjZS1naG9zdCBncmFuZGZhdGhlcjsgYW5kIGZhdm9yaXRlIFN0YXIgV2FycyBIYWxsb3dlZW4gY29zdHVtZXMuIFB1bmNoIGl0ITwvcD4gPHA+KioqSSdtIGxpc3RlbmVyIHN1cHBvcnRlZCEgSm9pbiB0aGUgY29tbXVuaXR5IGF0IGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBnZXQgYWNjZXNzIHRvIGJvbnVzIGVwaXNvZGVzIGFuZCBvdGhlciBpbnNpZGVyIHJld2FyZHMuKioqXFx1MDBhMDwvcD5cIixcbiAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjogXCIuLi5QYXRyb25zIG9mIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gN3g3IGF0IHRoZSBcXFwiVmFkZXIncyBGaXN0XFxcIiBsZXZlbCBhbmQgYWJvdmUgY2FuIHN1Ym1pdCBxdWVzdGlvbnMgZm9yIG1lIHRvIGFuc3dlciBvbiB0aGUgc2hvdyBldmVyeSBtb250aCEuLi5cIixcbiAgICAgIFwidHJhbnNjcmlwdHNfaGlnaGxpZ2h0ZWRcIjogW11cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2MjgwYTExNDY2ZGQ0MDdlOTljNjYxMzBmMjAzMTY3YVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3NubGFmdGVycGFydHkubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc25scG9kY2FzdC5jb20vZXBpc29kZXMvMjAxOS8xMi8yNC9zYW1wbGUtc3Rhci13YXJzLXR2LXRhbGstcG9kY2FzdD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvNjI4MGExMTQ2NmRkNDA3ZTk5YzY2MTMwZjIwMzE2N2EvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NhdHVyZGF5LW5pZ2h0LWxpdmUtc25sLWFmdGVycGFydHktam9obi1zRW9UcmFMbktQQi1faU9FNGxMWjJwRC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiMDliOTg2ZTUwM2Q0NDQ4YWIwYjYyNWY2MjMzYmRkNjVcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zYXR1cmRheS1uaWdodC1saXZlLXNubC1hZnRlcnBhcnR5LWpvaG4tc0VvVHJhTG5LUEItX2lPRTRsTFoycEQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgICAgNjgsXG4gICAgICAgICAgMTMzLFxuICAgICAgICAgIDEzNFxuICAgICAgICBdLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zYXR1cmRheS1uaWdodC1saXZlLXNubC1hZnRlcnBhcnR5LWpvaG4td20xQ3RRVmtSZnktX2lPRTRsTFoycEQuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDQsXG4gICAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJTYXR1cmRheSBOaWdodCBMaXZlIChTTkwpIEFmdGVycGFydHlcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8wOWI5ODZlNTAzZDQ0NDhhYjBiNjI1ZjYyMzNiZGQ2NS9cIixcbiAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIlNhdHVyZGF5IE5pZ2h0IExpdmUgKFNOTCkgQWZ0ZXJwYXJ0eVwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIkpvaG4gTXVycmF5IC8gU3ByeSBGTVwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiBcIkpvaG4gTXVycmF5IC8gU3ByeSBGTVwiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgIH0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMTMzMzgxMjI1LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc2F0dXJkYXktbmlnaHQtbGl2ZS1zbmwtYWZ0ZXJwYXJ0eS1qb2huLXdtMUN0UVZrUmZ5LV9pT0U0bExaMnBELjMwMHgzMDAuanBnXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NzY5ODkwMDAwNjYsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI5ODIwNmI2ZS1mYzZlLTQ1YTUtODVhNi1lNTRlYjQ2NTcyOTlcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJTYW1wbGU6IFN0YXIgV2FycyBUViBUYWxrIFBvZGNhc3RcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNjI4MGExMTQ2NmRkNDA3ZTk5YzY2MTMwZjIwMzE2N2EvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTY5MCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTYW1wbGU6IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gVFYgVGFsayBQb2RjYXN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IFwiPHA+V2hpbGUgSm9obiBpcyBoYXJkIGF0IHdvcmsgZWRpdGluZyBvdXIgY292ZXJhZ2Ugb2YgRWRkaWUgTXVycGh5J3MgdHJpdW1waGFudCByZXR1cm4gdG8gU3R1ZGlvIDhILCBwbGVhc2UgZW5qb3kgdGhpcyBleGNlcnB0IGZyb20gdGhlIFN0YXIgV2FycyBUViBUYWxrIHBvZGNhc3RcXHUyMDE0b24gd2hpY2ggSm9obiBpcyByZWd1bGFybHkgZmVhdHVyZWQuPC9wPiA8cD5UaGlzIGV4Y2VycHQgaXMgZnJvbSB0aGVpciBkaXNjdXNzaW9uIG9mIHRoZSBEaXNuZXkrIHN0cmVhbWluZyBzZXJpZXMgVGhlIE1hbmRhbG9yaWFuIGNoYXB0ZXIgMzogXFxcIlRoZSBTaW5cXFwiLCBhbmQgY29udGFpbnMgaGVhdnkgc3BvaWxlcnMuPC9wPiA8cD5Kb2huJ3MgdGFrZSBvbiBhbGwgdGhpbmdzIFN0YXIgV2FycyBUViwgY2FuIGJlIGhlYXJkIHdlZWtseSBhdCA8YSBocmVmPVxcXCJodHRwczovL3N0YXJ3YXJzdHZ0YWxrLmNvbVxcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPnN0YXJ3YXJzdHZ0YWxrLmNvbTwvYT4gb3IgYnkgc3Vic2NyaWJpbmcgdG8gXFxcIlN0YXIgV2FycyBUViBUYWxrXFxcIiB3aGVyZXZlciBiZXR0ZXIgcG9kY2FzdHMgY2FuIGJlIGZvdW5kLjwvcD4gR2V0IE91ciBGdWxsLUxlbmd0aCBFcGlzb2RlcyBvbiBQYXRyZW9uIDx1bD4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnBhdHJlb24uY29tL3NubHBvZGNhc3RcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5QYXRyZW9uPC9hPjogQmVjb21lIGEgcGF0cm9uIHRvIGFjY2VzcyBvdXIgZnVsbC1sZW5ndGgsIGFkLWZyZWUgZXBpc29kZXMgYW5kIG90aGVyIGV4Y2x1c2l2ZSBtZW1iZXIgcmV3YXJkcy48L2xpPiA8L3VsPiBOb3RlcyA8dWw+IDxsaT48YSBocmVmPVxcXCJodHRwczovL2Rhcnlsc2JhcnMuY29tL3JlZi9qb2huL1xcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkRhcnlsJ3MgQWxsIE5hdHVyYWwgUHJvdGVpbiBCYXJzPC9hPjogV2hvbGVzb21lLCBudXRyaXRpb3VzLCBncmVhdCB0YXN0aW5nLCBnbHV0ZW4gZnJlZSwgbG93LWNhcmIgcHJvdGVpbiBiYXJzLjwvbGk+IDwvdWw+IDx1bD4gPGxpPkNvbm5lY3Qgd2l0aCB1cyBhdDogPHVsPiA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3NubHBvZGNhc3QuY29tXFxcIiByZWw9XFxcIm5vb3BlbmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+c25scG9kY2FzdC5jb208L2E+PC9saT4gPGxpPlBhdHJlb246IDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnBhdHJlb24uY29tL3NubHBvZGNhc3RcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5zbmxwb2RjYXN0PC9hPjwvbGk+IDxsaT5Ud2l0dGVyOiA8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL3NubHBvZGNhc3RcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Ac25scG9kY2FzdDwvYT48L2xpPiA8bGk+SW5zdGFncmFtOiA8YSBocmVmPVxcXCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3NubHBvZGNhc3QvXFxcIiByZWw9XFxcIm5vb3BlbmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+c25scG9kY2FzdDwvYT48L2xpPiA8bGk+RmFjZWJvb2s6IDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9zbmxwb2RjYXN0L1xcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkBzbmxwb2RjYXN0PC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJtYWlsdG86ZmVlZGJhY2tAc25scG9kY2FzdC5jb21cXFwiPmZlZWRiYWNrQHNubHBvZGNhc3QuY29tPC9hPjwvbGk+IDwvdWw+IDwvbGk+IDwvdWw+XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX2hpZ2hsaWdodGVkXCI6IFwiLi4uSm9obidzIHRha2Ugb24gYWxsIHRoaW5ncyA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IFRWLCBjYW4gYmUgaGVhcmQgd2Vla2x5IGF0IHN0YXJ3YXJzdHZ0YWxrLmNvbSBvciBieSBzdWJzY3JpYmluZyB0byBcXFwiPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPiBUViBUYWxrXFxcIiB3aGVyZXZlciBiZXR0ZXIgcG9kY2FzdHMgY2FuIGJlIGZvdW5kLi4uLlwiLFxuICAgICAgXCJ0cmFuc2NyaXB0c19oaWdobGlnaHRlZFwiOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjM5NzQ2Y2NmYzBkNjRmNjJhZWE4ZTk2NjQxMzY2MTA5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vd3d3LnNwcmVha2VyLmNvbS9zaG93LzMyMDA4MjIvZXBpc29kZXMvZmVlZFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuc3ByZWFrZXIuY29tL3VzZXIvbWN1Y2FzdC9zdGFyLXdhcnMtaXMtYmV0dGVyLXRoYW4tc3Rhci10cmVrP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8zOTc0NmNjZmMwZDY0ZjYyYWVhOGU5NjY0MTM2NjEwOS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFydmVsLWNpbmVtYXRpYy11bml2ZXJzZS1wb2RjYXN0LWRlUm83TERRQmZuLWFYUjdWdUcyejRwLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI1OTNjNDJlMzQzYmE0NGU3YjZmODYzNGE5NDZmMGI1MlwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hcnZlbC1jaW5lbWF0aWMtdW5pdmVyc2UtcG9kY2FzdC1kZVJvN0xEUUJmbi1hWFI3VnVHMno0cC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgICA2OCxcbiAgICAgICAgICA5OSxcbiAgICAgICAgICAxMjJcbiAgICAgICAgXSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFydmVsLWNpbmVtYXRpYy11bml2ZXJzZS1wb2RjYXN0LXdWRGVIcmR4WkpoLWFYUjdWdUcyejRwLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYwLFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiTWFydmVsIENpbmVtYXRpYyBVbml2ZXJzZSBQb2RjYXN0XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNTkzYzQyZTM0M2JhNDRlN2I2Zjg2MzRhOTQ2ZjBiNTIvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJNYXJ2ZWwgQ2luZW1hdGljIFVuaXZlcnNlIFBvZGNhc3RcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJTdHJhbmRlZCBQYW5kYVwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiBcIlN0cmFuZGVkIFBhbmRhXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICB9LFxuICAgICAgXCJpdHVuZXNfaWRcIjogOTA3MTc1MzIyLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFydmVsLWNpbmVtYXRpYy11bml2ZXJzZS1wb2RjYXN0LXdWRGVIcmR4WkpoLWFYUjdWdUcyejRwLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NzU1MjEzODYyODQsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJodHRwczovL2FwaS5zcHJlYWtlci5jb20vZXBpc29kZS8yMDQ5NTQxNVwiLFxuICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlN0YXIgV2FycyBpcyBiZXR0ZXIgdGhhbiBTdGFyIFRyZWtcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMzk3NDZjY2ZjMGQ2NGY2MmFlYThlOTY2NDEzNjYxMDkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNzM0LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gaXMgYmV0dGVyIHRoYW4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IFRyZWtcIixcbiAgICAgIFwiZGVzY3JpcHRpb25fb3JpZ2luYWxcIjogXCJBIGp1c3QgZm9yIGZ1biBlcGlzb2RlLiAgVGltZSB0byBwdW5pc2ggTWF0dCBmb3IgaGlzIHNpbnMgYWdhaW5zdCBiYWJ5IHlvZGFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjogXCIuLi5BIGp1c3QgZm9yIGZ1biBlcGlzb2RlLiAgVGltZSB0byBwdW5pc2ggTWF0dCBmb3IgaGlzIHNpbnMgYWdhaW5zdCBiYWJ5IHlvZGEuLi5cIixcbiAgICAgIFwidHJhbnNjcmlwdHNfaGlnaGxpZ2h0ZWRcIjogW11cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmMTNkOGMyMzQzZTc0ODg1ODQ2NDE2N2I0MjZmZTY3YlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLm1lZ2FwaG9uZS5mbS9ST09TVEVSNzE5OTI1MDk2OFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdXBlcmNhcmxpbmJyb3RoZXJzLmxpYnN5bi5jb20vc3Rhci13YXJzLXRoZW9yeS10aGUtd2hpdGUtc2FiZXItdGhlb3J5P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9mMTNkOGMyMzQzZTc0ODg1ODQ2NDE2N2I0MjZmZTY3Yi9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3VwZXItY2FybGluLWJyb3RoZXJzLWotYW5kLWJlbi1jYXJsaW4tRnlxN2NZUzlOT3MtQm9kRHI3aUlBUjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjhiZGJiOTA2ZWVmMDRlNWQ4YjM5MWU5NDc5OThlOWFmXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3VwZXItY2FybGluLWJyb3RoZXJzLWotYW5kLWJlbi1jYXJsaW4tRnlxN2NZUzlOT3MtQm9kRHI3aUlBUjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgICAgNjgsXG4gICAgICAgICAgMjE0LFxuICAgICAgICAgIDI2NSxcbiAgICAgICAgICA5OVxuICAgICAgICBdLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1UU2Z4aUJhcU93Sy1Cb2REcjdpSUFSMy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1MyxcbiAgICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlN1cGVyIENhcmxpbiBCcm90aGVyc1wiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzhiZGJiOTA2ZWVmMDRlNWQ4YjM5MWU5NDc5OThlOWFmL1wiLFxuICAgICAgICBcInRpdGxlX2hpZ2hsaWdodGVkXCI6IFwiU3VwZXIgQ2FybGluIEJyb3RoZXJzXCIsXG4gICAgICAgIFwicHVibGlzaGVyX29yaWdpbmFsXCI6IFwiSiBhbmQgQmVuIENhcmxpblwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiBcIkogYW5kIEJlbiBDYXJsaW5cIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgIH0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxNDc5MTEyNzk4LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3VwZXItY2FybGluLWJyb3RoZXJzLWotYW5kLWJlbi1jYXJsaW4tVFNmeGlCYXFPd0stQm9kRHI3aUlBUjMuMzAweDMwMC5qcGdcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU3NjYwMjAwMDI1NSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjFhMmI5Njc4LTc4NzktNDQ4MC05NGM3LWFmYTE0OTNlOWVmOVwiLFxuICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlN0YXIgV2FycyBUaGVvcnk6IFRoZSBXaGl0ZSBTYWJlciBUaGVvcnlcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZjEzZDhjMjM0M2U3NDg4NTg0NjQxNjdiNDI2ZmU2N2IvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogODA3LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gVGhlb3J5OiBUaGUgV2hpdGUgU2FiZXIgVGhlb3J5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IFwiPHA+V2l0aCBTdGFyIFdhcnMgRXBpc29kZSA5IFRoZSBSaXNlIG9mIFNreXdhbGtlciBqdXN0IGRheXMgYXdheSBKIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBHYWxheHkgdG8gZGlzY3VzcyB0aGUgZnV0dXJlIG9mIEt5bG8gUmVuXFx1MjAxOXMgTGlnaHRzYWJlciBhbmQgdGhlIFdoaXRlIFNhYmVyIHRoZW9yeSE8L3A+XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX2hpZ2hsaWdodGVkXCI6IFwiLi4uV2l0aCA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IEVwaXNvZGUgOSBUaGUgUmlzZSBvZiBTa3l3YWxrZXIganVzdCBkYXlzIGF3YXkgSiBkaXZlcyBpbnRvIHRoZSA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IEdhbGF4eSB0byBkaXNjdXNzIHRoZSBmdXR1cmUgb2YgS3lsbyBSZW5cXHUyMDE5cyBMaWdodHNhYmVyIGFuZCB0aGUgV2hpdGUgU2FiZXIgdGhlb3J5IS4uLlwiLFxuICAgICAgXCJ0cmFuc2NyaXB0c19oaWdobGlnaHRlZFwiOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImVhMDliNTc1ZDA3MzQxNTk5ZDhkNWI3MWYyMDU1MTdiXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vdGhlcm91Z2hjdXQubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHA6Ly90aGVyb3VnaGN1dHBvZC5jb20vP3A9Nzg2JnV0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9lYTA5YjU3NWQwNzM0MTU5OWQ4ZDViNzFmMjA1NTE3Yi9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXJvdWdoLWN1dC1tYXR0LWZldXJ5LVlNaGE4RHhuVWJjLTUzTUxoN05wQXdtLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI4NzU4ZGE5YmU2Yzg0NTI4ODRhOGNhYjYzNzNiMDA3Y1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1yb3VnaC1jdXQtbWF0dC1mZXVyeS1ZTWhhOER4blViYy01M01MaDdOcEF3bS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgICA2OCxcbiAgICAgICAgICAyNjRcbiAgICAgICAgXSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXJvdWdoLWN1dC1tYXR0LWZldXJ5LURFa0ZfOHliajZBLTUzTUxoN05wQXdtLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDM5LFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiVGhlIFJvdWdoIEN1dFwiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzg3NThkYTliZTZjODQ1Mjg4NGE4Y2FiNjM3M2IwMDdjL1wiLFxuICAgICAgICBcInRpdGxlX2hpZ2hsaWdodGVkXCI6IFwiVGhlIFJvdWdoIEN1dFwiLFxuICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIk1hdHQgRmV1cnlcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjogXCJNYXR0IEZldXJ5XCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMiVcIlxuICAgICAgfSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE0NzE1NTYwMDcsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtcm91Z2gtY3V0LW1hdHQtZmV1cnktREVrRl84eWJqNkEtNTNNTGg3TnBBd20uMzAweDMwMC5qcGdcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU3OTUwNzIxNjEzMixcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjAwNGYwM2M4LWNkZjktNGZmNS05ZDg5LWIyMTQ3ZjhkNTVjZlwiLFxuICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlN0YXIgV2FycyAtIFRoZSBGb3JjZSBBd2FrZW5zXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2VhMDliNTc1ZDA3MzQxNTk5ZDhkNWI3MWYyMDU1MTdiL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE2OTQsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcInRpdGxlX2hpZ2hsaWdodGVkXCI6IFwiPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPiAtIFRoZSBGb3JjZSBBd2FrZW5zXCIsXG4gICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IFwiPHA+SW4gdGhpcyBlcGlzb2RlIG9mIFRoZSBSb3VnaCBDdXQgd2UgY2xvc2Ugb3V0IG91ciBzdHVkeSBvZiB0aGUgZmluYWwgU2t5d2Fsa2VyIHRyaWxvZ3kgd2l0aCBhIGxvb2sgYmFjayBvbiB0aGUgZmlsbSB0aGF0IGhlbHBlZCB0aGUgZG9ybWFudCBmcmFuY2hpc2UgbWFrZSB0aGUganVtcCB0byBsaWdodHNwZWVkLCA8YSBocmVmPVxcXCJodHRwczovL3d3dy5pbWRiLmNvbS90aXRsZS90dDI0ODg0OTYvXFxcIj5FcGlzb2RlIFZJSSAtIFRoZSBGb3JjZSBBd2FrZW5zPC9hPi5cXHUwMGEwIFJlY29yZGVkIGluIEFtc3RlcmRhbSBpbiBmcm9udCBvZiBhIGZlc3RpdmFsIGF1ZGllbmNlIGluIDIwMTgsIGVkaXRvciA8YSBocmVmPVxcXCJodHRwczovL3d3dy5pbWRiLmNvbS9uYW1lL25tMDEwNDc4My8/cmVmXz1udl9zcl9zcnNnXzBcXFwiPk1hcnlhbm4gQnJhbmRvbiBBQ0U8L2E+IHJlY291bnRzIGhlciB3b3JrIG9uIDxlbT5UaGUgRm9yY2UgQXdha2VuczwvZW0+IGp1c3QgYXMgc2hlIHdhcyBhYm91dCB0byBiZWdpbiBlZGl0aW5nIHdoYXQgd291bGQgY29tZSB0byBiZSBrbm93biBhcyA8YSBocmVmPVxcXCJodHRwczovL3d3dy5pbWRiLmNvbS90aXRsZS90dDI1MjczMzgvP3JlZl89bm1fZmxtZ19lZHRfMVxcXCI+RXBpc29kZSBJWCAtIFRoZSBSaXNlIG9mIFNreXdhbGtlcjwvYT4uPC9wPiA8cD5cXHUwMGEwPC9wPiA8cD5HbyBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgYW5kIGxpc3RlbiB0byBvdXIgPGEgaHJlZj1cXFwiaHR0cDovL3RoZXJvdWdoY3V0cG9kLmNvbS9wYXVsLWhpcnNjaC9cXFwiPnBvZGNhc3Qgd2l0aCBTdGFyIFdhcnMgYW5kICdFbXBpcmUnIGVkaXRvciwgUGF1bCBIaXJzY2g8L2E+LjwvcD4gPHA+SGVhciBlZGl0b3IgQm9iIER1Y3NheSB0YWxrIGFib3V0IGN1dHRpbmcgPGEgaHJlZj1cXFwiaHR0cDovL3RoZXJvdWdoY3V0cG9kLmNvbS9sYXN0LWplZGkvXFxcIj5UaGUgTGFzdCBKZWRpPC9hPi48L3A+IDxwPkxpc3RlbiB0byBNYXJ5YW5uIEJyYW5kb24gdGFsayBhYm91dCBoZXIgd29yayBvbiA8YSBocmVmPVxcXCJodHRwOi8vdGhlcm91Z2hjdXRwb2QuY29tL3N0YXItd2Fycy9cXFwiPlRoZSBSaXNlIG9mIFNreXdhbGtlcjwvYT4uPC9wPiA8cD5HZXQgeW91ciBoYW5kcyBvbiB0aGUgbm9uLWxpbmVhciBlZGl0b3IgYmVoaW5kIHRoZSBsYXRlc3QgU2t5d2Fsa2VyIHRyaWxvZ3ksXFx1MDBhMCA8YSBocmVmPVxcXCJodHRwczovL3d3dy5hdmlkLmNvbS92aWRlby1lZGl0b3ItcmlnaHQtZm9yLXlvdVxcXCI+QXZpZCBNZWRpYSBDb21wb3NlciE8L2E+PC9wPiA8cD48YSBocmVmPVxcXCJodHRwOi8vdGhlcm91Z2hjdXRwb2QuY29tL3N1YnNjcmliZS9cXFwiPlN1YnNjcmliZSB0byBUaGUgUm91Z2ggQ3V0PC9hPiBmb3IgbW9yZSBncmVhdCBpbnRlcnZpZXdzIHdpdGggdGhlIGhlcm9lcyBvZiB0aGUgZWRpdGluZyByb29tITwvcD4gPHA+XFx1MDBhMDwvcD4gPHA+XFx1MDBhMDwvcD5cIixcbiAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjogXCIuLi5HbyBiYWNrIHRvIHRoZSBiZWdpbm5pbmcgYW5kIGxpc3RlbiB0byBvdXIgcG9kY2FzdCB3aXRoIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gYW5kICdFbXBpcmUnIGVkaXRvciwgUGF1bCBIaXJzY2guIEhlYXIgZWRpdG9yIEJvYiBEdWNzYXkgdGFsayBhYm91dCBjdXR0aW5nIFRoZSBMYXN0IEplZGkuLi4uXCIsXG4gICAgICBcInRyYW5zY3JpcHRzX2hpZ2hsaWdodGVkXCI6IFtdXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiZGU4Njc3YjhjY2ZiNGVkZGJmNDU3MjQyMDUwZjlkNDNcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cDovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3N3N3g3LmxpYnN5bi5jb20vMTk3My1leHByZXNzaW9ucy1vZi1ncmF0aXR1ZGUtaW4tc3Rhci13YXJzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9kZTg2NzdiOGNjZmI0ZWRkYmY0NTcyNDIwNTBmOWQ0My9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUtZGFpbHktc3Rhci13YXJzLXBvZGNhc3QtSE4wOE9vREU3cGMtQUlnM2NaVktDc0wuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUtZGFpbHktc3Rhci13YXJzLXBvZGNhc3QtSE4wOE9vREU3cGMtQUlnM2NaVktDc0wuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgICAgODYsXG4gICAgICAgICAgNjgsXG4gICAgICAgICAgODIsXG4gICAgICAgICAgMTAwLFxuICAgICAgICAgIDEwMSxcbiAgICAgICAgICAxNjAsXG4gICAgICAgICAgMTM4XG4gICAgICAgIF0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLWRhaWx5LXN0YXItd2Fycy1wb2RjYXN0LTJMcnlxTWotc0dQLUFJZzNjWlZLQ3NMLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ4LFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzIDd4NzogVGhlIERhaWx5IFN0YXIgV2FycyBQb2RjYXN0XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTdGFyIFdhcnMgN3g3OiBUaGUgRGFpbHkgU3RhciBXYXJzIFBvZGNhc3RcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJTdGFyIFdhcnMgN3g3XCIsXG4gICAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiU3RhciBXYXJzIDd4N1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgIH0sXG4gICAgICBcIml0dW5lc19pZFwiOiA4OTYzNTQ2MzgsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS1kYWlseS1zdGFyLXdhcnMtcG9kY2FzdC0yTHJ5cU1qLXNHUC1BSWczY1pWS0NzTC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc0OTI4MDAwODgzLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiY2ZjMGM5MzEtMzU0ZC00NzUyLWFhNTktYTI3ZGNmZWZmYzgxXCIsXG4gICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiMSw5NzMuIEV4cHJlc3Npb25zIG9mIEdyYXRpdHVkZSBpbiBTdGFyIFdhcnNcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZGU4Njc3YjhjY2ZiNGVkZGJmNDU3MjQyMDUwZjlkNDMvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNzA5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIkV4cHJlc3Npb25zIG9mIEdyYXRpdHVkZSBpbiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IFwiPHA+VGhlcmUgYXJlIHBhZ2VzIG9mIHRoaW5ncyBvbmxpbmUgYWJvdXQgcGVvcGxlIGdyYXRlZnVsICpmb3IqIFN0YXIgV2FycywgYnV0IG5vdGhpbmcgSSBjb3VsZCBmaW5kIGFib3V0IGV4cHJlc3Npb25zIG9mIGdyYXRpdHVkZSAqd2l0aGluKiBTdGFyIFdhcnMgbW92aWVzLiBBbmQgc28gb24gdGhpcyBUaGFua3NnaXZpbmcgRGF5IGluIHRoZSBVUywgSSdtIGxvb2tpbmcgYXQgd2hpY2ggZXJhIG9mIFN0YXIgV2FycyBtb3ZpZXMgaXMgdGhlIG1vc3QgZ3JhdGVmdWwsIHdoaWNoIG1vdmllcyBoYXZlIHRoZSBtb3N0IGV4cHJlc3Npb25zIG9mIHRoYW5rcywgd2hpY2ggb25lcyBhcmUgdGhlIG1vc3QgaGVhcnRicmVha2luZywgYW5kIHdoaWNoIG9uZSBpcyB0aGUgbW9zdCB0b3VjaGluZy4gUHVuY2ggaXQhPC9wPiA8cD4qKipJJ20gbGlzdGVuZXIgc3VwcG9ydGVkISBKb2luIHRoZSBjb21tdW5pdHkgYXQgaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGdldCBhY2Nlc3MgdG8gYm9udXMgZXBpc29kZXMgYW5kIG90aGVyIGluc2lkZXIgcmV3YXJkcy4qKipcXHUwMGEwPC9wPlwiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9oaWdobGlnaHRlZFwiOiBcIi4uLlRoZXJlIGFyZSBwYWdlcyBvZiB0aGluZ3Mgb25saW5lIGFib3V0IHBlb3BsZSBncmF0ZWZ1bCAqZm9yKiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+LCBidXQgbm90aGluZyBJIGNvdWxkIGZpbmQgYWJvdXQgZXhwcmVzc2lvbnMgb2YgZ3JhdGl0dWRlICp3aXRoaW4qIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gbW92aWVzLi4uLlwiLFxuICAgICAgXCJ0cmFuc2NyaXB0c19oaWdobGlnaHRlZFwiOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImEzNDY5M2ViZjhiMDRhNjRiNDQ4MjA4MjgxOTY1Mjk4XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMubWVnYXBob25lLmZtL1JPT1NURVI3MTk5MjUwOTY4XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3N1cGVyY2FybGluYnJvdGhlcnMubGlic3luLmNvbS9zdGFyLXdhcnMtdGhlb3J5LXdhcy1oYW4tc29sby1mb3JjZS1zZW5zaXRpdmU/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2EzNDY5M2ViZjhiMDRhNjRiNDQ4MjA4MjgxOTY1Mjk4L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1GeXE3Y1lTOU5Pcy1Cb2REcjdpSUFSMy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiOGJkYmI5MDZlZWYwNGU1ZDhiMzkxZTk0Nzk5OGU5YWZcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1GeXE3Y1lTOU5Pcy1Cb2REcjdpSUFSMy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgICA2OCxcbiAgICAgICAgICAyMTQsXG4gICAgICAgICAgMjY1LFxuICAgICAgICAgIDk5XG4gICAgICAgIF0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N1cGVyLWNhcmxpbi1icm90aGVycy1qLWFuZC1iZW4tY2FybGluLVRTZnhpQmFxT3dLLUJvZERyN2lJQVIzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDUzLFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3VwZXIgQ2FybGluIEJyb3RoZXJzXCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOGJkYmI5MDZlZWYwNGU1ZDhiMzkxZTk0Nzk5OGU5YWYvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTdXBlciBDYXJsaW4gQnJvdGhlcnNcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJKIGFuZCBCZW4gQ2FybGluXCIsXG4gICAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiSiBhbmQgQmVuIENhcmxpblwiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgfSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE0NzkxMTI3OTgsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1UU2Z4aUJhcU93Sy1Cb2REcjdpSUFSMy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc1OTk3MjAwMjU3LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiYTNmMWZmMTktN2NlMS00MDY5LThlZmUtYWU3NzI3ZmIwYjk4XCIsXG4gICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzIFRoZW9yeTogV2FzIEhhbiBTb2xvIEZvcmNlIFNlbnNpdGl2ZT9cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvYTM0NjkzZWJmOGIwNGE2NGI0NDgyMDgyODE5NjUyOTgvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogOTAwLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gVGhlb3J5OiBXYXMgSGFuIFNvbG8gRm9yY2UgU2Vuc2l0aXZlP1wiLFxuICAgICAgXCJkZXNjcmlwdGlvbl9vcmlnaW5hbFwiOiBcIjxwPlRvZGF5IEogZGl2ZXMgaW50byB0aGUgU3RhciBXYXJzIEdhbGF4eSB0byB0cnkgYW5kIGFuc3dlciBhbiBhZ2Ugb2xkIHF1ZXN0aW9uOiBDb3VsZCBIYW4gU29sbyB1c2UgVGhlIEZvcmNlPyBXZSBtZWV0IEhhbiBTb2xvIGFzIGEgc29tZXdoYXQgb3ZlcmNvbmZpZGVudCBwaWxvdCB3aG8gc2VlbXMgdG8gbWFrZSBoaXMgd2F5IHRocm91Z2ggdGhlIGdhbGF4eSB0aGFua3MgdG8gaGlzIGNoYXJtLCBhIGJpdCBvZiB3aXQsIGFuZCBhIGxvdCBvZiBsdWNrLiBCdXQgdG9kYXkgd2UgZXhhbWluZSB3aGV0aGVyIG9yIG5vdCBhbGwgb2YgdGhhdCBsdWNrIGJlaGluZCBIYW5cXHUyMDE5cyBzdWNjZXNzIGlzIHNpbXBseSBsdWNrIE9SIGlzIGl0IHNvbWV0aGluZyBlbHNlPyE8L3A+XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX2hpZ2hsaWdodGVkXCI6IFwiLi4uVG9kYXkgSiBkaXZlcyBpbnRvIHRoZSA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IEdhbGF4eSB0byB0cnkgYW5kIGFuc3dlciBhbiBhZ2Ugb2xkIHF1ZXN0aW9uOiBDb3VsZCBIYW4gU29sbyB1c2UgVGhlIEZvcmNlPy4uLlwiLFxuICAgICAgXCJ0cmFuc2NyaXB0c19oaWdobGlnaHRlZFwiOiBbXVxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjhkNmZkZWUyMjhkYzQ1MmJiZmM0MjJhZjFjZWQ1ZTY4XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMubWVnYXBob25lLmZtL1JPT1NURVI3MTk5MjUwOTY4XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3RyYWZmaWMubGlic3luLmNvbS9zZWN1cmUvc3VwZXJjYXJsaW5icm90aGVycy9MaWxfWW9kYS5tcDM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzhkNmZkZWUyMjhkYzQ1MmJiZmM0MjJhZjFjZWQ1ZTY4L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1GeXE3Y1lTOU5Pcy1Cb2REcjdpSUFSMy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiOGJkYmI5MDZlZWYwNGU1ZDhiMzkxZTk0Nzk5OGU5YWZcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1GeXE3Y1lTOU5Pcy1Cb2REcjdpSUFSMy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgICA2OCxcbiAgICAgICAgICAyMTQsXG4gICAgICAgICAgMjY1LFxuICAgICAgICAgIDk5XG4gICAgICAgIF0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N1cGVyLWNhcmxpbi1icm90aGVycy1qLWFuZC1iZW4tY2FybGluLVRTZnhpQmFxT3dLLUJvZERyN2lJQVIzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDUzLFxuICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3VwZXIgQ2FybGluIEJyb3RoZXJzXCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOGJkYmI5MDZlZWYwNGU1ZDhiMzkxZTk0Nzk5OGU5YWYvXCIsXG4gICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTdXBlciBDYXJsaW4gQnJvdGhlcnNcIixcbiAgICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJKIGFuZCBCZW4gQ2FybGluXCIsXG4gICAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiSiBhbmQgQmVuIENhcmxpblwiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgfSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE0NzkxMTI3OTgsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdXBlci1jYXJsaW4tYnJvdGhlcnMtai1hbmQtYmVuLWNhcmxpbi1UU2Z4aUJhcU93Sy1Cb2REcjdpSUFSMy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc0MzY1MDYxMjYxLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiMDk1YjBhZGQtZGI0Ni00NTJiLWFmNDUtNGJkMWVlZDM0YmRkXCIsXG4gICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzIFRoZW9yeTogV2hlcmUgRG9lcyBZb2RhIENvbWUgRnJvbSE/XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzhkNmZkZWUyMjhkYzQ1MmJiZmM0MjJhZjFjZWQ1ZTY4L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDc5NCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCI8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IFRoZW9yeTogV2hlcmUgRG9lcyBZb2RhIENvbWUgRnJvbSE/XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IFwiPHA+VGhlIE1hbmRhbG9yaWFuIGhhcyBpbnRyb2R1Y2VkIHVzIHRvIGFuIEFET1JBQkxFIHRpbnkgbGl0dGxlIFlvZGEgY3JlYXR1cmUuIFdlIGtlZXAgY2FsbGluZyBpdCBhIFxcXCJZb2RhIENyZWF0dXJlXFxcIiBiZWNhdXNlIGRlc3BpdGUgdGhlIHZhc3QgU3RhciBXYXJzIGV4cGFuZGVkIHVuaXZlcnNlLi4uIFlvZGEncyBzcGVjaWVzIGhhcyBpbnRlbnRpb25hbGx5IHJlbWFpbmVkIGEgbXlzdGVyeS4gVG9kYXkgd2UgZGl2ZSBpbiB0byBmaW5kIG91dCBtb3JlIVxcdTAwYTA8L3A+XCIsXG4gICAgICBcImRlc2NyaXB0aW9uX2hpZ2hsaWdodGVkXCI6IFwiLi4uV2Uga2VlcCBjYWxsaW5nIGl0IGEgXFxcIllvZGEgQ3JlYXR1cmVcXFwiIGJlY2F1c2UgZGVzcGl0ZSB0aGUgdmFzdCA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IGV4cGFuZGVkIHVuaXZlcnNlLi4uIFlvZGEncyBzcGVjaWVzIGhhcyBpbnRlbnRpb25hbGx5IHJlbWFpbmVkIGEgbXlzdGVyeS4gVG9kYXkgd2UgZGl2ZSBpbiB0byBmaW5kIG91dCBtb3JlIVxcdTAwYTAuLi5cIixcbiAgICAgIFwidHJhbnNjcmlwdHNfaGlnaGxpZ2h0ZWRcIjogW11cbiAgICB9XG4gIF0sXG4gIFwibmV4dF9vZmZzZXRcIjogMTBcbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInRvb2tcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwibnVtYmVyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMC4wOTMsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHRpbWUgaXQgdG9vayB0byBmZXRjaCB0aGVzZSBzZWFyY2ggcmVzdWx0cy4gSW4gc2Vjb25kcy5cIlxuICAgIH0sXG4gICAgXCJjb3VudFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMTAsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIG51bWJlciBvZiBzZWFyY2ggcmVzdWx0cyBpbiB0aGlzIHBhZ2UuXCJcbiAgICB9LFxuICAgIFwidG90YWxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDE5ODksXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHRvdGFsIG51bWJlciBvZiBzZWFyY2ggcmVzdWx0cy5cIlxuICAgIH0sXG4gICAgXCJyZXN1bHRzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJvbmVPZlwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMlwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGVwaXNvZGUgbWV0YWRhdGEgdmlhIGBHRVQgL2VwaXNvZGVzL3tpZH1gLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicnNzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJTUyB1cmwgb2YgdGhpcyBwb2RjYXN0LiBUaGlzIGZpZWxkIGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlua1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubnByLm9yZy8yMDIwLzAxLzIyLzc5ODUzMjE3OS9zb2xlaW1hbmlzLWlyYW5cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2ViIGxpbmsgb2YgdGhpcyBlcGlzb2RlLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiYXVkaW9cIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF1ZGlvIHVybCBvZiB0aGlzIGVwaXNvZGUsIHdoaWNoIGNhbiBiZSBwbGF5ZWQgZGlyZWN0bHkuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBlcGlzb2RlLlxcbklmIGFuIGVwaXNvZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gaW1hZ2UsIHRoZW4gdGhpcyBmaWVsZCB3b3VsZCBiZSB0aGUgdXJsIG9mIHRoZSBwb2RjYXN0IGFydHdvcmsgaW1hZ2UuXFxuSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZ2VucmVfaWRzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZHMuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgICAgICAgICAgODYsXG4gICAgICAgICAgICAgICAgICAgICAgMTYwLFxuICAgICAgICAgICAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgICAgICAgICAgIDgyLFxuICAgICAgICAgICAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4MSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGFpbiB0ZXh0IG9mIHBvZGNhc3QgbmFtZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gN3g3IHwgPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIaWdobGlnaHRlZCBzZWdtZW50IG9mIHBvZGNhc3QgbmFtZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwicHVibGlzaGVyX29yaWdpbmFsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyBEYWlseSwgYnkgQWxsZW4gVm9pdm9kXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGFpbiB0ZXh0IG9mIHRoaXMgcG9kY2FzdCdzIHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gRGFpbHksIGJ5IEFsbGVuIFZvaXZvZFwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGlnaGxpZ2h0ZWQgc2VnbWVudCBvZiB0aGlzIHBvZGNhc3QncyBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHBvZGNhc3QgdGhhdCB0aGlzIGVwaXNvZGUgYmVsb25ncyB0by5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIml0dW5lc19pZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4OTYzNTQ2MzgsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlUdW5lcyBpZCBmb3IgdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSAoMzAweDMwMCkgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayB0aHVtYm5haWwgaW1hZ2UuXFxuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDc0ODczMjAwMDAwLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQdWJsaXNoZWQgZGF0ZSBmb3IgdGhpcyBlcGlzb2RlLiBJbiBtaWxsaXNlY29uZC5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI4MTU6IFN0YXIgV2FycyAyMDIwIE1vdmllIGFuZCBCZXlvbmQhXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBsYWluIHRleHQgb2YgdGhpcyBlcGlzb2RlJyB0aXRsZVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMi9cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIGVwaXNvZGUgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogNTY3LFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyBsZW5ndGggb2YgdGhpcyBlcGlzb2RlLiBJbiBzZWNvbmRzLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiODE1OiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IDIwMjAgTW92aWUgYW5kIEJleW9uZCFcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGlnaGxpZ2h0ZWQgc2VnbWVudCBvZiB0aGlzIGVwaXNvZGUncyB0aXRsZVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25fb3JpZ2luYWxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlllYWgsIFN0YXIgV2FycyBDZWxlYnJhdGlvbiBPcmxhbmRvIGlzIDMyIGRheXMgYXdheSwgYnV0IHdoYXQncyB0aGUgc2Nvb3Agb24gQ2VsZWJyYXRpb24gMjAxOD8gUGx1cywgUmViZWxzIERheSBpcyBTYXR1cmRheSwgYW5kIG11Y2ggbW9yZSBpbiBvdXIgdXBkYXRlLiBQdW5jaCBpdCEgKioqV2UncmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUwMGUyXFx1MjBhY1xcdTIxMjJsbCBnZXQgc29tZSBmYWJ1bG91cyByZXdhcmRzIGZvciB5b3VyIHBsZWRnZS4qKiogIENoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LiBEb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSFcXG5cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxhaW4gdGV4dCBvZiB0aGlzIGVwaXNvZGUncyBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIi4uLkdvIHRvIGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBkb25hdGUgdG8gdGhlIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gN3g3IHBvZGNhc3QsIGFuZCB5b3UnbGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqICBDaGVjayBvdXQgU1c3eDcuY29tIGZvciBmdWxsIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG9cXG5cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGlnaGxpZ2h0ZWQgc2VnbWVudCBvZiB0aGlzIGVwaXNvZGUncyBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidHJhbnNjcmlwdHNfaGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAwOjIxOjI3ICB3aGVuIERpc25leSBib3VnaHQgdGhlIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gZnJhbmNoaXNlIGZyb20gR2VvcmdlIEx1Y2FzIHRoZXkgaGFkIGEgcGxhbiBsb3RzIG9mIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gbW92aWVzIG5ldyA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IG1vdmllcyBldmVyeSBtb250aCBhbm90aGVyIG9uZSB3YXMganVzdCByZWxlYXNlZCB3aGlsZSBJIHdhcyB0YWxraW5nXFxuXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcCB0byAyIGhpZ2hsaWdodGVkIHNlZ21lbnRzIG9mIHRoZSBhdWRpbyB0cmFuc2NyaXB0IG9mIHRoaXMgZXBpc29kZS5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gKip0eXBlKiogaXMgKmVwaXNvZGUqLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJyc3NcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS9yc3NcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUlNTIHVybCBvZiB0aGlzIHBvZGNhc3QuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJlbWFpbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaGVsbG9AZXhhbXBsZS5jb21cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVtYWlsIG9mIHRoaXMgcG9kY2FzdCdzIHByb2R1Y2VyLiBUaGlzIGZpZWxkIGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ3ZWJzaXRlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwOi8vc3c3eDcuY29tL1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZWJzaXRlIHVybCBvZiB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJnZW5yZV9pZHNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VucmUgaWRzLlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAgICAgICAgMTM4LFxuICAgICAgICAgICAgICAgICAgODYsXG4gICAgICAgICAgICAgICAgICAxNjAsXG4gICAgICAgICAgICAgICAgICA2OCxcbiAgICAgICAgICAgICAgICAgIDgyLFxuICAgICAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIml0dW5lc19pZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4OTYzNTQ2MzgsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlUdW5lcyBpZCBmb3IgdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgc2NvcmUgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZCBvbiBhIHNjYWxlIGZyb20gMCB0byAxMDAuXFxuSWYgdGhlIHNjb3JlIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBsYWluIHRleHQgb2YgcG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidG90YWxfZXBpc29kZXNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMzI0LFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb3RhbCBudW1iZXIgb2YgZXBpc29kZXMgaW4gdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OS9cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMTI5MSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXZlcmFnZSBhdWRpbyBsZW5ndGggb2YgYWxsIGVwaXNvZGVzIG9mIHRoaXMgcG9kY2FzdC4gSW4gc2Vjb25kcy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGNvbnRhaW5zIGV4cGxpY2l0IGxhbmd1YWdlLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImQwNTcwOTJlNTdjYzRjZWQ4MGUwZWZhYTE5NjU5M2Q5XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBpZCBvZiB0aGUgbW9zdCByZWNlbnRseSBwdWJsaXNoZWQgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gN3g3IHwgPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhpZ2hsaWdodGVkIHNlZ21lbnQgb2YgcG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE1NTc0OTk3NzAwMDAsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgbGF0ZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIERhaWx5LCBieSBBbGxlbiBWb2l2b2RcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxhaW4gdGV4dCBvZiB0aGlzIHBvZGNhc3QncyBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uX29yaWdpbmFsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJUaGUgU3RhciBXYXJzIDd4NyBQb2RjYXN0IGlzIFJlYmVsLXJvdXNpbmcgZnVuIGZvciBldmVyeWRheSBKZWRpLCBiZXR3ZWVuIDcgYW5kIDE0IG1pbnV0ZXMgYSBkYXksIDcgZGF5cyBhIHdlZWsuIEpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIFN0YXIgV2FycyBuZXdzLCBoaXN0b3J5LCBpbnRlcnZpZXdzLCB0cml2aWEsIGFuZCBkZWVwIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBzdG9yeSBhcyB0b2xkIGluIG1vdmllcywgYm9va3MsIGNvbWljcywgZ2FtZXMsIGNhcnRvb25zLCBhbmQgbW9yZS4gU3Vic2NyaWJlIG5vdyBmb3IgeW91ciBkYWlseSBkb3NlIG9mIFN0YXIgV2FycyBqb3kuIEl0J3MgZGVzdGlueSB1bmxlYXNoZWQhICNTVzd4N1xcblwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGFpbiB0ZXh0IG9mIHBvZGNhc3QgZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE0NzA2Njc5MDIwMDAsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgb2xkZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcXFxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcXFxcXCI+V2Fyczwvc3Bhbj4gRGFpbHksIGJ5IEFsbGVuIFZvaXZvZFwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIaWdobGlnaHRlZCBzZWdtZW50IG9mIHRoaXMgcG9kY2FzdCdzIHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNjgsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhvdyBmcmVxdWVudGx5IGRvZXMgdGhpcyBwb2RjYXN0IHJlbGVhc2UgYSBuZXcgZXBpc29kZT8gSW4gaG91cnMuIEZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMTY2LCB0aGVuIGl0J3MgZXZlcnkgMTY2IGhvdXJzIChvciB3ZWVrbHkpLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIi4uLkpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gbmV3cywgaGlzdG9yeSwgaW50ZXJ2aWV3cywgdHJpdmlhLCBhbmQgZGVlcCBkaXZlcyBpbnRvIHRoZSA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IHN0b3J5IGFzIHRvbGQgaW4gbW92aWVzLCBib29rcywgY29taWNzLCBnYW1lcywgY2FydG9vbnMsIGFuZCBtb3JlLlxcblwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIaWdobGlnaHRlZCBzZWdtZW50IG9mIHBvZGNhc3QgZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiMC41JVwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgcmFua2luZyBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkLlxcbkZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMC41JSwgdGhlbiB0aGlzIHBvZGNhc3QgaXMgb25lIG9mIHRoZSB0b3AgMC41JSBtb3N0IHBvcHVsYXIgc2hvd3Mgb3V0IG9mIGFsbCBwb2RjYXN0cyBnbG9iYWxseSwgcmFua2VkIGJ5IExpc3RlbiBTY29yZS5cXG5JZiB0aGUgcmFua2luZyBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gKip0eXBlKiogaXMgKnBvZGNhc3QqLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlZiMDE3U3gzbDhGXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1cmF0ZWQgbGlzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBjdXJhdGVkIGxpc3QgbWV0YWRhdGEgdmlhIGBHRVQgL2N1cmF0ZWRfcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0b3RhbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAyNSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHRvdGFsIG51bWJlciBvZiBwb2RjYXN0cyBpbiB0aGlzIGN1cmF0ZWQgbGlzdC5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInBvZGNhc3RzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwicHVibGlzaGVyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJQbGFuZXQgQnJvYWRjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgcHVibGlzaGVyIG5hbWUuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yayAoMzAweDMwMCkuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcCB0byA1IHBvZGNhc3RzIGluIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwic291cmNlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9wYXJhZGUuY29tLzcxODkxMy9hc2hsZXlfam9obnNvbi83LWJvb2tpc2gtcG9kY2FzdHMtZm9yLWF2aWQtcmVhZGVycy1vbi10aGUtZ28vXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBvZiB0aGUgc291cmNlIG9mIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMTU1Njg0MzQ4NDMwMSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHVibGlzaGVkIGRhdGUgb2YgdGhpcyBjdXJhdGVkIGxpc3QuIEluIG1pbGxpc2Vjb25kcy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInNvdXJjZV9kb21haW5cIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInBhcmFkZS5jb21cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGRvbWFpbiBuYW1lIG9mIHRoZSBzb3VyY2Ugb2YgdGhpcyBjdXJhdGVkIGxpc3QuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiV2hhdCBhcmUgc29tZSBnb29kIFN0YXIgV2FycyBQb2RjYXN0IHRvIGxpc3RlbiB0bz9cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxhaW4gdGV4dCBvZiB0aGlzIGN1cmF0ZWQgbGlzdCdzIHRpdGxlXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzctYm9va2lzaC1wb2RjYXN0cy1mb3ItYXZpZC1yZWFkZXJzLW9uLUgyci1UQ1dhaThLL1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgY3VyYXRlZCBsaXN0IG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiV2hhdCBhcmUgc29tZSBnb29kIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gUG9kY2FzdCB0byBsaXN0ZW4gdG8/XFxuXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhpZ2hsaWdodGVkIHNlZ21lbnQgb2YgdGhpcyBjdXJhdGVkIGxpc3QncyB0aXRsZVwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25fb3JpZ2luYWxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyBmYW5zIGluIFJlZGRpdCBzaGFyZWQgdGhlaXIgZmF2b3JpdGUgcG9kY2FzdHMuXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBsYWluIHRleHQgb2YgdGhpcyBjdXJhdGVkIGxpc3QncyBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25faGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIi4uLjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gZmFucyBpbiBSZWRkaXQgc2hhcmVkIHRoZWlyIGZhdm9yaXRlIHBvZGNhc3RzLlwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIaWdobGlnaHRlZCBzZWdtZW50IG9mIHRoaXMgY3VyYXRlZCBsaXN0J3MgZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZW4gKip0eXBlKiogaXMgKmN1cmF0ZWQqLlwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbGlzdCBvZiBzZWFyY2ggcmVzdWx0cy5cIlxuICAgIH0sXG4gICAgXCJuZXh0X29mZnNldFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMTAsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGFzcyB0aGlzIHZhbHVlIHRvIHRoZSAqKm9mZnNldCoqIHBhcmFtZXRlciB0byBkbyBwYWdpbmF0aW9uIG9mIHNlYXJjaCByZXN1bHRzLlwiXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIFR5cGVhaGVhZCBzZWFyY2hcblxuRnVuY3Rpb24gTmFtZTogKip0eXBlYWhlYWQqKlxuXG5TdWdnZXN0IHNlYXJjaCB0ZXJtcywgcG9kY2FzdCBnZW5yZXMsIGFuZCBwb2RjYXN0cy5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQudHlwZWFoZWFkKHE9J3N0YXIgd2FycycsIHNob3dfcG9kY2FzdHM9MSlcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLXR5cGVhaGVhZCkuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0ZXJtc1wiOiBbXG4gICAgXCJzdGFyIHdhcnNcIlxuICBdLFxuICBcImdlbnJlc1wiOiBbXG4gICAge1xuICAgICAgXCJpZFwiOiAxNjAsXG4gICAgICBcIm5hbWVcIjogXCJTdGFyIFdhcnNcIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY4XG4gICAgfVxuICBdLFxuICBcInBvZGNhc3RzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiY2EzYjM1MjcxZGIwNDI5MWJhNTZmYWI4YTRmNzMxZTRcIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcmViZWwtZm9yY2UtcmFkaW8tc3Rhci13YXJzLXBvZGNhc3Qtc3Rhci13YXJzLUdTUVRQT1pDcUF4LTR2NXBSYUVnMVViLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JlYmVsLWZvcmNlLXJhZGlvLXN0YXItd2Fycy1wb2RjYXN0LXN0YXItd2Fycy1OYTFvZ250eEtPXy00djVwUmFFZzFVYi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlJlYmVsIEZvcmNlIFJhZGlvOiBTdGFyIFdhcnMgUG9kY2FzdFwiLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIlJlYmVsIEZvcmNlIFJhZGlvOiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+IFBvZGNhc3RcIixcbiAgICAgIFwicHVibGlzaGVyX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzXCIsXG4gICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj5cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjhlOTBiOGYwYzllYjRjMTFiMTNmOWRjMzMxZWQ3NDdjXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2luc2lkZS1zdGFyLXdhcnMtd29uZGVyeS1GOFpCRXFPYklUTS1lOHlkVVluQU9Kdi4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9pbnNpZGUtc3Rhci13YXJzLXdvbmRlcnktMkVwX24wNkI4YWQtZTh5ZFVZbkFPSnYuMzAweDMwMC5qcGdcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJJbnNpZGUgU3RhciBXYXJzXCIsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcInRpdGxlX2hpZ2hsaWdodGVkXCI6IFwiSW5zaWRlIDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj5cIixcbiAgICAgIFwicHVibGlzaGVyX29yaWdpbmFsXCI6IFwiV29uZGVyeVwiLFxuICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjogXCJXb25kZXJ5XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI0NmM1MGIxN2ExYzY0NzRmYjc3ZTIxZjQzOGNjZDc4ZFwiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9za3l0YWxrZXJzLWNoYXJsb3R0ZS1jYWl0bGluLXN0YXItd2Fycy1TN0w4dEVfbklhWi0taE5DMTBMelM0QS4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9za3l0YWxrZXJzLWNoYXJsb3R0ZS1jYWl0bGluLXN0YXItd2Fycy1ERUlvWExlSk9NOS0taE5DMTBMelM0QS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZV9vcmlnaW5hbFwiOiBcIlNreXRhbGtlcnNcIixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwidGl0bGVfaGlnaGxpZ2h0ZWRcIjogXCJTa3l0YWxrZXJzXCIsXG4gICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIlN0YXIgV2Fyc1wiLFxuICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjogXCI8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+U3Rhcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPldhcnM8L3NwYW4+XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmZjE5MzhhMTc0N2M0Njk4OTc2OTQzYmY1ZjY4NTYwMFwiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jaGlsZHJlbi1vZi10aGUtd2F0Y2gtb2JpLXdhbi1rZW5vYmktc3Rhci1ycG1lUnh6dkpoUS1sdDd5TVFJeDJmUC41Njd4NTY3LmpwZ1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2hpbGRyZW4tb2YtdGhlLXdhdGNoLW9iaS13YW4ta2Vub2JpLXN0YXItcnpXYW1NSmtLT2ktbHQ3eU1RSXgyZlAuMzAweDMwMC5qcGdcIixcbiAgICAgIFwidGl0bGVfb3JpZ2luYWxcIjogXCJDaGlsZHJlbiBvZiB0aGUgV2F0Y2g6IE9iaS1XYW4gS2Vub2JpXCIsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcInRpdGxlX2hpZ2hsaWdodGVkXCI6IFwiQ2hpbGRyZW4gb2YgdGhlIFdhdGNoOiBPYmktV2FuIEtlbm9iaVwiLFxuICAgICAgXCJwdWJsaXNoZXJfb3JpZ2luYWxcIjogXCJTdGFyIFdhcnNcIixcbiAgICAgIFwicHVibGlzaGVyX2hpZ2hsaWdodGVkXCI6IFwiPHNwYW4gY2xhc3M9XFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5XYXJzPC9zcGFuPlwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiOTEyZjM2NDQ0ZWE2NDc1NjkzYWIzYWI4OTljYzM3ODJcIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLXRoZW9yeS1qaWdvd2F0dC1tZWRpYS1nbGFzc2JveC1lam4taHZfT0Nxdy1GR1l0OFhNLXNJSy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtdGhlb3J5LWppZ293YXR0LW1lZGlhLWdsYXNzYm94LXhNYjVFN0R2QVlqLUZHWXQ4WE0tc0lLLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInRpdGxlX29yaWdpbmFsXCI6IFwiU3RhciBXYXJzIFRoZW9yeVwiLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiBcIjxzcGFuIGNsYXNzPVxcXCJsbi1zZWFyY2gtaGlnaGxpZ2h0XFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXCI+V2Fyczwvc3Bhbj4gVGhlb3J5XCIsXG4gICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiBcIkppZ293YXR0IE1lZGlhICYgR2xhc3Nib3ggTWVkaWEgXCIsXG4gICAgICBcInB1Ymxpc2hlcl9oaWdobGlnaHRlZFwiOiBcIkppZ293YXR0IE1lZGlhICYgR2xhc3Nib3ggTWVkaWEgXCJcbiAgICB9XG4gIF1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJyZXF1aXJlZFwiOiBbXG4gICAgXCJ0ZXJtc1wiXG4gIF0sXG4gIFwicHJvcGVydGllc1wiOiB7XG4gICAgXCJ0ZXJtc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiXG4gICAgICB9LFxuICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgXCJzdGFydHVwIHNhbGVzXCIsXG4gICAgICAgIFwic3RhcnR1cFwiLFxuICAgICAgICBcInN0YXJ0dXBzXCIsXG4gICAgICAgIFwic3RhciB3YXJzXCJcbiAgICAgIF0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU2VhcmNoIHRlcm0gc3VnZ2VzdGlvbnMuXCJcbiAgICB9LFxuICAgIFwiZ2VucmVzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwiZXhhbXBsZVwiOiB7XG4gICAgICAgICAgXCJpZFwiOiAxNDAsXG4gICAgICAgICAgXCJuYW1lXCI6IFwiV2ViIERlc2lnblwiLFxuICAgICAgICAgIFwicGFyZW50X2lkXCI6IDEyN1xuICAgICAgICB9LFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDkzLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbnJlIGlkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibmFtZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIkJ1c2luZXNzXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VucmUgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwYXJlbnRfaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDk1LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBhcmVudCBnZW5yZSBpZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBzdWdnZXN0aW9ucy4gSXQnbGwgc2hvdyB1cCB3aGVuIHRoZSAqKnNob3dfZ2VucmVzKiogcGFyYW1ldGVyIGlzICoxKi5cIlxuICAgIH0sXG4gICAgXCJwb2RjYXN0c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRpdGxlX29yaWdpbmFsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGFpbiB0ZXh0IG9mIHBvZGNhc3QgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aXRsZV9oaWdobGlnaHRlZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjxzcGFuIGNsYXNzPVxcXFxcXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXFxcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXFxcXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXFxcXFwiPldhcnM8L3NwYW4+IDd4NyB8IDxzcGFuIGNsYXNzPVxcXFxcXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXFxcXFwiPlN0YXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXFxcXFwibG4tc2VhcmNoLWhpZ2hsaWdodFxcXFxcXFwiPldhcnM8L3NwYW4+IE5ld3MsIEludGVydmlld3MsIGFuZCBNb3JlIVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhpZ2hsaWdodGVkIHNlZ21lbnQgb2YgcG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInB1Ymxpc2hlcl9vcmlnaW5hbFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyBEYWlseSwgYnkgQWxsZW4gVm9pdm9kXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxhaW4gdGV4dCBvZiB0aGlzIHBvZGNhc3QncyBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwdWJsaXNoZXJfaGlnaGxpZ2h0ZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI8c3BhbiBjbGFzcz1cXFxcXFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFxcXFxcIj5TdGFyPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFxcXFxcImxuLXNlYXJjaC1oaWdobGlnaHRcXFxcXFxcIj5XYXJzPC9zcGFuPiBEYWlseSwgYnkgQWxsZW4gVm9pdm9kXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGlnaGxpZ2h0ZWQgc2VnbWVudCBvZiB0aGlzIHBvZGNhc3QncyBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHN1Z2dlc3Rpb25zLiBJdCdsbCBzaG93IHVwIHdoZW4gdGhlICoqc2hvd19wb2RjYXN0cyoqIHBhcmFtZXRlciBpcyAxLlwiXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIGRldGFpbGVkIG1ldGEgZGF0YSBhbmQgZXBpc29kZXMgZm9yIGEgcG9kY2FzdCBieSBpZFxuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX3BvZGNhc3RfYnlfaWQqKlxuXG5GZXRjaCBkZXRhaWxlZCBtZXRhIGRhdGEgYW5kIGVwaXNvZGVzIGZvciBhIHNwZWNpZmljIHBvZGNhc3QgKHVwIHRvIDEwIGVwaXNvZGVzIGVhY2ggdGltZSkuXG5Zb3UgY2FuIHVzZSB0aGUgKipuZXh0X2VwaXNvZGVfcHViX2RhdGUqKiBwYXJhbWV0ZXIgdG8gZG8gcGFnaW5hdGlvbiBhbmQgZmV0Y2ggbW9yZSBlcGlzb2Rlcy5cblxuXG5FeGFtcGxlOlxuYGBgcHl0aG9uXG5cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbiMgSWYgYXBpX2tleSBpcyBOb25lLCB0aGUgc2RrIHdpbGwgY29ubmVjdCB0byBhIG1vY2sgc2VydmVyIHRoYXQnbGxcbiMgcmV0dXJuIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3NlICAgICAgICAgICAgXG5hcGlfa2V5ID0gJ2E2YTFmN2FlNmE0YTRjZjdhMjA4ZTViYSoqKioqKioqJ1xuXG5jbGllbnQgPSBwb2RjYXN0X2FwaS5DbGllbnQoYXBpX2tleT1hcGlfa2V5KSAgICAgIFxuXG5yZXNwb25zZSA9IGNsaWVudC5mZXRjaF9wb2RjYXN0X2J5X2lkKGlkPSc0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OScpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jZ2V0LWFwaS12Mi1wb2RjYXN0cy1pZCkuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJpZFwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gIFwicnNzXCI6IFwiaHR0cDovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gIFwiZW1haWxcIjogXCJhbGxlbkBzdzd4Ny5jb21cIixcbiAgXCJleHRyYVwiOiB7XG4gICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vbXVzaWMvbGlzdGVuP3U9MCMvcHMvSTdnZGNycWNtdmhmbmhoMmN5cWtjZzMydGtxXCIsXG4gICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzJyUUpVUDlZM0h4ZW1pVzNKSHQ5V1ZcIixcbiAgICBcInlvdXR1YmVfdXJsXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vc3c3eDdcIixcbiAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJzdzd4N1wiLFxuICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcInN3N3g3XCIsXG4gICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgfSxcbiAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS1kYWlseS1zdGFyLXdhcnMtcG9kY2FzdC1ITjA4T29ERTdwYy1BSWczY1pWS0NzTC4xNDAweDE0MDAuanBnXCIsXG4gIFwidGl0bGVcIjogXCJTdGFyIFdhcnMgN3g3OiBUaGUgRGFpbHkgU3RhciBXYXJzIFBvZGNhc3RcIixcbiAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICBcIndlYnNpdGVcIjogXCJodHRwczovL3N3N3g3LmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICBcImVwaXNvZGVzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNGU3YzU5ZTEwZTQ2NDBiOThmMmYzY2IxNzc3ZGJiNDNcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS84NjQtcGFydC0yLW9mLW15LW5ldy1jb252ZXJzYXRpb24td2l0aC1ib2JieS1yb2JlcnRzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC80ZTdjNTllMTBlNDY0MGI5OGYyZjNjYjE3NzdkYmI0My9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUvODY0LXBhcnQtMi1vZi1teS1uZXctLXZEQk1UallfbUstMldWc3h0VTBmM20uNjAweDMxNS5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCI4NjQ6IFBhcnQgMiBvZiBNeSAoTmV3KSBDb252ZXJzYXRpb24gV2l0aCBCb2JieSBSb2JlcnRzXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NjQtcGFydC0yLW9mLW15LW5ldy15cWpyek5ERVhhUy0yV1ZzeHRVMGYzbS4zMDB4MTU3LmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZSBzZWNvbmQgaGFsZiBvZiBteSBsYXRlc3QgY29udmVyc2F0aW9uIHdpdGggQm9iYnkgUm9iZXJ0cywgUG9kY2FzdCBFbWVyaXR1cyBmcm9tIEZ1bGwgb2YgU2l0aCBhbmQgbm93IFN0YXIgV2FycyBcXFwiUG9kY2FzdCBGb3JjZSBHaG9zdCBhdCBMYXJnZS5cXFwiIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE0NzkxMTA0MDE4NTMsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJiYmFkYTJiM2E5OTA1NGNlOTNiMGViOTVkZDc2MmI0ZFwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80ZTdjNTllMTBlNDY0MGI5OGYyZjNjYjE3NzdkYmI0My9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyNDQ3LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzRlN2M1OWUxMGU0NjQwYjk4ZjJmM2NiMTc3N2RiYjQzLyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI5YWUwZTJlNDlhOWM0NzcxOTEyNjNkZjkwYWRmN2YzZVwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg2My1hLW5ldy1jb252ZXJzYXRpb24td2l0aC1ib2JieS1yb2JlcnRzLXBhcnQtMT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvOWFlMGUyZTQ5YTljNDc3MTkxMjYzZGY5MGFkZjdmM2UvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2My1hLW5ldy1jb252ZXJzYXRpb24td2l0aC1lX3ZIbzlTTTdmdC0wWVJCVGxnaVZlVS42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg2MzogQSAoTmV3KSBDb252ZXJzYXRpb24gV2l0aCBCb2JieSBSb2JlcnRzLCBQYXJ0IDFcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2My1hLW5ldy1jb252ZXJzYXRpb24td2l0aC1sY1FzRFM1dXZZYi0wWVJCVGxnaVZlVS4zMDB4MTU3LmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkFuIGluLWRlcHRoIGNvbnZlcnNhdGlvbiBhYm91dCB0aGUgU3RhciBXYXJzIFxcXCJTdG9yeVxcXCIgbW92aWVzIGFuZCBzbyBtdWNoIG1vcmUsIGZlYXR1cmluZyBCb2JieSBSb2JlcnRzLCBTdGFyIFdhcnMgXFxcIlBvZGNhc3QgRm9yY2UgR2hvc3QgYXQgTGFyZ2UuXFxcIiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNDc5MDI0MDAxODU0LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiMmMyOThmZTY4MjQ2YWFkMzBiZDVhZmUwYjc5ZmRkNzZcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOWFlMGUyZTQ5YTljNDc3MTkxMjYzZGY5MGFkZjdmM2UvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjkxNixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS85YWUwZTJlNDlhOWM0NzcxOTEyNjNkZjkwYWRmN2YzZS8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiOThiY2ZhM2ZkMWI0NDcyNzkxMzM4NTkzODc4OGJjYzVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS84NjItYXNzYXNzaW4tY2xvbmUtd2Fycy1icmllZmluZy1zZWFzb24tMy1lcGlzb2RlLTc/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzk4YmNmYTNmZDFiNDQ3Mjc5MTMzODU5Mzg3ODhiY2M1L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NjItYXNzYXNzaW4tY2xvbmUtd2Fycy1sUDk0YjJxNWlPei1qRWNNQWRUbnR6cy42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg2MjogXFxcIkFzc2Fzc2luXFxcIiAtIENsb25lIFdhcnMgQnJpZWZpbmcsIFNlYXNvbiAzLCBFcGlzb2RlIDdcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2Mi1hc3Nhc3Npbi1jbG9uZS13YXJzLVVoM0UwR3dPUVJYLWpFY01BZFRudHpzLjMwMHgxNTcuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIGJlZ2lubmluZ3Mgb2YgdGhlIHRydWUgcG93ZXIgb2YgdGhlIEZvcmNlLCByZXZlYWxlZCBpbiBcXFwiQXNzYXNzaW4sXFxcIiBzZWFzb24gMywgZXBpc29kZSA3IG9mIHRoZSBTdGFyIFdhcnM6IFRoZSBDbG9uZSBXYXJzIGNhcnRvb24gc2VyaWVzLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNDc4OTM3NjAxODU1LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiNmY2NGQxYjM3YzY2MWJiZDA2NmU3NzNhZTNiNzJkNWVcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOThiY2ZhM2ZkMWI0NDcyNzkxMzM4NTkzODc4OGJjYzUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNjM2LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzk4YmNmYTNmZDFiNDQ3Mjc5MTMzODU5Mzg3ODhiY2M1LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2MWQxZGU3MmY5N2U0OGU4ODdjNWQ2MjgwZDNkZTM4NFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg2MS1yb2d1ZS1vbmUtaW50ZXJuYXRpb25hbC10cmFpbGVyLWJyZWFrZG93bj91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvNjFkMWRlNzJmOTdlNDhlODg3YzVkNjI4MGQzZGUzODQvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2MS1yb2d1ZS1vbmUtaW50ZXJuYXRpb25hbC02clpPRWlKSFBweC1uR3hhUkM5NVY2by42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg2MTogUm9ndWUgT25lIEludGVybmF0aW9uYWwgVHJhaWxlciBCcmVha2Rvd25cIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2MS1yb2d1ZS1vbmUtaW50ZXJuYXRpb25hbC1BRmxFQlhQSEc2ZC1uR3hhUkM5NVY2by4zMDB4MTU3LmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlN1cnByaXNlISBBbiBpbnRlcm5hdGlvbmFsIHRyYWlsZXIgZm9yIFJvZ3VlIE9uZSBoYXMgZHJvcHBlZCwgYW5kIGl0IGluY2x1ZGVzIG5ldyBzY2VuZXMsIG5ldyBkaWFsb2d1ZSwgYW5kIHNvbWUgaGVhdnkgZm9yZXNoYWRvd2luZyBhYm91dCBKeW4gRXJzbydzIGZhdGUuIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE0Nzg4NTE0NTc4NTYsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCIxMGYwNDJjZjczNDZlMDc4ZTIwMTc2OWIxMDk3ZDY1MVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS82MWQxZGU3MmY5N2U0OGU4ODdjNWQ2MjgwZDNkZTM4NC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMDgyLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzYxZDFkZTcyZjk3ZTQ4ZTg4N2M1ZDYyODBkM2RlMzg0LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI1M2Y1ZDAwNDkxMTM0MzY3YWMzYmFmOGM3NWI5YTQ2YlwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg2MC13aWxsLWp5bi1hbmQtY2Fzc2lhbi1zdXJ2aXZlLXJvZ3VlLW9uZT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvNTNmNWQwMDQ5MTEzNDM2N2FjM2JhZjhjNzViOWE0NmIvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg2MC13aWxsLWp5bi1hbmQtY2Fzc2lhbi1WSEFKUTFONTdoRS1sXzNxWE5mSEFVMC42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg2MDogV2lsbCBKeW4gYW5kIENhc3NpYW4gU3Vydml2ZSBSb2d1ZSBPbmU/XCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NjAtd2lsbC1qeW4tYW5kLWNhc3NpYW4tay0yU2k2SFlqVFAtbF8zcVhOZkhBVTAuMzAweDE1Ny5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Ub2RheSBJIGNvbmNsdWRlIGEgdHdvLWVwaXNvZGUgc2V0IGxvb2tpbmcgYXQgdGhlIG9kZHMgb2Ygc3Vydml2YWwgZm9yIG1ham9yIFJvZ3VlIE9uZSBjaGFyYWN0ZXJzLiBUb2RheTogSnluIEVyc28sIENhc3NpYW4gQW5kb3IsIEJvZGhpIFJvb2ssIGFuZCBLLTJTTy4gUHVuY2ggaXQhPC9wPiA8cD4qKipXZVxcdTIwMTlyZSBsaXN0ZW5lciBzdXBwb3J0ZWQhIEdvIHRvIGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBkb25hdGUgdG8gdGhlIFN0YXIgV2FycyA3eDcgcG9kY2FzdCwgYW5kIHlvdVxcdTIwMTlsbCBnZXQgc29tZSBmYWJ1bG91cyByZXdhcmRzIGZvciB5b3VyIHBsZWRnZS4qKipcXHUwMGEwPC9wPiA8cD5DaGVjayBvdXQgU1c3eDcuY29tIGZvciBmdWxsIFN0YXIgV2FycyA3eDcgc2hvdyBub3RlcyBhbmQgbGlua3MsIGFuZCB0byBjb21tZW50IG9uIGFueSBvZiB0aGUgY29udGVudCBvZiB0aGlzIGVwaXNvZGUhIElmIHlvdSBsaWtlIHdoYXQgeW91J3ZlIGhlYXJkLCBwbGVhc2UgbGVhdmUgdXMgYSByYXRpbmcgb3IgcmV2aWV3IG9uIGlUdW5lcyBvciBTdGl0Y2hlciwgd2hpY2ggd2lsbCBhbHNvIGhlbHAgbW9yZSBwZW9wbGUgZGlzY292ZXIgdGhpcyBTdGFyIFdhcnMgcG9kY2FzdC48L3A+IDxwPkRvbid0IGZvcmdldCB0byBqb2luIHRoZSBTdGFyIFdhcnMgN3g3IGZ1biBvbiBGYWNlYm9vayBhdCBGYWNlYm9vay5jb20vU1c3eDcsIGFuZCBmb2xsb3cgdGhlIGJyZWFraW5nIG5ld3MgVHdpdHRlciBmZWVkIGF0IFR3aXR0ZXIuY29tL1NXN3g3UG9kY2FzdC4gV2UncmUgYWxzbyBvbiBQaW50ZXJlc3QgYW5kIEluc3RhZ3JhbSBhcyBcXFwiU1c3eDdcXFwiIHRvbywgYW5kIHdlJ2QgbG92ZSB0byBjb25uZWN0IHdpdGggeW91IHRoZXJlITwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTQ3ODc2NDgwMTg1NyxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjE4MDYyNzQzZGJmZmE0Y2UyOTM2ODY2MDdjZTMwYWY0XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzUzZjVkMDA0OTExMzQzNjdhYzNiYWY4Yzc1YjlhNDZiL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDY1MSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS81M2Y1ZDAwNDkxMTM0MzY3YWMzYmFmOGM3NWI5YTQ2Yi8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNzZjMDBiNTU5ZjdkNGYxYzhiZTNmZjFlMmQ4MDhhZjlcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS84NTktdGhlLW9kZHMtd2hvLXdpbGwtc3Vydml2ZS1yb2d1ZS1vbmU/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzc2YzAwYjU1OWY3ZDRmMWM4YmUzZmYxZTJkODA4YWY5L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NTktdGhlLW9kZHMtd2hvLXdpbGwtbk03bDFCTlBiSWEta3ByQVhVQ1M4dVEuNjAweDMxNS5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCI4NTk6IFRoZSBPZGRzOiBXaG8gV2lsbCBTdXJ2aXZlIFJvZ3VlIE9uZT9cIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg1OS10aGUtb2Rkcy13aG8td2lsbC1SbFhvamlJNVdtNi1rcHJBWFVDUzh1US4zMDB4MTU3LmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPldpbGwgR2FsZW4gRXJzbywgTHlyYSBFcnNvLCBTYXcgR2VycmVyYSwgYW5kIE9yc29uIEtyZW5uaWMgc3Vydml2ZSB0aGUgZXZlbnRzIG9mIFJvZ3VlIE9uZTogQSBTdGFyIFdhcnMgU3Rvcnk/IFN0YXJ0aW5nIGEgbWluaS1zZXJpZXMgdG8gbG9vayBhdCB0aGUgb2Rkcy4uLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNDc4Njc4NDAxODU4LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiOThlNGQzMWIyM2JjN2Y0OGRiNDkwZWZmZTRkNzdlNzNcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNzZjMDBiNTU5ZjdkNGYxYzhiZTNmZjFlMmQ4MDhhZjkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNDgzLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzc2YzAwYjU1OWY3ZDRmMWM4YmUzZmYxZTJkODA4YWY5LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2MmNkZmUwYjllZjY0ZDEyODhhOTc1YTY1OWRjZjQ0MlwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg1OC10b2dldGhlci1uZXctcm9ndWUtb25lLWNvbW1lcmNpYWwtZGlhbG9ndWU/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzYyY2RmZTBiOWVmNjRkMTI4OGE5NzVhNjU5ZGNmNDQyL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NTgtdG9nZXRoZXItbmV3LXJvZ3VlLW9uZS1Uc0xnaEJxNWVuWC1XcEZTc05VT3pjTC42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg1ODogXFxcIlRvZ2V0aGVyXFxcIiAtIE5ldyBSb2d1ZSBPbmUgQ29tbWVyY2lhbCBEaWFsb2d1ZVwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUvODU4LXRvZ2V0aGVyLW5ldy1yb2d1ZS1vbmUtZEpGNlhMbWZZbDQtV3BGU3NOVU96Y0wuMzAweDE1Ny5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5BIG5ldyBSb2d1ZSBPbmUgY29tbWVyY2lhbCBkcm9wcGVkIFN1bmRheSwgd2l0aCBzb21lIG5ldyBkaWFsb2d1ZSB0aGF0IGhpbnRzIGF0IHRoZSByZWxhdGlvbnNoaXAgYmV0d2VlbiBKeW4gRXJzbywgU2F3IEdlcnJlcmEsIHRoZSBSZWJlbGxpb24sIGFuZCB0aGUgUGFydGlzYW5zLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNDc4NTkyMDAxODU5LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiYzZkZDQyMjU0ZTU2MTEzMGJmODkxZjkyZTk0NDA0MWJcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNjJjZGZlMGI5ZWY2NGQxMjg4YTk3NWE2NTlkY2Y0NDIvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNDQ4LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzYyY2RmZTBiOWVmNjRkMTI4OGE5NzVhNjU5ZGNmNDQyLyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJhOThjOWNiNDk3ZjA0YWVjOWUwOWNjNTBjZTI1ZWE1OVwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg1Ny1pbXBlcmlhbC1zdXBlcmNvbW1hbmRvcy1zdGFyLXdhcnMtcmViZWxzLXNlYXNvbi0zLWVwaXNvZGUtNz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvYTk4YzljYjQ5N2YwNGFlYzllMDljYzUwY2UyNWVhNTkvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg1Ny1pbXBlcmlhbC1zdXBlcmNvbW1hbmRvcy1kMGM3TDFncmJhSS1MNmJBT0tDbXlxdC42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg1NzogXFxcIkltcGVyaWFsIFN1cGVyY29tbWFuZG9zXFxcIiAtIFN0YXIgV2FycyBSZWJlbHMgU2Vhc29uIDMsIEVwaXNvZGUgN1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUvODU3LWltcGVyaWFsLXN1cGVyY29tbWFuZG9zLU9GcGROa2kwMk1fLUw2YkFPS0NteXF0LjMwMHgxNTcuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+XFxcIkltcGVyaWFsIFN1cGVyY29tbWFuZG9zXFxcIiBpcyBTZWFzb24gMywgZXBpc29kZSA3IG9mIFN0YXIgV2FycyBSZWJlbHMsIHJlZmVycmluZyB0byBNYW5kYWxvcmlhbnMgc2VydmluZyB0aGUgRW1waXJlLiBCdXQgY2FuIEZlbm4gUmF1IGJlIHRydXN0ZWQsIGVpdGhlcj8gUHVuY2ggaXQhPC9wPiA8cD4qKipXZVxcdTIwMTlyZSBsaXN0ZW5lciBzdXBwb3J0ZWQhIEdvIHRvIGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBkb25hdGUgdG8gdGhlIFN0YXIgV2FycyA3eDcgcG9kY2FzdCwgYW5kIHlvdVxcdTIwMTlsbCBnZXQgc29tZSBmYWJ1bG91cyByZXdhcmRzIGZvciB5b3VyIHBsZWRnZS4qKipcXHUwMGEwPC9wPiA8cD5DaGVjayBvdXQgU1c3eDcuY29tIGZvciBmdWxsIFN0YXIgV2FycyA3eDcgc2hvdyBub3RlcyBhbmQgbGlua3MsIGFuZCB0byBjb21tZW50IG9uIGFueSBvZiB0aGUgY29udGVudCBvZiB0aGlzIGVwaXNvZGUhIElmIHlvdSBsaWtlIHdoYXQgeW91J3ZlIGhlYXJkLCBwbGVhc2UgbGVhdmUgdXMgYSByYXRpbmcgb3IgcmV2aWV3IG9uIGlUdW5lcyBvciBTdGl0Y2hlciwgd2hpY2ggd2lsbCBhbHNvIGhlbHAgbW9yZSBwZW9wbGUgZGlzY292ZXIgdGhpcyBTdGFyIFdhcnMgcG9kY2FzdC48L3A+IDxwPkRvbid0IGZvcmdldCB0byBqb2luIHRoZSBTdGFyIFdhcnMgN3g3IGZ1biBvbiBGYWNlYm9vayBhdCBGYWNlYm9vay5jb20vU1c3eDcsIGFuZCBmb2xsb3cgdGhlIGJyZWFraW5nIG5ld3MgVHdpdHRlciBmZWVkIGF0IFR3aXR0ZXIuY29tL1NXN3g3UG9kY2FzdC4gV2UncmUgYWxzbyBvbiBQaW50ZXJlc3QgYW5kIEluc3RhZ3JhbSBhcyBcXFwiU1c3eDdcXFwiIHRvbywgYW5kIHdlJ2QgbG92ZSB0byBjb25uZWN0IHdpdGggeW91IHRoZXJlITwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTQ3ODUwNTYwMTg2MCxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjAwNzg4M2E1MWQ1ZGRjNDliOGI4ZDdmZWU4MGNiMWJhXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2E5OGM5Y2I0OTdmMDRhZWM5ZTA5Y2M1MGNlMjVlYTU5L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDQ5NCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9hOThjOWNiNDk3ZjA0YWVjOWUwOWNjNTBjZTI1ZWE1OS8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiZTA1NWJkMTc1MGE3NDVhNmFkZmNiNzBiOTM1YzAzYjdcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS84NTYtdGhlLWFjYWRlbXktY2xvbmUtd2Fycy1icmllZmluZy1zZWFzb24tMy1lcGlzb2RlLTY/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2UwNTViZDE3NTBhNzQ1YTZhZGZjYjcwYjkzNWMwM2I3L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NTYtdGhlLWFjYWRlbXktY2xvbmUtd2Fycy02LUVYZmticDRTei1sNlFwQy0yUkRUSC42MDB4MzE1LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjg1NjogXFxcIlRoZSBBY2FkZW15XFxcIiAtIENsb25lIFdhcnMgQnJpZWZpbmcsIFNlYXNvbiAzLCBFcGlzb2RlIDZcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXItd2Fycy03eDctdGhlLzg1Ni10aGUtYWNhZGVteS1jbG9uZS13YXJzLXg2X3NxVkdlLUtTLWw2UXBDLTJSRFRILjMwMHgxNTcuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+XFxcIlRoZSBBY2FkZW15LFxcXCIgU2Vhc29uIDMgRXBpc29kZSA2IG9mIHRoZSBDbG9uZSBXYXJzIGNhcnRvb24gc2VyaWVzLCBpcyBhIHF1aWV0ZXIgZXBpc29kZSB0aGF0IGhpZ2hsaWdodHMgdGhlIGltcG9ydGFuY2Ugb2YgTWFuZGFsb3JlIHRvIHRoZSBTdGFyIFdhcnMgZnJhbmNoaXNlLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNDc4NDE1NjAxODYxLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZjM0NmE2ZTc1NzVhYjQxMTk3Y2FjYzY2NDgwNzBkYTJcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZTA1NWJkMTc1MGE3NDVhNmFkZmNiNzBiOTM1YzAzYjcvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNTYxLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2UwNTViZDE3NTBhNzQ1YTZhZGZjYjcwYjkzNWMwM2I3LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJkNjAyYTQ1Y2RiNTI0ZjNmYWMxZWZmZDc5YTYxZjgyOFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tLzg1NS1lcGlzb2RlLXZpaWktYW5kLWhhbi1zb2xvLW1vdmllLXVwZGF0ZXM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2Q2MDJhNDVjZGI1MjRmM2ZhYzFlZmZkNzlhNjFmODI4L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFyLXdhcnMtN3g3LXRoZS84NTUtZXBpc29kZS12aWlpLWFuZC1oYW4tM1drZ3I4MkRCeGYtOXZ6Mzhrb19YMnMuNjAweDMxNS5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCI4NTU6IEVwaXNvZGUgVklJSSBhbmQgSGFuIFNvbG8gTW92aWUgVXBkYXRlc1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUvODU1LWVwaXNvZGUtdmlpaS1hbmQtaGFuLW5hTThOV1F4UjE5LTl2ejM4a29fWDJzLjMwMHgxNTcuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+RGFpc3kgUmlkbGV5IHNheXMgd2FpdCBmb3IgRXBpc29kZSBWSUlJIGZvciBhbnN3ZXJzIGFib3V0IFJleSdzIHBhcmVudHMuIEJyYWRmb3JkIFlvdW5nIHNheXMgdGhlIEhhbiBTb2xvIG1vdmllIHdvbid0IGJlIHdoYXQgeW91IGV4cGVjdC4gVXBkYXRlcyBoZXJlLi4uIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE0NzgzMjkyMDE4NjIsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI4OWFjN2M5MmRiMTlmN2QwNmY1MjNlYjJjMDkzYmRlNlwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kNjAyYTQ1Y2RiNTI0ZjNmYWMxZWZmZDc5YTYxZjgyOC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMTAzLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2Q2MDJhNDVjZGI1MjRmM2ZhYzFlZmZkNzlhNjFmODI4LyNlZGl0XCJcbiAgICB9XG4gIF0sXG4gIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gIFwiZ2VucmVfaWRzXCI6IFtcbiAgICA4NixcbiAgICA2NyxcbiAgICA2OCxcbiAgICA4MixcbiAgICAxMDAsXG4gICAgMTAxLFxuICAgIDE2MCxcbiAgICAxMzhcbiAgXSxcbiAgXCJpdHVuZXNfaWRcIjogODk2MzU0NjM4LFxuICBcInB1Ymxpc2hlclwiOiBcIlN0YXIgV2FycyA3eDdcIixcbiAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3Rhci13YXJzLTd4Ny10aGUtZGFpbHktc3Rhci13YXJzLXBvZGNhc3QtMkxyeXFNai1zR1AtQUlnM2NaVktDc0wuMzAweDMwMC5qcGdcIixcbiAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIFN0YXIgV2FycyA3eDcgUG9kY2FzdCBpcyBSZWJlbC1yb3VzaW5nIGZ1biBmb3IgZXZlcnlkYXkgSmVkaSwgZ2VuZXJhbGx5IGJldHdlZW4gNyBhbmQgMTQgbWludXRlcyBhIGRheSwgYWx3YXlzIDcgZGF5cyBhIHdlZWsuIEpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIFN0YXIgV2FycyBuZXdzLCBoaXN0b3J5LCBpbnRlcnZpZXdzLCB0cml2aWEsIGFuZCBkZWVwIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBzdG9yeSBhcyB0b2xkIGluIG1vdmllcywgYm9va3MsIGNvbWljcywgZ2FtZXMsIGNhcnRvb25zLCBhbmQgbW9yZS4gRm9sbG93IG5vdyBmb3IgeW91ciBkYWlseSBkb3NlIG9mIFN0YXIgV2FycyBqb3kuIEl0J3MgZGVzdGlueSB1bmxlYXNoZWQhICNTVzd4N1wiLFxuICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICB9LFxuICBcImxpc3Rlbl9zY29yZVwiOiA0OCxcbiAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAzMDA2LFxuICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNTk3LFxuICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCI2N2Y3MDZkMTc2ZmU0OTAwODZkNTQ0YjQyNjZiOTg1NlwiLFxuICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4OTA1MjAwMDAwLFxuICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0MDQ2MzcyMDAwMDAsXG4gIFwibmV4dF9lcGlzb2RlX3B1Yl9kYXRlXCI6IDE0NzgzMjkyMDE4NjIsXG4gIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyNCxcbiAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxJVwiXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicHJvcGVydGllc1wiOiB7XG4gICAgXCJpZFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgIH0sXG4gICAgXCJyc3NcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUlNTIHVybCBvZiB0aGlzIHBvZGNhc3QuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICB9LFxuICAgIFwidHlwZVwiOiB7XG4gICAgICBcImVudW1cIjogW1xuICAgICAgICBcImVwaXNvZGljXCIsXG4gICAgICAgIFwic2VyaWFsXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHR5cGUgb2YgdGhpcyBwb2RjYXN0IC0gZXBpc29kaWMgb3Igc2VyaWFsLlwiXG4gICAgfSxcbiAgICBcImVtYWlsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaGVsbG9AZXhhbXBsZS5jb21cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZW1haWwgb2YgdGhpcyBwb2RjYXN0J3MgcHJvZHVjZXIuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICB9LFxuICAgIFwiZXh0cmFcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcInVybDFcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidXJsMlwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cmwzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImdvb2dsZV91cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5eWMzTXVZWEowTVRrdVkyOXRMMnB2YUc0dGMyOXNiMjF2YmkxeVpYQnZjblJ6XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdvb2dsZSBQb2RjYXN0cyB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzJyUUpVUDlZM0h4ZW1pVzNKSHQ5V1ZcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3BvdGlmeSB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwieW91dHViZV91cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3N3N3g3XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIllvdVR1YmUgdXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpbmtlZEluIHVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2VDaGF0IHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXRyZW9uIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJTVzd4N3BvZGNhc3RcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHdpdHRlciB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZhY2Vib29rIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vbXVzaWMuYW1hem9uLmNvbS9wb2RjYXN0cy82ZmM2ZDY4My05ZWYzLTQ4NTAtOWMzNS04ZThiMWE0MmExNDcvdGhlLWxvY2stc3BvcnRzY2FzdFwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbWF6b24gTXVzaWMgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICB9LFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluc3RhZ3JhbSB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJpbWFnZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgIH0sXG4gICAgXCJ0aXRsZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgfSxcbiAgICBcImNvdW50cnlcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGNvdW50cnkgd2hlcmUgdGhpcyBwb2RjYXN0IGlzIHByb2R1Y2VkLlwiXG4gICAgfSxcbiAgICBcIndlYnNpdGVcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwOi8vc3c3eDcuY29tL1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYnNpdGUgdXJsIG9mIHRoaXMgcG9kY2FzdC5cIlxuICAgIH0sXG4gICAgXCJlcGlzb2Rlc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMlwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVwaXNvZGUgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lm5wci5vcmcvMjAyMC8wMS8yMi83OTg1MzIxNzkvc29sZWltYW5pcy1pcmFuXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2ViIGxpbmsgb2YgdGhpcyBlcGlzb2RlLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImF1ZGlvXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyB1cmwgb2YgdGhpcyBlcGlzb2RlLCB3aGljaCBjYW4gYmUgcGxheWVkIGRpcmVjdGx5LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrLiBJZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiQ2VsZWJyYXRpb24gUmVjYXAsIEphc29uIEZyeSBhbmQgQ2hyaXN0aWFuIEJsYXV2ZWx0IEludGVydmlld3MgXFx1MjAxMyBTV0JXICMxMDFcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHA+RGlzbmV5IGNoaWVmIEJvYiBJZ2VyIHNoYXJlZCBuZXdzIGFib3V0IFN0YXIgV2FycyBtb3ZpZXMgaW4gMjAyMCBhbmQgYmV5b25kLCBidXQgc29tZSBtZWRpYSBvdXRsZXRzIGdhdmUgY29uZmxpY3RpbmcgcmVwb3J0cyBhYm91dCBpdC4gSGVyZSdzIHRoZSByZWFsIHNjb29wLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlxcblwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkh0bWwgb2YgdGhpcyBlcGlzb2RlJ3MgZnVsbCBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInB1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDc0ODczMjAwMDAwLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlB1Ymxpc2hlZCBkYXRlIGZvciB0aGlzIGVwaXNvZGUuIEluIG1pbGxpc2Vjb25kLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzRkODJlNTAzMTQxNzQ3NTRhM2I2MDM5MTI0NDhlODEyL1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBlcGlzb2RlIG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogNTY3LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF1ZGlvIGxlbmd0aCBvZiB0aGlzIGVwaXNvZGUuIEluIHNlY29uZHMuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciBvciBub3QgdGhpcyBlcGlzb2RlJ3MgYXVkaW8gaXMgaW52YWxpZC4gUG9kY2FzdGVycyBtYXkgZGVsZXRlIHRoZSBvcmlnaW5hbCBhdWRpby5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzExYjM0MDQxZTgwNDQ5MWI5NzA0ZDExZjI4M2M3NGRlLyNlZGl0XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRWRpdCB1cmwgb2YgdGhpcyBlcGlzb2RlIHdoZXJlIHlvdSBjYW4gdXBkYXRlIHRoZSBhdWRpbyB1cmwgaWYgeW91IGZpbmQgdGhlIGF1ZGlvIGlzIGJyb2tlbi5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJsYW5ndWFnZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbGFuZ3VhZ2Ugb2YgdGhpcyBwb2RjYXN0LiBZb3UgY2FuIGdldCBhbGwgc3VwcG9ydGVkIGxhbmd1YWdlcyBmcm9tIGBHRVQgL2xhbmd1YWdlc2AuXCJcbiAgICB9LFxuICAgIFwiZ2VucmVfaWRzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VucmUgaWRzLlwiXG4gICAgICB9LFxuICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgMTM4LFxuICAgICAgICA4NixcbiAgICAgICAgMTYwLFxuICAgICAgICA2OCxcbiAgICAgICAgODIsXG4gICAgICAgIDEwMCxcbiAgICAgICAgMTAxXG4gICAgICBdXG4gICAgfSxcbiAgICBcIml0dW5lc19pZFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogODk2MzU0NjM4LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlUdW5lcyBpZCBmb3IgdGhpcyBwb2RjYXN0LlwiXG4gICAgfSxcbiAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgfSxcbiAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgIH0sXG4gICAgXCJpc19jbGFpbWVkXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGNsYWltZWQgYnkgaXRzIHByb2R1Y2VyIG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCI8cD5UaGUgU3RhciBXYXJzIDd4NyBQb2RjYXN0IGlzIFJlYmVsLXJvdXNpbmcgZnVuIGZvciBldmVyeWRheSBKZWRpLCBiZXR3ZWVuIDcgYW5kIDE0IG1pbnV0ZXMgYSBkYXksIDcgZGF5cyBhIHdlZWsuIEpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIFN0YXIgV2FycyBuZXdzLCBoaXN0b3J5LCBpbnRlcnZpZXdzLCB0cml2aWEsIGFuZCBkZWVwIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBzdG9yeSBhcyB0b2xkIGluIG1vdmllcywgYm9va3MsIGNvbWljcywgZ2FtZXMsIGNhcnRvb25zLCBhbmQgbW9yZS4gU3Vic2NyaWJlIG5vdyBmb3IgeW91ciBkYWlseSBkb3NlIG9mIFN0YXIgV2FycyBqb3kuIEl0J3MgZGVzdGlueSB1bmxlYXNoZWQhPC9wPlwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkh0bWwgb2YgdGhpcyBlcGlzb2RlJ3MgZnVsbCBkZXNjcmlwdGlvblwiXG4gICAgfSxcbiAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgZ3Vlc3RzLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiY29ob3N0c1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBjb2hvc3RzLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwic3BvbnNvcnNcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3Igc3BvbnNvcnMuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgY3Jvc3MgcHJvbW90aW9uIG9wcG9ydHVuaXRpZXMgd2l0aCBvdGhlciBwb2RjYXN0cy5cIlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImxpc3Rlbl9zY29yZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHNjb3JlIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQgb24gYSBzY2FsZSBmcm9tIDAgdG8gMTAwLlxcbklmIHRoZSBzY29yZSBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgIH0sXG4gICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMzI0LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvdGFsIG51bWJlciBvZiBlcGlzb2RlcyBpbiB0aGlzIHBvZGNhc3QuXCJcbiAgICB9LFxuICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgIH0sXG4gICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAxMjkxLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF2ZXJhZ2UgYXVkaW8gbGVuZ3RoIG9mIGFsbCBlcGlzb2RlcyBvZiB0aGlzIHBvZGNhc3QuIEluIHNlY29uZHMuXCJcbiAgICB9LFxuICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICB9LFxuICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJkMDU3MDkyZTU3Y2M0Y2VkODBlMGVmYWExOTY1OTNkOVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBpZCBvZiB0aGUgbW9zdCByZWNlbnRseSBwdWJsaXNoZWQgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICB9LFxuICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAxNTU3NDk5NzcwMDAwLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgbGF0ZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgIH0sXG4gICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMTQ3MDY2NzkwMjAwMCxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcHVibGlzaGVkIGRhdGUgb2YgdGhlIG9sZGVzdCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdC4gSW4gbWlsbGlzZWNvbmRzXCJcbiAgICB9LFxuICAgIFwibmV4dF9lcGlzb2RlX3B1Yl9kYXRlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAxNDcwNjY3OTAyMDAwLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBhc3NlZCB0byB0aGUgKipuZXh0X2VwaXNvZGVfcHViX2RhdGUqKiBwYXJhbWV0ZXIgb2YgYEdFVCAvcG9kY2FzdHMve2lkfWAgdG8gcGFnaW5hdGUgdGhyb3VnaCBlcGlzb2RlcyBvZiB0aGF0IHBvZGNhc3QuXCJcbiAgICB9LFxuICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMTY4LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhvdyBmcmVxdWVudGx5IGRvZXMgdGhpcyBwb2RjYXN0IHJlbGVhc2UgYSBuZXcgZXBpc29kZT8gSW4gaG91cnMuIEZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMTY2LCB0aGVuIGl0J3MgZXZlcnkgMTY2IGhvdXJzIChvciB3ZWVrbHkpLlwiXG4gICAgfSxcbiAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgcmFua2luZyBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkLlxcbkZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMC41JSwgdGhlbiB0aGlzIHBvZGNhc3QgaXMgb25lIG9mIHRoZSB0b3AgMC41JSBtb3N0IHBvcHVsYXIgc2hvd3Mgb3V0IG9mIGFsbCBwb2RjYXN0cyBnbG9iYWxseSwgcmFua2VkIGJ5IExpc3RlbiBTY29yZS5cXG5JZiB0aGUgcmFua2luZyBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBGZXRjaCBkZXRhaWxlZCBtZXRhIGRhdGEgZm9yIGFuIGVwaXNvZGUgYnkgaWRcblxuRnVuY3Rpb24gTmFtZTogKipmZXRjaF9lcGlzb2RlX2J5X2lkKipcblxuRmV0Y2ggZGV0YWlsZWQgbWV0YSBkYXRhIGZvciBhIHNwZWNpZmljIGVwaXNvZGUuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX2VwaXNvZGVfYnlfaWQoXG4gICAgaWQ9JzZiNmQ2NTkzMGM1YTRmNzFiMjU0NDY1ODcxZmVkMzcwJywgc2hvd190cmFuc2NyaXB0PTEpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jZ2V0LWFwaS12Mi1lcGlzb2Rlcy1pZCkuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJpZFwiOiBcIjZiNmQ2NTkzMGM1YTRmNzFiMjU0NDY1ODcxZmVkMzcwXCIsXG4gIFwibGlua1wiOiBcImh0dHBzOi8vYXVkaW9ib29tLmNvbS9wb3N0cy83NzQyMTc4P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzZiNmQ2NTkzMGM1YTRmNzFiMjU0NDY1ODcxZmVkMzcwL1wiLFxuICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Etd2lubmluZy1taW5kc2V0LzE2LWFybHktdmVsYXNxdWV6LW9uLXhQYk0xaHBacUZLLWM1a2hQVkt6b3dCLjE0MDB4MTQwMC5qcGdcIixcbiAgXCJ0aXRsZVwiOiBcIlMxIEVwMTY6IEFybHkgVmVsYXNxdWV6IG9uIE1hbmFnaW5nIFJpc2tcIixcbiAgXCJwb2RjYXN0XCI6IHtcbiAgICBcImlkXCI6IFwiMDczYTY2YjQ5NjgyNGE1ZDllODBkNTI2MjFmMzcyZGNcIixcbiAgICBcInJzc1wiOiBcImh0dHBzOi8vYXVkaW9ib29tLmNvbS9jaGFubmVscy81MDMxNTA4LnJzc1wiLFxuICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgXCJlbWFpbFwiOiBcImlwYy5tZWRpYUBwYXJhbHltcGljLm9yZ1wiLFxuICAgIFwiZXh0cmFcIjoge1xuICAgICAgXCJ1cmwxXCI6IFwiaHR0cHM6Ly93d3cucGFyYWx5bXBpYy5vcmcvYS13aW5uaW5nLW1pbmRzZXQtbGVzc29ucy1mcm9tLXRoZS1wYXJhbHltcGljc3pcIixcbiAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OWhkV1JwYjJKdmIyMHVZMjl0TDJOb1lXNXVaV3h6THpVd016RTFNRGd1Y25OelwiLFxuICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzV5RGxsYzJjZVp4UVI3YkpxSWV4NWxcIixcbiAgICAgIFwieW91dHViZV91cmxcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9wYXJhbHltcGljc1wiLFxuICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vY29tcGFueS9pbnRlcm5hdGlvbmFsLXBhcmFseW1waWMtY29tbWl0dGVlXCIsXG4gICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJwYXJhbHltcGljc1wiLFxuICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJwYXJhbHltcGljc1wiLFxuICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJwYXJhbHltcGljc1wiXG4gICAgfSxcbiAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Etd2lubmluZy1taW5kc2V0LWEtd2lubmluZy1taW5kc2V0LWxlc3NvbnMtZjA2SU9wM2drWnEtQmt0QTRZVXpOYnUuMTQwMHgxNDAwLmpwZ1wiLFxuICAgIFwidGl0bGVcIjogXCJBIFdpbm5pbmcgTWluZHNldFwiLFxuICAgIFwiY291bnRyeVwiOiBcIkdlcm1hbnlcIixcbiAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3d3dy5wYXJhbHltcGljLm9yZy9hLXdpbm5pbmctbWluZHNldC1sZXNzb25zLWZyb20tdGhlLXBhcmFseW1waWNzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAxMjQsXG4gICAgICAxMjIsXG4gICAgICA2NyxcbiAgICAgIDExMSxcbiAgICAgIDc3LFxuICAgICAgMTgxLFxuICAgICAgNzgsXG4gICAgICAyMTcsXG4gICAgICA4OCxcbiAgICAgIDE5MSxcbiAgICAgIDkwXG4gICAgXSxcbiAgICBcIml0dW5lc19pZFwiOiAxNTI3NzMzNDc3LFxuICAgIFwicHVibGlzaGVyXCI6IFwiQSBXaW5uaW5nIE1pbmRzZXQ6IExlc3NvbnMgRnJvbSBUaGUgUGFyYWx5bXBpY3NcIixcbiAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hLXdpbm5pbmctbWluZHNldC1hLXdpbm5pbmctbWluZHNldC1sZXNzb25zLURIbGZDQkFxWGg2LUJrdEE0WVV6TmJ1LjMwMHgzMDAuanBnXCIsXG4gICAgXCJpc19jbGFpbWVkXCI6IHRydWUsXG4gICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgV2lubmluZyBNaW5kc2V0LCBhbiBhd2FyZC13aW5uaW5nIHBhcnRuZXJzaGlwIGJldHdlZW4gdGhlIEludGVybmF0aW9uYWwgUGFyYWx5bXBpYyBDb21taXR0ZWUgYW5kIEFsbGlhbnosIGlzIGEgZmFzY2luYXRpbmcgam91cm5leSBpbnRvIHRoZSBtaW5kcyBvZiBQYXJhbHltcGlhbnMsIHdpdGggZXhwZXJpZW5jZXMgdGhhdCBjYW4gYmVuZWZpdCB5b3VyIG93biBwZXJzb25hbCBhbmQgcHJvZmVzc2lvbmFsIGxpZmUuIFxcdTAwYTBcXG5cXHUwMGEwXFxuVGhlIG9mZmljaWFsIHBvZGNhc3Qgb2YgdGhlIFBhcmFseW1waWMgR2FtZXMgcHJvdmlkZXMgYSBwbGF0Zm9ybSBmb3IgUGFyYSBhdGhsZXRlcyB0byB0YWxrIGFib3V0IHRoZWlyIGVtcG93ZXJpbmcgYW5kIGluc3BpcmF0aW9uYWwgc3RvcmllcyBhbmQgYWxsb3dzIGVhY2ggYXRobGV0ZSB0byBzaG93Y2FzZSB0aGVpciB0cnVlIHBlcnNvbmFsaXRpZXMuXFx1MDBhMFxcblxcbldJTk5FUiBPRiBCRVNUIEJSQU5ERUQgUE9EQ0FTVCBBVCBUSEUgMjAyMSBXRUJCWSBBV0FSRFNcXG5XSU5ORVIgT0YgQkVTVCBQT0RDQVNUIEFUIDIwMjEgRElHSURBWSBNRURJQSBFVVJPUEUgQVdBUkRTXFxuV0lOTkVSIE9GIEJFU1QgU1BPUlQgUE9EQ0FTVCBBVCAyMDIxIFNQT1JUIElORFVTVFJZIEFXQVJEU1xcbldJTk5FUiBPRiBCRVNUIEJSQU5EIFBBUlRORVJTSElQIEFUIDIwMjIgRElHSURBWSBNRURJQSBFVVJPUEUgQVdBUkRTXFxuXFx1MDBhMFxcbkVwaXNvZGVzIGdvIGJleW9uZCBQYXJhbHltcGljIHN0b3JpZXMgYnkgY292ZXJpbmcgYSByYW5nZSBvZiBlZHVjYXRpb25hbCwgbWVudGFsIGhlYWx0aCBhbmQgc2VsZi1pbXByb3ZlbWVudCB0aGVtZXMuXFx1MDBhMCBBdGhsZXRlcyBhbHNvIHRhY2tsZSBzdWJqZWN0cyB0aGF0IGFyZSBjbG9zZSB0byB0aGVpciBoZWFydHMgYW5kIG9mIGludGVyZXN0IHRvIGZhbnMuIElzc3VlcyBleHBsb3JlZCBpbmNsdWRlIGZpbmRpbmcgcHVycG9zZSwgd2VsbGJlaW5nLCBtb3RpdmF0aW9uLCBjaGFuZ2luZyBhdHRpdHVkZXMsIG92ZXJjb21pbmcgZmFpbHVyZSwgc3VwcG9ydCBzeXN0ZW1zLCByZXNpbGllbmNlLCBwb3NpdGl2aXR5LCBkaXZlcnNpdHkgYW5kIGluY2x1c2lvbiwgYm9keSBjb25maWRlbmNlIGFuZCBtYW55IG1vcmUuIFxcdTAwYTBcXG5cXG5BbGxpYW56IGlzIGEgbG9uZy1zdGFuZGluZyBwYXJ0bmVyIG9mIHRoZSBJbnRlcm5hdGlvbmFsIFBhcmFseW1waWMgQ29tbWl0dGVlLiBUb2dldGhlciwgd2UgYnJpbmcgeW91IHRoaXMgc2VyaWVzIG9mIHBvZGNhc3RzLiBXZSB3aWxsIGludHJvZHVjZSB5b3UgdG8gc3RvcmllcyB3aXRoIFBhcmFseW1waWFucyB0aGF0IHdpbGwgc3BhcmsgY29uZmlkZW5jZSBpbiB5b3VyIGV2ZXJ5ZGF5IGxpZmUuIFN0b3JpZXMgb2YgY2hhbGxlbmdlcywgdXBzIGFuZCBkb3ducywgZGV0ZXJtaW5hdGlvbiwgYW5kIGV4Y2VsbGVuY2UuIFN0b3JpZXMgdGhhdCBkZW1vbnN0cmF0ZSB0aGUgdHJ1ZSBwb3dlciBvZiBoYXZpbmcgdGhlIHJpZ2h0IHRlYW0gYmVoaW5kIHlvdS4gQW5kIHByZXBhcmUgeW91IGZvciB3aGF0XFx1MjAxOXMgYWhlYWQuXFx1MDBhMFxcblxcdTAwYTBcXG5cXG5UaGUgUGFyYWx5bXBpYyBwb2RjYXN0IHNlcmllcyBpcyBwcmVzZW50ZWQgYnkgQnJpdGlzaCBicm9hZGNhc3RlciBBbmR5IFN0ZXZlbnNvbiwgd2hvIGhhcyByZXBvcnRlZCBvbiB0aGUgUGFyYWx5bXBpYyBHYW1lcyBzaW5jZSAyMDEyIGZvciBCQkMgYW5kIENoYW5uZWwgNC5cXHUwMGEwXFxuXFx1MDBhMFxcbkZlYXR1cmVkIGF0aGxldGVzIGluY2x1ZGUgVGF0eWFuYSBNY0ZhZGRlbiwgSm9ubmllIFBlYWNvY2sgYW5kIEFybHkgVmVsYXNxdWV6LiBNYWtlIHN1cmUgeW91IHN1YnNjcmliZSB0byBoZWFyIHVwY29taW5nIGVwaXNvZGVzIGZyb20gYXRobGV0ZXMgaW5jbHVkaW5nIE1hcmNlbCBIdWcgYW5kIEFuYXN0YXNpYSBQYWdvbmlzLlxcdTAwYTBcIixcbiAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IHRydWVcbiAgICB9LFxuICAgIFwibGlzdGVuX3Njb3JlXCI6IDQxLFxuICAgIFwidG90YWxfZXBpc29kZXNcIjogMzYsXG4gICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8wNzNhNjZiNDk2ODI0YTVkOWU4MGQ1MjYyMWYzNzJkYy9cIixcbiAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTYxOCxcbiAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcImVlM2U5ODcwNmUyZjRlNmI5MGY0NzQwNmNhNWEyMDI0XCIsXG4gICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY0Mzk1Nzc2MDAwMCxcbiAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1OTg0MzYxMjAwMzUsXG4gICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE1NSxcbiAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICB9LFxuICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hLXdpbm5pbmctbWluZHNldC8xNi1hcmx5LXZlbGFzcXVlei1vbi1mdEN4cW5VZzBTci1jNWtoUFZLem93Qi4zMDB4MzAwLmpwZ1wiLFxuICBcInRyYW5zY3JpcHRcIjogXCJcXG5BIFBhcmFseW1waWMgc2tpaWVyIGZyb20gTWV4aWNvIGlzblxcdTIwMTl0IHNvbWV0aGluZyB5b3UgZXhwZWN0IHRvIHNlZSB0b28gb2Z0ZW4uIEJ1dCBBcmx5IFZlbGFzcXVleiBkb2VzblxcdTIwMTl0IGJlbGlldmUgaW4gZXhwZWN0YXRpb25zLiBcXG5cXG5WZWxhc3F1ZXosIG9uZSBvZiBhIHNlbGVjdCBmZXcgdG8gZXZlciByZXByZXNlbnQgTWV4aWNvIGF0IGEgV2ludGVyIFBhcmFseW1waWMgR2FtZXMsIGRpc2N1c3NlcyB0aGUgcm9sZSBvZiByaXNrIGluIGhpcyBsaWZlIC0gYW5kIGhvdyB3ZSBjYW4gYWxsIGxlYXJuIHRvIG1hbmFnZSBpdC5cXHUwMGEwXFxuXFxuXFx1MjAxY0kgaGF2ZSBkZXZlbG9wZWQgYmVjYXVzZSBvZiB0YWtpbmcgZGVjaXNpb25zIHdoZXJlIEkgaGF2ZSBubyBpZGVhLiBJdFxcdTIwMTlzIGEgbWF0dGVyIG9mICdkb2VzIGl0IGZlZWwgcmlnaHQgb3Igbm90PydcXFwiIGhlIHNhaWQuXFxuXFxuXFxcIkkgZG9uJ3Qgc2VlIGl0IGFzIGEgcmlzaywgSSBzZWUgdGhhdCB3aGVuIEkgYW0gaW4gdGhlIG1vdW50YWluIG9uIGEgc2l0IHNraSwgSSBqdXN0IGZlZWwgdGhlIG1vc3QgZnJlZS5cXHUyMDFkXFx1MDBhMFxcblxcblRoZSBmb3JtZXIgQk1YIGNoYW1waW9uIGFsc28gZGlzY3Vzc2VzIHRoZSByaXNrcyBoZSB0b29rIHdoZW4gbGVhdmluZyBNZXhpY28gb24gdGhlIHNwdXIgb2YgYSBtb21lbnQsIGJ1aWxkaW5nIGEgbmV3IGxpZmUgb24gdGhlIHNraSBzbG9wZXMgaW4gQ2FuYWRhLiBcXHUwMGEwXFxuXFxuXFx1MjAxYyhTa2lpbmcpIGdhdmUgbWUgdGhlIGJlbGllZiB0byBnbyBiYWNrIHRvIE1leGljbywgc2VsbCBhbGwgbXkgc3R1ZmYsXFx1MDBhMCBzZWxsIG15IGNhciBhbmQgcHJldHR5IG11Y2ggZmx5IHRvIHRoZSBib3JkZXIsXFxcIiBoZSBzYWlkLlxcdTAwYTBcXG5cXG5cXFwiSXQncyB2ZXJ5LCByYXJlIHRoYXQgdGhlcmUgYXJlIG1vbWVudHMgaW4geW91ciBsaWZlIHdoZXJlIHlvdSBhcmUgZmVlbGluZyBhbmQgeW91ciBndXQgdGVsbHMgeW91IHRoYXQgeW91IGFyZSBpbiB0aGUgcmlnaHQgcGxhY2UuIFRoYXQgeW91IGFyZSBkb2luZyB0aGUgcmlnaHQgdGhpbmcgYW5kIHRoYXQgaXQncyBzb21ldGhpbmcgdGhhdCB5b3Ugd2FudCB0byBrZWVwIGRvaW5nIGluIHlvdXIgbGlmZS4gVGhhdCdzIHdoYXQgSSBmZWx0IGZvciB0aGUgZmlyc3QgdGltZS5cXHUyMDFkXFx1MDBhMFxcblxcbkxlYXJuaW5nIHRvcGljcyBmb3IgdGhpcyBlcGlzb2RlIGluY2x1ZGUgbWFuYWdpbmcgcmlzaywgaG93IHRvIGJ1aWxkIGEgYnJhbmQsIHNlbGYtdW5kZXJzdGFuZGluZywgZGVmaWFuY2UsIHRocmlsbC1zZWVraW5nIGFuZCBleHBsb3JhdGlvbi4gXFx1MDBhMFxcblxcbkFsbGlhbnogaXMgYSBsb25nLXN0YW5kaW5nIHBhcnRuZXIgb2YgdGhlIEludGVybmF0aW9uYWwgUGFyYWx5bXBpYyBDb21taXR0ZWUuIFRvZ2V0aGVyLCB3ZVxcdTIwMTlyZSBwcm91ZCB0byBicmluZyB5b3UgQSBXaW5uaW5nIE1pbmRzZXQ6IExlc3NvbnMgRnJvbSBUaGUgUGFyYWx5bXBpY3MuIFdlIGFpbSB0byBoZWxwIHlvdSBtb3ZlIGZvcndhcmQgaW4gYWxsIGFzcGVjdHMgb2YgeW91ciBwZXJzb25hbCBhbmQgcHJvZmVzc2lvbmFsIGxpZmUuXFx1MDBhMFxcblxcbkJ5IGhlYXJpbmcgZnJvbSBQYXJhbHltcGljIHN0YXJzLCB5b3VcXHUyMDE5bGwgYmUgaW50cm9kdWNlZCB0byBzdG9yaWVzIHRoYXQgaW5zcGlyZSBhbmQgY2hhbmdlIHRoZSB3YXkgeW91IHRoaW5rLiBTdG9yaWVzIG9mIGZhY2luZyBsaWZlXFx1MjAxOXMgY2hhbGxlbmdlcyB3aXRoIGNvbmZpZGVuY2UsIGRldGVybWluYXRpb24gYW5kIGV4Y2VsbGVuY2UsIGFuZCB0aGUgdHJ1ZSBwb3dlciBvZiBoYXZpbmcgdGhlIHJpZ2h0IHRlYW0gYmVoaW5kIHlvdS5cXHUwMGEwXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCI8ZGl2PlxcbjxzdHJvbmc+QSBQYXJhbHltcGljIHNraWllciBmcm9tIE1leGljbyBpc25cXHUyMDE5dCBzb21ldGhpbmcgeW91IGV4cGVjdCB0byBzZWUgdG9vIG9mdGVuLiBCdXQgQXJseSBWZWxhc3F1ZXogZG9lc25cXHUyMDE5dCBiZWxpZXZlIGluIGV4cGVjdGF0aW9ucy4gPC9zdHJvbmc+PGJyIC8+XFxuPGJyIC8+XFxuVmVsYXNxdWV6LCBvbmUgb2YgYSBzZWxlY3QgZmV3IHRvIGV2ZXIgcmVwcmVzZW50IE1leGljbyBhdCBhIFdpbnRlciBQYXJhbHltcGljIEdhbWVzLCBkaXNjdXNzZXMgdGhlIHJvbGUgb2YgcmlzayBpbiBoaXMgbGlmZSAtIGFuZCBob3cgd2UgY2FuIGFsbCBsZWFybiB0byBtYW5hZ2UgaXQuXFx1MDBhMDxiciAvPlxcbjxiciAvPlxcblxcdTIwMWNJIGhhdmUgZGV2ZWxvcGVkIGJlY2F1c2Ugb2YgdGFraW5nIGRlY2lzaW9ucyB3aGVyZSBJIGhhdmUgbm8gaWRlYS4gSXRcXHUyMDE5cyBhIG1hdHRlciBvZiAnZG9lcyBpdCBmZWVsIHJpZ2h0IG9yIG5vdD8nXFxcIiBoZSBzYWlkLjxiciAvPlxcbjxiciAvPlxcblxcXCJJIGRvbid0IHNlZSBpdCBhcyBhIHJpc2ssIEkgc2VlIHRoYXQgd2hlbiBJIGFtIGluIHRoZSBtb3VudGFpbiBvbiBhIHNpdCBza2ksIEkganVzdCBmZWVsIHRoZSBtb3N0IGZyZWUuXFx1MjAxZFxcdTAwYTA8YnIgLz5cXG48YnIgLz5cXG5UaGUgZm9ybWVyIEJNWCBjaGFtcGlvbiBhbHNvIGRpc2N1c3NlcyB0aGUgcmlza3MgaGUgdG9vayB3aGVuIGxlYXZpbmcgTWV4aWNvIG9uIHRoZSBzcHVyIG9mIGEgbW9tZW50LCBidWlsZGluZyBhIG5ldyBsaWZlIG9uIHRoZSBza2kgc2xvcGVzIGluIENhbmFkYS4gXFx1MDBhMDxiciAvPlxcbjxiciAvPlxcblxcdTIwMWMoU2tpaW5nKSBnYXZlIG1lIHRoZSBiZWxpZWYgdG8gZ28gYmFjayB0byBNZXhpY28sIHNlbGwgYWxsIG15IHN0dWZmLFxcdTAwYTAgc2VsbCBteSBjYXIgYW5kIHByZXR0eSBtdWNoIGZseSB0byB0aGUgYm9yZGVyLFxcXCIgaGUgc2FpZC5cXHUwMGEwPGJyIC8+XFxuPGJyIC8+XFxuXFxcIkl0J3MgdmVyeSwgcmFyZSB0aGF0IHRoZXJlIGFyZSBtb21lbnRzIGluIHlvdXIgbGlmZSB3aGVyZSB5b3UgYXJlIGZlZWxpbmcgYW5kIHlvdXIgZ3V0IHRlbGxzIHlvdSB0aGF0IHlvdSBhcmUgaW4gdGhlIHJpZ2h0IHBsYWNlLiBUaGF0IHlvdSBhcmUgZG9pbmcgdGhlIHJpZ2h0IHRoaW5nIGFuZCB0aGF0IGl0J3Mgc29tZXRoaW5nIHRoYXQgeW91IHdhbnQgdG8ga2VlcCBkb2luZyBpbiB5b3VyIGxpZmUuIFRoYXQncyB3aGF0IEkgZmVsdCBmb3IgdGhlIGZpcnN0IHRpbWUuXFx1MjAxZFxcdTAwYTA8YnIgLz5cXG48YnIgLz5cXG5MZWFybmluZyB0b3BpY3MgZm9yIHRoaXMgZXBpc29kZSBpbmNsdWRlIG1hbmFnaW5nIHJpc2ssIGhvdyB0byBidWlsZCBhIGJyYW5kLCBzZWxmLXVuZGVyc3RhbmRpbmcsIGRlZmlhbmNlLCB0aHJpbGwtc2Vla2luZyBhbmQgZXhwbG9yYXRpb24uIFxcdTAwYTA8YnIgLz5cXG48YnIgLz5cXG5BbGxpYW56IGlzIGEgbG9uZy1zdGFuZGluZyBwYXJ0bmVyIG9mIHRoZSBJbnRlcm5hdGlvbmFsIFBhcmFseW1waWMgQ29tbWl0dGVlLiBUb2dldGhlciwgd2VcXHUyMDE5cmUgcHJvdWQgdG8gYnJpbmcgeW91IEEgV2lubmluZyBNaW5kc2V0OiBMZXNzb25zIEZyb20gVGhlIFBhcmFseW1waWNzLiBXZSBhaW0gdG8gaGVscCB5b3UgbW92ZSBmb3J3YXJkIGluIGFsbCBhc3BlY3RzIG9mIHlvdXIgcGVyc29uYWwgYW5kIHByb2Zlc3Npb25hbCBsaWZlLlxcdTAwYTA8YnIgLz5cXG48YnIgLz5cXG5CeSBoZWFyaW5nIGZyb20gUGFyYWx5bXBpYyBzdGFycywgeW91XFx1MjAxOWxsIGJlIGludHJvZHVjZWQgdG8gc3RvcmllcyB0aGF0IGluc3BpcmUgYW5kIGNoYW5nZSB0aGUgd2F5IHlvdSB0aGluay4gU3RvcmllcyBvZiBmYWNpbmcgbGlmZVxcdTIwMTlzIGNoYWxsZW5nZXMgd2l0aCBjb25maWRlbmNlLCBkZXRlcm1pbmF0aW9uIGFuZCBleGNlbGxlbmNlLCBhbmQgdGhlIHRydWUgcG93ZXIgb2YgaGF2aW5nIHRoZSByaWdodCB0ZWFtIGJlaGluZCB5b3UuXFx1MDBhMDwvZGl2PlwiLFxuICBcInB1Yl9kYXRlX21zXCI6IDE2MDcwNTQyMjAwMTksXG4gIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcInRhZzphdWRpb2Jvb20uY29tLDIwMjAtMTItMDI6L3Bvc3RzLzc3NDIxNzhcIixcbiAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS82YjZkNjU5MzBjNWE0ZjcxYjI1NDQ2NTg3MWZlZDM3MC9cIixcbiAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE2MzcsXG4gIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNmI2ZDY1OTMwYzVhNGY3MWIyNTQ0NjU4NzFmZWQzNzAvI2VkaXRcIlxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwiaWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCI0ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMlwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVwaXNvZGUgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICB9LFxuICAgIFwibGlua1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lm5wci5vcmcvMjAyMC8wMS8yMi83OTg1MzIxNzkvc29sZWltYW5pcy1pcmFuXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2ViIGxpbmsgb2YgdGhpcyBlcGlzb2RlLlwiXG4gICAgfSxcbiAgICBcImF1ZGlvXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyB1cmwgb2YgdGhpcyBlcGlzb2RlLCB3aGljaCBjYW4gYmUgcGxheWVkIGRpcmVjdGx5LlwiXG4gICAgfSxcbiAgICBcImltYWdlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayBpbWFnZS5cXG5JZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgfSxcbiAgICBcInRpdGxlXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiQ2VsZWJyYXRpb24gUmVjYXAsIEphc29uIEZyeSBhbmQgQ2hyaXN0aWFuIEJsYXV2ZWx0IEludGVydmlld3MgXFx1MjAxMyBTV0JXICMxMDFcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIG5hbWUuXCJcbiAgICB9LFxuICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJyc3NcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS9yc3NcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUlNTIHVybCBvZiB0aGlzIHBvZGNhc3QuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgXCJlcGlzb2RpY1wiLFxuICAgICAgICAgICAgXCJzZXJpYWxcIlxuICAgICAgICAgIF0sXG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHR5cGUgb2YgdGhpcyBwb2RjYXN0IC0gZXBpc29kaWMgb3Igc2VyaWFsLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImhlbGxvQGV4YW1wbGUuY29tXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlbWFpbCBvZiB0aGlzIHBvZGNhc3QncyBwcm9kdWNlci4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICB9LFxuICAgICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJ1cmwxXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ1cmwyXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ1cmwzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJnb29nbGVfdXJsXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5eWMzTXVZWEowTVRrdVkyOXRMMnB2YUc0dGMyOXNiMjF2YmkxeVpYQnZjblJ6XCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHb29nbGUgUG9kY2FzdHMgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwic3BvdGlmeV91cmxcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMnJRSlVQOVkzSHhlbWlXM0pIdDlXVlwiLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3BvdGlmeSB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9zdzd4N1wiLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWW91VHViZSB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJsaW5rZWRpbl91cmxcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpbmtlZEluIHVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlQ2hhdCB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXRyZW9uIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU1c3eDdwb2RjYXN0XCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2l0dGVyIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGYWNlYm9vayB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9tdXNpYy5hbWF6b24uY29tL3BvZGNhc3RzLzZmYzZkNjgzLTllZjMtNDg1MC05YzM1LThlOGIxYTQyYTE0Ny90aGUtbG9jay1zcG9ydHNjYXN0XCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbWF6b24gTXVzaWMgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5zdGFncmFtIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICB9LFxuICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJTdGFyIFdhcnMgN3g3IHwgU3RhciBXYXJzIE5ld3MsIEludGVydmlld3MsIGFuZCBNb3JlIVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJjb3VudHJ5XCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBjb3VudHJ5IHdoZXJlIHRoaXMgcG9kY2FzdCBpcyBwcm9kdWNlZC5cIlxuICAgICAgICB9LFxuICAgICAgICBcIndlYnNpdGVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHA6Ly9zdzd4Ny5jb20vXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYnNpdGUgdXJsIG9mIHRoaXMgcG9kY2FzdC5cIlxuICAgICAgICB9LFxuICAgICAgICBcImxhbmd1YWdlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJFbmdsaXNoXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBsYW5ndWFnZSBvZiB0aGlzIHBvZGNhc3QuIFlvdSBjYW4gZ2V0IGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzIGZyb20gYEdFVCAvbGFuZ3VhZ2VzYC5cIlxuICAgICAgICB9LFxuICAgICAgICBcImdlbnJlX2lkc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZHMuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICA4NixcbiAgICAgICAgICAgIDE2MCxcbiAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgODIsXG4gICAgICAgICAgICAxMDAsXG4gICAgICAgICAgICAxMDFcbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIFwiaXR1bmVzX2lkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IDg5NjM1NDYzOCxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaVR1bmVzIGlkIGZvciB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwdWJsaXNoZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICB9LFxuICAgICAgICBcImlzX2NsYWltZWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgY2xhaW1lZCBieSBpdHMgcHJvZHVjZXIgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCI8cD5UaGUgU3RhciBXYXJzIDd4NyBQb2RjYXN0IGlzIFJlYmVsLXJvdXNpbmcgZnVuIGZvciBldmVyeWRheSBKZWRpLCBiZXR3ZWVuIDcgYW5kIDE0IG1pbnV0ZXMgYSBkYXksIDcgZGF5cyBhIHdlZWsuIEpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIFN0YXIgV2FycyBuZXdzLCBoaXN0b3J5LCBpbnRlcnZpZXdzLCB0cml2aWEsIGFuZCBkZWVwIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBzdG9yeSBhcyB0b2xkIGluIG1vdmllcywgYm9va3MsIGNvbWljcywgZ2FtZXMsIGNhcnRvb25zLCBhbmQgbW9yZS4gU3Vic2NyaWJlIG5vdyBmb3IgeW91ciBkYWlseSBkb3NlIG9mIFN0YXIgV2FycyBqb3kuIEl0J3MgZGVzdGlueSB1bmxlYXNoZWQhPC9wPlwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdG1sIG9mIHRoaXMgZXBpc29kZSdzIGZ1bGwgZGVzY3JpcHRpb25cIlxuICAgICAgICB9LFxuICAgICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgXCJndWVzdHNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgZ3Vlc3RzLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjb2hvc3RzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNvaG9zdHMuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcInNwb25zb3JzXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIHNwb25zb3JzLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgY3Jvc3MgcHJvbW90aW9uIG9wcG9ydHVuaXRpZXMgd2l0aCBvdGhlciBwb2RjYXN0cy5cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiAzMjQsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvdGFsIG51bWJlciBvZiBlcGlzb2RlcyBpbiB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiAxMjkxLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdmVyYWdlIGF1ZGlvIGxlbmd0aCBvZiBhbGwgZXBpc29kZXMgb2YgdGhpcyBwb2RjYXN0LiBJbiBzZWNvbmRzLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiZDA1NzA5MmU1N2NjNGNlZDgwZTBlZmFhMTk2NTkzZDlcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHRoZSBtb3N0IHJlY2VudGx5IHB1Ymxpc2hlZCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBlcGlzb2RlIG1ldGFkYXRhIHZpYSBgR0VUIC9lcGlzb2Rlcy97aWR9YC5cIlxuICAgICAgICB9LFxuICAgICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNTU3NDk5NzcwMDAwLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcHVibGlzaGVkIGRhdGUgb2YgdGhlIGxhdGVzdCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdC4gSW4gbWlsbGlzZWNvbmRzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDcwNjY3OTAyMDAwLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcHVibGlzaGVkIGRhdGUgb2YgdGhlIG9sZGVzdCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdC4gSW4gbWlsbGlzZWNvbmRzXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IDE2OCxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSG93IGZyZXF1ZW50bHkgZG9lcyB0aGlzIHBvZGNhc3QgcmVsZWFzZSBhIG5ldyBlcGlzb2RlPyBJbiBob3Vycy4gRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAxNjYsIHRoZW4gaXQncyBldmVyeSAxNjYgaG91cnMgKG9yIHdlZWtseSkuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlICgzMDB4MzAwKSB1cmwgZm9yIHRoaXMgZXBpc29kZS5cXG5JZiBhbiBlcGlzb2RlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIGltYWdlLCB0aGVuIHRoaXMgZmllbGQgd291bGQgYmUgdGhlIHVybCBvZiB0aGUgcG9kY2FzdCBhcnR3b3JrIHRodW1ibmFpbCBpbWFnZS5cXG5cIlxuICAgIH0sXG4gICAgXCJ0cmFuc2NyaXB0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiMDA6MDA6MDcgV2VsY29tZSB0byB0aGlzIHBvZGNhc3QuLi5cXG5cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdHJhbnNjcmlwdCBvZiB0aGlzIGVwaXNvZGUsIGluIHBsYWluIHRleHQgKHdpdGggdGhlIG5ld2xpbmUgY2hhcmFjdGVyIFxcXFxuKS4gSWYgdGhlcmUncyBub3QgdHJhbnNjcmlwdCwgaXQgaXMgbnVsbC4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIjxwPkRpc25leSBjaGllZiBCb2IgSWdlciBzaGFyZWQgbmV3cyBhYm91dCBTdGFyIFdhcnMgbW92aWVzIGluIDIwMjAgYW5kIGJleW9uZCwgYnV0IHNvbWUgbWVkaWEgb3V0bGV0cyBnYXZlIGNvbmZsaWN0aW5nIHJlcG9ydHMgYWJvdXQgaXQuIEhlcmUncyB0aGUgcmVhbCBzY29vcC4gUHVuY2ggaXQhPC9wPiA8cD4qKipXZVxcdTIwMTlyZSBsaXN0ZW5lciBzdXBwb3J0ZWQhIEdvIHRvIGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBkb25hdGUgdG8gdGhlIFN0YXIgV2FycyA3eDcgcG9kY2FzdCwgYW5kIHlvdVxcdTIwMTlsbCBnZXQgc29tZSBmYWJ1bG91cyByZXdhcmRzIGZvciB5b3VyIHBsZWRnZS4qKipcXHUwMGEwPC9wPiA8cD5DaGVjayBvdXQgU1c3eDcuY29tIGZvciBmdWxsIFN0YXIgV2FycyA3eDcgc2hvdyBub3RlcyBhbmQgbGlua3MsIGFuZCB0byBjb21tZW50IG9uIGFueSBvZiB0aGUgY29udGVudCBvZiB0aGlzIGVwaXNvZGUhIElmIHlvdSBsaWtlIHdoYXQgeW91J3ZlIGhlYXJkLCBwbGVhc2UgbGVhdmUgdXMgYSByYXRpbmcgb3IgcmV2aWV3IG9uIGlUdW5lcyBvciBTdGl0Y2hlciwgd2hpY2ggd2lsbCBhbHNvIGhlbHAgbW9yZSBwZW9wbGUgZGlzY292ZXIgdGhpcyBTdGFyIFdhcnMgcG9kY2FzdC48L3A+IDxwPkRvbid0IGZvcmdldCB0byBqb2luIHRoZSBTdGFyIFdhcnMgN3g3IGZ1biBvbiBGYWNlYm9vayBhdCBGYWNlYm9vay5jb20vU1c3eDcsIGFuZCBmb2xsb3cgdGhlIGJyZWFraW5nIG5ld3MgVHdpdHRlciBmZWVkIGF0IFR3aXR0ZXIuY29tL1NXN3g3UG9kY2FzdC4gV2UncmUgYWxzbyBvbiBQaW50ZXJlc3QgYW5kIEluc3RhZ3JhbSBhcyBcXFwiU1c3eDdcXFwiIHRvbywgYW5kIHdlJ2QgbG92ZSB0byBjb25uZWN0IHdpdGggeW91IHRoZXJlITwvcD5cXG5cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdG1sIG9mIHRoaXMgZXBpc29kZSdzIGZ1bGwgZGVzY3JpcHRpb25cIlxuICAgIH0sXG4gICAgXCJwdWJfZGF0ZV9tc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMTQ3NDg3MzIwMDAwMCxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQdWJsaXNoZWQgZGF0ZSBmb3IgdGhpcyBlcGlzb2RlLiBJbiBtaWxsaXNlY29uZC5cIlxuICAgIH0sXG4gICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMi9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgZXBpc29kZSBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgfSxcbiAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDU2NyxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyBsZW5ndGggb2YgdGhpcyBlcGlzb2RlLiBJbiBzZWNvbmRzLlwiXG4gICAgfSxcbiAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGNvbnRhaW5zIGV4cGxpY2l0IGxhbmd1YWdlLlwiXG4gICAgfSxcbiAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgb3Igbm90IHRoaXMgZXBpc29kZSdzIGF1ZGlvIGlzIGludmFsaWQuIFBvZGNhc3RlcnMgbWF5IGRlbGV0ZSB0aGUgb3JpZ2luYWwgYXVkaW8uXCJcbiAgICB9LFxuICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS8jZWRpdFwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVkaXQgdXJsIG9mIHRoaXMgZXBpc29kZSB3aGVyZSB5b3UgY2FuIHVwZGF0ZSB0aGUgYXVkaW8gdXJsIGlmIHlvdSBmaW5kIHRoZSBhdWRpbyBpcyBicm9rZW4uXCJcbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgRmV0Y2ggYSBsaXN0IG9mIHN1cHBvcnRlZCBsYW5ndWFnZXMgZm9yIHBvZGNhc3RzXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfcG9kY2FzdF9sYW5ndWFnZXMqKlxuXG5HZXQgYSBsaXN0IG9mIGxhbmd1YWdlcyB0aGF0IGFyZSBzdXBwb3J0ZWQgaW4gTGlzdGVuIE5vdGVzIGRhdGFiYXNlLiBZb3UgY2FuIHVzZSB0aGUgbGFuZ3VhZ2Ugc3RyaW5nIGFzIHF1ZXJ5IHBhcmFtZXRlciBpbiBgR0VUIC9zZWFyY2hgLlxuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX3BvZGNhc3RfbGFuZ3VhZ2VzKClcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLWxhbmd1YWdlcykuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJsYW5ndWFnZXNcIjogW1xuICAgIFwiQW55IGxhbmd1YWdlXCIsXG4gICAgXCJBZmFyXCIsXG4gICAgXCJBYmtoYXppYW5cIixcbiAgICBcIkFmcmlrYWFuc1wiLFxuICAgIFwiQWthblwiLFxuICAgIFwiQWxiYW5pYW5cIixcbiAgICBcIkFyYWJpY1wiLFxuICAgIFwiQXplcmJhaWphbmlcIixcbiAgICBcIkJhbWJhcmFcIixcbiAgICBcIkJhc2hraXJcIixcbiAgICBcIkJhc3F1ZVwiLFxuICAgIFwiQmVsYXJ1c2lhblwiLFxuICAgIFwiQmVuZ2FsaVwiLFxuICAgIFwiQm9zbmlhblwiLFxuICAgIFwiQnVsZ2FyaWFuXCIsXG4gICAgXCJCdXJtZXNlXCIsXG4gICAgXCJDYXRhbGFuXCIsXG4gICAgXCJDaGFtb3Jyb1wiLFxuICAgIFwiQ2hpbmVzZVwiLFxuICAgIFwiQ3JvYXRpYW5cIixcbiAgICBcIkN6ZWNoXCIsXG4gICAgXCJEYW5pc2hcIixcbiAgICBcIkR1dGNoXCIsXG4gICAgXCJFbmdsaXNoXCIsXG4gICAgXCJFc3RvbmlhblwiLFxuICAgIFwiRmFlcm9lc2VcIixcbiAgICBcIkZhcnNpXCIsXG4gICAgXCJGaW5uaXNoXCIsXG4gICAgXCJGcmVuY2hcIixcbiAgICBcIkdhZWxpY1wiLFxuICAgIFwiR2FsaWNpYW5cIixcbiAgICBcIkdlcm1hblwiLFxuICAgIFwiR3JlZWtcIixcbiAgICBcIkhlYnJld1wiLFxuICAgIFwiSGluZGlcIixcbiAgICBcIkh1bmdhcmlhblwiLFxuICAgIFwiSWNlbGFuZGljXCIsXG4gICAgXCJJbmRvbmVzaWFuXCIsXG4gICAgXCJJcmlzaFwiLFxuICAgIFwiSXRhbGlhblwiLFxuICAgIFwiSmFwYW5lc2VcIixcbiAgICBcIktobWVyXCIsXG4gICAgXCJLaXJnaGl6XCIsXG4gICAgXCJLb3JlYW5cIixcbiAgICBcIkxhdGluXCIsXG4gICAgXCJMYXR2aWFuXCIsXG4gICAgXCJMaXRodWFuaWFuXCIsXG4gICAgXCJNYWNlZG9uaWFuXCIsXG4gICAgXCJNYWxheVwiLFxuICAgIFwiTWFsYXlhbGFtXCIsXG4gICAgXCJNYXJhdGhpXCIsXG4gICAgXCJNb25nb2xpYW5cIixcbiAgICBcIk5lcGFsaVwiLFxuICAgIFwiTm9ydGhlcm4gU2FtaVwiLFxuICAgIFwiTm9yd2VnaWFuXCIsXG4gICAgXCJQb2xpc2hcIixcbiAgICBcIlBvcnR1Z3Vlc2VcIixcbiAgICBcIlJvbWFuaWFuXCIsXG4gICAgXCJSdXNzaWFuXCIsXG4gICAgXCJTZXJiaWFuXCIsXG4gICAgXCJTaW5naGFsZXNlXCIsXG4gICAgXCJTbG92YWtcIixcbiAgICBcIlNsb3ZlbmlhblwiLFxuICAgIFwiU3BhbmlzaFwiLFxuICAgIFwiU3dhaGlsaVwiLFxuICAgIFwiU3dlZGlzaFwiLFxuICAgIFwiVGFtaWxcIixcbiAgICBcIlRlbHVndVwiLFxuICAgIFwiVGhhaVwiLFxuICAgIFwiVHVya2lzaFwiLFxuICAgIFwiVHdpXCIsXG4gICAgXCJVa3JhbmlhblwiLFxuICAgIFwiVXJkdVwiLFxuICAgIFwiVmlldG5hbWVzZVwiXG4gIF1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJyZXF1aXJlZFwiOiBbXG4gICAgXCJsYW5ndWFnZXNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwibGFuZ3VhZ2VzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICBcIkFueSBsYW5ndWFnZVwiLFxuICAgICAgICBcIkFmYXJcIixcbiAgICAgICAgXCJBYmtoYXppYW5cIixcbiAgICAgICAgXCJBZnJpa2FhbnNcIixcbiAgICAgICAgXCJBa2FuXCIsXG4gICAgICAgIFwiQWxiYW5pYW5cIixcbiAgICAgICAgXCJBcmFiaWNcIixcbiAgICAgICAgXCJBemVyYmFpamFuaVwiLFxuICAgICAgICBcIkJhbWJhcmFcIixcbiAgICAgICAgXCJCYXNoa2lyXCIsXG4gICAgICAgIFwiQmFzcXVlXCIsXG4gICAgICAgIFwiQmVsYXJ1c2lhblwiLFxuICAgICAgICBcIkJ1bGdhcmlhblwiLFxuICAgICAgICBcIkNhdGFsYW5cIixcbiAgICAgICAgXCJDaGFtb3Jyb1wiLFxuICAgICAgICBcIkNoaW5lc2VcIixcbiAgICAgICAgXCJDcm9hdGlhblwiLFxuICAgICAgICBcIkN6ZWNoXCIsXG4gICAgICAgIFwiRGFuaXNoXCIsXG4gICAgICAgIFwiRHV0Y2hcIixcbiAgICAgICAgXCJFbmdsaXNoXCIsXG4gICAgICAgIFwiRXN0b25pYW5cIixcbiAgICAgICAgXCJGYWVyb2VzZVwiLFxuICAgICAgICBcIkZpbm5pc2hcIixcbiAgICAgICAgXCJGcmVuY2hcIixcbiAgICAgICAgXCJHYWVsaWNcIixcbiAgICAgICAgXCJHYWxpY2lhblwiLFxuICAgICAgICBcIkdlcm1hblwiLFxuICAgICAgICBcIkdyZWVrXCJcbiAgICAgIF1cbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgRmV0Y2ggYSBsaXN0IG9mIHBvZGNhc3QgZ2VucmVzXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfcG9kY2FzdF9nZW5yZXMqKlxuXG5HZXQgYSBsaXN0IG9mIHBvZGNhc3QgZ2VucmVzIHRoYXQgYXJlIHN1cHBvcnRlZCBpbiBMaXN0ZW4gTm90ZXMuXG5UaGUgZ2VucmUgaWQgY2FuIGJlIHBhc3NlZCB0byBvdGhlciBlbmRwb2ludHMgYXMgYSBwYXJhbWV0ZXIgdG8gZ2V0IHBvZGNhc3RzIGluIGEgc3BlY2lmaWMgZ2VucmUsXG5lLmcuLCBgR0VUIC9iZXN0X3BvZGNhc3RzYCwgYEdFVCAvc2VhcmNoYC4uLlxuWW91IG1heSB3YW50IHRvIGNhY2hlIHRoZSBsaXN0IG9mIGdlbnJlcyBvbiB0aGUgY2xpZW50IHNpZGUuXG5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQuZmV0Y2hfcG9kY2FzdF9nZW5yZXModG9wX2xldmVsX29ubHk9MSlcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLWdlbnJlcykuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJnZW5yZXNcIjogW1xuICAgIHtcbiAgICAgIFwiaWRcIjogMTQ0LFxuICAgICAgXCJuYW1lXCI6IFwiUGVyc29uYWwgRmluYW5jZVwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMTUxLFxuICAgICAgXCJuYW1lXCI6IFwiTG9jYWxseSBGb2N1c2VkXCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA3NyxcbiAgICAgIFwibmFtZVwiOiBcIlNwb3J0c1wiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogOTMsXG4gICAgICBcIm5hbWVcIjogXCJCdXNpbmVzc1wiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogODgsXG4gICAgICBcIm5hbWVcIjogXCJIZWFsdGggJiBGaXRuZXNzXCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAxMzQsXG4gICAgICBcIm5hbWVcIjogXCJNdXNpY1wiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMTI3LFxuICAgICAgXCJuYW1lXCI6IFwiVGVjaG5vbG9neVwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMTY4LFxuICAgICAgXCJuYW1lXCI6IFwiRmljdGlvblwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMTI1LFxuICAgICAgXCJuYW1lXCI6IFwiSGlzdG9yeVwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMTMyLFxuICAgICAgXCJuYW1lXCI6IFwiS2lkcyAmIEZhbWlseVwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogOTksXG4gICAgICBcIm5hbWVcIjogXCJOZXdzXCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAxMzMsXG4gICAgICBcIm5hbWVcIjogXCJDb21lZHlcIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDEyMixcbiAgICAgIFwibmFtZVwiOiBcIlNvY2lldHkgJiBDdWx0dXJlXCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA2OSxcbiAgICAgIFwibmFtZVwiOiBcIlJlbGlnaW9uICYgU3Bpcml0dWFsaXR5XCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAxMTcsXG4gICAgICBcIm5hbWVcIjogXCJHb3Zlcm5tZW50XCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA2OCxcbiAgICAgIFwibmFtZVwiOiBcIlRWICYgRmlsbVwiLFxuICAgICAgXCJwYXJlbnRfaWRcIjogNjdcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogODIsXG4gICAgICBcIm5hbWVcIjogXCJMZWlzdXJlXCIsXG4gICAgICBcInBhcmVudF9pZFwiOiA2N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAxMTEsXG4gICAgICBcIm5hbWVcIjogXCJFZHVjYXRpb25cIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDEwMCxcbiAgICAgIFwibmFtZVwiOiBcIkFydHNcIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDEwNyxcbiAgICAgIFwibmFtZVwiOiBcIlNjaWVuY2VcIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDEzNSxcbiAgICAgIFwibmFtZVwiOiBcIlRydWUgQ3JpbWVcIixcbiAgICAgIFwicGFyZW50X2lkXCI6IDY3XG4gICAgfVxuICBdXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwiZ2VucmVzXCJcbiAgXSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcImdlbnJlc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcImV4YW1wbGVcIjoge1xuICAgICAgICAgIFwiaWRcIjogMTQwLFxuICAgICAgICAgIFwibmFtZVwiOiBcIldlYiBEZXNpZ25cIixcbiAgICAgICAgICBcInBhcmVudF9pZFwiOiAxMjdcbiAgICAgICAgfSxcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA5MyxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJCdXNpbmVzc1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbnJlIG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicGFyZW50X2lkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA5NSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXJlbnQgZ2VucmUgaWQuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgRmV0Y2ggYSBsaXN0IG9mIGJlc3QgcG9kY2FzdHMgYnkgZ2VucmVcblxuRnVuY3Rpb24gTmFtZTogKipmZXRjaF9iZXN0X3BvZGNhc3RzKipcblxuR2V0IGEgbGlzdCBvZiBjdXJhdGVkIGJlc3QgcG9kY2FzdHMgYnkgZ2VucmUsXG53aGljaCBhcmUgY3VyYXRlZCBieSBMaXN0ZW4gTm90ZXMgc3RhZmZzIGJhc2VkIG9uIHZhcmlvdXMgc2lnbmFscyBmcm9tIHRoZSBJbnRlcm5ldCwgZS5nLixcbnRvcCBjaGFydHMgb24gb3RoZXIgcG9kY2FzdCBwbGF0Zm9ybXMsIHJlY29tbWVuZGF0aW9ucyBmcm9tIG1haW5zdHJlYW0gbWVkaWEsXG51c2VyIGFjdGl2aXRpZXMgb24gbGlzdGVubm90ZXMuY29tLi4uXG5Zb3UgY2FuIGdldCB0aGUgZ2VucmUgaWRzIGZyb20gYEdFVCAvZ2VucmVzYCBlbmRwb2ludC5cblRoaXMgZW5kcG9pbnQgcmV0dXJucyBzYW1lIGRhdGEgYXMgaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2Jlc3QtcG9kY2FzdHMvXG5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQuZmV0Y2hfYmVzdF9wb2RjYXN0cyhnZW5yZV9pZD05MywgcGFnZT0yLCByZWdpb249J3VzJylcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLWJlc3RfcG9kY2FzdHMpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwiaWRcIjogOTMsXG4gIFwibmFtZVwiOiBcIkJ1c2luZXNzXCIsXG4gIFwidG90YWxcIjogNzA1LFxuICBcImhhc19uZXh0XCI6IHRydWUsXG4gIFwicG9kY2FzdHNcIjogW1xuICAgIHtcbiAgICAgIFwiaWRcIjogXCIwZDM2MmIxMzM5OTI0MGRlOTc2MDJlZjYxNGFjZGNiY1wiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLm1lZ2FwaG9uZS5mbS9zdGFydHVwXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcImFkbWluQGdpbWxldG1lZGlhLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL211c2ljL20vSWhzMmx1amFjN3VuanlwMnU3aHA2YWxlN2hxP3Q9U3RhcnRVcF9Qb2RjYXN0XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy81Q25EbU1VRzBTNWJTU3c2MTJmczhDXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcInBvZGNhc3RzdGFydHVwXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiaGVhcnN0YXJ0dXBcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFydHVwLXBvZGNhc3QtZ2ltbGV0LTE0elUwY19NT212LW45UHBDQlRRdm9KLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJTdGFydFVwIFBvZGNhc3RcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmdpbWxldG1lZGlhLmNvbS9zdGFydHVwP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzEsXG4gICAgICAgIDY3LFxuICAgICAgICA5MyxcbiAgICAgICAgMTI3LFxuICAgICAgICA2OCxcbiAgICAgICAgOTcsXG4gICAgICAgIDk0LFxuICAgICAgICAxNTdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA5MTM4MDUzMzksXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkdpbWxldFwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc3RhcnR1cC1wb2RjYXN0LWdpbWxldC04SWY3UUJLVTVqYi1uOVBwQ0JUUXZvSi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgc2VyaWVzIGFib3V0IHdoYXQgaXQncyByZWFsbHkgbGlrZSB0byBzdGFydCBhIGJ1c2luZXNzLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzYsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDE1MyxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMGQzNjJiMTMzOTkyNDBkZTk3NjAyZWY2MTRhY2RjYmMvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjE3NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIzNjYzZTFiYThmOTQ0ZGY3OTU2Mzc4YWIzMzJiZjEyYlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTU5ODAwNDAwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTM5Njc0MjQwMDE1MSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyNTMsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCIzNGJlYWU4YWQ4ZmQ0YjI5OTE5NmY0MTNiODI3MGEzMFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLmZlZWRidXJuZXIuY29tL1dvcmtsaWZlV2l0aEFkYW1HcmFudFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJwb2RjYXN0c0B0ZWQuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTltWldWa2N5NW1aV1ZrWW5WeWJtVnlMbU52YlM5WGIzSnJiR2xtWlZkcGRHaEJaR0Z0UjNKaGJuUT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzRleWxnOUdaSk9WdlVoVHludDRqakFcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9hZGFtbWdyYW50L1wiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiQWRhbU1HcmFudFwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIkFkYW1NR3JhbnRcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy93b3JrbGlmZS13aXRoLWFkYW0tZ3JhbnQtdGVkLUtnYVhqRlBFb1ZjLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJXb3JrTGlmZSB3aXRoIEFkYW0gR3JhbnRcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LnRlZC5jb20vcG9kY2FzdHMvd29ya2xpZmU/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDkzLFxuICAgICAgICAxMTEsXG4gICAgICAgIDk3LFxuICAgICAgICA2N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEzNDYzMTQwODYsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIlRFRFwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd29ya2xpZmUtd2l0aC1hZGFtLWdyYW50LXRlZC1LZ2FYakZQRW9WYy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcbiAgICAgIDxwPllvdSBzcGVuZCBhIHF1YXJ0ZXIgb2YgeW91ciBsaWZlIGF0IHdvcmsuIFlvdSBzaG91bGQgZW5qb3kgaXQhIE9yZ2FuaXphdGlvbmFsIHBzeWNob2xvZ2lzdCBBZGFtIEdyYW50IHRha2VzIHlvdSBpbnNpZGUgdGhlIG1pbmRzIG9mIHNvbWUgb2YgdGhlIHdvcmxkXFx1MjAxOXMgbW9zdCB1bnVzdWFsIHByb2Zlc3Npb25hbHMgdG8gZGlzY292ZXIgdGhlIGtleXMgdG8gYSBiZXR0ZXIgd29yayBsaWZlLiBGcm9tIGxlYXJuaW5nIGhvdyB0byBsb3ZlIHlvdXIgcml2YWxzIHRvIGhhcm5lc3NpbmcgdGhlIHBvd2VyIG9mIGZydXN0cmF0aW9uLCBvbmUgdGhpbmdcXHUyMDE5cyBmb3Igc3VyZTogWW91XFx1MjAxOWxsIG5ldmVyIHNlZSB5b3VyIGpvYiB0aGUgc2FtZSB3YXkgYWdhaW4uIFByb2R1Y2VkIGluIHBhcnRuZXJzaGlwIHdpdGggVHJhbnNtaXR0ZXIgTWVkaWEuPC9wPlxcbiAgICBcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc2LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA3NSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMzRiZWFlOGFkOGZkNGIyOTkxOTZmNDEzYjgyNzBhMzAvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjMzMSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJlMGVjNzgyZTYxMjI0YzU1YmI3OTgwMGFjNjI3ODFmOVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1NjM4ODgwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTUxODA0NDUyNDA3NCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxNjcsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJlZTg0ZDdkMTE4NzU0NjVmYjg5NDg3Njc1ZmY1NDI1ZFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLnNpbXBsZWNhc3QuY29tL0oyWkRGWG9JXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcImVkd2FyZG15bGV0dEB5YWhvby5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1emFXMXdiR1ZqWVhOMExtTnZiUzlLTWxwRVJsaHZTUT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8xOVRkREJsRmtxaDd1ZXZZTzBqRlNXXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIkVkTXlsZXR0XCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWVkLW15bGV0dC1zaG93LWVkLW15bGV0dC1sZ3VReVZFVENJOC1QRVVJVDlSQmhaRC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVEhFIEVEIE1ZTEVUVCBTSE9XXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3RoZS1lZC1teWxldHQtc2hvdy5zaW1wbGVjYXN0LmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTU3LFxuICAgICAgICA2NyxcbiAgICAgICAgODgsXG4gICAgICAgIDg5LFxuICAgICAgICA5MCxcbiAgICAgICAgOTNcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMTgxMjMzMTMwLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJFZCBNeWxldHRcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1lZC1teWxldHQtc2hvdy1lZC1teWxldHQtc004U2N5aS1ZUXItUEVVSVQ5UkJoWkQuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgRWQgTXlsZXR0IFNob3cgc2hvd2Nhc2VzIHRoZSBncmVhdGVzdCBwZWFrLXBlcmZvcm1lcnMgYWNyb3NzIGFsbCBpbmR1c3RyaWVzIGluIG9uZSBwbGFjZSwgc2hhcmluZyB0aGVpciBqb3VybmV5LCBrbm93bGVkZ2UgYW5kIHRob3VnaHQgbGVhZGVyc2hpcC4gV2l0aCBFZCBNeWxldHQgYW5kIGZlYXR1cmVkIGd1ZXN0cyBpbiBhbG1vc3QgZXZlcnkgaW5kdXN0cnkgaW5jbHVkaW5nIGJ1c2luZXNzLCBoZWFsdGgsIGNvbGxlZ2lhdGUgYW5kIHByb2Zlc3Npb25hbCBzcG9ydHMsIHBvbGl0aWNzLCBlbnRyZXByZW5ldXJzaGlwLCBzY2llbmNlLCBhbmQgZW50ZXJ0YWlubWVudCwgeW91J2xsIGZpbmQgbW90aXZhdGlvbiwgaW5zcGlyYXRpb24gYW5kIHByYWN0aWNhbCBzdGVwcyB0byBoZWxwIHlvdSBiZWNvbWUgdGhlIGJlc3QgdmVyc2lvbiBvZiB5b3UhXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3NSxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMjQ5LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9lZTg0ZDdkMTE4NzU0NjVmYjg5NDg3Njc1ZmY1NDI1ZC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAzMDgxLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjA1MGRhMmIzYWM3MDRmMDE4OTVlNTAyODg0MTc5NzI5XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4ODI5NjAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDgwMzYzNDY1MjQyLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE2MyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjVmMjM3Yjc5ODI0ZTRkZmI4MzU1ZjZkZmY5YjFjNTQyXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMubnByLm9yZy81MTAzMjUvcG9kY2FzdC54bWxcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwicG9kY2FzdHNAbnByLm9yZ1wiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5bVpXVmtjeTV1Y0hJdWIzSm5MelV4TURNeU5TOXdiMlJqWVhOMExuaHRiQT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy80WDN5REtnVlRXUmpTZDZyMHZoZ280XCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcInBsYW5ldG1vbmV5XCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwicGxhbmV0bW9uZXlcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaW5kaWNhdG9yLWZyb20tcGxhbmV0LW1vbmV5LW5wci11RkFjZFFtNklMci1HMkVEakZPLVRMQS4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIEluZGljYXRvciBmcm9tIFBsYW5ldCBNb25leVwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cubnByLm9yZy9zZWN0aW9ucy9tb25leS81Njc3MjQ2MTQvdGhlLWluZGljYXRvcj91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDkzLFxuICAgICAgICAxNzEsXG4gICAgICAgIDk5LFxuICAgICAgICAxNDQsXG4gICAgICAgIDk4XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTMyMDExODU5MyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiTlBSXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaW5kaWNhdG9yLWZyb20tcGxhbmV0LW1vbmV5LW5wci02N0NyeWVvNVZZbi1HMkVEakZPLVRMQS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbGl0dGxlIHNob3cgYWJvdXQgYmlnIGlkZWFzLiBGcm9tIHRoZSBwZW9wbGUgd2hvIG1ha2UgPGVtPlBsYW5ldCBNb25leTwvZW0+LCA8ZW0+VGhlIEluZGljYXRvcjwvZW0+IGhlbHBzIHlvdSBtYWtlIHNlbnNlIG9mIHdoYXQncyBoYXBwZW5pbmcgdG9kYXkuIEl0J3MgYSBxdWljayBoaXQgb2YgaW5zaWdodCBpbnRvIHdvcmssIGJ1c2luZXNzLCB0aGUgZWNvbm9teSwgYW5kIGV2ZXJ5dGhpbmcgZWxzZS4gTGlzdGVuIHdlZWtkYXkgYWZ0ZXJub29ucy48YnIgLz48YnIgLz48ZW0+R290IG1vbmV5IG9uIHlvdXIgbWluZD8gVHJ5IFBsYW5ldCBNb25leSsgXFx1MjAxNCBhIG5ldyB3YXkgdG8gc3VwcG9ydCB0aGUgc2hvdyB5b3UgbG92ZSwgZ2V0IGEgc3BvbnNvci1mcmVlIGZlZWQgb2YgdGhlIHBvZGNhc3QsICphbmQqIGdldCBhY2Nlc3MgdG8gYm9udXMgY29udGVudC4gQSBzdWJzY3JpcHRpb24gYWxzbyBnZXRzIHlvdSBhY2Nlc3MgdG8gVGhlIEluZGljYXRvciBhbmQgUGxhbmV0IE1vbmV5IFN1bW1lciBTY2hvb2wsIGJvdGggd2l0aG91dCBpbnRlcnJ1cHRpb25zLiA8L2VtPlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzUsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDEwNTAsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzVmMjM3Yjc5ODI0ZTRkZmI4MzU1ZjZkZmY5YjFjNTQyL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDU3NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJiYjY4ZDYzMTYwMWQ0YmZiYmQ4MTQ4ZDM3YTgwYmJkZFwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODk3MTUwMzAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTUyNzEwODMwMDI5OSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyOCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjIxODRiYWRhNjAyZDQzMTY4OWRiYjRjNmMxYmM1ODM5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMuc2ltcGxlY2FzdC5jb20vYXRndGloZDBcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiaW50ZXJhY3RpdmVAbGlmZS5jaHVyY2hcIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1emFXMXdiR1ZqWVhOMExtTnZiUzloZEdkMGFXaGtNQT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy83dHpuZXhGd3RieGZQT1lGNW14a3hJXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL0xpZmVDaHVyY2h0dlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwibGlmZWNodXJjaFwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcImxpZmUuY2h1cmNoXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJsaWZlLmNodXJjaFwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jcmFpZy1ncm9lc2NoZWwtbGVhZGVyc2hpcC1wb2RjYXN0LWxpZmVjaHVyY2gtLV9LOHpnc00weDEtZHktdUpzSENfOVQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkNyYWlnIEdyb2VzY2hlbCBMZWFkZXJzaGlwIFBvZGNhc3RcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmxpZmUuY2h1cmNoL2xlYWRlcnNoaXBwb2RjYXN0P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgNjksXG4gICAgICAgIDc1XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTA3MDY0OTAyNSxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiTGlmZS5DaHVyY2hcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2NyYWlnLWdyb2VzY2hlbC1sZWFkZXJzaGlwLXBvZGNhc3QtbGlmZWNodXJjaC1PVTVjWTBtZ2pzYi1keS11SnNIQ185VC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBDcmFpZyBHcm9lc2NoZWwgTGVhZGVyc2hpcCBQb2RjYXN0IG9mZmVycyBwZXJzb25hbCwgcHJhY3RpY2FsIGNvYWNoaW5nIGxlc3NvbnMgdGhhdCB0YWtlIHRoZSBteXN0ZXJ5IG91dCBvZiBsZWFkZXJzaGlwLiBJbiBlYWNoIGVwaXNvZGUgb2YgdGhlIENyYWlnIEdyb2VzY2hlbCBMZWFkZXJzaGlwIFBvZGNhc3QsIENyYWlnIGJyaW5ncyB5b3UgZW1wb3dlcmluZyBpbnNpZ2h0cyBhbmQgZWFzeS10by11bmRlcnN0YW5kIHRha2Vhd2F5cyB5b3UgY2FuIHVzZSB0byBsZWFkIHlvdXJzZWxmIGFuZCBsZWFkIHlvdXIgdGVhbS4gWW91XFx1MjAxOWxsIGxlYXJuIGVmZmVjdGl2ZSB3YXlzIHRvIGdyb3cgYXMgYSBsZWFkZXIsIG9wdGltaXplIHlvdXIgdGltZSwgZGV2ZWxvcCB5b3VyIHRlYW0sIGFuZCBzdHJ1Y3R1cmUgeW91ciBvcmdhbml6YXRpb24uXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3NCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMTEzLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8yMTg0YmFkYTYwMmQ0MzE2ODlkYmI0YzZjMWJjNTgzOS9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxNjY3LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjMwYmE3M2YzOTgzMDQyN2NhMjQ1OGFlMTRhZWE2NDg2XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU3MTg4MDAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDUyNjc1MTgwMTExLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDQ3MCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImZjNmQzM2UyMmI3ZjRkYjM4ZGYzYmI2NGE5YThjMjI3XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vdG9ueXJvYmJpbnMubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwidG9ueXJvYmJpbnMuc29jaWFsQGdtYWlsLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5MGIyNTVjbTlpWW1sdWN5NXNhV0p6ZVc0dVkyOXRMM0p6Y3c9PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNmZaWE96ZWhKOUp0T3lGamlyRjNxdFwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJ0b255cm9iYmluc1wiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlRvbnlSb2JiaW5zXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXRvbnktcm9iYmlucy1wb2RjYXN0LXRvbnktcm9iYmlucy1laDl3TkZKY1AxVy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIFRvbnkgUm9iYmlucyBQb2RjYXN0XCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vdG9ueXJvYmJpbnMuY29tL3BvZGNhc3Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDkwLFxuICAgICAgICA5MyxcbiAgICAgICAgMTgxLFxuICAgICAgICAxNTcsXG4gICAgICAgIDc4LFxuICAgICAgICA2NyxcbiAgICAgICAgOTcsXG4gICAgICAgIDExMSxcbiAgICAgICAgMTQ0XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTA5ODQxMzA2MyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiVG9ueSBSb2JiaW5zXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdG9ueS1yb2JiaW5zLXBvZGNhc3QtdG9ueS1yb2JiaW5zLWVoOXdORkpjUDFXLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFx1MjAxY1doeSBsaXZlIGFuIG9yZGluYXJ5IGxpZmUsIHdoZW4geW91IGNhbiBsaXZlIGFuIGV4dHJhb3JkaW5hcnkgb25lP1xcdTIwMWQgVG9ueSBSb2JiaW5zLCB0aGUgIzEgTGlmZSBhbmQgQnVzaW5lc3MgU3RyYXRlZ2lzdCwgaGFzIGhlbHBlZCBvdmVyIDUwIG1pbGxpb24gcGVvcGxlIGZyb20gMTAwIGNvdW50cmllcyBjcmVhdGUgcmVhbCBhbmQgbGFzdGluZyBjaGFuZ2UgaW4gdGhlaXIgbGl2ZXMuIEluIHRoaXMgcG9kY2FzdCwgaGUgc2hhcmVzIHByb3ZlbiBzdHJhdGVnaWVzIGFuZCB0YWN0aWNzIHNvIHlvdSwgdG9vLCBjYW4gYWNoaWV2ZSBtYXNzaXZlIHJlc3VsdHMgaW4geW91ciBidXNpbmVzcywgcmVsYXRpb25zaGlwcywgaGVhbHRoIGFuZCBmaW5hbmNlcy4gSW4gYWRkaXRpb24gdG8gZXhjZXJwdHMgZnJvbSBoaXMgc2lnbmF0dXJlIGV2ZW50cyBhbmQgb3RoZXIgZXhjbHVzaXZlLCBuZXZlci1iZWZvcmUtcmVsZWFzZWQgYXVkaW8gY29udGVudCwgVG9ueSBhbmQgaGlzIHRlYW0gYWxzbyBjb25kdWN0IGRlZXBseSBpbnNpZ2h0ZnVsIGludGVydmlld3Mgd2l0aCB0aGUgbW9zdCBwcm9taW5lbnQgbWFzdGVybWluZHMgYW5kIGV4cGVydHMgb24gdGhlIGdsb2JhbCBzdGFnZS5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc0LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAxNTEsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2ZjNmQzM2UyMmI3ZjRkYjM4ZGYzYmI2NGE5YThjMjI3L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI3MjYsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiNmVkYmQ3NTk2NTE3NDhhZDliNjc5YjQ4OTNiMzM3MDlcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTcxNTY4MjQwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0NTkzNzM4MjAwOTksXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogODEzLFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiZWQ3OWI2MTVlZDA3NDIwNGJjNDcwMmI1NmEyNjRhNzhcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly90aGVsaWZlY29hY2hzY2hvb2wubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiYnJvb2tlQHRoZWxpZmVjb2FjaHNjaG9vbC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OTBhR1ZzYVdabFkyOWhZMmh6WTJodmIyd3ViR2xpYzNsdUxtTnZiUzl5YzNNPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcImJyb29rZWNhc3RpbGxvXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWxpZmUtY29hY2gtc2Nob29sLXBvZGNhc3QtYnJvb2tlLWNhc3RpbGxvLXZLaGtkNHFGVXV3LVY1b2Y3SmxHX1JELjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgTGlmZSBDb2FjaCBTY2hvb2wgUG9kY2FzdFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3d3dy50aGVsaWZlY29hY2hzY2hvb2wuY29tP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgODgsXG4gICAgICAgIDkwLFxuICAgICAgICA5MyxcbiAgICAgICAgOTQsXG4gICAgICAgIDExMSxcbiAgICAgICAgMTE1XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogODcwMjM5NjMxLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJCcm9va2UgQ2FzdGlsbG9cIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1saWZlLWNvYWNoLXNjaG9vbC1wb2RjYXN0LWJyb29rZS1jYXN0aWxsby1ZbDNPYlZTd0tFaS1WNW9mN0psR19SRC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBMaWZlIENvYWNoIFNjaG9vbCBQb2RjYXN0IGlzIHlvdXIgZ28tdG8gcmVzb3VyY2UgZm9yIGxlYXJuaW5nLCBncm93aW5nLCBhbmQgYmVjb21pbmcgY2VydGlmaWVkIGFzIGEgTGlmZSBDb2FjaCAmIFdlaWdodCBMb3NzIENvYWNoLiBUaHJvdWdoIHRoaXMgcG9kY2FzdCwgeW91J2xsIGhlYXIgZGlyZWN0bHkgZnJvbSB0aGUgTWFzdGVyIENvYWNoIEJyb29rZSBDYXN0aWxsbyB0byBoZWxwIHlvdSBiZXR0ZXIgdW5kZXJzdGFuZCBsaWZlIGNvYWNoaW5nLCB0aGUgcmVxdWlyZWQgc2tpbGxzIGFuZCBtaW5kc2V0cywgYW5kIGhvdyB3ZSBmb2N1cyBvbiBzZXJ2aW5nIHRoZSBjbGllbnQgdG8gZ2V0IHRoZW0gdGhlIHJlc3VsdHMgdGhleSBzZWVrLiAgQXQgVGhlIExpZmUgQ29hY2ggU2Nob29sLCB3ZSBvZmZlciBhIHRob3JvdWdoIGFuZCBpbnRlbnNlIGNlcnRpZmljYXRpb24gY291cnNlIHRoYXQgcHJvZHVjZXMgc29tZSBvZiB0aGUgbW9zdCBzdWNjZXNzZnVsIGNvYWNoZXMgY29hY2hpbmcgdG9kYXkuIExlYXJuIG1vcmUgYXQgVGhlTGlmZUNvYWNoU2Nob29sLmNvbS5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc0LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA0NjQsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2VkNzliNjE1ZWQwNzQyMDRiYzQ3MDJiNTZhMjY0YTc4L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE5MzQsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiZDU3YjdkZTBhNGJmNGYwNjkwOWE1ZWVjYzc3NWZmODZcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTgzOTQwMzEwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDEzOTg2MDY5MjU0MzgsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMTQ4LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGVcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9mZWVkcy5tZWdhcGhvbmUuZm0vbWFya2V0c25hY2tzLWRhaWx5XCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcInBvZGNhc3RzQGNhZGVuY2UxMy5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJodHRwOi8vd3d3Lm1hcmtldHNuYWNrcy5jb20vXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTltWldWa2N5NXRaV2RoY0dodmJtVXVabTB2YldGeWEyVjBjMjVoWTJ0ekxXUmhhV3g1XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy81UmxsTUJndkRuVGF1OG5uc0NVZHNlXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIm1hcmtldHNuYWNrc1wiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIk1hcmtldFNuYWNrc1wiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBCZXN0IE9uZSBZZXRcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vdGJveXBvZD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgOTMsXG4gICAgICAgIDY3LFxuICAgICAgICA5OSxcbiAgICAgICAgOTgsXG4gICAgICAgIDk1XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTM4NjIzNDM4NCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBkYWlseSBwb3AtYml6IG5ld3Mgc2hvdyBtYWtpbmcgdG9kYXlcXHUyMDE5cyB0b3Agc3RvcmllcyB5b3VyIGJ1c2luZXNzLiAxNSBtaW51dGVzIG9uIHRoZSAzIGJpeiBzdG9yaWVzIHlvdSBuZWVkLCB3aXRoIGZyZXNoIHRha2VzIHlvdSBjYW4gcHJldGVuZCB5b3UgY2FtZSB1cCB3aXRoIFxcdTIwMTQgUGFpcnMgcGVyZmVjdGx5IHdpdGggeW91ciBtb3JuaW5nIG9hdG1lYWwgcml0dWFsLiBIb3N0ZWQgYnkgSmFjayBDcml2aWNpLUtyYW1lciAmIE5pY2sgTWFydGVsbC5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA3ODksXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDEwNjAsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiZGMwM2I2MzdjN2I0NDBlOGEwYzQ3YWJmNzVjOGJjZWFcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg5MTI0MDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1NTM1MTkxMDA3ODUsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjgsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJkODYzZGE3ZjkyMWU0MzVmYjM1ZjUxMmI1NGU3NzRkNlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3Jzcy5hcnQxOS5jb20vbWFzdGVycy1vZi1zY2FsZVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJoZWxsb0BtYXN0ZXJzb2ZzY2FsZS5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9tdXNpYy9tL0lmeTZmdm1sdzd0YWEyNXFreGRyaWN5Z29oZT90PU1hc3RlcnNfb2ZfU2NhbGVcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzFiSlJnYUZaSHV6aWZhZDRJQUFwRlJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwibWFzdGVyc29mc2NhbGVcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJtYXN0ZXJzb2ZzY2FsZVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwibWFzdGVyc29mc2NhbGVcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFzdGVycy1vZi1zY2FsZS13aXRoLXJlaWQtaG9mZm1hbi13YWl0d2hhdC1QSkdlSExNbXhhNi1tWW9WMENVeXhURC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTWFzdGVycyBvZiBTY2FsZVwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3d3dy5tYXN0ZXJzb2ZzY2FsZS5jb20/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDE3MSxcbiAgICAgICAgNjcsXG4gICAgICAgIDkzLFxuICAgICAgICAxNTcsXG4gICAgICAgIDEyNyxcbiAgICAgICAgMTczLFxuICAgICAgICAxNDksXG4gICAgICAgIDk3LFxuICAgICAgICAxMjJcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMjI3OTcxNzQ2LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJXYWl0V2hhdCBcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hc3RlcnMtb2Ytc2NhbGUtd2l0aC1yZWlkLWhvZmZtYW4td2FpdHdoYXQtWEpzM1d3bVVyeDctbVlvVjBDVXl4VEQuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXG4gICAgICA8cD5Bd2FyZC13aW5uaW5nIGJ1c2luZXNzIGFkdmljZSBmcm9tIFNpbGljb24gVmFsbGV5IGFuZCBiZXlvbmQuIEljb25pYyBDRU9zLCBmcm9tIE5pa2UgdG8gTmV0ZmxpeCwgU3RhcmJ1Y2tzIHRvIFNsYWNrLCBzaGFyZSB0aGUgc3RyYXRlZ2llcyB0aGF0IGhlbHBlZCB0aGVtIGdyb3cgZnJvbSBzdGFydHVwcyBpbnRvIGdsb2JhbCBicmFuZHMgXFx1MjAxNCBhbmQgdG8gd2VhdGhlciBjcmlzaXMgd2hlbiBpdCBzdHJpa2VzLiZuYnNwOzwvcD48cD5PdXIgdHdvIGZvcm1hdHMgaGVscCB0ZWxsIHRoZSBjb21wbGV0ZSBzdG9yeSBvZiBob3cgYSBidXNpbmVzcyBncm93cywgc3Vydml2ZXMgYW5kIHRocml2ZXMsIGFuZCB0aGUgbWluZHNldHMgb2YgZ3Jvd3RoIHRoYXQga2VlcCBsZWFkZXJzIGluIHRoZSBnYW1lLjwvcD48cD5PbiBlYWNoIGVwaXNvZGUgb2Ygb3VyIGNsYXNzaWMgZm9ybWF0LCBob3N0IFJlaWQgSG9mZm1hbiBcXHUyMDE0IExpbmtlZEluIGNvZm91bmRlciwgR3JleWxvY2sgcGFydG5lciBhbmQgbGVnZW5kYXJ5IFNpbGljb24gVmFsbGV5IGludmVzdG9yIFxcdTIwMTQgcHJvdmVzIGFuIHVuY29udmVudGlvbmFsIHRoZW9yeSBhYm91dCBob3cgYnVzaW5lc3NlcyBzY2FsZSwgYXNraW5nIGhpcyBndWVzdHMgdG8gc2hhcmUgdGhlaXIgc3RvcmllcyBvZiBlbnRyZXByZW5ldXJzaGlwLCBsZWFkZXJzaGlwLCBzdHJhdGVneSwgbWFuYWdlbWVudCwgZnVuZHJhaXNpbmcuIFlvdVxcdTIwMTlsbCBoZWFyIHRoZSBodW1hbiBqb3VybmV5IHRvbyBcXHUyMDE0IGZhaWx1cmVzLCBzZXRiYWNrcywgbGVhcm5pbmdzLiZuYnNwOzwvcD48cD5Gcm9tIG91ciBSYXBpZCBSZXNwb25zZSBmb3JtYXQsIHlvdSBjYW4gZXhwZWN0IHJlYWwtdGltZSB3aXNkb20gZnJvbSBidXNpbmVzcyBsZWFkZXJzIGluIGZhc3QtY2hhbmdpbmcgc2l0dWF0aW9ucy4gSG9zdGVkIGJ5IEJvYiBTYWZpYW4sIHBhc3QgZWRpdG9yIGluIGNoaWVmIG9mIEZhc3QgQ29tcGFueSwgdGhlc2UgZXBpc29kZXMgdGFja2xlIGNyaXNpcyByZXNwb25zZSwgcmVidWlsZGluZywgZGl2ZXJzaXR5ICZhbXA7IGluY2x1c2lvbiwgbGVhZGVyc2hpcCBjaGFuZ2UgYW5kIG11Y2ggbW9yZS4mbmJzcDs8L3A+XFxuICAgIFwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzMsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDMxMSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZDg2M2RhN2Y5MjFlNDM1ZmIzNWY1MTJiNTRlNzc0ZDYvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjA2MSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCI1Y2M0ODdkN2E1ZDY0YTAxODdkYmUxM2RjYmI1MjRkM1wiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODgyNjAwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQ5MjU0MzI5NzMwNixcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA3OSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjU1OTBjYjEzMTgwNTRiY2ViOTQyNTY0YTRmMDY3ZWI2XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vd3d3Lm1hcmtldHBsYWNlLm9yZy9mZWVkL3BvZGNhc3QvbWFya2V0cGxhY2VcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwibWFya2V0cGxhY2Vjb21tZW50c0BtYXJrZXRwbGFjZS5vcmdcIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OTNkM2N1YldGeWEyVjBjR3hoWTJVdWIzSm5MMlpsWldRdmNHOWtZMkZ6ZEM5dFlYSnJaWFJ3YkdGalpRPT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzZ6WWxYNVVHRVBtTkNXYWNZVUpRR0RcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiTWFya2V0cGxhY2VcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJtYXJrZXRwbGFjZWFwbVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwibWFya2V0cGxhY2VhcG1cIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFya2V0cGxhY2UtbWFya2V0cGxhY2UtV0hjMTdOUXkyM1MtSmluZzJXdEs1VUUuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIk1hcmtldHBsYWNlXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3d3dy5tYXJrZXRwbGFjZS5vcmcvc2hvd3MvbWFya2V0cGxhY2UvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzMsXG4gICAgICAgIDk5LFxuICAgICAgICA5MyxcbiAgICAgICAgNjcsXG4gICAgICAgIDk1XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMjAxODUzMDM0LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJNYXJrZXRwbGFjZVwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFya2V0cGxhY2UtbWFya2V0cGxhY2UtX1lWeXdIZVIwLVMtSmluZzJXdEs1VUUuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5FdmVyeSB3ZWVrZGF5LCBob3N0IEthaSBSeXNzZGFsIGhlbHBzIHlvdSBtYWtlIHNlbnNlIG9mIHRoZSBkYXlcXHUyMDE5cyBidXNpbmVzcyBhbmQgZWNvbm9taWMgbmV3cyBcXHUyMDE0IG5vIGVjb24gZGVncmVlIG9yIGZpbmFuY2UgYmFja2dyb3VuZCByZXF1aXJlZC4gXFx1MjAxY01hcmtldHBsYWNlXFx1MjAxZCB0YWtlcyB5b3UgYmV5b25kIHRoZSBudW1iZXJzLCBicmluZ2luZyB5b3UgY29udGV4dC4gT3VyIHRlYW0gb2YgcmVwb3J0ZXJzIGFsbCBvdmVyIHRoZSB3b3JsZCBzcGVhayB3aXRoIENFT3MsIHBvbGljeW1ha2VycyBhbmQgcmVndWxhciBwZW9wbGUganVzdCB0cnlpbmcgdG8gZ2V0IGJ5LjwvcD5cXG5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAxNTUsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzU1OTBjYjEzMTgwNTRiY2ViOTQyNTY0YTRmMDY3ZWI2L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE2NDYsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiZTEyYjE1YmI3MmI3NDBhY2IzZDQ5MjJmODZhMjM0MGVcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg5NjQ1ODYwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE2NDAzMDQ5NzEwNDksXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjgsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI3M2JlYmNiZTUyNjU0ZDFjYjk0Y2QxNjM5ZjczNmJlM1wiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3d3dy5vbW55Y29udGVudC5jb20vZC9wbGF5bGlzdC85YjdkYWNkZi1hOTI1LTRmOTUtODRkYy1hYzQ2MDAzNDUxZmYvNzAyOWYzYWUtZmMwOS00NWRkLTllN2EtYWM1NDAwZWRiYzJmLzdjZDNkMGE0LTU3NDktNGQ0My05NDAwLWFjNTQwMGVkYmMzZC9wb2RjYXN0LnJzc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJpbmZvQGthc3RtZWRpYS5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OTNkM2N1YjIxdWVXTnZiblJsYm5RdVkyOXRMMlF2Y0d4aGVXeHBjM1F2T1dJM1pHRmpaR1l0WVRreU5TMDBaamsxTFRnMFpHTXRZV00wTmpBd016UTFNV1ptTHpjd01qbG1NMkZsTFdaak1Ea3RORFZrWkMwNVpUZGhMV0ZqTlRRd01HVmtZbU15Wmk4M1kyUXpaREJoTkMwMU56UTVMVFJrTkRNdE9UUXdNQzFoWXpVME1EQmxaR0pqTTJRdmNHOWtZMkZ6ZEM1eWMzTT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzM0Z0ZmaExDdGZnN0dUTm84NDFTdUtcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvdGFpbG9wZXpvZmZpY2lhbFwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwidGFpbG9wZXpcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJUYWlMb3Blek9mZmljaWFsXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJ0YWlsb3BlelwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdGFpLWxvcGV6LXNob3ctdGFpLWxvcGV6LTUwOXJGSGFHLTFvLWtUbmFaQm9nTEMwLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgVGFpIExvcGV6IFNob3dcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vYXJ0MTkuY29tL3Nob3dzL3RoZS10YWktbG9wZXotc2hvdz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTExLFxuICAgICAgICA5NyxcbiAgICAgICAgODgsXG4gICAgICAgIDkzLFxuICAgICAgICA5MCxcbiAgICAgICAgMTU3XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogODc3OTY4MjYwLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJLYXN0IE1lZGlhXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdGFpLWxvcGV6LXNob3ctdGFpLWxvcGV6LUdZQnNsZ0NWRWEyLWtUbmFaQm9nTEMwLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIFRhaSBMb3BleiBwb2RjYXN0IGJyaW5ncyB5b3UgdGhlIGJlc3QgYnVzaW5lc3MgZWR1Y2F0aW9uIHN0cmFpZ2h0IGZyb20gdGhlIHdvcmxkJ3MgdG9wIGVudHJlcHJlbmV1cnMuIEkgd2lsbCBhbHNvIHJldmlldyB0aGUgYmVzdCBib29rcyBpbiBoZWFsdGgsIHdlYWx0aCwgbG92ZSBhbmQgaGFwcGluZXNzIHRoYXQgd2lsbCBoZWxwIHlvdSBhY2hpZXZlIHlvdXIgbWF4aW11bSBwb3RlbnRpYWwgYW5kIGxpdmUgdGhlIGJlc3QgbGlmZSBwb3NzaWJsZS4gPC9wPlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzIsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDYwOSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNzNiZWJjYmU1MjY1NGQxY2I5NGNkMTYzOWY3MzZiZTMvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjAyNCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB0cnVlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjljN2U0Y2Q3M2UxOTRmNmM4NzcyMjkwZGRhODU2OTgxXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU3NjQ5MjM0MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDAwMDk4MTk2NjA1LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDI3NixcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjQ5OTY2MWYzNTg5ZjQyYWFhMTUzMjY3M2UwZTBhZWRmXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vcnNzLmFydDE5LmNvbS9zbWFydC1wYXNzaXZlLWluY29tZS1wb2RjYXN0XCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcInBvZGNhc3RzQHRlYW1zcGkuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl5YzNNdVlYSjBNVGt1WTI5dEwzTnRZWEowTFhCaGMzTnBkbVV0YVc1amIyMWxMWEJ2WkdOaGMzUT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93Lzd3anY1TVJDWFdYSW1xVEZoY3VmTHlcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvc21hcnRwYXNzaXZlaW5jb21lXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJwYXRmbHlublwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcInNtYXJ0cGFzc2l2ZWluY29tZVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJodHRwczovL211c2ljLmFtYXpvbi5jb20vcG9kY2FzdHMvMzQxMjgyYTEtY2JhOS00MTg4LWFhNTgtZTA5YTUxY2NhYTg3L3RoZS1zbWFydC1wYXNzaXZlLWluY29tZS1vbmxpbmUtYnVzaW5lc3MtYW5kLWJsb2dnaW5nLXBvZGNhc3RcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwicGF0Zmx5bm5cIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXNtYXJ0LXBhc3NpdmUtaW5jb21lLW9ubGluZS1idXNpbmVzcy1qTi1hUjZxZFl1by1ORGE2LXlTcDlrdy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIFNtYXJ0IFBhc3NpdmUgSW5jb21lIE9ubGluZSBCdXNpbmVzcyBhbmQgQmxvZ2dpbmcgUG9kY2FzdFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly9hcnQxOS5jb20vc2hvd3Mvc21hcnQtcGFzc2l2ZS1pbmNvbWUtcG9kY2FzdD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTczLFxuICAgICAgICA5MyxcbiAgICAgICAgMTcxLFxuICAgICAgICAxNDQsXG4gICAgICAgIDE1NyxcbiAgICAgICAgOTcsXG4gICAgICAgIDk4LFxuICAgICAgICA2NyxcbiAgICAgICAgOTQsXG4gICAgICAgIDExMSxcbiAgICAgICAgMTE1LFxuICAgICAgICAxMjdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAzODMwODQwMDEsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIlBhdCBGbHlublwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXNtYXJ0LXBhc3NpdmUtaW5jb21lLW9ubGluZS1idXNpbmVzcy1zRjI0b3dRSFlXeS1ORGE2LXlTcDlrdy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcbiAgICAgIFBhdCBGbHlubiBmcm9tIFRoZSBTbWFydCBQYXNzaXZlIEluY29tZSBCbG9nIHJldmVhbHMgYWxsIG9mIGhpcyBvbmxpbmUgYnVzaW5lc3MgYW5kIGJsb2dnaW5nIHN0cmF0ZWdpZXMsIGluY29tZSBzb3VyY2VzIGFuZCBraWxsZXIgbWFya2V0aW5nIHRpcHMgYW5kIHRyaWNrcyBzbyB5b3UgY2FuIGJlIGFoZWFkIG9mIHRoZSBjdXJ2ZSB3aXRoIHlvdXIgb25saW5lIGJ1c2luZXNzIG9yIGJsb2cuIERpc2NvdmVyIGhvdyB5b3UgY2FuIGNyZWF0ZSBtdWx0aXBsZSBwYXNzaXZlIGluY29tZSBzdHJlYW1zIHRoYXQgd29yayBmb3IgeW91IHNvIHRoYXQgeW91IGNhbiBoYXZlIHRoZSB0aW1lIGFuZCBmcmVlZG9tIHRvIGRvIHdoYXQgeW91IGxvdmUsIHdoZXRoZXIgaXQncyB0cmF2ZWxpbmcgdGhlIHdvcmxkLCBvciBqdXN0IGxpdmluZyBjb21mb3J0YWJseSBhdCBob21lLiBTaW5jZSAyMDA4LCBoZSdzIGJlZW4gc3VwcG9ydGluZyBoaXMgZmFtaWx5IHdpdGggaGlzIG1hbnkgb25saW5lIGJ1c2luZXNzZXMsIGFuZCBoZSdzIGJlZW4gb3Blbmx5IHNoYXJpbmcgaGlzIHdpbnMsIGhpcyBsb3NzZXMsIGFuZCBhbGwgdGhlIGxlc3NvbnMgaW4gYmV0d2VlbiB3aXRoIHRoZSBjb21tdW5pdHkgb2YgZW5lcmdldGljIGJ1dCBodW1ibGUgZW50cmVwcmVuZXVycyB3aG8gZm9sbG93IGhpbS4gU2VsZi1wcm9jbGFpbWVkIFxcXCJjcmFzaCB0ZXN0IGR1bW15IG9mIG9ubGluZSBidXNpbmVzc1xcXCIsIHlvdSdsbCBsZWFybiBhYm91dCBidWlsZGluZyBhdXRob3JpdHkgb25saW5lLCBlbWFpbCBtYXJrZXRpbmcsIGJ1aWxkaW5nIGEgdGVhbSBhbmQgb3V0c291cmNpbmcsIGNvbnRlbnQgbWFya2V0aW5nLCBwb2RjYXN0aW5nLCBzZWFyY2ggZW5naW5lIG9wdGltaXphdGlvbiwgbmljaGUgc2l0ZXMsIHNvY2lhbCBtZWRpYSBzdHJhdGVnaWVzLCBob3cgdG8gZ2V0IG1vcmUgdHJhZmZpYywgY3JlYXRpbmcgb25saW5lIGNvdXJzZXMsIGFmZmlsaWF0ZSBtYXJrZXRpbmcsIGFuZCBwcm9kdWN0aXZpdHkgdGlwcyBzbyB0aGF0IHlvdSBjcmVhdGUgc29tZXRoaW5nIGFtYXppbmcgd2l0aG91dCBidXJuaW5nIHlvdXJzZWxmIG91dC4gSXQncyBhIG1peCBvZiBpbnRlcnZpZXdzLCBzcGVjaWFsIGNvLWhvc3RzIGFuZCBzb2xvIHNob3dzIGZyb20gUGF0IHlvdSdyZSBub3QgZ29pbmcgdG8gd2FudCB0byBtaXNzLiBIaXQgc3Vic2NyaWJlLCBhbmQgZ2V0IHJlYWR5IHRvIGNoYW5nZSB5b3VyIGxpZmUuXFxuICAgIFwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzIsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDYwOSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNDk5NjYxZjM1ODlmNDJhYWExNTMyNjczZTBlMGFlZGYvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjYyNixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJjNGM5NGVmZDFlMWE0NTUzOTAyZDc4NzRlOWMwMTM3MFwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODkwNTIwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTI3OTU1MTYwMDU5NCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA4NCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjdkNzMwYmIyYTcyZTQyNjhiMjhlZTRjNTJkZTE5MTViXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vYW5jaG9yLmZtL3MvMTI3NDYyMzAvcG9kY2FzdC9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IG51bGwsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTloYm1Ob2IzSXVabTB2Y3k4eE1qYzBOakl6TUM5d2IyUmpZWE4wTDNKemN3PT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzNpSnBVR2dHRDZXSEpITDNmc09TT3VcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2FsbC1tZS1jYW5kaWQtaGFsZXktcGhhbS1saWxseS1hbm4tX2RTc0J1bU5ZOXgtTFktYzhWTm56Uk8uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkNhbGwgTWUgQ2FuZGlkXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL2FuY2hvci5mbS9jYWxsbWVjYW5kaWQ/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDkzLFxuICAgICAgICA2NyxcbiAgICAgICAgMTcxXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTQ5NDU3NzI2MCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSGFsZXkgUGhhbSAmIExpbGx5IEFublwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2FsbC1tZS1jYW5kaWQtaGFsZXktcGhhbS1saWxseS1hbm4td2JtRFV5ZGU4LUEtTFktYzhWTm56Uk8uMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd28gZ2FscyBjaGF0dGluIGFib3V0IGJ1c2luZXNzLCBhZHZpY2UsIGFuZCBvdXIgZXhwZXJpZW5jZXMhXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MSxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMzMsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzdkNzMwYmIyYTcyZTQyNjhiMjhlZTRjNTJkZTE5MTViL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI2ODMsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiMGM5YjkwNDVmMjdiNGEwYmJjMjA2ODA3YTdmNmNjMmZcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2MDAwNjMyMDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1NzkwNDc4MDUwMzEsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMTY3LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMjNiZDRmMzQzMmMyNDUyZDkzZjUyNWUyNDQ2YTU4NzhcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9mZWVkcy5zaW1wbGVjYXN0LmNvbS80WUVMdlhndVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJyc3NAZWFyd29sZi5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1emFXMXdiR1ZqWVhOMExtTnZiUzgwV1VWTWRsaG5kUT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8wVmRwNGd5UW9ZMGtrY3ZhTG5JZ3Z4XCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NjYW0tZ29kZGVzcy1lYXJ3b2xmLWxhY2ktbW9zbGV5LXBNWC04N0ppY2FxLVBzdEVNZ3FYQ1VkLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJTY2FtIEdvZGRlc3NcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmVhcndvbGYuY29tL3Nob3cvc2NhbS1nb2RkZXNzLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTM1LFxuICAgICAgICA2NyxcbiAgICAgICAgMTMzLFxuICAgICAgICA5M1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE0Nzk0NTUwMDgsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkVhcndvbGYgJiBMYWNpIE1vc2xleVwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc2NhbS1nb2RkZXNzLWVhcndvbGYtbGFjaS1tb3NsZXktZnk4QnM0UmxUMDYtUHN0RU1ncVhDVWQuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXHUyMDFjU2NhbSBHb2RkZXNzIGlzIGEgcG9kY2FzdCBkZWRpY2F0ZWQgdG8gZnJhdWQgYW5kIGFsbCB0aG9zZSB3aG8gcHJhY3RpY2UgaXQhIEVhY2ggd2VlayBob3N0IExhY2kgTW9zbGV5IChha2EgU2NhbSBHb2RkZXNzKSBrZWVwcyBsaXN0ZW5lcnMgdXAgdG8gZGF0ZSBvbiBjdXJyZW50IHJhY2tldHMsIGRpZ3MgZGVlcCBpbnRvIHRoZSBsYXRlc3Qgc2NhbXMsIGFuZCBicmVha3MgZG93biBoaXN0b3JpYyBob29kd2lua3MgYWxvbmdzaWRlIHNvbWUgb2YgeW91ciBmYXZvcml0ZSBjb21lZGlhbnMhIEl0J3MgbGlrZSB0cnVlIGNyaW1lIG9ubHkgd2l0aG91dCBhbGwgdGhlIGRlYXRoISBUcnVlIGZ1biBjcmltZSFcXHUyMDFkXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MSxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogODYsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzIzYmQ0ZjM0MzJjMjQ1MmQ5M2Y1MjVlMjQ0NmE1ODc4L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM4OTUsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogdHJ1ZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIxZDE5MDdkZWUzOTk0MzZiYjVjMmIxOGEzNzE3OTdjYlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODgwODAwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQyMDA5OTIwMDAzNixcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxNjcsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJjNzMyNzFkNTVmZmE0ZTJkOWI1MjkyMjAwNzJmYmQ3OVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3d3dy5vbW55Y29udGVudC5jb20vZC9wbGF5bGlzdC9lNzNjOTk4ZS02ZTYwLTQzMmYtODYxMC1hZTIxMDE0MGM1YjEvM2U3ZjExYzYtMTE3MC00MGEwLWJlNTgtYWUzMzAwMzdlMmY1L2RlYTdjYjRjLWNiZWUtNDljZS04M2YwLWFlMzMwMDM3ZTMwMy9wb2RjYXN0LnJzc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJtaWNoYWVsQGVhcm55b3VybGVpc3VyZS5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OTNkM2N1YjIxdWVXTnZiblJsYm5RdVkyOXRMMlF2Y0d4aGVXeHBjM1F2WlRjell6azVPR1V0Tm1VMk1DMDBNekptTFRnMk1UQXRZV1V5TVRBeE5EQmpOV0l4THpObE4yWXhNV00yTFRFeE56QXROREJoTUMxaVpUVTRMV0ZsTXpNd01ETTNaVEptTlM5a1pXRTNZMkkwWXkxalltVmxMVFE1WTJVdE9ETm1NQzFoWlRNek1EQXpOMlV6TURNdmNHOWtZMkZ6ZEM1eWMzTT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzJTNHRTU2xUNzFaNWk4RHQxdmxESmNcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZWFybi15b3VyLWxlaXN1cmUtdGhlLWJsYWNrLWVmZmVjdC1hbmQtdEdvVjNuTnBmQ1MtQ1NSeTRMejYyNVkuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkVhcm4gWW91ciBMZWlzdXJlXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3d3dy5paGVhcnQuY29tL3BvZGNhc3QvMjU2LWVhcm4teW91ci1sZWlzdXJlLTMxMDg3MTgzLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgOTMsXG4gICAgICAgIDY3XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTQ1MDIxMTM5MixcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiVGhlIEJsYWNrIEVmZmVjdCBhbmQgaUhlYXJ0UG9kY2FzdHNcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Vhcm4teW91ci1sZWlzdXJlLXRoZS1ibGFjay1lZmZlY3QtYW5kLWtWQV9jdEpVMHlaLUNTUnk0THo2MjVZLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2VsY29tZSB0byBUaGUgRWFybiBZb3VyIExlaXN1cmUgUG9kY2FzdC4gUmFzaGFkIEJpbGFsIGFuZCBUcm95IE1pbGxpbmdzIHdpbGwgYmUgeW91ciBob3N0LiBFYXJuIFlvdXIgTGVpc3VyZSB3aWxsIGJlIGdpdmluZyB5b3UgYmVoaW5kIHRoZSBzY2VuZXMgZmluYW5jaWFsIHZpZXdzIGludG8gdGhlIGVudGVydGFpbm1lbnQgYW5kIHNwb3J0cyBpbmR1c3RyaWVzIGFzIHdlbGwgYXMgaGlnaGxpZ2h0aW5nIGJhY2sgc3RvcmllcyBvZiBlbnRyZXByZW5ldXJzLiBXZSB3aWxsIGFsc28gYmUgYnJlYWtpbmcgZG93biBidXNpbmVzcyBtb2RlbHMgYW5kIGV4YW1pbmluZyB0aGUgbGF0ZXN0IHRyZW5kcyBpbiBmaW5hbmNlLiBFYXJuIFlvdXIgTGVpc3VyZSBpcyBhIGNvbGxlZ2UgYnVzaW5lc3MgY2xhc3MgbWl4ZWQgd2l0aCBwb3AgY3VsdHVyZS4gV2UgYmxlbmQgdGhlIHR3byB0b2dldGhlciBmb3IgYSB1bmlxdWUgYW5kIGV4Y2l0aW5nIGxvb2sgaW50byB0aGUgd29ybGQgb2YgYnVzaW5lc3MuIExldFxcdTIwMTlzIGdvISEgI2Vhcm55b3VybGVpc3VyZXBvZGNhc3RcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDcxLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAzNzcsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M3MzI3MWQ1NWZmYTRlMmQ5YjUyOTIyMDA3MmZiZDc5L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDMxMzIsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiN2YwZjZkMDk1ZTZjNDk3YTlkOTJiYTU5NjY3OTBiNDJcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg4NzgyMDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1NDgxODYxMjAzNzUsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogNTUsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmYmVjZmRkNDExNmU0ZTdhOTU0YmQ2YmM0Y2IwYjQwNlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2FteXBvcnRlcmZpZWxkLmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcInBvZGNhc3RAYW15cG9ydGVyZmllbGQuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTloYlhsd2IzSjBaWEptYVdWc1pDNXNhV0p6ZVc0dVkyOXRMM0p6Y3c9PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNXo3VHFDNnRsbDhlZ0k5cHJNcVhoZFwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJBbXlQb3J0ZXJmaWVsZFwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIkFteVBvcnRlcmZpZWxkXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJhbXlwb3J0ZXJmaWVsZFwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9vbmxpbmUtbWFya2V0aW5nLW1hZGUtZWFzeS13aXRoLWFteS0tSWR1NG15RVFHby1qWFV5ZjR2QlYyMC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiT25saW5lIE1hcmtldGluZyBNYWRlIEVhc3kgd2l0aCBBbXkgUG9ydGVyZmllbGRcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vYW15cG9ydGVyZmllbGQuY29tL2NhdGVnb3J5L3BvZGNhc3QvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzMsXG4gICAgICAgIDkzLFxuICAgICAgICAxNTcsXG4gICAgICAgIDk0LFxuICAgICAgICA5NyxcbiAgICAgICAgNjdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA1OTQ3MDM1NDUsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkFteSBQb3J0ZXJmaWVsZFwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvb25saW5lLW1hcmtldGluZy1tYWRlLWVhc3ktd2l0aC1hbXktOG5zNVc2UmtkUGwtalhVeWY0dkJWMjAuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFdmVyIHdpc2ggeW91IGhhZCBhIGJ1c2luZXNzIG1lbnRvciB3aXRoIG92ZXIgYSBkZWNhZGUgb2YgZXhwZXJpZW5jZSB3aGlzcGVyaW5nIHN1Y2Nlc3Mgc2VjcmV0cyBpbiB5b3VyIGVhcj8gVGhhdFxcdTIwMTlzIGV4YWN0bHkgd2hhdCB5b3VcXHUyMDE5bGwgZ2V0IHdoZW4geW91IHR1bmUgaW50byB0aGUgdG9wLXJhbmtlZCBPbmxpbmUgTWFya2V0aW5nIE1hZGUgRWFzeSBQb2RjYXN0IHdpdGggeW91ciBob3N0LCA5IHRvIDVlciB0dXJuZWQgQ0VPIG9mIGEgbXVsdGktbWlsbGlvbiBkb2xsYXIgYnVzaW5lc3MsIEFteSBQb3J0ZXJmaWVsZC4gSGVyIHNwZWNpYWx0eT8gQnJlYWtpbmcgZG93biBiaWcgaWRlYXMgYW5kIHN0cmF0ZWdpZXMgaW50byBhY3Rpb25hYmxlIHN0ZXAtYnktc3RlcCBwcm9jZXNzZXMgZGVzaWduZWQgdG8gZ2V0IHlvdSByZXN1bHRzIHdpdGggYSB3aG9sZSBsb3QgbGVzcyBzdHJlc3MuIFR1bmUgaW4sIGdldCBpbnNwaXJlZCwgYW5kIGdldCByZWFkeSB0byBkaXNjb3ZlciB3aHkgaHVuZHJlZHMgb2YgdGhvdXNhbmRzIG9mIG9ubGluZSBidXNpbmVzcyBvd25lcnMgdHVybiB0byBBbXkgZm9yIGd1aWRhbmNlIHdoZW4gaXQgY29tZXMgdG8gYWxsIHRoaW5ncyBvbmxpbmUgYnVzaW5lc3MgaW5jbHVkaW5nIGRpZ2l0YWwgY291cnNlcywgbGlzdCBidWlsZGluZywgc29jaWFsIG1lZGlhLCBjb250ZW50LCB3ZWJpbmFycywgYW5kIHNvIG11Y2ggbW9yZS4gV2hldGhlciB5b3UncmUgYSBidWRkaW5nIGVudHJlcHJlbmV1ciwgaGF2ZSBhIGNvbWZ5IHNpZGUtaHVzdGxlLCBvciBhcmUgbG9va2luZyB0byB0YWtlIHlvdXIgYnVzaW5lc3MgdG8gdGhlIG5leHQgbGV2ZWwsIGVhY2ggZXBpc29kZSBpcyBkZXNpZ25lZCB0byBoZWxwIHlvdSB0YWtlIGltbWVkaWF0ZSBhY3Rpb24gb24gdGhlIG1vc3QgaW1wb3J0YW50IHN0cmF0ZWdpZXMgZm9yIHN0YXJ0aW5nIGFuZCBncm93aW5nIHlvdXIgb25saW5lIGJ1c2luZXNzIHRvZGF5LlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDUxMyxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZmJlY2ZkZDQxMTZlNGU3YTk1NGJkNmJjNGNiMGI0MDYvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjM5MSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIxZWU1MDZkYjk0ZWE0MDNiYmIxZGFmODFmZWZlZjI5MVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODkwNTM1OTAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTM1ODIwMDg2NzQ5NSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA4NCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjRlMjcyYTRjZWM4NDRiMzJiZTZhZDIwNDhkNjE0YjI4XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMuc2ltcGxlY2FzdC5jb20vbVdPMEJMZWNcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IG51bGwsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiaHR0cHM6Ly9ieXRoZWJvb2twb2QuY29tL1wiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5M2QzY3ViMjF1ZVdOdmJuUmxiblF1WTI5dEwyUXZjR3hoZVd4cGMzUXZZV0ZsWVRSbE5qa3RZV1kxTVMwME9UVmxMV0ZtWXprdFlUazNOakF4TkRZNU1qSmlMemN6Wm1RNE1HTXlMVFE0WkRZdE5ETXpZeTA0TVRkbUxXRmhZVFF3TVRkak0yTXhOaTh4WXpNMVl6azBOeTAxTm1ReUxUUTVZMk10WW1VeE5TMWhZV0UwTURFM1l6TmpNV1V2Y0c5a1kyRnpkQzV5YzNNPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNHVQeEh3Unl2UkM3ZWJ6M2dNeHBrMVwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJieXRoZWJvb2twb2RcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJrcmlzdGVuYW5kam9sZW50YVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiYnl0aGVib29rcG9kXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J5LXRoZS1ib29rLXN0aXRjaGVyLWpvbGVudGEtZ3JlZW5iZXJnLVZKMWdxOHpYQW1hLS1zQ3lBbGp2NEJULjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJCeSBUaGUgQm9va1wiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cuc3RpdGNoZXIuY29tL3BvZGNhc3Qvc3RpdGNoZXIvYnktdGhlLWJvb2s/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDEwNCxcbiAgICAgICAgMTkxLFxuICAgICAgICA3OCxcbiAgICAgICAgOTMsXG4gICAgICAgIDY3LFxuICAgICAgICA4OCxcbiAgICAgICAgOTAsXG4gICAgICAgIDEyMixcbiAgICAgICAgMTMzXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTIxNzk0ODYyOCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiU3RpdGNoZXIgJiBKb2xlbnRhIEdyZWVuYmVyZywgS3Jpc3RlbiBNZWluemVyXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ieS10aGUtYm9vay1zdGl0Y2hlci1qb2xlbnRhLWdyZWVuYmVyZy1LcXBTM1RlUVc2aS0tc0N5QWxqdjRCVC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhhbGYgcmVhbGl0eSBzaG93LCBoYWxmIHNlbGYtaGVscCBwb2RjYXN0LCBhbmQgb25lIHdpbGQgc29jaWFsIGV4cGVyaW1lbnQuIEpvaW4gY29tZWRpYW4gSm9sZW50YSBHcmVlbmJlcmcgYW5kIGN1bHR1cmUgY3JpdGljIEtyaXN0ZW4gTWVpbnplciBhcyB0aGV5IGxpdmUgYnkgdGhlIHJ1bGVzIG9mIGEgZGlmZmVyZW50IHNlbGYtaGVscCBib29rIGVhY2ggZXBpc29kZSB0byBmaWd1cmUgb3V0IHdoaWNoIG9uZXMgbWlnaHQgYWN0dWFsbHkgYmUgbGlmZSBjaGFuZ2luZy5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDcxLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAyMTUsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRlMjcyYTRjZWM4NDRiMzJiZTZhZDIwNDhkNjE0YjI4L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDIwNTEsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogdHJ1ZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIxNWJmMjE4NTAyZmE0YjI5OTIzMWMxOWRhM2U4YjUzMVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODk4MDgwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQ4OTc4NzU4MDIxMyxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyNTEsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCIyOTU5MjVlMjRkNWE0NzhmODQ3OGVlMTAyNjU2MGVmY1wiLFxuICAgICAgXCJyc3NcIjogXCJodHRwOi8vZmVlZHMud255Yy5vcmcvdHJ1bXBpbmNcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwid255Y2RpZ2l0YWxAZ21haWwuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNEb3ZMMlpsWldSekxuZHVlV011YjNKbkwzUnlkVzF3YVc1alwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIldOWUNTdHVkaW9zXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiV05ZQ1N0dWRpb3NcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIndueWNzdHVkaW9zXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RydW1wLWluYy13bnljLXN0dWRpb3MtS2ZIRTEtcGozaXctcjJUSFUwZ3UzZkIuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRydW1wLCBJbmMuIFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cud255Y3N0dWRpb3Mub3JnL3BvZGNhc3RzL3RydW1waW5jP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAyMTYsXG4gICAgICAgIDk5LFxuICAgICAgICAxMzUsXG4gICAgICAgIDY3LFxuICAgICAgICA5M1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEzNDQ4OTQxODcsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIldOWUMgU3R1ZGlvcyBcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RydW1wLWluYy13bnljLXN0dWRpb3MtTHV2Mm84Q0tjbFQtcjJUSFUwZ3UzZkIuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIZVxcdTIwMTlzIHRoZSBQcmVzaWRlbnQsIHlldCB3ZVxcdTIwMTlyZSBzdGlsbCB0cnlpbmcgdG8gYW5zd2VyIGJhc2ljIHF1ZXN0aW9ucyBhYm91dCBob3cgaGlzIGJ1c2luZXNzIHdvcmtzOiBXaGF0IGRlYWxzIGFyZSBoYXBwZW5pbmcsIHdobyB0aGV5XFx1MjAxOXJlIGhhcHBlbmluZyB3aXRoLCBhbmQgaWYgdGhlIFByZXNpZGVudCBhbmQgaGlzIGZhbWlseSBhcmUga2VlcGluZyB0aGVpciBwcm9taXNlIHRvIHNlcGFyYXRlIHRoZSBUcnVtcCBPcmdhbml6YXRpb24gZnJvbSB0aGUgVHJ1bXAgV2hpdGUgSG91c2UuIFxcdTIwMWNUcnVtcCwgSW5jLlxcdTIwMWQgaXMgYSBqb2ludCByZXBvcnRpbmcgcHJvamVjdCBmcm9tIFdOWUMgU3R1ZGlvcyBhbmQgUHJvUHVibGljYSB0aGF0IGRpZ3MgZGVlcCBpbnRvIHRoZXNlIHF1ZXN0aW9ucy4gV2VcXHUyMDE5bGwgYmUgbGF5b3V0IG91dCB3aGF0IHdlIGtub3csIHdoYXQgd2UgZG9uXFx1MjAxOXQgYW5kIGhvdyB5b3UgY2FuIGhlbHAgdXMgZmlsbCBpbiB0aGUgZ2Fwcy4gXFxyXFxuV05ZQyBTdHVkaW9zIGlzIGEgbGlzdGVuZXItc3VwcG9ydGVkIHByb2R1Y2VyIG9mIG90aGVyIGxlYWRpbmcgcG9kY2FzdHMsIGluY2x1ZGluZyBPbiB0aGUgTWVkaWEsIFJhZGlvbGFiLCBEZWF0aCwgU2V4ICYgTW9uZXksIEhlcmVcXHUyMDE5cyB0aGUgVGhpbmcgd2l0aCBBbGVjIEJhbGR3aW4sIE5hbmN5IGFuZCBtYW55IG90aGVycy4gUHJvUHVibGljYSBpcyBhIG5vbi1wcm9maXQgaW52ZXN0aWdhdGl2ZSBuZXdzcm9vbS5cXHJcXG5cXHUwMGE5IFdOWUMgU3R1ZGlvc1wiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDk4LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8yOTU5MjVlMjRkNWE0NzhmODQ3OGVlMTAyNjU2MGVmYy9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxNzQzLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjU5YmFlN2Y5NDgxMTQ4Y2RhNDBiNmYxYTY4ZDUyZTRiXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjUxNTkzNjAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNTE3ODA2ODAwMDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDI3NixcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImE0MDliOGJiOTNmNDQwNTRhN2JlMmQ2YjMwODQzODk5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZW50cmVwcmVuZXVyb25maXJlLmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcIkpvaG5ARW50cmVwcmVuZXVyT25GaXJlLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5bGJuUnlaWEJ5Wlc1bGRYSnZibVpwY21VdWJHbGljM2x1TG1OdmJTOXljM009XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8yNXdnSHhyUVkyZTdXTmVWNFV0RUNJXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDWGZ6cGxpQWZkalBhcmF3SmxqSG8yZ1wiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiam9obmxlZWR1bWFzXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiam9obmxlZWR1bWFzMVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJodHRwczovL211c2ljLmFtYXpvbi5jb20vcG9kY2FzdHMvNDcyOGE3ZmMtNzMxZi00YjE4LTk3MWItODViMGI4YzJlNzg0L2VudHJlcHJlbmV1cnMtb24tZmlyZVwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJqb2hubGVlZHVtYXNcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZW50cmVwcmVuZXVycy1vbi1maXJlLWpvaG4tbGVlLWR1bWFzLW9mLXJtUnZubEUyTHA5LTFXT2hUN3U2VlFiLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJFbnRyZXByZW5ldXJzIG9uIEZpcmVcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmVvZmlyZS5jb20vP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzEsXG4gICAgICAgIDY3LFxuICAgICAgICA5MyxcbiAgICAgICAgMTczLFxuICAgICAgICAxNTcsXG4gICAgICAgIDE2OSxcbiAgICAgICAgODgsXG4gICAgICAgIDExMSxcbiAgICAgICAgOTAsXG4gICAgICAgIDk0LFxuICAgICAgICA5N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDU2NDAwMTYzMyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSm9obiBMZWUgRHVtYXMgb2YgRU9GaXJlXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9lbnRyZXByZW5ldXJzLW9uLWZpcmUtam9obi1sZWUtZHVtYXMtb2YtS2RWY0hBcnhOMUUtMVdPaFQ3dTZWUWIuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiB0cnVlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkpvaG4gTGVlIER1bWFzIGlzIHRoZSBmb3VuZGVyIGFuZCBob3N0IG9mIHRoZSBhd2FyZCB3aW5uaW5nIHBvZGNhc3QsIEVudHJlcHJlbmV1cnMgT24gRmlyZS4gV2l0aCBvdmVyIDEwMCBtaWxsaW9uIGxpc3RlbnMgb2YgaGlzIDMwMDArIGVwaXNvZGVzLCBKTEQgaGFzIHR1cm5lZCBFbnRyZXByZW5ldXJzIE9uIEZpcmUgaW50byBhIG1lZGlhIGVtcGlyZSB0aGF0IGdlbmVyYXRlcyBvdmVyIGEgbWlsbGlvbiBsaXN0ZW5zIGV2ZXJ5IG1vbnRoIGFuZCA3LWZpZ3VyZXMgb2YgTkVUIGFubnVhbCByZXZlbnVlIDgteWVhcnMgaW4gYSByb3cuIEhpcyBmaXJzdCB0cmFkaXRpb25hbGx5IHB1Ymxpc2hlZCBib29rLCBUaGUgQ29tbW9uIFBhdGggdG8gVW5jb21tb24gU3VjY2VzcyBpcyB0aGUgbW9kZXJuIGRheSB2ZXJzaW9uIG9mIFRoaW5rIGFuZCBHcm93IFJpY2ggd2l0aCBhIHJldm9sdXRpb25hcnkgMTctc3RlcCByb2FkbWFwIHRvIGZpbmFuY2lhbCBmcmVlZG9tIGFuZCBmdWxmaWxsbWVudC4gTGVhcm4gbW9yZSBhdCBVbmNvbW1vblN1Y2Nlc3NCb29rLmNvbVwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDMwNjAsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2E0MDliOGJiOTNmNDQwNTRhN2JlMmQ2YjMwODQzODk5L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE4MjMsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiOTNlYTMyNmY4MzExNDAyZGE4ZDk1OWFlZTdiNDAyMThcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg5MTA2MDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDEzNDgyOTcyMDMwNDAsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjQsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI1M2U5YTk4YTllMTg0MDZhYWZlZjhjY2Q2NjM2OWZjYlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwOi8vZmVlZHMuZmVlZGJ1cm5lci5jb20vVGhlUGV0ZXJTY2hpZmZTaG93UG9kY2FzdFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJjdXN0b21lcnNlcnZpY2VAc2NoaWZmcmFkaW8uY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNEb3ZMMlpsWldSekxtWmxaV1JpZFhKdVpYSXVZMjl0TDFSb1pWQmxkR1Z5VTJOb2FXWm1VMmh2ZDFCdlpHTmhjM1E9XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy83N2NrcWt4M01iUDFjS2hqRGpBYkRZXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1wZXRlci1zY2hpZmYtc2hvdy1wb2RjYXN0LXBldGVyLXNjaGlmZi1MYjJqcXMtNDFySi1qWTUtWFc0UUxmXy45MjR4OTI0LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBQZXRlciBTY2hpZmYgU2hvdyBQb2RjYXN0XCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3NjaGlmZnJhZGlvLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTQ0LFxuICAgICAgICA5OCxcbiAgICAgICAgNjcsXG4gICAgICAgIDkzXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogNDA0OTYzNDMyLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJQZXRlciBTY2hpZmZcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1wZXRlci1zY2hpZmYtc2hvdy1wb2RjYXN0LXBldGVyLXNjaGlmZi1WeDdKbG9ESzVFdy1qWTUtWFc0UUxmXy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IHRydWUsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGV0ZXIgU2NoaWZmIGlzIGFuIGVjb25vbWlzdCwgZmluYW5jaWFsIGJyb2tlci9kZWFsZXIsIGF1dGhvciwgZnJlcXVlbnQgZ3Vlc3Qgb24gbmF0aW9uYWwgbmV3cywgYW5kIGhvc3Qgb2YgdGhlIFBldGVyIFNjaGlmZiBTaG93IFBvZGNhc3QuIFRoZSBwb2RjYXN0IGZvY3VzZXMgb24gZWNvbm9taWMgZGF0YSBhbmFseXNpcyBhbmQgdW5iaWFzZWQgY292ZXJhZ2Ugb2YgZmluYW5jaWFsIG5ld3MsIGJvdGggaW4gdGhlIFUuUy4gYW5kIGdsb2JhbCBtYXJrZXRzLiBBcyBlbnRlcnRhaW5pbmcgYXMgaGUgaXMgaW5mb3JtYXRpdmUsIFBldGVyIHBhY2tzIGRlY2FkZXMgb2YgYnJpbGxpYW50IGluc2lnaHQgaW50byBldmVyeSBuZXdzIGl0ZW0uIEpvaW4gdGhlIHRob3VzYW5kcyBvZiBmYW5zIHdobyBoYXZlIGJlbmVmaXRlZCBmcm9tIFBldGVyXFx1MjAxOXMgY29tbWl0bWVudCB0byBnZXR0aW5nIHRoZSByZWFsIHN0b3J5IG91dCB0byB0aGUgd29ybGQuXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MSxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogOTIzLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy81M2U5YTk4YTllMTg0MDZhYWZlZjhjY2Q2NjM2OWZjYi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyOTA1LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjJmOTQwMGNhNzVjNzQxZjA5MmFiNWU3NzNjMjMzY2EwXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4NjgyNjc4MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDUwNDAxMDYyMDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDk4LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgfVxuICBdLFxuICBcInBhcmVudF9pZFwiOiA2NyxcbiAgXCJwYWdlX251bWJlclwiOiAyLFxuICBcImhhc19wcmV2aW91c1wiOiB0cnVlLFxuICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9iZXN0LWJ1c2luZXNzLXBvZGNhc3RzLTkzL1wiLFxuICBcIm5leHRfcGFnZV9udW1iZXJcIjogMyxcbiAgXCJwcmV2aW91c19wYWdlX251bWJlclwiOiAxXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwiaGFzX25leHRcIixcbiAgICBcImhhc19wcmV2aW91c1wiLFxuICAgIFwiaWRcIixcbiAgICBcImxpc3Rlbm5vdGVzX3VybFwiLFxuICAgIFwibmFtZVwiLFxuICAgIFwibmV4dF9wYWdlX251bWJlclwiLFxuICAgIFwicGFnZV9udW1iZXJcIixcbiAgICBcInBhcmVudF9pZFwiLFxuICAgIFwicG9kY2FzdHNcIixcbiAgICBcInByZXZpb3VzX3BhZ2VfbnVtYmVyXCIsXG4gICAgXCJ0b3RhbFwiXG4gIF0sXG4gIFwicHJvcGVydGllc1wiOiB7XG4gICAgXCJpZFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogOTUsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHRoaXMgZ2VucmVcIlxuICAgIH0sXG4gICAgXCJuYW1lXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiQnVzaW5lc3MgTmV3c1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgZ2VucmUncyBuYW1lLlwiXG4gICAgfSxcbiAgICBcInRvdGFsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAzMjVcbiAgICB9LFxuICAgIFwiaGFzX25leHRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgXCJleGFtcGxlXCI6IHRydWVcbiAgICB9LFxuICAgIFwicG9kY2FzdHNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzlcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJzc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS9yc3NcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSU1MgdXJsIG9mIHRoaXMgcG9kY2FzdC4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICAgIFwiZXBpc29kaWNcIixcbiAgICAgICAgICAgICAgXCJzZXJpYWxcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdHlwZSBvZiB0aGlzIHBvZGNhc3QgLSBlcGlzb2RpYyBvciBzZXJpYWwuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJoZWxsb0BleGFtcGxlLmNvbVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlbWFpbCBvZiB0aGlzIHBvZGNhc3QncyBwcm9kdWNlci4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidXJsMVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ1cmwyXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInVybDNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZ29vZ2xlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl5YzNNdVlYSjBNVGt1WTI5dEwycHZhRzR0YzI5c2IyMXZiaTF5WlhCdmNuUnpcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR29vZ2xlIFBvZGNhc3RzIHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJzcG90aWZ5X3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMnJRSlVQOVkzSHhlbWlXM0pIdDlXVlwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcG90aWZ5IHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vc3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWW91VHViZSB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlua2VkaW5fdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTGlua2VkSW4gdXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZUNoYXQgdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBhdHJlb24gdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlNXN3g3cG9kY2FzdFwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2l0dGVyIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwic3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmFjZWJvb2sgdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9tdXNpYy5hbWF6b24uY29tL3BvZGNhc3RzLzZmYzZkNjgzLTllZjMtNDg1MC05YzM1LThlOGIxYTQyYTE0Ny90aGUtbG9jay1zcG9ydHNjYXN0XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFtYXpvbiBNdXNpYyB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwic3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5zdGFncmFtIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrLiBJZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY291bnRyeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgY291bnRyeSB3aGVyZSB0aGlzIHBvZGNhc3QgaXMgcHJvZHVjZWQuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwid2Vic2l0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHA6Ly9zdzd4Ny5jb20vXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2Vic2l0ZSB1cmwgb2YgdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBsYW5ndWFnZSBvZiB0aGlzIHBvZGNhc3QuIFlvdSBjYW4gZ2V0IGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzIGZyb20gYEdFVCAvbGFuZ3VhZ2VzYC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZW5yZV9pZHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZHMuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgIDg2LFxuICAgICAgICAgICAgICAxNjAsXG4gICAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgICA4MixcbiAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXR1bmVzX2lkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4OTYzNTQ2MzgsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaVR1bmVzIGlkIGZvciB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiUGxhbmV0IEJyb2FkY2FzdGluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgcHVibGlzaGVyIG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzX2NsYWltZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgY2xhaW1lZCBieSBpdHMgcHJvZHVjZXIgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjxwPlRoZSBTdGFyIFdhcnMgN3g3IFBvZGNhc3QgaXMgUmViZWwtcm91c2luZyBmdW4gZm9yIGV2ZXJ5ZGF5IEplZGksIGJldHdlZW4gNyBhbmQgMTQgbWludXRlcyBhIGRheSwgNyBkYXlzIGEgd2Vlay4gSm9pbiBob3N0IEFsbGVuIFZvaXZvZCBmb3IgU3RhciBXYXJzIG5ld3MsIGhpc3RvcnksIGludGVydmlld3MsIHRyaXZpYSwgYW5kIGRlZXAgZGl2ZXMgaW50byB0aGUgU3RhciBXYXJzIHN0b3J5IGFzIHRvbGQgaW4gbW92aWVzLCBib29rcywgY29taWNzLCBnYW1lcywgY2FydG9vbnMsIGFuZCBtb3JlLiBTdWJzY3JpYmUgbm93IGZvciB5b3VyIGRhaWx5IGRvc2Ugb2YgU3RhciBXYXJzIGpveS4gSXQncyBkZXN0aW55IHVubGVhc2hlZCE8L3A+XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSHRtbCBvZiB0aGlzIGVwaXNvZGUncyBmdWxsIGRlc2NyaXB0aW9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcImd1ZXN0c1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBndWVzdHMuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjb2hvc3RzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNvaG9zdHMuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJzcG9uc29yc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBzcG9uc29ycy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBjcm9zcyBwcm9tb3Rpb24gb3Bwb3J0dW5pdGllcyB3aXRoIG90aGVyIHBvZGNhc3RzLlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4MSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgc2NvcmUgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZCBvbiBhIHNjYWxlIGZyb20gMCB0byAxMDAuXFxuSWYgdGhlIHNjb3JlIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAzMjQsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG90YWwgbnVtYmVyIG9mIGVwaXNvZGVzIGluIHRoaXMgcG9kY2FzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OS9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDEyOTEsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXZlcmFnZSBhdWRpbyBsZW5ndGggb2YgYWxsIGVwaXNvZGVzIG9mIHRoaXMgcG9kY2FzdC4gSW4gc2Vjb25kcy5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImQwNTcwOTJlNTdjYzRjZWQ4MGUwZWZhYTE5NjU5M2Q5XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHRoZSBtb3N0IHJlY2VudGx5IHB1Ymxpc2hlZCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBlcGlzb2RlIG1ldGFkYXRhIHZpYSBgR0VUIC9lcGlzb2Rlcy97aWR9YC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE1NTc0OTk3NzAwMDAsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHB1Ymxpc2hlZCBkYXRlIG9mIHRoZSBsYXRlc3QgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QuIEluIG1pbGxpc2Vjb25kc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDcwNjY3OTAyMDAwLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgb2xkZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNjgsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSG93IGZyZXF1ZW50bHkgZG9lcyB0aGlzIHBvZGNhc3QgcmVsZWFzZSBhIG5ldyBlcGlzb2RlPyBJbiBob3Vycy4gRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAxNjYsIHRoZW4gaXQncyBldmVyeSAxNjYgaG91cnMgKG9yIHdlZWtseSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiMC41JVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcInBhcmVudF9pZFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogOTMsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHBhcmVudCBnZW5yZS5cIlxuICAgIH0sXG4gICAgXCJwYWdlX251bWJlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMlxuICAgIH0sXG4gICAgXCJoYXNfcHJldmlvdXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiXG4gICAgfSxcbiAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9iZXN0LWJ1c2luZXNzLW5ld3MtcG9kY2FzdHMtOTUvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIG9mIHRoZSBsaXN0IG9mIGJlc3QgcG9kY2FzdHMgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgIH0sXG4gICAgXCJuZXh0X3BhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAzXG4gICAgfSxcbiAgICBcInByZXZpb3VzX3BhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAxXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIGEgbGlzdCBvZiBzdXBwb3J0ZWQgY291bnRyaWVzL3JlZ2lvbnMgZm9yIGJlc3QgcG9kY2FzdHNcblxuRnVuY3Rpb24gTmFtZTogKipmZXRjaF9wb2RjYXN0X3JlZ2lvbnMqKlxuXG5JdCByZXR1cm5zIGEgZGljdGlvbmFyeSBvZiBjb3VudHJ5IGNvZGVzIChlLmcuLCB1cywgZ2IuLi4pICZhbXA7IGNvdW50cnkgbmFtZXMgKFVuaXRlZCBTdGF0ZXMsIFVuaXRlZCBLaW5nZG9tLi4uKS4gVGhlIGNvdW50cnkgY29kZSBpcyB1c2VkIGluIHRoZSBxdWVyeSBwYXJhbWV0ZXIgKipyZWdpb24qKiBvZiBgR0VUIC9iZXN0X3BvZGNhc3RzYC5cblxuXG5FeGFtcGxlOlxuYGBgcHl0aG9uXG5cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbiMgSWYgYXBpX2tleSBpcyBOb25lLCB0aGUgc2RrIHdpbGwgY29ubmVjdCB0byBhIG1vY2sgc2VydmVyIHRoYXQnbGxcbiMgcmV0dXJuIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3NlICAgICAgICAgICAgXG5hcGlfa2V5ID0gJ2E2YTFmN2FlNmE0YTRjZjdhMjA4ZTViYSoqKioqKioqJ1xuXG5jbGllbnQgPSBwb2RjYXN0X2FwaS5DbGllbnQoYXBpX2tleT1hcGlfa2V5KSAgICAgIFxuXG5yZXNwb25zZSA9IGNsaWVudC5mZXRjaF9wb2RjYXN0X3JlZ2lvbnMoKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItcmVnaW9ucykuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJyZWdpb25zXCI6IHtcbiAgICBcImFlXCI6IFwiVW5pdGVkIEFyYWIgRW1pcmF0ZXNcIixcbiAgICBcImFnXCI6IFwiQW50aWd1YSBhbmQgQmFyYnVkYVwiLFxuICAgIFwiYWlcIjogXCJBbmd1aWxsYVwiLFxuICAgIFwiYWxcIjogXCJBbGJhbmlhXCIsXG4gICAgXCJhbVwiOiBcIkFybWVuaWFcIixcbiAgICBcImFvXCI6IFwiQW5nb2xhXCIsXG4gICAgXCJhclwiOiBcIkFyZ2VudGluYVwiLFxuICAgIFwiYXRcIjogXCJBdXN0cmlhXCIsXG4gICAgXCJhdVwiOiBcIkF1c3RyYWxpYVwiLFxuICAgIFwiYXpcIjogXCJBemVyYmFpamFuXCIsXG4gICAgXCJiYlwiOiBcIkJhcmJhZG9zXCIsXG4gICAgXCJiZFwiOiBcIkJhbmdsYWRlc2hcIixcbiAgICBcImJlXCI6IFwiQmVsZ2l1bVwiLFxuICAgIFwiYmZcIjogXCJCdXJraW5hLUZhc29cIixcbiAgICBcImJnXCI6IFwiQnVsZ2FyaWFcIixcbiAgICBcImJoXCI6IFwiQmFocmFpblwiLFxuICAgIFwiYmpcIjogXCJCZW5pblwiLFxuICAgIFwiYm1cIjogXCJCZXJtdWRhXCIsXG4gICAgXCJiblwiOiBcIkJydW5laSBEYXJ1c3NhbGFtXCIsXG4gICAgXCJib1wiOiBcIkJvbGl2aWFcIixcbiAgICBcImJyXCI6IFwiQnJhemlsXCIsXG4gICAgXCJic1wiOiBcIkJhaGFtYXNcIixcbiAgICBcImJ0XCI6IFwiQmh1dGFuXCIsXG4gICAgXCJid1wiOiBcIkJvdHN3YW5hXCIsXG4gICAgXCJieVwiOiBcIkJlbGFydXNcIixcbiAgICBcImJ6XCI6IFwiQmVsaXplXCIsXG4gICAgXCJjYVwiOiBcIkNhbmFkYVwiLFxuICAgIFwiY2hcIjogXCJTd2l0emVybGFuZFwiLFxuICAgIFwiY2xcIjogXCJDaGlsZVwiLFxuICAgIFwiY25cIjogXCJDaGluYVwiLFxuICAgIFwiY29cIjogXCJDb2xvbWJpYVwiLFxuICAgIFwiY3JcIjogXCJDb3N0YSBSaWNhXCIsXG4gICAgXCJjdlwiOiBcIkNhcGUgVmVyZGVcIixcbiAgICBcImN5XCI6IFwiQ3lwcnVzXCIsXG4gICAgXCJjelwiOiBcIkN6ZWNoIFJlcHVibGljXCIsXG4gICAgXCJkZVwiOiBcIkdlcm1hbnlcIixcbiAgICBcImRrXCI6IFwiRGVubWFya1wiLFxuICAgIFwiZG1cIjogXCJEb21pbmljYVwiLFxuICAgIFwiZG9cIjogXCJEb21pbmljYW4gUmVwdWJsaWNcIixcbiAgICBcImR6XCI6IFwiQWxnZXJpYVwiLFxuICAgIFwiZWNcIjogXCJFY3VhZG9yXCIsXG4gICAgXCJlZVwiOiBcIkVzdG9uaWFcIixcbiAgICBcImVnXCI6IFwiRWd5cHRcIixcbiAgICBcImVzXCI6IFwiU3BhaW5cIixcbiAgICBcImZpXCI6IFwiRmlubGFuZFwiLFxuICAgIFwiZmpcIjogXCJGaWppXCIsXG4gICAgXCJmclwiOiBcIkZyYW5jZVwiLFxuICAgIFwiZ2JcIjogXCJVbml0ZWQgS2luZ2RvbVwiLFxuICAgIFwiZ2RcIjogXCJHcmVuYWRhXCIsXG4gICAgXCJnaFwiOiBcIkdoYW5hXCIsXG4gICAgXCJnbVwiOiBcIkdhbWJpYVwiLFxuICAgIFwiZ3JcIjogXCJHcmVlY2VcIixcbiAgICBcImd0XCI6IFwiR3VhdGVtYWxhXCIsXG4gICAgXCJnd1wiOiBcIkd1aW5lYSBCaXNzYXVcIixcbiAgICBcImd5XCI6IFwiR3V5YW5hXCIsXG4gICAgXCJoa1wiOiBcIkhvbmcgS29uZ1wiLFxuICAgIFwiaG5cIjogXCJIb25kdXJhc1wiLFxuICAgIFwiaHJcIjogXCJDcm9hdGlhXCIsXG4gICAgXCJodVwiOiBcIkh1bmdhcnlcIixcbiAgICBcImlkXCI6IFwiSW5kb25lc2lhXCIsXG4gICAgXCJpZVwiOiBcIklyZWxhbmRcIixcbiAgICBcImlsXCI6IFwiSXNyYWVsXCIsXG4gICAgXCJpblwiOiBcIkluZGlhXCIsXG4gICAgXCJpc1wiOiBcIkljZWxhbmRcIixcbiAgICBcIml0XCI6IFwiSXRhbHlcIixcbiAgICBcImptXCI6IFwiSmFtYWljYVwiLFxuICAgIFwiam9cIjogXCJKb3JkYW5cIixcbiAgICBcImpwXCI6IFwiSmFwYW5cIixcbiAgICBcImtlXCI6IFwiS2VueWFcIixcbiAgICBcImtnXCI6IFwiS3J5Z3l6c3RhblwiLFxuICAgIFwia2hcIjogXCJDYW1ib2RpYVwiLFxuICAgIFwia3JcIjogXCJTb3V0aCBLb3JlYVwiLFxuICAgIFwia3dcIjogXCJLdXdhaXRcIixcbiAgICBcImt5XCI6IFwiQ2F5bWFuIElzbGFuZHNcIixcbiAgICBcImt6XCI6IFwiS2F6YWtoc3RhblwiLFxuICAgIFwibGFcIjogXCJMYW9zXCIsXG4gICAgXCJsYlwiOiBcIkxlYmFub25cIixcbiAgICBcImxjXCI6IFwiU2FpbnQgTHVjaWFcIixcbiAgICBcImxrXCI6IFwiU3JpIExhbmthXCIsXG4gICAgXCJsclwiOiBcIkxpYmVyaWFcIixcbiAgICBcImx0XCI6IFwiTGl0aHVhbmlhXCIsXG4gICAgXCJsdVwiOiBcIkx1eGVtYm91cmdcIixcbiAgICBcImx2XCI6IFwiTGF0dmlhXCIsXG4gICAgXCJtZFwiOiBcIk1vbGRvdmFcIixcbiAgICBcIm1nXCI6IFwiTWFkYWdhc2NhclwiLFxuICAgIFwibWtcIjogXCJNYWNlZG9uaWFcIixcbiAgICBcIm1sXCI6IFwiTWFsaVwiLFxuICAgIFwibW5cIjogXCJNb25nb2xpYVwiLFxuICAgIFwibW9cIjogXCJNYWNhdVwiLFxuICAgIFwibXJcIjogXCJNYXVyaXRhbmlhXCIsXG4gICAgXCJtc1wiOiBcIk1vbnRzZXJyYXRcIixcbiAgICBcIm10XCI6IFwiTWFsdGFcIixcbiAgICBcIm11XCI6IFwiTWF1cml0aXVzXCIsXG4gICAgXCJtd1wiOiBcIk1hbGF3aVwiLFxuICAgIFwibXhcIjogXCJNZXhpY29cIixcbiAgICBcIm15XCI6IFwiTWFsYXlzaWFcIixcbiAgICBcIm16XCI6IFwiTW96YW1iaXF1ZVwiLFxuICAgIFwibmFcIjogXCJOYW1pYmlhXCIsXG4gICAgXCJuZVwiOiBcIk5pZ2VyXCIsXG4gICAgXCJuZ1wiOiBcIk5pZ2VyaWFcIixcbiAgICBcIm5pXCI6IFwiTmljYXJhZ3VhXCIsXG4gICAgXCJubFwiOiBcIk5ldGhlcmxhbmRzXCIsXG4gICAgXCJub1wiOiBcIk5vcndheVwiLFxuICAgIFwibnBcIjogXCJOZXBhbFwiLFxuICAgIFwibnpcIjogXCJOZXcgWmVhbGFuZFwiLFxuICAgIFwib21cIjogXCJPbWFuXCIsXG4gICAgXCJwYVwiOiBcIlBhbmFtYVwiLFxuICAgIFwicGVcIjogXCJQZXJ1XCIsXG4gICAgXCJwZ1wiOiBcIlBhcHVhIE5ldyBHdWluZWFcIixcbiAgICBcInBoXCI6IFwiUGhpbGlwcGluZXNcIixcbiAgICBcInBrXCI6IFwiUGFraXN0YW5cIixcbiAgICBcInBsXCI6IFwiUG9sYW5kXCIsXG4gICAgXCJwdFwiOiBcIlBvcnR1Z2FsXCIsXG4gICAgXCJwd1wiOiBcIlBhbGF1XCIsXG4gICAgXCJweVwiOiBcIlBhcmFndWF5XCIsXG4gICAgXCJxYVwiOiBcIlFhdGFyXCIsXG4gICAgXCJyb1wiOiBcIlJvbWFuaWFcIixcbiAgICBcInJ1XCI6IFwiUnVzc2lhXCIsXG4gICAgXCJzYVwiOiBcIlNhdWRpIEFyYWJpYVwiLFxuICAgIFwic2JcIjogXCJTb2xvbWFuIElzbGFuZHNcIixcbiAgICBcInNjXCI6IFwiU2V5Y2hlbGxlc1wiLFxuICAgIFwic2VcIjogXCJTd2VkZW5cIixcbiAgICBcInNnXCI6IFwiU2luZ2Fwb3JlXCIsXG4gICAgXCJzaVwiOiBcIlNsb3ZlbmlhXCIsXG4gICAgXCJza1wiOiBcIlNsb3Zha2lhXCIsXG4gICAgXCJzbFwiOiBcIlNpZXJyYSBMZW9uZVwiLFxuICAgIFwic25cIjogXCJTZW5lZ2FsXCIsXG4gICAgXCJzb1wiOiBcIlNvbWFsaWFcIixcbiAgICBcInNyXCI6IFwiU3VyaW5hbWVcIixcbiAgICBcInN2XCI6IFwiRWwgU2FsdmFkb3JcIixcbiAgICBcInN6XCI6IFwiU3dhemlsYW5kXCIsXG4gICAgXCJ0ZFwiOiBcIkNoYWRcIixcbiAgICBcInRoXCI6IFwiVGhhaWxhbmRcIixcbiAgICBcInRqXCI6IFwiVGFqaWtpc3RhblwiLFxuICAgIFwidG1cIjogXCJUdXJrbWVuaXN0YW5cIixcbiAgICBcInRuXCI6IFwiVHVuaXNpYVwiLFxuICAgIFwidHJcIjogXCJUdXJrZXlcIixcbiAgICBcInR3XCI6IFwiVGFpd2FuXCIsXG4gICAgXCJ0elwiOiBcIlRhbnphbmlhXCIsXG4gICAgXCJ1YVwiOiBcIlVrcmFpbmVcIixcbiAgICBcInVnXCI6IFwiVWdhbmRhXCIsXG4gICAgXCJ1c1wiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICBcInV5XCI6IFwiVXJ1Z3VheVwiLFxuICAgIFwidXpcIjogXCJVemJla2lzdGFuXCIsXG4gICAgXCJ2ZVwiOiBcIlZlbmV6dWVsYVwiLFxuICAgIFwidmdcIjogXCJCcml0aXNoIFZpcmdpbiBJc2xhbmRzXCIsXG4gICAgXCJ2blwiOiBcIlZpZXRuYW1cIixcbiAgICBcInllXCI6IFwiWWVtZW5cIixcbiAgICBcInphXCI6IFwiU291dGggQWZyaWNhXCIsXG4gICAgXCJ6d1wiOiBcIlppbWJhYndlXCJcbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcInJlZ2lvbnNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwicmVnaW9uc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwiZXhhbXBsZVwiOiB7XG4gICAgICAgIFwiYXVcIjogXCJBdXN0cmFsaWFcIixcbiAgICAgICAgXCJkZVwiOiBcIkdlcm1hbnlcIixcbiAgICAgICAgXCJ1YVwiOiBcIlVrcmFpbmVcIixcbiAgICAgICAgXCJ1c1wiOiBcIlVuaXRlZCBTdGF0ZXNcIlxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBGZXRjaCByZWNvbW1lbmRhdGlvbnMgZm9yIGEgcG9kY2FzdFxuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX3JlY29tbWVuZGF0aW9uc19mb3JfcG9kY2FzdCoqXG5cbkZldGNoIHVwIHRvIDggcG9kY2FzdCByZWNvbW1lbmRhdGlvbnMgYmFzZWQgb24gdGhlIGdpdmVuIHBvZGNhc3QgaWQuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX3JlY29tbWVuZGF0aW9uc19mb3JfcG9kY2FzdChpZD0nMjUyMTJhYzNjNTMyNDBhODgwZGQ1MDMyZTU0NzA0N2InKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItcG9kY2FzdHMtaWQtcmVjb21tZW5kYXRpb25zKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInJlY29tbWVuZGF0aW9uc1wiOiBbXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjgwNTUzNWUxZGU1YTRjNzk5MWY0ZjMyM2U4MmNlOWU3XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vYnJ5YW5rcmFtZXIubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiYnJ5YW4ua3JhbWVyQHB1cmVtYXR0ZXIuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTlpY25saGJtdHlZVzFsY2k1c2FXSnplVzR1WTI5dEwzSnpjdz09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiYnJ5YW5rcmFtZXJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYnJ5YW4ta3JhbWVyLXNob3ctYnJ5YW4ta3JhbWVyLUJyME1fSWF5S2MzLTBTQ2w5MVpULWJVLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgQnJ5YW4gS3JhbWVyIFNob3dcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHA6Ly9icnlhbmtyYW1lci5saWJzeW4uY29tL3BvZGNhc3Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICA4OCxcbiAgICAgICAgOTAsXG4gICAgICAgIDkzLFxuICAgICAgICA5N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEwNzg2NTUxMTEsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkJyeWFuIEtyYW1lclwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJyeWFuLWtyYW1lci1zaG93LWJyeWFuLWtyYW1lci1FN284MHR5cHZfYi0wU0NsOTFaVC1iVS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkpvaW4gdXMgYXMgQnJ5YW4gS3JhbWVyIGRlY29uc3RydWN0cyBodW1hbiBiZWhhdmlvciBhbmQgZGlncyBkZWVwIHRvIHNoYXJlIHRhY3RpY3MsIHRvb2xzIGFuZCB0cmlja3MgeW91IGNhbiB1c2UgZXZlcnkgZGF5IHRvIGhlbHAgeW91IHJlYWNoIHBlYWsgcGVyZm9ybWFuY2UuIEluIGVhY2ggc2hvdywgQnJ5YW4gaW50ZXJ2aWV3cyBoaWdoLXByb2ZpbGUgZ3Vlc3RzIGhpdHRpbmcgY29uc2lzdGVudCBob21lIHJ1bnMgaW4gYnVzaW5lc3MsIGVudHJlcHJlbmV1cmlhbGlzbSBtYXJrZXRpbmcgYW5kIHNvY2lhbC4gQnJ5YW4gaXMgYSBURUQgc3BlYWtlciwgVVNBIFRvZGF5IGJlc3Qtc2VsbGluZyBhdXRob3IsIGFuZCBDRU8gd2hvIGNvbnN1bHRzIEZvcnR1bmUgNTAwIGNsaWVudHMgc3VjaCBhcyBJQk0sIENpc2NvLCBORkwsIEhhcnZhcmQgVW5pdmVyc2l0eSBhbmQgTkFTQS4gSGUncyBrbm93biBmb3IgaGlzIGJvb2tzIEh1bWFuIHRvIEh1bWFuLCAjSDJIIGFuZCBTaGFyZW9sb2d5LiBGb3JiZXMgY2FsbHMgaGltIGEgXFxcIlplbiBtYXN0ZXIgdG8gZGlnaXRhbCBtYXJrZXRlcnMuXFxcIlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMzcsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDY0LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84MDU1MzVlMWRlNWE0Yzc5OTFmNGYzMjNlODJjZTllNy9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxNjk1LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjk5ZWIzNTg2NGUyMjQyYTQ4MGY0NzA5ZGVkOTQ3MWI1XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTAyMjg3MjAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDUzMjQ2NTM1MDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDMyNyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMi41JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNzA2MGI1ZDQ4YjM0NDBiYTk2NjhmOWFmMmE5MGZhN2ZcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly93d3cuc3ByZWFrZXIuY29tL3Nob3cvNDkyMDg0NC9lcGlzb2Rlcy9mZWVkXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBudWxsLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vd3d3Lmdvb2dsZS5jb20vcG9kY2FzdHM/ZmVlZD1hSFIwY0hNNkx5OWhibU5vYjNJdVptMHZjeTgwWmpKak5qWm1NQzl3YjJSallYTjBMM0p6Y3c9PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNjJzb3FHUGhuWUpCUnJQMnZTQWs2YlwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdGltLWZlcnJpc3Mtc2hvdy01LW1pbnV0ZS1wb2RjYXN0LW1wcU1hNzN1MDhELW1ZeDhMY1NraHoxLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgVGltIEZlcnJpc3MgU2hvdyB8IDUgbWludXRlIHBvZGNhc3Qgc3VtbWFyaWVzXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL3d3dy5zcHJlYWtlci5jb20vc2hvdy90aGUtdGltLWZlcnJpc3Mtc2hvdy01LW1pbnV0ZS1wb2RjYXN0LXN1P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgMTgxLFxuICAgICAgICAxMTFcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxNTU2Mjg2NjQzLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCI1IG1pbnV0ZSBwb2RjYXN0IHN1bW1hcmllc1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXRpbS1mZXJyaXNzLXNob3ctNS1taW51dGUtcG9kY2FzdC1YTXVOOHEySm9yYi1tWXg4TGNTa2h6MS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjUgbWludXRlIHN1bW1hcmllcyBvZiBUaGUgVGltIEZlcnJpc3MgU2hvdydzIHBvZGNhc3QgZXBpc29kZXMuIEdldCB0aGUgYmVzdCBpbnNpZ2h0cyBhbmQgaWRlYXMgaW4gbXVjaCBsZXNzIHRpbWUsIG1vcmUgYXQgb3dsdGFpbC5jb208YnIgLz48YnIgLz5Xcml0dGVuIHN1bW1hcmllczogPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cub3dsdGFpbC5jb20vc3VtbWFyaWVzLzc1NTUzLXRoZS10aW0tZmVycmlzcy1zaG93XFxcIiByZWw9XFxcIm5vb3BlbmVyXFxcIj5odHRwczovL3d3dy5vd2x0YWlsLmNvbS9zdW1tYXJpZXMvNzU1NTMtdGhlLXRpbS1mZXJyaXNzLXNob3c8L2E+PGJyIC8+PGJyIC8+T3RoZXIgcG9kY2FzdCBzdW1tYXJpZXMgaW4gQXBwbGUgUG9kY2FzdHM6IDxhIGhyZWY9XFxcImh0dHA6Ly9iaXQubHkvNS1taW4tc3VtbWFyaWVzXFxcIiByZWw9XFxcIm5vb3BlbmVyXFxcIj5odHRwOi8vYml0Lmx5LzUtbWluLXN1bW1hcmllczwvYT48YnIgLz48YnIgLz5PdGhlciBwb2RjYXN0IHN1bW1hcmllcyBJbiBvdGhlciBhcHBzLCBzZWFyY2ggJ3BvZGNhc3Qgc3VtbWFyaWVzJy48YnIgLz48YnIgLz5UaW0gRmVycmlzcyBpcyBhIHNlbGYtZXhwZXJpbWVudGVyIGFuZCBiZXN0c2VsbGluZyBhdXRob3IsIGJlc3Qga25vd24gZm9yIFRoZSA0LUhvdXIgV29ya3dlZWssIHdoaWNoIGhhcyBiZWVuIHRyYW5zbGF0ZWQgaW50byA0MCsgbGFuZ3VhZ2VzLiBOZXdzd2VlayBjYWxscyBoaW0gXFxcInRoZSB3b3JsZCdzIGJlc3QgaHVtYW4gZ3VpbmVhIHBpZyxcXFwiIGFuZCBUaGUgTmV3IFlvcmsgVGltZXMgY2FsbHMgaGltIFxcXCJhIGNyb3NzIGJldHdlZW4gSmFjayBXZWxjaCBhbmQgYSBCdWRkaGlzdCBtb25rLlxcXCIgSW4gdGhpcyBzaG93LCBoZSBkZWNvbnN0cnVjdHMgd29ybGQtY2xhc3MgcGVyZm9ybWVycyBmcm9tIGVjbGVjdGljIGFyZWFzIChpbnZlc3RpbmcsIGNoZXNzLCBwcm8gc3BvcnRzLCBldGMuKSwgZGlnZ2luZyBkZWVwIHRvIGZpbmQgdGhlIHRvb2xzLCB0YWN0aWNzLCBhbmQgdHJpY2tzIHRoYXQgbGlzdGVuZXJzIGNhbiB1c2UuXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiAzMyxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMTIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzcwNjBiNWQ0OGIzNDQwYmE5NjY4ZjlhZjJhOTBmYTdmL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDIyMSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCI5MTYzZmU4ZmRmYzM0NzEwYWY4ZDQxYjU3NTAyM2UwN1wiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTYyNTg4MTA0NDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTYxOTIyOTYwMDAxMSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxNjUsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmOWQ1ODg1ZDdjZjc0ODVkODkxZTgyZGVhMzE4NjY0MFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3Jzcy5hcnQxOS5jb20vaG93LWktYnVpbHQtdGhpc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJpd29uZGVyQHdvbmRlcnkuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl5YzNNdVlYSjBNVGt1WTI5dEwyaHZkeTFwTFdKMWFXeDBMWFJvYVhNPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNkU3MDlIUkg3WGFpWnJNZmd0TkN1blwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJIb3dJQnVpbHRUaGlzXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiaG93aWJ1aWx0dGhpc1wiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2hvdy1pLWJ1aWx0LXRoaXMtd2l0aC1ndXktcmF6LWd1eS1yYXotd29uZGVyeS03a3JwVnRjQ3pNQi1VQzBxSDIzaVA5VC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiSG93IEkgQnVpbHQgVGhpcyB3aXRoIEd1eSBSYXpcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd29uZGVyeS5jb20vc2hvd3MvaG93LWktYnVpbHQtdGhpcz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTcxLFxuICAgICAgICA2NyxcbiAgICAgICAgOTMsXG4gICAgICAgIDEyNyxcbiAgICAgICAgMTA2LFxuICAgICAgICA5NCxcbiAgICAgICAgMTczLFxuICAgICAgICA5MCxcbiAgICAgICAgMTU3XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTE1MDUxMDI5NyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiR3V5IFJheiB8IFdvbmRlcnlcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2hvdy1pLWJ1aWx0LXRoaXMtd2l0aC1ndXktcmF6LWd1eS1yYXotd29uZGVyeS0tdDM4S0ZJcWxBaS1VQzBxSDIzaVA5VC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcbiAgICAgIDxwPkd1eSBSYXogZGl2ZXMgaW50byB0aGUgc3RvcmllcyBiZWhpbmQgc29tZSBvZiB0aGUgd29ybGQncyBiZXN0IGtub3duIGNvbXBhbmllcy4gPGVtPkhvdyBJIEJ1aWx0IFRoaXM8L2VtPiB3ZWF2ZXMgYSBuYXJyYXRpdmUgam91cm5leSBhYm91dCBpbm5vdmF0b3JzLCBlbnRyZXByZW5ldXJzIGFuZCBpZGVhbGlzdHNcXHUyMDE0YW5kIHRoZSBtb3ZlbWVudHMgdGhleSBidWlsdC4gT3JkZXIgdGhlIDxlbT5Ib3cgSSBCdWlsdCBUaGlzPC9lbT4gYm9vayBhdCBodHRwczovL3d3dy5ndXlyYXouY29tPC9wPlxcbiAgICBcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDg1LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA0MzMsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2Y5ZDU4ODVkN2NmNzQ4NWQ4OTFlODJkZWEzMTg2NjQwL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI4OTAsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiNzdkMWNkOGQwOTZhNDM0ZWEyYzdhNmQ4Y2MyNzZkNzBcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg3MzMwMDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0NzI4MjgxNjA0MjksXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogODMsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmZTY4NjQ2MjgwNjY0MjBjODEwM2M5NGU5MWU3MmViM1wiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2FuY2hvci5mbS9zL2YzOWE4NjQvcG9kY2FzdC9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwianVzdGluLnNjaG5lbGxAdmF5bmVybWVkaWEuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiaHR0cHM6Ly9tZWRpdW0uY29tL0BnYXJ5dmVlXCIsXG4gICAgICAgIFwidXJsMlwiOiBcImh0dHBzOi8vd3d3LnNuYXBjaGF0LmNvbS9hZGQvZ2FyeXZlZVwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNEb3ZMMkZ6YTJkaGNubDJaV1V1WjJGeWVYWmxaUzVzYVdKemVXNXdjbTh1WTI5dEwzSnpjdz09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy82U1pWc1BJeFBmVnM2YWF2cU0xcGVZXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS91c2VyL2dhcnl2YXluZXJjaHVrXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlua2VkaW4uY29tL2luL2dhcnl2YXluZXJjaHVrL1wiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiZ2FyeXZlZVwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcImdhcnlcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcImdhcnl2ZWVcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWdhcnl2ZWUtYXVkaW8tZXhwZXJpZW5jZS1nYXJ5LXZheW5lcmNodWstM2RDcXhCUVpTWDktWDBEZm03T19vM3kuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBHYXJ5VmVlIEF1ZGlvIEV4cGVyaWVuY2VcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHA6Ly93d3cuZ2FyeXZheW5lcmNodWsuY29tP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgMTcxLFxuICAgICAgICA5MyxcbiAgICAgICAgOTgsXG4gICAgICAgIDE3MyxcbiAgICAgICAgMTU3LFxuICAgICAgICA5NyxcbiAgICAgICAgNzgsXG4gICAgICAgIDE2OSxcbiAgICAgICAgMTI3LFxuICAgICAgICA5NVxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDkyODE1OTY4NCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiR2FyeSBWYXluZXJjaHVrXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZ2FyeXZlZS1hdWRpby1leHBlcmllbmNlLWdhcnktdmF5bmVyY2h1ay1HNnpSMjhjV3ZCMS1YMERmbTdPX28zeS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlbGNvbWUgdG8gVGhlIEdhcnlWZWUgQXVkaW8gRXhwZXJpZW5jZSwgaG9zdGVkIGJ5IGVudHJlcHJlbmV1ciwgQ0VPLCBpbnZlc3RvciwgY29udGVudCBjcmVhdG9yLCBhbmQgcHVibGljIHNwZWFrZXIgR2FyeSBWYXluZXJjaHVrLiBPbiB0aGlzIHBvZGNhc3QgeW91J2xsIGZpbmQgYSBtaXggb2YgdGhlICNBc2tHYXJ5VmVlIHNob3cgZXBpc29kZXMsIGtleW5vdGUgc3BlZWNoZXMgb24gbWFya2V0aW5nIGFuZCBidXNpbmVzcywgc2VnbWVudHMgZnJvbSBteSBEQUlMWVZFRSB2aWRlbyBzZXJpZXMsIGludGVydmlld3MgYW5kIGZpcmVzaWRlIGNoYXRzIEkndmUgZ2l2ZW4sIGFzIHdlbGwgYXMgbmV3IGFuZCBjdXJyZW50IHRob3VnaHRzIEkgcmVjb3JkIG9yaWdpbmFsbHkgZm9yIHRoaXMgYXVkaW8gZXhwZXJpZW5jZSFcXG5cXG5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDgyLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAyMzA4LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mZTY4NjQ2MjgwNjY0MjBjODEwM2M5NGU5MWU3MmViMy9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxODQ0LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHRydWUsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiNWE5MDU0YmY4MTY5NDg4YTg2MzM2NmMwYzA3MDVmMWRcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg5MTYwNTAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0MTIxNzkyMDIyOTAsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjMsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI5ZjZlZTUxYWRmYjA0NmNjOTkzNjQ5MGFiZDI2NjZjZVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3Jzcy5hcnQxOS5jb20vdGhlLXNjaG9vbC1vZi1ncmVhdG5lc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwicG9kY2FzdEBzY2hvb2xvZmdyZWF0bmVzcy5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXljM011WVhKME1Ua3VZMjl0TDNSb1pTMXpZMmh2YjJ3dGIyWXRaM0psWVhSdVpYTnpcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzA3R1FoT1pib0VaT0UxeXNuRkxpcFRcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3VzZXIvbGV3aXNob3dlc1wiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwibGV3aXNob3dlc1wiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcImxld2lzaG93ZXNcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtc2Nob29sLW9mLWdyZWF0bmVzcy1sZXdpcy1ob3dlcy1PMnVqdGRxMzRuNy1IMXpkcWxqaXhicC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIFNjaG9vbCBvZiBHcmVhdG5lc3NcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHA6Ly9sZXdpc2hvd2VzLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgOTMsXG4gICAgICAgIDg4LFxuICAgICAgICA2NyxcbiAgICAgICAgOTEsXG4gICAgICAgIDExMSxcbiAgICAgICAgMTgxLFxuICAgICAgICAxNzEsXG4gICAgICAgIDk0LFxuICAgICAgICA5NyxcbiAgICAgICAgODksXG4gICAgICAgIDc3LFxuICAgICAgICA3OCxcbiAgICAgICAgOTBcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA1OTYwNDc0OTksXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkxld2lzIEhvd2VzXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtc2Nob29sLW9mLWdyZWF0bmVzcy1sZXdpcy1ob3dlcy1DUzV5Sldlb01wcS1IMXpkcWxqaXhicC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcbiAgICAgIDxwPkxld2lzIEhvd2VzIGlzIGEgTmV3IFlvcmsgVGltZXMgYmVzdC1zZWxsaW5nIGF1dGhvciwgMnggQWxsLUFtZXJpY2FuIGF0aGxldGUsIGtleW5vdGUgc3BlYWtlciwgYW5kIGVudHJlcHJlbmV1ci4gVGhlIFNjaG9vbCBvZiBHcmVhdG5lc3Mgc2hhcmVzIGluc3BpcmluZyBpbnRlcnZpZXdzIGZyb20gdGhlIG1vc3Qgc3VjY2Vzc2Z1bCBwZW9wbGUgb24gdGhlIHBsYW5ldFxcdTIwMTR3b3JsZC1yZW5vd25lZCBsZWFkZXJzIGluIGJ1c2luZXNzLCBlbnRlcnRhaW5tZW50LCBzcG9ydHMsIHNjaWVuY2UsIGhlYWx0aCwgYW5kIGxpdGVyYXR1cmVcXHUyMDE0dG8gaW5zcGlyZSBZT1UgdG8gdW5sb2NrIHlvdXIgaW5uZXIgZ3JlYXRuZXNzIGFuZCBsaXZlIHlvdXIgYmVzdCBsaWZlLjwvcD5cXG4gICAgXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA4MCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMTI5OCxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOWY2ZWU1MWFkZmIwNDZjYzk5MzY0OTBhYmQyNjY2Y2UvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMzAyMixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkNzIxZWUxNmE2NjA0NzQxODE4Mzg0ZGI1ZWYxYTlhZFwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODkwNTIwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTM1ODkyODAwMTI3NCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA1NSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImE0MDliOGJiOTNmNDQwNTRhN2JlMmQ2YjMwODQzODk5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZW50cmVwcmVuZXVyb25maXJlLmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcIkpvaG5ARW50cmVwcmVuZXVyT25GaXJlLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5bGJuUnlaWEJ5Wlc1bGRYSnZibVpwY21VdWJHbGljM2x1TG1OdmJTOXljM009XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8yNXdnSHhyUVkyZTdXTmVWNFV0RUNJXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDWGZ6cGxpQWZkalBhcmF3SmxqSG8yZ1wiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiam9obmxlZWR1bWFzXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiam9obmxlZWR1bWFzMVwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJodHRwczovL211c2ljLmFtYXpvbi5jb20vcG9kY2FzdHMvNDcyOGE3ZmMtNzMxZi00YjE4LTk3MWItODViMGI4YzJlNzg0L2VudHJlcHJlbmV1cnMtb24tZmlyZVwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJqb2hubGVlZHVtYXNcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZW50cmVwcmVuZXVycy1vbi1maXJlLWpvaG4tbGVlLWR1bWFzLW9mLXJtUnZubEUyTHA5LTFXT2hUN3U2VlFiLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJFbnRyZXByZW5ldXJzIG9uIEZpcmVcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmVvZmlyZS5jb20vP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzEsXG4gICAgICAgIDY3LFxuICAgICAgICA5MyxcbiAgICAgICAgMTczLFxuICAgICAgICAxNTcsXG4gICAgICAgIDE2OSxcbiAgICAgICAgODgsXG4gICAgICAgIDExMSxcbiAgICAgICAgOTAsXG4gICAgICAgIDk0LFxuICAgICAgICA5N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDU2NDAwMTYzMyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSm9obiBMZWUgRHVtYXMgb2YgRU9GaXJlXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9lbnRyZXByZW5ldXJzLW9uLWZpcmUtam9obi1sZWUtZHVtYXMtb2YtS2RWY0hBcnhOMUUtMVdPaFQ3dTZWUWIuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiB0cnVlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkpvaG4gTGVlIER1bWFzIGlzIHRoZSBmb3VuZGVyIGFuZCBob3N0IG9mIHRoZSBhd2FyZCB3aW5uaW5nIHBvZGNhc3QsIEVudHJlcHJlbmV1cnMgT24gRmlyZS4gV2l0aCBvdmVyIDEwMCBtaWxsaW9uIGxpc3RlbnMgb2YgaGlzIDMwMDArIGVwaXNvZGVzLCBKTEQgaGFzIHR1cm5lZCBFbnRyZXByZW5ldXJzIE9uIEZpcmUgaW50byBhIG1lZGlhIGVtcGlyZSB0aGF0IGdlbmVyYXRlcyBvdmVyIGEgbWlsbGlvbiBsaXN0ZW5zIGV2ZXJ5IG1vbnRoIGFuZCA3LWZpZ3VyZXMgb2YgTkVUIGFubnVhbCByZXZlbnVlIDgteWVhcnMgaW4gYSByb3cuIEhpcyBmaXJzdCB0cmFkaXRpb25hbGx5IHB1Ymxpc2hlZCBib29rLCBUaGUgQ29tbW9uIFBhdGggdG8gVW5jb21tb24gU3VjY2VzcyBpcyB0aGUgbW9kZXJuIGRheSB2ZXJzaW9uIG9mIFRoaW5rIGFuZCBHcm93IFJpY2ggd2l0aCBhIHJldm9sdXRpb25hcnkgMTctc3RlcCByb2FkbWFwIHRvIGZpbmFuY2lhbCBmcmVlZG9tIGFuZCBmdWxmaWxsbWVudC4gTGVhcm4gbW9yZSBhdCBVbmNvbW1vblN1Y2Nlc3NCb29rLmNvbVwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDMwNjAsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2E0MDliOGJiOTNmNDQwNTRhN2JlMmQ2YjMwODQzODk5L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE4MjMsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiOTNlYTMyNmY4MzExNDAyZGE4ZDk1OWFlZTdiNDAyMThcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg5MTA2MDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDEzNDgyOTcyMDMwNDAsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjQsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJjYmE2Y2YwNmE4NzE0MGJjOTIyNmVmYzhkNTMwZWQ0ZFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwOi8vam9lcm9nYW5leHAuam9lcm9nYW4ubGlic3lucHJvLmNvbS9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiam9lQGpvZXJvZ2FuLm5ldFwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjRG92TDJwdlpYSnZaMkZ1Wlhod0xtcHZaWEp2WjJGdUxteHBZbk41Ym5CeWJ5NWpiMjB2Y25OelwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNHJPb0o2RWdyZjhLMklyeXd6d09Na1wiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vY2hhbm5lbC9VQ3pRVVAxcW9XRG9FYm1zUXh2ZGp4Z1FcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcImpvZXJvZ2FuXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiSk9FUk9HQU5cIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcImpvZXJvZ2FuXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1qb2Utcm9nYW4tZXhwZXJpZW5jZS1qb2Utcm9nYW4tYUVueU1RZXQ2aWctc19NTDVRcVBpMHYuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBKb2UgUm9nYW4gRXhwZXJpZW5jZVwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cuam9lcm9nYW4uY29tP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAyMTYsXG4gICAgICAgIDE3MyxcbiAgICAgICAgNzcsXG4gICAgICAgIDEzMyxcbiAgICAgICAgMTI5LFxuICAgICAgICAxMjIsXG4gICAgICAgIDk5LFxuICAgICAgICA4OCxcbiAgICAgICAgMTI3LFxuICAgICAgICA5M1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDM2MDA4NDI3MixcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSm9lIFJvZ2FuXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtam9lLXJvZ2FuLWV4cGVyaWVuY2Utam9lLXJvZ2FuLVEyeDVIeXdhUy1PLXNfTUw1UXFQaTB2LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ29uZHVpdCB0byB0aGUgR2FpYW4gTWluZFwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogOTcsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDEsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2NiYTZjZjA2YTg3MTQwYmM5MjI2ZWZjOGQ1MzBlZDRkL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDczNTUsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogdHJ1ZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkYjgzYTY3ZTE4M2E0Y2NlOTU5NjdmM2FmZTcxM2YyY1wiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTUyNDY5NTgzMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTUyNDY5NTgzMDAwMCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAwLFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjAxJVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNDk5NjYxZjM1ODlmNDJhYWExNTMyNjczZTBlMGFlZGZcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9yc3MuYXJ0MTkuY29tL3NtYXJ0LXBhc3NpdmUtaW5jb21lLXBvZGNhc3RcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwicG9kY2FzdHNAdGVhbXNwaS5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXljM011WVhKME1Ua3VZMjl0TDNOdFlYSjBMWEJoYzNOcGRtVXRhVzVqYjIxbExYQnZaR05oYzNRPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvN3dqdjVNUkNYV1hJbXFURmhjdWZMeVwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vdXNlci9zbWFydHBhc3NpdmVpbmNvbWVcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcInBhdGZseW5uXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwic21hcnRwYXNzaXZlaW5jb21lXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcImh0dHBzOi8vbXVzaWMuYW1hem9uLmNvbS9wb2RjYXN0cy8zNDEyODJhMS1jYmE5LTQxODgtYWE1OC1lMDlhNTFjY2FhODcvdGhlLXNtYXJ0LXBhc3NpdmUtaW5jb21lLW9ubGluZS1idXNpbmVzcy1hbmQtYmxvZ2dpbmctcG9kY2FzdFwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJwYXRmbHlublwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtc21hcnQtcGFzc2l2ZS1pbmNvbWUtb25saW5lLWJ1c2luZXNzLWpOLWFSNnFkWXVvLU5EYTYteVNwOWt3LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgU21hcnQgUGFzc2l2ZSBJbmNvbWUgT25saW5lIEJ1c2luZXNzIGFuZCBCbG9nZ2luZyBQb2RjYXN0XCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwczovL2FydDE5LmNvbS9zaG93cy9zbWFydC1wYXNzaXZlLWluY29tZS1wb2RjYXN0P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxNzMsXG4gICAgICAgIDkzLFxuICAgICAgICAxNzEsXG4gICAgICAgIDE0NCxcbiAgICAgICAgMTU3LFxuICAgICAgICA5NyxcbiAgICAgICAgOTgsXG4gICAgICAgIDY3LFxuICAgICAgICA5NCxcbiAgICAgICAgMTExLFxuICAgICAgICAxMTUsXG4gICAgICAgIDEyN1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDM4MzA4NDAwMSxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiUGF0IEZseW5uXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtc21hcnQtcGFzc2l2ZS1pbmNvbWUtb25saW5lLWJ1c2luZXNzLXNGMjRvd1FIWVd5LU5EYTYteVNwOWt3LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxuICAgICAgUGF0IEZseW5uIGZyb20gVGhlIFNtYXJ0IFBhc3NpdmUgSW5jb21lIEJsb2cgcmV2ZWFscyBhbGwgb2YgaGlzIG9ubGluZSBidXNpbmVzcyBhbmQgYmxvZ2dpbmcgc3RyYXRlZ2llcywgaW5jb21lIHNvdXJjZXMgYW5kIGtpbGxlciBtYXJrZXRpbmcgdGlwcyBhbmQgdHJpY2tzIHNvIHlvdSBjYW4gYmUgYWhlYWQgb2YgdGhlIGN1cnZlIHdpdGggeW91ciBvbmxpbmUgYnVzaW5lc3Mgb3IgYmxvZy4gRGlzY292ZXIgaG93IHlvdSBjYW4gY3JlYXRlIG11bHRpcGxlIHBhc3NpdmUgaW5jb21lIHN0cmVhbXMgdGhhdCB3b3JrIGZvciB5b3Ugc28gdGhhdCB5b3UgY2FuIGhhdmUgdGhlIHRpbWUgYW5kIGZyZWVkb20gdG8gZG8gd2hhdCB5b3UgbG92ZSwgd2hldGhlciBpdCdzIHRyYXZlbGluZyB0aGUgd29ybGQsIG9yIGp1c3QgbGl2aW5nIGNvbWZvcnRhYmx5IGF0IGhvbWUuIFNpbmNlIDIwMDgsIGhlJ3MgYmVlbiBzdXBwb3J0aW5nIGhpcyBmYW1pbHkgd2l0aCBoaXMgbWFueSBvbmxpbmUgYnVzaW5lc3NlcywgYW5kIGhlJ3MgYmVlbiBvcGVubHkgc2hhcmluZyBoaXMgd2lucywgaGlzIGxvc3NlcywgYW5kIGFsbCB0aGUgbGVzc29ucyBpbiBiZXR3ZWVuIHdpdGggdGhlIGNvbW11bml0eSBvZiBlbmVyZ2V0aWMgYnV0IGh1bWJsZSBlbnRyZXByZW5ldXJzIHdobyBmb2xsb3cgaGltLiBTZWxmLXByb2NsYWltZWQgXFxcImNyYXNoIHRlc3QgZHVtbXkgb2Ygb25saW5lIGJ1c2luZXNzXFxcIiwgeW91J2xsIGxlYXJuIGFib3V0IGJ1aWxkaW5nIGF1dGhvcml0eSBvbmxpbmUsIGVtYWlsIG1hcmtldGluZywgYnVpbGRpbmcgYSB0ZWFtIGFuZCBvdXRzb3VyY2luZywgY29udGVudCBtYXJrZXRpbmcsIHBvZGNhc3RpbmcsIHNlYXJjaCBlbmdpbmUgb3B0aW1pemF0aW9uLCBuaWNoZSBzaXRlcywgc29jaWFsIG1lZGlhIHN0cmF0ZWdpZXMsIGhvdyB0byBnZXQgbW9yZSB0cmFmZmljLCBjcmVhdGluZyBvbmxpbmUgY291cnNlcywgYWZmaWxpYXRlIG1hcmtldGluZywgYW5kIHByb2R1Y3Rpdml0eSB0aXBzIHNvIHRoYXQgeW91IGNyZWF0ZSBzb21ldGhpbmcgYW1hemluZyB3aXRob3V0IGJ1cm5pbmcgeW91cnNlbGYgb3V0LiBJdCdzIGEgbWl4IG9mIGludGVydmlld3MsIHNwZWNpYWwgY28taG9zdHMgYW5kIHNvbG8gc2hvd3MgZnJvbSBQYXQgeW91J3JlIG5vdCBnb2luZyB0byB3YW50IHRvIG1pc3MuIEhpdCBzdWJzY3JpYmUsIGFuZCBnZXQgcmVhZHkgdG8gY2hhbmdlIHlvdXIgbGlmZS5cXG4gICAgXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MixcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogNjA5LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80OTk2NjFmMzU4OWY0MmFhYTE1MzI2NzNlMGUwYWVkZi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyNjI2LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcImM0Yzk0ZWZkMWUxYTQ1NTM5MDJkNzg3NGU5YzAxMzcwXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4OTA1MjAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxMjc5NTUxNjAwNTk0LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDg0LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgfVxuICBdXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwicmVjb21tZW5kYXRpb25zXCJcbiAgXSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInJlY29tbWVuZGF0aW9uc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicnNzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9zdzd4Ny5saWJzeW4uY29tL3Jzc1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJTUyB1cmwgb2YgdGhpcyBwb2RjYXN0LiBUaGlzIGZpZWxkIGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgICAgXCJlcGlzb2RpY1wiLFxuICAgICAgICAgICAgICBcInNlcmlhbFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB0eXBlIG9mIHRoaXMgcG9kY2FzdCAtIGVwaXNvZGljIG9yIHNlcmlhbC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlbWFpbFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImhlbGxvQGV4YW1wbGUuY29tXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVtYWlsIG9mIHRoaXMgcG9kY2FzdCdzIHByb2R1Y2VyLiBUaGlzIGZpZWxkIGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJ1cmwxXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInVybDJcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidXJsM1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJnb29nbGVfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXljM011WVhKME1Ua3VZMjl0TDJwdmFHNHRjMjlzYjIxdmJpMXlaWEJ2Y25SelwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHb29nbGUgUG9kY2FzdHMgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInNwb3RpZnlfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8yclFKVVA5WTNIeGVtaVczSkh0OVdWXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNwb3RpZnkgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInlvdXR1YmVfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9zdzd4N1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJZb3VUdWJlIHVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJsaW5rZWRpbl91cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJMaW5rZWRJbiB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlQ2hhdCB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwic3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGF0cmVvbiB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU1c3eDdwb2RjYXN0XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlR3aXR0ZXIgdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGYWNlYm9vayB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL211c2ljLmFtYXpvbi5jb20vcG9kY2FzdHMvNmZjNmQ2ODMtOWVmMy00ODUwLTljMzUtOGU4YjFhNDJhMTQ3L3RoZS1sb2NrLXNwb3J0c2Nhc3RcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW1hem9uIE11c2ljIHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnN0YWdyYW0gdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJTdGFyIFdhcnMgN3g3IHwgU3RhciBXYXJzIE5ld3MsIEludGVydmlld3MsIGFuZCBNb3JlIVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJjb3VudHJ5XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBjb3VudHJ5IHdoZXJlIHRoaXMgcG9kY2FzdCBpcyBwcm9kdWNlZC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ3ZWJzaXRlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cDovL3N3N3g3LmNvbS9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZWJzaXRlIHVybCBvZiB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGFuZ3VhZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJFbmdsaXNoXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGxhbmd1YWdlIG9mIHRoaXMgcG9kY2FzdC4gWW91IGNhbiBnZXQgYWxsIHN1cHBvcnRlZCBsYW5ndWFnZXMgZnJvbSBgR0VUIC9sYW5ndWFnZXNgLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImdlbnJlX2lkc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdlbnJlIGlkcy5cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBbXG4gICAgICAgICAgICAgIDEzOCxcbiAgICAgICAgICAgICAgODYsXG4gICAgICAgICAgICAgIDE2MCxcbiAgICAgICAgICAgICAgNjgsXG4gICAgICAgICAgICAgIDgyLFxuICAgICAgICAgICAgICAxMDAsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpdHVuZXNfaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDg5NjM1NDYzOCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJpVHVuZXMgaWQgZm9yIHRoaXMgcG9kY2FzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJQbGFuZXQgQnJvYWRjYXN0aW5nXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yayAoMzAweDMwMCkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXNfY2xhaW1lZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBjbGFpbWVkIGJ5IGl0cyBwcm9kdWNlciBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHA+VGhlIFN0YXIgV2FycyA3eDcgUG9kY2FzdCBpcyBSZWJlbC1yb3VzaW5nIGZ1biBmb3IgZXZlcnlkYXkgSmVkaSwgYmV0d2VlbiA3IGFuZCAxNCBtaW51dGVzIGEgZGF5LCA3IGRheXMgYSB3ZWVrLiBKb2luIGhvc3QgQWxsZW4gVm9pdm9kIGZvciBTdGFyIFdhcnMgbmV3cywgaGlzdG9yeSwgaW50ZXJ2aWV3cywgdHJpdmlhLCBhbmQgZGVlcCBkaXZlcyBpbnRvIHRoZSBTdGFyIFdhcnMgc3RvcnkgYXMgdG9sZCBpbiBtb3ZpZXMsIGJvb2tzLCBjb21pY3MsIGdhbWVzLCBjYXJ0b29ucywgYW5kIG1vcmUuIFN1YnNjcmliZSBub3cgZm9yIHlvdXIgZGFpbHkgZG9zZSBvZiBTdGFyIFdhcnMgam95LiBJdCdzIGRlc3RpbnkgdW5sZWFzaGVkITwvcD5cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdG1sIG9mIHRoaXMgZXBpc29kZSdzIGZ1bGwgZGVzY3JpcHRpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwiZ3Vlc3RzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGd1ZXN0cy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImNvaG9zdHNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgY29ob3N0cy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInNwb25zb3JzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIHNwb25zb3JzLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNyb3NzIHByb21vdGlvbiBvcHBvcnR1bml0aWVzIHdpdGggb3RoZXIgcG9kY2FzdHMuXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidG90YWxfZXBpc29kZXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDMyNCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb3RhbCBudW1iZXIgb2YgZXBpc29kZXMgaW4gdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBwb2RjYXN0IG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTI5MSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdmVyYWdlIGF1ZGlvIGxlbmd0aCBvZiBhbGwgZXBpc29kZXMgb2YgdGhpcyBwb2RjYXN0LiBJbiBzZWNvbmRzLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGNvbnRhaW5zIGV4cGxpY2l0IGxhbmd1YWdlLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiZDA1NzA5MmU1N2NjNGNlZDgwZTBlZmFhMTk2NTkzZDlcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgaWQgb2YgdGhlIG1vc3QgcmVjZW50bHkgcHVibGlzaGVkIGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGVwaXNvZGUgbWV0YWRhdGEgdmlhIGBHRVQgL2VwaXNvZGVzL3tpZH1gLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTU1NzQ5OTc3MDAwMCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcHVibGlzaGVkIGRhdGUgb2YgdGhlIGxhdGVzdCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdC4gSW4gbWlsbGlzZWNvbmRzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE0NzA2Njc5MDIwMDAsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHB1Ymxpc2hlZCBkYXRlIG9mIHRoZSBvbGRlc3QgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QuIEluIG1pbGxpc2Vjb25kc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE2OCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIb3cgZnJlcXVlbnRseSBkb2VzIHRoaXMgcG9kY2FzdCByZWxlYXNlIGEgbmV3IGVwaXNvZGU/IEluIGhvdXJzLiBGb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDE2NiwgdGhlbiBpdCdzIGV2ZXJ5IDE2NiBob3VycyAob3Igd2Vla2x5KS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgRmV0Y2ggcmVjb21tZW5kYXRpb25zIGZvciBhbiBlcGlzb2RlXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfcmVjb21tZW5kYXRpb25zX2Zvcl9lcGlzb2RlKipcblxuRmV0Y2ggdXAgdG8gOCBlcGlzb2RlIHJlY29tbWVuZGF0aW9ucyBiYXNlZCBvbiB0aGUgZ2l2ZW4gZXBpc29kZSBpZC5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQuZmV0Y2hfcmVjb21tZW5kYXRpb25zX2Zvcl9lcGlzb2RlKGlkPSc5MTRhOWRlYWZhNTM0MGVlYWEyODU5Yzc3ZjI3NTc5OScpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jZ2V0LWFwaS12Mi1lcGlzb2Rlcy1pZC1yZWNvbW1lbmRhdGlvbnMpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwicmVjb21tZW5kYXRpb25zXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMDU1MzRlOWQ5OGExNDY5YzhlNDAyYjcxMDNkNzcwMTVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8wNTUzNGU5ZDk4YTE0NjljOGU0MDJiNzEwM2Q3NzAxNS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFya2V0cy1kYWlseS1jcnlwdG8tcm91bmR1cC1jb2luZGVza2NvbS1zNnAtU0FhS05Xai1WVGlEdExBSW55by4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTW9zdCBJbmZsdWVudGlhbCAyMDIxOiBSb2hhbSBHaGFyZWdvemxvdSAoUHQuIDEpXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiNmM3ZWQzMTU2MjhiNDQxYzhhMWJmMGUzMzFkYTJiYTlcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5LWNyeXB0by1yb3VuZHVwLWNvaW5kZXNrY29tLXM2cC1TQWFLTldqLVZUaUR0TEFJbnlvLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIk1hcmtldHMgRGFpbHkgQ3J5cHRvIFJvdW5kdXBcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJDb2luRGVza1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5LWNyeXB0by1yb3VuZHVwLWNvaW5kZXNrY29tLVgzNHdXNV9uMVpwLVZUaUR0TEFJbnlvLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQyLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzZjN2VkMzE1NjI4YjQ0MWM4YTFiZjBlMzMxZGEyYmE5L1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hcmtldHMtZGFpbHktY3J5cHRvLXJvdW5kdXAtY29pbmRlc2tjb20tWDM0d1c1X24xWnAtVlRpRHRMQUlueW8uMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5PbiB0b2RheSdzIHNob3cgQ29pbkRlc2sgQ29sdW1uaXN0IGFuZCBhdXRob3Igb2YgNyBib29rcywgSmVmZiBXaWxzZXIsIHBpY2tzIFJvaGFtIEdoYXJlZ296bG91IGFzIG9uZSBvZiBDb2luRGVzaydzIE1vc3QgSW5mbHVlbnRpYWwgaW4gMjAyMS4gVGhlIG1hbiBiZWhpbmQgQ3J5cHRvS2l0dGllcyBhbmQgTkJBIFRvcCBTaG90IGhhcyBiaWcgcGxhbnMgZm9yIGRpZ2l0YWwgc3BvcnRzIGFuZCB0aGUgb3BlbiBtZXRhdmVyc2UuJm5ic3A7KFBhcnQgMSk8L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2J1c2luZXNzLzIwMjEvMTIvMDcvbW9zdC1pbmZsdWVudGlhbC0yMDIxLXJvaGFtLWdoYXJlZ296bG91L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UmVhZCB0aGUgc3RvcnkgaGVyZS48L2E+PC9wPjxwPjxiciAvPjwvcD48cD48ZW0+VGhpcyBlcGlzb2RlIGlzIHNwb25zb3JlZCBieSZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cua2F2YS5pby9tYXJrZXRzZGFpbHk/dXRtX2NhbXBhaWduPUFkJTIwQWZmaWxpYXRlcyZhbXA7dXRtX3NvdXJjZT1tYXJrZXRzX2RhaWx5JmFtcDt1dG1fbWVkaXVtPWJhbm5lcl9hZCZhbXA7dXRtX3Rlcm09aG9tZVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPkthdmE8L2VtPjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPk5leG8uaW88L2VtPjwvYT48ZW0+Jm5ic3A7YW5kJm5ic3A7PC9lbT48YSBocmVmPVxcXCJodHRwczovL21hcmtldHMuY2hhaW5hbHlzaXMuY29tLz91dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPXBvZGNhc3RcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxlbT5NYXJrZXQgSW50ZWwgYnkgQ2hhaW5hbHlzaXM8L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxiciAvPjwvcD48cD48ZW0+VGhpcyBlcGlzb2RlIHdhcyBlZGl0ZWQgJmFtcDsgcHJvZHVjZWQgYnkmbmJzcDs8L2VtPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9hdXRob3IvYWRyaWFuLWJsdXN0XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48ZW0+QWRyaWFuIEJsdXN0PC9lbT48L2E+PGVtPi4mbmJzcDs8L2VtPjwvcD48cD48ZW0+LTwvZW0+PC9wPjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmthdmEuaW8vbWFya2V0c2RhaWx5P3V0bV9jYW1wYWlnbj1BZCUyMEFmZmlsaWF0ZXMmYW1wO3V0bV9zb3VyY2U9bWFya2V0c19kYWlseSZhbXA7dXRtX21lZGl1bT1iYW5uZXJfYWQmYW1wO3V0bV90ZXJtPWhvbWVcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+PGVtPkthdmE8L2VtPjwvc3Ryb25nPjwvYT48ZW0+Jm5ic3A7bGV0cyB5b3UgbWludCBzdGFibGVjb2lucywgbGVuZCwgYm9ycm93LCBlYXJuIGFuZCBzd2FwIHNhZmVseSBhY3Jvc3MgdGhlIHdvcmxkXFx1MjAxOXMgYmlnZ2VzdCBjcnlwdG8gYXNzZXRzLiBDb25uZWN0IHRvIHRoZSB3b3JsZCdzIGxhcmdlc3QgY3J5cHRvY3VycmVuY2llcywgZWNvc3lzdGVtcyBhbmQgZmluYW5jaWFsIGFwcGxpY2F0aW9ucyBvbiBEZUZpXFx1MjAxOXMgbW9zdCB0cnVzdGVkLCBzY2FsYWJsZSBhbmQgc2VjdXJlIGVhcm5pbmcgcGxhdGZvcm0gd2l0aCZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cua2F2YS5pby9tYXJrZXRzZGFpbHk/dXRtX2NhbXBhaWduPUFkJTIwQWZmaWxpYXRlcyZhbXA7dXRtX3NvdXJjZT1tYXJrZXRzX2RhaWx5JmFtcDt1dG1fbWVkaXVtPWJhbm5lcl9hZCZhbXA7dXRtX3Rlcm09aG9tZVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPmthdmEuaW88L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxlbT4tPC9lbT48L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz48ZW0+TmV4bzwvZW0+PC9zdHJvbmc+PC9hPjxlbT4mbmJzcDtpcyBhIHBvd2VyZnVsLCBhbGwtaW4tb25lIGNyeXB0byBwbGF0Zm9ybSB3aGVyZSB5b3UgY2FuIHNlY3VyZWx5IHN0b3JlIHlvdXIgYXNzZXRzLiZuYnNwO0ludmVzdCwgYm9ycm93LCBleGNoYW5nZSBhbmQgZWFybiB1cCB0byAxMiUgQVBSIG9uIEJpdGNvaW4gYW5kIDIwKyBvdGhlciB0b3AgY29pbnMuJm5ic3A7SW5zdXJlZCBmb3IgJDM3NU0gYW5kIGF1ZGl0ZWQgaW4gcmVhbC10aW1lIGJ5IEFybWFuaW5vLCBOZXhvIGlzIHJhdGVkIGV4Y2VsbGVudCBvbiBUcnVzdHBpbG90LiBHZXQgc3RhcnRlZCB0b2RheSBhdCZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPm5leG8uaW88L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxlbT4tPC9lbT48L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9tYXJrZXRzLmNoYWluYWx5c2lzLmNvbS8/dXRtX3NvdXJjZT1jb2luZGVzayZhbXA7dXRtX21lZGl1bT1wb2RjYXN0XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPjxlbT5NYXJrZXQgSW50ZWwgYnkgQ2hhaW5hbHlzaXM8L2VtPjwvc3Ryb25nPjwvYT48ZW0+XFx1MjAxNHRoZSBCbG9ja2NoYWluIERhdGEgUGxhdGZvcm1cXHUyMDE0YXJtcyB5b3VyIHRlYW0gd2l0aCB0aGUgbW9zdCBjb21wbGV0ZSBvbi1jaGFpbiBkYXRhc2V0IHRvIG1ha2UgaW5mb3JtZWQgY3J5cHRvIGludmVzdG1lbnRzLCBkZWxpdmVyIG9yaWdpbmFsIHJlc2VhcmNoLCBhbmQgaWRlbnRpZnkgYW5kIGNvbmZpZGVudGx5IGZ1bmQgZW1lcmdpbmcgcGxheWVycyBpbiB0aGUgbWFya2V0LiBTZWUgQ2hhaW5hbHlzaXMmbmJzcDs8L2VtPjxhIGhyZWY9XFxcImh0dHBzOi8vbWFya2V0cy5jaGFpbmFseXNpcy5jb20vP3V0bV9zb3VyY2U9Y29pbmRlc2smYW1wO3V0bV9tZWRpdW09cG9kY2FzdFxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPk1hcmtldCBJbnRlbCBpbiBhY3Rpb24gbm93PC9lbT48L2E+PGVtPi48L2VtPjwvcD48cD5TZWUgUHJpdmFjeSBQb2xpY3kgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeTwvYT4gYW5kIENhbGlmb3JuaWEgUHJpdmFjeSBOb3RpY2UgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeSNkby1ub3Qtc2VsbC1teS1pbmZvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwczovL2FydDE5LmNvbS9wcml2YWN5I2RvLW5vdC1zZWxsLW15LWluZm88L2E+LjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY0MDQzMDAwMDEwMixcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImdpZDovL2FydDE5LWVwaXNvZGUtbG9jYXRvci9WMC9xVEw4TmpDZFdvVENmVFdrSzZFLUVyd2N3a1BXS1ZOSWhPbHdIWkg3Q2JnXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzA1NTM0ZTlkOThhMTQ2OWM4ZTQwMmI3MTAzZDc3MDE1L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDU3NCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8wNTUzNGU5ZDk4YTE0NjljOGU0MDJiNzEwM2Q3NzAxNS8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiOWFhZWIwNDZhMDcwNDJkMDljYTUyMTRhOTRmOTk5YjRcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvOWFhZWIwNDZhMDcwNDJkMDljYTUyMTRhOTRmOTk5YjQvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2NvaW5kZXNrLXJlcG9ydHMvbW9uZXktcmVpbWFnaW5lZC1pbnNpZGUtd2hhdC1pSmhjWW5hdDNLWC1DSHhXRDBnTUU3NS4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTU9ORVkgUkVJTUFHSU5FRDogSW5zaWRlIFdoYXQgQ291bGQgQmUgTkZUcyAnTWFpbnN0cmVhbSBNb21lbnQnIHdpdGggRGFwcGVyIExhYnMgQ0VPIFJvaGFtIEdoYXJlZ296bG91XCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiMTg4ZWI2OTY1ZWIwNDg0Njk0MDA0MTRhY2I1NzQ5YWVcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb2luZGVzay1yZXBvcnRzLWNvaW5kZXNrY29tLTJaQzZJTkctVHJELVRFbHhXZlltVnBRLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkNvaW5EZXNrIFJlcG9ydHNcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJDb2luRGVza1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb2luZGVzay1yZXBvcnRzLWNvaW5kZXNrY29tLXZjWWFFcTVHX094LVRFbHhXZlltVnBRLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDI5LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzE4OGViNjk2NWViMDQ4NDY5NDAwNDE0YWNiNTc0OWFlL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEwJVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY29pbmRlc2stcmVwb3J0cy9tb25leS1yZWltYWdpbmVkLWluc2lkZS13aGF0LWV6bWRLMDJqUmxjLUNIeFdEMGdNRTc1LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+QXQgdGhlIGVuZCBvZiBhIGhpZ2gtZW5lcmd5IHdlZWsgaW4gdGhlIGJ1cmdlb25pbmcgZGlnaXRhbCBhcnQgd29ybGQsIFxcdTIwMWNNb25leSBSZWltYWdpbmVkXFx1MjAxZCBicmluZ3MgeW91IHRoZSB0aGlyZCBhbmQgKGZvciBub3cpIGZpbmFsIGVkaXRpb24gb2Ygb3VyIE5GVCBzZXJpZXMuJm5ic3A7PC9wPjxwPkluIGJldHdlZW4gcmVjb3JkaW5nIHRoaXMgZXBpc29kZSBhbmQgcHVibGlzaGluZyBpdCB0d28gZGF5cyBsYXRlciwgYSBub24tZnVuZ2libGUgdG9rZW4gYXR0YWNoZWQgdG8gYSBwaWVjZSBvZiBkaWdpdGFsIGFydCBzb2xkIGZvciBhIHdob3BwaW5nICQ2OS4zIG1pbGxpb24uIFRoZSBzYWxlLCBvcmNoZXN0cmF0ZWQgYnkgQ2hyaXN0aWVcXHUyMDE5cywgdHVybmVkIHRoZSBkaWdpdGFsIGNyZWF0b3Iga25vd24gYXMgQmVlcGxlIGludG8gdGhlIHRoaXJkLWhpZ2hlc3QgcGFpZCBsaXZpbmcgYXJ0aXN0LiBJdCBhbHNvIHJlcHJlc2VudGVkIGEgaGlnaCBwb2ludCBpbiB0aGUgbWVkaWEgYXR0ZW50aW9uIG5vdyBzd2lybGluZyBhcm91bmQgdGhpcyBuZXcsIGNyeXB0by1iYXNlZCB0ZWNobm9sb2d5LiZuYnNwOzwvcD48cD5TbywgaXRcXHUyMDE5cyBhcHByb3ByaWF0ZSB3ZSBlbmQgb24gYSBub3RlIHRoYXQgZ3JvdW5kcyB0aGluZ3MgaW4gdGhlIHJlYWxpdHkgb2YgdGhlIHRlY2hub2xvZ3kgYW5kIGl0cyBwb3RlbnRpYWwgdG8gdHJhbnNmb3JtIHRoZSBjcmVhdG9yIGVjb25vbXkgZ2VuZXJhbGx5LCByYXRoZXIgdGhhbiBiZWluZyBjYXVnaHQgdXAgaW4gdGhlIGNlbGVicml0eSBzdG9yeSBhbmQgbWVkaWEgc2Vuc2F0aW9ucy4gVG8gZG8gc28sIHdlIHRhbGsgd2l0aCBSb2hhbSBHaGFyZWdvemxvdSwgdGhlIENFTyBhbmQgZm91bmRlciBvZiBEYXBwZXIgTGFicywgdGhlIHN0YXJ0dXAgdGhhdCBpbiBtYW55IHJlc3BlY3RzIGlzIHJlc3BvbnNpYmxlIGZvciBraWNraW5nIG9mZiB0aGUgZW50aXJlIE5GVCBwaGVub21lbm9uLiZuYnNwOzwvcD48cD5XZSB0YWxrIGFib3V0IHRoZSBlYXJseSBkYXlzIHdoZW4gRGFwcGVyIGNyZWF0ZWQgdGhlIEVSQy03MjEgc3RhbmRhcmQgb24gRXRoZXJldW0gYW5kIGxhdW5jaGVkIHRoZSBwb3B1bGFyIENyeXB0b0tpdHRpZXMgcHJvZ3JhbS4gV2UgdGFsayBhYm91dCB3aHkgdGhlIHRlYW0gbWFkZSB0aGUgZGVjaXNpb24gdG8gYnVpbGQgaXRzIG93biBibG9ja2NoYWluLCBrbm93biBhcyBGbG93LCBhbmQgdG8gbWlncmF0ZSB0aGUgYnVzaW5lc3MgdGhlcmUgYXdheSBmcm9tIEV0aGVyZXVtLiBBbmQgd2UgdGFsayBhYm91dCB3aGVyZSB0aGlzIHJhcGlkbHkgZXZvbHZpbmcgaW5kdXN0cnksIHdpdGggaXRzIGNvbXBldGluZyBwbGF0Zm9ybXMgYW5kIHdpbGQgZGViYXRlcyBvdmVyIHJpZ2h0cyBhbmQgb3Bwb3J0dW5pdGllcywgaXMgZ29pbmcuPC9wPjxwPkpvaW4gdXMgZm9yIHRoZSBjb252ZXJzYXRpb24uJm5ic3A7PC9wPjxwPjxiciAvPjwvcD48cD48ZW0+SW1hZ2UgY3JlZGl0OiZuYnNwOzwvZW0+Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly91bnNwbGFzaC5jb20vQGJlbmphbWluanN1dGVyP3V0bV9zb3VyY2U9dW5zcGxhc2gmYW1wO3V0bV9tZWRpdW09cmVmZXJyYWwmYW1wO3V0bV9jb250ZW50PWNyZWRpdENvcHlUZXh0XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5CZW5qYW1pbiBTdXRlcjwvYT4mbmJzcDtvbiZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdW5zcGxhc2guY29tL3MvcGhvdG9zL2Jhc2tldGJhbGw/dXRtX3NvdXJjZT11bnNwbGFzaCZhbXA7dXRtX21lZGl1bT1yZWZlcnJhbCZhbXA7dXRtX2NvbnRlbnQ9Y3JlZGl0Q29weVRleHRcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlVuc3BsYXNoPC9hPiwmbmJzcDs8ZW0+bW9kaWZpZWQgYnkgQ29pbkRlc2s8L2VtPjwvcD48cD48YnIgLz48L3A+PHA+PGJyIC8+PC9wPjxwPlNlZSBQcml2YWN5IFBvbGljeSBhdCA8YSBocmVmPVxcXCJodHRwczovL2FydDE5LmNvbS9wcml2YWN5XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwczovL2FydDE5LmNvbS9wcml2YWN5PC9hPiBhbmQgQ2FsaWZvcm5pYSBQcml2YWN5IE5vdGljZSBhdCA8YSBocmVmPVxcXCJodHRwczovL2FydDE5LmNvbS9wcml2YWN5I2RvLW5vdC1zZWxsLW15LWluZm9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmh0dHBzOi8vYXJ0MTkuY29tL3ByaXZhY3kjZG8tbm90LXNlbGwtbXktaW5mbzwvYT4uPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjE1NTczMTExMTgwLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZ2lkOi8vYXJ0MTktZXBpc29kZS1sb2NhdG9yL1YwL1RJcjlPYzF4VC1sTnN1SFM2OEhGOXhXUTNvUFY2RTh3NDF4emNJMEViZGdcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOWFhZWIwNDZhMDcwNDJkMDljYTUyMTRhOTRmOTk5YjQvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjY5MixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS85YWFlYjA0NmEwNzA0MmQwOWNhNTIxNGE5NGY5OTliNC8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMmFmYTE4ZmU4MWI2NGZhZTlhMTc4ZWE0ZTZlYTFiNzhcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHA6Ly9zYW1zdW5nbmV4dC5jb20vcG9kY2FzdD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMmFmYTE4ZmU4MWI2NGZhZTlhMTc4ZWE0ZTZlYTFiNzgvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3doYXRzLW5leHQtc2Ftc3VuZy1uZXh0LUJPVTgwaldlZ0toLWtHOFUzRWR4SFdvLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJCdWlsZGluZyBibG9ja2NoYWluIGNvbGxlY3RpYmxlcyB3aXRoIERhcHBlciBMYWJzIGZvdW5kZXIgUm9oYW0gR2hhcmVnb3psb3VcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCIwNjE1Zjc5ZjY0ZGU0ZjE5ODlkNGFkMWJhYzdjYmM5ZVwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3doYXRzLW5leHQtc2Ftc3VuZy1uZXh0LUJPVTgwaldlZ0toLWtHOFUzRWR4SFdvLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIldoYXQncyBORVhUXCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiU2Ftc3VuZyBORVhUXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3doYXRzLW5leHQtc2Ftc3VuZy1uZXh0LVJhTkV6NjhWaGMwLWtHOFUzRWR4SFdvLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDI4LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzA2MTVmNzlmNjRkZTRmMTk4OWQ0YWQxYmFjN2NiYzllL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEwJVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2hhdHMtbmV4dC1zYW1zdW5nLW5leHQtUmFORXo2OFZoYzAta0c4VTNFZHhIV28uMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5XZWxjb21lIGJhY2sgdG8gV2hhdFxcdTIwMTlzIE5FWFQsIHRoZSBwb2RjYXN0IGV4cGxvcmluZyB0aGUgdGVjaG5vbG9neSBvZiB0aGUgZnV0dXJlLiBUaGlzIGlzIHRoZSBsYXN0IGluIG91ciBzZXJpZXMgb2YgY29udmVyc2F0aW9ucyBmcm9tIHRoZSBXZWIgU3VtbWl0IGNvbmZlcmVuY2UgbGFzdCB5ZWFyLiA8YnI+IDxicj5JbiB0aGlzIGVwaXNvZGUsIFNhbXN1bmcgTkVYVFxcdTIwMTlzIEhhbGV5IExhbmNhc3RlciBzcGVha3Mgd2l0aCBSb2hhbSBHaGFyZWdvemxvdSwgdGhlIGZvdW5kZXIgYW5kIENFTyBvZiBEYXBwZXIgTGFicywgd2hpY2ggbWFkZSBDcnlwdG9LaXR0aWVzIGFuZCBhIG51bWJlciBvZiBvdGhlciBkZWNlbnRyYWxpemVkIGFwcHMuIFJvaGFtIHNwZWFrcyBhYm91dCB0aGUgZWFybHkgc3VjY2VzcyBvZiBDcnlwdG9LaXR0aWVzLCBob3cgaGlzIGNvbXBhbnkgd29ya3Mgd2l0aCBwYXJ0bmVycyBsaWtlIHRoZSBOQkEgYW5kIFViaXNvZnQsIGFuZCB3aHkgRGFwcGVyIExhYnMgaXMgYnVpbGRpbmcgYSBuZXcsIGRldmVsb3Blci1mcmllbmRseSBibG9ja2NoYWluIHBsYXRmb3JtIGNhbGxlZCBGbG93LiA8YnI+PGJyPjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU4MDk3MjQwMDAwNSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjhlZmRmYWIyLTQ2ZTgtMTFlYS05NDgzLTBlMWZhY2RhZjVmZFwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8yYWZhMThmZTgxYjY0ZmFlOWExNzhlYTRlNmVhMWI3OC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA4NTEsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMmFmYTE4ZmU4MWI2NGZhZTlhMTc4ZWE0ZTZlYTFiNzgvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjQ1ZDk5ZDVlNzE0MzRjNmZhZGM0NTFmMmVhZmIyNTE1XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL291dGxpZXJ2ZW50dXJlcy5wb2RiZWFuLmNvbS9lL2Zyb20tY3J5cHRva2l0dGllcy10by1tYWluc3RyZWFtaW5nLW5vbi1mdW5naWJsZS10b2tlbnMtcm9oYW0tZ2hhcmVnb3psb3Utb2YtZGFwcGVyLWxhYnMvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC80NWQ5OWQ1ZTcxNDM0YzZmYWRjNDUxZjJlYWZiMjUxNS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLW1ldGF2ZXJzZS1wb2RjYXN0LW91dGxpZXJ2ZW50dXJlcy1KVlhuN1FDYlNfay1tNXpNQkZDZkVHSy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiRnJvbSBDcnlwdG9LaXR0aWVzIHRvIE1haW5zdHJlYW1pbmcgTm9uIEZ1bmdpYmxlIFRva2VucywgUm9oYW0gR2hhcmVnb3psb3Ugb2YgRGFwcGVyIExhYnNcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJjZWE1YTViZjZmYmM0MGFhOGMxMTUxOGI1OWE0ZTIyYlwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1tZXRhdmVyc2UtcG9kY2FzdC1vdXRsaWVydmVudHVyZXMtSlZYbjdRQ2JTX2stbTV6TUJGQ2ZFR0suMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiVGhlIE1ldGF2ZXJzZSBQb2RjYXN0XCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiT3V0bGllclZlbnR1cmVzXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1tZXRhdmVyc2UtcG9kY2FzdC1vdXRsaWVydmVudHVyZXMtV25WVWJaNlhpR2QtbTV6TUJGQ2ZFR0suMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMzgsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvY2VhNWE1YmY2ZmJjNDBhYThjMTE1MThiNTlhNGUyMmIvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMi41JVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLW1ldGF2ZXJzZS1wb2RjYXN0LW91dGxpZXJ2ZW50dXJlcy1XblZVYlo2WGlHZC1tNXpNQkZDZkVHSy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlJvaGFtIEdoYXJlZ296bG91LCBDby1JbnZlbnRvciBvZiBDcnlwdG9LaXR0aWVzIGFuZCBGb3VuZGVyIG9mIERhcHBlciBMYWJzIHRhbGtzIGFib3V0IHNjYWxpbmcgTkZUcyB0byBiaWxsaW9ucyBvZiB1c2VycyBhbmQgaG93IHRoZSBNZXRhdmVyc2UsIGFzIGFuIGVtZXJnZW50IGVjb3N5c3RlbSwgd2lsbCBub3QgYmUgZGVzaWduZWQ6IGl0IHdpbGwgYmUgb3BlbiBmbHVpZCBhbmQgYW5jaG9yZWQgb24gYSBibG9ja2NoYWluLjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU5NDY0NDU1NDA5OCxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIm91dGxpZXJ2ZW50dXJlcy5wb2RiZWFuLmNvbS9lYzI3OGNhYi1iOTc4LTVlMzMtYmFjMC03NmY4OGU1ODc2OThcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNDVkOTlkNWU3MTQzNGM2ZmFkYzQ1MWYyZWFmYjI1MTUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTg5MSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80NWQ5OWQ1ZTcxNDM0YzZmYWRjNDUxZjJlYWZiMjUxNS8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNzc0ZTY1Y2VhZDZlNGI1NDhmMDlhMWE3YmY3YzU1YWZcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC83NzRlNjVjZWFkNmU0YjU0OGYwOWExYTdiZjdjNTVhZi9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFya2V0cy1kYWlseS1jcnlwdG8tcm91bmR1cC1jb2luZGVza2NvbS1zNnAtU0FhS05Xai1WVGlEdExBSW55by4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTW9zdCBJbmZsdWVudGlhbCAyMDIxOiBSb2hhbSBHaGFyZWdvemxvdSAoUHQuIDIpXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiNmM3ZWQzMTU2MjhiNDQxYzhhMWJmMGUzMzFkYTJiYTlcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5LWNyeXB0by1yb3VuZHVwLWNvaW5kZXNrY29tLXM2cC1TQWFLTldqLVZUaUR0TEFJbnlvLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIk1hcmtldHMgRGFpbHkgQ3J5cHRvIFJvdW5kdXBcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJDb2luRGVza1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRzLWRhaWx5LWNyeXB0by1yb3VuZHVwLWNvaW5kZXNrY29tLVgzNHdXNV9uMVpwLVZUaUR0TEFJbnlvLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQyLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzZjN2VkMzE1NjI4YjQ0MWM4YTFiZjBlMzMxZGEyYmE5L1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hcmtldHMtZGFpbHktY3J5cHRvLXJvdW5kdXAtY29pbmRlc2tjb20tWDM0d1c1X24xWnAtVlRpRHRMQUlueW8uMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5PbiB0b2RheSdzIHNob3cgQ29pbkRlc2sgQ29sdW1uaXN0IGFuZCBhdXRob3Igb2YgNyBib29rcywgSmVmZiBXaWxzZXIsIHBpY2tzIFJvaGFtIEdoYXJlZ296bG91IGFzIG9uZSBvZiBDb2luRGVzaydzIE1vc3QgSW5mbHVlbnRpYWwgaW4gMjAyMS4gVGhlIG1hbiBiZWhpbmQgQ3J5cHRvS2l0dGllcyBhbmQgTkJBIFRvcCBTaG90IGhhcyBiaWcgcGxhbnMgZm9yIGRpZ2l0YWwgc3BvcnRzIGFuZCB0aGUgb3BlbiBtZXRhdmVyc2UuJm5ic3A7KFBhcnQgMik8L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuY29pbmRlc2suY29tL2J1c2luZXNzLzIwMjEvMTIvMDcvbW9zdC1pbmZsdWVudGlhbC0yMDIxLXJvaGFtLWdoYXJlZ296bG91L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+UmVhZCB0aGUgc3RvcnkgaGVyZS48L2E+PC9wPjxwPjxiciAvPjwvcD48cD48ZW0+VGhpcyBlcGlzb2RlIGlzIHNwb25zb3JlZCBieSZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cua2F2YS5pby9tYXJrZXRzZGFpbHk/dXRtX2NhbXBhaWduPUFkJTIwQWZmaWxpYXRlcyZhbXA7dXRtX3NvdXJjZT1tYXJrZXRzX2RhaWx5JmFtcDt1dG1fbWVkaXVtPWJhbm5lcl9hZCZhbXA7dXRtX3Rlcm09aG9tZVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPkthdmE8L2VtPjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPk5leG8uaW88L2VtPjwvYT48ZW0+Jm5ic3A7YW5kJm5ic3A7PC9lbT48YSBocmVmPVxcXCJodHRwczovL21hcmtldHMuY2hhaW5hbHlzaXMuY29tLz91dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPXBvZGNhc3RcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxlbT5NYXJrZXQgSW50ZWwgYnkgQ2hhaW5hbHlzaXM8L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxiciAvPjwvcD48cD48ZW0+VGhpcyBlcGlzb2RlIHdhcyBlZGl0ZWQgJmFtcDsgcHJvZHVjZWQgYnkmbmJzcDs8L2VtPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmNvaW5kZXNrLmNvbS9hdXRob3IvYWRyaWFuLWJsdXN0XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48ZW0+QWRyaWFuIEJsdXN0PC9lbT48L2E+PGVtPi4mbmJzcDsmbmJzcDs8L2VtPjwvcD48cD48ZW0+LTwvZW0+PC9wPjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmthdmEuaW8vbWFya2V0c2RhaWx5P3V0bV9jYW1wYWlnbj1BZCUyMEFmZmlsaWF0ZXMmYW1wO3V0bV9zb3VyY2U9bWFya2V0c19kYWlseSZhbXA7dXRtX21lZGl1bT1iYW5uZXJfYWQmYW1wO3V0bV90ZXJtPWhvbWVcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+PGVtPkthdmE8L2VtPjwvc3Ryb25nPjwvYT48ZW0+Jm5ic3A7bGV0cyB5b3UgbWludCBzdGFibGVjb2lucywgbGVuZCwgYm9ycm93LCBlYXJuIGFuZCBzd2FwIHNhZmVseSBhY3Jvc3MgdGhlIHdvcmxkXFx1MjAxOXMgYmlnZ2VzdCBjcnlwdG8gYXNzZXRzLiBDb25uZWN0IHRvIHRoZSB3b3JsZCdzIGxhcmdlc3QgY3J5cHRvY3VycmVuY2llcywgZWNvc3lzdGVtcyBhbmQgZmluYW5jaWFsIGFwcGxpY2F0aW9ucyBvbiBEZUZpXFx1MjAxOXMgbW9zdCB0cnVzdGVkLCBzY2FsYWJsZSBhbmQgc2VjdXJlIGVhcm5pbmcgcGxhdGZvcm0gd2l0aCZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cua2F2YS5pby9tYXJrZXRzZGFpbHk/dXRtX2NhbXBhaWduPUFkJTIwQWZmaWxpYXRlcyZhbXA7dXRtX3NvdXJjZT1tYXJrZXRzX2RhaWx5JmFtcDt1dG1fbWVkaXVtPWJhbm5lcl9hZCZhbXA7dXRtX3Rlcm09aG9tZVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPmthdmEuaW88L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxlbT4tPC9lbT48L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz48ZW0+TmV4bzwvZW0+PC9zdHJvbmc+PC9hPjxlbT4mbmJzcDtpcyBhIHBvd2VyZnVsLCBhbGwtaW4tb25lIGNyeXB0byBwbGF0Zm9ybSB3aGVyZSB5b3UgY2FuIHNlY3VyZWx5IHN0b3JlIHlvdXIgYXNzZXRzLiZuYnNwO0ludmVzdCwgYm9ycm93LCBleGNoYW5nZSBhbmQgZWFybiB1cCB0byAxMiUgQVBSIG9uIEJpdGNvaW4gYW5kIDIwKyBvdGhlciB0b3AgY29pbnMuJm5ic3A7SW5zdXJlZCBmb3IgJDM3NU0gYW5kIGF1ZGl0ZWQgaW4gcmVhbC10aW1lIGJ5IEFybWFuaW5vLCBOZXhvIGlzIHJhdGVkIGV4Y2VsbGVudCBvbiBUcnVzdHBpbG90LiBHZXQgc3RhcnRlZCB0b2RheSBhdCZuYnNwOzwvZW0+PGEgaHJlZj1cXFwiaHR0cHM6Ly9uZXhvLmlvLz8lMjB1dG1fc291cmNlPWNvaW5kZXNrJmFtcDt1dG1fbWVkaXVtPWZpeGVkJmFtcDt1dG1fY2FtcGFpZ249Y29pbmRlc2tfc3BvbnNvcmVkbGluZV8lMjBub3YyMVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPm5leG8uaW88L2VtPjwvYT48ZW0+LjwvZW0+PC9wPjxwPjxlbT4tPC9lbT48L3A+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9tYXJrZXRzLmNoYWluYWx5c2lzLmNvbS8/dXRtX3NvdXJjZT1jb2luZGVzayZhbXA7dXRtX21lZGl1bT1wb2RjYXN0XFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPjxlbT5NYXJrZXQgSW50ZWwgYnkgQ2hhaW5hbHlzaXM8L2VtPjwvc3Ryb25nPjwvYT48ZW0+XFx1MjAxNHRoZSBCbG9ja2NoYWluIERhdGEgUGxhdGZvcm1cXHUyMDE0YXJtcyB5b3VyIHRlYW0gd2l0aCB0aGUgbW9zdCBjb21wbGV0ZSBvbi1jaGFpbiBkYXRhc2V0IHRvIG1ha2UgaW5mb3JtZWQgY3J5cHRvIGludmVzdG1lbnRzLCBkZWxpdmVyIG9yaWdpbmFsIHJlc2VhcmNoLCBhbmQgaWRlbnRpZnkgYW5kIGNvbmZpZGVudGx5IGZ1bmQgZW1lcmdpbmcgcGxheWVycyBpbiB0aGUgbWFya2V0LiBTZWUgQ2hhaW5hbHlzaXMmbmJzcDs8L2VtPjxhIGhyZWY9XFxcImh0dHBzOi8vbWFya2V0cy5jaGFpbmFseXNpcy5jb20vP3V0bV9zb3VyY2U9Y29pbmRlc2smYW1wO3V0bV9tZWRpdW09cG9kY2FzdFxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PGVtPk1hcmtldCBJbnRlbCBpbiBhY3Rpb24gbm93PC9lbT48L2E+PGVtPi48L2VtPjwvcD48cD5TZWUgUHJpdmFjeSBQb2xpY3kgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeTwvYT4gYW5kIENhbGlmb3JuaWEgUHJpdmFjeSBOb3RpY2UgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeSNkby1ub3Qtc2VsbC1teS1pbmZvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwczovL2FydDE5LmNvbS9wcml2YWN5I2RvLW5vdC1zZWxsLW15LWluZm88L2E+LjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY0MDUxNjQwMDEwMSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImdpZDovL2FydDE5LWVwaXNvZGUtbG9jYXRvci9WMC9yMm83MVBQbXJIVXlDLXBvWlRWYl8xYVJOSGQydEJDZ0llX1Vya3NRM0drXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzc3NGU2NWNlYWQ2ZTRiNTQ4ZjA5YTFhN2JmN2M1NWFmL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDczMyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS83NzRlNjVjZWFkNmU0YjU0OGYwOWExYTdiZjdjNTVhZi8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiOGM5ZmNlZTI2NWZjNGY1NGJiY2E2YWZhZmNiOGMyOGNcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vYW5jaG9yLmZtL3RoZWZpcnN0bWludC9lcGlzb2Rlcy9Sb2hhbS1lMTVnMjlyP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC84YzlmY2VlMjY1ZmM0ZjU0YmJjYTZhZmFmY2I4YzI4Yy9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWZpcnN0LW1pbnQtbmZ0LXBvZGNhc3QtdGhlLWZpcnN0LW1pbnQtT1ZSR3A5aGpXZUUtTnVCd09sblYwYnQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlJvaGFtXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiZmJkZjgzYmI0NmFjNGUwYjllODA3OTkxNzE5ZTIxMGZcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZmlyc3QtbWludC1uZnQtcG9kY2FzdC10aGUtZmlyc3QtbWludC1PVlJHcDloaldlRS1OdUJ3T2xuVjBidC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgRmlyc3QgTWludCA6OiBORlQgUG9kY2FzdFwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlRoZSBGaXJzdCBNaW50XCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1maXJzdC1taW50LW5mdC1wb2RjYXN0LXRoZS1maXJzdC1taW50LU5iaExSYWRPSEV0LU51QndPbG5WMGJ0LjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ2LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2ZiZGY4M2JiNDZhYzRlMGI5ZTgwNzk5MTcxOWUyMTBmL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZmlyc3QtbWludC1uZnQtcG9kY2FzdC10aGUtZmlyc3QtbWludC1OYmhMUmFkT0hFdC1OdUJ3T2xuVjBidC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkVwaXNvZGUgODMgb2YgVGhlIEZpcnN0IE1pbnQuPC9wPlxcbjxwPlJvaGFtLjwvcD5cXG48cD5UbyBraWNrIG9mZiBGaXJzdCBNaW50IEZlc3QsIExHIERvdWNldCBzYXQgZG93biB3aXRoIFJvaGFtIEdoYXJlZ296bG91LCB0aGUgRm91bmRlciAmYW1wOyBDRU8gb2YgRGFwcGVyIExhYnMsIHRoZSBjb21wYW55IGJlaGluZCBOQkEgVG9wIFNob3QgYW5kIHRoZSBGbG93IEJsb2NrY2hhaW4uJm5ic3A7PC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjI4MTQzNTEyMDk1LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZjE0OGU0OWItZGZiZi00YTk0LThlM2EtMTliY2I0ZmYxYzE3XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzhjOWZjZWUyNjVmYzRmNTRiYmNhNmFmYWZjYjhjMjhjL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM3MzgsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOGM5ZmNlZTI2NWZjNGY1NGJiY2E2YWZhZmNiOGMyOGMvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjM2NjNlMWJhOGY5NDRkZjc5NTYzNzhhYjMzMmJmMTJiXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy5naW1sZXRtZWRpYS5jb20vc3RhcnR1cD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMzY2M2UxYmE4Zjk0NGRmNzk1NjM3OGFiMzMyYmYxMmIvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0YXJ0dXAtcG9kY2FzdC1naW1sZXQtMTR6VTBjX01PbXYtbjlQcENCVFF2b0ouMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkludHJvZHVjaW5nIEhvdyB0byBTYXZlIGEgUGxhbmV0XCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiMGQzNjJiMTMzOTkyNDBkZTk3NjAyZWY2MTRhY2RjYmNcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFydHVwLXBvZGNhc3QtZ2ltbGV0LTE0elUwY19NT212LW45UHBDQlRRdm9KLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlN0YXJ0VXAgUG9kY2FzdFwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkdpbWxldFwiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFydHVwLXBvZGNhc3QtZ2ltbGV0LThJZjdRQktVNWpiLW45UHBDQlRRdm9KLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc2LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzBkMzYyYjEzMzk5MjQwZGU5NzYwMmVmNjE0YWNkY2JjL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdGFydHVwLXBvZGNhc3QtZ2ltbGV0LThJZjdRQktVNWpiLW45UHBDQlRRdm9KLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+RG9lcyBjbGltYXRlIGNoYW5nZSBmcmVhayB5b3Ugb3V0PyBXYW50IHRvIGtub3cgd2hhdCB3ZSwgY29sbGVjdGl2ZWx5LCBjYW4gZG8gYWJvdXQgaXQ/IFVzIHRvby4gSG93IHRvIFNhdmUgYSBQbGFuZXQgaXMgYSBwb2RjYXN0IHRoYXQgYXNrcyB0aGUgYmlnIHF1ZXN0aW9uczogd2hhdCBkbyB3ZSBuZWVkIHRvIGRvIHRvIHNvbHZlIHRoZSBjbGltYXRlIGNyaXNpcywgYW5kIGhvdyBkbyB3ZSBnZXQgaXQgZG9uZT8gPC9wPjxwPkpvaW4gdXMsIGpvdXJuYWxpc3QgQWxleCBCbHVtYmVyZyBhbmQgc2NpZW50aXN0IGFuZCBwb2xpY3kgbmVyZCBEci4gQXlhbmEgRWxpemFiZXRoIEpvaG5zb24sIGFzIHdlIHNjb3VyIHRoZSBFYXJ0aCBmb3Igc29sdXRpb25zLCB0YWxrIHRvIHBlb3BsZSB3aG8gYXJlIG1ha2luZyBhIGRpZmZlcmVuY2UsIGFzayBoYXJkIHF1ZXN0aW9ucywgY3JhY2sgZHVtYiBqb2tlcyBhbmQgXFx1MjAxNCBlcGlzb2RlIGJ5IGVwaXNvZGUgXFx1MjAxNCBmaWd1cmUgb3V0IGhvdyB0byBidWlsZCB0aGUgZnV0dXJlIHdlIHdhbnQuPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTk4MDA0MDAwMDAwLFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiMjU2NjY0NjQtZTE5Yy0xMWVhLWJiNWQtYjNiNWRjMGJiZGVmXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzM2NjNlMWJhOGY5NDRkZjc5NTYzNzhhYjMzMmJmMTJiL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDcxNCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8zNjYzZTFiYThmOTQ0ZGY3OTU2Mzc4YWIzMzJiZjEyYi8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYjAzYjlmNTlhNWRmNGQzMWJmNDRlMTgyODM1M2M4ZTZcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3LnNvZnR3YXJlZGVmaW5lZGludGVydmlld3MuY29tL21hND91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvYjAzYjlmNTlhNWRmNGQzMWJmNDRlMTgyODM1M2M4ZTYvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NvZnR3YXJlLWRlZmluZWQtaW50ZXJ2aWV3cy1zb2Z0d2FyZS15Rml4bXZfOEtacS15N0tSaV9mbGo4dC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTWlzYWxpZ25lZCBJbmNlbnRpdmVzIEVwaXNvZGUgNDogWW91IGdldCB3aGF0IHlvdSBwYXkgZm9yIC0gY29tcGVuc2F0aW5nIHRlY2ggc3RhZmYgaXMgb2Z0ZW4gZG9uZSBwb29ybHlcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCIxMzM1MGNiNzdhZDU0OGJjODk5MWRhYzk2NTdmNDViN1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NvZnR3YXJlLWRlZmluZWQtaW50ZXJ2aWV3cy1zb2Z0d2FyZS15Rml4bXZfOEtacS15N0tSaV9mbGo4dC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJTb2Z0d2FyZSBEZWZpbmVkIEludGVydmlld3NcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJTb2Z0d2FyZSBEZWZpbmVkIFRhbGtcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc29mdHdhcmUtZGVmaW5lZC1pbnRlcnZpZXdzLXNvZnR3YXJlLU44ZlBjdnQwSm1VLXk3S1JpX2Zsajh0LjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IG51bGwsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTMzNTBjYjc3YWQ1NDhiYzg5OTFkYWM5NjU3ZjQ1YjcvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zb2Z0d2FyZS1kZWZpbmVkLWludGVydmlld3Mtc29mdHdhcmUtTjhmUGN2dDBKbVUteTdLUmlfZmxqOHQuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cHJlPjxjb2RlPiAgICAmbHQ7cCZndDtXZSBkaXNjdXNzIGNvbXBlbnNhdGlvbiwgcGFydGljdWxhcmx5IGhvdyBwZW9wbGUgaW4gdGhlIElUIGRlcGFydG1lbnQgKCZhbXA7cXVvdDtkZXZlbG9wZXJzLCZhbXA7cXVvdDsgZXRjLikgYXJlIHNvIGRpc2Nvbm5lY3RlZCBmcm9tIHRoZSBhY3R1YWwgYnVzaW5lc3MgdGhhdCBjb21wZW5zYXRpbmcgdGhlbSBiYXNlZCBvbiBidXNpbmVzcyBwZXJmb3JtYW5jZSBpcyBuZWFyIGltcG9zc2libGUuIE5vdCBnb29kIGlmIHlvdSZhbXA7IzM5O3JlIGFuIElUIHBlcnNvbiBhbmQgbGlrZSBtb25leS4mbHQ7L3AmZ3Q7XFxuPC9jb2RlPjwvcHJlPlxcblxcbjxwPlRoZXJlJiMzOTtzIG90aGVyIHR5cGVzIG9mIGNvbXAuIHRoZW4gbW9uZXksIG9idmlvdXNseSwgYW5kIHRob3NlIGFyZSBmaW5lIHRvby4gSW4gcGFydGljdWxhciwgd2UgZGlzY3VzcyBwYXJ0aWNpcGF0aW9uIGluIG9wZW4gc291cmNlIGFuZCBtb3JlIHJlY29nbml0aW9uLiBCdXQsIHN0aWxsOiBtb25leSBpcyB0aGUgYmVzdC48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1OTQ5ODAwMDAwMDAsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJlZmIwNTY1Ni1kOWVmLTRmZTctYjU4My0zYzQ5ZDkyOWZiNmNcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvYjAzYjlmNTlhNWRmNGQzMWJmNDRlMTgyODM1M2M4ZTYvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMzA1NyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB0cnVlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2IwM2I5ZjU5YTVkZjRkMzFiZjQ0ZTE4MjgzNTNjOGU2LyNlZGl0XCJcbiAgICB9XG4gIF1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJyZXF1aXJlZFwiOiBbXG4gICAgXCJyZWNvbW1lbmRhdGlvbnNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwicmVjb21tZW5kYXRpb25zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkODJlNTAzMTQxNzQ3NTRhM2I2MDM5MTI0NDhlODEyXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBlcGlzb2RlIG1ldGFkYXRhIHZpYSBgR0VUIC9lcGlzb2Rlcy97aWR9YC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubnByLm9yZy8yMDIwLzAxLzIyLzc5ODUzMjE3OS9zb2xlaW1hbmlzLWlyYW5cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZWIgbGluayBvZiB0aGlzIGVwaXNvZGUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXVkaW9cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzExYjM0MDQxZTgwNDQ5MWI5NzA0ZDExZjI4M2M3NGRlL1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF1ZGlvIHVybCBvZiB0aGlzIGVwaXNvZGUsIHdoaWNoIGNhbiBiZSBwbGF5ZWQgZGlyZWN0bHkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgZXBpc29kZS5cXG5JZiBhbiBlcGlzb2RlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIGltYWdlLCB0aGVuIHRoaXMgZmllbGQgd291bGQgYmUgdGhlIHVybCBvZiB0aGUgcG9kY2FzdCBhcnR3b3JrIGltYWdlLlxcbklmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJDZWxlYnJhdGlvbiBSZWNhcCwgSmFzb24gRnJ5IGFuZCBDaHJpc3RpYW4gQmxhdXZlbHQgSW50ZXJ2aWV3cyBcXHUyMDEzIFNXQlcgIzEwMVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVwaXNvZGUgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzlcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrLiBJZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgbmFtZS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiUGxhbmV0IEJyb2FkY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgc2NvcmUgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZCBvbiBhIHNjYWxlIGZyb20gMCB0byAxMDAuXFxuSWYgdGhlIHNjb3JlIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OS9cIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiMC41JVwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgcmFua2luZyBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkLlxcbkZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMC41JSwgdGhlbiB0aGlzIHBvZGNhc3QgaXMgb25lIG9mIHRoZSB0b3AgMC41JSBtb3N0IHBvcHVsYXIgc2hvd3Mgb3V0IG9mIGFsbCBwb2RjYXN0cyBnbG9iYWxseSwgcmFua2VkIGJ5IExpc3RlbiBTY29yZS5cXG5JZiB0aGUgcmFua2luZyBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgKDMwMHgzMDApIHVybCBmb3IgdGhpcyBlcGlzb2RlLlxcbklmIGFuIGVwaXNvZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gaW1hZ2UsIHRoZW4gdGhpcyBmaWVsZCB3b3VsZCBiZSB0aGUgdXJsIG9mIHRoZSBwb2RjYXN0IGFydHdvcmsgdGh1bWJuYWlsIGltYWdlLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHA+RGlzbmV5IGNoaWVmIEJvYiBJZ2VyIHNoYXJlZCBuZXdzIGFib3V0IFN0YXIgV2FycyBtb3ZpZXMgaW4gMjAyMCBhbmQgYmV5b25kLCBidXQgc29tZSBtZWRpYSBvdXRsZXRzIGdhdmUgY29uZmxpY3RpbmcgcmVwb3J0cyBhYm91dCBpdC4gSGVyZSdzIHRoZSByZWFsIHNjb29wLiBQdW5jaCBpdCE8L3A+IDxwPioqKldlXFx1MjAxOXJlIGxpc3RlbmVyIHN1cHBvcnRlZCEgR28gdG8gaHR0cDovL1BhdHJlb24uY29tL3N3N3g3IHRvIGRvbmF0ZSB0byB0aGUgU3RhciBXYXJzIDd4NyBwb2RjYXN0LCBhbmQgeW91XFx1MjAxOWxsIGdldCBzb21lIGZhYnVsb3VzIHJld2FyZHMgZm9yIHlvdXIgcGxlZGdlLioqKlxcdTAwYTA8L3A+IDxwPkNoZWNrIG91dCBTVzd4Ny5jb20gZm9yIGZ1bGwgU3RhciBXYXJzIDd4NyBzaG93IG5vdGVzIGFuZCBsaW5rcywgYW5kIHRvIGNvbW1lbnQgb24gYW55IG9mIHRoZSBjb250ZW50IG9mIHRoaXMgZXBpc29kZSEgSWYgeW91IGxpa2Ugd2hhdCB5b3UndmUgaGVhcmQsIHBsZWFzZSBsZWF2ZSB1cyBhIHJhdGluZyBvciByZXZpZXcgb24gaVR1bmVzIG9yIFN0aXRjaGVyLCB3aGljaCB3aWxsIGFsc28gaGVscCBtb3JlIHBlb3BsZSBkaXNjb3ZlciB0aGlzIFN0YXIgV2FycyBwb2RjYXN0LjwvcD4gPHA+RG9uJ3QgZm9yZ2V0IHRvIGpvaW4gdGhlIFN0YXIgV2FycyA3eDcgZnVuIG9uIEZhY2Vib29rIGF0IEZhY2Vib29rLmNvbS9TVzd4NywgYW5kIGZvbGxvdyB0aGUgYnJlYWtpbmcgbmV3cyBUd2l0dGVyIGZlZWQgYXQgVHdpdHRlci5jb20vU1c3eDdQb2RjYXN0LiBXZSdyZSBhbHNvIG9uIFBpbnRlcmVzdCBhbmQgSW5zdGFncmFtIGFzIFxcXCJTVzd4N1xcXCIgdG9vLCBhbmQgd2UnZCBsb3ZlIHRvIGNvbm5lY3Qgd2l0aCB5b3UgdGhlcmUhPC9wPlxcblwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkh0bWwgb2YgdGhpcyBlcGlzb2RlJ3MgZnVsbCBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInB1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDc0ODczMjAwMDAwLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlB1Ymxpc2hlZCBkYXRlIGZvciB0aGlzIGVwaXNvZGUuIEluIG1pbGxpc2Vjb25kLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzRkODJlNTAzMTQxNzQ3NTRhM2I2MDM5MTI0NDhlODEyL1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBlcGlzb2RlIG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogNTY3LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF1ZGlvIGxlbmd0aCBvZiB0aGlzIGVwaXNvZGUuIEluIHNlY29uZHMuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciBvciBub3QgdGhpcyBlcGlzb2RlJ3MgYXVkaW8gaXMgaW52YWxpZC4gUG9kY2FzdGVycyBtYXkgZGVsZXRlIHRoZSBvcmlnaW5hbCBhdWRpby5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzExYjM0MDQxZTgwNDQ5MWI5NzA0ZDExZjI4M2M3NGRlLyNlZGl0XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRWRpdCB1cmwgb2YgdGhpcyBlcGlzb2RlIHdoZXJlIHlvdSBjYW4gdXBkYXRlIHRoZSBhdWRpbyB1cmwgaWYgeW91IGZpbmQgdGhlIGF1ZGlvIGlzIGJyb2tlbi5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBCYXRjaCBmZXRjaCBiYXNpYyBtZXRhIGRhdGEgZm9yIGVwaXNvZGVzXG5cbkZ1bmN0aW9uIE5hbWU6ICoqYmF0Y2hfZmV0Y2hfZXBpc29kZXMqKlxuXG5CYXRjaCBmZXRjaCBiYXNpYyBtZXRhIGRhdGEgZm9yIHVwIHRvIDEwIGVwaXNvZGVzLiBUaGlzIGVuZHBvaW50IGNvdWxkIGJlIHVzZWQgdG8gaW1wbGVtZW50IGN1c3RvbSBwbGF5bGlzdHMgZm9yIGluZGl2aWR1YWwgZXBpc29kZXMuIEZvciBkZXRhaWxlZCBtZXRhIGRhdGEgb2YgYW4gaW5kaXZpZHVhbCBlcGlzb2RlLCB5b3UgbmVlZCB0byB1c2UgYEdFVCAvZXBpc29kZXMve2lkfWAuIFRoaXMgZW5kcG9pbnQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXG5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQuYmF0Y2hfZmV0Y2hfZXBpc29kZXMoXG4gICAgaWRzPSdjNTc3ZDU1YjJiMmI0ODNjOTY5ZmFlM2NlYjU4ZTM2MiwwZjM0YTkwOTk1Nzk0OTA5OTNlZWM5ZThjOGNlYmI4MicpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jcG9zdC1hcGktdjItZXBpc29kZXMpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwiZXBpc29kZXNcIjogW1xuICAgIHtcbiAgICAgIFwiaWRcIjogXCIwZjM0YTkwOTk1Nzk0OTA5OTNlZWM5ZThjOGNlYmI4MlwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9jbXMubWVnYXBob25lLmZtL2NoYW5uZWwvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzBmMzRhOTA5OTU3OTQ5MDk5M2VlYzllOGM4Y2ViYjgyL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9idXNpbmVzcy11bnVzdWFsLXdpdGgtYmFyYmFyYS1jb3Jjb3Jhbi1NdEoyZk9CU3VUcC1hWlBuM0ljNDdyeC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiMzU6IERvblxcdTIwMTl0IE1ha2UgWW91ciBMYW5kbG9yZCBSaWNoXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiNjhmYWY2MmJlOTcxNDljMjgwZWJjYzI1MTc4YWE3MzFcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9idXNpbmVzcy11bnVzdWFsLXdpdGgtYmFyYmFyYS1jb3Jjb3Jhbi1NdEoyZk9CU3VUcC1hWlBuM0ljNDdyeC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJCdXNpbmVzcyBVbnVzdWFsIHdpdGggQmFyYmFyYSBDb3Jjb3JhblwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkJhcmJhcmEgQ29yY29yYW5cIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4teDJMUVZQa25Nc2MtYVpQbjNJYzQ3cnguMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTgsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNjhmYWY2MmJlOTcxNDljMjgwZWJjYzI1MTc4YWE3MzEvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4teDJMUVZQa25Nc2MtYVpQbjNJYzQ3cnguMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5JZiB5b3VcXHUyMDE5cmUgc3RhcnRpbmcgYSBuZXcgYnVzaW5lc3MsIHlvdSBuZWVkIHRvIGtlZXAgY29zdHMgbG93IFxcdTIwMTMgc28gcmVudGluZyBpcyB0aGUgd2F5IHRvIGdvLCByaWdodD9cXG5cXG5JIHNheSBubyEgSVxcdTIwMTlsbCB0ZWxsIHlvdSB3aHkgeW91IHNob3VsZCBzY3JhcGUgdG9nZXRoZXIgdGhlIGNhc2ggdG8gYnV5IHlvdXIgYnVzaW5lc3MgaGVhZHF1YXJ0ZXJzIGZyb20gdGhlIGdldC1nby5cXHUwMGEwXFxuXFxuQWxzbywgSVxcdTIwMTlsbCBhbnN3ZXIgc29tZSBtb3JlIG9mIHlvdXIgZ3JlYXQgcXVlc3Rpb25zIGFib3V0IGhvdyB0byBnZXQgdGhlIHByZXNzIHRvIHBheSBhdHRlbnRpb24gdG8geW91ciBsaXR0bGUgbW9tIGFuZCBwb3Agc2hvcCBhbmQgd2hhdCB0byBkbyBhYm91dCBhIHRveGljIHdvcmsgZW52aXJvbm1lbnQuXFxuXFxuR290IGEgYnVzaW5lc3MgcXVlc3Rpb24geW91IHdhbnQgdG8gYXNrIG1lPyBUd2VldCBpdCBAQmFyYmFyYUNvcmNvcmFuIGFuZCBJIG1heSBqdXN0IGFuc3dlciBpdCBvbiBhIGZ1dHVyZSBlcGlzb2RlIVxcblxcbkZvbGxvdyBCdXNpbmVzcyBVbnVzdWFsIHdpdGggQmFyYmFyYSBDb3Jjb3JhbiBvbiBpSGVhcnRSYWRpbywgb3Igc3Vic2NyaWJlIHdoZXJldmVyIHlvdSBsaXN0ZW4gdG8gcG9kY2FzdHMuXFxuXFxuVGhpcyBlcGlzb2RlIG9mIEJ1c2luZXNzIFVudXN1YWwgd2l0aCBCYXJiYXJhIENvcmNvcmFuIGlzIHByZXNlbnRlZCBieVxcdTAwYTBPbiBEZWNrIEJ1c2luZXNzIExvYW5zXFx1MDBhMChodHRwOi8vd3d3Lm9uZGVjay5jb20vYmFyYmFyYSkuXFx1MDBhMFxcdTAwYTBcXHUwMGEwPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTQ2MjMyNDYwMTE1LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZ2lkOi8vYXJ0MTktZXBpc29kZS1sb2NhdG9yL1YwL1Ezd3BpMUxwVTdiN3ZGcWMzX1QxQnNhSXFaSnJ1cS1ZV3kzVWQ0c0puSm9cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMGYzNGE5MDk5NTc5NDkwOTkzZWVjOWU4YzhjZWJiODIvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNDg2LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzBmMzRhOTA5OTU3OTQ5MDk5M2VlYzllOGM4Y2ViYjgyLyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJjNTc3ZDU1YjJiMmI0ODNjOTY5ZmFlM2NlYjU4ZTM2MlwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubW9uZXltYXR0ZXJzLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvYzU3N2Q1NWIyYjJiNDgzYzk2OWZhZTNjZWI1OGUzNjIvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2xpc3Rlbi1tb25leS1tYXR0ZXJzLWZyZWUteW91ci1pbm5lci1sUFhXN1ZfNm4wQy1TSkVITnI4NGtWZy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiRG8gVGhpbmdzIFRoYXQgU2NhbGU6IFN0YXJ0aW5nIGEgQnVzaW5lc3MgVGhhdCBXaWxsIFRha2UgT2ZmXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiMzMwMmJjNzExMzk1NDFiYWE0NmVjYjI3ZGJmNjA3MWFcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saXN0ZW4tbW9uZXktbWF0dGVycy1mcmVlLXlvdXItaW5uZXItbFBYVzdWXzZuMEMtU0pFSE5yODRrVmcuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiTGlzdGVuIE1vbmV5IE1hdHRlcnMgLSBGcmVlIHlvdXIgaW5uZXIgZmluYW5jaWFsIGJhZGFzcy4gQWxsIHRoZSBzdHVmZiB5b3Ugc2hvdWxkIGtub3cgYWJvdXQgcGVyc29uYWwgZmluYW5jZS5cIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJMaXN0ZW5Nb25leU1hdHRlcnMuY29tIHwgQW5kcmV3IEZpZWJlcnQgYW5kIE1hdHQgR2lvdmFuaXNjaVwiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saXN0ZW4tbW9uZXktbWF0dGVycy1mcmVlLXlvdXItaW5uZXItZDVJZjA3NHFraHotU0pFSE5yODRrVmcuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjYsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMzMwMmJjNzExMzk1NDFiYWE0NmVjYjI3ZGJmNjA3MWEvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2xpc3Rlbi1tb25leS1tYXR0ZXJzLWZyZWUteW91ci1pbm5lci1kNUlmMDc0cWtoei1TSkVITnI4NGtWZy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZXJlIGFyZSBvbmx5IHNvIG1hbnkgaG91cnMgaW4gYSBkYXkgc28geW91IG5lZWQgdG8gYnVpbGQgYSBidXNpbmVzcyB0aGF0IGNhbiBncm93IHdoaWxlIHlvdVxcdTIwMTlyZSBzbGVlcGluZywgb24gdmFjYXRpb24sIG9yIHdvcmtpbmcgb24geW91ciBuZXh0IGJ1c2luZXNzLiBZb3UgaGF2ZSB0byBkbyB0aGluZ3MgdGhhdCBzY2FsZSB3aGVuIHN0YXJ0aW5nIGEgYnVzaW5lc3MgdGhhdCB3aWxsIHRha2Ugb2ZmLiBXaGlsZSB3ZSBhcmUgZGlzY3Vzc2luZyBzY2FsaW5nIGEgYnVzaW5lc3MsIHRoZXJlIGFyZSBwbGVudHkgb2Ygb3RoZXIgYXJlYXMgb2YgbGlmZSB0aGF0IHlvdSBjYW4gc2NhbGUgaW5jbHVkaW5nIGludmVzdGluZyBhbmQgdmlkZW8gZ2FtZXMuIFRvIHNjYWxlIGEgYnVzaW5lc3MgbWVhbnMgdG8gY3JlYXRlIGEgc3lzdGVtLCBwcm9kdWN0LCBvciBzZXJ2aWNlIHRoYXQgY2FuIGdlbmVyYXRlIG1vcmUgbW9uZXkgdGhyb3VnaCBzb21lIHJlc291cmNlIHRoYXQgaXNuXFx1MjAxOXQgeW91ciB0aW1lLiBTY2FsZSBpcyBhIGNvbmNlcHQgdGhhdCBpcyBtZWFudCB0byBzdXBwb3J0IGluZmluaXRlIGdyb3d0aC4gV2hlbiBzdGFydGluZyBhIGJ1c2luZXNzLCB5b3Ugd2FudCB0byBmaW5kIHdheXMgdG8gYXBwbHkgeW91ciB0aW1lIGFuZCBtb25leSB0aGF0IGFyZSBzY2FsYWJsZSBhbmQgdG8gc2hpZnQgeW91ciBmb2N1cyBmcm9tIHRoaW5ncyB3aXRoIGEgaGFyZCBtYXhpbXVtIHJldHVybiB0byB0aGluZ3MgdGhhdCBoYXZlIHRoZSBwb3RlbnRpYWwgdG8gYmUgaW5maW5pdGVseSBzY2FsYWJsZS48L3A+PHA+XFx1MDBhMDwvcD48cD48YSBocmVmPVxcXCJodHRwczovL3d3dy5saXN0ZW5tb25leW1hdHRlcnMuY29tL3N0YXJ0aW5nLWEtYnVzaW5lc3MtdGhhdC1zY2FsZXMvJTIwJUUyJTgwJThFXFxcIj5GdWxsIEFydGljbGUgSGVyZTwvYT48L3A+PHA+PHN0cm9uZz48L3A+PHA+U2hvdyBOb3RlczwvcD48cD48L3N0cm9uZz48L3A+PHA+PGEgaHJlZj1cXFwiaHR0cDovL3BvcnRicmV3aW5nLmNvbS9iZWVyL2JvYXJkLW1lZXRpbmcvXFxcIj48c3Ryb25nPkJvYXJkIE1lZXRpbmc6PC9zdHJvbmc+PC9hPiBBIGNvZmZlZSBmbGF2b3JlZCBicm93biBhbGUuPC9wPjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lmxpc3Rlbm1vbmV5bWF0dGVycy5jb20vdG9vbGJveC9cXFwiPjxzdHJvbmc+VG9vbCBCb3g6PC9zdHJvbmc+PC9hPiBBbGwgdGhlIGJlc3Qgc3R1ZmYgdG8gbWFuYWdlIHlvdXIgbW9uZXkuPC9wPjxwPjxhIGhyZWY9XFxcImh0dHA6Ly9wYXVsZ3JhaGFtLmNvbS9kcy5odG1sXFxcIj48c3Ryb25nPkRvIFRoaW5ncyBUaGF0IERvbid0IFNjYWxlOjwvc3Ryb25nPjwvYT4gVGhlIGVzc2F5IEFuZHJldyBtZW50aW9uZWQgYnkgUGF1bCBHcmFoYW0uPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vbWVnYXBob25lLmZtL2FkY2hvaWNlc1xcXCI+bWVnYXBob25lLmZtL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1MjgwODg0MDAwODksXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJodHRwczovL3d3dy5saXN0ZW5tb25leW1hdHRlcnMuY29tLz9wPTQ2NjU5XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2M1NzdkNTViMmIyYjQ4M2M5NjlmYWUzY2ViNThlMzYyL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM2ODMsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogdHJ1ZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9jNTc3ZDU1YjJiMmI0ODNjOTY5ZmFlM2NlYjU4ZTM2Mi8jZWRpdFwiXG4gICAgfVxuICBdXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwiZXBpc29kZXNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwiZXBpc29kZXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiNGQ4MmU1MDMxNDE3NDc1NGEzYjYwMzkxMjQ0OGU4MTJcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGVwaXNvZGUgbWV0YWRhdGEgdmlhIGBHRVQgL2VwaXNvZGVzL3tpZH1gLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpbmtcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5ucHIub3JnLzIwMjAvMDEvMjIvNzk4NTMyMTc5L3NvbGVpbWFuaXMtaXJhblwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYiBsaW5rIG9mIHRoaXMgZXBpc29kZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhdWRpb1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXVkaW8gdXJsIG9mIHRoaXMgZXBpc29kZSwgd2hpY2ggY2FuIGJlIHBsYXllZCBkaXJlY3RseS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBlcGlzb2RlLlxcbklmIGFuIGVwaXNvZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gaW1hZ2UsIHRoZW4gdGhpcyBmaWVsZCB3b3VsZCBiZSB0aGUgdXJsIG9mIHRoZSBwb2RjYXN0IGFydHdvcmsgaW1hZ2UuXFxuSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIkNlbGVicmF0aW9uIFJlY2FwLCBKYXNvbiBGcnkgYW5kIENocmlzdGlhbiBCbGF1dmVsdCBJbnRlcnZpZXdzIFxcdTIwMTMgU1dCVyAjMTAxXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSBuYW1lLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicHVibGlzaGVyXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJQbGFuZXQgQnJvYWRjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgcHVibGlzaGVyIG5hbWUuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yayAoMzAweDMwMCkuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSAoMzAweDMwMCkgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayB0aHVtYm5haWwgaW1hZ2UuXFxuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI8cD5EaXNuZXkgY2hpZWYgQm9iIElnZXIgc2hhcmVkIG5ld3MgYWJvdXQgU3RhciBXYXJzIG1vdmllcyBpbiAyMDIwIGFuZCBiZXlvbmQsIGJ1dCBzb21lIG1lZGlhIG91dGxldHMgZ2F2ZSBjb25mbGljdGluZyByZXBvcnRzIGFib3V0IGl0LiBIZXJlJ3MgdGhlIHJlYWwgc2Nvb3AuIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XFxuXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSHRtbCBvZiB0aGlzIGVwaXNvZGUncyBmdWxsIGRlc2NyaXB0aW9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE0NzQ4NzMyMDAwMDAsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHVibGlzaGVkIGRhdGUgZm9yIHRoaXMgZXBpc29kZS4gSW4gbWlsbGlzZWNvbmQuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNGQ4MmU1MDMxNDE3NDc1NGEzYjYwMzkxMjQ0OGU4MTIvXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIGVwaXNvZGUgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA1NjcsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXVkaW8gbGVuZ3RoIG9mIHRoaXMgZXBpc29kZS4gSW4gc2Vjb25kcy5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIG9yIG5vdCB0aGlzIGVwaXNvZGUncyBhdWRpbyBpcyBpbnZhbGlkLiBQb2RjYXN0ZXJzIG1heSBkZWxldGUgdGhlIG9yaWdpbmFsIGF1ZGlvLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvI2VkaXRcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFZGl0IHVybCBvZiB0aGlzIGVwaXNvZGUgd2hlcmUgeW91IGNhbiB1cGRhdGUgdGhlIGF1ZGlvIHVybCBpZiB5b3UgZmluZCB0aGUgYXVkaW8gaXMgYnJva2VuLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEJhdGNoIGZldGNoIGJhc2ljIG1ldGEgZGF0YSBmb3IgcG9kY2FzdHNcblxuRnVuY3Rpb24gTmFtZTogKipiYXRjaF9mZXRjaF9wb2RjYXN0cyoqXG5cbkJhdGNoIGZldGNoIGJhc2ljIG1ldGEgZGF0YSBmb3IgdXAgdG8gMTAgcG9kY2FzdHMuXG5UaGlzIGVuZHBvaW50IGNvdWxkIGJlIHVzZWQgdG8gYnVpbGQgc29tZXRoaW5nIGxpa2UgT1BNTCBpbXBvcnQsXG5hbGxvd2luZyB1c2VycyB0byBpbXBvcnQgYSBidW5jaCBvZiBwb2RjYXN0cyB2aWEgcnNzIHVybHMuXG5Gb3IgZGV0YWlsZWQgbWV0YSBkYXRhIChpbmNsdWRpbmcgZXBpc29kZXMpIG9mIGFuIGluZGl2aWR1YWwgcG9kY2FzdCwgeW91IG5lZWQgdG8gdXNlIGBHRVQgL3BvZGNhc3RzL3tpZH1gLiBUaGlzIGVuZHBvaW50IGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlxuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmJhdGNoX2ZldGNoX3BvZGNhc3RzKFxuICAgIGlkcz0nMzMwMmJjNzExMzk1NDFiYWE0NmVjYjI3ZGJmNjA3MWEsNjhmYWY2MmJlOTcxNDljMjgwZWJjYzI1MTc4YWE3MzEsOWNmMTljNTkwZmYwNDg0ZDk3YjE4YjMyOWZlZDBjNmEnLFxuICAgIGl0dW5lc19pZHM9JzE0NTc1MTQ3MDMsMTM4NjIzNDM4NCw2NTkxNTU0MTknLCBzaG93X2xhdGVzdF9lcGlzb2Rlcz0xKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI3Bvc3QtYXBpLXYyLXBvZGNhc3RzKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInBvZGNhc3RzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNjhmYWY2MmJlOTcxNDljMjgwZWJjYzI1MTc4YWE3MzFcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9mZWVkcy5tZWdhcGhvbmUuZm0vYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW5cIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiYnVzaW5lc3N1bnVzdWFsQGJhcmJhcmFjb3Jjb3Jhbi5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1dFpXZGhjR2h2Ym1VdVptMHZZblZ6YVc1bGMzTXRkVzUxYzNWaGJDMTNhWFJvTFdKaGNtSmhjbUV0WTI5eVkyOXlZVzQ9XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy8xYkVsazVhbFNPTWs2c3lhOTI5QTZyXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIkJhcmJhcmFDb3Jjb3JhblwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlRoZUJhcmJhcmFDb3Jjb3JhblwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuLU10SjJmT0JTdVRwLWFaUG4zSWM0N3J4LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJCdXNpbmVzcyBVbnVzdWFsIHdpdGggQmFyYmFyYSBDb3Jjb3JhblwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly9jbXMubWVnYXBob25lLmZtL2NoYW5uZWwvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDE1NyxcbiAgICAgICAgOTgsXG4gICAgICAgIDk0LFxuICAgICAgICA5MyxcbiAgICAgICAgNjdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMzc4Njg1MjkwLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJCYXJiYXJhIENvcmNvcmFuXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9idXNpbmVzcy11bnVzdWFsLXdpdGgtYmFyYmFyYS1jb3Jjb3Jhbi14MkxRVlBrbk1zYy1hWlBuM0ljNDdyeC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIklcXHUyMDE5bSBzbWFydCBhdCBnZXR0aW5nIHRvIHdoZXJlIEkgd2FudCB0byBnbywgYW5kIEkgY2FuIHRlYWNoIHlvdSBob3cgdG8gZG8gaXQhIEkgaGFkIDIyIGpvYnMgYmVmb3JlIHN0YXJ0aW5nIG15IHJlYWwgZXN0YXRlIGNvbXBhbnkgd2l0aCBhICQxMDAwIGxvYW4gYW5kIGJ1aWx0IGl0IGludG8gYSAkNSBiaWxsaW9uIGJ1c2luZXNzLiBUb2RheSBJXFx1MjAxOW0gYSBcXHUyMDE5U2hhcmtcXHUyMDE5IG9uIEFCQ1xcdTIwMTlzIGhpdCBzaG93IFxcXCJTaGFyayBUYW5rLlxcXCIgSXQgZGlkblxcdTIwMTl0IHRha2UgYSBmYW5jeSBkZWdyZWUgdG8gZ2V0IGhlcmUgYnV0IHRvb2sgc3RyZWV0IHNtYXJ0cyBhbmQgYSBsb3Qgb2YgY291cmFnZS4gTGlmZSBpcyB0b28gc2hvcnQgdG8gd2FzdGUgeW91ciB0aW1lIHByYWN0aWNpbmcgc29tZW9uZSBlbHNlXFx1MjAxOXMgZmFuY3kgdGhlb3J5IG9uIHN1Y2Nlc3MuIEkgZ2l2ZSB5b3UgdGhlIHN0cmFpZ2h0IHRhbGsgYW5kIHRoZSBjb25maWRlbmNlIHRvIGdldCB0aGVyZS4gR290IGEgcXVlc3Rpb24/IENhbGwgbWUgYXQgODg4LUJBUkJBUkEuIFN1YnNjcmliZSB0byBCdXNpbmVzcyBVbnVzdWFsIHdpdGggQmFyYmFyYSBDb3Jjb3JhbiB3aGVyZXZlciB5b3UgbGlzdGVuIHRvIHBvZGNhc3RzLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTgsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDE1NixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNjhmYWY2MmJlOTcxNDljMjgwZWJjYzI1MTc4YWE3MzEvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTQwNyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkMmVkMDg5NGRiMGM0NDZjOGFlZjRmNGNhNTg1Mzg5MlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODgwODAwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTUyNTIwMjc5NDE1MCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxNjcsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjM3NTg5YTNlMTIxZTQwZGViZTRjZWYzZDk2Mzg5MzJhXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHA6Ly9leHBvbmVudC5mbS9mZWVkL1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJianRob21wc29uQG1hYy5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0RvdkwyVjRjRzl1Wlc1MExtWnRMMlpsWldRdlwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMWRvNk9hMGZ4S0Z5dzFZdDFJbEJJa1wiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJleHBvbmVudGZtXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLUw4UUJ1c0FpYVhxLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJFeHBvbmVudFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly9leHBvbmVudC5mbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTI3LFxuICAgICAgICA2NyxcbiAgICAgICAgMTI5LFxuICAgICAgICA5MyxcbiAgICAgICAgMTU3LFxuICAgICAgICAxNDlcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA4MjY0MjA5NjksXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkJlbiBUaG9tcHNvbiAvIEphbWVzIEFsbHdvcnRoXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtSXJnTXc1Y1BBTEYtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIHBvZGNhc3QgYWJvdXQgdGVjaCBhbmQgc29jaWV0eSwgaG9zdGVkIGJ5IEJlbiBUaG9tcHNvbiBhbmQgSmFtZXMgQWxsd29ydGhcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYxLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAxOTcsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzM3NTg5YTNlMTIxZTQwZGViZTRjZWYzZDk2Mzg5MzJhL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM3MzksXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiOTk3YzRkYjhiZDIyNGRmNzhmMDcxNmEzYThjMDVmNWRcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2MzYxMTgwNzYwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDEzOTI4OTk4MjYxOTcsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogOTQwLFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI5Y2YxOWM1OTBmZjA0ODRkOTdiMThiMzI5ZmVkMGM2YVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLm1lZ2FwaG9uZS5mbS9iaW5nZS1tb2RlXCIsXG4gICAgICBcInR5cGVcIjogXCJzZXJpYWxcIixcbiAgICAgIFwiZW1haWxcIjogXCJpbmZvQHRoZXJpbmdlci5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1dFpXZGhjR2h2Ym1VdVptMHZZbWx1WjJVdGJXOWtaUT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy82dThhcVQ0eWFxblhpQXdTSFFQME5OXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcImJpbmdlX21vZGVcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9iaW5nZS1tb2RlLW1hcnZlbC10aGUtcmluZ2VyLVFab0RDeVA2aGV2LUJkUHBzaENhRkR1LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJCaW5nZSBNb2RlOiBNYXJ2ZWxcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vYXJ0MTkuY29tL3Nob3dzL2JpbmdlLW1vZGUtZ2FtZS1vZi10aHJvbmVzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxMjIsXG4gICAgICAgIDE2MixcbiAgICAgICAgNjcsXG4gICAgICAgIDY4XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTI0MzI0NzQ2NCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiVGhlIFJpbmdlclwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYmluZ2UtbW9kZS1tYXJ2ZWwtdGhlLXJpbmdlci1icVZudEJtdzNpai1CZFBwc2hDYUZEdS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBSaW5nZXJcXHUyMDE5cyBNYWxsb3J5IFJ1YmluIGFuZCBKYXNvbiBDb25jZXBjaW9uIHJldHVybiB0byB0YWtlIHRoZWlyIHNpZ25hdHVyZSBkZWVwIGRpdmVzIGludG8gdGhlIE1hcnZlbCBDaW5lbWF0aWMgVW5pdmVyc2UsIGNvdmVyaW5nIGFsbCAyMyBmaWxtcyFcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc5LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA0MSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOWNmMTljNTkwZmYwNDg0ZDk3YjE4YjMyOWZlZDBjNmEvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNzA4NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB0cnVlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjM0OWIzMzg1NjA2MTQ3YjhiMjlkNWFhNjUzNTYzNjY5XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjE2NjM0MTIwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDk2Mjc3MDYwMDQwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDEwMyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjMzMDJiYzcxMTM5NTQxYmFhNDZlY2IyN2RiZjYwNzFhXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMubWVnYXBob25lLmZtL2xpc3Rlbi1tb25leS1tYXR0ZXJzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcImxpc3Rlbm1vbmV5bWF0dGVyc0BnbWFpbC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1dFpXZGhjR2h2Ym1VdVptMHZiR2x6ZEdWdUxXMXZibVY1TFcxaGRIUmxjbk09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy81NFZ5ZFRkTURIa2ZxUHF6bHdSSkZhXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIk1vbmV5TWF0dGVyc01hblwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIkxpc3Rlbk1vbmV5TWF0dGVyc1wiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwibGlzdGVubW9uZXltYXR0ZXJzXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2xpc3Rlbi1tb25leS1tYXR0ZXJzLWZyZWUteW91ci1pbm5lci1sUFhXN1ZfNm4wQy1TSkVITnI4NGtWZy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTGlzdGVuIE1vbmV5IE1hdHRlcnMgLSBGcmVlIHlvdXIgaW5uZXIgZmluYW5jaWFsIGJhZGFzcy4gQWxsIHRoZSBzdHVmZiB5b3Ugc2hvdWxkIGtub3cgYWJvdXQgcGVyc29uYWwgZmluYW5jZS5cIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm1vbmV5bWF0dGVycy5jb20/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDk4LFxuICAgICAgICAxNDQsXG4gICAgICAgIDExMSxcbiAgICAgICAgNjcsXG4gICAgICAgIDkzLFxuICAgICAgICAxMjcsXG4gICAgICAgIDEyOFxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDczNjgyNjMwNyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiTGlzdGVuTW9uZXlNYXR0ZXJzLmNvbSB8IEFuZHJldyBGaWViZXJ0IGFuZCBNYXR0IEdpb3ZhbmlzY2lcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2xpc3Rlbi1tb25leS1tYXR0ZXJzLWZyZWUteW91ci1pbm5lci1kNUlmMDc0cWtoei1TSkVITnI4NGtWZy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhvbmVzdCBhbmQgdW5jZW5zb3JlZCAtIHRoaXMgaXMgbm90IHlvdXIgZmF0aGVyXFx1MjAxOXMgYm9yaW5nIGZpbmFuY2Ugc2hvdy4gVGhpcyBzaG93IGJyaW5ncyBtdWNoIG5lZWRlZCBBQ1RJT05BQkxFIGFkdmljZSB0byBhIHBlb3BsZSB3aG8gaGF0ZSBiZWluZyBsZWN0dXJlZCBhYm91dCBwZXJzb25hbCBmaW5hbmNlIGZyb20gdGhlIG91dC1vZi10b3VjaCBvbmUgcGVyY2VudC4gQW5kcmV3IGFuZCBNYXR0IGFyZSByZWxhdGFibGUsIGZ1bm55LCBhbmQgYnJhc2guIFRoZWlyIGRvd24tdG8tZWFydGggZGlzY3Vzc2lvbnMgYWJvdXQgbW9uZXkgYXJlIGVudGVydGFpbmluZyB3aGV0aGVyIHlvdVxcdTIwMTlyZSBhIGZpbmFuY2lhbCB3aGl6IG9yIGp1c3Qgc3RhcnRpbmcgb3V0LiBUbyBiZSBhIHBhcnQgb2YgdGhlIHNob3cgYW5kIGdldCB5b3VyIGZpbmFuY2lhbCBxdWVzdGlvbnMgYW5zd2VyZWQsIHNlbmQgYW4gZW1haWwgdG8gbGlzdGVubW9uZXltYXR0ZXJzQGdtYWlsLmNvbS5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY2LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA1MDUsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzMzMDJiYzcxMTM5NTQxYmFhNDZlY2IyN2RiZjYwNzFhL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI3ODcsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogdHJ1ZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkMDQ0YTlmMGZiMzA0YzE0OGY0ZjRlOWUzYWQyN2RkNlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTU4OTE2OTYwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTM4MzEzODAwMDUwNCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyMDEsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2MTNhYTgwZWM3Mjk0MDllYTBkYjQyNjVjZjNlMzg5OVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3d3dy5ucHIub3JnL3Jzcy9wb2RjYXN0LnBocD9pZD01MTAzMzFcIixcbiAgICAgIFwidHlwZVwiOiBcInNlcmlhbFwiLFxuICAgICAgXCJlbWFpbFwiOiBcInBvZGNhc3RzQG5wci5vcmdcIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcIlwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJucHJsaWZla2l0XCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmluZC1tb25leS15b3UtZGlkbnQta25vdy15b3UtaGFkLW5wci1XdUhuaDBQb2l5Yi1JRFQxWFBrcTRyYi4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiRmluZCBNb25leSBZb3UgRGlkbid0IEtub3cgWW91IEhhZFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cubnByLm9yZy9saWZla2l0P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA5MyxcbiAgICAgICAgNjdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxNDQ2ODk5Mjk5LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJOUFJcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2ZpbmQtbW9uZXkteW91LWRpZG50LWtub3cteW91LWhhZC1ucHItRGw3Vlo4Nkt5TkEtSURUMVhQa3E0cmIuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJEb24ndCBsZXQgeW91ciBtb25leSBkaXNhcHBlYXIgaW50byBhIHdoaXJscG9vbCBvZiBiYW5rIGZlZXMsIHRha2VvdXQgb3JkZXJzLCBhbmQgbGF0dGVzISBXZSdsbCBsZWFybiBob3cgdG8gZnJlZSB1cCBtb3JlIG1vbmV5IHNvIHlvdSBjYW4gc3BlbmQgaXQgb24gXFx1MjAxNCBhbmQgc2F2ZSBpdCBmb3IgXFx1MjAxNCB0aGUgdGhpbmdzIHlvdSB2YWx1ZSBtb3N0LlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogbnVsbCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogOCxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNjEzYWE4MGVjNzI5NDA5ZWEwZGI0MjY1Y2YzZTM4OTkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNTIwLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjQyY2QwOTI5NTgyZjQ4NTZiY2NhMGZhOThkY2U5MTE5XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTc0NjY1MjU5MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNTQ0ODAwMDE3MDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDczNixcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJjNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLm1lZ2FwaG9uZS5mbS9tYXJrZXRzbmFja3MtZGFpbHlcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwicG9kY2FzdHNAY2FkZW5jZTEzLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcImh0dHA6Ly93d3cubWFya2V0c25hY2tzLmNvbS9cIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1dFpXZGhjR2h2Ym1VdVptMHZiV0Z5YTJWMGMyNWhZMnR6TFdSaGFXeDVcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzVSbGxNQmd2RG5UYXU4bm5zQ1Vkc2VcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwibWFya2V0c25hY2tzXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiTWFya2V0U25hY2tzXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIEJlc3QgT25lIFlldFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA5MyxcbiAgICAgICAgNjcsXG4gICAgICAgIDk5LFxuICAgICAgICA5OCxcbiAgICAgICAgOTVcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMzg2MjM0Mzg0LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJOaWNrICYgSmFjayBTdHVkaW9zXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGRhaWx5IHBvcC1iaXogbmV3cyBzaG93IG1ha2luZyB0b2RheVxcdTIwMTlzIHRvcCBzdG9yaWVzIHlvdXIgYnVzaW5lc3MuIDE1IG1pbnV0ZXMgb24gdGhlIDMgYml6IHN0b3JpZXMgeW91IG5lZWQsIHdpdGggZnJlc2ggdGFrZXMgeW91IGNhbiBwcmV0ZW5kIHlvdSBjYW1lIHVwIHdpdGggXFx1MjAxNCBQYWlycyBwZXJmZWN0bHkgd2l0aCB5b3VyIG1vcm5pbmcgb2F0bWVhbCByaXR1YWwuIEhvc3RlZCBieSBKYWNrIENyaXZpY2ktS3JhbWVyICYgTmljayBNYXJ0ZWxsLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzMsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDc4OSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTA2MCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkYzAzYjYzN2M3YjQ0MGU4YTBjNDdhYmY3NWM4YmNlYVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODkxMjQwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTU1MzUxOTEwMDc4NSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyOCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjNhMmE2ZGRkNTQ5ZjRkZjBiODc2ZTczMTVmYTFhMzE5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vcGhpbG9zb3BoaXpldGhpcy5saWJzeW4uY29tL3Jzc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJzdGV2ZUBzdGVwaGVud2VzdHNob3cuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiaHR0cDovL3BoaWxvc29waGl6ZXRoaXMub3JnL1wiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcGxheS5nb29nbGUuY29tL211c2ljL2xpc3Rlbj91PTAmZ2NsaWQ9Q09tbHNOcldtYzBDRmNpbWZnb2R4QVlGR3cmZ2Nsc3JjPWRzIy9wcy9Jc3ppM256b2UzcDIyaHN4cG9lM2kyam14eHlcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzJTaHB4dzdkUG94UkpDZGZGWFRXTEVcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNqbnB1SUdvdkZGVUJMRzVCZUh6VGFnXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwicGhpbG9zb3BoaXpldGhpc1wiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiaWFtc3RlcGhlbndlc3RcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJQaGlsb3NvcGhpemV0aGlzc2hvd1wiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3BoaWxvc29waGl6ZS10aGlzLXN0ZXBoZW4td2VzdC1ZMlB2UmVseXJJTi1pdlFDZm1rcU1faC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiUGhpbG9zb3BoaXplIFRoaXMhXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vd3d3LnBoaWxvc29waGl6ZXRoaXMub3JnP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICAxMTEsXG4gICAgICAgIDEyNSxcbiAgICAgICAgMTI2LFxuICAgICAgICA2NyxcbiAgICAgICAgMTIyLFxuICAgICAgICAxMzNcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA2NTkxNTU0MTksXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIlN0ZXBoZW4gV2VzdFwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcGhpbG9zb3BoaXplLXRoaXMtc3RlcGhlbi13ZXN0LW9TdWlDVzdCejhULWl2UUNmbWtxTV9oLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQmVnaW5uZXIgZnJpZW5kbHkgaWYgbGlzdGVuZWQgdG8gaW4gb3JkZXIhIEZvciBhbnlvbmUgaW50ZXJlc3RlZCBpbiBhbiBlZHVjYXRpb25hbCBwb2RjYXN0IGFib3V0IHBoaWxvc29waHkgd2hlcmUgeW91IGRvbid0IG5lZWQgdG8gYmUgYSBncmFkdWF0ZS1sZXZlbCBwaGlsb3NvcGhlciB0byB1bmRlcnN0YW5kIGl0LiBJbiBjaHJvbm9sb2dpY2FsIG9yZGVyLCB0aGUgdGhpbmtlcnMgYW5kIGlkZWFzIHRoYXQgZm9yZ2VkIHRoZSB3b3JsZCB3ZSBsaXZlIGluIGFyZSBicm9rZW4gZG93biBhbmQgZXhwbGFpbmVkLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzksXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDE2OCxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvM2EyYTZkZGQ1NDlmNGRmMGI4NzZlNzMxNWZhMWEzMTkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTczNCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIyMjVjMDcyZGUxZmI0ZTMzOWEyMTEwYTk4MWU1MGIxN1wiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1NzY4NjY3NTAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTM3MDU1NjYwMDE2NSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA2NTQsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJiYWNiMmY3Y2E3YTA0ZWQwYjIxZWZkMjExOTJmNTAxNFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLm1lZ2FwaG9uZS5mbS9lc3Bpb25hZ2VcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwic3VwcG9ydEBwYXJjYXN0LmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcIlwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIlBhcmNhc3ROZXR3b3JrXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwicGFyY2FzdFwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwicGFyY2FzdFwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9lc3Bpb25hZ2UtcGFyY2FzdC1uZXR3b3JrLVg5QVQtdVlvOE5xLVJlSzBRVU4tVlBfLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJFc3Bpb25hZ2VcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LnBhcmNhc3QuY29tL2VzcGlvbmFnZT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgOTksXG4gICAgICAgIDY3XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTQ1NzUxNDcwMyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiUGFyY2FzdCBOZXR3b3JrXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9lc3Bpb25hZ2UtcGFyY2FzdC1uZXR3b3JrLWotV0xFbU5RNFBCLVJlSzBRVU4tVlBfLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTm90IGFsbCBzcGllcyBsb29rIGxpa2UgSmFtZXMgQm9uZCBhbmQgRXRoYW4gSHVudC4gTW9zdCBvZiB0aGVtIGxvb2sgbGlrZSBvcmRpbmFyeSBwZW9wbGUsIHdoaWNoIG1ha2VzIHRoZW0gYWxsIHRoZSBtb3JlIGRhbmdlcm91cy4uLiBTbyB3aGF0IGRvZXMgaXQgcmVhbGx5IHRha2UgdG8gYmUgYSBzcHk/IEV2ZXJ5IHdlZWssIHdlIGNvdmVyIGEgcmVhbC1saWZlIHNweSBtaXNzaW9uOiB0aGUgc3Rha2VzLCB0aGUgZGVjZXB0aW9uLCB0aGUgZ2FkZ2V0cywgYW5kIGhvdyBpdCBjaGFuZ2VkIHRoZSBjb3Vyc2Ugb2YgaGlzdG9yeS4gRWFjaCB0d28tcGFydCBzZXJpZXMgZm9sbG93cyBvbmUgbWlzc2lvbiBvZiBhIGhpc3RvcmljIHNweSwgYW5kIGlmIHRoZXkgbWFkZSBpdCBvdXQgYWxpdmUuIEVzcGlvbmFnZSBpcyBhIHByb2R1Y3Rpb24gb2YgQ3V0bGVyIE1lZGlhIGFuZCBwYXJ0IG9mIHRoZSBQYXJjYXN0IE5ldHdvcmsuXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA2NCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogODUsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2JhY2IyZjdjYTdhMDRlZDBiMjFlZmQyMTE5MmY1MDE0L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDIzNTQsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiNDZhMTI2M2FiYWMyNDI5NTlmYWIzZTRlMTRmOTg3NjNcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2MjMwNDkyNjAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1NTM0NzExNzMwMjMsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogNDgyLFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI4NTc5YzNmNWQxMWY0NzlkOTM5Mzk2YjFmMzZmMzBhNFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2FuY2hvci5mbS9zLzU1ZjRlMjAwL3BvZGNhc3QvcnNzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcImZvcm1vc2FmaWxlc0BnbWFpbC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3d3dy5nb29nbGUuY29tL3BvZGNhc3RzP2ZlZWQ9YUhSMGNITTZMeTloYm1Ob2IzSXVabTB2Y3k4MU5XWTBaVEl3TUM5d2IyUmpZWE4wTDNKemN3PT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzIzTlpDTTRpazZvM1VZa000NzNJdHpcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZm9ybW9zYS1maWxlcy1saC1JTnZEZXNTbS1FVjhJRDlTZUoxZC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiIEZvcm1vc2EgRmlsZXM6XFxuVGhlIEhpc3Rvcnkgb2YgVGFpd2FuIFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cHM6Ly93d3cuZm9ybW9zYWZpbGVzLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTI1LFxuICAgICAgICA2N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE1ODg0NzcwOTYsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkpvaG4gUm9zcyBhbmQgRXJ5ayBNaWNoYWVsIFNtaXRoXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9mb3Jtb3NhLWZpbGVzLXFNWnllWE4zdXhMLUVWOElEOVNlSjFkLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGhpc3Rvcnkgb2YgVGFpd2FuICgxNjAwIEMuRS4gLSAyMDAwKSB0b2xkIHRocm91Z2ggaW50ZXJlc3Rpbmcgc3RvcmllcyBpbiBhIG5vbi1jaHJvbm9sb2dpY2FsIG9yZGVyLiBKb2huIFJvc3MgaXMgYW4gYXV0aG9yIGFuZCBwdWJsaXNoZXIgb2Ygd29ya3Mgb24gVGFpd2FuIGFuZCBDaGluYSwgd2hpbGUgRXJ5ayBNaWNoYWVsIFNtaXRoIGhhcyB3b3JrZWQgYXMgYSB3cml0ZXIgYW5kIGpvdXJuYWxpc3QgZm9yIHNldmVyYWwgbWVkaWEgb3V0bGV0cyBpbiBUYWl3YW4uIEJvdGggaG9zdHMgaGF2ZSBsaXZlZCBpbiBUYWl3YW4gZm9yIHdlbGwgb3ZlciAyMCB5ZWFycyBhbmQgY2FsbCB0aGUgaXNsYW5kIGhvbWUuIEVtYWlsOiBmb3Jtb3NhZmlsZXNAZ21haWwuY29tIFwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMjgsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDQ5LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84NTc5YzNmNWQxMWY0NzlkOTM5Mzk2YjFmMzZmMzBhNC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxNTI0LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjE0OGE1YTYzMjUxZDQ2NmNhYWM5OWYzMDM4ZDA1YTgyXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4Mjg4MDI2MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNjMwODkzMDg2MDQ4LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE1OCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMTAlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmNDZhYWMxNDM4NDE0ODhiODljNzY5MjNlNTgxMjg0NlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2FuY2hvci5mbS9zL2NkMGU0MzQvcG9kY2FzdC9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IG51bGwsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTloYm1Ob2IzSXVabTB2Y3k5alpEQmxORE0wTDNCdlpHTmhjM1F2Y25OelwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvM0REZkVzS0RJRHJUbG5QT2lHNFpGNFwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zcG9ydHMtY2FyZC1pbnZlc3Rvci1zcG9ydHMtY2FyZC1pbnZlc3Rvci1HbVlfOXZhUEhNaS12WlNGTHp4M3AxMC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiU3BvcnRzIENhcmQgSW52ZXN0b3JcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LnNwb3J0c2NhcmRpbnZlc3Rvci5jb20/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDgyLFxuICAgICAgICA2N1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDE0NzM3MTE0MjQsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIlNwb3J0cyBDYXJkIEludmVzdG9yXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zcG9ydHMtY2FyZC1pbnZlc3Rvci1zcG9ydHMtY2FyZC1pbnZlc3Rvci0xb1dIYThjSmZSay12WlNGTHp4M3AxMC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlByb2ZpdCBmcm9tIHRoZSBob2JieSB5b3UgbG92ZS4gV2hhdCBhcmUgdGhlIGJlc3QgYmFzZWJhbGwsIGJhc2tldGJhbGwgYW5kIGZvb3RiYWxsIGNhcmRzIHRvIGludmVzdCBpbiB0b2RheT8gSG93IGlzIHRoZSBtYXJrZXQgdHJlbmRpbmc/IEhvdyBjYW4geW91IHByb2ZpdD8gSW4gZWFjaCBlcGlzb2RlLCB3ZSB0YWNrbGUgdGhlc2UgcXVlc3Rpb25zIGFuZCBtb3JlLlxcblxcblNwb3J0cyBDYXJkIEludmVzdG9yIGlzIGJyb3VnaHQgdG8geW91IGJ5IGVCYXksIHlvdXIgbnVtYmVyIG9uZSBzcG90IGZvciBjYXJkcyBhbmQgY29sbGVjdGlibGVzLiBXaXRoIHRoZSBsYXJnZXN0IGludmVudG9yeSBvZiBzcG9ydHMgY2FyZHMgZnJvbSBiYXNrZXRiYWxsIHRvIHNvY2NlciwgYW5kIGJ1eWVycyBmcm9tIGFsbCBvdmVyIHRoZSBnbG9iZSwgZUJheSBpcyB0aGUgbGVhZGluZyBwbGFjZSB0byBidXksIHNlbGwgYW5kIGludmVzdCB5b3VyIGNhcmRzLiBTZWFyY2ggZUJheSB0cmFkaW5nIGNhcmRzIGhlcmU6IGh0dHBzOi8vd3d3LmViYXkuY29tL2IvVHJhZGluZy1DYXJkcy9ibl83MTE2NDk2NTc4XCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA0OCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMzczLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mNDZhYWMxNDM4NDE0ODhiODljNzY5MjNlNTgxMjg0Ni9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMzY4LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjEzZjNlNTc1NDZkZTQxNjlhOTFlNjEyZTc0MDBjNGUyXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjU4ODcxMDEzMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNTYzNTQ5ODY3MzY1LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDExMyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjFjOTU2YjQyMzAyYTQ4OGJiYWMwNTk1ZTE5MjJlYTg2XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vd3d3Lm9tbnljb250ZW50LmNvbS9kL3BsYXlsaXN0L2JjNTU5YjA4LTM1OGItNDQyYS04MWI2LWE5NjAwMDU1OTgyOS9jNWZhZTA5NC0wZTc1LTQ4NDAtOGIwZC1hOWFkMDExNmJhM2IvY2Y1MDUwNDEtMmY3Mi00NTAyLWI4NzYtYTlhZDAxMTZiYTNiL3BvZGNhc3QucnNzXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcImhvc3RAYWxyZWFkeWdvbmVwb2RjYXN0LmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5M2QzY3ViMjF1ZVdOdmJuUmxiblF1WTI5dEwyUXZjR3hoZVd4cGMzUXZZbU0xTlRsaU1EZ3RNelU0WWkwME5ESmhMVGd4WWpZdFlUazJNREF3TlRVNU9ESTVMMk0xWm1GbE1EazBMVEJsTnpVdE5EZzBNQzA0WWpCa0xXRTVZV1F3TVRFMlltRXpZaTlqWmpVd05UQTBNUzB5WmpjeUxUUTFNREl0WWpnM05pMWhPV0ZrTURFeE5tSmhNMkl2Y0c5a1kyRnpkQzV5YzNNPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNHFETmU1R3ZsMVh4ZExpblVHRVhyQ1wiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbHJlYWR5LWdvbmUtbmluYS1pbm5zdGVkLUJfRzF6RHQtSGxxLU1vZXhEcDZFS3JhLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJBbHJlYWR5IEdvbmVcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vYWxyZWFkeWdvbmVwb2RjYXN0LmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgMTM1LFxuICAgICAgICA2NyxcbiAgICAgICAgOTksXG4gICAgICAgIDEyMlxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEzMzU0MDU3MTAsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIk5pbmEgSW5uc3RlZFwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYWxyZWFkeS1nb25lLW5pbmEtaW5uc3RlZC1nS2w4MjVGUE5rMC1Nb2V4RHA2RUtyYS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkdyZWF0IExha2VzLiBUcnVlIENyaW1lLiBIb3N0IE5pbmEgSW5uc3RlZCBjb3ZlcnMgbGVzc2VyIGtub3duIGNyaW1lcywgZGlnZ2luZyBiZW5lYXRoIHRoZSBtZWRpYSBhbmQgYmFjayBwYWdlIHRvIHRlbGwgdGhlaXIgc3RvcmllcyBhbmQgZmluZCB0aGUgdHJ1dGguICNNaWNoaWdhbiAjT2hpbyAjUGVubnN5bHZhbmlhICNOZXdZb3JrICNXaXNjb25zaW4gI0lsbGlub2lzICNUcnVlQ3JpbWUmbmJzcDs8L3A+XFxuPHA+RmluZCBtZSBvbiBUd2l0dGVyOiBAQWxyZWFkeWdvbmVwb2QgKGh0dHBzOi8vdHdpdHRlci5jb20vYWxyZWFkeWdvbmVwb2QpIGFuZCBJbnN0YWdyYW0gaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9uaW5haW5uc3RlZC88L3A+XCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAyNjcsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzFjOTU2YjQyMzAyYTQ4OGJiYWMwNTk1ZTE5MjJlYTg2L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE4NzgsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiYTY5MWQ5YzA4MzFhNDRjMWE3MDMxMWE1NTJmOGIwNjZcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2NTg3NjU1MjAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0NjI3MzAwODgxOTEsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogMjY3LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogbnVsbFxuICAgIH1cbiAgXSxcbiAgXCJsYXRlc3RfZXBpc29kZXNcIjogW1xuICAgIHtcbiAgICAgIFwiaWRcIjogXCI5NDQ3Y2UwN2RkMjM0NTYxODA1NGIwNGI3MzNlNGFkNVwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC85NDQ3Y2UwN2RkMjM0NTYxODA1NGIwNGI3MzNlNGFkNS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiR29vZ2xlXFx1MjAxOXMgJDM5OSBzbWFydHBob25lLCBDcm9jc1xcdTIwMTkgY29tZWJhY2ssIGFuZCBHTVxcdTIwMTlzIHJvYm90YXhpIENydWlzZSBzbmFncyAkMUJcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJjNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZVwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEJlc3QgT25lIFlldFwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk5pY2sgJiBKYWNrIFN0dWRpb3NcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZS9cIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkdvb2dsZVxcdTIwMTlzIEkvTyBldmVudCBkYXkgZW5qb3llZCBwcm90ZXN0cywgQUkgdGVjaCB0byBzY3JlZW4gZmFrZVxcdTAwYTBjYWxscywgYW5kIGEgJDM5OSBQaXhlbCBwaG9uZS4gR2VuZXJhbCBNb3RvcnMgYWNxdWlyZWQgc2VsZi1kcml2aW5nIGNhciBzdGFydHVwIENydWlzZSB3aGVuIGl0IHdhcyB3b3J0aCAkMUIgXFx1MjAxNCBOb3cgaXRcXHUyMDE5cyB3b3J0aCAkMTlCLCBhbmQgd2FudHMgcm9ib3RheGlzIG9uIHN0cmVldHMgdGhpcyB5ZWFyLiBBbmQgQ3JvY3Mgc2hhcmVzIGhhdmUgbmVhcmx5IGRvdWJsZWQgaW4gdGhlIHBhc3QgeWVhciwgc28gd2UgbG9vayBhdCB3aHkuPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlc1xcXCI+cG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NTczMDkzNjA3NTQsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJjYzcwNjkyOC03MTQzLTExZTktOTRlYy1iZjZjZWU1N2M3MWRcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOTQ0N2NlMDdkZDIzNDU2MTgwNTRiMDRiNzMzZTRhZDUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogOTE2LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzk0NDdjZTA3ZGQyMzQ1NjE4MDU0YjA0YjczM2U0YWQ1LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2OGQzNzhlNWIwMjk0MzFkYmFjYTZhY2Y3Y2UzOTZmMlwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC82OGQzNzhlNWIwMjk0MzFkYmFjYTZhY2Y3Y2UzOTZmMi9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiQmlnIFRyYWRlIFdhciB1cGRhdGUsIEFwcGxlXFx1MjAxOXMgYm91Z2h0IDIwKyBjb21wYW5pZXMgaW4gNiBtb250aHMsIGFuZCB0aGUgbGFyZ2VzdCBWQyBpbnZlc3RtZW50IGluIExhdGluIEFtZXJpY2EgZXZlclwiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImM1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgQmVzdCBPbmUgWWV0XCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIFRyYWRlIFdhciB3YXMgc3VwcG9zZWQgdG8gZW5kIHRoaXMgd2VlayB3aXRoIGEgcGVhY2VcXHUwMGEwZGVhbC4gVGhhdFxcdTIwMTlzIG5vdCBsb29raW5nIGxpa2VseSwgYW5kIHdlXFx1MjAxOWxsIHRlbGwgeW91IHdoeS4gQXBwbGVcXHUyMDE5cyBDRU8gY2FzdWFsbHkgZHJvcHBlZCB0aGF0IHRoZSBjb21wYW55XFx1MjAxOXMgYm91Z2h0IG92ZXIgMjAgc3RhcnR1cHMgb3ZlciB0aGUgbGFzdCBzaXggbW9udGhzLiBBbmQgc3VwZXIgZGVsaXZlcnkgYXBwIFJhcHBpIGp1c3QgcmFpc2VkICQxQiBmcm9tIFNvZnRiYW5rLCBtYWtpbmcgaXQgdGhlIGJpZ2dlc3QgTGF0aW4gQW1lcmljYW4gdmVudHVyZVxcdTAwYTBpbnZlc3RtZW50IGV2ZXIuPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlc1xcXCI+cG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NTcyMjI5NjA3NTUsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJlNDZhZGJjZS03MDVmLTExZTktYmFhNS0xNzc5ZWRmNDQxZTNcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNjhkMzc4ZTViMDI5NDMxZGJhY2E2YWNmN2NlMzk2ZjIvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTAzOSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS82OGQzNzhlNWIwMjk0MzFkYmFjYTZhY2Y3Y2UzOTZmMi8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNDAyZTY3ZTY1ZTJhNDU3NWFiMjcwNGE5NzdhMmI0YjVcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vY21zLm1lZ2FwaG9uZS5mbS9jaGFubmVsL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC80MDJlNjdlNjVlMmE0NTc1YWIyNzA0YTk3N2EyYjRiNS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4tTXRKMmZPQlN1VHAtYVpQbjNJYzQ3cnguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjUzOiBTb21ldGhpbmcgQWJvdXQgTWFyeVwiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjY4ZmFmNjJiZTk3MTQ5YzI4MGViY2MyNTE3OGFhNzMxXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4tTXRKMmZPQlN1VHAtYVpQbjNJYzQ3cnguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiQnVzaW5lc3MgVW51c3VhbCB3aXRoIEJhcmJhcmEgQ29yY29yYW5cIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCYXJiYXJhIENvcmNvcmFuXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuLXgyTFFWUGtuTXNjLWFaUG4zSWM0N3J4LjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU4LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY4ZmFmNjJiZTk3MTQ5YzI4MGViY2MyNTE3OGFhNzMxL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuLXgyTFFWUGtuTXNjLWFaUG4zSWM0N3J4LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+PHN0cm9uZz5DTkJDIFByb2R1Y2VyIE1hcnkgSGFuYW4gaGFzIHRoZSBUViBidXNpbmVzcyBkcmVhbSBqb2IuIEkgbWV0IE1hcnkgd2hlbiBzaGUgaW50ZXJ2aWV3ZWQgbWUgZm9yIENOQkMncyBcXFwiVGhlIEJyYXZlIE9uZXNcXFwiIGFuZCBJIGtuZXcgaW1tZWRpYXRlbHkgSSBoYWQgdG8gaGF2ZSBoZXIgb24gdGhlIHNob3cuIFNvIEkgdHVybmVkIHRoZSB0YWJsZXMgb24gTWFyeSBhbmQgcHV0IGhlciBpbiB0aGUgaG90IHNlYXQgdG8gbGVhcm4gaG93IHNoZSB3b3JrZWQgaGVyIHdheSB1cCB0byB0aGUgdG9wLCBhbmQgc2hlIHNoYXJlZCBtYW55IG9mIHRoZSBpbnRlcmVzdGluZyBzaXR1YXRpb25zIHNoZSBmb3VuZCBoZXJzZWxmIGluIGFsb25nIHRoZSB3YXkuR290IGEgcXVlc3Rpb24gZm9yIG1lPyBDYWxsIG1lIGF0IDg4OC1CQVJCQVJBIHRvIGFzayBhIHF1ZXN0aW9uIGZvciBhIGZ1dHVyZSBlcGlzb2RlLiBGb2xsb3cgQnVzaW5lc3MgVW51c3VhbCB3aXRoIEJhcmJhcmEgQ29yY29yYW4gb24gaUhlYXJ0UmFkaW8sIG9yIHN1YnNjcmliZSB3aGVyZXZlciB5b3UgbGlzdGVuIHRvIHBvZGNhc3RzLiA8L3N0cm9uZz5cXHUwMGEwPHN0cm9uZz5UaGlzIGVwaXNvZGUgb2YgQnVzaW5lc3MgVW51c3VhbCB3aXRoIEJhcmJhcmEgQ29yY29yYW4gaXMgcHJlc2VudGVkIGJ5IE9uRGVjayBCdXNpbmVzcyBMb2FucyAoPC9zdHJvbmc+PGEgaHJlZj1cXFwiaHR0cHM6Ly91cmxkZWZlbnNlLnByb29mcG9pbnQuY29tL3YyL3VybD91PWh0dHAtM0FfX3d3dy5vbmRlY2suY29tX0JhcmJhcmEmYW1wO2Q9RHdNRmFRJmFtcDtjPUdDME5aWmhhRXc2R09RU2pNSEkyZzE1a19kckVsUm9QbU9ZaUsyazBlWjgmYW1wO3I9eHk5cFJkRzZscFo2b2d0UlVNTnZPRG5HNERkbUxVeGpaMmQ5eGJVWmRiVTVVc2hFMjBuRU53NjhBbi1iaGFTNCZhbXA7bT1iN0c1ei1TNGZZNmpZblZKb0REMEl4TGhka0lQckZPck5OMnlMbnQzT2RjJmFtcDtzPWVjS0VIZlRKOVF0WTJRZnZrR0wza05JQi1aSjg0OC1wb0dfaFI2YWtod1EmYW1wO2U9XFxcIj48c3Ryb25nPmh0dHA6Ly93d3cub25kZWNrLmNvbS9CYXJiYXJhPC9zdHJvbmc+PC9hPjxzdHJvbmc+KTwvc3Ryb25nPjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NzIwMTY2MDA5NyxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImIzYWM1NmIyLTIzNDItMTFlOS04MTc4LTE3ZGVjM2E2NzNlOVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80MDJlNjdlNjVlMmE0NTc1YWIyNzA0YTk3N2EyYjRiNS9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyMTg4LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzQwMmU2N2U2NWUyYTQ1NzVhYjI3MDRhOTc3YTJiNGI1LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJkNmZmMTUzZDYzMmY0MjgxOTVkZmQ1NGYwMDJiMDk5MFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9kNmZmMTUzZDYzMmY0MjgxOTVkZmQ1NGYwMDJiMDk5MC9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiV2FycmVuIEJ1ZmZldHRcXHUyMDE5cyBlcGljIGFubnVhbCBldmVudCwgUGxhbmV0IEZpdG5lc3NcXHUyMDE5IGlubm92YXRpdmUgcmVhbCBlc3RhdGUgc3RyYXRlZ3ksIGFuZCBhbG1vbmQgbWlsayB2cy4gRGVhbiBGb29kcyBkYWlyeVwiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImM1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgQmVzdCBPbmUgWWV0XCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+VGhlIGFubnVhbCBCZXJrc2hpcmUgSGF0aGF3YXkgc2hhcmVob2xkZXIgbWVldGluZyBzaG93Y2FzZWRcXHUwMGEwODgteWVhci1vbGQgbGVnZW5kYXJ5IGludmVzdG9yIFdhcnJlbiBCdWZmZXR0LCBzbyB3ZSBicm9rZSBkb3duIGhpcyA2IGhvdXJzIG9mIG9uZS1saW5lciBidXNpbmVzcyB0YWtlYXdheXMuIFBsYW5ldCBGaXRuZXNzIHNoYXJlcyBhcmUgdXAgNzUlIGluIHRoZSBsYXN0IHllYXIsIHNvIHdlXFx1MjAxOXJlIGZvY3VzZWQgb24gaXRzIGlubm92YXRpdmUgcmVhbCBlc3RhdGUgc3RyYXRlZ3kgdGhhdCBmZWVkcyBvZmYgdGhlIHJldGFpbC1wb2NhbHlwc2UuIEFuZCBEZWFuIEZvb2RzIGlzIEFtZXJpY2FcXHUyMDE5cyBiaWdnZXN0IGRhaXJ5IGNvbXBhbnksIGJ1dCB0aGUgc3RvY2sgaXMgZG93biA2MiUgaW4gMjAxOSBiZWNhdXNlIG9mIGFsdC1taWxrLjwvcD48cD4gPC9wPjxwPkxlYXJuIG1vcmUgYWJvdXQgeW91ciBhZCBjaG9pY2VzLiBWaXNpdCA8YSBocmVmPVxcXCJodHRwczovL3BvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXNcXFwiPnBvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXM8L2E+PC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTU3MTM2NTYwNzU2LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZGU2YThmOTItNmY5NC0xMWU5LWEyYmUtMmJiODViYjNlZDI0XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2Q2ZmYxNTNkNjMyZjQyODE5NWRmZDU0ZjAwMmIwOTkwL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDk4NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kNmZmMTUzZDYzMmY0MjgxOTVkZmQ1NGYwMDJiMDk5MC8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiNWFkMTcwYTYwZTc2NDY3ZTlkNmIyNDUzYmQ0NGZkYTZcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm1vbmV5bWF0dGVycy5jb20/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzVhZDE3MGE2MGU3NjQ2N2U5ZDZiMjQ1M2JkNDRmZGE2L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saXN0ZW4tbW9uZXktbWF0dGVycy1mcmVlLXlvdXItaW5uZXItbFBYVzdWXzZuMEMtU0pFSE5yODRrVmcuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkFsbCBUaGluZ3MgR29sZFwiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjMzMDJiYzcxMTM5NTQxYmFhNDZlY2IyN2RiZjYwNzFhXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbGlzdGVuLW1vbmV5LW1hdHRlcnMtZnJlZS15b3VyLWlubmVyLWxQWFc3Vl82bjBDLVNKRUhOcjg0a1ZnLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkxpc3RlbiBNb25leSBNYXR0ZXJzIC0gRnJlZSB5b3VyIGlubmVyIGZpbmFuY2lhbCBiYWRhc3MuIEFsbCB0aGUgc3R1ZmYgeW91IHNob3VsZCBrbm93IGFib3V0IHBlcnNvbmFsIGZpbmFuY2UuXCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiTGlzdGVuTW9uZXlNYXR0ZXJzLmNvbSB8IEFuZHJldyBGaWViZXJ0IGFuZCBNYXR0IEdpb3ZhbmlzY2lcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbGlzdGVuLW1vbmV5LW1hdHRlcnMtZnJlZS15b3VyLWlubmVyLWQ1SWYwNzRxa2h6LVNKRUhOcjg0a1ZnLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY2LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzMzMDJiYzcxMTM5NTQxYmFhNDZlY2IyN2RiZjYwNzFhL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saXN0ZW4tbW9uZXktbWF0dGVycy1mcmVlLXlvdXItaW5uZXItZDVJZjA3NHFraHotU0pFSE5yODRrVmcuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Tb21lIHBlb3BsZSB3aG8gYXJlIGhlc2l0YW50IHRvIGludmVzdCBpbiB0aGUgc3RvY2sgbWFya2V0IGFyZSB3aWxsaW5nIHRvIGludmVzdCBpbiBnb2xkLiBXaHk/IEdvbGQgaXMgdGFuZ2libGUsIHlvdSBjYW4gc2VlIGl0LCBob2xkIGl0LCBhbmQga2VlcCBpdCByaWdodCBpbiB5b3VyIG93biBob3VzZSAob3IgYnVua2VyKS4gWW91IGNhbiBidXkgaXQgZnJvbSBzb21lIGd1eSBpbiBhIGxhdGUgbmlnaHQgaW5mb21lcmNpYWwuIFlvdSBjYW4gYnV5IGl0IHdpdGggaW1hZ2VzIG9mIHRoZSBmYWxsZW4gVHdpbiBUb3dlcnMgb24gaXQuIE9yIGFuIEFtZXJpY2FuIGVhZ2xlLjxzdHJvbmc+PC9wPjxwPjwvc3Ryb25nPjwvcD48cD48c3Ryb25nPllvdSBjYW5cXHUyMDE5dCBzYXkgYW55IG9mIHRoYXQgYWJvdXQgaW52ZXN0aW5nIGluIHRoZSBzdG9jayBtYXJrZXQhPC9zdHJvbmc+IFdoZW4geW91IG93biBzdG9jaywgeW91IGRvblxcdTIwMTl0IG93biBhIHRhbmdpYmxlIHRoaW5nLiBZb3UgaGF2ZSB0byBkZWFsIHdpdGggc29tZSBzbGljayBzdG9ja2Jyb2tlciBpZiB5b3Ugd2FudCB0byBidXkgYW5kIHNlbGwgaXQgKHlvdSBkb25cXHUyMDE5dCkuIEFuZCBzdG9ja3MgZG9uXFx1MjAxOXQgY29tZSBpbiBhIGxpbWl0ZWQgZWRpdGlvbiBjb2xsZWN0b3JcXHUyMDE5cyBib3guPC9wPjxwPkxNTSBoYXNuXFx1MjAxOXQgZGlzY3Vzc2VkIGdvbGQgdmVyeSBtdWNoIGluIHRoZSBwYXN0IGFuZCBsaWtlIGEgbG90IG9mIHlvdSwgdGhvdWdodCBpdCB3YXMgc29tZXRoaW5nIG9ubHkgRG9vbXNkYXkgcHJlcHBlcnMgd2VyZSBpbnRlcmVzdGVkIGluIHNvIG5vdCByZWFsbHkgcmVsZXZhbnQgdG8gdXMgb3Igb3VyIGF1ZGllbmNlLiBCdXQgd2hpbGUgZG9pbmcgcmVzZWFyY2ggZm9yIHRoZSA8YSBocmVmPVxcXCJodHRwczovL3d3dy5saXN0ZW5tb25leW1hdHRlcnMuY29tL3JheS1kYWxpby1hbGwtd2VhdGhlci1wb3J0Zm9saW8vXFxcIj5Hb2xkZW4gQnV0dGVyZmx5IGVwaXNvZGUsPC9hPiB3ZSBsZWFybmVkIHNvbWUgbGVnaXRpbWF0ZSByZWFzb25zIGZvciBpbnZlc3RpbmcgaW4gZ29sZCBhbmQgPHN0cm9uZz48ZW0+bm9uZTwvZW0+PC9zdHJvbmc+IG9mIHRoZW0gYXJlIHJlbGF0ZWQgdG8gdGhlIHpvbWJpZSBhcG9jYWx5cHNlIHRoYXQgaXMgc3VyZWx5IGNvbWluZy48L3A+PHA+TWFueSBvZiBvdXIgbGlzdGVuZXJzIHdhbnRlZCB0byBrbm93IG1vcmUgYWJvdXQgaXQgdG9vLCB3aHkgYW5kIGhvdyB0byBpbnZlc3QgaW4gZ29sZC4gV2UgZ290IGEgbG90IG9mIGVtYWlscyBhc2tpbmcgcXVlc3Rpb25zLiBZb3UgYXNrZWQgYW5kIHdlIGFuc3dlcmVkLiBUaGlzIGlzIGFsbCB0aGluZ3MgZ29sZC48c3Ryb25nPjwvcD48cD48L3N0cm9uZz48YSBocmVmPVxcXCJodHRwczovL3d3dy5saXN0ZW5tb25leW1hdHRlcnMuY29tL2FsbC10aGluZ3MtZ29sZC9cXFwiPkZ1bGwgQXJ0aWNsZSBIZXJlPC9hPjxzdHJvbmc+PC9wPjxwPjwvc3Ryb25nPjwvcD48cD48c3Ryb25nPlNob3cgTm90ZXM8L3A+PHA+PC9zdHJvbmc+PC9wPjxwPjxhIGhyZWY9XFxcImh0dHA6Ly9TUFMuTk9SVEhXRVNURVJOLkVEVS9DRlBcXFwiPk5vcnRod2VzdGVybiBVbml2ZXJzaXR5IENGUCBQcm9ncmFtPC9hPiAtIFByZXBhcmUgZm9yIGEgY2FyZWVyIGFzIGEgZmluYW5jaWFsIHBsYW5uZXJcXHUwMGEwPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vbWVnYXBob25lLmZtL2FkY2hvaWNlc1xcXCI+bWVnYXBob25lLmZtL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NTcxMTUyMDAwNDQsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJjYTI3ZWYxMi1kMjQwLTExZTgtOGM1MC1hYjg1ZGE4ZmY2NDNcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNWFkMTcwYTYwZTc2NDY3ZTlkNmIyNDUzYmQ0NGZkYTYvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjY3NyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB0cnVlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzVhZDE3MGE2MGU3NjQ2N2U5ZDZiMjQ1M2JkNDRmZGE2LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJlMmUxNWRjM2Y5OTc0NTgxODg3MmU3MWY3YzgyOGY4OVwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9lMmUxNWRjM2Y5OTc0NTgxODg3MmU3MWY3YzgyOGY4OS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIFRhc2VyIENFTyBnZXRzICQyNDZNIGluIHN0b2NrIGNvbXAsIEJleW9uZCBNZWF0IHN1cmdlcyAxNjMlLCBhbmQgV2F5ZmFpciBkcm9wcyA3JSBiZWNhdXNlIHlvdVxcdTIwMTlyZSBleHBlbnNpdmVcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJjNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZVwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEJlc3QgT25lIFlldFwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk5pY2sgJiBKYWNrIFN0dWRpb3NcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZS9cIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkF4b24gRW50ZXJwcmlzZXMgaXMgdGhlIGNvbXBhbnkgYmVoaW5kIHRoZSB0YXNlciwgYW5kIGl0IGp1c3QgYXdhcmRlZCBpdHMgQ0VPICQyNDZNIGluIGNvbXBlbnNhdGlvbiBcXHUyMDE0IFNvIHdlIGxvb2sgaW4gdG8gaG93IGl0XFx1MjAxOXMgc2V0IHVwIHRvIGluY2VudGl2aXplIGhpbS4gQmV5b25kIE1lYXQgc3VyZ2VkIDE2MyUgb24gaXRzIElQTyBkYXkuIEFuZCBXYXlmYWlyIGlzIHRoZSBiaWdnZXN0IG9ubGluZSBmdXJuaXR1cmUgcGxhdGZvcm0gd2hvc2Ugc3RvY2sgZmVsbCA3JSwgYnV0IGl0XFx1MjAxOXMgZ290IGEgZmFzY2luYXRpbmcgcmVsYXRpb25zaGlwIHdpdGggODAgXFx1MjAxY2hvdXNlIGJyYW5kcy5cXHUyMDFkPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlc1xcXCI+cG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NTY4NzczNjA3NTcsXG4gICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJmZWU0YjMyNC02ZDNjLTExZTktYTRiZi1jM2Y2MmVhMjk4OTRcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZTJlMTVkYzNmOTk3NDU4MTg4NzJlNzFmN2M4MjhmODkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogODkzLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2UyZTE1ZGMzZjk5NzQ1ODE4ODcyZTcxZjdjODI4Zjg5LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCIyYmMyOWM1ZDhjZWI0MDVjOTQyYmMxMzA0OTc4NDcwM1wiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cucGFyY2FzdC5jb20vZXNwaW9uYWdlP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8yYmMyOWM1ZDhjZWI0MDVjOTQyYmMxMzA0OTc4NDcwMy9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXNwaW9uYWdlLXBhcmNhc3QtbmV0d29yay1YOUFULXVZbzhOcS1SZUswUVVOLVZQXy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiSGVucmkgRFxcdTAwZTlyaWNvdXJ0IFB0LiAyOiBUcmlwbGUgQWdlbnRcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJiYWNiMmY3Y2E3YTA0ZWQwYjIxZWZkMjExOTJmNTAxNFwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2VzcGlvbmFnZS1wYXJjYXN0LW5ldHdvcmstWDlBVC11WW84TnEtUmVLMFFVTi1WUF8uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiRXNwaW9uYWdlXCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiUGFyY2FzdCBOZXR3b3JrXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2VzcGlvbmFnZS1wYXJjYXN0LW5ldHdvcmstai1XTEVtTlE0UEItUmVLMFFVTi1WUF8uMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjQsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYmFjYjJmN2NhN2EwNGVkMGIyMWVmZDIxMTkyZjUwMTQvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4xJVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXNwaW9uYWdlLXBhcmNhc3QtbmV0d29yay1qLVdMRW1OUTRQQi1SZUswUVVOLVZQXy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBhcmlzLCAxOTQzLiBXb3JsZCBXYXIgSUkgd2FzIGluIGZ1bGwgc3dpbmcsIGFuZCB0cmlwbGUtYWdlbnQgSGVucmkgRFxcdTAwZTlyaWNvdXJ0IHdhcyByaWdodCBpbiB0aGUgbWlkZGxlIG9mIGl0LiBIaXMgbWlzc2lvbjogc2VjdXJlIGFuIEFsbGllZCB2aWN0b3J5IGJlZm9yZSBoaXMgY2FyZWZ1bGx5LXNwdW4gd2ViIG9mIGxpZXMgY29tZXMgdW5yYXZlbGVkLjxicj48YnI+UGFyY2FzdGVycyAtIFdoZW4gaXQgY29tZXMgdG8gdHJhbnNwb3J0aW5nIGRydWdzLCB5b3UgY2FuJ3QgZG8gbXVjaCBiZXR0ZXIgdGhhbiBhIGpldGxpbmVyIGZseWluZyBhY3Jvc3MgaW50ZXJuYXRpb25hbCBib3VuZGFyaWVzLiBBbWFkbyBDYXJyaWxsbyBGdWVudGVzIGZpZ3VyZWQgdGhhdCBvdXQsIGVhcm5pbmcgaGlzIHRpdGxlIGFzIFxcXCJMb3JkIG9mIHRoZSBTa2llc1xcXCIgLSBsZWFybiBoaXMgc3Rvcnkgb24gdGhpcyB3ZWVrJ3MgZXBpc29kZSBvZiBLaW5ncGlucyBhdCBwYXJjYXN0LmNvbS9raW5ncGluczxicj5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1Njg2Njg2MDAxOSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImQ4MzEwMzUyLTNhMTctMTFlOS1hY2RiLTUzNWZhNjJjOTFmYVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8yYmMyOWM1ZDhjZWI0MDVjOTQyYmMxMzA0OTc4NDcwMy9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAzMjE4LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzJiYzI5YzVkOGNlYjQwNWM5NDJiYzEzMDQ5Nzg0NzAzLyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmMGYyY2MxZDc3MmM0YWU0YWVmNWJkMWQxYzhmYjgzNFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9mMGYyY2MxZDc3MmM0YWU0YWVmNWJkMWQxYzhmYjgzNC9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTW9sc29uIENvb3JzIGZhbGxzIDglIG9uIG1pZC1iZWVyIGNyaXNpcywgUm95YWwgQ2FyaWJiZWFuIGJlY29tZXMgcHJpY2luZyBwb3dlciBzdXBlcmhlcm8sIGFuZCBGaXRiaXQgaXMgb3VyIFxcdTIwMWNTdXJ2aXZvciBvZiB0aGUgRGF5XFx1MjAxZFwiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImM1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgQmVzdCBPbmUgWWV0XCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+V2l0aCBiZWVyIHNhbGVzIHNsb3dpbmcsIE1vbHNvbiBDb29ycyBpcyBkZXNwZXJhdGVseVxcdTAwYTBmb2N1c2VkIG9uIGlubm92YXRpb24gKGFrYSBub24tYWxjb2hvbCBkcmlua3MpLCBidXQgc2hhcmVzIGZlbGwgYmVjYXVzZSBvZiBpdHMgYmVlciBiYXR0bGVzLiBGaXRiaXQgdXNlZCB0byBiZSBwcm9maXRhYmxlLCBub3cgaXRcXHUyMDE5cyB1c2luZyBwYXJ0bmVyc2hpcHMgdG8gc3Vydml2ZS4gQW5kIFJveWFsIENhcmliYmVhbiBqdW1wZWQgNyUgYXMgaXQgcmVhbGl6ZXMgaXQgY2FuIGNoYXJnZSBhIGxvdCBtb3JlIGZvciBjcnVpc2VzLjwvcD48cD4gPC9wPjxwPkxlYXJuIG1vcmUgYWJvdXQgeW91ciBhZCBjaG9pY2VzLiBWaXNpdCA8YSBocmVmPVxcXCJodHRwczovL3BvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXNcXFwiPnBvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXM8L2E+PC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTU2NzkwOTYwNzU4LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiYWUyODJkMjQtNmM3MS0xMWU5LWE3YWItZWZmMzVmMTcwYTAyXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2YwZjJjYzFkNzcyYzRhZTRhZWY1YmQxZDFjOGZiODM0L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDEwMDAsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZjBmMmNjMWQ3NzJjNGFlNGFlZjViZDFkMWM4ZmI4MzQvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjc5ODExY2M5YTU3MDRlMzI4ODE2OTliMGI5MzM1NmFiXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3Rib3lwb2Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzc5ODExY2M5YTU3MDRlMzI4ODE2OTliMGI5MzM1NmFiL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLVl3MlE1ZElwSzNBLWtteDBYSVpUQXlzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJGYWNlYm9va1xcdTIwMTlzIG5ldyBcXHUyMDFjRkI1XFx1MjAxZCByZWRlc2lnbiAoYW5kIGRhdGluZyBmZWF0dXJlKSwgQXBwbGVcXHUyMDE5cyBwYXN0LWRlcGVuZGVudCBidXNpbmVzcyBtb2RlbCwgYW5kIE1lcmNrXFx1MjAxOXMgcHJvZml0cyBxdWFkcnVwbGVcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJjNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZVwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEJlc3QgT25lIFlldFwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk5pY2sgJiBKYWNrIFN0dWRpb3NcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNWNlNmMwMmNiZjE0ODY0OTYyMDY4MjlmN2Q0MmU4ZS9cIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkFwcGxlXFx1MjAxOXMgZWFybmluZ3MgcmVwb3J0IHdhcyBjcml0aWNhbCBmb3Igd2hhdCBpdCBkaWRuXFx1MjAxOXQgc2F5LCBqdXN0IGFzIG11Y2ggYXMgd2hhdCBpdCBkaWQgXFx1MjAxNCBBbmQgaXQgcmV2ZWFscyB0aGF0IEFwcGxlXFx1MjAxOXMgdHJhbnNmb3JtYXRpb24uIEZhY2Vib29rXFx1MjAxOXMgRjggZXZlbnQgcmV2ZWFsZWQgbmV3IGZlYXR1cmVzIChkYXRpbmcgYW5kIGNydXNoZXMpLCBidXQgdGhlIGJpZyBmb2N1cyB3YXMgaXRzIGFwcCByZWRlc2lnbi4gQW5kIE1lcmNrXFx1MjAxOXMgcHJvZml0cyBxdWFkcnVwbGVkIGJlY2F1c2UgYSBtZWFzbGVzIHZhY2NpbmUgYW5kIGEgbmV3IGNhbmNlciBkcnVnIGhhdmUgYmVjb21lIGl0cyBwcm9maXQgcHVwcGllcy48L3A+PHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjcwNDU2MDc1OSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImFkMzViNzIyLTZiYjAtMTFlOS04OTg4LWJmYTc0YTRhMjIzNFwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS83OTgxMWNjOWE1NzA0ZTMyODgxNjk5YjBiOTMzNTZhYi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA4ODgsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNzk4MTFjYzlhNTcwNGUzMjg4MTY5OWIwYjkzMzU2YWIvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjgyMjkwYjAyZmE0ZTQ4ZDdiZGE3ZDlhNGVlMGI0N2JjXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL29tbnkuZm0vc2hvd3MvYWxyZWFkeS1nb25lL3RoZS1tb3RoZXJzLWRheS1tdXJkZXJzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC84MjI5MGIwMmZhNGU0OGQ3YmRhN2Q5YTRlZTBiNDdiYy9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYWxyZWFkeS1nb25lLW5pbmEtaW5uc3RlZC1CX0cxekR0LUhscS1Nb2V4RHA2RUtyYS4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIE1vdGhlcidzIERheSBNdXJkZXJzXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiMWM5NTZiNDIzMDJhNDg4YmJhYzA1OTVlMTkyMmVhODZcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbHJlYWR5LWdvbmUtbmluYS1pbm5zdGVkLUJfRzF6RHQtSGxxLU1vZXhEcDZFS3JhLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkFscmVhZHkgR29uZVwiLFxuICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk5pbmEgSW5uc3RlZFwiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbHJlYWR5LWdvbmUtbmluYS1pbm5zdGVkLWdLbDgyNUZQTmswLU1vZXhEcDZFS3JhLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IG51bGwsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMWM5NTZiNDIzMDJhNDg4YmJhYzA1OTVlMTkyMmVhODYvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbHJlYWR5LWdvbmUtbmluYS1pbm5zdGVkLWdLbDgyNUZQTmswLU1vZXhEcDZFS3JhLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+TW90aGVyJ3MgRGF5IDE5ODIsIGhpZ2ggc2Nob29sIHN0dWRlbnRzIERhdmlkIENvbGUgYW5kIFRpbW90aHkgRm93bGVyIGRpZSBpbiBhIGZpZXJ5IGJsYXplIGF0IHRoZSBDb2xlIGhvbWUgaW4gRGVlcmZpZWxkIE1pY2hpZ2FuLiBUaGlzIGVwaXNvZGUgZmVhdHVyZXMgYW4gaW50ZXJ2aWV3IHdpdGggdGhlIHNpc3RlciBvZiBUaW0gRm93bGVyLiZuYnNwOyA8YSBocmVmPVxcXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vdGltZm93bGVyZGF2aWRjb2xlL1xcXCI+aHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL3RpbWZvd2xlcmRhdmlkY29sZS88L2E+PGJyIC8+PGJyIC8+SWYgeW91IGhhdmUgaW5mb3JtYXRpb24gb24gdGhpcyB1bnNvbHZlZCBjYXNlLCBwbGVhc2UgY29udGFjdCB0aGUgTGVuYXdlZSBDb3VudHkgU2hlcmlmZidzIERlcGFydG1lbnQgYXQgPHN0cm9uZz41MTctMjY2LTYxNjEgPC9zdHJvbmc+b3IsIHN1Ym1pdCBhbiBhbm9ueW1vdXMgdGlwIHZpYSBDcmltZVN0b3BwZXJzLCBPbmxpbmUgYXQ6Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cDovL3d3dy50aXBzdWJtaXQuY29tXFxcIj53d3cudGlwc3VibWl0LmNvbTwvYT4gb3IgdmlhIHRleHQgJm5ic3A7Mjc0NjM3IFN0YXJ0IFRpcCBcXFwiTEVOQVdFRVxcXCI8L3A+XFxuPHA+PGJyIC8+VmlzaXQgb3VyIHNwb25zb3IhIEdyZWVuIENoZWYgLSBGb3IgJDUwIG9mZiB5b3VyIGZpcnN0IGJveCBvZiBHcmVlbiBDaGVmIHZpc2l0IEdyZWVuY2hlZi5VUy9hbHJlYWR5Z29uZSA8YnIgLz48c3Ryb25nPjxiciAvPjwvc3Ryb25nPkFkZGl0aW9uYWwgTXVzaWMgcHJvdmlkZWQgYnkgUkZNOiA8YSBocmVmPVxcXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWRQRW9hc0JITmlBXFxcIj5odHRwczovL3lvdXR1LmJlL2RQRW9hc0JITmlBPC9hPjxzdHJvbmc+PGJyIC8+PC9zdHJvbmc+PC9wPjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnBhdHJlb24uY29tL0FscmVhZHlHb25lXFxcIiByZWw9XFxcInBheW1lbnRcXFwiPlN1cHBvcnQgdGhlIHNob3c6IGh0dHBzOi8vd3d3LnBhdHJlb24uY29tL0FscmVhZHlHb25lPC9hPjwvcD48cD5TZWUgPGEgaHJlZj1cXFwiaHR0cHM6Ly9vbW55c3R1ZGlvLmNvbS9saXN0ZW5lclxcXCI+b21ueXN0dWRpby5jb20vbGlzdGVuZXI8L2E+IGZvciBwcml2YWN5IGluZm9ybWF0aW9uLjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjY4MzUwMDA4MixcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjcwODFhMzg4LTBlYmUtNGQ3NS05OGMwLWFhM2UwMTQ3NTYwNlwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS84MjI5MGIwMmZhNGU0OGQ3YmRhN2Q5YTRlZTBiNDdiYy9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyMDAxLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzgyMjkwYjAyZmE0ZTQ4ZDdiZGE3ZDlhNGVlMGI0N2JjLyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI2ZjRiNTYxYjk4YzQ0ODlmOTQ2NzNiZDcwOWZhMGM4NVwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC82ZjRiNTYxYjk4YzQ0ODlmOTQ2NzNiZDcwOWZhMGM4NS9cIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiU3BvdGlmeSBoaXRzIDIxN00gcHJvZml0bGVzcyB1c2VycywgQWlyYm5iICYgTWFycmlvdHRcXHUyMDE5cyB0d2luIGFubm91bmNlbWVudHMsIGFuZCBDaGV3eS5jb21cXHUyMDE5cyBcXHUyMDFjcGV0IGh1bWFuaXphdGlvblxcdTIwMWQgSVBPXCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGVcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLVl3MlE1ZElwSzNBLWtteDBYSVpUQXlzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBCZXN0IE9uZSBZZXRcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJOaWNrICYgSmFjayBTdHVkaW9zXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtS2xJRk9hLWRwUlcta214MFhJWlRBeXMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzMsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGUvXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtS2xJRk9hLWRwUlcta214MFhJWlRBeXMuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5TcG90aWZ5IG5vdyBib2FzdHMgMTAwTSBwYXlpbmcgc3Vic2NyaWJlcnMsIHNvIHdlIGxvb2tlZFxcdTAwYTBpbnRvIHdoeSBpdFxcdTIwMTlzIHN0aWxsIGxvc2luZyBzbyBtdWNoIG1vbmV5IChoaW50OiBJdFxcdTIwMTlzIGJldHRpbmcgb24gcG9kY2FzdHMpLiBBaXJibmIgYW5kIE1hcnJpb3R0IGJvdGggcmV2ZWFsZWQgbmV3IHNlcnZpY2VzIHRoYXQgbG9vayBhIGxvdCBsaWtlIGVhY2ggb3RoZXIgKGF3a3dhcmQpLiBBbmQgUGV0U21hcnRcXHUyMDE5cyBkaWdpdGFsIGJyYW5kIENoZXd5LmNvbSB3aWxsIElQTyB0aGFua3MgdG8gXFx1MjAxY3BldCBodW1hbml6YXRpb25cXHUyMDFkIHRyZW5kcy48L3A+PHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjYxODE2MDc2MCxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjY0OTliZDNhLTZhZWItMTFlOS1hNGNhLTFiNzQzMzBmYTdhN1wiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS82ZjRiNTYxYjk4YzQ0ODlmOTQ2NzNiZDcwOWZhMGM4NS9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMDI1LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzZmNGI1NjFiOThjNDQ4OWY5NDY3M2JkNzA5ZmEwYzg1LyNlZGl0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI5NGJjNTZmYjE4Y2Y0ZWYyOGE0ZTZjZWY2ZGIxMDAwZFwiLFxuICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9jbXMubWVnYXBob25lLmZtL2NoYW5uZWwvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzk0YmM1NmZiMThjZjRlZjI4YTRlNmNlZjZkYjEwMDBkL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9idXNpbmVzcy11bnVzdWFsLXdpdGgtYmFyYmFyYS1jb3Jjb3Jhbi1NdEoyZk9CU3VUcC1hWlBuM0ljNDdyeC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiNTI6IFdoYXQgSSBMZWFybmVkIEZyb20gQmFkIEJvc3Nlc1wiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjY4ZmFmNjJiZTk3MTQ5YzI4MGViY2MyNTE3OGFhNzMxXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnVzaW5lc3MtdW51c3VhbC13aXRoLWJhcmJhcmEtY29yY29yYW4tTXRKMmZPQlN1VHAtYVpQbjNJYzQ3cnguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiQnVzaW5lc3MgVW51c3VhbCB3aXRoIEJhcmJhcmEgQ29yY29yYW5cIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCYXJiYXJhIENvcmNvcmFuXCIsXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuLXgyTFFWUGtuTXNjLWFaUG4zSWM0N3J4LjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU4LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY4ZmFmNjJiZTk3MTQ5YzI4MGViY2MyNTE3OGFhNzMxL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgfSxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1c2luZXNzLXVudXN1YWwtd2l0aC1iYXJiYXJhLWNvcmNvcmFuLXgyTFFWUGtuTXNjLWFaUG4zSWM0N3J4LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+PHN0cm9uZz5JIGhhZCAyMyBib3NzZXMgYmVmb3JlIHN0YXJ0aW5nIG15IGJ1c2luZXNzIGFuZCBJIGtub3cgdGhhdCBhIGJhZCBvbmUgaXMgc3VyZSB0byBraWxsIHlvdXIgY29uZmlkZW5jZS4gU28gd2hhdCBkbyB5b3UgZG8gd2hlbiB5b3UgZG9uJ3Qgc2VlIGV5ZSB0byBleWU/IEkgYW5zd2VyIHlvdXIgcXVlc3Rpb25zIGFib3V0IGRlYWxpbmcgd2l0aCBhIGJhZCBib3NzIGFuZCBiZWNvbWluZyBhIGJldHRlciBsZWFkZXIuIDwvc3Ryb25nPlxcdTAwYTA8c3Ryb25nPldhbnQgdG8gaGVhciB5b3VyIHF1ZXN0aW9uIG9uIEJ1c2luZXNzIFVudXN1YWw/IENhbGwgbWUgYXQgODg4LUJBUkJBUkEgb3IgdHdlZXQgYXQgQGJhcmJhcmFjb3Jjb3JhbiB0byBhc2sgYSBxdWVzdGlvbiBmb3IgYSBmdXR1cmUgZXBpc29kZS4gRm9sbG93IEJ1c2luZXNzIFVudXN1YWwgd2l0aCBCYXJiYXJhIENvcmNvcmFuIG9uIGlIZWFydFJhZGlvLCBvciBzdWJzY3JpYmUgd2hlcmV2ZXIgeW91IGxpc3RlbiB0byBwb2RjYXN0cy4gPC9zdHJvbmc+XFx1MDBhMDxzdHJvbmc+VGhpcyBlcGlzb2RlIG9mIEJ1c2luZXNzIFVudXN1YWwgd2l0aCBCYXJiYXJhIENvcmNvcmFuIGlzIHByZXNlbnRlZCBieSBPbkRlY2sgQnVzaW5lc3MgTG9hbnMgKDwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vdXJsZGVmZW5zZS5wcm9vZnBvaW50LmNvbS92Mi91cmw/dT1odHRwLTNBX193d3cub25kZWNrLmNvbV9CYXJiYXJhJmFtcDtkPUR3TUZhUSZhbXA7Yz1HQzBOWlpoYUV3NkdPUVNqTUhJMmcxNWtfZHJFbFJvUG1PWWlLMmswZVo4JmFtcDtyPXh5OXBSZEc2bHBaNm9ndFJVTU52T0RuRzREZG1MVXhqWjJkOXhiVVpkYlU1VXNoRTIwbkVOdzY4QW4tYmhhUzQmYW1wO209aXl6Q3kzS2tCeUZEaEFaS1BOblhmUlpEd1ZpOXdhNHZndGtqcUFlZ09ZbyZhbXA7cz1BUi0wRTZmQ09Ta3RXMjhyTmdRcENlLWtFeXUxb2RGZ292bHFQRnlhdlNBJmFtcDtlPVxcXCI+PHN0cm9uZz5odHRwOi8vd3d3Lm9uZGVjay5jb20vQmFyYmFyYTwvc3Ryb25nPjwvYT48c3Ryb25nPik8L3N0cm9uZz5cXHUwMGEwPC9wPlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTU2NTk2ODYwMDk4LFxuICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiYjNhNzI1YWMtMjM0Mi0xMWU5LTgxNzgtN2ZiMWUyNjJlNDI4XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzk0YmM1NmZiMThjZjRlZjI4YTRlNmNlZjZkYjEwMDBkL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDk3MixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS85NGJjNTZmYjE4Y2Y0ZWYyOGE0ZTZjZWY2ZGIxMDAwZC8jZWRpdFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiODgyM2Y2OTk3OGFjNDA4OTlkNGU3MjY0MjA2ZGI4OWZcIixcbiAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vcGhpbG9zb3BoaXpldGhpcy5saWJzeW4uY29tL2VwaXNvZGUtMTMwLWRld2V5LWFuZC1saXBwbWFuLW9uLWRlbW9jcmFjeT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvODgyM2Y2OTk3OGFjNDA4OTlkNGU3MjY0MjA2ZGI4OWYvXCIsXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3BoaWxvc29waGl6ZS10aGlzLXN0ZXBoZW4td2VzdC1ZMlB2UmVseXJJTi1pdlFDZm1rcU1faC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiRXBpc29kZSAjMTMwIC4uLiBEZXdleSBhbmQgTGlwcG1hbiBvbiBEZW1vY3JhY3lcIixcbiAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgIFwiaWRcIjogXCIzYTJhNmRkZDU0OWY0ZGYwYjg3NmU3MzE1ZmExYTMxOVwiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3BoaWxvc29waGl6ZS10aGlzLXN0ZXBoZW4td2VzdC1ZMlB2UmVseXJJTi1pdlFDZm1rcU1faC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJQaGlsb3NvcGhpemUgVGhpcyFcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJTdGVwaGVuIFdlc3RcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcGhpbG9zb3BoaXplLXRoaXMtc3RlcGhlbi13ZXN0LW9TdWlDVzdCejhULWl2UUNmbWtxTV9oLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDc5LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzNhMmE2ZGRkNTQ5ZjRkZjBiODc2ZTczMTVmYTFhMzE5L1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9waGlsb3NvcGhpemUtdGhpcy1zdGVwaGVuLXdlc3Qtb1N1aUNXN0J6OFQtaXZRQ2Zta3FNX2guMzAweDMwMC5qcGdcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Ub2RheSB3ZSB0YWxrIGFib3V0IGEgZmFtb3VzIGRlYmF0ZSBmcm9tIHRoZSBlYXJseSAyMHRoIGNlbnR1cnkuXFx1MDBhMDwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjU5NDQzMjAzNixcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjA5Y2VhMWU4YTMyYzQ5YjM4M2Y4NWZmZjBmMTcyYTJlXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzg4MjNmNjk5NzhhYzQwODk5ZDRlNzI2NDIwNmRiODlmL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDEyOTgsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvODgyM2Y2OTk3OGFjNDA4OTlkNGU3MjY0MjA2ZGI4OWYvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImQ4YWQxZjE5OTQ2NTQzMTlhMDQxZTIzZDc2ZDZiNTk5XCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3Rib3lwb2Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2Q4YWQxZjE5OTQ2NTQzMTlhMDQxZTIzZDc2ZDZiNTk5L1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLVl3MlE1ZElwSzNBLWtteDBYSVpUQXlzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJCZXlvbmQgTWVhdCBib290cyBpdHMgbWVhdC1mb2N1c2VkIGludmVzdG9yLCBDb21jYXN0IChzaG9ja2luZ2x5KSBoaXRzIHJlY29yZCBoaWdoLCBhbmQgb25lIHN0YXJ0dXBcXHUyMDE5cyB3b3JzdCAxc3Qgd2Vla1wiLFxuICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImM1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1ZdzJRNWRJcEszQS1rbXgwWElaVEF5cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgQmVzdCBPbmUgWWV0XCIsXG4gICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgIH0sXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+UGxhbnQtYmFzZWQgbWVhdCBpbm5vdmF0b3IgQmV5b25kIE1lYXQgaGFkIGFuIGF3a3dhcmQgaW52ZXN0b3I6IFRoZSB3b3JsZFxcdTIwMTlzIDJuZCBiaWdnZXN0IG1lYXQgcHJvZHVjZXIsIFR5c29uIEZvb2RzIC0tIFNvIEJleW9uZCBNZWF0IGtpY2tlZCBpdCBvdXQgYmVmb3JlIGl0cyB1cGNvbWluZyBJUE8uIE9sZCBzY2hvb2wgY2FibGUgdGhyb3diYWNrIENvbWNhc3QgaXMgd2lubmluZyBldmVuIHRob3VnaCB5b3UgY3V0IHRoZSBjb3JkLiBBbmQgTHVtaW5hcnkgd2FzIHN1cHBvc2VkIHRvIGJlIHRoZSBmdXR1cmUgb2YgcG9kY2FzdGluZywgYnV0IGl0cyAxc3Qgd2VlayB3ZW50IHJlYWxseSBiYWRseS48L3A+PHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjUzMTc2MDc2MSxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjc2YWUyNGE2LTZhMjQtMTFlOS1hNzExLWRiZGM2NWE3Mzc3OFwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kOGFkMWYxOTk0NjU0MzE5YTA0MWUyM2Q3NmQ2YjU5OS9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA4MDMsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZDhhZDFmMTk5NDY1NDMxOWEwNDFlMjNkNzZkNmI1OTkvI2VkaXRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjExN2UzYjUwMjdmMTRmYjk4NDI1OTFhYWE0Yjc5NGViXCIsXG4gICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy5ucHIub3JnLzIwMTkvMDQvMjUvNzE3MDc1NTYwL3NwZWNpYWwtYW5ub3VuY2VtZW50LWZyb20tbGlmZS1raXQ/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzExN2UzYjUwMjdmMTRmYjk4NDI1OTFhYWE0Yjc5NGViL1wiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9maW5kLW1vbmV5LXlvdS1kaWRudC1rbm93LXlvdS1oYWQtbnByLVd1SG5oMFBvaXliLUlEVDFYUGtxNHJiLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJTcGVjaWFsIEFubm91bmNlbWVudCBGcm9tIExpZmUgS2l0XCIsXG4gICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICBcImlkXCI6IFwiNjEzYWE4MGVjNzI5NDA5ZWEwZGI0MjY1Y2YzZTM4OTlcIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9maW5kLW1vbmV5LXlvdS1kaWRudC1rbm93LXlvdS1oYWQtbnByLVd1SG5oMFBvaXliLUlEVDFYUGtxNHJiLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIkZpbmQgTW9uZXkgWW91IERpZG4ndCBLbm93IFlvdSBIYWRcIixcbiAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJOUFJcIixcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmluZC1tb25leS15b3UtZGlkbnQta25vdy15b3UtaGFkLW5wci1EbDdWWjg2S3lOQS1JRFQxWFBrcTRyYi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzYxM2FhODBlYzcyOTQwOWVhMGRiNDI2NWNmM2UzODk5L1wiLFxuICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBudWxsXG4gICAgICB9LFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmluZC1tb25leS15b3UtZGlkbnQta25vdy15b3UtaGFkLW5wci1EbDdWWjg2S3lOQS1JRFQxWFBrcTRyYi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkJhc2VkIG9uIHlvdXIgZmVlZGJhY2ssIHdlJ3ZlIGNyZWF0ZWQgbmV3IHdheXMgdG8gbGlzdGVuIHRvIExpZmUgS2l0LiBJZiB5b3UgbmV2ZXIgd2FudCB0byBtaXNzIGFuIGVwaXNvZGUsIHN1YnNjcmliZSB0byBMaWZlIEtpdDogQWxsIEd1aWRlcy4gV2UgYWxzbyBkaXZpZGVkIG91ciBndWlkZXMgYnkgc3ViamVjdCBcXHUyMDE0IGhlYWx0aCwgbW9uZXkgYW5kIHBhcmVudGluZyAtIGFuZCBtb3JlIHRvIGNvbWUgaW4gdGhlIGZ1dHVyZSBcXHUyMDE0IHNvIHlvdSBjYW4gc3Vic2NyaWJlIHRvIG9ubHkgdGhlIHRvcGljcyB5b3Ugd2FudCB0byBsZWFybiBhYm91dC5cIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTU1NjUxOTQ1MTAwMCxcbiAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImYwOTI1YjRjLWZjMmYtNDk0ZC1hY2YxLTBjMmZiOTY2MjdmZlwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8xMTdlM2I1MDI3ZjE0ZmI5ODQyNTkxYWFhNGI3OTRlYi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA1MyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8xMTdlM2I1MDI3ZjE0ZmI5ODQyNTkxYWFhNGI3OTRlYi8jZWRpdFwiXG4gICAgfVxuICBdLFxuICBcIm5leHRfZXBpc29kZV9wdWJfZGF0ZVwiOiAxNTU2NTE5NDUxMDAwXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwicG9kY2FzdHNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwicG9kY2FzdHNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzlcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInJzc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS9yc3NcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJSU1MgdXJsIG9mIHRoaXMgcG9kY2FzdC4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICAgIFwiZXBpc29kaWNcIixcbiAgICAgICAgICAgICAgXCJzZXJpYWxcIlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdHlwZSBvZiB0aGlzIHBvZGNhc3QgLSBlcGlzb2RpYyBvciBzZXJpYWwuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJoZWxsb0BleGFtcGxlLmNvbVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlbWFpbCBvZiB0aGlzIHBvZGNhc3QncyBwcm9kdWNlci4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwidXJsMVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ1cmwyXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInVybDNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiZ29vZ2xlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl5YzNNdVlYSjBNVGt1WTI5dEwycHZhRzR0YzI5c2IyMXZiaTF5WlhCdmNuUnpcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR29vZ2xlIFBvZGNhc3RzIHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJzcG90aWZ5X3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMnJRSlVQOVkzSHhlbWlXM0pIdDlXVlwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJTcG90aWZ5IHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vc3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWW91VHViZSB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwibGlua2VkaW5fdXJsXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTGlua2VkSW4gdXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZUNoYXQgdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBhdHJlb24gdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlNXN3g3cG9kY2FzdFwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2l0dGVyIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwic3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRmFjZWJvb2sgdXNlcm5hbWUgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9tdXNpYy5hbWF6b24uY29tL3BvZGNhc3RzLzZmYzZkNjgzLTllZjMtNDg1MC05YzM1LThlOGIxYTQyYTE0Ny90aGUtbG9jay1zcG9ydHNjYXN0XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFtYXpvbiBNdXNpYyB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwic3c3eDdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5zdGFncmFtIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrLiBJZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiY291bnRyeVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgY291bnRyeSB3aGVyZSB0aGlzIHBvZGNhc3QgaXMgcHJvZHVjZWQuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwid2Vic2l0ZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHA6Ly9zdzd4Ny5jb20vXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2Vic2l0ZSB1cmwgb2YgdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBsYW5ndWFnZSBvZiB0aGlzIHBvZGNhc3QuIFlvdSBjYW4gZ2V0IGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzIGZyb20gYEdFVCAvbGFuZ3VhZ2VzYC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJnZW5yZV9pZHNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZHMuXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgIDg2LFxuICAgICAgICAgICAgICAxNjAsXG4gICAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgICA4MixcbiAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiaXR1bmVzX2lkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4OTYzNTQ2MzgsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaVR1bmVzIGlkIGZvciB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiUGxhbmV0IEJyb2FkY2FzdGluZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgcHVibGlzaGVyIG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsgKDMwMHgzMDApLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImlzX2NsYWltZWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgY2xhaW1lZCBieSBpdHMgcHJvZHVjZXIgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjxwPlRoZSBTdGFyIFdhcnMgN3g3IFBvZGNhc3QgaXMgUmViZWwtcm91c2luZyBmdW4gZm9yIGV2ZXJ5ZGF5IEplZGksIGJldHdlZW4gNyBhbmQgMTQgbWludXRlcyBhIGRheSwgNyBkYXlzIGEgd2Vlay4gSm9pbiBob3N0IEFsbGVuIFZvaXZvZCBmb3IgU3RhciBXYXJzIG5ld3MsIGhpc3RvcnksIGludGVydmlld3MsIHRyaXZpYSwgYW5kIGRlZXAgZGl2ZXMgaW50byB0aGUgU3RhciBXYXJzIHN0b3J5IGFzIHRvbGQgaW4gbW92aWVzLCBib29rcywgY29taWNzLCBnYW1lcywgY2FydG9vbnMsIGFuZCBtb3JlLiBTdWJzY3JpYmUgbm93IGZvciB5b3VyIGRhaWx5IGRvc2Ugb2YgU3RhciBXYXJzIGpveS4gSXQncyBkZXN0aW55IHVubGVhc2hlZCE8L3A+XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSHRtbCBvZiB0aGlzIGVwaXNvZGUncyBmdWxsIGRlc2NyaXB0aW9uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcImd1ZXN0c1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBndWVzdHMuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjb2hvc3RzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNvaG9zdHMuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJzcG9uc29yc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBzcG9uc29ycy5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBjcm9zcyBwcm9tb3Rpb24gb3Bwb3J0dW5pdGllcyB3aXRoIG90aGVyIHBvZGNhc3RzLlwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4MSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgc2NvcmUgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZCBvbiBhIHNjYWxlIGZyb20gMCB0byAxMDAuXFxuSWYgdGhlIHNjb3JlIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAzMjQsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG90YWwgbnVtYmVyIG9mIGVwaXNvZGVzIGluIHRoaXMgcG9kY2FzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OS9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDEyOTEsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXZlcmFnZSBhdWRpbyBsZW5ndGggb2YgYWxsIGVwaXNvZGVzIG9mIHRoaXMgcG9kY2FzdC4gSW4gc2Vjb25kcy5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImQwNTcwOTJlNTdjYzRjZWQ4MGUwZWZhYTE5NjU5M2Q5XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHRoZSBtb3N0IHJlY2VudGx5IHB1Ymxpc2hlZCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBlcGlzb2RlIG1ldGFkYXRhIHZpYSBgR0VUIC9lcGlzb2Rlcy97aWR9YC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE1NTc0OTk3NzAwMDAsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHB1Ymxpc2hlZCBkYXRlIG9mIHRoZSBsYXRlc3QgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QuIEluIG1pbGxpc2Vjb25kc1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDcwNjY3OTAyMDAwLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgb2xkZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNjgsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSG93IGZyZXF1ZW50bHkgZG9lcyB0aGlzIHBvZGNhc3QgcmVsZWFzZSBhIG5ldyBlcGlzb2RlPyBJbiBob3Vycy4gRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAxNjYsIHRoZW4gaXQncyBldmVyeSAxNjYgaG91cnMgKG9yIHdlZWtseSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiMC41JVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBcImxhdGVzdF9lcGlzb2Rlc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMlwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVwaXNvZGUgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lm5wci5vcmcvMjAyMC8wMS8yMi83OTg1MzIxNzkvc29sZWltYW5pcy1pcmFuXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2ViIGxpbmsgb2YgdGhpcyBlcGlzb2RlLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImF1ZGlvXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyB1cmwgb2YgdGhpcyBlcGlzb2RlLCB3aGljaCBjYW4gYmUgcGxheWVkIGRpcmVjdGx5LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayBpbWFnZS5cXG5JZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiQ2VsZWJyYXRpb24gUmVjYXAsIEphc29uIEZyeSBhbmQgQ2hyaXN0aWFuIEJsYXV2ZWx0IEludGVydmlld3MgXFx1MjAxMyBTV0JXICMxMDFcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIG5hbWUuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJTdGFyIFdhcnMgN3g3IHwgU3RhciBXYXJzIE5ld3MsIEludGVydmlld3MsIGFuZCBNb3JlIVwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJwdWJsaXNoZXJcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA4MSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHNjb3JlIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQgb24gYSBzY2FsZSBmcm9tIDAgdG8gMTAwLlxcbklmIHRoZSBzY29yZSBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBwb2RjYXN0IG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlICgzMDB4MzAwKSB1cmwgZm9yIHRoaXMgZXBpc29kZS5cXG5JZiBhbiBlcGlzb2RlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIGltYWdlLCB0aGVuIHRoaXMgZmllbGQgd291bGQgYmUgdGhlIHVybCBvZiB0aGUgcG9kY2FzdCBhcnR3b3JrIHRodW1ibmFpbCBpbWFnZS5cXG5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjxwPkRpc25leSBjaGllZiBCb2IgSWdlciBzaGFyZWQgbmV3cyBhYm91dCBTdGFyIFdhcnMgbW92aWVzIGluIDIwMjAgYW5kIGJleW9uZCwgYnV0IHNvbWUgbWVkaWEgb3V0bGV0cyBnYXZlIGNvbmZsaWN0aW5nIHJlcG9ydHMgYWJvdXQgaXQuIEhlcmUncyB0aGUgcmVhbCBzY29vcC4gUHVuY2ggaXQhPC9wPiA8cD4qKipXZVxcdTIwMTlyZSBsaXN0ZW5lciBzdXBwb3J0ZWQhIEdvIHRvIGh0dHA6Ly9QYXRyZW9uLmNvbS9zdzd4NyB0byBkb25hdGUgdG8gdGhlIFN0YXIgV2FycyA3eDcgcG9kY2FzdCwgYW5kIHlvdVxcdTIwMTlsbCBnZXQgc29tZSBmYWJ1bG91cyByZXdhcmRzIGZvciB5b3VyIHBsZWRnZS4qKipcXHUwMGEwPC9wPiA8cD5DaGVjayBvdXQgU1c3eDcuY29tIGZvciBmdWxsIFN0YXIgV2FycyA3eDcgc2hvdyBub3RlcyBhbmQgbGlua3MsIGFuZCB0byBjb21tZW50IG9uIGFueSBvZiB0aGUgY29udGVudCBvZiB0aGlzIGVwaXNvZGUhIElmIHlvdSBsaWtlIHdoYXQgeW91J3ZlIGhlYXJkLCBwbGVhc2UgbGVhdmUgdXMgYSByYXRpbmcgb3IgcmV2aWV3IG9uIGlUdW5lcyBvciBTdGl0Y2hlciwgd2hpY2ggd2lsbCBhbHNvIGhlbHAgbW9yZSBwZW9wbGUgZGlzY292ZXIgdGhpcyBTdGFyIFdhcnMgcG9kY2FzdC48L3A+IDxwPkRvbid0IGZvcmdldCB0byBqb2luIHRoZSBTdGFyIFdhcnMgN3g3IGZ1biBvbiBGYWNlYm9vayBhdCBGYWNlYm9vay5jb20vU1c3eDcsIGFuZCBmb2xsb3cgdGhlIGJyZWFraW5nIG5ld3MgVHdpdHRlciBmZWVkIGF0IFR3aXR0ZXIuY29tL1NXN3g3UG9kY2FzdC4gV2UncmUgYWxzbyBvbiBQaW50ZXJlc3QgYW5kIEluc3RhZ3JhbSBhcyBcXFwiU1c3eDdcXFwiIHRvbywgYW5kIHdlJ2QgbG92ZSB0byBjb25uZWN0IHdpdGggeW91IHRoZXJlITwvcD5cXG5cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdG1sIG9mIHRoaXMgZXBpc29kZSdzIGZ1bGwgZGVzY3JpcHRpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTQ3NDg3MzIwMDAwMCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQdWJsaXNoZWQgZGF0ZSBmb3IgdGhpcyBlcGlzb2RlLiBJbiBtaWxsaXNlY29uZC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMi9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgZXBpc29kZSBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDU2NyxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyBsZW5ndGggb2YgdGhpcyBlcGlzb2RlLiBJbiBzZWNvbmRzLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGNvbnRhaW5zIGV4cGxpY2l0IGxhbmd1YWdlLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgb3Igbm90IHRoaXMgZXBpc29kZSdzIGF1ZGlvIGlzIGludmFsaWQuIFBvZGNhc3RlcnMgbWF5IGRlbGV0ZSB0aGUgb3JpZ2luYWwgYXVkaW8uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS8jZWRpdFwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVkaXQgdXJsIG9mIHRoaXMgZXBpc29kZSB3aGVyZSB5b3UgY2FuIHVwZGF0ZSB0aGUgYXVkaW8gdXJsIGlmIHlvdSBmaW5kIHRoZSBhdWRpbyBpcyBicm9rZW4uXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXAgdG8gMTAgbGF0ZXN0IGVwaXNvZGVzIGZyb20gdGhlc2UgcG9kY2FzdHMsIHNvcnRlZCBieSAqKnB1Yl9kYXRlKiouIFRoaXMgZmllbGQgc2hvd3MgdXAgb25seSB3aGVuICoqc2hvd19sYXRlc3RfZXBpc29kZXMqKiBpcyAxLlxcblwiXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIGEgcmFuZG9tIHBvZGNhc3QgZXBpc29kZVxuXG5GdW5jdGlvbiBOYW1lOiAqKmp1c3RfbGlzdGVuKipcblxuUmVjZW50bHkgcHVibGlzaGVkIGVwaXNvZGVzIGFyZSBtb3JlIGxpa2VseSB0byBiZSBmZXRjaGVkLiBHb29kIGx1Y2shXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50Lmp1c3RfbGlzdGVuKClcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLWp1c3RfbGlzdGVuKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcImlkXCI6IFwiYTYyYTBjYjFiMjdiNDUyMTkwYTJkYjMzOWRhNTZkNDFcIixcbiAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9hYnpmb290YmFsbHBvZGNhc3QucG9kYmVhbi5jb20vZS9lcDU0LXJhaXRoLXJvdmVycy1yZXZpZXctY2VsdGljLXByZXZpZXctYWJ6ZnAtc2Vhc29uLTIyMjMtcHJlZGljdG9yLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC9hNjJhMGNiMWIyN2I0NTIxOTBhMmRiMzM5ZGE1NmQ0MS9cIixcbiAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYWJ6LWZvb3RiYWxsLXBvZGNhc3QtYkJTNFBrNjJfUk8tUjYtemI5dnNrTWguMTQwMHgxNDAwLmpwZ1wiLFxuICBcInRpdGxlXCI6IFwiRVA1NDogUmFpdGggUm92ZXJzIFJldmlldyAvIENlbHRpYyBQcmV2aWV3IC8gQUJaRlAgU2Vhc29uIDIyLzIzIFByZWRpY3RvclwiLFxuICBcInBvZGNhc3RcIjoge1xuICAgIFwiaWRcIjogXCI5NzZjYmVlZDliMDM0ODkzOTQzNzc2Njg0ODA1ODZkZFwiLFxuICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFiei1mb290YmFsbC1wb2RjYXN0LWJCUzRQazYyX1JPLVI2LXpiOXZza01oLjE0MDB4MTQwMC5qcGdcIixcbiAgICBcInRpdGxlXCI6IFwiVGhlIEFCWiBGb290YmFsbCBQb2RjYXN0XCIsXG4gICAgXCJwdWJsaXNoZXJcIjogXCJUaGUgQUJaIEZvb3RiYWxsIFBvZGNhc3RcIixcbiAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYWJ6LWZvb3RiYWxsLXBvZGNhc3QtTjRRenBlSTNvaXQtUjYtemI5dnNrTWguMzAweDMwMC5qcGdcIixcbiAgICBcImxpc3Rlbl9zY29yZVwiOiAyOSxcbiAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzk3NmNiZWVkOWIwMzQ4OTM5NDM3NzY2ODQ4MDU4NmRkL1wiLFxuICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMTAlXCJcbiAgfSxcbiAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFiei1mb290YmFsbC1wb2RjYXN0LU40UXpwZUkzb2l0LVI2LXpiOXZza01oLjMwMHgzMDAuanBnXCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCI8cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPkl0J3MgV2VkbmVzZGF5IGFuZCB5b3Uga25vdyB3aGF0IHRoYXQgbWVhbnMhPC9wPlxcbjxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcXCI+XFx1MDBhMDwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPldlbGNvbWUgdG8gRXBpc29kZSA1NCBvZiB0aGUgQUJaIEZvb3RiYWxsIFBvZGNhc3QgYXMgR2FyeSAoPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS90Y2hvY2t5ODM/cz0yMCZhbXA7dD1FX2ZMdVdIUlNMUVRLQnRVWjVuTzJ3XFxcIj5AdGNob2NreTgzPC9hPiksIEdhdmluICg8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL1RoZVJvZ3VlODdcXFwiPkBUaGVSb2d1ZTg3PC9hPikgYW5kIGEgd2VsbC1yZXN0ZWQsIHJldHVybmluZyBHcmFoYW0gU3RlZWxlIGxvb2sgYmFjayBvdmVyIFN1bmRheSdzIDMtMCB3aW4gb3ZlciBSYWl0aCBSb3ZlcnMgdG8gcm91bmQgb2ZmIG91ciBQcmVtaWVyIFNwb3J0cyBDdXAgR3JvdXAgU3RhZ2UgZXNjYXBhZGVzLjwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPlxcdTAwYTA8L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5XZSB0aGVuIHRha2Ugb3VyIHJlZ3VsYXIgbG9vayBhdCBhbGwgb2YgdGhlIG5ld3MgY29taW5nIG91dCBvZiBBQjI0IGluIHRoZSBsYXN0IHdlZWsgKGJlYXV0aWZ1bGx5IHJlY29yZGVkIHByaW9yIHRvIHRoZSBuZXdzIHRoYXQgdGhlIERvbnMgaGFkIHNpZ25lZCBDYWwgUm9iZXJ0cyAoc2VlIEVQNTMuOTUpIGFuZCBIYXlkZW4gQ291bHNvbiAoc2VlIEVQNTQuMjUpKS48L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5cXHUwMGEwPC9wPlxcbjxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcXCI+QWZ0ZXIgdGhlIGJyZWFrLCB3ZSB0dXJuIG91ciBhdHRlbnRpb24gdG8gdGhlIHJldHVybiBvZiB0aGUgY2luY2ggYXMgdGhlIFNQRkwgUHJlbWllcnNoaXAga2lja3Mgb2ZmIHRoaXMgY29taW5nIHdlZWtlbmQgYW5kIHdlIHByZXZpZXcgb3VyIHRyaXAgdG8gQ2VsdGljIFBhcmsgYW5kIGFzayBpZiB3ZSBjYW4gY2F0Y2ggdGhlIGNoYW1waW9ucyBjb2xkIGFuZCBydWluIGZsYWcgZGF5IGJlZm9yZSB3ZSBwdXQgb3VyIGV4cGVydCBmb290YmFsbGluZyBrbm93bGVkZ2UgdG8gdGhlIHRlc3QgYXMgd2UgYnJpbmcgeW91IG91ciB2ZXJ5IG93biAyMi8yMyBzZWFzb24gcHJlZGljdGlvbnMhPC9wPlxcbjxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcXCI+XFx1MDBhMDwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPkxpa2Ugd2hhdCB3ZSBkbz9cXHUwMGEwIEtlZXAgdXMgZnVlbGVkIGZvciBmdXR1cmUgZXBpc29kZXMgYnkgYnV5aW5nIHVzIGEgYmVlciBvciBjb2ZmZWUgb3ZlciBhdCAtIDxhIGhyZWY9XFxcImh0dHBzOi8va28tZmkuY29tL2FiemZvb3RiYWxscG9kY2FzdFxcXCI+aHR0cHM6Ly9rby1maS5jb20vYWJ6Zm9vdGJhbGxwb2RjYXN0PC9hPiE8L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5cXHUwMGEwPC9wPlxcbjxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcXCI+U3VwcG9ydCBvdXIgQWJlcmRlZW4gdG8gR290aGVuYnVyZyBjaGFsbGVuZ2UgYnkgdmlzaXRpbmc6LSA8YSBocmVmPVxcXCJodHRwOi8vd3d3Lmp1c3RnaXZpbmcuY29tL2Nyb3dkZnVuZGluZy9hYnpmb290YmFsbHBvZGNhc3RcXFwiPkFCWkZQIEFiZXJkZWVuIHRvIEdvdGhlbmJ1cmcgQ2hhbGxlbmdlPC9hPjwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPlxcdTAwYTA8L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5XYW50IHRvIGVudGVyIG91ciBsYXRlc3QgZnVuZHJhaXNpbmcgcmFmZmxlIHdoZXJlIHlvdSBjYW4gd2luIGVpdGhlciAoMSkgSG9zcGl0YWxpdHkgZm9yIDQgaW4gdGhlIFRlZGR5IFNjb3R0IExvdW5nZSBmb3IgYSBob21lIGdhbWUgb2YgeW91ciBjaG9vc2luZyB0aGlzIHNlYXNvbiogb3IgKDIpIEEgc2lnbmVkIDIyLzIzIEFGQyBzaGlydD9cXHUwMGEwIFNpbXBseSBlLW1haWwgPGEgaHJlZj1cXFwibWFpbHRvOmFiemZvb3RiYWxscG9kY2FzdEBnbWFpbC5jb21cXFwiPmFiemZvb3RiYWxscG9kY2FzdEBnbWFpbC5jb208L2E+IHRvIGVudGVyLjwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPlxcdTAwYTA8L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5Gb2xsb3cgdGhlIHVzIG9uIG91ciBzb2NpYWwgbWVkaWEgY2hhbm5lbHM6LTwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPlxcdTAwYTA8L3A+XFxuPHAgc3R5bGU9XFxcInRleHQtYWxpZ246IGp1c3RpZnk7XFxcIj5Ud2l0dGVyIC0gPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9BYnpQb2RjYXN0P3M9MjAmYW1wO3Q9eEY3S0dxMWxaRVYybEpvblB4S3dqQVxcXCI+QEFielBvZGNhc3Q8L2E+PC9wPlxcbjxwIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBqdXN0aWZ5O1xcXCI+RmFjZWJvb2sgLSA8YSBocmVmPVxcXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vQUJaRm9vdGJhbGxQb2RjYXN0XFxcIj5AQUJaRm9vdGJhbGxQb2RjYXN0PC9hPjwvcD5cXG48cCBzdHlsZT1cXFwidGV4dC1hbGlnbjoganVzdGlmeTtcXFwiPkluc3RhZ3JhbSAtIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vYWJ6Zm9vdGJhbGxwb2RjYXN0L1xcXCI+QGFiemZvb3RiYWxscG9kY2FzdDwvYT48L3A+XCIsXG4gIFwicHViX2RhdGVfbXNcIjogMTY1ODg5OTUwMDAwMCxcbiAgXCJndWlkX2Zyb21fcnNzXCI6IFwiYWJ6Zm9vdGJhbGxwb2RjYXN0LnBvZGJlYW4uY29tL2NkMzIwOGYwLTQ0ZGItMzFhMS04YTUxLWRkYjE4NjhkYTAyY1wiLFxuICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2E2MmEwY2IxYjI3YjQ1MjE5MGEyZGIzMzlkYTU2ZDQxL1wiLFxuICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNjQwMCxcbiAgXCJleHBsaWNpdF9jb250ZW50XCI6IHRydWUsXG4gIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2E2MmEwY2IxYjI3YjQ1MjE5MGEyZGIzMzlkYTU2ZDQxLyNlZGl0XCJcbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcImlkXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiNGQ4MmU1MDMxNDE3NDc1NGEzYjYwMzkxMjQ0OGU4MTJcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFcGlzb2RlIGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGVwaXNvZGUgbWV0YWRhdGEgdmlhIGBHRVQgL2VwaXNvZGVzL3tpZH1gLlwiXG4gICAgfSxcbiAgICBcImxpbmtcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5ucHIub3JnLzIwMjAvMDEvMjIvNzk4NTMyMTc5L3NvbGVpbWFuaXMtaXJhblwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYiBsaW5rIG9mIHRoaXMgZXBpc29kZS5cIlxuICAgIH0sXG4gICAgXCJhdWRpb1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXVkaW8gdXJsIG9mIHRoaXMgZXBpc29kZSwgd2hpY2ggY2FuIGJlIHBsYXllZCBkaXJlY3RseS5cIlxuICAgIH0sXG4gICAgXCJpbWFnZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBlcGlzb2RlLlxcbklmIGFuIGVwaXNvZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gaW1hZ2UsIHRoZW4gdGhpcyBmaWVsZCB3b3VsZCBiZSB0aGUgdXJsIG9mIHRoZSBwb2RjYXN0IGFydHdvcmsgaW1hZ2UuXFxuSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgIH0sXG4gICAgXCJ0aXRsZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIkNlbGVicmF0aW9uIFJlY2FwLCBKYXNvbiBGcnkgYW5kIENocmlzdGlhbiBCbGF1dmVsdCBJbnRlcnZpZXdzIFxcdTIwMTMgU1dCVyAjMTAxXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSBuYW1lLlwiXG4gICAgfSxcbiAgICBcInBvZGNhc3RcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBvZGNhc3QgbWV0YWRhdGEgdmlhIGBHRVQgL3BvZGNhc3RzL3tpZH1gLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiU3RhciBXYXJzIDd4NyB8IFN0YXIgV2FycyBOZXdzLCBJbnRlcnZpZXdzLCBhbmQgTW9yZSFcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwicHVibGlzaGVyXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJQbGFuZXQgQnJvYWRjYXN0aW5nXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgcHVibGlzaGVyIG5hbWUuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yayAoMzAweDMwMCkuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5L1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSByYW5raW5nIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQuXFxuRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAwLjUlLCB0aGVuIHRoaXMgcG9kY2FzdCBpcyBvbmUgb2YgdGhlIHRvcCAwLjUlIG1vc3QgcG9wdWxhciBzaG93cyBvdXQgb2YgYWxsIHBvZGNhc3RzIGdsb2JhbGx5LCByYW5rZWQgYnkgTGlzdGVuIFNjb3JlLlxcbklmIHRoZSByYW5raW5nIGlzIG5vdCBhdmFpbGFibGUsIGl0J2xsIGJlIG51bGwuIExlYXJuIG1vcmUgYXQgbGlzdGVubm90ZXMuY29tL2xpc3Rlbi1zY29yZVxcblwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRodW1ibmFpbCBpbWFnZSAoMzAweDMwMCkgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayB0aHVtYm5haWwgaW1hZ2UuXFxuXCJcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCI8cD5EaXNuZXkgY2hpZWYgQm9iIElnZXIgc2hhcmVkIG5ld3MgYWJvdXQgU3RhciBXYXJzIG1vdmllcyBpbiAyMDIwIGFuZCBiZXlvbmQsIGJ1dCBzb21lIG1lZGlhIG91dGxldHMgZ2F2ZSBjb25mbGljdGluZyByZXBvcnRzIGFib3V0IGl0LiBIZXJlJ3MgdGhlIHJlYWwgc2Nvb3AuIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XFxuXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSHRtbCBvZiB0aGlzIGVwaXNvZGUncyBmdWxsIGRlc2NyaXB0aW9uXCJcbiAgICB9LFxuICAgIFwicHViX2RhdGVfbXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDE0NzQ4NzMyMDAwMDAsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHVibGlzaGVkIGRhdGUgZm9yIHRoaXMgZXBpc29kZS4gSW4gbWlsbGlzZWNvbmQuXCJcbiAgICB9LFxuICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNGQ4MmU1MDMxNDE3NDc1NGEzYjYwMzkxMjQ0OGU4MTIvXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIGVwaXNvZGUgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgIH0sXG4gICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiA1NjcsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQXVkaW8gbGVuZ3RoIG9mIHRoaXMgZXBpc29kZS4gSW4gc2Vjb25kcy5cIlxuICAgIH0sXG4gICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgIH0sXG4gICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIG9yIG5vdCB0aGlzIGVwaXNvZGUncyBhdWRpbyBpcyBpbnZhbGlkLiBQb2RjYXN0ZXJzIG1heSBkZWxldGUgdGhlIG9yaWdpbmFsIGF1ZGlvLlwiXG4gICAgfSxcbiAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvI2VkaXRcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJFZGl0IHVybCBvZiB0aGlzIGVwaXNvZGUgd2hlcmUgeW91IGNhbiB1cGRhdGUgdGhlIGF1ZGlvIHVybCBpZiB5b3UgZmluZCB0aGUgYXVkaW8gaXMgYnJva2VuLlwiXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIGEgY3VyYXRlZCBsaXN0IG9mIHBvZGNhc3RzIGJ5IGlkXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfY3VyYXRlZF9wb2RjYXN0c19saXN0X2J5X2lkKipcblxuR2V0IGRldGFpbGVkIG1ldGEgZGF0YSBvZiBhbGwgcG9kY2FzdHMgaW4gYSBzcGVjaWZpYyBjdXJhdGVkIGxpc3QuXG5UaGlzIGVuZHBvaW50IHJldHVybnMgc2FtZSBkYXRhIGFzIGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzL1xuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX2N1cmF0ZWRfcG9kY2FzdHNfbGlzdF9ieV9pZChpZD0nU0RGS2R1eUo0N3InKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItY3VyYXRlZF9wb2RjYXN0cy1pZCkuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJpZFwiOiBcIlNERktkdXlKNDdyXCIsXG4gIFwidGl0bGVcIjogXCIxNiBCcmlsbGlhbnQgSW5kaWFuIFBvZGNhc3RzIFRoYXQnbGwgTWFrZSBZb3UgQSBGdW5uZXIsIFNtYXJ0ZXIsIEJldHRlciBJbmZvcm1lZCBQZXJzb25cIixcbiAgXCJ0b3RhbFwiOiAxNixcbiAgXCJwb2RjYXN0c1wiOiBbXG4gICAge1xuICAgICAgXCJpZFwiOiBcImM0NjNkNTk4MGI4ZTQ4MGZiNzhkYjZiM2VkNmJlMTE1XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vbWFlZGluaW5kaWEubGlic3luLmNvbS9tYWVkaW5pbmRpYVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJtYWVkaW5pbmRpYUBnbWFpbC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXRZV1ZrYVc1cGJtUnBZUzVzYVdKemVXNHVZMjl0TDIxaFpXUnBibWx1WkdsaFwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMFFoempBMnpLZEtnSVFzZDJsdEh0cD9zaT0xRzZudTFZblJLaU05WFBnanMzZnl3XCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIm1hZWRpbmluZGlhXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwibWFlZGluaW5kaWFcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIm1hZWRpbmluZGlhXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hZWQtaW4taW5kaWEtbWFlZC1pbi1pbmRpYS03Zmd6QVFzQ1JteS15Mm9RVHdNTjczcC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiTWFlZCBpbiBJbmRpYVwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiSW5kaWFcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3Lm1hZWRpbmluZGlhLmluL21hZWQtaW4taW5kaWE/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICAxMDAsXG4gICAgICAgIDEwMSxcbiAgICAgICAgMTM0XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTAwOTE5NzU5NixcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiTWFlZCBpbiBJbmRpYVwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFlZC1pbi1pbmRpYS1tYWVkLWluLWluZGlhLXA5UDJZSWZlUWwzLXkyb1FUd01ONzNwLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogdHJ1ZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJNYWVkIGluIEluZGlhIC0gSW5kaWEncyBmaXJzdCBpbmRpZSBtdXNpYyBwb2RjYXN0IHRoYXQgc2hvd2Nhc2VzIHRoZSBiZXN0IEluZGlhbiBpbmRlcGVuZGVudCBtdXNpY2lhbnMgZnJvbSBJbmRpYSBhbmQgYWJyb2FkLiBFYWNoIGVwaXNvZGUgcHJlc2VudHMgYW4gaW50ZXJ2aWV3IHdpdGggYW4gYXJ0aXN0L2JhbmQgYWxvbmcgd2l0aCBhbiBleGNsdXNpdmUgc3RyaXBwZWQgZG93biBzZXNzaW9uIG9yIGFjb3VzdGljIHJlbmRpdGlvbnMgb2YgdGhlaXIgb3JpZ2luYWwgbXVzaWMuIFRoZSB3ZWVrbHkgc2hvdyBwcmlkZXMgaXRzZWxmIG9uIGJlaW5nIHRoZSBkZXN0aW5hdGlvbiBmb3IgbmV3IG11c2ljLCBsaXR0bGUga25vd24gc3RvcmllcywgYW5kIHVucmVsZWFzZWQgbXVzaWMgbmV2ZXIgaGVhcmQgYmVmb3JlLlxcblxcbkl0IGZlYXR1cmVzIGFsbCBraW5kcyBvZiBhcnRpc3RzIGZyb20gbmV3LWNvbWVycyB0byB2ZXRlcmFucyBhbmQgdW5kZXIgYSB2YXJpZXR5IG9mIGdlbnJlcyBmcm9tIGhpcCBob3AsIGJsdWVzLCBzb3VsLCB0byBmb2xrLCBwdW5rLCByb2NrLCBhbmQgZXZlcnl0aGluZyBpbiBiZXR3ZWVuLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDUsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDI5NixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYzQ2M2Q1OTgwYjhlNDgwZmI3OGRiNmIzZWQ2YmUxMTUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMzA4NyxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJkN2Y4YWMwMjcyMzM0Yzc2ODljZmI5ZjM0ZjFlNWEzNlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODA5MzQyNjAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQzNDM0NjIwMDI4NCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxNjgsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmODc1MmRkMDNlM2E0ZjhkODM4ZmMwN2NhYjk1M2MwYlwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwOi8vZmVlZHMuZmVlZGJ1cm5lci5jb20vdGhlaW50ZXJzZWN0aW9uSU5cIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwidGhlaW50ZXJzZWN0aW9uQGF1ZGlvbWF0aWMuaW5cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcIlwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaW50ZXJzZWN0aW9uLXRoZS1pbnRlcnNlY3Rpb24taXMxQ0lMT0RkcW0tTFRtek1iMDV0RkIuMTUweDE1MC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgSW50ZXJzZWN0aW9uXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vc291bmRjbG91ZC5jb20vdXNlci00OTU4NDU1NDM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICAxMjIsXG4gICAgICAgIDEyNVxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDk4MTQ1NjE1NixcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiVGhlIEludGVyc2VjdGlvblwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWludGVyc2VjdGlvbi10aGUtaW50ZXJzZWN0aW9uLWlzMUNJTE9EZHFtLUxUbXpNYjA1dEZCLjE1MHgxNTAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBieSBUaGUgSW50ZXJzZWN0aW9uXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA1OSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZjg3NTJkZDAzZTNhNGY4ZDgzOGZjMDdjYWI5NTNjMGIvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogOTM4LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcImE5ZTRiMjg3MmEzNzQ2YzhhOGRmNTBmNWZjNTNmOWZhXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTQ1MTIxNzQ3MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDI3OTc1ODI1MDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDc1MSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCIxMGExZmYxNTkwNDU0ODk3ODM1NWZmNjkxNjZiMjU3OFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3d3dy5hcnJlLmNvLmluL2FwcGxlLXBvZGNhc3QtcnNzL1wiLFxuICAgICAgXCJ0eXBlXCI6IFwic2VyaWFsXCIsXG4gICAgICBcImVtYWlsXCI6IFwidHJpYWxieWVycm9yQGFycmUuY28uaW5cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OTNkM2N1WVhKeVpTNWpieTVwYmk5aGNIQnNaUzF3YjJSallYTjBMWEp6Y3k4PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RyaWFsLWJ5LWVycm9yLXRoZS1hYXJ1c2hpLWZpbGVzLWFycmUtSFc1LVBNcnBKNmctLWhsZWIweklFUEMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRyaWFsIGJ5IEVycm9yIHwgVGhlIEFhcnVzaGkgRmlsZXNcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vd3d3LmFycmUuY28uaW4vc2VyaWVzL2FhcnVzaGk/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDEyMixcbiAgICAgICAgNjdcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxNDM3NTA0NjAxLFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJBcnJlXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90cmlhbC1ieS1lcnJvci10aGUtYWFydXNoaS1maWxlcy1hcnJlLVBkSFVZTGxRcTFULS1obGViMHpJRVBDLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHJpYWwgYnkgRXJyb3IsIEFuIEFyclxcdTAwZTktU2Fhdm4gT3JpZ2luYWwsIHByb2R1Y2VkIGJ5IEphbXVuLCBpcyBhZGFwdGVkIGZyb20gQXZpcm9vayBTZW5cXHUyMDE5cyBoYXVudGluZyBib29rIEFhcnVzaGksIGlzIGFuIGVpZ2h0LXBhcnQgaW52ZXN0aWdhdGl2ZSBhdWRpbyBzZXJpZXMgdGhhdCBuYXJyYXRlcyB0aGUgc3Rvcnkgb2YgdGhlIE5vaWRhIGRvdWJsZSBtdXJkZXIsIGFuZCB0aGUgY29udHJvdmVyc2lhbCB0cmlhbCB0aGF0IGNvbnZpY3RlZCB0aGUgVGFsd2Fycy4gRm9sbG93IGludmVzdGlnYXRpdmUgam91cm5hbGlzdCBOaXNoaXRhIEpoYSBhcyBzaGUgdHVybnMgYSBsZW5zIG9uIHRoZSBtdXJreSBkZXRhaWxzIG9mIHRoZSBjYXNlIHRvIHNlZSB3aGV0aGVyIGp1c3RpY2UgdHJ1bHkgaGFzIGJlZW4gc2VydmVkLiBcXG5cXG5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQyLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAxNixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTBhMWZmMTU5MDQ1NDg5NzgzNTVmZjY5MTY2YjI1NzgvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTI3NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCI3ZDA4NGMxOWQwMTg0ZTMwYWRlNTU3YTc0YWY1ODVmYVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTQ2ODE4MzY3MTAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQ2MjEzNTUzNTAwMCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAxMDAsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjAwYzVkMDYxYmUzZDQyYmI5NTRiN2EwNWRjMDQ0MTY2XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMuc291bmRjbG91ZC5jb20vdXNlcnMvc291bmRjbG91ZDp1c2VyczoxNTI5NzM5OTEvc291bmRzLnJzc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogbnVsbCxcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW1aV1ZrY3k1emIzVnVaR05zYjNWa0xtTnZiUzkxYzJWeWN5OXpiM1Z1WkdOc2IzVmtPblZ6WlhKek9qRTFNamszTXprNU1TOXpiM1Z1WkhNdWNuTnpcIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcIlwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJjaGVhcGFkdmVudHVyZXNcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJ0aGVhZHZlbnR1cmVzb2ZjaGVhcGJlZXJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hZHZlbnR1cmVzLW9mLWNoZWFwLWJlZXItYWR2ZW50dXJlcy1vZi1fSkFCNGJ0d2d1UC12a1pmU2gtVEpDdC4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiQWR2ZW50dXJlcyBvZiBDaGVhcCBCZWVyXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJJbmRpYVwiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3d3dy5hZHZlbnR1cmVzb2ZjaGVhcGJlZXIuaW4/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICAxMDAsXG4gICAgICAgIDEwMixcbiAgICAgICAgMTIyLFxuICAgICAgICAxMzNcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMDM1MTY5MTY4LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJBZHZlbnR1cmVzIG9mIENoZWFwIEJlZXJcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2FkdmVudHVyZXMtb2YtY2hlYXAtYmVlci1hZHZlbnR1cmVzLW9mLXRzenhpQlRmbHFjLXZrWmZTaC1USkN0LjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2VsY29tZSB0byBhIHBvZGNhc3Qgd2hlcmUgU2lkZGhhbnQgTWVodGEsIEthcmFuIEFnYXJ3YWwgYW5kIFN1eWFzaCBCYXJ2ZSBoZWFkIG91dCBpbnRvIHRoZSBjaXR5IG9mIE11bWJhaSBhbmQgcmV2aWV3IHNvbWUgYXdlc29tZSBjaGVhcCBiYXJzIHwgSG9zdHM6IFNpZGRoYW50IE1laHRhLCBLYXJhbiBBZ2Fyd2FsIGFuZCBTdXlhc2ggQmFydmUgfCBPcGVuaW5nIFRoZW1lOiBGb2cgKyBTdHJvYmUgYnkgQmxlayB8IE11c2ljOiBBbWFuIEFnYXJ3YWwgfCBQcm9kdWNlZCBieSBIaXQsIEtpdGFudSAmIFNhbmR3aWNoXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiA1LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8wMGM1ZDA2MWJlM2Q0MmJiOTU0YjdhMDVkYzA0NDE2Ni9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxOTc5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHRydWUsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiMmZmOTFkYmJmNmU1NDQ0Njg1MDFlMWFmNWM0YjhlNjZcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE1MTUzOTMxMzAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE1MDQ1OTAxMTkwMDQsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogNjM4LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogbnVsbFxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImZmMTgwYzI3MWJlMjQ5ZTliOTRhOGJjM2Q4MGJiMDk0XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vc3RhdGljLmFkb3JpbGFicy5jb20vZmVlZC93YXRjaGEueG1sXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcInNob3dzQGluZHVzdm94LmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5emRHRjBhV011WVdSdmNtbHNZV0p6TG1OdmJTOW1aV1ZrTDNkaGRHTm9ZUzU0Yld3PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvN3R2bnh0a2VBWUF0eXM1M2FxWUFWc1wiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy93YXRjaGEtaXZtLXBvZGNhc3RzLVF2MldPWU55ejVWLUhFdm4tTFM3dXlvLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJXYXRjaGEhXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vaXZtcG9kY2FzdHMuY29tL3dhdGNoYT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDY4LFxuICAgICAgICAxMDAsXG4gICAgICAgIDEwMSxcbiAgICAgICAgMTAzXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTA3NjIyMzk1OCxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSVZNIFBvZGNhc3RzXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy93YXRjaGEtaXZtLXBvZGNhc3RzLXdTSFpWcS1pX1RKLUhFdm4tTFM3dXlvLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogdHJ1ZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJGaWxtIGNyaXRpYyBhbmQgd3JpdGVyIEFuaXJ1ZGRoYSBHdWhhIHRhbGtzIGFib3V0IHRoZSBmaWxtcyBhbmQgVFYgc2hvd3MgY3VycmVudGx5IG9uIGhpcyBwbGF5bGlzdCwgYW5kIHJlY29tbWVuZHMgdGhlIGJlc3Qgb2YgdGhlbS4gRmVhdHVyZSBmaWxtcywgZG9jdW1lbnRhcmllcywgdGVsZXZpc2lvbiBzaG93cywgd2ViIHNlcmllcywgWW91VHViZSB2aWRlb3M7IGNvbWUsIFdhdGNoYSEgd2l0aCBAQW5pR3VoYS5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IG51bGwsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDEwLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mZjE4MGMyNzFiZTI0OWU5Yjk0YThiYzNkODBiYjA5NC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyMzk5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjcxZWY4YTI1ZDA0MDQxM2JiNmVhNGJkNWNiN2U1N2E3XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNDU5MTQzMDAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDUzMDk1Njc2MDA5LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE2NyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJjNDAxODhhMWE1MTI0OWEzYmFmYjExNzkzYTAxMTM1OVwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL2ZlZWRzLnNvdW5kY2xvdWQuY29tL3VzZXJzL3NvdW5kY2xvdWQ6dXNlcnM6OTA3MzIyNzIvc291bmRzLnJzc1wiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJzeW50aGVzaXN0YWxrQGdtYWlsLmNvbVwiLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5bVpXVmtjeTV6YjNWdVpHTnNiM1ZrTG1OdmJTOTFjMlZ5Y3k5emIzVnVaR05zYjNWa09uVnpaWEp6T2prd056TXlNamN5TDNOdmRXNWtjeTV5YzNNPVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvM1g4UEtjTTNaNVBUa1dhdzFINlB1YVwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zeW50YWxrLXN5bnRhbGstT184cUtneTBlV2QtajJuRkJVVkR6cV8uMTAwNngxMDA2LmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlN5blRhbGtcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHBzOi8vYXBwc3RvLnJlL2luL3NiN3JsYi5pP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgMTIyLFxuICAgICAgICAxMjZcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA4OTg1NzM4NzAsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIlN5blRhbGtcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N5bnRhbGstc3ludGFsay1Bc2NiTVB6aDkyZC1qMm5GQlVWRHpxXy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImYocSkgPSBJcyBldmVyeXRoaW5nIG1vdmluZz8gKCNUU0FNKVxcblxcblN5blRhbGsgaXMgYSBmcmVld2hlZWxpbmcgaW50ZXJkaXNjaXBsaW5hcnkgdGFsayBzaG93IHdpdGggYSBwaGlsb3NvcGhpY2FsIGFwcHJvYWNoIHRvIHVuZGVyc3RhbmRpbmcgdGhlIHdvcmxkIGZyb20gYSBsb25nIHRlcm0gcGVyc3BlY3RpdmUuXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiAzMyxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMTcyLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNDAxODhhMWE1MTI0OWEzYmFmYjExNzkzYTAxMTM1OS9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA0MDU5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjA5ZDQ1NGE1ZTlhMjRlN2Y4YzIxYzY1N2Q4NDQ3OWQ5XCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNjI2MDQ4MDAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDA1MTkxODU2MTcxLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDQ2OSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjI0ZWNlMWQwOTIyZDRkOWE5NjU5ZTllNmNiMmIyNDFlXCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vZmVlZHMuc2ltcGxlY2FzdC5jb20vNmRqMVc4QzJcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwiaGVsbG9AbmVpbHBhdGVsLmNvXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTltWldWa2N5NXphVzF3YkdWallYTjBMbU52YlM4MlpHb3hWemhETWc9PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMGJaRVNyaXV4UTNYVVZWTjlFcHNNd1wiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJJbmRpYW5zdGFydHVwc2hcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJpbmRpYW5zdGFydHVwc2hvd1wiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1pbmRpYW4tc3RhcnR1cC1zaG93LW5laWwtcGF0ZWwtUVdkanlDQlR3UHItOTU3NHkxQ0tVOGouMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBJbmRpYW4gU3RhcnR1cCBTaG93XCIsXG4gICAgICBcImNvdW50cnlcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vd3d3LmluZGlhbnN0YXJ0dXBzaG93LmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDkzLFxuICAgICAgICA5NSxcbiAgICAgICAgMTI3LFxuICAgICAgICAxMjksXG4gICAgICAgIDEzMVxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEwMzE1OTA3MTYsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIk5laWwgUGF0ZWxcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1pbmRpYW4tc3RhcnR1cC1zaG93LW5laWwtcGF0ZWwtZXRySFQyNEtvWHEtOTU3NHkxQ0tVOGouMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIFdlZWtseSBQb2RjYXN0IFNob3cgQWJvdXQgSW5kaWFuIFN0YXJ0dXBzXFxuRW50cmVwcmVuZXVycyAmIE1vcmUgIVxcbkhvc3RlZCBieSBOZWlsIFBhdGVsICYgRnJpZW5kc1wiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDIsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDE5MyxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMjRlY2UxZDA5MjJkNGQ5YTk2NTllOWU2Y2IyYjI0MWUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjI0MSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJjZTE1MGNjNzY1MjU0ZDE4OThiMGNiMmQ3ZGQ4NWNmOVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODI3MTYwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQzOTM2Njg4MDE5MSxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiA0NDIsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcImI5YWE4YmJiOWUzYzQyNjk4MDI3NWI4YjA1MmExMjE1XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHA6Ly9pc2hhYW5sYWxpdC5jb20vc2l4dGh3b3JsZHJhZGlvLz9mZWVkPXBvZGNhc3RcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IG51bGwsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc2l4dGgtd29ybGQtcmFkaW8tVG9mWUZYeEdPS24uNjAweDYwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJTaXh0aCBXb3JsZCBSYWRpb1wiLFxuICAgICAgXCJjb3VudHJ5XCI6IG51bGwsXG4gICAgICBcIndlYnNpdGVcIjogXCJodHRwOi8vaXNoYWFubGFsaXQuY29tL3NpeHRod29ybGRyYWRpbz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDk5LFxuICAgICAgICAxMjcsXG4gICAgICAgIDEzMSxcbiAgICAgICAgMTMzXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogOTQyOTY2OTg1LFxuICAgICAgXCJwdWJsaXNoZXJcIjogbnVsbCxcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NpeHRoLXdvcmxkLXJhZGlvLVRvZllGWHhHT0tuLjMwMHgzMDAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPGh0bWw+PGJvZHk+PGlmcmFtZSBhbGxvd3RyYW5zcGFyZW5jeT1cXFwidHJ1ZVxcXCIgbWFyZ2lud2lkdGg9XFxcIjBcXFwiIHdpZHRoPVxcXCIxMDAlXFxcIiBmcmFtZWJvcmRlcj1cXFwiMFxcXCIgc3JjPVxcXCJodHRwOi8vbWNjLmdvZGFkZHkuY29tL3BhcmsvcXpNMW96NXVySjU1cXpwaHBUVzZcXFwiIG1hcmdpbmhlaWdodD1cXFwiMFxcXCIgc3R5bGU9XFxcInZpc2liaWxpdHk6IHZpc2libGU7aGVpZ2h0OiAxMDAlOyBwb3NpdGlvbjphYnNvbHV0ZVxcXCI+PC9pZnJhbWU+XCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAzMCxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYjlhYThiYmI5ZTNjNDI2OTgwMjc1YjhiMDUyYTEyMTUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogNzc2LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcImMzMmEyM2VhNWM2MjRjYThhMGQ2NWEyMGNmNTU0MzkwXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNDgxMjcyNDY3MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDQ2MDU1MTExMDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDEyMSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCI0MTUxY2U5Mzc3YTY0MzVjOGFhYzdkMjNmMzA2MjQzZFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwczovL3N0YXRpYy5hZG9yaWxhYnMuY29tL2ZlZWQvZ2Vlay1mcnVpdC1wb2RjYXN0LnhtbFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJzaG93c0BpbmR1c3ZveC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXpkR0YwYVdNdVlXUnZjbWxzWVdKekxtTnZiUzltWldWa0wyZGxaV3N0Wm5KMWFYUXRjRzlrWTJGemRDNTRiV3c9XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJodHRwczovL29wZW4uc3BvdGlmeS5jb20vc2hvdy80aWVmOU4yc3puY2xEREhlcUtaWHF6XCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIkdlZWtGcnVpdEhRXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiaXZtcG9kY2FzdHNcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIml2bXBvZGNhc3RzXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2dlZWstZnJ1aXQtcG9kY2FzdC1pdm0tcG9kY2FzdHMtZUxiQWR4LUo4eXEtaE5nUjgxQWJCTzQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkdlZWsgRnJ1aXQgUG9kY2FzdFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL2l2bXBvZGNhc3RzLmNvbS9nZWVrZnJ1aXQ/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICA2OCxcbiAgICAgICAgMTAwLFxuICAgICAgICAxMDMsXG4gICAgICAgIDEyMlxuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDEwNzA4OTExMjEsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIklWTSBQb2RjYXN0c1wiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ2Vlay1mcnVpdC1wb2RjYXN0LWl2bS1wb2RjYXN0cy1sU195TGVqOUNBci1oTmdSODFBYkJPNC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IHRydWUsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2Ugc3BlbmQgd2F5IHRvbyBtdWNoIHRpbWUgZGlzY3Vzc2luZyBtaW51c2N1bGUgZmFjdHMsIGNoYXJhY3RlciBkeW5hbWljcywgc3RvcnkgYXJjcyBhbmQgdW5pcXVlIGNvbmNlcHRzIGluIHRoZSB3b25kZXJmdWwgd29ybGQgb2Ygc2NpZW5jZS1maWN0aW9uIGFuZCBvdmVyYWxsIG5lcmQgY3VsdHVyZS4gVGhpbmsgeW91IGRvIHRoYXQgdG9vPyBGaW5kIHVzIGFuZCBiZWNvbWUgb25lIHdpdGggdGhlIGdlZWtzISBBbmQgYmVsaWV2ZSBpdDsgdGhlIEZvcmNlIGlzIHRvdGFsbHkgc3Ryb25nIHdpdGggdXMuXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiAzNSxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMzQyLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80MTUxY2U5Mzc3YTY0MzVjOGFhYzdkMjNmMzA2MjQzZC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyNjQxLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjA3YmRiMTZkZjZkMDRiYTc4Mzg5NWFlOTZiOTQxOTYzXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTk1ODEwMTA2MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDUwODY4ODcwMzI3LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE2MCxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiNSVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjI2NDFlZDJjZTU1MjRiM2RhNDNiOGYxOWZlMGY1YWU5XCIsXG4gICAgICBcInJzc1wiOiBcImh0dHBzOi8vc3RhdGljLmFkb3JpbGFicy5jb20vZmVlZC9jeXJ1cy1zYXlzLnhtbFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJpdm1zaG93c0BwcmF0aWxpcGkuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl6ZEdGMGFXTXVZV1J2Y21sc1lXSnpMbU52YlM5bVpXVmtMMk41Y25WekxYTmhlWE11ZUcxc1wiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvNE5qY3RiMUFZM2NUdjB3T0taa1JYRVwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJjeXJ1c3NheXNpblwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIml2bXBvZGNhc3RzXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJpdm1wb2RjYXN0c1wiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jeXJ1cy1zYXlzLWl2bS1wb2RjYXN0cy1iSDJXU3lUNC1nTS0xcTJVRFRPNnp0Wi4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiQ3lydXMgU2F5c1wiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL2l2bXBvZGNhc3RzLmNvbS9jeXJ1c3NheXM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICA3NyxcbiAgICAgICAgOTksXG4gICAgICAgIDEzM1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDk3OTExODg0NSxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSVZNIFBvZGNhc3RzXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jeXJ1cy1zYXlzLWl2bS1wb2RjYXN0cy1CSFN3NE1WRXpmZy0xcTJVRFRPNnp0Wi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IHRydWUsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+QnJvYWRjYXN0aW5nIHRocm91Z2ggdGhlIHdlZWsgd2l0aCBhIHJvdGF0aW5nIHBhbmVsIG9mIGd1ZXN0cywgQ3lydXMgU2F5cyBpcyB0aGUgZGVmaW5pdGl2ZSBzaG93IG9uIGxpZmUgaW4gdXJiYW4gSW5kaWEsIHBvbGl0aWNzLCBzcG9ydHMsIGNpdmljIHNlbnNlLCB0cmFmZmljLCBraWRzLCBmb29kLCBhbmQgZXZlcnl0aGluZyB0aGF0IG1hdHRlcnMuIE1vc3RseS48L3A+XCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA1MyxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogMTAxMSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMjY0MWVkMmNlNTUyNGIzZGE0M2I4ZjE5ZmUwZjVhZTkvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMzE0NixcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIwZGVlYzFmMWEwOTE0Njg3YmJhOGNhMGMzZWQ4NGUzZVwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTY1ODk2ODUwMzAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQyNjgyOTQwMTAwNixcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyOSxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYjI1ZGEyOTdmMmNjNDM0MDk3NzczYWMxZGE1N2IxZWFcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cDovL2ZlZWRzLmZlZWRidXJuZXIuY29tL3RoZXJlYWxmb29kcG9kY2FzdFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJyZWFsZm9vZEBhdWRpb21hdGljLmluXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXJlYWwtZm9vZC1wb2RjYXN0LWF1ZGlvbWF0aWMtS2I5MWFNR1c4SkEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBSZWFsIEZvb2QgUG9kY2FzdFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3NvdW5kY2xvdWQuY29tL3RoZS1yZWFsLWZvb2QtcG9kY2FzdD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDEwMCxcbiAgICAgICAgMTAyXG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogOTg2MjUxMDI1LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJBdWRpb21hdGljXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtcmVhbC1mb29kLXBvZGNhc3QtYXVkaW9tYXRpYy1LYjkxYU1HVzhKQS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIklmIHlvdSBoYXZlIGFuIGFkdmVudHVyb3VzIHBhbGF0ZSwgam9pbiBWaWtyYW0gRG9jdG9yIGV2ZXJ5IGZvcnRuaWdodCBhcyBoZSBpbmR1bGdlcyBpbiBoaXMgYXBwZXRpdGUgZm9yIHRoZSBzdG9yaWVzIG9mIGZvb2QuIFRhc3RlIHRoZSBvcmlnaW5zLCBsZWdlbmRzIGFuZCBwcmFjdGljYWwgbWFnaWMgb2YgaW5ncmVkaWVudHMgYW5kIHJlY2lwZXMgdGhhdCByYW5nZSBmcm9tIHRoZSBldmVyeWRheSB0byB0aGUgZXh0cmFvcmRpbmFyeS5cXG5UaHJvdWdoIGFuY2VzdHJhbCBraXRjaGVucywgZ291cm1ldCByZXN0YXVyYW50cywgZXhvdGljIHZlZ2V0YWJsZSBmYXJtcywgbW9kZXJuIGFncmljdWx0dXJpc3RzLCBoZWlybG9vbSBhZmljaW9uYWRvcy4uLiBPbmUgb2YgSW5kaWFcXHUyMDE5cyBtb3N0IHJlc3BlY3RlZCBmb29kIHdyaXRlcnMgaGFzIGJlZW4gdGhlcmUsIGVhdGVuIHRoYXQgYW5kIGtub3dzIHRoYXQgdGhlcmUgaXMgbm8gbG92ZSBtb3JlIHNpbmNlcmUgdGhhbiB0aGUgbG92ZSBvZiBmb29kLlwiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogbnVsbCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogNDQsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2IyNWRhMjk3ZjJjYzQzNDA5Nzc3M2FjMWRhNTdiMWVhL1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDkxMSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCIxMjcxMTMyZjQyNzg0ODM0YjlhMTc2ZThiNDk3YjA2NlwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTQ4NTM0NjIyOTAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQyOTc5MzQ1MDAwMCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAzNTUsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYmRlYjk0YzdmNzE2NGIxNDgzN2RjZDA0NDlmNGE1ZWVcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cDovL2ZlZWRzLmZlZWRidXJuZXIuY29tL0FsbGluZGlhYmFrY2hvZFwiLFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgIFwiZW1haWxcIjogXCJBbGxpbmRpYWJha2Nob2RAZ21haWwuY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNEb3ZMMlpsWldSekxtWmxaV1JpZFhKdVpYSXVZMjl0TDBGc2JHbHVaR2xoWW1GclkyaHZaQT09XCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYWxsLWluZGlhLWJha2Nob2QtYWxsLWluZGlhLWJha2Nob2Qtd3gzck12NldmZEgta2djZEoteEttQUwuMTAyM3g5OTAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiQWxsIEluZGlhIEJha2Nob2RcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHA6Ly93d3cuYWxsaW5kaWFiYWtjaG9kLmNvbT91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDEzM1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDUzMzE0MDAwNyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiQWxsIEluZGlhIEJha2Nob2RcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2FsbC1pbmRpYS1iYWtjaG9kLWFsbC1pbmRpYS1iYWtjaG9kLTRrUE03MC1XX1VlLWtnY2RKLXhLbUFMLjMwMHgyOTAuanBnXCIsXG4gICAgICBcImlzX2NsYWltZWRcIjogZmFsc2UsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQWxsIEluZGlhIEJha2Nob2QgaXMgSW5kaWEncyBtb3N0IHdpZGVseSBoZWFyZCwgZWRnaWVzdCwgY29tZWR5IHBvZGNhc3QgLSBydW4gYnkgY29tZWRpYW5zIFRhbm1heSBCaGF0ICh3d3cudGFubWF5YmhhdC5jb20pIGFuZCBHdXJzaW1yYW5qZWV0IEtoYW1iYSAod3d3LmdraGFtYmEuY29tKSAtIEl0J3MgdGhlaXIgdGFrZSBvbiBldmVyeXRoaW5nIHRoYXQgbWFkZSBpdCB0byB0aGUgbmV3cy4gSXQncyB5b3VyIGZvcnRuaWdodGx5IGRvc2Ugb2YgZW50aXJlbHkgdW5jZW5zb3JlZCBiYWtjaG9kLiBTdWJzY3JpYmUgYXdheSEgXCIsXG4gICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgXCJndWVzdHNcIjogZmFsc2UsXG4gICAgICAgIFwiY29ob3N0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJzcG9uc29yc1wiOiBmYWxzZSxcbiAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjogZmFsc2VcbiAgICAgIH0sXG4gICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NCxcbiAgICAgIFwidG90YWxfZXBpc29kZXNcIjogOCxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYmRlYjk0YzdmNzE2NGIxNDgzN2RjZDA0NDlmNGE1ZWUvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTEzNSxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB0cnVlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjdiMjE2MjVkM2NhNjQxMWRhM2M1ZGZmODYyNDNhODdkXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTA2NDM2ODg2MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDg4ODA1NzI0MDA3LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDQ3NixcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMS41JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiZDIwMzg2NGE2N2ZiNDNiMWE5OGI3MTA3Y2FiZWFhNGJcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cDovL2ZlZWRzLmZlZWRidXJuZXIuY29tL091ckxhc3RXZWVrXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBcIm91cmxhc3R3ZWVrQGF1ZGlvbWF0aWMuaW5cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0RvdkwyWmxaV1J6TG1abFpXUmlkWEp1WlhJdVkyOXRMMDkxY2t4aGMzUlhaV1ZyXCIsXG4gICAgICAgIFwic3BvdGlmeV91cmxcIjogXCJcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvb3VyLWxhc3Qtd2Vlay1hdWRpb21hdGljLWVkOTZRNHBIZ3NFLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJPdXIgTGFzdCBXZWVrXCIsXG4gICAgICBcImNvdW50cnlcIjogXCJJbmRpYVwiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3NvdW5kY2xvdWQuY29tL291ci1sYXN0LXdlZWs/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwibGFuZ3VhZ2VcIjogXCJFbmdsaXNoXCIsXG4gICAgICBcImdlbnJlX2lkc1wiOiBbXG4gICAgICAgIDY3LFxuICAgICAgICAxMzNcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiA5OTIwNjg3ODEsXG4gICAgICBcInB1Ymxpc2hlclwiOiBcIkF1ZGlvbWF0aWNcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL291ci1sYXN0LXdlZWstYXVkaW9tYXRpYy1lZDk2UTRwSGdzRS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgXCJpc19jbGFpbWVkXCI6IGZhbHNlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgYnkgT3VyIExhc3QgV2Vla1wiLFxuICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgIFwiZ3Vlc3RzXCI6IGZhbHNlLFxuICAgICAgICBcImNvaG9zdHNcIjogZmFsc2UsXG4gICAgICAgIFwic3BvbnNvcnNcIjogZmFsc2UsXG4gICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMzcsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDQ1LFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9kMjAzODY0YTY3ZmI0M2IxYTk4YjcxMDdjYWJlYWE0Yi9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMjU5LFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjc1YTJlY2U0NTM4MTQ5ZTNiZGE0NWExNjMwNTk0OTZkXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNTc5NDE3MjAwMDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxNDMxMDYyNzM4MDQ0LFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDM0MyxcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMi41JVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiODM5MDdmMTU3NzcyNGFjMWIyYzZhYjE1NGY4ZTA1NjZcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9oaXN0b3J5b2ZpbmRpYXBvZGNhc3QubGlic3luLmNvbS9yc3NcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwidGhlaGlzdG9yeW9maW5kaWFwb2RjYXN0c0BnbWFpbC5jb21cIixcbiAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICBcInVybDFcIjogXCJcIixcbiAgICAgICAgXCJ1cmwyXCI6IFwiXCIsXG4gICAgICAgIFwidXJsM1wiOiBcIlwiLFxuICAgICAgICBcImdvb2dsZV91cmxcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OW9hWE4wYjNKNWIyWnBibVJwWVhCdlpHTmhjM1F1YkdsaWMzbHVMbU52YlM5eWMzTT1cIixcbiAgICAgICAgXCJzcG90aWZ5X3VybFwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzRoQ2lpc2RJbW9QM2Nza3k1aTEzekVcIixcbiAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiBcIlwiLFxuICAgICAgICBcImxpbmtlZGluX3VybFwiOiBcIlwiLFxuICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwiZmFjZWJvb2tfaGFuZGxlXCI6IFwiaGlzdG9yeW9maW5kaWFwb2RjYXN0XCIsXG4gICAgICAgIFwiYW1hem9uX211c2ljX3VybFwiOiBcIlwiLFxuICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjogXCJcIlxuICAgICAgfSxcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWhpc3Rvcnktb2YtaW5kaWEtcG9kY2FzdC1raXQtcGF0cmljay1ycFU1M3VGMGNrai1sRTY0a3FGc1RIQy4xNDAweDE0MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiVGhlIEhpc3Rvcnkgb2YgSW5kaWEgUG9kY2FzdFwiLFxuICAgICAgXCJjb3VudHJ5XCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgXCJ3ZWJzaXRlXCI6IFwiaHR0cDovL3d3dy5oaXN0b3J5b2ZpbmRpYXBvZGNhc3QuY29tP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImxhbmd1YWdlXCI6IFwiRW5nbGlzaFwiLFxuICAgICAgXCJnZW5yZV9pZHNcIjogW1xuICAgICAgICA2NyxcbiAgICAgICAgMTExLFxuICAgICAgICAxMTMsXG4gICAgICAgIDEyMixcbiAgICAgICAgMTI1XG4gICAgICBdLFxuICAgICAgXCJpdHVuZXNfaWRcIjogMTA0MTY4NDE4NyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiS2l0IFBhdHJpY2tcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1oaXN0b3J5LW9mLWluZGlhLXBvZGNhc3Qta2l0LXBhdHJpY2sta0NwWlc2Vi10blAtbEU2NGtxRnNUSEMuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGxpZ2h0IHdlZWtseSBwb2RjYXN0IGNvdmVyaW5nIHRoZSBoaXN0b3J5IG9mIEluZGlhLCBmcm9tIDZ0aCBjZW50dXJ5IEIuQy4gIEVuam95aW5nIHRoZSBwb2RjYXN0PyBQbGVhc2UgY29uc2lkZXIgZG9uYXRpbmcgdG8gdGhlIFNuZWhhbCBTaWRodSBNZW1vcmlhbCBGdW5kIChodHRwOi8vdGlueXVybC5jb20vcHJrdndsbClcIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU4LFxuICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiAxNDIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzgzOTA3ZjE1Nzc3MjRhYzFiMmM2YWIxNTRmOGUwNTY2L1wiLFxuICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI2MTgsXG4gICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICBcImxhdGVzdF9lcGlzb2RlX2lkXCI6IFwiMWI1OGNkMGM0MzEyNDIxZGIzNzZkMmFmNTE2NWYyNWVcIixcbiAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IDE2MTA1NjQ0MDAwMDAsXG4gICAgICBcImVhcmxpZXN0X3B1Yl9kYXRlX21zXCI6IDE0Mzc4MjA5OTUxNDAsXG4gICAgICBcInVwZGF0ZV9mcmVxdWVuY3lfaG91cnNcIjogNjIzLFxuICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJmZjdhYmM1YzdhNGQ0ZDAxOTEzNzYwMzc1MDU4ZGVhZFwiLFxuICAgICAgXCJyc3NcIjogXCJodHRwOi8vZmVlZHMuZmVlZGJ1cm5lci5jb20vS2Fhbk1hc3RpXCIsXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RpY1wiLFxuICAgICAgXCJlbWFpbFwiOiBudWxsLFxuICAgICAgXCJleHRyYVwiOiB7XG4gICAgICAgIFwidXJsMVwiOiBcIlwiLFxuICAgICAgICBcInVybDJcIjogXCJcIixcbiAgICAgICAgXCJ1cmwzXCI6IFwiXCIsXG4gICAgICAgIFwiZ29vZ2xlX3VybFwiOiBcIlwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwieW91dHViZV91cmxcIjogXCJcIixcbiAgICAgICAgXCJsaW5rZWRpbl91cmxcIjogXCJcIixcbiAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwicGF0cmVvbl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJ0d2l0dGVyX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImZhY2Vib29rX2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjogXCJcIixcbiAgICAgICAgXCJpbnN0YWdyYW1faGFuZGxlXCI6IFwiXCJcbiAgICAgIH0sXG4gICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2thYW5tYXN0aS1ob2V6YWF5LWZsSXlSRDhjNFZVLjYwMHg2MDAuanBnXCIsXG4gICAgICBcInRpdGxlXCI6IFwiS2Fhbk1hc3RpXCIsXG4gICAgICBcImNvdW50cnlcIjogbnVsbCxcbiAgICAgIFwid2Vic2l0ZVwiOiBudWxsLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDEzM1xuICAgICAgXSxcbiAgICAgIFwiaXR1bmVzX2lkXCI6IDUyNDU2MDM3MyxcbiAgICAgIFwicHVibGlzaGVyXCI6IFwiSG9lemFheVwiLFxuICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMva2Fhbm1hc3RpLWhvZXphYXktZmxJeVJEOGM0VlUuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiBmYWxzZSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8aHRtbD48Ym9keT48aWZyYW1lIG1hcmdpbmhlaWdodD1cXFwiMFxcXCIgbWFyZ2lud2lkdGg9XFxcIjBcXFwiIGFsbG93dHJhbnNwYXJlbmN5PVxcXCJ0cnVlXFxcIiBzdHlsZT1cXFwidmlzaWJpbGl0eTogdmlzaWJsZTtoZWlnaHQ6IDEwMCU7IHBvc2l0aW9uOmFic29sdXRlXFxcIiBzcmM9XFxcImh0dHA6Ly9tY2MuZ29kYWRkeS5jb20vcGFyay9yVDVoTEtjaE16cTJZYU92cnQ9PVxcXCIgd2lkdGg9XFxcIjEwMCVcXFwiIGZyYW1lYm9yZGVyPVxcXCIwXFxcIj48L2lmcmFtZT5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IG51bGwsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDMzLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mZjdhYmM1YzdhNGQ0ZDAxOTEzNzYwMzc1MDU4ZGVhZC9cIixcbiAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyMzIxLFxuICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiBcIjg0NzNmYmZiMWM3NjRiN2Y5NTE2OWFiZmI0OTdlYzljXCIsXG4gICAgICBcImxhdGVzdF9wdWJfZGF0ZV9tc1wiOiAxNDk1MjU5NDQ1MDAwLFxuICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiAxMzM3NDQ0NzYyMDAwLFxuICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IDE1NjgsXG4gICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBudWxsXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiMWRhYTJhMDQxNzFmNDRmNThmNGZiYTQyYjc3YTgyMDNcIixcbiAgICAgIFwicnNzXCI6IFwiaHR0cHM6Ly9zdGF0aWMuYWRvcmlsYWJzLmNvbS9mZWVkL3RmZy1zcG9ydHMtcG9kY2FzdC54bWxcIixcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICBcImVtYWlsXCI6IFwic2hvd3NAaW5kdXN2b3guY29tXCIsXG4gICAgICBcImV4dHJhXCI6IHtcbiAgICAgICAgXCJ1cmwxXCI6IFwiXCIsXG4gICAgICAgIFwidXJsMlwiOiBcIlwiLFxuICAgICAgICBcInVybDNcIjogXCJcIixcbiAgICAgICAgXCJnb29nbGVfdXJsXCI6IFwiaHR0cHM6Ly9wb2RjYXN0cy5nb29nbGUuY29tL2ZlZWQvYUhSMGNITTZMeTl6ZEdGMGFXTXVZV1J2Y21sc1lXSnpMbU52YlM5bVpXVmtMM1JtWnkxemNHOXlkSE10Y0c5a1kyRnpkQzU0Yld3PVwiLFxuICAgICAgICBcInNwb3RpZnlfdXJsXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMGxFa1NCSGhzaU5uV2VJV0dhalRqVlwiLFxuICAgICAgICBcInlvdXR1YmVfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwibGlua2VkaW5fdXJsXCI6IFwiXCIsXG4gICAgICAgIFwid2VjaGF0X2hhbmRsZVwiOiBcIlwiLFxuICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IFwiXCIsXG4gICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjogXCJcIixcbiAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IFwiXCIsXG4gICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiBcIlwiXG4gICAgICB9LFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90Zmctc3BvcnRzLXBvZGNhc3QtaXZtLXBvZGNhc3RzLVRuSjdQU29NQ2JBLTVNcTB1c1YzRTg0LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgIFwidGl0bGVcIjogXCJURkcgU3BvcnRzIFBvZGNhc3RcIixcbiAgICAgIFwiY291bnRyeVwiOiBcIlVuaXRlZCBTdGF0ZXNcIixcbiAgICAgIFwid2Vic2l0ZVwiOiBcImh0dHA6Ly9pdm1wb2RjYXN0cy5jb20vdGZnc3BvcnRzcG9kY2FzdD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJsYW5ndWFnZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgIFwiZ2VucmVfaWRzXCI6IFtcbiAgICAgICAgNjcsXG4gICAgICAgIDc3LFxuICAgICAgICA3OCxcbiAgICAgICAgODFcbiAgICAgIF0sXG4gICAgICBcIml0dW5lc19pZFwiOiAxMDYyMTY2OTc1LFxuICAgICAgXCJwdWJsaXNoZXJcIjogXCJJVk0gUG9kY2FzdHNcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RmZy1zcG9ydHMtcG9kY2FzdC1pdm0tcG9kY2FzdHMtSGpWZlByZ2h6ZHktNU1xMHVzVjNFODQuMzAweDMwMC5qcGdcIixcbiAgICAgIFwiaXNfY2xhaW1lZFwiOiB0cnVlLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRGRyBTcG9ydHMgcG9kY2FzdCBpcyB0aGUgcGxhY2UgdG8gY2hlY2sgaW4gZm9yIGRpc2N1c3Npb24gb24gSW5kaWFuIHNwb3J0cy4gV2UgdGFsayBhYm91dCBDcmlja2V0LCBGb290YmFsbCwgS2FiYWRkaSwgSG9ja2V5LCBBdGhsZXRpY3MgYW5kIG1vcmUgd2l0aCBhIHZhcmlldHkgb2YgZ3Vlc3RzIGFuZCByZWd1bGFyIGNvbnRyaWJ1dG9ycy5cIixcbiAgICAgIFwibG9va2luZ19mb3JcIjoge1xuICAgICAgICBcImd1ZXN0c1wiOiBmYWxzZSxcbiAgICAgICAgXCJjb2hvc3RzXCI6IGZhbHNlLFxuICAgICAgICBcInNwb25zb3JzXCI6IGZhbHNlLFxuICAgICAgICBcImNyb3NzX3Byb21vdGlvblwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIFwibGlzdGVuX3Njb3JlXCI6IG51bGwsXG4gICAgICBcInRvdGFsX2VwaXNvZGVzXCI6IDU2NSxcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMWRhYTJhMDQxNzFmNDRmNThmNGZiYTQyYjc3YTgyMDMvXCIsXG4gICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTY5NCxcbiAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjogXCJjNDE2YTNhZmVlOWY0OTdiODZmOTFlOTBkZjU1ZGZiMFwiLFxuICAgICAgXCJsYXRlc3RfcHViX2RhdGVfbXNcIjogMTU2MDI5OTQwMDAwMCxcbiAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjogMTQ0ODI4NjcyNjU2NCxcbiAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiAyNixcbiAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICB9XG4gIF0sXG4gIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LmJ1enpmZWVkLmNvbS9hbmRyZWJvcmdlcy8xNy1icmlsbGlhbnQtaW5kaWFuLXBvZGNhc3RzLXRoYXRsbC1tYWtlLXlvdS1hLWZ1bm5lci1zbWFydGU/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJUaGluayBhYm91dCBob3cgbXVjaCB5b3UgY2FuIHNvYWsgaW4gb24gdGhvc2UgbG9uZyBjb21tdXRlcy5cXFwiXCIsXG4gIFwicHViX2RhdGVfbXNcIjogMTU1NjU2MTkyODE2MSxcbiAgXCJzb3VyY2VfZG9tYWluXCI6IFwid3d3LmJ1enpmZWVkLmNvbVwiLFxuICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzE2LWJyaWxsaWFudC1pbmRpYW4tcG9kY2FzdHMtdGhhdGxsLVNERktkdXlKNDdyL1wiXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicHJvcGVydGllc1wiOiB7XG4gICAgXCJpZFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIlZiMDE3U3gzbDhGXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ3VyYXRlZCBsaXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGN1cmF0ZWQgbGlzdCBtZXRhZGF0YSB2aWEgYEdFVCAvY3VyYXRlZF9wb2RjYXN0cy97aWR9YC5cIlxuICAgIH0sXG4gICAgXCJ0aXRsZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIjcgQm9va2lzaCBQb2RjYXN0cyBmb3IgQXZpZCBSZWFkZXJzIE9uIHRoZSBHb1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1cmF0ZWQgbGlzdCBuYW1lLlwiXG4gICAgfSxcbiAgICBcInRvdGFsXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAyNSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdG90YWwgbnVtYmVyIG9mIHBvZGNhc3RzIGluIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgfSxcbiAgICBcInBvZGNhc3RzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyc3NcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3N3N3g3LmxpYnN5bi5jb20vcnNzXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUlNTIHVybCBvZiB0aGlzIHBvZGNhc3QuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidHlwZVwiOiB7XG4gICAgICAgICAgICBcImVudW1cIjogW1xuICAgICAgICAgICAgICBcImVwaXNvZGljXCIsXG4gICAgICAgICAgICAgIFwic2VyaWFsXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImVwaXNvZGljXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHR5cGUgb2YgdGhpcyBwb2RjYXN0IC0gZXBpc29kaWMgb3Igc2VyaWFsLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVtYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaGVsbG9AZXhhbXBsZS5jb21cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZW1haWwgb2YgdGhpcyBwb2RjYXN0J3MgcHJvZHVjZXIuIFRoaXMgZmllbGQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICBcInVybDFcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwidXJsMlwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ1cmwzXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImdvb2dsZV91cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9mZWVkL2FIUjBjSE02THk5eWMzTXVZWEowTVRrdVkyOXRMMnB2YUc0dGMyOXNiMjF2YmkxeVpYQnZjblJ6XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdvb2dsZSBQb2RjYXN0cyB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwic3BvdGlmeV91cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzJyUUpVUDlZM0h4ZW1pVzNKSHQ5V1ZcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiU3BvdGlmeSB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwieW91dHViZV91cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3N3N3g3XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIllvdVR1YmUgdXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImxpbmtlZGluX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxpbmtlZEluIHVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJ3ZWNoYXRfaGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2VDaGF0IHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInBhdHJlb25faGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXRyZW9uIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcInR3aXR0ZXJfaGFuZGxlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJTVzd4N3BvZGNhc3RcIixcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVHdpdHRlciB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZhY2Vib29rIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImFtYXpvbl9tdXNpY191cmxcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vbXVzaWMuYW1hem9uLmNvbS9wb2RjYXN0cy82ZmM2ZDY4My05ZWYzLTQ4NTAtOWMzNS04ZThiMWE0MmExNDcvdGhlLWxvY2stc3BvcnRzY2FzdFwiLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBbWF6b24gTXVzaWMgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBcImluc3RhZ3JhbV9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkluc3RhZ3JhbSB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImNvdW50cnlcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJVbml0ZWQgU3RhdGVzXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGNvdW50cnkgd2hlcmUgdGhpcyBwb2RjYXN0IGlzIHByb2R1Y2VkLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIndlYnNpdGVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwOi8vc3c3eDcuY29tL1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYnNpdGUgdXJsIG9mIHRoaXMgcG9kY2FzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYW5ndWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbGFuZ3VhZ2Ugb2YgdGhpcyBwb2RjYXN0LiBZb3UgY2FuIGdldCBhbGwgc3VwcG9ydGVkIGxhbmd1YWdlcyBmcm9tIGBHRVQgL2xhbmd1YWdlc2AuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZ2VucmVfaWRzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiR2VucmUgaWRzLlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgICAgMTM4LFxuICAgICAgICAgICAgICA4NixcbiAgICAgICAgICAgICAgMTYwLFxuICAgICAgICAgICAgICA2OCxcbiAgICAgICAgICAgICAgODIsXG4gICAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIml0dW5lc19pZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogODk2MzU0NjM4LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcImlUdW5lcyBpZCBmb3IgdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpc19jbGFpbWVkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGNsYWltZWQgYnkgaXRzIHByb2R1Y2VyIG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCI8cD5UaGUgU3RhciBXYXJzIDd4NyBQb2RjYXN0IGlzIFJlYmVsLXJvdXNpbmcgZnVuIGZvciBldmVyeWRheSBKZWRpLCBiZXR3ZWVuIDcgYW5kIDE0IG1pbnV0ZXMgYSBkYXksIDcgZGF5cyBhIHdlZWsuIEpvaW4gaG9zdCBBbGxlbiBWb2l2b2QgZm9yIFN0YXIgV2FycyBuZXdzLCBoaXN0b3J5LCBpbnRlcnZpZXdzLCB0cml2aWEsIGFuZCBkZWVwIGRpdmVzIGludG8gdGhlIFN0YXIgV2FycyBzdG9yeSBhcyB0b2xkIGluIG1vdmllcywgYm9va3MsIGNvbWljcywgZ2FtZXMsIGNhcnRvb25zLCBhbmQgbW9yZS4gU3Vic2NyaWJlIG5vdyBmb3IgeW91ciBkYWlseSBkb3NlIG9mIFN0YXIgV2FycyBqb3kuIEl0J3MgZGVzdGlueSB1bmxlYXNoZWQhPC9wPlwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkh0bWwgb2YgdGhpcyBlcGlzb2RlJ3MgZnVsbCBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxvb2tpbmdfZm9yXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgXCJndWVzdHNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgZ3Vlc3RzLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwiY29ob3N0c1wiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBpcyBsb29raW5nIGZvciBjb2hvc3RzLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFwic3BvbnNvcnNcIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3Igc3BvbnNvcnMuXCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgXCJjcm9zc19wcm9tb3Rpb25cIjoge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3IgY3Jvc3MgcHJvbW90aW9uIG9wcG9ydHVuaXRpZXMgd2l0aCBvdGhlciBwb2RjYXN0cy5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogODEsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHNjb3JlIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQgb24gYSBzY2FsZSBmcm9tIDAgdG8gMTAwLlxcbklmIHRoZSBzY29yZSBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0b3RhbF9lcGlzb2Rlc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMzI0LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvdGFsIG51bWJlciBvZiBlcGlzb2RlcyBpbiB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxMjkxLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF2ZXJhZ2UgYXVkaW8gbGVuZ3RoIG9mIGFsbCBlcGlzb2RlcyBvZiB0aGlzIHBvZGNhc3QuIEluIHNlY29uZHMuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgY29udGFpbnMgZXhwbGljaXQgbGFuZ3VhZ2UuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGF0ZXN0X2VwaXNvZGVfaWRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJkMDU3MDkyZTU3Y2M0Y2VkODBlMGVmYWExOTY1OTNkOVwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBpZCBvZiB0aGUgbW9zdCByZWNlbnRseSBwdWJsaXNoZWQgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNTU3NDk5NzcwMDAwLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgbGF0ZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJlYXJsaWVzdF9wdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTQ3MDY2NzkwMjAwMCxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgcHVibGlzaGVkIGRhdGUgb2YgdGhlIG9sZGVzdCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdC4gSW4gbWlsbGlzZWNvbmRzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidXBkYXRlX2ZyZXF1ZW5jeV9ob3Vyc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTY4LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhvdyBmcmVxdWVudGx5IGRvZXMgdGhpcyBwb2RjYXN0IHJlbGVhc2UgYSBuZXcgZXBpc29kZT8gSW4gaG91cnMuIEZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMTY2LCB0aGVuIGl0J3MgZXZlcnkgMTY2IGhvdXJzIChvciB3ZWVrbHkpLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgcmFua2luZyBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkLlxcbkZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMC41JSwgdGhlbiB0aGlzIHBvZGNhc3QgaXMgb25lIG9mIHRoZSB0b3AgMC41JSBtb3N0IHBvcHVsYXIgc2hvd3Mgb3V0IG9mIGFsbCBwb2RjYXN0cyBnbG9iYWxseSwgcmFua2VkIGJ5IExpc3RlbiBTY29yZS5cXG5JZiB0aGUgcmFua2luZyBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJDb21wbGV0ZSBtZXRhIGRhdGEgb2YgYWxsIHBvZGNhc3RzIGluIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgfSxcbiAgICBcInNvdXJjZV91cmxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3BhcmFkZS5jb20vNzE4OTEzL2FzaGxleV9qb2huc29uLzctYm9va2lzaC1wb2RjYXN0cy1mb3ItYXZpZC1yZWFkZXJzLW9uLXRoZS1nby9cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgb2YgdGhlIHNvdXJjZSBvZiB0aGlzIGN1cmF0ZWQgbGlzdC5cIlxuICAgIH0sXG4gICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIkNvbW11dGluZyB0byB3b3JrIGlzIGFsd2F5cyBiZXR0ZXIgd2hlbiB5b3UgaGF2ZSBhIGdyZWF0IG5ldyBwb2RjYXN0IHRvIGxpc3RlbiB0bywgYW5kIHRoaXMgeWVhciwgd2UgaGF2ZSBkaXNjb3ZlcmVkIHNvbWUgb2Ygb3VyIGZhdm9yaXRlIHBvZGNhc3RzIHlldCBmb3IgcmVhZGVycyBhbmQgYm9vay1sb3ZlcnMuIFRoZXNlIHBvZGNhc3RzIGZvciByZWFkZXJzIGVudGVydGFpbiB1cyBhbmQgcHJvdmlkZSBubyBzaG9ydGFnZSBvZiBuZXcgYm9vayByZWNvbW1lbmRhdGlvbnMgdG9vLlwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoaXMgY3VyYXRlZCBsaXN0J3MgZGVzY3JpcHRpb24uXCJcbiAgICB9LFxuICAgIFwicHViX2RhdGVfbXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDE1NTY4NDM0ODQzMDEsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHVibGlzaGVkIGRhdGUgb2YgdGhpcyBjdXJhdGVkIGxpc3QuIEluIG1pbGxpc2Vjb25kcy5cIlxuICAgIH0sXG4gICAgXCJzb3VyY2VfZG9tYWluXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwicGFyYWRlLmNvbVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBkb21haW4gbmFtZSBvZiB0aGUgc291cmNlIG9mIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgfSxcbiAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzctYm9va2lzaC1wb2RjYXN0cy1mb3ItYXZpZC1yZWFkZXJzLW9uLUgyci1UQ1dhaThLL1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBjdXJhdGVkIGxpc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBGZXRjaCBjdXJhdGVkIGxpc3RzIG9mIHBvZGNhc3RzXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfY3VyYXRlZF9wb2RjYXN0c19saXN0cyoqXG5cbkEgYnVuY2ggb2YgY3VyYXRlZCBsaXN0cyBmcm9tIG9ubGluZSBtZWRpYS4gRm9yIGVhY2ggbGlzdCwgeW91JiN4Mjc7bGwgZ2V0IGJhc2ljIGluZm8gb2YgdXAgdG8gNSBwb2RjYXN0cy4gVG8gZ2V0IGRldGFpbGVkIG1ldGEgZGF0YSBvZiBhbGwgcG9kY2FzdHMgaW4gYSBzcGVjaWZpYyBsaXN0LCB5b3UgbmVlZCB0byB1c2UgYEdFVCAvY3VyYXRlZF9wb2RjYXN0cy97aWR9YC4gV2UgYWRkIG5ldyBjdXJhdGVkIGxpc3RzIHRvIHRoZSBkYXRhYmFzZSBvbiBhIGRhaWx5IGJhc2lzLlxuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX2N1cmF0ZWRfcG9kY2FzdHNfbGlzdHMocGFnZT0yKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItY3VyYXRlZF9wb2RjYXN0cykuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0b3RhbFwiOiA0MTMwLFxuICBcImhhc19uZXh0XCI6IHRydWUsXG4gIFwicGFnZV9udW1iZXJcIjogMixcbiAgXCJoYXNfcHJldmlvdXNcIjogdHJ1ZSxcbiAgXCJjdXJhdGVkX2xpc3RzXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IFwiQWNld1F4Nk1iWWdcIixcbiAgICAgIFwidGl0bGVcIjogXCI3IHRlY2ggcG9kY2FzdHMgdG8gYmluZ2UgdGhpcyBzdW1tZXJcIixcbiAgICAgIFwidG90YWxcIjogNyxcbiAgICAgIFwicG9kY2FzdHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjEzYWM2NmRjOTQzYTRhMjhiOGJjZWQ3MWU1YTY0NjkwXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9veHljYXN0LVpjZnJIamdoVjd5LWRoc29iSGlXcFJ2LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiT3h5Q2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiT3h5bGFic1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL294eWNhc3QtSHBNTDJ1NGhqVG8tZGhzb2JIaVdwUnYuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTNhYzY2ZGM5NDNhNGEyOGI4YmNlZDcxZTVhNjQ2OTAvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImY5ZDU4ODVkN2NmNzQ4NWQ4OTFlODJkZWEzMTg2NjQwXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ob3ctaS1idWlsdC10aGlzLXdpdGgtZ3V5LXJhei1ndXktcmF6LXdvbmRlcnktN2tycFZ0Y0N6TUItVUMwcUgyM2lQOVQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJIb3cgSSBCdWlsdCBUaGlzIHdpdGggR3V5IFJhelwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiR3V5IFJheiB8IFdvbmRlcnlcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ob3ctaS1idWlsdC10aGlzLXdpdGgtZ3V5LXJhei1ndXktcmF6LXdvbmRlcnktLXQzOEtGSXFsQWktVUMwcUgyM2lQOVQuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA4NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2Y5ZDU4ODVkN2NmNzQ4NWQ4OTFlODJkZWEzMTg2NjQwL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjY2ODdkYWZlNzUzYjRjOWJhZWU3YTRkM2YxZGY2NDMxXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aG91Z2h0d29ya3MtdGVjaG5vbG9neS1wb2RjYXN0LXRob3VnaHR3b3Jrcy1UODBrOS00cXZfSy1sYzdnMkJ4aks2cS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRob3VnaHR3b3JrcyBUZWNobm9sb2d5IFBvZGNhc3RcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlRob3VnaHR3b3Jrc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3Rob3VnaHR3b3Jrcy10ZWNobm9sb2d5LXBvZGNhc3QtdGhvdWdodHdvcmtzLW5mQWEybUx5d29aLWxjN2cyQnhqSzZxLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDAsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy82Njg3ZGFmZTc1M2I0YzliYWVlN2E0ZDNmMWRmNjQzMS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjIlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJiNTg2ZDdkZTJhOGU0OWI2ODdmYTVhYjg1MDZmNzEzY1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaW4tbWFjaGluZXMtd2UtdHJ1c3QtbWl0LXRlY2hub2xvZ3ktcmV2aWV3LTJYck5oQ0ZZRUxnLUhCSXloelluOHFGLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiSW4gTWFjaGluZXMgV2UgVHJ1c3RcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk1JVCBUZWNobm9sb2d5IFJldmlld1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2luLW1hY2hpbmVzLXdlLXRydXN0LW1pdC10ZWNobm9sb2d5LXJldmlldy12UzQwcXBKelVJWi1IQkl5aHpZbjhxRi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDUwLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYjU4NmQ3ZGUyYThlNDliNjg3ZmE1YWI4NTA2ZjcxM2MvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJkODYzZGE3ZjkyMWU0MzVmYjM1ZjUxMmI1NGU3NzRkNlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFzdGVycy1vZi1zY2FsZS13aXRoLXJlaWQtaG9mZm1hbi13YWl0d2hhdC1QSkdlSExNbXhhNi1tWW9WMENVeXhURC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIk1hc3RlcnMgb2YgU2NhbGVcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIldhaXRXaGF0IFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hc3RlcnMtb2Ytc2NhbGUtd2l0aC1yZWlkLWhvZmZtYW4td2FpdHdoYXQtWEpzM1d3bVVyeDctbVlvVjBDVXl4VEQuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2Q4NjNkYTdmOTIxZTQzNWZiMzVmNTEyYjU0ZTc3NGQ2L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly90aGVuZXh0d2ViLmNvbS9uZXdzLzctdGVjaC1wb2RjYXN0cy1iaW5nZS0yMDIyP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIlRoZXNlIHRlY2ggcG9kY2FzdHMgZmVhdHVyZSB0aGUgYnJpZ2h0ZXN0IG1pbmRzIGluIHByb2dyYW1taW5nLCBzY2llbmNlLCBhbmQgZW5naW5lZXJpbmcuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU3ODIwMzYxMDM0LFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwidGhlbmV4dHdlYi5jb21cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvNy10ZWNoLXBvZGNhc3RzLXRvLWJpbmdlLXRoaXMtc3VtbWVyLUFjZXdReDZNYllnL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiaDBnSU1hclNjN1VcIixcbiAgICAgIFwidGl0bGVcIjogXCJDdWx0cywgcmVhbGl0eSBUViwgYW5kIHRpZ2VyczogTmluZSBvZiB0aGUgYmVzdCBwb2RjYXN0cyB0byBsaXN0ZW4gdG8gdGhpcyBzdW1tZXJcIixcbiAgICAgIFwidG90YWxcIjogOSxcbiAgICAgIFwicG9kY2FzdHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImJmNmJjZGZjNWY5MDQ5OGZhYzZhNjY5NDc4M2U0NGY3XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy91bnJlYWwtYS1jcml0aWNhbC1oaXN0b3J5LW9mLXJlYWxpdHktdHYtQnJiZjVSRjJ0UGEtSXVuS0VqWFZPVXEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJVbnJlYWw6IEEgQ3JpdGljYWwgSGlzdG9yeSBvZiBSZWFsaXR5IFRWXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCQkMgUmFkaW8gNFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3VucmVhbC1hLWNyaXRpY2FsLWhpc3Rvcnktb2YtcmVhbGl0eS10di1RNV8tcGRNR0ZmVS1JdW5LRWpYVk9VcS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ3LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYmY2YmNkZmM1ZjkwNDk4ZmFjNmE2Njk0NzgzZTQ0ZjcvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxJVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiYjAyYmI3NDgzOGJlNGQwNmFjMjhkYjhiNTIwZTY1YzhcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3dpbGQtdGhpbmdzLXNpZWdmcmllZC1yb3ktNXVnZGN0RTFXRzAtcUlmdmFkemtPcF8uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJXaWxkIFRoaW5nczogU2llZ2ZyaWVkICYgUm95XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBcHBsZSBUVisgLyBBVCBXSUxMIE1FRElBXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2lsZC10aGluZ3Mtc2llZ2ZyaWVkLXJveS1mU1BYNWFBZVZLaS1xSWZ2YWR6a09wXy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU4LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYjAyYmI3NDgzOGJlNGQwNmFjMjhkYjhiNTIwZTY1YzgvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI1MjliYzAzYzUzN2U0Nzc0OTU1NDRmN2FlNzQ3ZTVkN1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFudGlkb3RlLTA3MXk0YUt2Z2RKLXVDdFRfczBOcTdELjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEFudGlkb3RlXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBbWVyaWNhbiBQdWJsaWMgTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYW50aWRvdGUtbmdkLW1menR5YXMtdUN0VF9zME5xN0QuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzUyOWJjMDNjNTM3ZTQ3NzQ5NTU0NGY3YWU3NDdlNWQ3L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjY0M2VjZGVhYmVhNzQ4YWE4OGU3NWY1NmE4OTUwYmUwXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb2ItYmVja2V0dC1hbmQtam9zaC13aWRkaWNvbWJlcy1wYXJlbnRpbmctY1FXb2xzUkRMSjAteXJ3ZENfczJpUVAuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJSb2IgQmVja2V0dCBhbmQgSm9zaCBXaWRkaWNvbWJlJ3MgUGFyZW50aW5nIEhlbGxcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIktlZXAgSXQgTGlnaHQgTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb2ItYmVja2V0dC1hbmQtam9zaC13aWRkaWNvbWJlcy1wYXJlbnRpbmcta1FDZmVHOXBsMHUteXJ3ZENfczJpUVAuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3NixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY0M2VjZGVhYmVhNzQ4YWE4OGU3NWY1NmE4OTUwYmUwL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjc1YmQ2YTZhNGRjMjQ2ZjhhMjA2NmZmODM0MmJiMzk5XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9kZWFkLWV5ZXMtaGVhZGd1bS02eVFPNWRUSlpSRS1pejA4UWI5Q2N2VC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkRlYWQgRXllc1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSGVhZGd1bVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2RlYWQtZXllcy1oZWFkZ3VtLXFMM0RRWnJtV0UxLWl6MDhRYjlDY3ZULjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjMsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy83NWJkNmE2YTRkYzI0NmY4YTIwNjZmZjgzNDJiYjM5OS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly93d3cuZXVyb25ld3MuY29tL2N1bHR1cmUvMjAyMi8wNy8xMS9jdWx0cy1yZWFsaXR5LXR2LWFuZC10aWdlcnMtbmluZS1vZi10aGUtYmVzdC1wb2RjYXN0cy10by1saXN0ZW4tdG8tdGhpcy1zdW1tZXI/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXFwiQnV0IHdoZXRoZXIgeW91XFx1MjAxOXJlIHN1bmJhdGhpbmcgb24gdmFjYXRpb24gb3IgdHJhcHBlZCBpbiB0aGUgb2ZmaWNlLCB0aGVyZVxcdTIwMTlzIGEgcG9kY2FzdCB0byBzb3VuZHRyYWNrIHlvdXIgc3VtbWVyLiBIZXJlIGFyZSB0aGUgbmluZSBvZiB0aGUgYmVzdCwgY29tcGlsZWQgYnkgdGhlIEV1cm9uZXdzIEN1bHR1cmUgdGVhbS5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTc3NTQ3MDYwNTYsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ3d3cuZXVyb25ld3MuY29tXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzL2N1bHRzLXJlYWxpdHktdHYtYW5kLXRpZ2Vycy1uaW5lLW9mLWgwZ0lNYXJTYzdVL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYXhNMWdibXRDcFhcIixcbiAgICAgIFwidGl0bGVcIjogXCI2IG9mIHRoZSBCZXN0IFBvZGNhc3RzIEFib3V0IFJhZGljYWwgQW1lcmljYW4gTW92ZW1lbnRzXCIsXG4gICAgICBcInRvdGFsXCI6IDYsXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJjNDQ0YWEyMzk2ZTc0MmYwYmVhNTRlZDBjZGQzY2JiZVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbW90aGVyLWNvdW50cnktcmFkaWNhbHMtQ0Y5Y2h0clNzaUgtdmpfdUNwRDVLNEEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJNb3RoZXIgQ291bnRyeSBSYWRpY2Fsc1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ3Jvb2tlZCBNZWRpYVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21vdGhlci1jb3VudHJ5LXJhZGljYWxzLUphdmJPdWlxQzFSLXZqX3VDcEQ1SzRBLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTIsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNDQ0YWEyMzk2ZTc0MmYwYmVhNTRlZDBjZGQzY2JiZS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjRlNzdiZWY1YTYxNzRiZWI4MjY0ZTAwMTdmODA5NDc0XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb29sLXBlb3BsZS13aG8tZGlkLWNvb2wtc3R1ZmYtYlhxTmhGc3JfNW0tS1VRRl91azVlVnguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJDb29sIFBlb3BsZSBXaG8gRGlkIENvb2wgU3R1ZmZcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcImlIZWFydFBvZGNhc3RzIGFuZCBDb29sIFpvbmUgTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb29sLXBlb3BsZS13aG8tZGlkLWNvb2wtc3R1ZmYtSThONGVmVjVrMkYtS1VRRl91azVlVnguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRlNzdiZWY1YTYxNzRiZWI4MjY0ZTAwMTdmODA5NDc0L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImQ2MjAxNTY1NzdmZTQ0MDg5NzJhMjlhYTI2NzVlNjI4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbWVyaWNhbi1yYWRpY2FsLW1zbmJjLVBsNlZaU3NRcEN3LVpzY0xCMHdxNV83LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQW1lcmljYW4gUmFkaWNhbFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTVNOQkNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbWVyaWNhbi1yYWRpY2FsLW1zbmJjLUdaZXlBVm1iMExYLVpzY0xCMHdxNV83LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9kNjIwMTU2NTc3ZmU0NDA4OTcyYTI5YWEyNjc1ZTYyOC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIyYzM1ZTcxNmZkNmI0YzBjOGRlMGU2NjFmNDYzODkzM1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2lsbC1iZS13aWxkLVlaWEtzbHhXMFB2LWJQNjJMQ0pZeEtjLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiV2lsbCBCZSBXaWxkXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJQaW5lYXBwbGUgU3RyZWV0IFN0dWRpb3MgfCBXb25kZXJ5IHwgQW1hem9uIE11c2ljIFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3dpbGwtYmUtd2lsZC1meGs5dE1EYjdnMC1iUDYyTENKWXhLYy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYxLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMmMzNWU3MTZmZDZiNGMwYzhkZTBlNjYxZjQ2Mzg5MzMvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI3MzI1OTg3YmY5OTc0NzgxODBkOTI1NTZiNGQ1ZGIxMFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaW1wZXJmZWN0LXBhcmFkaXNlLWxhaXN0LXN0dWRpb3MtbTMtYUdXeXZab2ktMnV4Y212amU3WlAuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJJbXBlcmZlY3QgUGFyYWRpc2VcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkxBaXN0IFN0dWRpb3NcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9pbXBlcmZlY3QtcGFyYWRpc2UtbGFpc3Qtc3R1ZGlvcy1FOUhpMUp0Y054My0ydXhjbXZqZTdaUC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNzMyNTk4N2JmOTk3NDc4MTgwZDkyNTU2YjRkNWRiMTAvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxLjUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LmxpZmVoYWNrZXIuY29tLmF1LzIwMjIvMDcvNi1vZi10aGUtYmVzdC1wb2RjYXN0cy1hYm91dC1yYWRpY2FsLWFtZXJpY2FuLW1vdmVtZW50cy8/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXFwiQXMgdGhlIFVuaXRlZCBTdGF0ZXMgZW50ZXJzIGEgbmV3IGVyYSBvZiBldmVuIG1vcmUgZGl2aXNpdmUgcG9saXRpY3MsIGxvb2tpbmcgdG8gdGhlIHBhc3QgY2FuIGhlbHAgdXMgZmluZCBhIHdheSBmb3J3YXJkLiBIZXJlIGFyZSA2IHJlY2VudCBwb2RjYXN0cyB0aGF0IHRha2UgdXMgdGhyb3VnaCB0aGUgaGlzdG9yeSBvZiByYWRpY2FsIGdyb3Vwcywgc2VhcmNoaW5nIGZvciBhbnN3ZXJzIGluIHRoZWlyIHVuZWFydGhpbmcgb2Ygb2JzY3VyZWQgaGlzdG9yeS4gTW9zdCBhcmUgdG9sZCBpbiB0aGUgdm9pY2VzIG9mIHRoZSBwZW9wbGUgY2xvc2VzdCB0byB0aGUgZXZlbnRzIGJlaW5nIGRvY3VtZW50ZWQuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU3NzU0NTIzMDc0LFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwid3d3LmxpZmVoYWNrZXIuY29tLmF1XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzYtb2YtdGhlLWJlc3QtcG9kY2FzdHMtYWJvdXQtcmFkaWNhbC1heE0xZ2JtdENwWC9cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIlhsWlVKR2RLMG9PXCIsXG4gICAgICBcInRpdGxlXCI6IFwiOCBGYWN1bHR5IE1lbWJlcnMgUmVjb21tZW5kIFRoZWlyIEZhdm9yaXRlIFBvZGNhc3RzXCIsXG4gICAgICBcInRvdGFsXCI6IDEwLFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiYjYzYmMwYWU0MWM3NDJhNThiNmY0M2YxMzNlZjYwMTlcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3R3by1ndXlzLW9uLXlvdXItaGVhZC1rdXQta3V0eC1zdHVkaW9zLWRyLUlpZFRKQVVrY0VfLXJXakVjTHoybllzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVHdvIEd1eXMgb24gWW91ciBIZWFkXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJLVVQgJiBLVVRYIFN0dWRpb3MsIERyLiBBcnQgTWFya21hbiAmIERyLiBCb2IgRHVrZVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3R3by1ndXlzLW9uLXlvdXItaGVhZC1rdXQta3V0eC1zdHVkaW9zLWRyLWdxMVo4U0lPRVZqLXJXakVjTHoybllzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9iNjNiYzBhZTQxYzc0MmE1OGI2ZjQzZjEzM2VmNjAxOS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJlYjU2NjFmNWJlNWI0OTk0YWRlMGI4YmFjYmRkNjJmNlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFnZS1vZi1uYXBvbGVvbi1wb2RjYXN0LWV2ZXJldHQtcnVtbWFnZS03TTZVWDNDT28yZC14bE5CSC1zMFVMSi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBBZ2Ugb2YgTmFwb2xlb24gUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiRXZlcmV0dCBSdW1tYWdlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFnZS1vZi1uYXBvbGVvbi1wb2RjYXN0LWV2ZXJldHQtcnVtbWFnZS12UGM4ajZuSlNzZy14bE5CSC1zMFVMSi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYzLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZWI1NjYxZjViZTViNDk5NGFkZTBiOGJhY2JkZDYyZjYvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI2NmYyZmM4M2ZjNmI0MTFmYTU1NjkyOGE2MzA5YTJmMFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMva25vdy15b3VyLWVuZW15LW1hdHRoZXctc2l0bWFuLW1sZXZ1Rk9DOTA3LUJyelVHYWVpSEVYLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiS25vdyBZb3VyIEVuZW15XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJNYXR0aGV3IFNpdG1hbiBcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9rbm93LXlvdXItZW5lbXktbWF0dGhldy1zaXRtYW4tZGtoRkw4WFBjZkktQnJ6VUdhZWlIRVguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2MCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY2ZjJmYzgzZmM2YjQxMWZhNTU2OTI4YTYzMDlhMmYwL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiY2QzMmRjZTEwY2EyNGFiODllOTc3Y2ViNWY3OGRjOTdcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2N1bHR1cmUtaGFwcGVucy1odWJzcG90LXRkUVhPY0k2bVVKLUpuZWc1SERHczl1LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQ3VsdHVyZSBIYXBwZW5zXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJIdWJTcG90XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY3VsdHVyZS1oYXBwZW5zLWh1YnNwb3QtblR2NGxWeEJkbVAtSm5lZzVIREdzOXUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiAzNixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2NkMzJkY2UxMGNhMjRhYjg5ZTk3N2NlYjVmNzhkYzk3L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMyVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImY5MjViMzkwMTQ3YTQ3NTE5ZjkxYTljMTM4MWExNTYwXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYWtlLWl0LXRocml2ZS10aGUtY29tcGFueS1jdWx0dXJlLXBvZGNhc3QtUjVxbEEyUW1GTEgtUWdQMC1kanI5aFMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJNYWtlIEl0IFRocml2ZTogVGhlIENvbXBhbnkgQ3VsdHVyZSBQb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJMaXp6aWUgQmVudG9uXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFrZS1pdC10aHJpdmUtdGhlLWNvbXBhbnktY3VsdHVyZS1wb2RjYXN0LXloMm5kSDZ4R0VSLVFnUDAtZGpyOWhTLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogbnVsbCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2Y5MjViMzkwMTQ3YTQ3NTE5ZjkxYTljMTM4MWExNTYwL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LmdzYi5zdGFuZm9yZC5lZHUvaW5zaWdodHMvOC1mYWN1bHR5LW1lbWJlcnMtcmVjb21tZW5kLXRoZWlyLWZhdm9yaXRlLXBvZGNhc3RzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIk1heWJlIHlvdVxcdTIwMTlyZSB0YWtpbmcgYSBsb25nLWF3YWl0ZWQgcm9hZCB0cmlwIGFuZCBuZWVkIHNvbWV0aGluZyB0byBwYXNzIHRoZSB0aW1lLiBPciBwZXJoYXBzIHlvdVxcdTIwMTlyZSBvcHRpbmcgZm9yIGEgc3RheWNhdGlvbiBhbmQgd2FudCBzb21ldGhpbmcgdG8gbGlzdGVuIHRvIGFzIHlvdSByZWxheCBhdCBob21lLiBBcyBzdW1tZXIga2lja3Mgb2ZmIGFuZCBzY2hlZHVsZXMgKGhvcGVmdWxseSkgc2xvdyBkb3duLCB3ZSBhc2tlZCBTdGFuZm9yZCBHU0IgZmFjdWx0eSBtZW1iZXJzIHRvIHJlY29tbWVuZCBzaG93cyB0aGV5IGxpc3RlbiB0byBpbiB0aGVpciBmcmVlIHRpbWUuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU3NjQyODkwNDMwLFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwid3d3LmdzYi5zdGFuZm9yZC5lZHVcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvOC1mYWN1bHR5LW1lbWJlcnMtcmVjb21tZW5kLXRoZWlyLVhsWlVKR2RLMG9PL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiTG5GOHNrQVVIYl9cIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgOSBiZXN0IGJ1c2luZXNzIHBvZGNhc3RzXCIsXG4gICAgICBcInRvdGFsXCI6IDksXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmOWQ1ODg1ZDdjZjc0ODVkODkxZTgyZGVhMzE4NjY0MFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaG93LWktYnVpbHQtdGhpcy13aXRoLWd1eS1yYXotZ3V5LXJhei13b25kZXJ5LTdrcnBWdGNDek1CLVVDMHFIMjNpUDlULjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiSG93IEkgQnVpbHQgVGhpcyB3aXRoIEd1eSBSYXpcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkd1eSBSYXogfCBXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaG93LWktYnVpbHQtdGhpcy13aXRoLWd1eS1yYXotZ3V5LXJhei13b25kZXJ5LS10MzhLRklxbEFpLVVDMHFIMjNpUDlULjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogODUsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mOWQ1ODg1ZDdjZjc0ODVkODkxZTgyZGVhMzE4NjY0MC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJhNjg0OGNmOWNkN2U0NDk2ODk3Njg4MzZiMzRiZjEwNlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd29ybGQtYnVzaW5lc3MtcmVwb3J0LWJiYy13b3JsZC1zZXJ2aWNlLVR4ZnRfZG9iZVpGLWFqcFd6VmhfeVlFLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiV29ybGQgQnVzaW5lc3MgUmVwb3J0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCQkNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy93b3JsZC1idXNpbmVzcy1yZXBvcnQtYmJjLXdvcmxkLXNlcnZpY2UtaEhHb3U4YXEyTmwtYWpwV3pWaF95WUUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1NCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2E2ODQ4Y2Y5Y2Q3ZTQ0OTY4OTc2ODgzNmIzNGJmMTA2L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiZmMxMzFmMTA4NmVlNGVhZGIzZmQ5ZWE5NjhmY2YzMDdcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1pbnRyb3ZlcnQtZW50cmVwcmVuZXVyLWJldGgtYnVlbG93LXRoZS1xcjZDWUZOQTAyVy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBJbnRyb3ZlcnQgRW50cmVwcmVuZXVyXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCZXRoIEJ1ZWxvdywgVGhlIEludHJvdmVydCBFbnRyZXByZW5ldXJcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaW50cm92ZXJ0LWVudHJlcHJlbmV1ci1iZXRoLWJ1ZWxvdy10aGUtcXI2Q1lGTkEwMlcuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2ZjMTMxZjEwODZlZTRlYWRiM2ZkOWVhOTY4ZmNmMzA3L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMS41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiNDM1N2ZiOTJlMWM3NGM3YmI0NTI3YTE0MzUzZGE2YmZcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Fzay1tYXJ0aW4tbGV3aXMtcG9kY2FzdC1iYmMtcmFkaW8tNS1saXZlLVlkQXFibE9rdEtDLVFiZGtURnc2MTNPLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQXNrIE1hcnRpbiBMZXdpcyBQb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCQkMgUmFkaW8gNSBsaXZlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYXNrLW1hcnRpbi1sZXdpcy1wb2RjYXN0LWJiYy1yYWRpby01LWxpdmUtODczdm9md1FHeEotUWJka1RGdzYxM08uMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1MSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzQzNTdmYjkyZTFjNzRjN2JiNDUyN2ExNDM1M2RhNmJmL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiYTQwOWI4YmI5M2Y0NDA1NGE3YmUyZDZiMzA4NDM4OTlcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2VudHJlcHJlbmV1cnMtb24tZmlyZS1qb2huLWxlZS1kdW1hcy1vZi1ybVJ2bmxFMkxwOS0xV09oVDd1NlZRYi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkVudHJlcHJlbmV1cnMgb24gRmlyZVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSm9obiBMZWUgRHVtYXMgb2YgRU9GaXJlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZW50cmVwcmVuZXVycy1vbi1maXJlLWpvaG4tbGVlLWR1bWFzLW9mLUtkVmNIQXJ4TjFFLTFXT2hUN3U2VlFiLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9hNDA5YjhiYjkzZjQ0MDU0YTdiZTJkNmIzMDg0Mzg5OS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LnRpbWVvdXRhYnVkaGFiaS5jb20vdGhpbmdzLXRvLWRvL3RoZS05LWJlc3QtYnVzaW5lc3MtcG9kY2FzdHM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXFwiRnJvbSBzb2JlciBuZXdzIHRvIGluc3BpcmluZyB0YWxlcyBvZiBzdWNjZXNzLCB0aGVzZSBhcmUgdGhlIGJlc3QgcG9kY2FzdHMgdG8ga2VlcCBidXNpbmVzcyBtaW5kcyBpbmZvcm1lZCBhbmQgZm9jdXNlZC5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTc1NTQ4Nzc0MzgsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ3d3cudGltZW91dGFidWRoYWJpLmNvbVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy90aGUtOS1iZXN0LWJ1c2luZXNzLXBvZGNhc3RzLUxuRjhza0FVSGJfL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiX2hCNk9WUlBsTEZcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgYmVzdCB0cnVlIGNyaW1lIHBvZGNhc3RzIHRvIGJpbmdlIHRoaXMgc3VtbWVyIFxcdTIwMTMgZnJvbSBXaG8gS2lsbGVkIERhcGhuZSB0byBObyBTdHJpbmdzIEF0dGFjaGVkXCIsXG4gICAgICBcInRvdGFsXCI6IDMsXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIwNjQ5NzJjN2VlMGM0ZTg4ODQwZTVjNjc4NDkwZmY3NFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2hvLWtpbGxlZC1kYXBobmUtd29uZGVyeS01OG1WR3A2QTdIai05NGFfeW04WnZFVS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIldobyBLaWxsZWQgRGFwaG5lP1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiV29uZGVyeVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3doby1raWxsZWQtZGFwaG5lLXdvbmRlcnktYjhjQlhpcHo0U24tOTRhX3ltOFp2RVUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1MCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzA2NDk3MmM3ZWUwYzRlODg4NDBlNWM2Nzg0OTBmZjc0L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImE2YWY2OTAyZDcyMDQ5NWY5OTU3NTgyYmM4YWJhYTdjXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9uby1zdHJpbmdzLWF0dGFjaGVkLWl0di1uZXdzLUk2eTEzLTBFQ0FRLTJ1RnJlYVpjblY0LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTm8gU3RyaW5ncyBBdHRhY2hlZFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSVRWIE5ld3NcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9uby1zdHJpbmdzLWF0dGFjaGVkLWl0di1uZXdzLVFsMnlyR1RSQUVoLTJ1RnJlYVpjblY0LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9hNmFmNjkwMmQ3MjA0OTVmOTk1NzU4MmJjOGFiYWE3Yy9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjVhNWI1N2E1Y2NkMjRjZDFhNDc2NTU2ZjQwOTM2MTM1XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tdXJkZXItd2l0aC1teS1odXNiYW5kLWNsb3VkMTAtYW5kLWhLQ01mMzJiU0FELU1sWjVoMmZ4a0llLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTXVyZGVyIFdpdGggTXkgSHVzYmFuZFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ2xvdWQxMCBhbmQgaUhlYXJ0UG9kY2FzdHNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tdXJkZXItd2l0aC1teS1odXNiYW5kLWNsb3VkMTAtYW5kLURWUUE4TmNYb0plLU1sWjVoMmZ4a0llLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzMsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy81YTViNTdhNWNjZDI0Y2QxYTQ3NjU1NmY0MDkzNjEzNS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LnRoZS1zdW4uY29tL2VudGVydGFpbm1lbnQvdHYvNTcxNDY5MC9iZXN0LXRydWUtY3JpbWUtcG9kY2FzdHMtc3VtbWVyLXdoby1raWxsZWQtZGFwaG5lLW5vLXN0cmluZ3MtYXR0YWNoZWQvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIlNvLCBncmFiIHlvdXIgZGV0ZWN0aXZlIGhhdHMgYW5kIHlvdXIgaGVhZHBob25lcywgYmVjYXVzZSB0aGVzZSB0cnVlIGNyaW1lcyB3aWxsIGhhdmUgeW91IGhvb2tlZCBmcm9tIHRoZSBmaXJzdCB0byBsYXN0IGVwaXNvZGUuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU3NTU0ODExODQ1LFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwid3d3LnRoZS1zdW4uY29tXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzL3RoZS1iZXN0LXRydWUtY3JpbWUtcG9kY2FzdHMtdG8tYmluZ2UtX2hCNk9WUlBsTEYvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJucWtnUS1IbWJNeVwiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjUgSW5mbHVlbmNlciBIb3N0ZWQgUG9kY2FzdHMgWW91IE5lZWQgdG8gTGlzdGVuIFRvIFJpZ2h0IE5vd1wiLFxuICAgICAgXCJ0b3RhbFwiOiA0LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiMDEwMmQzZjhlMGE4NGUxZDhmZDg0NWU4NzQ2NTAwODhcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NhdmluZy1ncmFjZS0yOTREbHB0Q1BOYS1HdHYzbkZoMGNZMi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlNhdmluZyBHcmFjZVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiVGhlIEZlbGxhcyBTdHVkaW9zXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvc2F2aW5nLWdyYWNlLVNuVHQ2bzdBOGcyLUd0djNuRmgwY1kyLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTQsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8wMTAyZDNmOGUwYTg0ZTFkOGZkODQ1ZTg3NDY1MDA4OC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjBiNzY2NzhjNTc2ZTRkZGJhMjkyY2ZkOTc2Y2Y0MzhkXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZ2lybHMtYmF0aHJvb20tc29waGlhLWNpbnppYS1FOFBwckFJYk01cy1qWHhHLVY5cU12ZC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBHaXJscyBCYXRocm9vbVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiU29waGlhICYgQ2luemlhXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWdpcmxzLWJhdGhyb29tLXNvcGhpYS1jaW56aWEtNkltZmpOS2d0Y1Etalh4Ry1WOXFNdmQuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzBiNzY2NzhjNTc2ZTRkZGJhMjkyY2ZkOTc2Y2Y0MzhkL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImM3YjQ4MjE4YmU4ZTQ4ZWM5NzkxYTYwYzE3OTVhYzdiXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbnl0aGluZy1nb2VzLXdpdGgtZW1tYS1jaGFtYmVybGFpbi1lbW1hLTBsQjJLM21FaVFqLTd6MVllc2dHM1BmLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQW55dGhpbmcgR29lcyB3aXRoIEVtbWEgQ2hhbWJlcmxhaW5cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkVtbWEgQ2hhbWJlcmxhaW4gYW5kIFJhbWJsZVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2FueXRoaW5nLWdvZXMtd2l0aC1lbW1hLWNoYW1iZXJsYWluLWVtbWEtYXdPRFNZcnNoTF8tN3oxWWVzZ0czUGYuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA4MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M3YjQ4MjE4YmU4ZTQ4ZWM5NzkxYTYwYzE3OTVhYzdiL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjcxMjgyOTYzMzM0MTRjODdiYjI3YWUwN2EzYTgyYWFmXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ub3QtdG8tYmUtZHJhbWF0aWMtcG9kY2FzdC1hc2hsZWlnaC1sb3Vpc2UtN3ZLR1h1U3dEX2otN21yWkZVV09rWWMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJOb3QgVG8gQmUgRHJhbWF0aWMgUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQXNobGVpZ2ggTG91aXNlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbm90LXRvLWJlLWRyYW1hdGljLXBvZGNhc3QtYXNobGVpZ2gtbG91aXNlLWtRclVnTjE0VEJZLTdtclpGVVdPa1ljLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMjYsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy83MTI4Mjk2MzMzNDE0Yzg3YmIyN2FlMDdhM2E4MmFhZi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEwJVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL3RhbGtpbmdpbmZsdWVuY2UuY29tLzIwMjIvMDcvMDgvNS1pbmZsdWVuY2VyLWhvc3RlZC1wb2RjYXN0cy15b3UtbmVlZC10by1saXN0ZW4tdG8tcmlnaHQtbm93Lz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJQb2RjYXN0cyBhcmUgZXh0cmVtZWx5IHBvcHVsYXIgYW1vbmdzdCB0aGUgY3JlYXRvciBjb21tdW5pdHkuIEFsb25nc2lkZSBwaG90byBhbmQgdmlkZW8gY29udGVudCwgbG9uZy1mb3JtIGF1ZGlvIHByZXNlbnRzIGEgZ3JlYXQgb3Bwb3J0dW5pdHkgZm9yIGluZmx1ZW5jZXJzIGFuZCBjcmVhdG9ycyB0byBzcGVhayBjYW5kaWRseSB3aXRoIHRoZWlyIGF1ZGllbmNlcy5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTc1NTQ3MTMzNDgsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ0YWxraW5naW5mbHVlbmNlLmNvbVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy81LWluZmx1ZW5jZXItaG9zdGVkLXBvZGNhc3RzLXlvdS1uZWVkLW5xa2dRLUhtYk15L1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiM2NwQTAtWG55aDJcIixcbiAgICAgIFwidGl0bGVcIjogXCI2IG9mIHRoZSBCZXN0IFBvZGNhc3RzIEFib3V0IFJhZGljYWwgQW1lcmljYW4gTW92ZW1lbnRzXCIsXG4gICAgICBcInRvdGFsXCI6IDYsXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJjNDQ0YWEyMzk2ZTc0MmYwYmVhNTRlZDBjZGQzY2JiZVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbW90aGVyLWNvdW50cnktcmFkaWNhbHMtQ0Y5Y2h0clNzaUgtdmpfdUNwRDVLNEEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJNb3RoZXIgQ291bnRyeSBSYWRpY2Fsc1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ3Jvb2tlZCBNZWRpYVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21vdGhlci1jb3VudHJ5LXJhZGljYWxzLUphdmJPdWlxQzFSLXZqX3VDcEQ1SzRBLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTIsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jNDQ0YWEyMzk2ZTc0MmYwYmVhNTRlZDBjZGQzY2JiZS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjRlNzdiZWY1YTYxNzRiZWI4MjY0ZTAwMTdmODA5NDc0XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb29sLXBlb3BsZS13aG8tZGlkLWNvb2wtc3R1ZmYtYlhxTmhGc3JfNW0tS1VRRl91azVlVnguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJDb29sIFBlb3BsZSBXaG8gRGlkIENvb2wgU3R1ZmZcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcImlIZWFydFBvZGNhc3RzIGFuZCBDb29sIFpvbmUgTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb29sLXBlb3BsZS13aG8tZGlkLWNvb2wtc3R1ZmYtSThONGVmVjVrMkYtS1VRRl91azVlVnguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzRlNzdiZWY1YTYxNzRiZWI4MjY0ZTAwMTdmODA5NDc0L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImQ2MjAxNTY1NzdmZTQ0MDg5NzJhMjlhYTI2NzVlNjI4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbWVyaWNhbi1yYWRpY2FsLW1zbmJjLVBsNlZaU3NRcEN3LVpzY0xCMHdxNV83LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQW1lcmljYW4gUmFkaWNhbFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTVNOQkNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hbWVyaWNhbi1yYWRpY2FsLW1zbmJjLUdaZXlBVm1iMExYLVpzY0xCMHdxNV83LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9kNjIwMTU2NTc3ZmU0NDA4OTcyYTI5YWEyNjc1ZTYyOC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIyYzM1ZTcxNmZkNmI0YzBjOGRlMGU2NjFmNDYzODkzM1wiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2lsbC1iZS13aWxkLVlaWEtzbHhXMFB2LWJQNjJMQ0pZeEtjLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiV2lsbCBCZSBXaWxkXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJQaW5lYXBwbGUgU3RyZWV0IFN0dWRpb3MgfCBXb25kZXJ5IHwgQW1hem9uIE11c2ljIFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3dpbGwtYmUtd2lsZC1meGs5dE1EYjdnMC1iUDYyTENKWXhLYy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYxLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMmMzNWU3MTZmZDZiNGMwYzhkZTBlNjYxZjQ2Mzg5MzMvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI3MzI1OTg3YmY5OTc0NzgxODBkOTI1NTZiNGQ1ZGIxMFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaW1wZXJmZWN0LXBhcmFkaXNlLWxhaXN0LXN0dWRpb3MtbTMtYUdXeXZab2ktMnV4Y212amU3WlAuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJJbXBlcmZlY3QgUGFyYWRpc2VcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkxBaXN0IFN0dWRpb3NcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9pbXBlcmZlY3QtcGFyYWRpc2UtbGFpc3Qtc3R1ZGlvcy1FOUhpMUp0Y054My0ydXhjbXZqZTdaUC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNzMyNTk4N2JmOTk3NDc4MTgwZDkyNTU2YjRkNWRiMTAvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxLjUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vbGlmZWhhY2tlci5jb20vNi1vZi10aGUtYmVzdC1wb2RjYXN0cy1hYm91dC1yYWRpY2FsLWFtZXJpY2FuLW1vdmVtZW50cy0xODQ5MTU4MDU1P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIkFzIHRoZSBVbml0ZWQgU3RhdGVzIGVudGVycyBhIG5ldyBlcmEgb2YgZXZlbiBtb3JlIGRpdmlzaXZlIHBvbGl0aWNzLCBsb29raW5nIHRvIHRoZSBwYXN0IGNhbiBoZWxwIHVzIGZpbmQgYSB3YXkgZm9yd2FyZC4gSGVyZSBhcmUgNiByZWNlbnQgcG9kY2FzdHMgdGhhdCB0YWtlIHVzIHRocm91Z2ggdGhlIGhpc3Rvcnkgb2YgcmFkaWNhbCBncm91cHMsIHNlYXJjaGluZyBmb3IgYW5zd2VycyBpbiB0aGVpciB1bmVhcnRoaW5nIG9mIG9ic2N1cmVkIGhpc3RvcnkuIE1vc3QgYXJlIHRvbGQgaW4gdGhlIHZvaWNlcyBvZiB0aGUgcGVvcGxlIGNsb3Nlc3QgdG8gdGhlIGV2ZW50cyBiZWluZyBkb2N1bWVudGVkLlxcXCJcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY1NzQwOTAzNDk4NCxcbiAgICAgIFwic291cmNlX2RvbWFpblwiOiBcImxpZmVoYWNrZXIuY29tXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzYtb2YtdGhlLWJlc3QtcG9kY2FzdHMtYWJvdXQtcmFkaWNhbC0zY3BBMC1YbnloMi9cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIlhKUWFVa3F2ZVRNXCIsXG4gICAgICBcInRpdGxlXCI6IFwiRm91ciBvZiB0aGUgYmVzdCBwb2RjYXN0cyBhYm91dCB3b21lbiBhbmQgc29jaWV0eVwiLFxuICAgICAgXCJ0b3RhbFwiOiAzLFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiYmQzZWUzZDc2OTM1NGM1NmFkNGViMDgwMjExNjg4Y2ZcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3Zpc2libGUtd29tZW4td2l0aC1jYXJvbGluZS1jcmlhZG8tcGVyZXotbGVTZ1p5QUdfdmYtdzNDWkRnbl9jRksuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJWaXNpYmxlIFdvbWVuIHdpdGggQ2Fyb2xpbmUgQ3JpYWRvIFBlcmV6XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJUb3J0b2lzZSBNZWRpYVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3Zpc2libGUtd29tZW4td2l0aC1jYXJvbGluZS1jcmlhZG8tcGVyZXotSDNBMGh2Qm40c0MtdzNDWkRnbl9jRksuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0MixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2JkM2VlM2Q3NjkzNTRjNTZhZDRlYjA4MDIxMTY4OGNmL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMS41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiNmE3NmMzYjk4NDRiNDQ0NWJlMzRjMWZkYmZkZmIwYWFcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzLzI4aXNoLWRheXMtbGF0ZXItYmJjLXJhZGlvLTQtNmhpT0VqV1BIUnctWjZrTWhfdkIyM04uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCIyOGlzaCBEYXlzIExhdGVyXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJCQkMgUmFkaW8gNFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzLzI4aXNoLWRheXMtbGF0ZXItYmJjLXJhZGlvLTQtMWJfNmlOdnBSOEYtWjZrTWhfdkIyM04uMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzZhNzZjM2I5ODQ0YjQ0NDViZTM0YzFmZGJmZGZiMGFhL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMS41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiNDlmODdlOWM3ZWI1NGRjYjlhOTc1MDBjZTFjM2JhYzdcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2tpLWRlZS10aGUtcG9kY2FzdC1jaGlhcmEtaHVudGVyLWRpYW5hLW5xclRiU0JrdHpNLUlqdjBRZ3RKbk1tLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiS2kgJiBEZWU6IFRoZSBQb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJDaGlhcmEgSHVudGVyICYgRGlhbmEgVmlja2Vyc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2tpLWRlZS10aGUtcG9kY2FzdC1jaGlhcmEtaHVudGVyLWRpYW5hLTVtUi15R1ozQTdFLUlqdjBRZ3RKbk1tLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMzcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80OWY4N2U5YzdlYjU0ZGNiOWE5NzUwMGNlMWMzYmFjNy9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjIuNSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly93d3cudGhld2Vlay5jby51ay9hcnRzLWxpZmUvY3VsdHVyZS85NTczMDAvYmVzdC1wb2RjYXN0cy13b21lbi1zb2NpZXR5P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIkEgY2xhc3NpYyBleGFtcGxlIHdhcyBoZXIgZGlzY292ZXJ5IHRoYXQgd29tZW4gYXJlIHR3aWNlIGFzIGxpa2VseSB0byBiZWNvbWUgdHJhcHBlZCBpbiBjYXJzIGR1cmluZyBhbiBhY2NpZGVudCwgYmVjYXVzZSBjcmFzaCB0ZXN0IGR1bW1pZXMgYXJlIG1vZGVsbGVkIG9uIG1lblxcdTIwMTlzIGJvZGllcy5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTc0MDkyMDIxNDUsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ3d3cudGhld2Vlay5jby51a1wiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy9mb3VyLW9mLXRoZS1iZXN0LXBvZGNhc3RzLWFib3V0LXdvbWVuLVhKUWFVa3F2ZVRNL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwic2Y3NXpaU0hkYXBcIixcbiAgICAgIFwidGl0bGVcIjogXCI3IG9mIHRoZSBiZXN0IGJlYXV0eSBwb2RjYXN0cyB0byBiaW5nZSByaWdodCBub3dcIixcbiAgICAgIFwidG90YWxcIjogNSxcbiAgICAgIFwicG9kY2FzdHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjA0MjUyNDBmZWJlOTQzNmE4YzhlOTgyMmQ0ODcyMTBiXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9vdXRzcG9rZW4tYmVhdXR5LWdsb2JhbC1tZWRpYS1lbnRlcnRhaW5tZW50LW1Xckd1djRCOWFsLUVsSV9iSDJBN2lwLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiT3V0c3Bva2VuIEJlYXV0eVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiR2xvYmFsIE1lZGlhICYgRW50ZXJ0YWlubWVudFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL291dHNwb2tlbi1iZWF1dHktZ2xvYmFsLW1lZGlhLWVudGVydGFpbm1lbnQtY2lmbEozWE1JTHQtRWxJX2JIMkE3aXAuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1NCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzA0MjUyNDBmZWJlOTQzNmE4YzhlOTgyMmQ0ODcyMTBiL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiNWQ5YzZkYjgxZDEyNGFlNTg2MWI2NGFjZTlmOTk2NDdcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2JyaXRpc2gtYmVhdXR5LWNvdW5jaWwtY2FyZWVyLWluc2lnaHRzLTlRai1NTG1UUlMyLTdneUw4T1B4U0RwLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQnJpdGlzaCBCZWF1dHkgQ291bmNpbCAtIENhcmVlciBJbnNpZ2h0c1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQnJpdGlzaCBCZWF1dHkgQ291bmNpbFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2JyaXRpc2gtYmVhdXR5LWNvdW5jaWwtY2FyZWVyLWluc2lnaHRzLTl4bExVMl95bnBILTdneUw4T1B4U0RwLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogbnVsbCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzVkOWM2ZGI4MWQxMjRhZTU4NjFiNjRhY2U5Zjk5NjQ3L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IG51bGxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI5YmJiNTg3ZmVjZDE0NGRiYTI3NWYwYzUxNTRiN2MzNVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnJlYWtpbmctYmVhdXR5LXBvZGNhc3QtYnJlYWtpbmctYmVhdXR5LUxjanFVQ2kzSnBELUJJYU10YkN2bV9pLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQnJlYWtpbmcgQmVhdXR5IFBvZGNhc3QgQnJlYWtpbmcgQmVhdXR5IEppbGwgRHVubiBKaWxsIER1bm5cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkRlYXIgTWVkaWEsIEppbGwgRHVubiBhbmQgQ2FybGVuZSBIaWdnaW5zXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYnJlYWtpbmctYmVhdXR5LXBvZGNhc3QtYnJlYWtpbmctYmVhdXR5LXIwN0ZSeG5zb1FDLUJJYU10YkN2bV9pLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy85YmJiNTg3ZmVjZDE0NGRiYTI3NWYwYzUxNTRiN2MzNS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImJkNjlhZGE5ZjRlZDQxZmI5ODRiZmViODc4ZTMxYWM5XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9iZWF1dHktZnJvbS10aGUtaGVhcnQtVnE3bHQ5Ym44QWotbUwzZHhqVGxJVzAuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJCZWF1dHkgZnJvbSB0aGUgSGVhcnQgXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJSb3NlIEdhbGxhZ2hlclwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2JlYXV0eS1mcm9tLXRoZS1oZWFydC16N3I5OG1uUUJFSy1tTDNkeGpUbElXMC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQzLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYmQ2OWFkYTlmNGVkNDFmYjk4NGJmZWI4NzhlMzFhYzkvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI5ZmMwYWFhMjU1NzA0MzY4YTk4YzdiOTkwNTZjOTk0MlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmF0LW1hc2NhcmEtZmF0LW1hc2NhcmEtdlAtTENKNUZoekgtdG1NZGY1d0ZrbG8uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJGYXQgTWFzY2FyYVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiRmF0IE1hc2NhcmFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9mYXQtbWFzY2FyYS1mYXQtbWFzY2FyYS1LTDlXQVhtZXhzYy10bU1kZjV3Rmtsby4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOWZjMGFhYTI1NTcwNDM2OGE5OGM3Yjk5MDU2Yzk5NDIvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vd3d3LmNvc21vcG9saXRhbm1lLmNvbS9saWZlL2Jlc3QtYmVhdXR5LXBvZGNhc3RzLWJpbmdlP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIk9mIGNvdXJzZSwgd2l0aCB0aGUgaW50ZXJuZXQgYmVpbmcgdGhlIGJsYWNrIGhvbGUgaXQgaXMsIHlvdSBtYXkgZmluZCBpdCBkaWZmaWN1bHQgdG8gc2NvdXQgb3V0IHNhaWQgYmVhdXR5IHBvZGNhc3RzLCBob3dldmVyLCBmZWFyIG5vdCwgZm9yIEkgaGF2ZSByb3VuZGVkIHVwIHNldmVuIGZhdm91cml0ZXMgKHdoaWNoIHJlYWxseSBhcmUgdGhlIGJlc3Qgb2YgdGhlIGJlc3QpLiBXaGV0aGVyIHlvdVxcdTIwMTlyZSBsb29raW5nIGZvciBwcm9kdWN0IHJlY29tbWVuZGF0aW9ucyBmcm9tIHRoZSBpbmR1c3RyeVxcdTIwMTlzIG1vc3Qgd2VsbC1rbm93biBleHBlcnRzLCBvciBhcmUgaW50ZXJlc3RlZCBpbiBoZWFyaW5nIGFib3V0IHRoZWlyIGNhcmVlciBwYXRocywgdGhlcmVcXHUyMDE5cyBzb21ldGhpbmcgZm9yIGV2ZXJ5b25lIGluIHRoZSBiZWxvdyBsaXN0LlxcXCJcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY1NzIzOTAwNTgzMSxcbiAgICAgIFwic291cmNlX2RvbWFpblwiOiBcInd3dy5jb3Ntb3BvbGl0YW5tZS5jb21cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvNy1vZi10aGUtYmVzdC1iZWF1dHktcG9kY2FzdHMtdG8tYmluZ2Utc2Y3NXpaU0hkYXAvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJYaXlKLTRzT1ZBUVwiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRvcCA1IGZlZWwtZ29vZCBwb2RjYXN0cyB0byBicmlnaHRlbiB1cCB5b3VyIGRheVwiLFxuICAgICAgXCJ0b3RhbFwiOiA1LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiZTMzNDNmN2YyNTFjNDc1ZWI5YWNmNWU1ZjFkYWVjMTNcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL215LXRoZXJhcGlzdC1naG9zdGVkLW1lLWdsb2JhbC1oYlBmVlNGbDB2My04Nm5zQmVJaUtiRS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIk15IFRoZXJhcGlzdCBHaG9zdGVkIE1lXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJHbG9iYWxcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9teS10aGVyYXBpc3QtZ2hvc3RlZC1tZS1nbG9iYWwtUkszekxCbWpOSjQtODZuc0JlSWlLYkUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2OCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2UzMzQzZjdmMjUxYzQ3NWViOWFjZjVlNWYxZGFlYzEzL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjY0M2VjZGVhYmVhNzQ4YWE4OGU3NWY1NmE4OTUwYmUwXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb2ItYmVja2V0dC1hbmQtam9zaC13aWRkaWNvbWJlcy1wYXJlbnRpbmctY1FXb2xzUkRMSjAteXJ3ZENfczJpUVAuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJSb2IgQmVja2V0dCBhbmQgSm9zaCBXaWRkaWNvbWJlJ3MgUGFyZW50aW5nIEhlbGxcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIktlZXAgSXQgTGlnaHQgTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb2ItYmVja2V0dC1hbmQtam9zaC13aWRkaWNvbWJlcy1wYXJlbnRpbmcta1FDZmVHOXBsMHUteXJ3ZENfczJpUVAuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3NixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY0M2VjZGVhYmVhNzQ4YWE4OGU3NWY1NmE4OTUwYmUwL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImFkYmVlYzhlYzQzZTQ5NTdiYjYzYjlmMGI3NDg5OTkxXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZGlhcnktb2YtYS1jZW8td2l0aC1zdGV2ZW4tYmFydGxldHQtUU9OWW83ZDUwVEctR2ZsbWdyZTN6dVUuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgRGlhcnkgT2YgQSBDRU8gd2l0aCBTdGV2ZW4gQmFydGxldHRcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlN0ZXZlbiBCYXJ0bGV0dCBcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZGlhcnktb2YtYS1jZW8td2l0aC1zdGV2ZW4tYmFydGxldHQtN0lRVzBSbndLekMtR2ZsbWdyZTN6dVUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYWRiZWVjOGVjNDNlNDk1N2JiNjNiOWYwYjc0ODk5OTEvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjAxMDJkM2Y4ZTBhODRlMWQ4ZmQ4NDVlODc0NjUwMDg4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zYXZpbmctZ3JhY2UtMjk0RGxwdENQTmEtR3R2M25GaDBjWTIuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJTYXZpbmcgR3JhY2VcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlRoZSBGZWxsYXMgU3R1ZGlvc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3NhdmluZy1ncmFjZS1TblR0Nm83QThnMi1HdHYzbkZoMGNZMi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMDEwMmQzZjhlMGE4NGUxZDhmZDg0NWU4NzQ2NTAwODgvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI0NWMzZTUwNThiMGY0MDE2YjY3OTc4Mzc1ZmJjYjA0YlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbmVhcmx5d2Vkcy1ibjBWa1BoREhaSi0tbjN1SUJIck9HYi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIk5lYXJseVdlZHNcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkphbVBvdCBQcm9kdWN0aW9uc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL25lYXJseXdlZHMtZ2J2UjNJckdYOFUtLW4zdUlCSHJPR2IuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1MixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzQ1YzNlNTA1OGIwZjQwMTZiNjc5NzgzNzVmYmNiMDRiL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL3d3dy5zaGVtYXppbmcubmV0L3RvcC01LWZlZWwtZ29vZC1wb2RjYXN0cy10by1icmlnaHRlbi11cC15b3VyLWRheS8/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXFwiRmluZGluZyBhIGdvb2QgcG9kY2FzdCB0aGF0IHlvdSBnZXQgbG9zdCBpbiBjYW4gYmUgYSBkaWZmaWN1bHQgY2hvaWNlIHRoZXNlIGRheXMgYmVjYXVzZSBTcG90aWZ5IGFuZCBBcHBsZSBQb2RjYXN0cyBhcmUgc2F0dXJhdGVkIHdpdGggY2VsZWJyaXRpZXMgYW5kIGluZmx1ZW5jZXJzIHN0YXJ0aW5nIHRoZWlyIG93biBzaG93cy4gVGhhdFxcdTIwMTlzIHdoeSB3ZVxcdTIwMTl2ZSBtYWRlIGEgbGlzdCBvZiBzb21lIGZlZWwtZ29vZCBwb2RjYXN0cyB0aGF0IHRvdWNoIG9uIHRvcGljcyBmcm9tIHJlbGF0aW9uc2hpcHMgYW5kIGdpcmwgdGFsaywgdG8gcGFyZW50aW5nIGFuZCBsaWZlIGFkdmljZS5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTcxNDk5ODAxMjgsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ3d3cuc2hlbWF6aW5nLm5ldFwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy90b3AtNS1mZWVsLWdvb2QtcG9kY2FzdHMtdG8tYnJpZ2h0ZW4tWGl5Si00c09WQVEvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJ5a29wSTVlYndjT1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjggTXVzdC1MaXN0ZW4gUG9kY2FzdHMgYnkgRmlyc3QgTmF0aW9ucyBDcmVhdG9yc1wiLFxuICAgICAgXCJ0b3RhbFwiOiA3LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiOGQ2MDFhMTFiYmU1NDY1Njk4OGU1YTU1NDJkZTg4ZThcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2F3YXllLWZ1bGwtcHJvZ3JhbS1wb2RjYXN0LWFiYy1yYWRpby1xTlBSanI0WVd4by00OEhVTUprdVlsZS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkFXQVlFISAtIEZ1bGwgcHJvZ3JhbSBwb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBQkMgUmFkaW9cIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9hd2F5ZS1mdWxsLXByb2dyYW0tcG9kY2FzdC1hYmMtcmFkaW8tTjBxb016RmhleDQtNDhIVU1Ka3VZbGUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiAzOSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzhkNjAxYTExYmJlNTQ2NTY5ODhlNWE1NTQyZGU4OGU4L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMiVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjA3ZGZlZDY0ZTRmYTQ1YTJiMzgwYWVhODgzMTliN2ZiXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ibGFjay1tYWdpYy13b21hbi1tdW5kYW5hcmEtYmF5bGVzLXpmRV9WTGs4djBCLVFkckpNQklSMW9DLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQmxhY2sgTWFnaWMgV29tYW5cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk11bmRhbmFyYSBCYXlsZXNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ibGFjay1tYWdpYy13b21hbi1tdW5kYW5hcmEtYmF5bGVzLXdGR3o1aFJWb1VNLVFkckpNQklSMW9DLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDMsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8wN2RmZWQ2NGU0ZmE0NWEyYjM4MGFlYTg4MzE5YjdmYi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjEyNDMzYzk4MjFjMDQ1ZTViNjdmODRhY2ExY2QzMGQ4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb21pbmctb3V0LWJsYWstY29taW5nLW91dC1ibGFrLTZjQmkwYk9YenA1LWQyZS1XNUlBek9vLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQ29taW5nIG91dCwgQmxha1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ29taW5nIE91dCwgQmxha1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2NvbWluZy1vdXQtYmxhay1jb21pbmctb3V0LWJsYWstVEFFbU1kSVhTeW4tZDJlLVc1SUF6T28uMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiBudWxsLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTI0MzNjOTgyMWMwNDVlNWI2N2Y4NGFjYTFjZDMwZDgvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogbnVsbFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjg5NDdkNzBlNTNiMzQ4ZGQ5MDEzYWE2ZjFhNjVmNTRlXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jdXJ0YWluLXRoZS1wb2RjYXN0LWN1cnRhaW50aGVwb2RjYXN0LTI4SHNBZnBoVE9aLXdqSmx1Y3FVTUtpLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQ3VydGFpbiBUaGUgUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ3VydGFpblRoZVBvZGNhc3RcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jdXJ0YWluLXRoZS1wb2RjYXN0LWN1cnRhaW50aGVwb2RjYXN0LXViaDQ4NTFZdEotLXdqSmx1Y3FVTUtpLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDMsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84OTQ3ZDcwZTUzYjM0OGRkOTAxM2FhNmYxYTY1ZjU0ZS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImU0NDFjMzI4YmIxNDQ3MDQ5ZWJjNjM0NDZkNGFlYTg2XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zYnMtbml0di1yYWRpby1uaXR2LTV6LUVJQVF2dXlXLS1aRkloekI0Q1E3LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiU0JTIE5JVFYgUmFkaW9cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk5JVFZcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zYnMtbml0di1yYWRpby1uaXR2LXgxcjJ1cXdST1lkLS1aRkloekI0Q1E3LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMjgsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9lNDQxYzMyOGJiMTQ0NzA0OWViYzYzNDQ2ZDRhZWE4Ni9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjEwJVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL3RoZWxhdGNoLmNvbS5hdS9maXJzdC1uYXRpb25zLXBvZGNhc3RzLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJUaGUgbW9yZSB3ZSBsaXN0ZW4gYW5kIGxlYXJuLCB0aGUgYmV0dGVyIGluZm9ybWVkIHdlXFx1MjAxOWxsIGJlIHRvIGdldCB1cCwgc3RhbmQgdXAsIGFuZCBzaG93IHVwIGZvciB0aGUgcGVvcGxlIHdob3NlIGxhbmQgd2UgbGl2ZSBvbi4gUmVhZCBvbiBmb3IgYSBsaXN0IG9mIGdyZWF0LCBpbmZvcm1hdGl2ZSBwb2RjYXN0cyB5b3UgY2FuIGFkZCB0byB5b3VyIHJvdXRpbmUuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU3MDQxMzIxNTMyLFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwidGhlbGF0Y2guY29tLmF1XCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzgtbXVzdC1saXN0ZW4tcG9kY2FzdHMtYnktZmlyc3QteWtvcEk1ZWJ3Y08vXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJqZ0xTczNjX1ltUFwiLFxuICAgICAgXCJ0aXRsZVwiOiBcIlRvcCAyMyBNb3RpdmF0aW9uYWwgUG9kY2FzdHMgdG8gTGlzdGVuIHRvIGluIDIwMjJcIixcbiAgICAgIFwidG90YWxcIjogMjMsXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmOWQ1ODg1ZDdjZjc0ODVkODkxZTgyZGVhMzE4NjY0MFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaG93LWktYnVpbHQtdGhpcy13aXRoLWd1eS1yYXotZ3V5LXJhei13b25kZXJ5LTdrcnBWdGNDek1CLVVDMHFIMjNpUDlULjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiSG93IEkgQnVpbHQgVGhpcyB3aXRoIEd1eSBSYXpcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkd1eSBSYXogfCBXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaG93LWktYnVpbHQtdGhpcy13aXRoLWd1eS1yYXotZ3V5LXJhei13b25kZXJ5LS10MzhLRklxbEFpLVVDMHFIMjNpUDlULjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogODUsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mOWQ1ODg1ZDdjZjc0ODVkODkxZTgyZGVhMzE4NjY0MC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI2ZDAxYzRlNjNjNTM0OTA5OWVhNWM2ZTYxN2M2NDZlNlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlcmFweS1mb3ItYmxhY2stZ2lybHMtam95LWhhcmRlbi1icmFkZm9yZC1fT0ZTYWswNmVNaS1Kd19DVWFCajFHSS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZXJhcHkgZm9yIEJsYWNrIEdpcmxzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJpSGVhcnRQb2RjYXN0cyBhbmQgSm95IEhhcmRlbiBCcmFkZm9yZCwgUGguRC5cIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGVyYXB5LWZvci1ibGFjay1naXJscy1qb3ktaGFyZGVuLWJyYWRmb3JkLXBJdDJzLVo0XzNSLUp3X0NVYUJqMUdJLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy82ZDAxYzRlNjNjNTM0OTA5OWVhNWM2ZTYxN2M2NDZlNi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI5NDNjMmRhODBkM2I0MmY5OWMyNjZhZDNmOWMwNmI1ZFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGVkLWhlYWx0aC10ZWQtUXUwR0VOc3dZM0EtRS1vVUs4QVpHYTIuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJURUQgSGVhbHRoXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJURURcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90ZWQtaGVhbHRoLXRlZC1IdWVnejJaVTVfUS1FLW9VSzhBWkdhMi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOTQzYzJkYTgwZDNiNDJmOTljMjY2YWQzZjljMDZiNWQvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIwZjg0ZmRmNGRiMDM0MGM0OTQ4MzBiZDY1OWUzM2E3YVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYmV5b25kLXRoZS10by1kby1saXN0LWVyaWstZmlzaGVyLWR0MXZ4eU1ZQUJyLWRPZ3F0MUFwQzhHLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQmV5b25kIHRoZSBUby1EbyBMaXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJFcmlrIEZpc2hlclwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2JleW9uZC10aGUtdG8tZG8tbGlzdC1lcmlrLWZpc2hlci1NekxfRGhCSjkySy1kT2dxdDFBcEM4Ry4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU5LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMGY4NGZkZjRkYjAzNDBjNDk0ODMwYmQ2NTllMzNhN2EvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmOTQxZThkMTJlZTI0OTZlYjkxZmVmNjU4ZDkzYTFjOVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmluYW5jaWFsLWZlbWluaXN0LWhlci1maXJzdC0xMDBrLTI4aWNuN0tPZnZYLXFEdWRjNVNNLUNGLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiRmluYW5jaWFsIEZlbWluaXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJIZXIgRmlyc3QgJDEwMEtcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9maW5hbmNpYWwtZmVtaW5pc3QtaGVyLWZpcnN0LTEwMGstWUI3bnBVZnEyUVMtcUR1ZGM1U00tQ0YuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2NixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2Y5NDFlOGQxMmVlMjQ5NmViOTFmZWY2NThkOTNhMWM5L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly93d3cudGhlbWFudWFsLmNvbS9wb2RjYXN0L2Jlc3QtbW90aXZhdGlvbmFsLXBvZGNhc3RzLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJUaGVzZSBzaG93cyBjYW4gY292ZXIgZXZlcnl0aGluZyBmcm9tIGNhcmVlciBhZHZpY2UgdG8gaGVhbHRoIGFuZCBob3cgdG8ga2VlcCB5b3VyIGhvdXNlIGNsZWFuLCBidXQgd2hhdCBtYWtlcyB0aGVtIGdyZWF0IGlzIGhvdyBvZnRlbiB0aGV5IGxlYXZlIHRoZSBsaXN0ZW5lciBpbnNwaXJlZCBhbmQgcmVhZHkgdG8gYmV0dGVyIHRoZWlyIG93biBsaWZlLlxcXCJcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY1NjczNTEyNzc3OSxcbiAgICAgIFwic291cmNlX2RvbWFpblwiOiBcInd3dy50aGVtYW51YWwuY29tXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzL3RvcC0yMy1tb3RpdmF0aW9uYWwtcG9kY2FzdHMtdG8tbGlzdGVuLWpnTFNzM2NfWW1QL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiT3k2bGFWcFM1a0tcIixcbiAgICAgIFwidGl0bGVcIjogXCJUaGUgMTggYmVzdCBuZXcgcG9kY2FzdHMgb2YgMjAyMiwgc28gZmFyXCIsXG4gICAgICBcInRvdGFsXCI6IDE4LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiYWJjOWUzODk3MDE2NDNiMGFlM2I1N2RjNTcxYzAyZDVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2dob3N0LWNodXJjaC1ieS1qYW1pZS1sb2Z0dXMtNERYVnBUYmVKclktczdZNnREbHdqMmguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJHaG9zdCBDaHVyY2ggYnkgSmFtaWUgTG9mdHVzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJpSGVhcnRQb2RjYXN0cyBhbmQgQ29vbCBab25lIE1lZGlhXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ2hvc3QtY2h1cmNoLWJ5LWphbWllLWxvZnR1cy1KbGhheFZBNlBibS1zN1k2dERsd2oyaC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ5LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYWJjOWUzODk3MDE2NDNiMGFlM2I1N2RjNTcxYzAyZDUvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxJVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiZGRmNjVmYzJmYjAxNGFiNzlkNDQ0ZDk1M2ZlNDVmNTlcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2t1cGVyLWlzbGFuZC1lYmZONGh5N29SdS1VcVNlRkdvdVJQQy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkt1cGVyIElzbGFuZFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ0JDIFBvZGNhc3RzXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMva3VwZXItaXNsYW5kLWFsSFhCdE9LR1BOLVVxU2VGR291UlBDLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTUsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9kZGY2NWZjMmZiMDE0YWI3OWQ0NDRkOTUzZmU0NWY1OS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjliYTc5Zjg0ZGNmMTQxOGE5ZTA1ODRlZDk3OGY2MTU1XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGlzLWlzLWRhdGluZy1mRnp4QjVWcTdMUi03NXczamtpdXBQRy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoaXMgSXMgRGF0aW5nXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJNYWduaWZpY2VudCBOb2lzZVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoaXMtaXMtZGF0aW5nLVVzSXROeGFISjgyLTc1dzNqa2l1cFBHLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy85YmE3OWY4NGRjZjE0MThhOWUwNTg0ZWQ5NzhmNjE1NS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI5NmI2MjJlNmM3ZDM0NWY2OTViZmRjYTBiYmI2N2UyOVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaGFyc2gtcmVhbGl0eS10aGUtc3Rvcnktb2YtbWlyaWFtLXJpdmVyYS1EdGs4V0xOLWx2dy1iMEV4VWNHTVFkQS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkhhcnNoIFJlYWxpdHk6IFRoZSBTdG9yeSBvZiBNaXJpYW0gUml2ZXJhXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaGFyc2gtcmVhbGl0eS10aGUtc3Rvcnktb2YtbWlyaWFtLXJpdmVyYS05TTd2czN1cFMyQi1iMEV4VWNHTVFkQS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU4LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOTZiNjIyZTZjN2QzNDVmNjk1YmZkY2EwYmJiNjdlMjkvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmYzFmMWJiODViMzc0NWQ3YjgxZDBjNzE4ZmU2NzAzMVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY292ZXItc3RvcnktV1JncVYxM3N6T2UtdXlOTGVVZ2xWcFcuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJDb3ZlciBTdG9yeVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmV3IFlvcmsgTWFnYXppbmVcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb3Zlci1zdG9yeS1SWnM5djBJWFlmMS11eU5MZVVnbFZwVy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDUzLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZmMxZjFiYjg1YjM3NDVkN2I4MWQwYzcxOGZlNjcwMzEvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vbWFzaGFibGUuY29tL2FydGljbGUvYmVzdC1wb2RjYXN0cy0yMDIyP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIkZyb20gU2VyaWFsIFByb2R1Y3Rpb25zJyBpbnZlc3RpZ2F0aXZlIGpvdXJuYWxpc20gd2l0aCBhIHBlcnNvbmFsIHRvdWNoLCBvciBoYXJkLWhpdHRpbmcgYW5kIHZpdGFsIHJlcG9ydGluZyBvbiB0aGUgSmFudWFyeSA2IGluc3VycmVjdGlvbiwgdG8gYW4gYXVkaW8gdmlydHVhbCBkYXRpbmcgc2hvdyBmcm9tIFBSWCwgYW5kIGV2ZW4gYSBmaWN0aW9uYWwgc3RvcnkgYWJvdXQgcmVhbC13b3JsZCBzdXBlcmhlcm8gdmlnaWxhbnRlcyBcXHUyMDE0IHlvdSdsbCBmaW5kIHlvdXJzZWxmIGJpbmdpbmcgdGhlc2UgZXhjZXB0aW9uYWwgc2hvd3MgYmFjay10by1iYWNrIGlmIHlvdSdyZSBub3QgY2FyZWZ1bC5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTY3MzQ5OTU2ODIsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJtYXNoYWJsZS5jb21cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvdGhlLTE4LWJlc3QtbmV3LXBvZGNhc3RzLW9mLTIwMjItc28tZmFyLU95NmxhVnBTNWtLL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiYnJSYU5jTVBsanFcIixcbiAgICAgIFwidGl0bGVcIjogXCI1IEdyZWF0IFBvZGNhc3RzIGZvciBLaWRzIG9uIFNob3J0IERyaXZlc1wiLFxuICAgICAgXCJ0b3RhbFwiOiA1LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiODVjMzUzYWRmYWIxNDNmOTkyNjFhYjBhZmRkYmZiNzRcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2ZsaXAtbW96aXMtZ3VpZGUtdG8taG93LXRvLWJlLWFuLWVhcnRobGluZy1xcFJ6QVBNRGRjSy10d0VqbU5KSDJyOS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkZsaXAgJiBNb3ppJ3MgR3VpZGUgdG8gSG93IFRvIEJlIEFuIEVhcnRobGluZyBcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlRpbmtlcmNhc3QgfCBXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmxpcC1tb3ppcy1ndWlkZS10by1ob3ctdG8tYmUtYW4tZWFydGhsaW5nLUtvdUhpUnBCYjFZLXR3RWptTkpIMnI5LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTQsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84NWMzNTNhZGZhYjE0M2Y5OTI2MWFiMGFmZGRiZmI3NC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjViMTZhOWRhMGU3ZDRkNjQ4ZDY2ZGIwZjEyNzMxYjFlXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy93aG8td2hlbi13b3ctUnhPcXN3ZmgyQUkteFhkQjNWT2c0dGsuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJXaG8sIFdoZW4sIFdvdyFcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlRpbmtlcmNhc3QgfCBXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvd2hvLXdoZW4td293LW9VWkZDd3BRY3Z4LXhYZEIzVk9nNHRrLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTMsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy81YjE2YTlkYTBlN2Q0ZDY0OGQ2NmRiMGYxMjczMWIxZS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjNmODUyNmIzMGZmYzQ0Yzk5NzQzMzc0YTU3ZGVjMmQ0XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saXR0bGUtc3Rvcmllcy1ldmVyeXdoZXJlLXdvbmRlcnktVFhKMUZrdExveU4tcjNKLVhHa2JhdVYuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJMaXR0bGUgU3RvcmllcyBFdmVyeXdoZXJlXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJXb25kZXJ5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbGl0dGxlLXN0b3JpZXMtZXZlcnl3aGVyZS13b25kZXJ5LWJtTWprdkNPdUxHLXIzSi1YR2tiYXVWLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTYsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8zZjg1MjZiMzBmZmM0NGM5OTc0MzM3NGE1N2RlYzJkNC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImI0ZGI4Yjk3Yzg4ZjQyZDM5MWVhYmU1NjY3ODBlZDdmXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdHdvLXByaW5jZXMtZ2ltbGV0LUFrTXlHQklMbEhzLUxrc1FCTk9fVTVKLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIFR3byBQcmluY2VzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJHaW1sZXRcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtdHdvLXByaW5jZXMtZ2ltbGV0LTZhUzFFQkdDUDRRLUxrc1FCTk9fVTVKLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjgsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9iNGRiOGI5N2M4OGY0MmQzOTFlYWJlNTY2NzgwZWQ3Zi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIxMDgxYjA2M2I2NTc0YTliYTQ3ZDBjZTkwNmNiZjU0ZVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ2lybC10YWxlcy1jb3JkZWxpYS1zdHVkaW9zLWRLdTZNQjI5OHpxLUx0dld3NEhRc1lPLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiR2lybCBUYWxlc1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiQ29yZGVsaWEgU3R1ZGlvc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2dpcmwtdGFsZXMtY29yZGVsaWEtc3R1ZGlvcy1XWFNsaTM4VUpJaC1MdHZXdzRIUXNZTy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYwLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTA4MWIwNjNiNjU3NGE5YmE0N2QwY2U5MDZjYmY1NGUvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIFwic291cmNlX3VybFwiOiBcImh0dHBzOi8vY2FmZW1vbS5jb20vcGFyZW50aW5nL3BvZGNhc3RzLWZvci1raWRzLXNob3J0LWRyaXZlcz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJIZXJlIGlzIGEgcm91bmR1cCBvZiBzb21lIG5ldyBwb2RjYXN0cyB0byBsaXN0ZW4gdG8gd2l0aCB5b3VyIGxhdGUgcHJlc2Nob29sIGFuZCBlYXJseSBlbGVtZW50YXJ5IGFnZWQga2lkcyBpbiB0aGUgY2FyLlxcXCJcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY1NjczNDc3OTM1MCxcbiAgICAgIFwic291cmNlX2RvbWFpblwiOiBcImNhZmVtb20uY29tXCIsXG4gICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jdXJhdGVkLXBvZGNhc3RzLzUtZ3JlYXQtcG9kY2FzdHMtZm9yLWtpZHMtb24tc2hvcnQtYnJSYU5jTVBsanEvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJtSmRFX2NoV3I0S1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjEwIGV4cGVydC1hcHByb3ZlZCBraWQgcG9kY2FzdHMgdG8gaGl0IHBsYXkgb24gcmlnaHQgbm93XCIsXG4gICAgICBcInRvdGFsXCI6IDEwLFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiY2NiNGQyNzU0YjYxNDMwN2IyZTBjNTM3NjAxZDgxZmJcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2NpcmNsZS1yb3VuZC13YnVyLWY5RXd2R05ZdDZJLU4tcVVqT1gyNkozLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQ2lyY2xlIFJvdW5kXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJXQlVSXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2lyY2xlLXJvdW5kLXdidXItRGNXYXI5aWVUcXctTi1xVWpPWDI2SjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3NCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2NjYjRkMjc1NGI2MTQzMDdiMmUwYzUzNzYwMWQ4MWZiL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImE1OTQ5NmM4YTA1NTQ1ZTFhMTY5MjRkZmYwYjM2ZDQ2XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtc3Rvcnktc2VlZHMtcG9kY2FzdC1saXRlcmFyeS1zYWZhcmktbTFOSjZwdlBaZTMtTVR2TEcteFdJYUIuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgU3RvcnkgU2VlZHMgUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTGl0ZXJhcnkgU2FmYXJpXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXN0b3J5LXNlZWRzLXBvZGNhc3QtbGl0ZXJhcnktc2FmYXJpLWt1bl8zWXpwVExnLU1UdkxHLXhXSWFCLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDgsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9hNTk0OTZjOGEwNTU0NWUxYTE2OTI0ZGZmMGIzNmQ0Ni9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJjZWZjNGM1Y2VmZDQ0NjE3YTUwMzBiMzcyY2U2NzM2OFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbmV3c3ktcG9vbG9vemktdGhlLW5ld3MtcG9kLWZvci1raWRzLWxlZWxhLXpybWxjWkR4aFR5LWE0V3ZmRGVSWFpQLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTmV3c3kgUG9vbG9vemkgLSBUaGUgTmV3cyBQb2QgZm9yIEtpZHNcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkxlZWxhIFNpdmFzYW5rYXIgUHJpY2tpdHQsIEx5bmRlZSBQcmlja2l0dFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL25ld3N5LXBvb2xvb3ppLXRoZS1uZXdzLXBvZC1mb3Ita2lkcy1sZWVsYS03eWhUS1p6STNOUi1hNFd2ZkRlUlhaUC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQzLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvY2VmYzRjNWNlZmQ0NDYxN2E1MDMwYjM3MmNlNjczNjgvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI5NmYxZTU5NzAwYTE0YTI2YjQyYzIzNmNhOWM5ZjZiMFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ29vZC1uaWdodC1zdG9yaWVzLWZvci1yZWJlbC1naXJscy1yZWJlbC1mSHRzcDhaWVA1aS1pcXZCbUktbldzeC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkdvb2QgTmlnaHQgU3RvcmllcyBmb3IgUmViZWwgR2lybHNcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlJlYmVsIEdpcmxzXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ29vZC1uaWdodC1zdG9yaWVzLWZvci1yZWJlbC1naXJscy1yZWJlbC1SR3BrZV9RS0JXWS1pcXZCbUktbldzeC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDcyLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOTZmMWU1OTcwMGExNGEyNmI0MmMyMzZjYTljOWY2YjAvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiMjJhZjIyMzY0NGM0NDk3OWI5ZGYzNGUyODdkNjg3NTdcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3N0b29wa2lkLXN0b3JpZXMtbWVsLXZpY3Rvci1GTXZDLXFWMG9IWC1helZKaW8wQ0dtci4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlN0b29wa2lkIFN0b3JpZXNcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIk1lbCBWaWN0b3JcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9zdG9vcGtpZC1zdG9yaWVzLW1lbC12aWN0b3ItQjN0OFoyNGJSTVgtYXpWSmlvMENHbXIuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzIyYWYyMjM2NDRjNDQ5NzliOWRmMzRlMjg3ZDY4NzU3L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL21hc2hhYmxlLmNvbS9hcnRpY2xlL3BvZGNhc3RzLWZhbWlsaWVzLWNoaWxkcmVuLXRlZW5zP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIkNoZWNrIG91dCBhIGZldyBub3RhYmxlIHBpY2tzIGJlbG93LCBhbmQgdGhlbiB2aXNpdCBDb21tb25TZW5zZSdzIHdlYnNpdGUgZm9yIHRoZSBmdWxsIGxpc3Qgb2YgYXBwcm92ZWQgYW5kIHJldmlld2VkIENvbW1vbiBTZW5zZSBTZWxlY3Rpb25zIHdoZW4gc2VhcmNoaW5nIGZvciB5b3VyIGZhbWlsaWVzJyBuZXh0IGF1ZGlvIGFkdmVudHVyZS5cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTY3MzQ3MDI1ODAsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJtYXNoYWJsZS5jb21cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvMTAtZXhwZXJ0LWFwcHJvdmVkLWtpZC1wb2RjYXN0cy10by1oaXQtbUpkRV9jaFdyNEsvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJrbDBGUkR0U2J1WVwiLFxuICAgICAgXCJ0aXRsZVwiOiBcIkZpbGwgVXAgWW91ciBFbXB0eSBUViBTcGFjZSBXaXRoIFRoZXNlIFBvZGNhc3RzIEFib3V0IFRWIFNob3dzXCIsXG4gICAgICBcInRvdGFsXCI6IDcsXG4gICAgICBcInBvZGNhc3RzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmZjIxZTE4MDI5Y2Y0NDMwYjk2NTk2YzNjYWY0NmM4NFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFsd2F5cy1zdW5ueS1wb2RjYXN0LWNoYXJsaWUtZGF5LWdsZW5uLXY4N0xOYUR6MFdpLXg2Z1FsSjlxWkNuLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEFsd2F5cyBTdW5ueSBQb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJDaGFybGllIERheSwgR2xlbm4gSG93ZXJ0b24sIFJvYiBNY0VsaGVubmV5XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFsd2F5cy1zdW5ueS1wb2RjYXN0LWNoYXJsaWUtZGF5LWdsZW5uLUJELUlzcjRiOTZ0LXg2Z1FsSjlxWkNuLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNzAsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mZjIxZTE4MDI5Y2Y0NDMwYjk2NTk2YzNjYWY0NmM4NC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJiMDc4MDlkNjM1MGU0OGEyYWUwNzYwNzJmNDZmNGI3OVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvb2ZmaWNlLWxhZGllcy1lYXJ3b2xmLWplbm5hLWZpc2NoZXItYW5kLWFyeVJlYmZsZ0lxLXhud1JNRmZyZFVoLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiT2ZmaWNlIExhZGllc1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiRWFyd29sZiAmIEplbm5hIEZpc2NoZXIgYW5kIEFuZ2VsYSBLaW5zZXlcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9vZmZpY2UtbGFkaWVzLWVhcndvbGYtamVubmEtZmlzY2hlci1hbmQtTmM2N21Xc0VnYXoteG53Uk1GZnJkVWguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA4OSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2IwNzgwOWQ2MzUwZTQ4YTJhZTA3NjA3MmY0NmY0Yjc5L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjE1ZDVjOWY1ZmJmZjQxNmE5NGJhNjdhNmIzMmE5MWQ5XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtZ29vZC1wbGFjZS1aaU9wNklDTkVTSC12NnNqZHVSXzVlYS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBHb29kIFBsYWNlXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBZ25cXHUwMGU4cyBEcmV5ZnVzXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWdvb2QtcGxhY2UtT0gteFpFbG9qNGUtdjZzamR1Ul81ZWEuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiAzNSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzE1ZDVjOWY1ZmJmZjQxNmE5NGJhNjdhNmIzMmE5MWQ5L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMyVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjFiN2YwMTI1ZjQ1MjQwMjJiOGE3NTBiY2M1Zjc1ZTUxXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9idWZmZXJpbmctdGhlLXZhbXBpcmUtc2xheWVyLWEtYnVmZnktdGhlLW1BYnZadWdmSEc2LTdSV3hhTUhTcWNZLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQnVmZmVyaW5nIHRoZSBWYW1waXJlIFNsYXllciB8IEEgQnVmZnkgdGhlIFZhbXBpcmUgU2xheWVyIFBvZGNhc3RcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkplbm55IE93ZW4gWW91bmdzICYgS3Jpc3RpbiBSdXNzb1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2J1ZmZlcmluZy10aGUtdmFtcGlyZS1zbGF5ZXItYS1idWZmeS10aGUtWWdBdmhYbnhEbXEtN1JXeGFNSFNxY1kuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzFiN2YwMTI1ZjQ1MjQwMjJiOGE3NTBiY2M1Zjc1ZTUxL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4xJVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiNDIzYjc3MTUyM2ZmNGU4ODhlZmYzODRiYjc4MjFjY2VcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JvYi1oYXMtYS1wb2RjYXN0LXN1cnZpdm9yLWJpZy1icm90aGVyLXNTOFBlSHJ6eUxVLW5BNk9WYjFVZURZLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiUm9iIEhhcyBhIFBvZGNhc3QgfCBTdXJ2aXZvciAvIEJpZyBCcm90aGVyIC8gQW1hemluZyBSYWNlIC0gUkhBUFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiUm9iIEhhcyBhIFBvZGNhc3RcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb2ItaGFzLWEtcG9kY2FzdC1zdXJ2aXZvci1iaWctYnJvdGhlci12bGpNaFBXdS1wYS1uQTZPVmIxVWVEWS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY5LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNDIzYjc3MTUyM2ZmNGU4ODhlZmYzODRiYjc4MjFjY2UvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL3d3dy5kaXN0cmFjdGlmeS5jb20vcC9iZXN0LXBvZGNhc3RzLWFib3V0LXR2LXNob3dzP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiXFxcIkl0XFx1MjAxOXMgYmVlbiB0aGUgZ29sZGVuIGFnZSBvZiBwb2RjYXN0aW5nIGZvciBxdWl0ZSBzb21lIHRpbWUsIGFuZCBub3csIHBvZGNhc3RzIGFuZCB0ZWxldmlzaW9uIGFyZSBqb2luaW5nIGZvcmNlcy4gU29tZSBwb2RjYXN0cyBhcmUgYmVpbmcgYWRhcHRlZCBpbnRvIHRlbGV2aXNpb24gc2hvd3MsIHdoZXJlYXMgc29tZSB0ZWxldmlzaW9uIHNob3dzIGFyZSBnZXR0aW5nIHBvZGNhc3RzIHRvIGFjY29tcGFueSBlYWNoIGVwaXNvZGUuIFNvIHdlXFx1MjAxOXZlIG1hZGUgYSBsaXN0IG9mIHNvbWUgb2YgdGhlIGJlc3QgcG9kY2FzdHMgdG8gbGlzdGVuIHRvIHdoaWxlIHdlIHJld2F0Y2ggb3VyIGZhdm9yaXRlIHRlbGV2aXNpb24gc2VyaWVzLlxcXCJcIixcbiAgICAgIFwicHViX2RhdGVfbXNcIjogMTY1NjczNDU5NzI5NyxcbiAgICAgIFwic291cmNlX2RvbWFpblwiOiBcInd3dy5kaXN0cmFjdGlmeS5jb21cIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvZmlsbC11cC15b3VyLWVtcHR5LXR2LXNwYWNlLXdpdGgtdGhlc2Uta2wwRlJEdFNidVkvXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogXCJlazNTUXhCaFJ2V1wiLFxuICAgICAgXCJ0aXRsZVwiOiBcIjkgb2YgdGhlIEJlc3QgVHJhdmVsIFBvZGNhc3RzIHRvIFRha2UgWW91IEF3YXlcIixcbiAgICAgIFwidG90YWxcIjogOSxcbiAgICAgIFwicG9kY2FzdHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjJlMjVhZGU5MmE4YTRlYTM5MWIxOWRjYzE3MGEwNmQ2XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9ub3QtbG9zdC1wdXNoa2luLWluZHVzdHJpZXMtNTlQWHUyd2p6V2gtblJOR1laOFVGcHIuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJOb3QgTG9zdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiaUhlYXJ0UG9kY2FzdHMgYW5kIFB1c2hraW4gSW5kdXN0cmllc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL25vdC1sb3N0LXB1c2hraW4taW5kdXN0cmllcy0xUkJFekgtZ2ZZVy1uUk5HWVo4VUZwci4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ4LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMmUyNWFkZTkyYThhNGVhMzkxYjE5ZGNjMTcwYTA2ZDYvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxJVwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiMTZhMjk0NzIzN2VkNGNlM2ExOWVjNTI5NDQyN2MxYjVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JvdWdoLXRyYW5zbGF0aW9uLW5wci1kN0JLRkpSTkRhSC1pVkdiVUZlWjFYRS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlJvdWdoIFRyYW5zbGF0aW9uXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJOUFJcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9yb3VnaC10cmFuc2xhdGlvbi1ucHItanZpZEFaOUtmdU0taVZHYlVGZVoxWEUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzE2YTI5NDcyMzdlZDRjZTNhMTllYzUyOTQ0MjdjMWI1L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjk0YWVjOWU0NTViODRhMWNiN2YxNTQ5MGUzZmI0N2NmXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9mYXItZmx1bmctd2l0aC1zYWxlZW0tcmVzaGFtd2FsYS10ZWQtNGpxaE5sWWdXTFYtWkd1a05BVkNZc1cuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJGYXIgRmx1bmcgd2l0aCBTYWxlZW0gUmVzaGFtd2FsYVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiVEVEXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZmFyLWZsdW5nLXdpdGgtc2FsZWVtLXJlc2hhbXdhbGEtdGVkLUxVMTJKVC1HQ0t1LVpHdWtOQVZDWXNXLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTYsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy85NGFlYzllNDU1Yjg0YTFjYjdmMTU0OTBlM2ZiNDdjZi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjIxNDIzNTQ2MTJkZTQ4MzI5ZGJkNWY3NGM3MDM5MWU4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy92YW5pc2hpbmctcG9zdGNhcmRzLWV2YW4tc3Rlcm4tYmlRSS1aelMwTEUtbktJdy1NY1lsSFguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJWYW5pc2hpbmcgUG9zdGNhcmRzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJFdmFuIFN0ZXJuXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdmFuaXNoaW5nLXBvc3RjYXJkcy1ldmFuLXN0ZXJuLTNPX3ItZFRWRGJoLW5LSXctTWNZbEhYLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDUsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8yMTQyMzU0NjEyZGU0ODMyOWRiZDVmNzRjNzAzOTFlOC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI2NTUzYzUyOWViNTA0MzVlODZmOWY5MWJkNTliZDMyZVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZ3JlZXRpbmdzLWZyb20tc29tZXdoZXJlLWEtdHJhdmVsLXNob3ctemFjaC1pdDVjeFN6akpCbS1VQURzR3BaaU1vUi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkdyZWV0aW5ncyBmcm9tIFNvbWV3aGVyZSB8IEEgVHJhdmVsIFNob3dcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlphY2ggTWFja1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2dyZWV0aW5ncy1mcm9tLXNvbWV3aGVyZS1hLXRyYXZlbC1zaG93LXphY2gtU1A2RndKM2NzOGEtVUFEc0dwWmlNb1IuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzY1NTNjNTI5ZWI1MDQzNWU4NmY5ZjkxYmQ1OWJkMzJlL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlmZWhhY2tlci5jb20uYXUvMjAyMi8wNi85LW9mLXRoZS1iZXN0LXRyYXZlbC1wb2RjYXN0cy10by10YWtlLXlvdS1hd2F5Lz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJUaGUgZm9sbG93aW5nIG5pbmUgc2hvd3MgZXhwbG9yZSBwbGFjZXMgeW91XFx1MjAxOXZlIGFsd2F5cyBkcmVhbWVkIG9mIHZpc2l0aW5nLCBjaXRpZXMgeW91XFx1MjAxOXZlIG5ldmVyIGhlYXJkIG9mLCBhbmQgdG93bnMgbm90IGVhc2lseSBmb3VuZCBvbiBtYXBzLiBFYWNoIG9uZSBoYXMgYSB1bmlxdWUgc3BpbiBvbiB0aGUgdHJhdmVsb2cgZm9ybWF0IFxcdTIwMTQgaW4gTm90IExvc3QsIEJyZW5kYW4gRnJhbmNpcyBOZXduYW0gaXMgb24gYSBtaXNzaW9uIHRvIGdldCBpbnZpdGVkIHRvIGRpbm5lciBwYXJ0aWVzIGJ5IHN0cmFuZ2VycyBhbGwgb3ZlciB0aGUgd29ybGQ7IEV2YW4gU3Rlcm5cXHUyMDE5cyBWYW5pc2hpbmcgUG9zdGNhcmRzIHRha2VzIHlvdSBvbiBhIDExLDAxNiBrbSBqb3VybmV5IGRvd24gUm91dGUgNjYgXFx1MjAxNCBhbmQgd2lsbCBmdWVsIGFuZCBzYXRlIHlvdXIgd2FuZGVybHVzdCBpbiBlcXVhbCBtZWFzdXJlLiBMZXRcXHUyMDE5cyBnbyFcXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTY2MDIwMTUxMzcsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJ3d3cubGlmZWhhY2tlci5jb20uYXVcIixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2N1cmF0ZWQtcG9kY2FzdHMvOS1vZi10aGUtYmVzdC10cmF2ZWwtcG9kY2FzdHMtdG8tdGFrZS1lazNTUXhCaFJ2Vy9cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcIjZWck9BZmx0cWVfXCIsXG4gICAgICBcInRpdGxlXCI6IFwiOCBXZWxsYmVpbmcgUG9kY2FzdHMgVG8gR2l2ZSBZb3UgQSBMaXR0bGUgTGlmZSBCb29zdFwiLFxuICAgICAgXCJ0b3RhbFwiOiA3LFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiOWRjOWZkZDcyNGMyNGFjNGE0OTc3ODhiMTkwNjRmMWVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3VubG9ja2luZy11cy13aXRoLWJyZW5cXHUwMGU5LWJyb3duLXBhcmNhc3QtbmV0d29yay13NHFLelk1T3B5Qi0zQkxoSF8xT1hmWi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlVubG9ja2luZyBVcyB3aXRoIEJyZW5cXHUwMGU5IEJyb3duXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJQYXJjYXN0IE5ldHdvcmtcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy91bmxvY2tpbmctdXMtd2l0aC1icmVuXFx1MDBlOS1icm93bi1wYXJjYXN0LW5ldHdvcmstZS1VZkNxTG4yeWktM0JMaEhfMU9YZlouMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA4MSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzlkYzlmZGQ3MjRjMjRhYzRhNDk3Nzg4YjE5MDY0ZjFlL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcImMwYTE1ODk4YWE2MDRjZGQ5NjUxZTc2NDcwZTAwMGI4XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9oZWFsdGgtY2hlY2stYmJjLXdvcmxkLXNlcnZpY2UtY0lTN2tzSGZZNFItMzI2dkFmOWt0cVQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJIZWFsdGggQ2hlY2tcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkJCQyBXb3JsZCBTZXJ2aWNlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvaGVhbHRoLWNoZWNrLWJiYy13b3JsZC1zZXJ2aWNlLVdVdlQ1M1ZfbUpQLTMyNnZBZjlrdHFULjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jMGExNTg5OGFhNjA0Y2RkOTY1MWU3NjQ3MGUwMDBiOC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJmYjFmZGY5NWE4OTU0YTZjOGUxYmU4NzkzMDY5YmM1ZlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLW1pY2hlbGxlLW9iYW1hLXBvZGNhc3QtQld5VnZwSzU2ZEQtNE1rN2JXbDN3aFguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgTWljaGVsbGUgT2JhbWEgUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSGlnaGVyIEdyb3VuZCAmIFNwb3RpZnkgXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLW1pY2hlbGxlLW9iYW1hLXBvZGNhc3QtNWg5VVFva0l6dWItNE1rN2JXbDN3aFguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2ZiMWZkZjk1YTg5NTRhNmM4ZTFiZTg3OTMwNjliYzVmL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjg1YzBlOWY4OWY3YzQxYWFhNzQyMGNkM2IyNDI0YTI2XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaGFwcGluZXNzLWxhYi13aXRoLWRyLWxhdXJpZS1zYW50b3MtRzVJb09QalpGTkstaEIzUEFxckg1RXUuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgSGFwcGluZXNzIExhYiB3aXRoIERyLiBMYXVyaWUgU2FudG9zXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJQdXNoa2luIEluZHVzdHJpZXNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtaGFwcGluZXNzLWxhYi13aXRoLWRyLWxhdXJpZS1zYW50b3MtMTJWOEVHd1VSOVktaEIzUEFxckg1RXUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3OCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzg1YzBlOWY4OWY3YzQxYWFhNzQyMGNkM2IyNDI0YTI2L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wMSVcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJpZFwiOiBcIjgxMzlhNDhkNTdlYTQwZjBiMmZhOGE1YmRlNmZhY2Y2XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9wb3dlci1ob3VyLWFkcmllbm5lLWhlcmJlcnQtMFV5Uy1jaXhodDgtWGdxN1NPbVJ6Q18uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJQb3dlciBIb3VyXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBZHJpZW5uZSBIZXJiZXJ0XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcG93ZXItaG91ci1hZHJpZW5uZS1oZXJiZXJ0LVUzV0dMUGVEbHVILVhncTdTT21SekNfLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNTcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84MTM5YTQ4ZDU3ZWE0MGYwYjJmYThhNWJkZTZmYWNmNi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgXCJzb3VyY2VfdXJsXCI6IFwiaHR0cHM6Ly93d3cudGhlaGFuZGJvb2suY29tL3RoZS1iZXN0LXdlbGxiZWluZy1wb2RjYXN0cy15b3UtY2FuLWxpc3Rlbi10by8/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJcXFwiV2VcXHUyMDE5dmUgcHV0IHRvZ2V0aGVyIGEgbGlzdCBvZiBzb21lIG9mIHRoZSBiZXN0IHdlbGxiZWluZyBwb2RjYXN0cyB0aGVyZSBhcmUsIHNvbWUgd2hpY2ggZm9jdXMgb24gaGFwcGluZXNzLCBvdGhlcnMgb24gcmVsYXRpb25zaGlwcyBhbmQgZnJpZW5kc2hpcHMsIGFuZCBzb21lIG9uIHB1cnN1aW5nIG91ciBnb2FscywgYW5kIHRoZXlcXHUyMDE5cmUgYWxsIHRoZXJlIHRvIGhlbHAgbWFrZSB5b3UgZmVlbCBiZXR0ZXIuXFxcIlwiLFxuICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU2NjAxOTIyMzM3LFxuICAgICAgXCJzb3VyY2VfZG9tYWluXCI6IFwid3d3LnRoZWhhbmRib29rLmNvbVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy84LXdlbGxiZWluZy1wb2RjYXN0cy10by1naXZlLXlvdS1hLTZWck9BZmx0cWVfL1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwiU3g2MDdhenJCNV9cIixcbiAgICAgIFwidGl0bGVcIjogXCIxMCBCZXN0IEhpc3RvcmljYWwgUG9kY2FzdHMgTGlrZSBCZWhpbmQgVGhlIEJhc3RhcmRzXCIsXG4gICAgICBcInRvdGFsXCI6IDEwLFxuICAgICAgXCJwb2RjYXN0c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcImlkXCI6IFwiOWE4YTBiZDA2MzAwNDRjMGE3OWIxNzkxMzdkNTJjNTlcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2xpb25zLWxlZC1ieS1kb25rZXlzLXBvZGNhc3QtbGlvbnMtbGVkLWJ5LUp1VzlCUS1fRXdHLVI0cjdwRTJNbmlTLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiTGlvbnMgTGVkIEJ5IERvbmtleXMgUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTGlvbnMgTGVkIEJ5IERvbmtleXNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9saW9ucy1sZWQtYnktZG9ua2V5cy1wb2RjYXN0LWxpb25zLWxlZC1ieS1TT2xIZUJBY3F4ay1SNHI3cEUyTW5pUy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU3LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOWE4YTBiZDA2MzAwNDRjMGE3OWIxNzkxMzdkNTJjNTkvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCI0ZTc3YmVmNWE2MTc0YmViODI2NGUwMDE3ZjgwOTQ3NFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY29vbC1wZW9wbGUtd2hvLWRpZC1jb29sLXN0dWZmLWJYcU5oRnNyXzVtLUtVUUZfdWs1ZVZ4LjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiQ29vbCBQZW9wbGUgV2hvIERpZCBDb29sIFN0dWZmXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJpSGVhcnRQb2RjYXN0cyBhbmQgQ29vbCBab25lIE1lZGlhXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY29vbC1wZW9wbGUtd2hvLWRpZC1jb29sLXN0dWZmLUk4TjRlZlY1azJGLUtVUUZfdWs1ZVZ4LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDYsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy80ZTc3YmVmNWE2MTc0YmViODI2NGUwMDE3ZjgwOTQ3NC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJlYjU2NjFmNWJlNWI0OTk0YWRlMGI4YmFjYmRkNjJmNlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFnZS1vZi1uYXBvbGVvbi1wb2RjYXN0LWV2ZXJldHQtcnVtbWFnZS03TTZVWDNDT28yZC14bE5CSC1zMFVMSi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBBZ2Ugb2YgTmFwb2xlb24gUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiRXZlcmV0dCBSdW1tYWdlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWFnZS1vZi1uYXBvbGVvbi1wb2RjYXN0LWV2ZXJldHQtcnVtbWFnZS12UGM4ajZuSlNzZy14bE5CSC1zMFVMSi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDYzLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZWI1NjYxZjViZTViNDk5NGFkZTBiOGJhY2JkZDYyZjYvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCIxODJhNjJhMDgyNTE0OTFiODgxMjY0OWUwOTQyNDEzMVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWVnYWNvcnAtaWhlYXJ0cG9kY2FzdHMtYjNNV3FSTDBUa2YtaDdqc3drelFWYkguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJNZWdhY29ycFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiaUhlYXJ0UG9kY2FzdHNcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tZWdhY29ycC1paGVhcnRwb2RjYXN0cy1BbVM5YjdZMFhETS1oN2pzd2t6UVZiSC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDQ0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMTgyYTYyYTA4MjUxNDkxYjg4MTI2NDllMDk0MjQxMzEvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIxLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwiaWRcIjogXCJlNDBkYTQ0YTQxOTY0YmVhOTFlZjg3NTBjM2Y4MmZkZFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWRvbGxvcC13aXRoLWRhdmUtYW50aG9ueS1hbmQtZ2FyZXRoLUtRcWhMeVpTM3BPLXozUXBHckZmeXhFLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIERvbGxvcCB3aXRoIERhdmUgQW50aG9ueSBhbmQgR2FyZXRoIFJleW5vbGRzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBbGwgVGhpbmdzIENvbWVkeVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1kb2xsb3Atd2l0aC1kYXZlLWFudGhvbnktYW5kLWdhcmV0aC1yQ1dnS1B5NEcydC16M1FwR3JGZnl4RS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDgxLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvZTQwZGE0NGE0MTk2NGJlYTkxZWY4NzUwYzNmODJmZGQvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjAxJVwiXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBcInNvdXJjZV91cmxcIjogXCJodHRwczovL3NjcmVlbnJhbnQuY29tL2Jlc3QtaGlzdG9yaWNhbC1wb2RjYXN0cy1iZWhpbmQtdGhlLWJhc3RhcmRzLz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlxcXCJXaGVuIGl0IGNvbWVzIHRvIGRpc2N1c3NpbmcgYWJvdXQgaGlzdG9yeSdzIGdyZWF0ZXN0IGFuZCBtb3N0IHBvd2VyZnVsIG1vbnN0ZXJzLCB3aGljaCBwb2RjYXN0cyBzZXJpZXMgY2FuIGNvbXBhcmUgdG8gQmVoaW5kIHRoZSBCYXN0YXJkcz9cXFwiXCIsXG4gICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTY2MDE3OTU3MDcsXG4gICAgICBcInNvdXJjZV9kb21haW5cIjogXCJzY3JlZW5yYW50LmNvbVwiLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy8xMC1iZXN0LWhpc3RvcmljYWwtcG9kY2FzdHMtbGlrZS1TeDYwN2F6ckI1Xy9cIlxuICAgIH1cbiAgXSxcbiAgXCJuZXh0X3BhZ2VfbnVtYmVyXCI6IDMsXG4gIFwicHJldmlvdXNfcGFnZV9udW1iZXJcIjogMVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcImN1cmF0ZWRfbGlzdHNcIixcbiAgICBcImhhc19uZXh0XCIsXG4gICAgXCJoYXNfcHJldmlvdXNcIixcbiAgICBcIm5leHRfcGFnZV9udW1iZXJcIixcbiAgICBcInBhZ2VfbnVtYmVyXCIsXG4gICAgXCJwcmV2aW91c19wYWdlX251bWJlclwiLFxuICAgIFwidG90YWxcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwidG90YWxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDI1XG4gICAgfSxcbiAgICBcImhhc19uZXh0XCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgIFwiZXhhbXBsZVwiOiB0cnVlXG4gICAgfSxcbiAgICBcInBhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAyXG4gICAgfSxcbiAgICBcImhhc19wcmV2aW91c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICBcImV4YW1wbGVcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCJjdXJhdGVkX2xpc3RzXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlZiMDE3U3gzbDhGXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQ3VyYXRlZCBsaXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIGN1cmF0ZWQgbGlzdCBtZXRhZGF0YSB2aWEgYEdFVCAvY3VyYXRlZF9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjcgQm9va2lzaCBQb2RjYXN0cyBmb3IgQXZpZCBSZWFkZXJzIE9uIHRoZSBHb1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1cmF0ZWQgbGlzdCBuYW1lLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInRvdGFsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAyNSxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdG90YWwgbnVtYmVyIG9mIHBvZGNhc3RzIGluIHRoaXMgY3VyYXRlZCBsaXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInBvZGNhc3RzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICAgICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTWluaW11bSBtZXRhIGRhdGEgb2YgdXAgdG8gNSBwb2RjYXN0cyBpbiB0aGlzIGN1cmF0ZWQgbGlzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJzb3VyY2VfdXJsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9wYXJhZGUuY29tLzcxODkxMy9hc2hsZXlfam9obnNvbi83LWJvb2tpc2gtcG9kY2FzdHMtZm9yLWF2aWQtcmVhZGVycy1vbi10aGUtZ28vXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIG9mIHRoZSBzb3VyY2Ugb2YgdGhpcyBjdXJhdGVkIGxpc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJDb21tdXRpbmcgdG8gd29yayBpcyBhbHdheXMgYmV0dGVyIHdoZW4geW91IGhhdmUgYSBncmVhdCBuZXcgcG9kY2FzdCB0byBsaXN0ZW4gdG8sIGFuZCB0aGlzIHllYXIsIHdlIGhhdmUgZGlzY292ZXJlZCBzb21lIG9mIG91ciBmYXZvcml0ZSBwb2RjYXN0cyB5ZXQgZm9yIHJlYWRlcnMgYW5kIGJvb2stbG92ZXJzLiBUaGVzZSBwb2RjYXN0cyBmb3IgcmVhZGVycyBlbnRlcnRhaW4gdXMgYW5kIHByb3ZpZGUgbm8gc2hvcnRhZ2Ugb2YgbmV3IGJvb2sgcmVjb21tZW5kYXRpb25zIHRvby5cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGlzIGN1cmF0ZWQgbGlzdCdzIGRlc2NyaXB0aW9uLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInB1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNTU2ODQzNDg0MzAxLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlB1Ymxpc2hlZCBkYXRlIG9mIHRoaXMgY3VyYXRlZCBsaXN0LiBJbiBtaWxsaXNlY29uZHMuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwic291cmNlX2RvbWFpblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInBhcmFkZS5jb21cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZG9tYWluIG5hbWUgb2YgdGhlIHNvdXJjZSBvZiB0aGlzIGN1cmF0ZWQgbGlzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vY3VyYXRlZC1wb2RjYXN0cy83LWJvb2tpc2gtcG9kY2FzdHMtZm9yLWF2aWQtcmVhZGVycy1vbi1IMnItVENXYWk4Sy9cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgY3VyYXRlZCBsaXN0IG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFwibmV4dF9wYWdlX251bWJlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogM1xuICAgIH0sXG4gICAgXCJwcmV2aW91c19wYWdlX251bWJlclwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMVxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBTdWJtaXQgYSBwb2RjYXN0IHRvIExpc3RlbiBOb3RlcyBkYXRhYmFzZVxuXG5GdW5jdGlvbiBOYW1lOiAqKnN1Ym1pdF9wb2RjYXN0KipcblxuUG9kY2FzdCBob3N0aW5nIHNlcnZpY2VzIGNhbiB1c2UgdGhpcyBlbmRwb2ludCB0byBoZWxwIHlvdXIgdXNlcnMgZGlyZWN0bHkgc3VibWl0IGEgbmV3IHBvZGNhc3QgdG8gTGlzdGVuIE5vdGVzIGRhdGFiYXNlLiBJZiB0aGUgcG9kY2FzdCBkb2VzbiYjeDI3O3QgZXhpc3QgaW4gdGhlIGRhdGFiYXNlLCAmcXVvdDtzdGF0dXMmcXVvdDsgaW4gdGhlIHJlc3BvbnNlIHdpbGwgYmUgJnF1b3Q7aW4gcmV2aWV3JnF1b3Q7LCBhbmQgd2UmI3gyNztsbCByZXZpZXcgaXQgd2l0aGluIDEyIGhvdXJzLiBJZiB0aGUgcG9kY2FzdCBleGlzdHMsICZxdW90O3N0YXR1cyZxdW90OyBpbiB0aGUgcmVzcG9uc2Ugd2lsbCBiZSAmcXVvdDtmb3VuZCZxdW90Oy4gSWYgdGhpcyBzdWJtaXNzaW9uIGlzIHJlamVjdGVkLCAmcXVvdDtzdGF0dXMmcXVvdDsgaW4gdGhlIHJlc3BvbnNlIHdpbGwgYmUgJnF1b3Q7cmVqZWN0ZWQmcXVvdDsuIFlvdSBjYW4gdXNlIGBQT1NUIC9wb2RjYXN0c2AgdG8gY2hlY2sgaWYgbXVsdGlwbGUgcG9kY2FzdHMgZXhpc3QgaW4gdGhlIGRhdGFiYXNlLiBJZiB5b3Ugd2FudCB0byBnZXQgYSBub3RpZmljYXRpb24gb25jZSB0aGUgcG9kY2FzdCBpcyBhY2NlcHRlZCwgeW91IGNhbiBlaXRoZXIgc3BlY2lmeSB0aGUgJnF1b3Q7ZW1haWwmcXVvdDsgcGFyYW1ldGVyIG9yIGNvbmZpZ3VyZSBhIHdlYmhvb2sgdXJsIGluIHRoZSBkYXNoYm9hcmQ6IGxpc3Rlbm5vdGVzLmNvbS9hcGkvZGFzaGJvYXJkLyN3ZWJob29rc1xuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LnN1Ym1pdF9wb2RjYXN0KHJzcz0naHR0cHM6Ly9mZWVkcy5tZWdhcGhvbmUuZm0vY29tbWl0dGVkJylcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNwb3N0LWFwaS12Mi1wb2RjYXN0cy1zdWJtaXQpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwic3RhdHVzXCI6IFwiaW4gcmV2aWV3XCIsXG4gIFwicG9kY2FzdFwiOiB7fVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcInBvZGNhc3RcIixcbiAgICBcInN0YXR1c1wiXG4gIF0sXG4gIFwicHJvcGVydGllc1wiOiB7XG4gICAgXCJzdGF0dXNcIjoge1xuICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgXCJmb3VuZFwiLFxuICAgICAgICBcImluIHJldmlld1wiLFxuICAgICAgICBcInJlamVjdGVkXCJcbiAgICAgIF0sXG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImZvdW5kXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHN0YXR1cyBvZiB0aGlzIHN1Ym1pc3Npb24uXCJcbiAgICB9LFxuICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBvZGNhc3QgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgcG9kY2FzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcG9kY2FzdHMve2lkfWAuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICB9LFxuICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICBcImV4YW1wbGVcIjogXCJTdGFyIFdhcnMgN3g3IHwgU3RhciBXYXJzIE5ld3MsIEludGVydmlld3MsIGFuZCBNb3JlIVwiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJwdWJsaXNoZXJcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBwdWJsaXNoZXIgbmFtZS5cIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICB9LFxuICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiA4MSxcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHNjb3JlIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQgb24gYSBzY2FsZSBmcm9tIDAgdG8gMTAwLlxcbklmIHRoZSBzY29yZSBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICB9LFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBwb2RjYXN0IG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjAuNSVcIixcbiAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBSZXF1ZXN0IHRvIGRlbGV0ZSBhIHBvZGNhc3RcblxuRnVuY3Rpb24gTmFtZTogKipkZWxldGVfcG9kY2FzdCoqXG5cblBvZGNhc3QgaG9zdGluZyBzZXJ2aWNlcyBjYW4gdXNlIHRoaXMgZW5kcG9pbnQgdG8gc3RyZWFtbGluZSB0aGUgcHJvY2VzcyBvZiBwb2RjYXN0IGRlbGV0aW9uIG9uIGJlaGF2ZSBvZiB0aGVpciB1c2VycyAocG9kY2FzdGVycykuIFdlIHdpbGwgcmV2aWV3IHRoZSBkZWxldGlvbiByZXF1ZXN0IHdpdGhpbiAxMiBob3Vycy4gSWYgdGhlIHBvZGNhc3QgaXMgYWxyZWFkeSBkZWxldGVkLCB0aGUgJnF1b3Q7c3RhdHVzJnF1b3Q7IGZpZWxkIGluIHRoZSByZXNwb25zZSB3aWxsIGJlICZxdW90O2RlbGV0ZWQmcXVvdDsuIE90aGVyd2lzZSwgdGhlIHN0YXR1cyBmaWVsZCB3aWxsIGJlICZxdW90O2luIHJldmlldyZxdW90Oy4gSWYgeW91IHdhbnQgdG8gZ2V0IGEgbm90aWZpY2F0aW9uIG9uY2UgdGhlIHBvZGNhc3QgaXMgZGVsZXRlZCwgeW91IGNhbiBjb25maWd1cmUgYSB3ZWJob29rIHVybCBpbiB0aGUgZGFzaGJvYXJkOiBsaXN0ZW5ub3Rlcy5jb20vYXBpL2Rhc2hib2FyZC8jd2ViaG9va3NcblxuXG5FeGFtcGxlOlxuYGBgcHl0aG9uXG5cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbiMgSWYgYXBpX2tleSBpcyBOb25lLCB0aGUgc2RrIHdpbGwgY29ubmVjdCB0byBhIG1vY2sgc2VydmVyIHRoYXQnbGxcbiMgcmV0dXJuIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3NlICAgICAgICAgICAgXG5hcGlfa2V5ID0gJ2E2YTFmN2FlNmE0YTRjZjdhMjA4ZTViYSoqKioqKioqJ1xuXG5jbGllbnQgPSBwb2RjYXN0X2FwaS5DbGllbnQoYXBpX2tleT1hcGlfa2V5KSAgICAgIFxuXG5yZXNwb25zZSA9IGNsaWVudC5kZWxldGVfcG9kY2FzdChcbiAgICBpZD0nNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzknLFxuICAgIHJlYXNvbj0nSnVzdCBkZWxldGUgaXQnKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2RlbGV0ZS1hcGktdjItcG9kY2FzdHMtaWQpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwic3RhdHVzXCI6IFwiaW4gcmV2aWV3XCJcbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSByZXNwb25zZSBzY2hlbWE8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgXCJyZXF1aXJlZFwiOiBbXG4gICAgXCJzdGF0dXNcIlxuICBdLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwic3RhdHVzXCI6IHtcbiAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgIFwiZGVsZXRlZFwiLFxuICAgICAgICBcImluIHJldmlld1wiXG4gICAgICBdLFxuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJkZWxldGVkXCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHN0YXR1cyBvZiB0aGlzIHBvZGNhc3QgZGVsZXRpb24gcmVxdWVzdC5cIlxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBGZXRjaCBhIHBsYXlsaXN0JiN4Mjc7cyBpbmZvIGFuZCBpdGVtcyAoaS5lLiwgZXBpc29kZXMgb3IgcG9kY2FzdHMpLlxuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX3BsYXlsaXN0X2J5X2lkKipcblxuQSBwbGF5bGlzdCBjYW4gYmUgYW4gZXBpc29kZSBsaXN0IChpLmUuLCBhbGwgaXRlbXMgYXJlIGVwaXNvZGVzKSBvciBhIHBvZGNhc3QgbGlzdCAoaS5lLiwgYWxsIGl0ZW1zIGFyZSBwb2RjYXN0cyksXG53aGljaCBpcyBlc3NlbnRpYWxseSB0aGUgc2FtZSBhcyB0aG9zZSBjcmVhdGVkIHZpYSBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLy5cblRoaXMgZW5kcG9pbnQgZmV0Y2hlcyBhIGxpc3Qgb2YgaXRlbXMgKGkuZS4sIGVwaXNvZGVzIG9yIHBvZGNhc3RzKSBpbiB0aGUgcGxheWxpc3QuXG5Zb3UgY2FuIHVzZSB0aGUgKipsYXN0X3B1Yl9kYXRlX21zKiogcGFyYW1ldGVyIHRvIGRvIHBhZ2luYXRpb24gYW5kIGZldGNoIG1vcmUgaXRlbXMuXG5BIHBsYXlsaXN0IGNhbiBiZSAqKnB1YmxpYyoqIChkaXNjb3ZlcmFibGUgb24gTGlzdGVuTm90ZXMuY29tKSxcbioqdW5saXN0ZWQqKiAoYWNjZXNzaWJsZSB0byBhbnlvbmUgd2hvIGtub3dzIHRoZSBwbGF5bGlzdCBpZCksXG5vciAqKnByaXZhdGUqKiAoYWNjZXNzaWJsZSB0byBpdHMgb3duZXIpLlxuWW91IGNhbiBmZXRjaCBhbGwgcGxheWxpc3RzIGNyZWF0ZWQgYnkgeW91LCBhbmQgKipwdWJsaWMqKiAvICoqdW5saXN0ZWQqKiBwbGF5bGlzdHMgY3JlYXRlZCBieSBvdGhlcnMuXG5cblxuRXhhbXBsZTpcbmBgYHB5dGhvblxuXG5mcm9tIGxpc3Rlbm5vdGVzIGltcG9ydCBwb2RjYXN0X2FwaVxuXG4jIElmIGFwaV9rZXkgaXMgTm9uZSwgdGhlIHNkayB3aWxsIGNvbm5lY3QgdG8gYSBtb2NrIHNlcnZlciB0aGF0J2xsXG4jIHJldHVybiBmYWtlIGRhdGEgZm9yIHRlc3RpbmcgcHVycG9zZSAgICAgICAgICAgIFxuYXBpX2tleSA9ICdhNmExZjdhZTZhNGE0Y2Y3YTIwOGU1YmEqKioqKioqKidcblxuY2xpZW50ID0gcG9kY2FzdF9hcGkuQ2xpZW50KGFwaV9rZXk9YXBpX2tleSkgICAgICBcblxucmVzcG9uc2UgPSBjbGllbnQuZmV0Y2hfcGxheWxpc3RfYnlfaWQoXG4gICAgaWQ9J20xcGU3ejYwYnN3JywgdHlwZT0nZXBpc29kZV9saXN0Jywgc29ydD0ncmVjZW50X3B1Ymxpc2hlZF9maXJzdCcpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jZ2V0LWFwaS12Mi1wbGF5bGlzdHMtaWQpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwiaWRcIjogXCJtMXBlN3o2MGJzd1wiLFxuICBcIm5hbWVcIjogXCJQb2RjYXN0cyBhYm91dCBwb2RjYXN0aW5nXCIsXG4gIFwidHlwZVwiOiBcImVwaXNvZGVfbGlzdFwiLFxuICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtcGxheWxpc3RzL3BvZGNhc3RzLWFib3V0LXBvZGNhc3RpbmctNGJVN01aSWxFVk8tbTFwZTd6NjBic3cuMTYwMHgxNjAwLmpwZ1wiLFxuICBcIml0ZW1zXCI6IFtcbiAgICB7XG4gICAgICBcImlkXCI6IDgzMDg5MCxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJiNjk2NWI3YmNkYWI0ZGYxYjEwOGE5MzMwOWNlZGZjNlwiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL2FudGhvbnlwb21wbGlhbm8uY29tL3BvZGNhc3QvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2I2OTY1YjdiY2RhYjRkZjFiMTA4YTkzMzA5Y2VkZmM2L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1wb21wLXBvZGNhc3QvMTAxNC1vc2Nhci1tZXJyeS1vbi0wX052NEZyVGRPNS1zNVNVWFdQTTJJWi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCIjMTAxNCBPc2NhciBNZXJyeSBPbiBQaW9uZWVyaW5nIExpc3RlbiBUbyBFYXJuIFdpdGggQml0Y29pblwiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCI1MzdjMzcyYWQ5Yzc0NzBjYjJiZTg5N2ExNGE3YzdmOVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXBvbXAtcG9kY2FzdC1hbnRob255LXBvbXBsaWFuby1CbV9DU2RuT2pIQS1mMW5hNU1WRF9Rei4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBQb21wIFBvZGNhc3RcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkFudGhvbnkgUG9tcGxpYW5vXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXBvbXAtcG9kY2FzdC1hbnRob255LXBvbXBsaWFuby1VZXhRTGMyMGxKUi1mMW5hNU1WRF9Rei4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY1LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNTM3YzM3MmFkOWM3NDcwY2IyYmU4OTdhMTRhN2M3ZjkvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXBvbXAtcG9kY2FzdC8xMDE0LW9zY2FyLW1lcnJ5LW9uLVctcXJuN1hVTHBtLXM1U1VYV1BNMklaLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5Pc2NhciBNZXJyeSBpcyB0aGUgQ28tRm91bmRlciBvZiBGb3VudGFpbiwgYSBuZXcgcG9kY2FzdCBwbGF0Zm9ybSB3aGVyZSB2aWV3ZXJzIGNhbiBnZXQgcGFpZCB0byBsaXN0ZW4gdG8gdGhlaXIgZmF2b3JpdGUgcG9kY2FzdHMgYW5kIGlzIHBvd2VyZWQgYnkgdGhlIEJpdGNvaW4gTGlnaHRuaW5nIE5ldHdvcmsuPC9wPjxwPjxiciAvPjwvcD48cD5JbiB0aGlzIGNvbnZlcnNhdGlvbiwgd2UgdGFsayBhYm91dCBwb2RjYXN0aW5nIDIuMCwgaG93IHRoZSBGb3VudGFpbiBwcm9kdWN0IHdvcmtzLCB3aHkgcG9kY2FzdGVycyBzaG91bGQgYmUgaW50ZXJlc3RlZCBpbiBwYXlpbmcgdGhlaXIgbGlzdGVuZXJzLCBhbmQgb24tYm9hcmRpbmcgcGVvcGxlIHRvIHRoZSBCaXRjb2luIG5ldHdvcmsgdGhyb3VnaCBGb3VudGFpbi48L3A+PHA+PT09PT09PT09PT09PT09PT09PT09PT08L3A+PHA+TE1BWCBEaWdpdGFsIC0gdGhlIG1hcmtldC1sZWFkaW5nIHNvbHV0aW9uIGZvciBpbnN0aXR1dGlvbmFsIGNyeXB0byB0cmFkaW5nICZhbXA7IGN1c3RvZGlhbCBzZXJ2aWNlcyAtIG9mZmVycyBjbGllbnRzIGEgcmVndWxhdGVkLCB0cmFuc3BhcmVudCBhbmQgc2VjdXJlIHRyYWRpbmcgZW52aXJvbm1lbnQsIHRvZ2V0aGVyIHdpdGggdGhlIGRlZXBlc3QgcG9vbCBvZiBjcnlwdG8gbGlxdWlkaXR5LiBMTUFYIERpZ2l0YWwgaXMgYWxzbyBhIHByaW1hcnkgcHJpY2UgZGlzY292ZXJ5IHZlbnVlLCBzdHJlYW1pbmcgcmVhbC10aW1lIG1hcmtldCBkYXRhIHRvIHRoZSBpbmR1c3RyeVxcdTIwMTlzIGxlYWRpbmcgYW5hbHl0aWNzIHBsYXRmb3Jtcy4gTE1BWCBEaWdpdGFsIC0gc2VjdXJlLCBsaXF1aWQsIHRydXN0ZWQuIExlYXJuIG1vcmUgYXQgPGEgaHJlZj1cXFwiaHR0cDovL2xtYXhkaWdpdGFsLmNvbS9wb21wXFxcIj5MTUFYZGlnaXRhbC5jb20vcG9tcDwvYT48L3A+PHA+PT09PT09PT09PT09PT09PT09PT09PT08L3A+PHA+VGhlIFBvZCBQcm8gQ292ZXIgYnkgRWlnaHQgU2xlZXAgaXMgdGhlIG1vc3QgYWR2YW5jZWQgc29sdXRpb24gb24gdGhlIG1hcmtldCBmb3IgdGhlcm1vcmVndWxhdGlvbi4gSXQgcGFpcnMgZHluYW1pYyBjb29saW5nIGFuZCBoZWF0aW5nIHdpdGggYmlvbWV0cmljIHRyYWNraW5nLiBHbyB0bzxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmVpZ2h0c2xlZXAuY29tL3BvbXBcXFwiPiA8L2E+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZWlnaHRzbGVlcC5jb20vcG9tcFxcXCI+aHR0cHM6Ly93d3cuZWlnaHRzbGVlcC5jb20vUG9tcDwvYT4gdG8gY2hlY2sgb3V0IHRoZSBQb2QgUHJvIENvdmVyIGFuZCBzYXZlICQxNTAgYXQgY2hlY2tvdXQuIEVpZ2h0IFNsZWVwIGN1cnJlbnRseSBzaGlwcyB3aXRoaW4gdGhlIFVTQSwgQ2FuYWRhLCBhbmQgdGhlIFVLLjwvcD48cD49PT09PT09PT09PT09PT09PT09PT09PTwvcD48cD5EZUZpIFRlY2hub2xvZ2llcyByZXByZXNlbnRzIHdoYXRcXHUyMDE5cyBuZXh0IGluIHRoZSBkaWdpdGFsIGVjb25vbXkgLS0gcHJvdmlkaW5nIHNpbXBsaWZpZWQsIHRydXN0ZWQgYWNjZXNzIHRvIGNyeXB0bywgZGVjZW50cmFsaXplZCBmaW5hbmNlIGFuZCBXZWIgMy4wIGludmVzdG1lbnQgb3Bwb3J0dW5pdGllcy4gSW5zdGl0dXRpb25zIGFuZCBpbnZlc3RvcnMgY2FuIGdhaW4gZGl2ZXJzaWZpZWQsIHNlY3VyZSwgY29tcGxpYW50LCBhbmQgZWFzaWx5IHRyYWRhYmxlIGFjY2VzcyB0byBhIGRpdmVyc2lmaWVkIHNldCBvZiBpbmR1c3RyeS1sZWFkaW5nIGVxdWl0eSBwcm9kdWN0cyBhbmQgcHJvdG9jb2xzLCB0aHJvdWdoIGEgc2luZ2xlIHN0b2NrIHB1cmNoYXNlIG9uIGEgcmVndWxhdGVkIGV4Y2hhbmdlLiBDdXJyZW50bHkgbGlzdGVkIG9uIFUuUy4gKE9UQzogREVGVEYpIGFuZCBDYW5hZGlhbiAoTkVPOkRFRkkpIGV4Y2hhbmdlcy48L3A+PHA+XFx1MDBhMDwvcD48cD5Gb3IgbW9yZSBpbmZvcm1hdGlvbiBvciB0byBzdWJzY3JpYmUgdG8gcmVjZWl2ZSBjb21wYW55IHVwZGF0ZXMgYW5kIGZpbmFuY2lhbCBpbmZvcm1hdGlvbiwgdmlzaXQgb3VyIHdlYnNpdGUgYXQ8YSBocmVmPVxcXCJodHRwOi8vZGVmaS50ZWNoL1xcXCI+IDwvYT48YSBocmVmPVxcXCJodHRwOi8vZGVmaS50ZWNoL1xcXCI+aHR0cDovL2RlZmkudGVjaDwvYT5cXHUwMGEwPC9wPjxwPj09PT09PT09PT09PT09PT09PT09PT09PC9wPlwiLFxuICAgICAgICBcInB1Yl9kYXRlX21zXCI6IDE2NTU4MzU0NzEwMzQsXG4gICAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjIxMGMzMzUwLWYxOTItMTFlYy05MDM3LTAzNmMwN2M4NDhhOFwiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2I2OTY1YjdiY2RhYjRkZjFiMTA4YTkzMzA5Y2VkZmM2L1wiLFxuICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTc4OCxcbiAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9iNjk2NWI3YmNkYWI0ZGYxYjEwOGE5MzMwOWNlZGZjNi8jZWRpdFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIkxpc3RlbiBOb3RlcyBBUEkgcG93ZXJzIHRoaXMgYXBwIDopIEF3ZXNvbWUgdG8gc2VlIGFub3RoZXIgc3VjY2VzcyBzdG9yeSBvZiBvdXIgcG9kY2FzdCBhcGkhXCIsXG4gICAgICBcImFkZGVkX2F0X21zXCI6IDE2NTU4ODI3OTEyNDJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogODI3NjEyLFxuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjIwMmQ5MWU1OWJkODQ2MDQ5MmEyMjA4ODZkMTc3ZWVhXCIsXG4gICAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vd3d3LnZveC5jb20vcmVjb2RlLW1lZGlhLXBvZGNhc3Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvMjAyZDkxZTU5YmQ4NDYwNDkyYTIyMDg4NmQxNzdlZWEvXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcmVjb2RlLW1lZGlhLXJlY29kZS1oOXpQS18xVWtkQi0xaVB3VGFqTFhsUy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJCaWxsIFNpbW1vbnMgb24gcG9kY2FzdHMsIGNlbGVicml0eSBpbnRlcnZpZXdzIGFuZCBsaWZlIGF0IFNwb3RpZnlcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiMmFiYTQ5ZGMzZmMwNGUzZTk2ZmU4OWY3OWEyNjE3OThcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JlY29kZS1tZWRpYS1yZWNvZGUtaDl6UEtfMVVrZEItMWlQd1RhakxYbFMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJSZWNvZGUgTWVkaWFcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlJlY29kZVwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JlY29kZS1tZWRpYS1yZWNvZGUtZUhUVm5raVh5dTktMWlQd1RhakxYbFMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzJhYmE0OWRjM2ZjMDRlM2U5NmZlODlmNzlhMjYxNzk4L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JlY29kZS1tZWRpYS1yZWNvZGUtZUhUVm5raVh5dTktMWlQd1RhakxYbFMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZSBCaWxsIFNpbW1vbnMgUG9kY2FzdCBpcywgYnkgaXRzIG93biBkZXNjcmlwdGlvbiwgXFxcInRoZSBtb3N0IGRvd25sb2FkZWQgc3BvcnRzIHBvZGNhc3Qgb2YgYWxsIHRpbWUuXFxcIiBUaGlzIHdlZWssIGl0IGhpdHMgaXRzIDEsMDAwdGggZXBpc29kZS48L3A+PHA+QmlsbCBTaW1tb25zIGJlZ2FuIGhpcyBjYXJlZXIgYXMgYSBCb3N0b24gc3BvcnRzd3JpdGVyIGFuZCB3ZW50IG9uIHRvIGZvdW5kIEVTUE4ncyBzcG9ydHMgYW5kIHBvcCBjdWx0dXJlIGJsb2cgR3JhbnRsYW5kLiBBZnRlciBFU1BOIHNodXQgZG93biB0aGUgc2l0ZSwgU2ltbW9ucyBzdGFydGVkIHRoZSBSaW5nZXIgXFx1MjAxNCB3aGljaCBoZSBzb2xkIHRvIFNwb3RpZnkgaW4gMjAyMC48L3A+PHA+SW4gdGhpcyB3aWRlLXJhbmdpbmcgY29udmVyc2F0aW9uLCBSZWNvZGVcXHUyMDE5cyBQZXRlciBLYWZrYSB0YWxrcyB0byBTaW1tb25zIGFib3V0IGhvdyBoZSBiZWNhbWUgYSBwb2RjYXN0aW5nIHBpb25lZXIsIGFuZCB3aGVuIGhlIHJlYWxpemVkIG5lcmRpdHJ5IGFib3V0IHRoZSBOQkEgYW5kIEdhbWUgb2YgVGhyb25lcyBjb3VsZCBib3RoIGxpdmUgdW5kZXIgdGhlIHNhbWUgcm9vZi4gU2ltbW9ucyBhbHNvIHJlZmxlY3RzIG9uIHdoYXQgaGUgbGVhcm5lZCBmcm9tIGhpcyB0aW1lIGFzIGFuIGVtcGxveWVlIG9mIFRoZSBXYWx0IERpc25leSBDb3Jwb3JhdGlvbiBhbmQgaG93IHRoaW5ncyBhcmUgZGlmZmVyZW50IGF0IFNwb3RpZnkuIFBsdXMsIGhlIHJldmVhbHMgdGhlIG51bWJlciBvbmUgZHJlYW0gZ3Vlc3QgaGVcXHUyMDE5ZCBsb3ZlIHRvIGhhdmUgb24gaGlzIHNob3cuPC9wPjxwPjxiciAvPjwvcD48cD48c3Ryb25nPkZlYXR1cmluZzwvc3Ryb25nPjogQmlsbCBTaW1tb25zICg8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL0JpbGxTaW1tb25zXFxcIj5AQmlsbFNpbW1vbnM8L2E+KSwgRm91bmRlciBvZiBUaGUgUmluZ2VyPC9wPjxwPjxzdHJvbmc+SG9zdDwvc3Ryb25nPjogUGV0ZXIgS2Fma2FcXHUwMGEwKDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vcGthZmthXFxcIj5AcGthZmthPC9hPiksIFNlbmlvciBFZGl0b3IgYXQgUmVjb2RlPC9wPjxwPjxzdHJvbmc+TW9yZSB0byBleHBsb3JlPC9zdHJvbmc+OiA8YSBocmVmPVxcXCJodHRwczovL3BvZC5saW5rLzEwODA0NjcxNzRcXFwiPlN1YnNjcmliZSBmb3IgZnJlZSB0byBSZWNvZGUgTWVkaWE8L2E+LCBQZXRlciBLYWZrYSwgb25lIG9mIHRoZSBtZWRpYSBpbmR1c3RyeSdzIG1vc3QgYWNjbGFpbWVkIHJlcG9ydGVycywgdGFsa3MgdG8gYnVzaW5lc3MgdGl0YW5zLCBqb3VybmFsaXN0cywgY29tZWRpYW5zLCBhbmQgbW9yZSB0byBnZXQgdGhlaXIgdGFrZSBvbiB0b2RheSdzIG1lZGlhIGxhbmRzY2FwZS48L3A+PHA+PHN0cm9uZz5BYm91dCBSZWNvZGUgYnkgVm94PC9zdHJvbmc+OiBSZWNvZGUgYnkgVm94IGhlbHBzIHlvdSB1bmRlcnN0YW5kIGhvdyB0ZWNoIGlzIGNoYW5naW5nIHRoZSB3b3JsZCBcXHUyMDE0IGFuZCBjaGFuZ2luZyB1cy48L3A+PHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjU1MjY2NTY4MDAwLFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI3MmZmZmEwNC01MjIxLTExZWMtYWUzMS0yM2U5MDBiOGNkZTRcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8yMDJkOTFlNTliZDg0NjA0OTJhMjIwODg2ZDE3N2VlYS9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM2MjYsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMjAyZDkxZTU5YmQ4NDYwNDkyYTIyMDg4NmQxNzdlZWEvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTY1NTI3NDA0NzQzN1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA3NjQzMzYsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiYWJhN2YyZGQ4MWE1NDA4Zjk2ZGE4ZDcwZGZiZWZlMzZcIixcbiAgICAgICAgXCJlcnJvclwiOiBcIlRoaXMgZXBpc29kZSBoYXMgYmVlbiBkZWxldGVkIGZyb20gdGhlIHBvZGNhc3QgZGF0YWJhc2UuIFBvc3NpYmxlIHJlYXNvbnM6IDEpIFBvZGNhc3QgcHJvZHVjZXJzIHNvbWV0aW1lcyBkZWxldGUgdGhlaXIgb2xkIGVwaXNvZGVzLiAyKSBDb3B5cmlnaHQgaXNzdWVzLlwiLFxuICAgICAgICBcInRpdGxlXCI6IFwiU3BvdGlmeVxcdTIwMTlzIGFkLXRlY2ggYWNxdWlzaXRpb25zIHRvIHRha2Ugb24gWW91VHViZSB3aXRoIFRoZSBWZXJnZVxcdTIwMTlzIEFzaGxleSBDYXJtYW4gKyBGb3VuZGVyIFVuaXZlcnNpdHkgUGl0Y2hlcyB8IEUxMzg5XCIsXG4gICAgICAgIFwic3RhdHVzXCI6IFwiZGVsZXRlZFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlwiLFxuICAgICAgXCJhZGRlZF9hdF9tc1wiOiAxNjQ1MjExMjkxNzczXG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDY3ODkzMSxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCJhZjE5Y2VkYTk4ZDg0ZDNjOTJlYWZlN2U3ZjYzYjZkZFwiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL3RpbS5ibG9nL3BvZGNhc3Q/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvYWYxOWNlZGE5OGQ4NGQzYzkyZWFmZTdlN2Y2M2I2ZGQvXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXRpbS1mZXJyaXNzLXNob3ctdGltLWZlcnJpc3MtN053TXBVejVvMFMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiIzUzODogSG93IEkgQnVpbHQgVGhlIFRpbSBGZXJyaXNzIFNob3cgdG8gNzAwKyBNaWxsaW9uIERvd25sb2FkcyBcXHUyMDE0IEFuIEltbWVyc2l2ZSBFeHBsYW5hdGlvbiBvZiBBbGwgQXNwZWN0cyBhbmQgS2V5IERlY2lzaW9ucyAoRmVhdHVyaW5nIENocmlzIEh1dGNoaW5zKVwiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCIyNTIxMmFjM2M1MzI0MGE4ODBkZDUwMzJlNTQ3MDQ3YlwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXRpbS1mZXJyaXNzLXNob3ctdGltLWZlcnJpc3MtN053TXBVejVvMFMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgVGltIEZlcnJpc3MgU2hvd1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiVGltIEZlcnJpc3M6IEJlc3RzZWxsaW5nIEF1dGhvciwgSHVtYW4gR3VpbmVhIFBpZ1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS10aW0tZmVycmlzcy1zaG93LXRpbS1mZXJyaXNzLTdOd01wVXo1bzBTLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogODEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8yNTIxMmFjM2M1MzI0MGE4ODBkZDUwMzJlNTQ3MDQ3Yi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDElXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLXRpbS1mZXJyaXNzLXNob3ctdGltLWZlcnJpc3MtN053TXBVejVvMFMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPjxzdHJvbmc+SG93IEkgQnVpbHQgVGhlIFRpbSBGZXJyaXNzIFNob3cgdG8gNzAwKyBNaWxsaW9uIERvd25sb2FkcyBcXHUyMDE0IEFuIEltbWVyc2l2ZSBFeHBsYW5hdGlvbiBvZiBBbGwgQXNwZWN0cyBhbmQgS2V5IERlY2lzaW9ucyAoRmVhdHVyaW5nIENocmlzIEh1dGNoaW5zKSB8IEJyb3VnaHQgdG8geW91IGJ5IDwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHA6Ly9saW5rZWRpbi5jb20vdGltXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPkxpbmtlZEluIEpvYnM8L3N0cm9uZz48L2E+PHN0cm9uZz4mbmJzcDtyZWNydWl0bWVudCBwbGF0Zm9ybSB3aXRoIDc3ME0rIHVzZXJzPC9zdHJvbmc+LCA8YSBocmVmPVxcXCJodHRwOi8vYXRobGV0aWNncmVlbnMuY29tL3RpbVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz5BdGhsZXRpYyBHcmVlbnM8L3N0cm9uZz48L2E+PHN0cm9uZz4mbmJzcDthbGwtaW4tb25lIG51dHJpdGlvbmFsIHN1cHBsZW1lbnQsJm5ic3A7YW5kIDwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHA6Ly9oZWxpeHNsZWVwLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+SGVsaXggU2xlZXA8L3N0cm9uZz48L2E+PHN0cm9uZz4mbmJzcDtwcmVtaXVtIG1hdHRyZXNzZXMuIE1vcmUgb24gYWxsIHRocmVlIGJlbG93Ljwvc3Ryb25nPjwvcD48cD48c3Ryb25nPkNocmlzIEh1dGNoaW5zPC9zdHJvbmc+Jm5ic3A7KDxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vaHV0Y2hpbnNcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkBodXRjaGluczwvYT4pIGlzIGFuIGF2aWQgbGlmZSBoYWNrZXIgYW5kIGZpbmFuY2lhbCBvcHRpbWl6ZXIuIEhlXFx1MjAxOXMgdGhlIGhvc3Qgb2YmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3d3dy5hbGx0aGVoYWNrcy5jb20vXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPjxlbT5BbGwgdGhlIEhhY2tzPC9lbT48L3N0cm9uZz48L2E+Jm5ic3A7cG9kY2FzdCBhbmQgdGhlIEhlYWQgb2YgTmV3IFByb2R1Y3QgU3RyYXRlZ3kgYXQmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3d3dy53ZWFsdGhmcm9udC5jb20vdGltXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XZWFsdGhmcm9udDwvYT4uPC9wPjxwPlByZXZpb3VzbHksIENocmlzIHdhcyBjby1mb3VuZGVyIGFuZCBDRU8gb2YgR3JvdmUgKGFjcXVpcmVkIGJ5Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cud2VhbHRoZnJvbnQuY29tL3RpbVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+V2VhbHRoZnJvbnQ8L2E+KSwgY28tZm91bmRlciBvZiBNaWxrIChhY3F1aXJlZCBieSBHb29nbGUpLCBhbmQgYSBwYXJ0bmVyIGF0Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZ3YuY29tL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+R29vZ2xlIFZlbnR1cmVzPC9hPiwgd2hlcmUgaGUgZm9jdXNlZCBvbiBzZWVkIGFuZCBlYXJseSBzdGFnZSBpbnZlc3RtZW50cy48L3A+PHA+Q2hyaXMgcmVhY2hlZCBvdXQgd2l0aCBtYW55IHF1ZXN0aW9ucyBhYm91dCBwb2RjYXN0aW5nLiBIZSBoYWQgYWxyZWFkeSByZWFkIG11Y2ggb2YmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTYvMDQvMTEvdGltLWZlcnJpc3MtcG9kY2FzdC1idXNpbmVzcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPndoYXQgSSBoYWQgd3JpdHRlbjwvYT4gYW5kJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly9yb2xmcG90dHMuY29tL3BvZGNhc3QvdGltLWZlcnJpc3MvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5saXN0ZW5lZCB0byBzZXZlcmFsIGludGVydmlld3M8L2E+LCBhbmQgdGhpcyBpcyBpbnRlbmRlZCB0byBiZSBhbiB1cGRhdGVkIGd1aWRlIHRvIGFsbCB0aGluZ3MgcG9kY2FzdGluZy48L3A+PHA+UGxlYXNlIGVuam95ITwvcD48cD48c3Ryb25nPlRoaXMgZXBpc29kZSBpcyBicm91Z2h0IHRvIHlvdSBieSZuYnNwOzwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmF0aGxldGljZ3JlZW5zLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+QXRobGV0aWMgR3JlZW5zPC9zdHJvbmc+PC9hPjxzdHJvbmc+Ljwvc3Ryb25nPiZuYnNwO0kgZ2V0IGFza2VkIGFsbCB0aGUgdGltZSwgXFx1MjAxY0lmIHlvdSBjb3VsZCBvbmx5IHVzZSBvbmUgc3VwcGxlbWVudCwgd2hhdCB3b3VsZCBpdCBiZT9cXHUyMDFkIE15IGFuc3dlciBpcyB1c3VhbGx5Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuYXRobGV0aWNncmVlbnMuY29tL3RpbVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+QXRobGV0aWMmbmJzcDtHcmVlbnM8L2E+LCBteSBhbGwtaW4tb25lIG51dHJpdGlvbmFsIGluc3VyYW5jZS4gSSByZWNvbW1lbmRlZCBpdCBpbiZuYnNwOzxlbT5UaGUgNC1Ib3VyIEJvZHk8L2VtPiZuYnNwO2luIDIwMTAgYW5kIGRpZCBub3QgZ2V0IHBhaWQgdG8gZG8gc28uIEkgZG8gbXkgYmVzdCB3aXRoIG51dHJpZW50LWRlbnNlIG1lYWxzLCBvZiBjb3Vyc2UsIGJ1dCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmF0aGxldGljZ3JlZW5zLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkFHPC9hPiZuYnNwO2Z1cnRoZXIgY292ZXJzIG15IGJhc2VzIHdpdGggdml0YW1pbnMsIG1pbmVyYWxzLCBhbmQgd2hvbGUtZm9vZC1zb3VyY2VkIG1pY3JvbnV0cmllbnRzIHRoYXQgc3VwcG9ydCBndXQgaGVhbHRoIGFuZCB0aGUgaW1tdW5lIHN5c3RlbS4mbmJzcDs8L3A+PHA+PHN0cm9uZz5SaWdodCBub3csJm5ic3A7PC9zdHJvbmc+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuYXRobGV0aWNncmVlbnMuY29tL3RpbVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz5BdGhsZXRpYyBHcmVlbnM8L3N0cm9uZz48L2E+PHN0cm9uZz4mbmJzcDtpcyBvZmZlcmluZyB5b3UgdGhlaXIgVml0YW1pbiBEIExpcXVpZCBGb3JtdWxhIGZyZWUgd2l0aCB5b3VyIGZpcnN0IHN1YnNjcmlwdGlvbiBwdXJjaGFzZTwvc3Ryb25nPlxcdTIwMTRhIHZpdGFsIG51dHJpZW50IGZvciBhIHN0cm9uZyBpbW11bmUgc3lzdGVtIGFuZCBzdHJvbmcgYm9uZXMuJm5ic3A7PHN0cm9uZz5WaXNpdCZuYnNwOzwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmF0aGxldGljZ3JlZW5zLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+QXRobGV0aWNHcmVlbnMuY29tL1RpbTwvc3Ryb25nPjwvYT48c3Ryb25nPiZuYnNwO3RvIGNsYWltIHRoaXMgc3BlY2lhbCBvZmZlciB0b2RheSBhbmQgcmVjZWl2ZSB0aGUgZnJlZSBWaXRhbWluIEQgTGlxdWlkIEZvcm11bGEgKGFuZCBmaXZlIGZyZWUgdHJhdmVsIHBhY2tzKSB3aXRoIHlvdXIgZmlyc3Qgc3Vic2NyaXB0aW9uIHB1cmNoYXNlISZuYnNwOzwvc3Ryb25nPlRoYXRcXHUyMDE5cyB1cCB0byBhIG9uZS15ZWFyIHN1cHBseSBvZiBWaXRhbWluIEQgYXMgYWRkZWQgdmFsdWUgd2hlbiB5b3UgdHJ5IHRoZWlyIGRlbGljaW91cyBhbmQgY29tcHJlaGVuc2l2ZSBhbGwtaW4tb25lIGRhaWx5IGdyZWVucyBwcm9kdWN0LjwvcD48cD4qPC9wPjxwPjxzdHJvbmc+VGhpcyBlcGlzb2RlIGlzIGFsc28gYnJvdWdodCB0byB5b3UgYnkmbmJzcDs8L3N0cm9uZz48YSBocmVmPVxcXCJodHRwOi8vaGVsaXhzbGVlcC5jb20vdGltXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPkhlbGl4IFNsZWVwPC9zdHJvbmc+PC9hPjxzdHJvbmc+ISZuYnNwOzwvc3Ryb25nPkhlbGl4IHdhcyBzZWxlY3RlZCBhcyB0aGUgIzEgb3ZlcmFsbCBtYXR0cmVzcyBvZiAyMDIwIGJ5Jm5ic3A7PGVtPkdRJm5ic3A7PC9lbT5tYWdhemluZTxlbT4sIFdpcmVkLCZuYnNwOzwvZW0+QXBhcnRtZW50IFRoZXJhcHksIGFuZCBtYW55IG90aGVycy4gV2l0aCZuYnNwOzxhIGhyZWY9XFxcImh0dHA6Ly9oZWxpeHNsZWVwLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkhlbGl4PC9hPiwgdGhlcmVcXHUyMDE5cyBhIHNwZWNpZmljIG1hdHRyZXNzIHRvIG1lZXQgZWFjaCBhbmQgZXZlcnkgYm9keVxcdTIwMTlzIHVuaXF1ZSBjb21mb3J0IG5lZWRzLiBKdXN0IHRha2UgdGhlaXIgcXVpelxcdTIwMTQ8YSBocmVmPVxcXCJodHRwOi8vaGVsaXhzbGVlcC5jb20vdGltXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5vbmx5IHR3byBtaW51dGVzIHRvIGNvbXBsZXRlPC9hPlxcdTIwMTR0aGF0IG1hdGNoZXMgeW91ciBib2R5IHR5cGUgYW5kIHNsZWVwIHByZWZlcmVuY2VzIHRvIHRoZSBwZXJmZWN0IG1hdHRyZXNzIGZvciB5b3UuIFRoZXkgaGF2ZSBhIDEwLXllYXIgd2FycmFudHksIGFuZCB5b3UgZ2V0IHRvIHRyeSBpdCBvdXQgZm9yIGEgaHVuZHJlZCBuaWdodHMsIHJpc2sgZnJlZS4gVGhleVxcdTIwMTlsbCBldmVuIHBpY2sgaXQgdXAgZnJvbSB5b3UgaWYgeW91IGRvblxcdTIwMTl0IGxvdmUgaXQuJm5ic3A7PC9wPjxwPjxzdHJvbmc+QW5kIG5vdywgdG8gbXkgZGVhciBsaXN0ZW5lcnMsIEhlbGl4IGlzIG9mZmVyaW5nIHVwIHRvIDIwMCBkb2xsYXJzIG9mZiBhbGwgbWF0dHJlc3Mgb3JkZXJzIHBsdXMgdHdvIGZyZWUgcGlsbG93cyBhdCZuYnNwOzwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHA6Ly9oZWxpeHNsZWVwLmNvbS90aW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+SGVsaXhTbGVlcC5jb20vVGltPC9zdHJvbmc+PC9hPjxzdHJvbmc+Ljwvc3Ryb25nPjwvcD48cD48c3Ryb25nPio8L3N0cm9uZz48L3A+PHA+PHN0cm9uZz5UaGlzIGVwaXNvZGUgaXMgYWxzbyBicm91Z2h0IHRvIHlvdSBieSZuYnNwOzwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vbGlua2VkaW4uY29tL1RpbVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz5MaW5rZWRJbiBKb2JzPC9zdHJvbmc+PC9hPjxzdHJvbmc+Ljwvc3Ryb25nPiZuYnNwO1doZXRoZXIgeW91IGFyZSBsb29raW5nIHRvIGhpcmUgbm93IGZvciBhIGNyaXRpY2FsIHJvbGUgb3IgdGhpbmtpbmcgYWJvdXQgbmVlZHMgdGhhdCB5b3UgbWF5IGhhdmUgaW4gdGhlIGZ1dHVyZSwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL2xpbmtlZGluLmNvbS9UaW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkxpbmtlZEluIEpvYnM8L2E+Jm5ic3A7Y2FuIGhlbHAuIExpbmtlZEluIHNjcmVlbnMgY2FuZGlkYXRlcyBmb3IgdGhlIGhhcmQgYW5kIHNvZnQgc2tpbGxzIHlvdVxcdTIwMTlyZSBsb29raW5nIGZvciBhbmQgcHV0cyB5b3VyIGpvYiBpbiBmcm9udCBvZiBjYW5kaWRhdGVzIGxvb2tpbmcgZm9yIGpvYiBvcHBvcnR1bml0aWVzIHRoYXQgbWF0Y2ggd2hhdCB5b3UgaGF2ZSB0byBvZmZlci48L3A+PHA+VXNpbmcgTGlua2VkSW5cXHUyMDE5cyBhY3RpdmUgY29tbXVuaXR5IG9mIG1vcmUgdGhhbiA3NzAgbWlsbGlvbiBwcm9mZXNzaW9uYWxzIHdvcmxkd2lkZSwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL2xpbmtlZGluLmNvbS9UaW1cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+TGlua2VkSW4gSm9iczwvc3Ryb25nPjwvYT4mbmJzcDtjYW4gaGVscCB5b3UgZmluZCBhbmQgaGlyZSB0aGUgcmlnaHQgcGVyc29uIGZhc3Rlci4mbmJzcDs8c3Ryb25nPldoZW4geW91ciBidXNpbmVzcyBpcyByZWFkeSB0byBtYWtlIHRoYXQgbmV4dCBoaXJlLCBmaW5kIHRoZSByaWdodCBwZXJzb24gd2l0aCBMaW5rZWRJbiBKb2JzLiBBbmQgbm93LCB5b3UgY2FuIHBvc3QgYSBqb2IgZm9yIGZyZWUuPC9zdHJvbmc+Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly9saW5rZWRpbi5jb20vVGltXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPkp1c3QgdmlzaXQgTGlua2VkSW4uY29tL1RpbTwvc3Ryb25nPjwvYT48c3Ryb25nPi48L3N0cm9uZz48L3A+PHA+PHN0cm9uZz4qPC9zdHJvbmc+PC9wPjxwPjxzdHJvbmc+SWYgeW91IGVuam95IHRoZSBwb2RjYXN0LCB3b3VsZCB5b3UgcGxlYXNlIGNvbnNpZGVyJm5ic3A7PC9zdHJvbmc+PGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0cy5hcHBsZS5jb20vdXMvcG9kY2FzdC90aGUtdGltLWZlcnJpc3Mtc2hvdy9pZDg2Mzg5Nzc5NT9tdD0yXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj48c3Ryb25nPmxlYXZpbmcgYSBzaG9ydCZuYnNwO3JldmlldyZuYnNwO29uIEFwcGxlIFBvZGNhc3RzPC9zdHJvbmc+PC9hPjxzdHJvbmc+Pzwvc3Ryb25nPiZuYnNwO0l0IHRha2VzIGxlc3MgdGhhbiA2MCBzZWNvbmRzLCBhbmQgaXQgcmVhbGx5IG1ha2VzIGEgZGlmZmVyZW5jZSBpbiBoZWxwaW5nIHRvIGNvbnZpbmNlIGhhcmQtdG8tZ2V0IGd1ZXN0cy4gSSBhbHNvIGxvdmUgcmVhZGluZyB0aGUmbmJzcDtyZXZpZXdzITwvcD48cD48c3Ryb25nPkZvciBzaG93IG5vdGVzIGFuZCBwYXN0IGd1ZXN0cywgcGxlYXNlIHZpc2l0PC9zdHJvbmc+Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy9wb2RjYXN0Lz91dG1fc291cmNlPXBvZGNhc3QmYW1wO3V0bV9tZWRpdW09cG9kY2FzdCZhbXA7dXRtX2NhbXBhaWduPXBvZGNhc3QtZGVzY3JpcHRpb25cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+dGltLmJsb2cvcG9kY2FzdDwvc3Ryb25nPjwvYT48c3Ryb25nPi48L3N0cm9uZz48L3A+PHA+PHN0cm9uZz5TaWduIHVwIGZvciBUaW1cXHUyMDE5cyBlbWFpbCBuZXdzbGV0dGVyIChcXHUyMDFjNS1CdWxsZXQgRnJpZGF5XFx1MjAxZCkgYXQmbmJzcDs8L3N0cm9uZz48YSBocmVmPVxcXCJodHRwczovL2dvLnRpbS5ibG9nLzUtYnVsbGV0LWZyaWRheS0xL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz50aW0uYmxvZy9mcmlkYXk8L3N0cm9uZz48L2E+PHN0cm9uZz4uPC9zdHJvbmc+PC9wPjxwPjxzdHJvbmc+Rm9yIHRyYW5zY3JpcHRzIG9mIGVwaXNvZGVzLCBnbyB0byZuYnNwOzwvc3Ryb25nPjxhIGhyZWY9XFxcImh0dHA6Ly90aW0uYmxvZy90cmFuc2NyaXB0c1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz50aW0uYmxvZy90cmFuc2NyaXB0czwvc3Ryb25nPjwvYT48c3Ryb25nPi48L3N0cm9uZz48L3A+PHA+PHN0cm9uZz5EaXNjb3ZlciBUaW1cXHUyMDE5cyBib29rczombmJzcDs8L3N0cm9uZz48YSBocmVmPVxcXCJodHRwOi8vdGltLmJsb2cvYm9va3NcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPjxzdHJvbmc+dGltLmJsb2cvYm9va3M8L3N0cm9uZz48L2E+PHN0cm9uZz4uPC9zdHJvbmc+PC9wPjxwPjxzdHJvbmc+Rm9sbG93IFRpbTo8L3N0cm9uZz48L3A+PHA+PHN0cm9uZz5Ud2l0dGVyPC9zdHJvbmc+OiZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vdGZlcnJpc3NcXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPnR3aXR0ZXIuY29tL3RmZXJyaXNzPC9hPiZuYnNwOzwvcD48cD48c3Ryb25nPkluc3RhZ3JhbTwvc3Ryb25nPjombmJzcDs8YSBocmVmPVxcXCJodHRwczovL2luc3RhZ3JhbS5jb20vdGltZmVycmlzcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmluc3RhZ3JhbS5jb20vdGltZmVycmlzczwvYT48L3A+PHA+PHN0cm9uZz5GYWNlYm9vazwvc3Ryb25nPjombmJzcDs8YSBocmVmPVxcXCJodHRwczovL3d3dy5mYWNlYm9vay5jb20vVGltRmVycmlzcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmZhY2Vib29rLmNvbS90aW1mZXJyaXNzPC9hPiZuYnNwOzwvcD48cD48c3Ryb25nPllvdVR1YmU8L3N0cm9uZz46Jm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cueW91dHViZS5jb20vdGltZmVycmlzc1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+eW91dHViZS5jb20vdGltZmVycmlzczwvYT48L3A+PHA+UGFzdCBndWVzdHMgb24mbmJzcDs8YSBocmVmPVxcXCJodHRwOi8vdGltLmJsb2cvcG9kY2FzdFxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+PHN0cm9uZz48ZW0+VGhlIFRpbSBGZXJyaXNzIFNob3c8L2VtPjwvc3Ryb25nPjwvYT4mbmJzcDtpbmNsdWRlJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzEyLzA4L2plcnJ5LXNlaW5mZWxkL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+SmVycnkgU2VpbmZlbGQ8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wNi8yNi9odWdoLWphY2ttYW4vXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5IdWdoIEphY2ttYW48L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wNC8xNi9qYW5lLWdvb2RhbGwvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Eci4gSmFuZSBHb29kYWxsPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTgvMTEvMjcvbGVicm9uLWphbWVzLW1pa2UtbWFuY2lhcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkxlQnJvbiBKYW1lczwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzA1LzIwL2tldmluLWhhcnQvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5LZXZpbiBIYXJ0PC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTgvMDkvMDcvZG9yaXMta2Vhcm5zLWdvb2R3aW4tbGVhZGVyc2hpcC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkRvcmlzIEtlYXJucyBHb29kd2luPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTUvMTIvMDYvamFtaWUtZm94eC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkphbWllIEZveHg8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8xMC8xOS9tYXR0aGV3LW1jY29uYXVnaGV5L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWF0dGhldyBNY0NvbmF1Z2hleTwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE3LzA1LzIxL2VzdGhlci1wZXJlbC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkVzdGhlciBQZXJlbDwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzA1LzA4L2VsaXphYmV0aC1naWxiZXJ0L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RWxpemFiZXRoIEdpbGJlcnQ8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNy8xMi8yMC90ZXJyeS1jcmV3cy1ob3ctdG8taGF2ZS1kby1hbmQtYmUtYWxsLXlvdS13YW50L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+VGVycnkgQ3Jld3M8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wOC8xMi9zaWEvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5TaWE8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8xMC8yNy95dXZhbC1ub2FoLWhhcmFyaS9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPll1dmFsIE5vYWggSGFyYXJpPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTYvMDYvMjEvbWFsY29sbS1nbGFkd2VsbC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1hbGNvbG0gR2xhZHdlbGw8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wNS8yNy9zZWNyZXRhcnktbWFkZWxlaW5lLWFsYnJpZ2h0L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWFkZWxlaW5lIEFsYnJpZ2h0PC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTcvMDMvMzAvY2hlcnlsLXN0cmF5ZWQvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5DaGVyeWwgU3RyYXllZDwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE5LzAyLzE4L2ppbS1jb2xsaW5zL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+SmltIENvbGxpbnM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8xMS8xMS9tYXJ5LWthcnIvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5NYXJ5IEthcnIsPC9hPiZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNC8xMC8yMS9icmFpbi1waWNraW5ncy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1hcmlhIFBvcG92YTwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzA1LzE1L3NhbS1oYXJyaXMtMi9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlNhbSBIYXJyaXM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMS8wMS8yMS9taWNoYWVsLXBoZWxwcy1ncmFudC1oYWNrZXR0L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGFlbCBQaGVscHM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wMS8xNi9ib2ItaWdlci9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkJvYiBJZ2VyPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTkvMTAvMzEvZWR3YXJkLW5vcnRvbi1tb3RoZXJsZXNzLWJyb29rbHluL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RWR3YXJkIE5vcnRvbjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE1LzAyLzAyL2Fybm9sZC1zY2h3YXJ6ZW5lZ2dlci9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkFybm9sZCBTY2h3YXJ6ZW5lZ2dlcjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE0LzA2LzI0L25laWwtc3RyYXVzcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk5laWwgU3RyYXVzczwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE5LzA5LzEyL2tlbi1idXJucy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPktlbiBCdXJuczwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE3LzA4LzI2L21hcmlhLXNoYXJhcG92YS9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1hcmlhIFNoYXJhcG92YTwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE2LzA1LzI5L21hcmMtYW5kcmVlc3Nlbi9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1hcmMgQW5kcmVlc3NlbjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE5LzAzLzI4L25laWwtZ2FpbWFuL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TmVpbCBHYWltYW48L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxOS8xMC8wMy9uZWlsLWRlZ3Jhc3NlLXR5c29uL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TmVpbCBkZSBHcmFzc2UgVHlzb248L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNi8wOS8yMS9qb2Nrby13aWxsaW5rLW9uLWRpc2NpcGxpbmUtbGVhZGVyc2hpcC1hbmQtb3ZlcmNvbWluZy1kb3VidC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkpvY2tvIFdpbGxpbms8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8xMi8wMy9kYW5pZWwtZWsvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5EYW5pZWwgRWs8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wOS8wOC9rZWxseS1zbGF0ZXIvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5LZWxseSBTbGF0ZXI8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxOS8xMS8yNy9wZXRlci1hdHRpYS1mYXN0aW5nLW1ldGZvcm1pbi1sb25nZXZpdHkvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Eci4gUGV0ZXIgQXR0aWE8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNi8wMi8xMC9zZXRoLWdvZGluL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+U2V0aCBHb2RpbjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE4LzA5LzI1L2hvd2FyZC1tYXJrcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkhvd2FyZCBNYXJrczwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzAyLzA2L2JyZW5lLWJyb3duLXN0cml2aW5nLXNlbGYtYWNjZXB0YW5jZS1zYXZpbmctbWFycmlhZ2VzL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RHIuIEJyZW5cXHUwMGU5IEJyb3duPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTkvMDQvMDkvZXJpYy1zY2htaWR0L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RXJpYyBTY2htaWR0PC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMjAvMDUvMDEvbWljaGFlbC1sZXdpcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPk1pY2hhZWwgTGV3aXM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxOC8wMy8wOC9qb2UtZ2ViYmlhLWNvLWZvdW5kZXItb2YtYWlyYm5iL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+Sm9lIEdlYmJpYTwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE4LzA1LzA2L21pY2hhZWwtcG9sbGFuLWhvdy10by1jaGFuZ2UteW91ci1taW5kL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TWljaGFlbCBQb2xsYW48L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMS8wMy8wMS9qb3JkYW4tcGV0ZXJzb24vXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Eci4gSm9yZGFuIFBldGVyc29uPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTcvMDUvMzEvdmluY2UtdmF1Z2huL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+VmluY2UgVmF1Z2huPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMjAvMDQvMjMvYnJpYW4ta29wcGVsbWFuL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+QnJpYW4gS29wcGVsbWFuPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTkvMDUvMDcvcmFtaXQtc2V0aGkvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5SYW1pdCBTZXRoaTwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDIwLzExLzE4L2RheC1zaGVwYXJkL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RGF4IFNoZXBhcmQ8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNC8xMC8xNS9tb25leS1tYXN0ZXItdGhlLWdhbWUvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Ub255IFJvYmJpbnM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wNS8xOC9qaW0tZGV0aG1lci9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkppbSBEZXRobWVyPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMjAvMTEvMTkvZGFuLWhhcnJpcy9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkRhbiBIYXJyaXM8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNy8wOS8xMy9yYXktZGFsaW8vXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5SYXkgRGFsaW88L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNS8wOC8xOC90aGUtZXZvbHV0aW9uYXJ5LWFuZ2VsLW5hdmFsLXJhdmlrYW50L1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+TmF2YWwgUmF2aWthbnQ8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMS8wMy8wOC92aXRhbGlrLWJ1dGVyaW4tbmF2YWwtcmF2aWthbnQvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5WaXRhbGlrIEJ1dGVyaW48L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMS8wMy8xNi9lbGl6YWJldGgtbGVzc2VyL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+RWxpemFiZXRoIExlc3NlcjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE5LzA0LzE4L2FtYW5kYS1wYWxtZXItMi9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkFtYW5kYSBQYWxtZXI8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMS8wMi8xOC9rYXRpZS1oYXVuL1xcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+S2F0aWUgSGF1bjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE3LzEwLzA5L3JpY2hhcmQtYnJhbnNvbi9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlNpciBSaWNoYXJkIEJyYW5zb248L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wOS8wMi9jaHVjay1wYWxhaG5pdWsvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5DaHVjayBQYWxhaG5pdWs8L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNy8xMC8xOC9hcmlhbm5hLWh1ZmZpbmd0b24vXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Bcmlhbm5hIEh1ZmZpbmd0b248L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAxNS8wOC8zMS90aGUtb3JhY2xlLW9mLXNpbGljb24tdmFsbGV5LXJlaWQtaG9mZm1hbi1wbHVzLW1pY2hhZWwtbWNjdWxsb3VnaC9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlJlaWQgSG9mZm1hbjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE3LzA5LzE3L2JpbGwtYnVyci9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkJpbGwgQnVycjwvYT4sJm5ic3A7PGEgaHJlZj1cXFwiaHR0cHM6Ly90aW0uYmxvZy8yMDE1LzA2LzI2L3doaXRuZXktY3VtbWluZ3MvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5XaGl0bmV5IEN1bW1pbmdzPC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTUvMDUvMTUvcmljay1ydWJpbi9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPlJpY2sgUnViaW48L2E+LCZuYnNwOzxhIGhyZWY9XFxcImh0dHBzOi8vdGltLmJsb2cvMjAyMC8wMy8yNi92aXZlay1tdXJ0aHkvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5Eci4gVml2ZWsgTXVydGh5PC9hPiwmbmJzcDs8YSBocmVmPVxcXCJodHRwczovL3RpbS5ibG9nLzIwMTcvMDkvMDkvZGFycmVuLWFyb25vZnNreS9cXFwiIHJlbD1cXFwibm9vcGVuZXIgbm9yZWZlcnJlclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkRhcnJlbiBBcm9ub2Zza3k8L2E+LCBhbmQgbWFueSBtb3JlLjwvcD48cD5TZWUgUHJpdmFjeSBQb2xpY3kgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeVxcXCIgcmVsPVxcXCJub29wZW5lciBub3JlZmVycmVyXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+aHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeTwvYT4gYW5kIENhbGlmb3JuaWEgUHJpdmFjeSBOb3RpY2UgYXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hcnQxOS5jb20vcHJpdmFjeSNkby1ub3Qtc2VsbC1teS1pbmZvXFxcIiByZWw9XFxcIm5vb3BlbmVyIG5vcmVmZXJyZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5odHRwczovL2FydDE5LmNvbS9wcml2YWN5I2RvLW5vdC1zZWxsLW15LWluZm88L2E+LjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNjM0MjIyNjMzMDYxLFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJnaWQ6Ly9hcnQxOS1lcGlzb2RlLWxvY2F0b3IvVjAvQnRxTmQ4aTdGeWEtSGh6R3hfMFNLdS1aaVgxVjhBQjJUZTRNMGJDa2FrUVwiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2FmMTljZWRhOThkODRkM2M5MmVhZmU3ZTdmNjNiNmRkL1wiLFxuICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTA5MjcsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvYWYxOWNlZGE5OGQ4NGQzYzkyZWFmZTdlN2Y2M2I2ZGQvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTYzNDc3OTA5NjU5NlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA1ODAyMDIsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiNDYzYjdkYjg3NGMwNGMzY2E2NmNlZmRhM2U5ZDQ2NzlcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9leHBvbmVudC5mbS9lcGlzb2RlLTE5NC1iYWNrLW9uLXNwb3RpZnkvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzQ2M2I3ZGI4NzRjMDRjM2NhNjZjZWZkYTNlOWQ0Njc5L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1MOFFCdXNBaWFYcS1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJFcGlzb2RlIDE5NCBcXHUyMDE0IEJhY2sgb24gU3BvdGlmeVwiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCIzNzU4OWEzZTEyMWU0MGRlYmU0Y2VmM2Q5NjM4OTMyYVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLUw4UUJ1c0FpYVhxLU9hSlNqYjR4UXYzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiRXhwb25lbnRcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkJlbiBUaG9tcHNvbiAvIEphbWVzIEFsbHdvcnRoXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLUlyZ013NWNQQUxGLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjEsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy8zNzU4OWEzZTEyMWU0MGRlYmU0Y2VmM2Q5NjM4OTMyYS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuNSVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtSXJnTXc1Y1BBTEYtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkJlbiBhbmQgSmFtZXMgZGlzY3VzcyB0aGUgaGlzdG9yeSBvZiBwb2RjYXN0cyBhbmQgd2h5IFNwb3RpZnkmIzgyMTc7cyByZWNlbnQgYW5ub3VuY2VtZW50cyBhcmUgc28gY29tcGVsbGluZyBmb3IgY3JlYXRvcnMuPC9wPlxcbjxwPjxzdHJvbmc+TGlua3M8L3N0cm9uZz48L3A+XFxuPHVsPlxcbjxsaT5CZW4gVGhvbXBzb246IFNwb3RpZnkmIzgyMTc7cyBTdXJwcmlzZSBcXHUyMDE0IDxhIGhyZWY9XFxcImh0dHBzOi8vc3RyYXRlY2hlcnkuY29tLzIwMjEvc3BvdGlmeXMtc3VycHJpc2UvXFxcIj5TdHJhdGVjaGVyeTwvYT48L2xpPlxcbjxsaT5FcGlzb2RlIDE4NSBcXHUyMDE0IE9wZW4sIEZyZWUsIGFuZCBTcG90aWZ5IFxcdTIwMTQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9leHBvbmVudC5mbS9lcGlzb2RlLTE4NS1vcGVuLWZyZWUtYW5kLXNwb3RpZnkvXFxcIj5FeHBvbmVudDwvYT48L2xpPlxcbjxsaT5CZW4gVGhvbXBzb246IFBvZGNhc3RzLCBBbmFseXRpY3MsIGFuZCBDZW50cmFsaXphdGlvbiBcXHUyMDE0IDxhIGhyZWY9XFxcImh0dHBzOi8vc3RyYXRlY2hlcnkuY29tLzIwMTcvcG9kY2FzdHMtYW5hbHl0aWNzLWFuZC1jZW50cmFsaXphdGlvbi9cXFwiPlN0cmF0ZWNoZXJ5PC9hPjwvbGk+XFxuPGxpPkJlbiBUaG9tcHNvbjogU3BvdGlmeVxcdTIwMTlzIFBvZGNhc3QgQWdncmVnYXRpb24gUGxheSBcXHUyMDE0IDxhIGhyZWY9XFxcImh0dHBzOi8vc3RyYXRlY2hlcnkuY29tLzIwMTkvc3BvdGlmeXMtcG9kY2FzdC1hZ2dyZWdhdGlvbi1wbGF5L1xcXCI+U3RyYXRlY2hlcnk8L2E+PC9saT5cXG48bGk+QmVuIFRob21wc29uOiBEaXRoZXJpbmcgYW5kIE9wZW4gVmVyc3VzIEZyZWUgXFx1MjAxNCA8YSBocmVmPVxcXCJodHRwczovL3N0cmF0ZWNoZXJ5LmNvbS8yMDIwL2RpdGhlcmluZy1hbmQtdGhlLW9wZW4td2ViL1xcXCI+U3RyYXRlY2hlcnk8L2E+PC9saT5cXG48bGk+QmVuIFRob21wc29uOiBTcG90aWZ5IEVhcm5pbmdzLCBQb2RjYXN0cyBhbmQgTGlmZXRpbWUgVmFsdWUsIFRoZSBSaW5nZXIgQWNxdWlzaXRpb24gXFx1MjAxNCA8YSBocmVmPVxcXCJodHRwczovL3N0cmF0ZWNoZXJ5LmNvbS8yMDIwL3Nwb3RpZnlzLWVhcm5pbmdzLXBvZGNhc3RzLWFuZC1saWZldGltZS12YWx1ZS10aGUtcmluZ2VyLWFjcXVpc2l0aW9uL1xcXCI+U3RyYXRlY2hlcnk8L2E+PC9saT5cXG48bGk+QmVuIFRob21wc29uOiBUaGUgRXVyb3BlYW4gU3VwZXIgTGVhZ3VlLCBBcHBsZSBNdXNpY1xcdTIwMTlzIExldHRlciB0byBBcnRpc3RzIFxcdTIwMTQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9zdHJhdGVjaGVyeS5jb20vMjAyMS90aGUtZXVyb3BlYW4tc3VwZXItbGVhZ3VlLWFwcGxlLW11c2ljcy1sZXR0ZXItdG8tYXJ0aXN0cy9cXFwiPlN0cmF0ZWNoZXJ5PC9hPjwvbGk+XFxuPGxpPkJlbiBUaG9tcHNvbjogUG9kY2FzdCBTdWJzY3JpcHRpb25zIHZzLiB0aGUgQXBwIFN0b3JlIFxcdTIwMTQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9zdHJhdGVjaGVyeS5jb20vMjAyMS9wb2RjYXN0LXN1YnNjcmlwdGlvbnMtdnMtdGhlLWFwcC1zdG9yZS9cXFwiPlN0cmF0ZWNoZXJ5PC9hPjwvbGk+XFxuPGxpPkJlbiBUaG9tcHNvbjogRmVhcmluZyBTcG90aWZ5PywgQXBwbGVcXHUyMDE5cyBFYXJuaW5ncywgTWFyZ2lucyBhbmQgQ2hpcHMgXFx1MjAxNCA8YSBocmVmPVxcXCJodHRwczovL3N0cmF0ZWNoZXJ5LmNvbS8yMDIxL2ZlYXJpbmctc3BvdGlmeS1hcHBsZXMtZWFybmluZ3MtbWFyZ2lucy1hbmQtY2hpcHMvXFxcIj5TdHJhdGVjaGVyeTwvYT48L2xpPlxcbjwvdWw+XFxuPHA+PHN0cm9uZz5Ib3N0czwvc3Ryb25nPjwvcD5cXG48cD5cXHUwMGEwPC9wPlxcbjx1bD5cXG48bGk+QmVuIFRob21wc29uLCA8YSBocmVmPVxcXCJodHRwOi8vdHdpdHRlci5jb20vYmVudGhvbXBzb25cXFwiPkBiZW50aG9tcHNvbjwvYT4sIDxhIGhyZWY9XFxcImh0dHA6Ly9zdHJhdGVjaGVyeS5jb21cXFwiPlN0cmF0ZWNoZXJ5PC9hPjwvbGk+XFxuPGxpPkphbWVzIEFsbHdvcnRoLCA8YSBocmVmPVxcXCJodHRwOi8vdHdpdHRlci5jb20vamFtZXNhbGx3b3J0aFxcXCI+QGphbWVzYWxsd29ydGg8L2E+LCA8YSBocmVmPVxcXCJodHRwczovL2hici5vcmcvc2VhcmNoP3Rlcm09SmFtZXMrQWxsd29ydGgmIzAzODtzb3J0PXBvcHVsYXJpdHlfc2NvcmVcXFwiPkhhcnZhcmQgQnVzaW5lc3MgUmV2aWV3PC9hPjwvbGk+XFxuPC91bD5cXG48cD5cXHUwMGEwPC9wPlxcbjxwPjxzdHJvbmc+UG9kY2FzdCBJbmZvcm1hdGlvbjwvc3Ryb25nPjwvcD5cXG48cD5cXHUwMGEwPC9wPlxcbjx1bD5cXG48bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9leHBvbmVudC5mbS9mZWVkL1xcXCI+RmVlZDwvYT48L2xpPlxcbjxsaT48YSBocmVmPVxcXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvcG9kY2FzdC9leHBvbmVudC9pZDgyNjQyMDk2OVxcXCI+aVR1bmVzPC9hPjwvbGk+XFxuPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vc291bmRjbG91ZC5jb20vZXhwb25lbnRmbVxcXCI+U291bmRDbG91ZDwvYT48L2xpPlxcbjxsaT48YSBocmVmPVxcXCJodHRwOi8vdHdpdHRlci5jb20vZXhwb25lbnRmbVxcXCI+VHdpdHRlcjwvYT48L2xpPlxcbjxsaT48YSBocmVmPVxcXCJodHRwOi8vc3RyYXRlY2hlcnkuY29tL2V4cG9uZW50LWZlZWRiYWNrL1xcXCI+RmVlZGJhY2s8L2E+PC9oMj5cXG48L2xpPlxcbjwvdWw+XCIsXG4gICAgICAgIFwicHViX2RhdGVfbXNcIjogMTYxOTc3MTU4MDAwMixcbiAgICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiaHR0cHM6Ly9leHBvbmVudC5mbS8/cD00MjlcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80NjNiN2RiODc0YzA0YzNjYTY2Y2VmZGEzZTlkNDY3OS9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDM5NzgsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNDYzYjdkYjg3NGMwNGMzY2E2NmNlZmRhM2U5ZDQ2NzkvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTYxOTc5OTg4OTgwNlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA0NzU3OTcsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiNGM3MmM0ZGZhYzAwNGZmY2EwODY3YTcwMzYxZjc3YWJcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9qYXMuc2ltcGxlY2FzdC5jb20vZXBpc29kZXMvc2lkZS1odXN0bGUtZnJpZGF5LXdoeS1zaG91bGQteW91LXN0YXJ0LWEtcG9kY2FzdC1hbmQtbW9uZXRpemUteW91ci1wb2RjYXN0LXRocm91Z2gtYWRzLWFuZC1wYXRyZW9uLWJZNjIwd19BP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzRjNzJjNGRmYWMwMDRmZmNhMDg2N2E3MDM2MWY3N2FiL1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1qYW1lcy1hbHR1Y2hlci9zaWRlLWh1c3RsZS1mcmlkYXktd2h5LXgtT2Rsa0hQd2VTLWpEbVRzNk5sLXRyLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNpZGUgSHVzdGxlIEZyaWRheTogV2h5IHNob3VsZCB5b3UgU1RBUlQgYSBwb2RjYXN0IGFuZCBNT05FVElaRSB5b3VyIHBvZGNhc3QgdGhyb3VnaCBBZHMgYW5kIFBhdHJlb24hXCIsXG4gICAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgICAgXCJpZFwiOiBcIjZkYWJmMmY2NWMzODRlMWY4OTdiYjYwNjg1OTMwOWY0XCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtamFtZXMtYWx0dWNoZXItc2hvdy1qYW1lcy1hbHR1Y2hlci01MEVGdUlkbGNZNC1zU0hvY3Y4WWpJZS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBKYW1lcyBBbHR1Y2hlciBTaG93XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJKYW1lcyBBbHR1Y2hlclwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1qYW1lcy1hbHR1Y2hlci1zaG93LWphbWVzLWFsdHVjaGVyLTZxNThkUkhwbXZXLXNTSG9jdjhZakllLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNjcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy82ZGFiZjJmNjVjMzg0ZTFmODk3YmI2MDY4NTkzMDlmNC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjAuMDUlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWphbWVzLWFsdHVjaGVyL3NpZGUtaHVzdGxlLWZyaWRheS13aHktQnBHVVZBLW9MX3YtakRtVHM2TmwtdHIuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkFub3RoZXIgU2lkZSBIdXN0bGUgRnJpZGF5ISBJIHNhdCBkb3duIHdpdGggSmF5IFlvdywgdGhlIFNvdW5kIEVuZ2luZWVyLyBQcm9kdWNlciBvZiBUaGUgSmFtZXMgQWx0dWNoZXIsIHRvIGRpc2N1c3Mgd2F5cyB0byBtb25ldGl6ZSBhIHBvZGNhc3QsIHdlIHNwb2tlIGFib3V0IHdoeSB0aGlzIGlzIHRoZSBiZXN0IHRpbWUgdG8gbGF1bmNoIGEgcG9kY2FzdCBhbmQgb3VyIGVxdWlwbWVudCBzZXQgdXAgZm9yIHJlbW90ZSByZWNvcmRpbmcgYW5kIGludGVydmlldy4gSW4gdGhpcyBlcGlzb2RlLCB3ZSBicmVhayBkb3duIHRoYXQncyB0aGUgZGlmZmVyZW50IHdheXMgeW91IGNhbiBtb25ldGl6ZSB0aHJvdWdoIEFkcywgc3BvbnNvcnMsIGFmZmlsaWF0ZSBkZWFscywgYW5kIFBhdHJlb24hIFBhcnQgMiB3aWxsIGJlIGNvbWluZyBzb29uIE1vbmRheSE8L3A+XFxuPGhyIC8+XFxuPHA+PHN0cm9uZz5JIHdyaXRlIGFib3V0IGFsbCBteSBwb2RjYXN0cyEgQ2hlY2sgb3V0IHRoZSBmdWxsIHBvc3QgYW5kIGxlYXJuIHdoYXQgSSBsZWFybmVkIGF0IDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmphbWVzYWx0dWNoZXIuY29tL3BvZGNhc3RcXFwiPmphbWVzYWx0dWNoZXIuY29tL3BvZGNhc3Q8L2E+Ljwvc3Ryb25nPjwvcD5cXG48cD48c3Ryb25nPlRoYW5rcyBzbyBtdWNoIGZvciBsaXN0ZW5pbmchIElmIHlvdSBsaWtlIHRoaXMgZXBpc29kZSwgcGxlYXNlIHN1YnNjcmliZSB0byBcXHUyMDFjVGhlIEphbWVzIEFsdHVjaGVyIFNob3dcXHUyMDFkIGFuZCByYXRlIGFuZCByZXZpZXcgd2hlcmV2ZXIgeW91IGdldCB5b3VyIHBvZGNhc3RzOjwvc3Ryb25nPjwvcD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvcG9kY2FzdC90aGUtamFtZXMtYWx0dWNoZXItc2hvdy9pZDc5NDAzMDg1OT9tdD0yXFxcIj5BcHBsZSBQb2RjYXN0czwvYT48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuc3RpdGNoZXIuY29tL3BvZGNhc3Qvc3RhbnNiZXJyeS1yYWRpby1uZXR3b3JrL3RoZS1qYW1lcy1hbHR1Y2hlci1zaG93L2UvNTI3MzUwMzNcXFwiPlN0aXRjaGVyPC9hPjwvcD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL3d3dy5paGVhcnQuY29tL3BvZGNhc3QvMjMyLVRoZS1KYW1lcy1BbHR1Y2hlci1TaG93LTI3MDg1MDg2L2VwaXNvZGUvZXAtMjk4LXJ5YW4taG9saWRheS1jb21wZXRpdGlvbi0yODc4OTQxMS9cXFwiPmlIZWFydCBSYWRpbzwvYT48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL2VwaXNvZGUvMEFCaTl3M1FyYjJFRk5EZWVYbEh5elxcXCI+U3BvdGlmeTwvYT48L3A+XFxuPHA+IDwvcD5cXG48cD48c3Ryb25nPkZvbGxvdyBtZSBvbiBTb2NpYWwgTWVkaWE6PC9zdHJvbmc+PC9wPlxcbjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2NoYW5uZWwvVUNSUWx4MmtsRV9hTnJQaHoyT3lLUmRnXFxcIj5Zb3VUdWJlPC9hPjwvcD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL2phbHR1Y2hlclxcXCI+VHdpdHRlcjwvYT48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL0pBbHR1Y2hlci5CbG9nL1xcXCI+RmFjZWJvb2s8L2E+PC9wPlxcbjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmxpbmtlZGluLmNvbS9pbi9qYW1lc2FsdHVjaGVyXFxcIj5MaW5rZWRpbjwvYT48L3A+XCIsXG4gICAgICAgIFwicHViX2RhdGVfbXNcIjogMTYwMjgzMTYwMDI4NixcbiAgICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiZmFlMTYzYjEtZGNjMi00NjAwLWIwNDAtYWM1NjAwMTAyMzQ5XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNGM3MmM0ZGZhYzAwNGZmY2EwODY3YTcwMzYxZjc3YWIvXCIsXG4gICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAzMDA3LFxuICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzRjNzJjNGRmYWMwMDRmZmNhMDg2N2E3MDM2MWY3N2FiLyNlZGl0XCJcbiAgICAgIH0sXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiXCIsXG4gICAgICBcImFkZGVkX2F0X21zXCI6IDE2MDMyNTY1Mzg0NzFcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogNDc1Nzk2LFxuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImQ1ZTIxMTI2NDNhYzRkMDFiYWFhOGVhYjZjN2I3Y2FlXCIsXG4gICAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vamFzLnNpbXBsZWNhc3QuY29tL2VwaXNvZGVzL3NpZGUtaHVzdGxlLWZyaWRheS1tb25ldGl6ZS15b3VyLXBvZGNhc3QtcmlnaHQtbm93LUxZX0Q0RjFwP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2Q1ZTIxMTI2NDNhYzRkMDFiYWFhOGVhYjZjN2I3Y2FlL1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1qYW1lcy1hbHR1Y2hlci9zaWRlLWh1c3RsZS1mcmlkYXktbW9uZXRpemUtbkpheWNaMzl6ZEgtdlp0MGdpNWhvRE4uMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiU2lkZSBIdXN0bGUgRnJpZGF5OiBNb25ldGl6ZSB5b3VyIHBvZGNhc3QgcmlnaHQgbm93IVwiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCI2ZGFiZjJmNjVjMzg0ZTFmODk3YmI2MDY4NTkzMDlmNFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWphbWVzLWFsdHVjaGVyLXNob3ctamFtZXMtYWx0dWNoZXItNTBFRnVJZGxjWTQtc1NIb2N2OFlqSWUuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgSmFtZXMgQWx0dWNoZXIgU2hvd1wiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSmFtZXMgQWx0dWNoZXJcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtamFtZXMtYWx0dWNoZXItc2hvdy1qYW1lcy1hbHR1Y2hlci02cTU4ZFJIcG12Vy1zU0hvY3Y4WWpJZS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY3LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNmRhYmYyZjY1YzM4NGUxZjg5N2JiNjA2ODU5MzA5ZjQvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1qYW1lcy1hbHR1Y2hlci9zaWRlLWh1c3RsZS1mcmlkYXktbW9uZXRpemUtVEdDai05cVAwTnctdlp0MGdpNWhvRE4uMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlBhcnQgMiBvbiBtb25ldGl6aW5nIHlvdXIgcG9kY2FzdCEgSW4gdGhpcyBlcGlzb2RlLCB3ZSB0YWxrZWQgYWJvdXQgd2F5cyB0byBtb25ldGl6ZSB5b3VyIHBvZGNhc3QgdmlhIG1lcmNoYW5kaXNpbmcsIGdldHRpbmcgaGlyZWQgYXMgYSBjb25zdWx0YW50IHRocm91Z2ggeW91ciBwb2RjYXN0LCBzcGVha2luZyBnaWdzLCBvbiBhbmQgb24hIEFsc28sIGVuam95IEpheSdzIGVwaXNvZGljIGRlYnV0IG9uIHRoZSBwb2RjYXN0ISAoVGVjaG5pY2FsbHkgYSBzZWNvbmQgc2luY2UgdGhpcyBpcyBhIHBhcnQgb2YgRnJpZGF5J3MgcG9kY2FzdCEpPC9wPlxcbjxociAvPlxcbjxwPjxzdHJvbmc+SSB3cml0ZSBhYm91dCBhbGwgbXkgcG9kY2FzdHMhIENoZWNrIG91dCB0aGUgZnVsbCBwb3N0IGFuZCBsZWFybiB3aGF0IEkgbGVhcm5lZCBhdCA8YSBocmVmPVxcXCJodHRwczovL3d3dy5qYW1lc2FsdHVjaGVyLmNvbS9wb2RjYXN0XFxcIj5qYW1lc2FsdHVjaGVyLmNvbS9wb2RjYXN0PC9hPi48L3N0cm9uZz48L3A+XFxuPHA+PHN0cm9uZz5UaGFua3Mgc28gbXVjaCBmb3IgbGlzdGVuaW5nISBJZiB5b3UgbGlrZSB0aGlzIGVwaXNvZGUsIHBsZWFzZSBzdWJzY3JpYmUgdG8gXFx1MjAxY1RoZSBKYW1lcyBBbHR1Y2hlciBTaG93XFx1MjAxZCBhbmQgcmF0ZSBhbmQgcmV2aWV3IHdoZXJldmVyIHlvdSBnZXQgeW91ciBwb2RjYXN0czo8L3N0cm9uZz48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9pdHVuZXMuYXBwbGUuY29tL3VzL3BvZGNhc3QvdGhlLWphbWVzLWFsdHVjaGVyLXNob3cvaWQ3OTQwMzA4NTk/bXQ9MlxcXCI+QXBwbGUgUG9kY2FzdHM8L2E+PC9wPlxcbjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnN0aXRjaGVyLmNvbS9wb2RjYXN0L3N0YW5zYmVycnktcmFkaW8tbmV0d29yay90aGUtamFtZXMtYWx0dWNoZXItc2hvdy9lLzUyNzM1MDMzXFxcIj5TdGl0Y2hlcjwvYT48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cuaWhlYXJ0LmNvbS9wb2RjYXN0LzIzMi1UaGUtSmFtZXMtQWx0dWNoZXItU2hvdy0yNzA4NTA4Ni9lcGlzb2RlL2VwLTI5OC1yeWFuLWhvbGlkYXktY29tcGV0aXRpb24tMjg3ODk0MTEvXFxcIj5pSGVhcnQgUmFkaW88L2E+PC9wPlxcbjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9lcGlzb2RlLzBBQmk5dzNRcmIyRUZORGVlWGxIeXpcXFwiPlNwb3RpZnk8L2E+PC9wPlxcbjxwPiA8L3A+XFxuPHA+PHN0cm9uZz5Gb2xsb3cgbWUgb24gU29jaWFsIE1lZGlhOjwvc3Ryb25nPjwvcD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDUlFseDJrbEVfYU5yUGh6Mk95S1JkZ1xcXCI+WW91VHViZTwvYT48L3A+XFxuPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWx0dWNoZXJcXFwiPlR3aXR0ZXI8L2E+PC9wPlxcbjxwPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9KQWx0dWNoZXIuQmxvZy9cXFwiPkZhY2Vib29rPC9hPjwvcD5cXG48cD48YSBocmVmPVxcXCJodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vamFtZXNhbHR1Y2hlclxcXCI+TGlua2VkaW48L2E+PC9wPlwiLFxuICAgICAgICBcInB1Yl9kYXRlX21zXCI6IDE2MDMwOTA4MDAyODQsXG4gICAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcIjdlNzA4NjNmLWViZjEtNDY0MS1iMTUxLWFjNTgwMGVhODc3M1wiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2Q1ZTIxMTI2NDNhYzRkMDFiYWFhOGVhYjZjN2I3Y2FlL1wiLFxuICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMjYxNyxcbiAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kNWUyMTEyNjQzYWM0ZDAxYmFhYThlYWI2YzdiN2NhZS8jZWRpdFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlwiLFxuICAgICAgXCJhZGRlZF9hdF9tc1wiOiAxNjAzMjU2NTI2MTU3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDQzNDY3NCxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCIzYzMxMWM4Y2Y4MzQ0OGRlYTA0NjNjNjliZmU2MWM3NVwiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL2FuY2hvci5mbS90aGlzLXdlZWstaW4tc3RhcnR1cHMvZXBpc29kZXMvRTEwOTYtUG9kY2FzdGluZy1TdGF0ZS1vZi10aGUtVW5pb24tZmVhdHVyaW5nLU92ZXJjYXN0cy1NYXJjby1Bcm1lbnQtLU94Zm9yZC1Sb2Fkcy1EYW4tR3Jhbmdlci1lMWNndGs0P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzNjMzExYzhjZjgzNDQ4ZGVhMDQ2M2M2OWJmZTYxYzc1L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoaXMtd2Vlay1pbi1zdGFydHVwcy1qYXNvbi1jYWxhY2FuaXMteDJSTDd1anNDV20tRUtja1IzNnpybkEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiRTEwOTY6IFBvZGNhc3RpbmcgU3RhdGUgb2YgdGhlIFVuaW9uIGZlYXR1cmluZyBPdmVyY2FzdFxcdTIwMTlzIE1hcmNvIEFybWVudCAmIE94Zm9yZCBSb2FkXFx1MjAxOXMgRGFuIEdyYW5nZXJcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiOWE2MmUyNTgxOTA4NDE1MTg1ZGVlMzVkMmQxOWY5YjVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoaXMtd2Vlay1pbi1zdGFydHVwcy1qYXNvbi1jYWxhY2FuaXMteDJSTDd1anNDV20tRUtja1IzNnpybkEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGlzIFdlZWsgaW4gU3RhcnR1cHNcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkphc29uIENhbGFjYW5pc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoaXMtd2Vlay1pbi1zdGFydHVwcy1qYXNvbi1jYWxhY2FuaXMtZTlPam5KM3JCdF8tRUtja1IzNnpybkEuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzlhNjJlMjU4MTkwODQxNTE4NWRlZTM1ZDJkMTlmOWI1L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4xJVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoaXMtd2Vlay1pbi1zdGFydHVwcy1qYXNvbi1jYWxhY2FuaXMtZTlPam5KM3JCdF8tRUtja1IzNnpybkEuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZvbGxvdyBNYXJjbzogaHR0cHM6Ly90d2l0dGVyLmNvbS9tYXJjb2FybWVudDxiciAvPlxcbjxiciAvPlxcbkRvd25sb2FkIE92ZXJjYXN0OiBodHRwczovL292ZXJjYXN0LmZtPGJyIC8+XFxuPGJyIC8+XFxuRm9sbG93IE94Zm9yZCBSb2FkOiBodHRwczovL3R3aXR0ZXIuY29tL094Zm9yZF9Sb2FkPGJyIC8+XFxuPGJyIC8+XFxuRm9sbG93IEphc29uOiBodHRwczovL2xpbmt0ci5lZS9jYWxhY2FuaXM8YnIgLz5cXG48YnIgLz5cXG5UaGFua3MgdG8gb3VyIHBhcnRuZXJzLi4uPGJyIC8+XFxuU2VuZFBybyBPbmxpbmUgZnJvbSBQaXRuZXkgQm93ZXMgLSBUcnkgaXQgZnJlZSBmb3IgMzAgZGF5cyBhbmQgZ2V0IGEgZnJlZSAxMC1wb3VuZCBzY2FsZSBhdCBodHRwczovL3BiLmNvbS90d2lzdDxiciAvPlxcbkxpbmtlZEluIE1hcmtldGluZyAtIEdldCAkMTAwIG9mZiB5b3VyIGZpcnN0IGFkdmVydGlzaW5nIGNhbXBhaWduIGF0IGh0dHBzOi8vbGlua2VkaW4uY29tL3RoaXN3ZWVraW5zdGFydHVwczxiciAvPlxcblZhbnRhIC0gJDFrIG9mZiB5b3VyIFNPQyAyIGF0IGh0dHBzOi8vdmFudGEuY29tL3R3aXN0XCIsXG4gICAgICAgIFwicHViX2RhdGVfbXNcIjogMTU5NzQxNjQ2NjQ2NyxcbiAgICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiaHR0cHM6Ly90aGlzd2Vla2luc3RhcnR1cHMuY29tLz9wPTQxMDgwXCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvM2MzMTFjOGNmODM0NDhkZWEwNDYzYzY5YmZlNjFjNzUvXCIsXG4gICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiA1MjQ5LFxuICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzNjMzExYzhjZjgzNDQ4ZGVhMDQ2M2M2OWJmZTYxYzc1LyNlZGl0XCJcbiAgICAgIH0sXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiXCIsXG4gICAgICBcImFkZGVkX2F0X21zXCI6IDE1OTc0MjEzOTUyNDhcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogNDI0MTQxLFxuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjUwZDAxMTBiZWM3OTQxNGVhYzYxY2I0NzJjM2MxZGUyXCIsXG4gICAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vYW5jaG9yLmZtL2Nhc2V5YWRhbXMvZXBpc29kZXMvRWxpc2UtSHUtLS1Ib3N0aW5nLVRFRC1UYWxrcy1EYWlseS0tVGhlLUZ1dHVyZS1vZi1Qb2RjYXN0aW5nLWVjZnA1Yj91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC81MGQwMTEwYmVjNzk0MTRlYWM2MWNiNDcyYzNjMWRlMi9cIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtY2FzZXktYWRhbXMtc2hvdy9lbGlzZS1odS1ob3N0aW5nLXRlZC10YWxrcy1ZNnE0MEVqci1aWC13VVYwcDFSZDN6cy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJFbGlzZSBIdSAtIEhvc3RpbmcgXFxcIlRFRCBUYWxrcyBEYWlseVxcXCIgJiBUaGUgRnV0dXJlIG9mIFBvZGNhc3RpbmdcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiMTEzNjJhMDY4MmU3NDRiMjljZTVlYTczYzkyMDEzMmVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1jYXNleS1hZGFtcy1zaG93LWNhc2V5LWFkYW1zLTFRVEY4dEpLT1VuLVl1YXJIczVsZkRJLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIENhc2V5IEFkYW1zIFNob3dcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkNhc2V5IEFkYW1zXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWNhc2V5LWFkYW1zLXNob3ctY2FzZXktYWRhbXMtVDJFc21YaUN1dkQtWXVhckhzNWxmREkuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA1NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzExMzYyYTA2ODJlNzQ0YjI5Y2U1ZWE3M2M5MjAxMzJlL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1jYXNleS1hZGFtcy1zaG93L2VsaXNlLWh1LWhvc3RpbmctdGVkLXRhbGtzLUZiU2RhZllEQzlOLXdVVjBwMVJkM3pzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5FbGlzZSBIdSBpcyBhIGhvc3QtYXQtbGFyZ2UgYmFzZWQgYXQgTlBSIFdlc3QgaW4gQ3VsdmVyIENpdHksIENhbGlmLiBQcmV2aW91c2x5LCBzaGUgZXhwbG9yZWQgdGhlIGZ1dHVyZSB3aXRoIGhlciB2aWRlbyBzZXJpZXMsIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lm5wci5vcmcvMjAxOS8wNS8wNi83MTY0MTQ3ODAvdmlkZW9zLWZ1dHVyZS15b3VcXFwiPjxlbT5GdXR1cmUgWW91IHdpdGggRWxpc2UgSHU8L2VtPjwvYT4sIGFuZCBzZXJ2ZWQgYXMgdGhlIGZvdW5kaW5nIGJ1cmVhdSBjaGllZiBhbmQgSW50ZXJuYXRpb25hbCBDb3JyZXNwb25kZW50IGZvciBOUFIncyBTZW91bCBvZmZpY2UuIFNoZSB3YXMgYmFzZWQgaW4gU2VvdWwgZm9yIG5lYXJseSBmb3VyIHllYXJzLCByZXNwb25zaWJsZSBmb3IgdGhlIG5ldHdvcmsncyBjb3ZlcmFnZSBvZiBib3RoIEtvcmVhcyBhbmQgSmFwYW4sIGFuZCBmaWxlZCBmcm9tIGEgZG96ZW4gY291bnRyaWVzIGFjcm9zcyBBc2lhLiBCZWZvcmUgam9pbmluZyBOUFIsIHNoZSB3YXMgb25lIG9mIHRoZSBmb3VuZGluZyByZXBvcnRlcnMgYXQgPGEgaHJlZj1cXFwiaHR0cDovL3d3dy50ZXhhc3RyaWJ1bmUub3JnL1xcXCI+VGhlIFRleGFzIFRyaWJ1bmU8L2E+LCBhIG5vbi1wcm9maXQgZGlnaXRhbCBuZXdzIHN0YXJ0dXAgZGV2b3RlZCB0byBwb2xpdGljcyBhbmQgcHVibGljIHBvbGljeS4gV2hpbGUgYXQgdGhlIFRyaWJ1bmUsIEh1IG92ZXJzYXcgdGVsZXZpc2lvbiBwYXJ0bmVyc2hpcHMgYW5kIG11bHRpbWVkaWEgcHJvamVjdHMsIGNvbnRyaWJ1dGVkIHRvIDxlbT5UaGUgTmV3IFlvcmsgVGltZXM8L2VtPicgZXhwYW5kZWQgVGV4YXMgY292ZXJhZ2UsIGFuZCBwdXNoZWQgZm9yIGVkaXRvcmlhbCBpbm5vdmF0aW9uIGFjcm9zcyBwbGF0Zm9ybXMuSGVyIHdvcmsgYXQgTlBSIGhhcyBlYXJuZWQgYSBEdVBvbnQtQ29sdW1iaWEgYXdhcmQgYW5kIGEgR3JhY2llIEF3YXJkIGZyb20gdGhlIEFsbGlhbmNlIGZvciBXb21lbiBpbiBNZWRpYSBmb3IgaGVyIHZpZGVvIHNlcmllcywgPGVtPkVsaXNlIFRyaWVzPC9lbT4uIEhlciBwcmV2aW91cyB3b3JrIGhhcyBlYXJuZWQgYSBHYW5uZXR0IEZvdW5kYXRpb24gQXdhcmQgZm9yIElubm92YXRpb24gaW4gV2F0Y2hkb2cgSm91cm5hbGlzbSwgYSBOYXRpb25hbCBFZHdhcmQgUi4gTXVycm93IGF3YXJkIGZvciBiZXN0IG9ubGluZSB2aWRlbywgYW5kIGJlYXQgcmVwb3J0aW5nIGF3YXJkcyBmcm9tIHRoZSBUZXhhcyBBc3NvY2lhdGVkIFByZXNzLiA8ZW0+VGhlIEF1c3RpbiBDaHJvbmljbGU8L2VtPiBvbmNlIGR1YmlvdXNseSBuYW1lZCBoZXIgdGhlIFxcXCI8YSBocmVmPVxcXCJodHRwOi8vd3d3LmF1c3RpbmNocm9uaWNsZS5jb20vZ3lyb2Jhc2UvQXdhcmRzL0Jlc3RPZkF1c3Rpbj9Bd2FyZD02NjAxMzhcXFwiPkJlc3QgVFYgUmVwb3J0ZXIgV2hvIENhbiBXcml0ZTwvYT4uXFxcIjwvcD5cXG48cD5Gb2xsb3cgRWxpc2UgSHUgb24gSW5zdGFncmFtOiA8YSBocmVmPVxcXCJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL2VsaXNld2hvLz9obD1lblxcXCI+aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9lbGlzZXdoby8/aGw9ZW48L2E+PC9wPlxcbjxwPkxlYXJuIG1vcmUgYWJvdXQgRWxpc2UgSHU6IDxhIGhyZWY9XFxcImh0dHBzOi8vZWxpc2VodS5jb20vXFxcIj5odHRwczovL2VsaXNlaHUuY29tLzwvYT48L3A+XFxuPHA+TGlzdGVuIHRvIFxcXCJURUQgVGFsa3MgRGFpbHlcXFwiIDxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdHMuYXBwbGUuY29tL3VzL3BvZGNhc3QvdGVkLXRhbGtzLWRhaWx5L2lkMTYwOTA0NjMwXFxcIj5odHRwczovL3BvZGNhc3RzLmFwcGxlLmNvbS91cy9wb2RjYXN0L3RlZC10YWxrcy1kYWlseS9pZDE2MDkwNDYzMDwvYT48L3A+XFxuPHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTg2MjY2NzMxMTMyLFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI5YWVlZTgxOC1lNzJjLTQ5MjgtODE0OS03Y2FlNDI1OTVkODJcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS81MGQwMTEwYmVjNzk0MTRlYWM2MWNiNDcyYzNjMWRlMi9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI1MjAsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNTBkMDExMGJlYzc5NDE0ZWFjNjFjYjQ3MmMzYzFkZTIvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU5NTc5MTg3MTUxN1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiA0MjM4NjUsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiOGY1MWM4ZThiMTlhNGM2MzhlY2JjZTEyZjkzMjJiYThcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly90aGVmZWVkLmxpYnN5bi5jb20vMTY3LWNsZWFuZmVlZC13aXRoLWEtc2lkZS1vZi1nb29nbGUtcG9kY2FzdHM/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvOGY1MWM4ZThiMTlhNGM2MzhlY2JjZTEyZjkzMjJiYTgvXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWZlZWQtdGhlLzE2Ny1jbGVhbmZlZWQtd2l0aC1hLXNpZGUtb2YtX0h4QU5XaVVsUmstT1MtUEJhUUtjZ2wuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiMTY3IENsZWFuZmVlZCBXaXRoIEEgU2lkZSBvZiBHb29nbGUgUG9kY2FzdHNcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiY2UzNzU0MDU4YzdhNDRhMGFiZDU3NGY4NmZmNWM3MTlcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1mZWVkLXRoZS1vZmZpY2lhbC1saWJzeW4tcG9kY2FzdC1lbHNpZS12cFNpek9KZHR1Ry0ya09leFZkR0pJdi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlRoZSBGZWVkIFRoZSBPZmZpY2lhbCBMaWJzeW4gUG9kY2FzdFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiRWxzaWUgRXNjb2JhciBhbmQgUm9iIFdhbGNoXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWZlZWQtdGhlLW9mZmljaWFsLWxpYnN5bi1wb2RjYXN0LWVsc2llLTFnQ2ZLSVA1WFZ5LTJrT2V4VmRHSkl2LjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDUsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9jZTM3NTQwNThjN2E0NGEwYWJkNTc0Zjg2ZmY1YzcxOS9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWZlZWQtdGhlLzE2Ny1jbGVhbmZlZWQtd2l0aC1hLXNpZGUtb2YtS0VNSjY1elZZNHgtT1MtUEJhUUtjZ2wuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRvbnMgb2YgZGV0YWlscyBvbiBhbGwgdGhpbmdzIEdvb2dsZSBQb2RjYXN0cyBNYW5hZ2VyISBJdFxcdTIwMTlzIGxpa2UgQXBwbGUgUG9kY2FzdHMgY29ubmVjdCBidXQgb2YgY291cnNlIEdvb2dsZS4gVGhlbiwgd2UgbW92ZSBvbiB0byBqb2JzIGluIHBvZGNhc3RpbmcsIHNvIG11Y2ggYWJvdXQgZmVlZGJhY2sgYWJvdXQgQ2xlYW5mZWVkLCBzb21lIHZlcnkgaW50ZXJlc3RpbmcgRmFjZWJvb2sgdXBkYXRlcywgTGlic3luIHBsYXllciBhdXRvbWF0aW9uLCB3aGF0IGlmIHNvbWVvbmUgdXNlcyBZT1VSIHBvZGNhc3QgbmFtZSwgYSBtYXNzaXZlIGJyZWFrZG93biBvZiB0aGUgcG9kZmFkZXIgdHlwZXMgYW5kIG9mIGNvdXJzZSB3ZVxcdTIwMTl2ZSBnb3QgYSBjcmF6eSBhbW91bnQgb2Ygc3RhdHMhPC9wPiA8cD5BdWRpZW5jZSBmZWVkYmFjayBkcml2ZXMgdGhlIHNob3cuIFdlXFx1MjAxOWQgbG92ZSBmb3IgeW91IHRvIGVtYWlsIHVzIGFuZCBrZWVwIHRoZSBjb252ZXJzYXRpb24gZ29pbmchIEVtYWlsIHRoZWZlZWRAbGlic3luLmNvbSBvciBjYWxsIDQxMlxcdTIwMTM1NzNcXHUyMDEzMTkzNC4gV2VcXHUyMDE5ZCBsb3ZlIHRvIGhlYXIgZnJvbSB5b3UhPC9wPiBRdWljayBFcGlzb2RlIFN1bW1hcnkgPHVsPiA8bGk+PGVtPjowNzwvZW0+IEludHJvITwvbGk+IDxsaT48ZW0+MzowNCBQUk9NTyAxOiBTYWlsaW5nIGluIHRoZSBNZWRpdGVycmFuZWFuIGFuZCBCZXlvbmQ8L2VtPjwvbGk+IDxsaT48ZW0+MzozNDwvZW0+IFJvYiBhbmQgRWxzaWUgY29udmVyc2F0aW9uPC9saT4gPGxpPkFubm91bmNlbWVudCBvZiBHb29nbGUgUG9kY2FzdHMgTWFuYWdlciE8L2xpPiA8bGk+V2hhdCBpdCBpcywgd2hhdCBpdCBnaXZlcyB5b3UgYW5kIGhvdyBpdCBpdCBkaWZmZXJlbnQgdGhhbiBBcHBsZSBQb2RjYXN0cyBhbmFseXRpY3M8L2xpPiA8bGk+OTo0NiBBcHBsZSBpcyBoaXJpbmcgZm9yIGFsbCBraW5kcyBvZiBwb2RjYXN0aW5nIHBvc2l0aW9uczwvbGk+IDxsaT4xMzo1NiBDbGVhbmZlZWQgYXVkaW8gZmVlZGJhY2sgZnJvbSBDYXJleSBHcmVlbjwvbGk+IDxsaT5FbWFpbHMgYWJvdXQgQ2xlYW5mZWVkPC9saT4gPGxpPjE4OjA4IENsZWFuZmVlZCBhdWRpbyBmZWVkYmFjayBmcm9tIENHPC9saT4gPGxpPlRob3VnaHRzIGFuZCBwcm9jZXNzZXMgYWJvdXQgcmVtb3RlIHJlY29yZGluZzwvbGk+IDxsaT5UaGVyZVxcdTIwMTlzIGEgbmV3IGtpZCBpbiB0b3duPC9saT4gPGxpPjI3OjM1IEZhY2Vib29rIHVwZGF0ZXMgYWJvdXQgY2hhcmdpbmcgZm9yIG9ubGluZSBldmVudHMgYW5kIGxpc3RlbmluZyB0byBGYWNlYm9vb2sgTGl2ZXM8L2xpPiA8bGk+MzA6NTggUFJPTU8gMjogVGhlIE5hdHVyaXN0IExpdmluZyBTaG93PC9saT4gPGxpPk5ldyB2ZXJzaW9uIG9mIFBvZGNhc3QgQWRkaWN0IG5vdyB3aXRoIHJldmlld3M8L2xpPiA8bGk+Q3VzdG9tIGF1dG9tYXRpb24gZm9yIHRoZSBsaWJzeW4gcGxheWVyczwvbGk+IDxsaT5GYWNlIElEIGFuZCBtYXNrczwvbGk+IDxsaT4zOTo1NSBXaGF0IGlmIHNvbWVvbmUgaXMgdXNpbmcgdGhlIG5hbWUgb2YgeW91ciBzaG93PyBIb3cgZG8geW91IGdvIGFib3V0IGRlYWxpbmcgd2l0aCBpdD88L2xpPiA8bGk+QSBzaG93IGFwcGVhcmluZyB0d2ljZSBvbiBzb21lIGFwcHM8L2xpPiA8bGk+NDk6NDMgUG9kZmFkaW5nIC0gdGhlIGtleSBtYWluIGdyb3VwczwvbGk+IDxsaT5VSyBkYXRhIGZyb20gUmFqYXIgb24gaW50ZXJuZXQgZGVsaXZlcnkgYXVkaW8gc2VydmljZXMgdmlhIE5laWwhPC9saT4gPGxpPjU3OjM4IFBST01PIDM6IFRoZSBFdXJvcGUgRGVzazwvbGk+IDxsaT5TdGF0cywgc3RhdHMsIHN0YXRzOiBtZWFuIGFuZCBtZWRpYW48L2xpPiA8bGk+NTk6NTIgQ09WSURcXHUyMDEzMTkgbGlic3luIHN0YXRzPC9saT4gPGxpPldoZXJlIGhhdmUgd2UgYmVlbj88L2xpPiA8bGk+V2hlcmUgYXJlIHdlIGdvaW5nPzwvbGk+IDwvdWw+IEZlYXR1cmVkIFBvZGNhc3QgUHJvbW9zICsgQXVkaW8gPHVsPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cubWVkc2FpbG9yLmNvbS9cXFwiPlBST01PIDE6IFNhaWxpbmcgaW4gdGhlIE1lZGl0ZXJyYW5lYW4gYW5kIEJleW9uZDwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cubmF0dXJpc3RsaXZpbmdzaG93LmNvbS9cXFwiPlBST01PIDI6IFRoZSBOYXR1cmlzdCBMaXZpbmcgU2hvdzwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9jZ2VzLmdlb3JnZXRvd24uZWR1L3Jlc2VhcmNoL3BvZGNhc3QvXFxcIj5QUk9NTyAzOiBUaGUgRXVyb3BlIERlc2s8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdGZhc3R0cmFjay5jb20vXFxcIj5DYXJleSBHcmVlbiBmcm9tIFBvZGNhc3QgRmFzdCBUcmFjazwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cudGhlcm9ja2V0cnlzaG93LmNvbS9cXFwiPkNCIGZyb20gdGhlIFJvY2tldHJ5IFNob3c8L2E+PC9saT4gPC91bD4gPHA+VGhhbmsgeW91IHRvIE5pY2sgZnJvbSA8YSBocmVmPVxcXCJodHRwOi8vbWljbWUuY29tXFxcIj5NaWNNZTwvYT4gZm9yIG91ciBhd2Vzb21lIGludHJvITwvcD4gIDxwPjxlbT5Qb2RjYXN0aW5nIEFydGljbGVzIGFuZCBMaW5rcyBtZW50aW9uZWQgYnkgUm9iIGFuZCBFbHNpZTwvZW0+PC9wPiA8dWw+IDxsaT48YSBocmVmPVxcXCJodHRwOi8vc3BlYWtwaXBlLmNvbS90aGVmZWVkXFxcIj5PdXIgU3BlYWtQaXBlIEZlZWRiYWNrIHBhZ2UhPC9hPiBMZWF2ZSB1cyBmZWVkYmFjayA6KTwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwOi8vcG9kY2FzdHNtYW5hZ2VyLmdvb2dsZS5jb21cXFwiPkdvb2dsZSBQb2RjYXN0cyBQb2RjYXN0IE1hbmFnZXI8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdHMuZ29vZ2xlLmNvbS9tYW5hZ2VyL2Fib3V0XFxcIj5Hb29nbGUgUG9kY2FzdHMgTWFuYWdlciBBYm91dCBQYWdlPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9wb2RjYXN0LXB1Ymxpc2hlcnMvYW5zd2VyLzk0Nzk3NTU/aGw9ZW4mYW1wO3JlZl90b3BpYz05NDc2OTczJmFtcDthdXRodXNlcj0wXFxcIj4gQWRkaW5nIG5ldyBhbmQgZXhpc3RpbmcgcG9kY2FzdHM8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vc2VhcmNoLmdvb2dsZS5jb20vZGV2dG9vbHMvcG9kY2FzdC9wcmV2aWV3XFxcIj5JcyB5b3VyIHNob3cgYWxyZWFkeSBpbiBHb29nbGUgUG9kY2FzdHM/IENoZWNrIGhlcmU8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vc3VwcG9ydC5nb29nbGUuY29tL3BvZGNhc3QtcHVibGlzaGVycy9hbnN3ZXIvOTY5NjcyNz9obD1lbiZhbXA7cmVmX3RvcGljPTk0NzY5NzMmYW1wO2F1dGh1c2VyPTBcXFwiPiBNYW5hZ2UgdXNlcnMgYW5kIHBlcm1pc3Npb25zIG9uIEdvb2dsZSBQb2RjYXN0cyBNYW5hZ2VyPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL3N1cHBvcnQuZ29vZ2xlLmNvbS9wb2RjYXN0LXB1Ymxpc2hlcnM/aGw9ZW4mYW1wO2F1dGh1c2VyPTAjdG9waWM9OTQ3Njk3M1xcXCI+IEdvb2dsZSBQb2RjYXN0cyBNYW5hZ2VyIFN1cHBvcnQ8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vam9icy5hcHBsZS5jb20vZW4tdXMvZGV0YWlscy8yMDAxNjQ3NzQvcG9kY2FzdHMtb3BlcmF0aW9ucy1tYW5hZ2VyP3RlYW09TUtUR1xcXCI+IFBvZGNhc3RzIE9wZXJhdGlvbnMgTWFuYWdlcjwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9qb2JzLmFwcGxlLmNvbS9lbi11cy9kZXRhaWxzLzIwMDE2NDI4Ny9wcm9ncmFtLW1hbmFnZXItcG9kY2FzdHMtYXBwbGUtbWVkaWEtcHJvZHVjdHM/dGVhbT1TRlRXUlxcXCI+IFByb2dyYW0gTWFuYWdlciwgUG9kY2FzdHMsIEFwcGxlIE1lZGlhIFByb2R1Y3RzPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL2pvYnMuYXBwbGUuY29tL2VuLXVzL2RldGFpbHMvMjAwMTY0Nzc0L3BvZGNhc3RzLW9wZXJhdGlvbnMtbWFuYWdlcj90ZWFtPU1LVEdcXFwiPiBVSSBFbmdpbmVlciwgQXBwbGUgTWVkaWEgUHJvZHVjdHMgKFBvZGNhc3RzKTwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly95b3V0dS5iZS9EcFJIU21KVF9Wa1xcXCI+Q2FyZXlcXHUyMDE5cyBDbGVhbmZlZWQgZGVtbyB2aWRlbzwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3BvZGNhc3RpZmljYXRpb24uY29tL2luLXNlYXJjaC1vZi10aGUtYmVzdC13YXktdG8tcmVjb3JkLWFuLWludGVydmlldy13aXRoLW1hcmstaGlsbHMtb2YtY2xlYW5mZWVkLWVwLTY5XFxcIj4gQ2FyZXlcXHUyMDE5cyBpbnRlcnZpZXcgd2l0aCBNYXJrIGZyb20gQ2xlYW5mZWVkPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL3BvZGNhc3RlbmdpbmVlcmluZ3NjaG9vbC5jb20vbWFyYy1iYWtvcy1vZi1jbGVhbmZlZWQtcGVzLTEwNC9cXFwiPiBDaHJpcyBDdXJyYW5cXHUyMDE5cyBpbnRlcnZpZXcgd2l0aCBNYXJjIGZyb20gQ2xlYW5mZWVkPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL3d3dy5yZWRkaXQuY29tL3IvcG9kY2FzdGluZy9jb21tZW50cy9mbHc5YWUvc2VydmljZXNfYW5kX2FwcGxpY2F0aW9uc190b19hbGxvd19yZW1vdGUvXFxcIj4gU2VydmljZXMgYW5kIGFwcGxpY2F0aW9ucyB0byBhbGxvdyByZW1vdGUgcmVjb3JkaW5ncyBvZiByZW1vdGUgZ3Vlc3RzIGFuZCBjby1ob3N0cy4gLSBSZWRkaXQ8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHA6Ly9wb2RjYXN0NDExLmNvbS9taXhlci5wZGZcXFwiPlJvYlxcdTIwMTlzIFBERjwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9yZXNvbmF0ZXJlY29yZGluZ3MuY29tLzIwMjAvMDQvdm9pY2UtcmVjb3JkZXJcXFwiPlJlc29uYXRlIFJlY29yZGluZ3MgbmV3IHJlY29yZGVyPC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL2Fib3V0LmZiLmNvbS9uZXdzLzIwMjAvMDQvaW50cm9kdWNpbmctbWVzc2VuZ2VyLXJvb21zL1xcXCI+RmFjZWJvb2sgbmV3czwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cucmFqYXIuY28udWsvZG9jcy9uZXdzL01JREFTX1NwcmluZ18yMDIwLnBkZlxcXCI+UmFqYXIgZGF0YSBmb3IgTWVhc3VyZW1lbnQgb2YgSW50ZXJuZXQgRGVsaXZlcnkgQXVkaW8gU2VydmljZXM8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vc2VhcmNoP3E9cG9kY2FzdDQxMSUyMCUyM2Ntd29ybGQmYW1wO3NyYz10eXBlZF9xdWVyeSZhbXA7Zj1saXZlXFxcIj4gUm9iXFx1MjAxOXMgI0NNV29ybGQgdHdpdHRlciBjaGF0PC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL2phY29ic21lZGlhLmNvbS90aGVyZS1hcmUtb3Zlci1hLW1pbGxpb24tcG9kY2FzdHMtaW4tYXBwbGVzLXBvZGNhc3RzLWFwcC13aGF0LWRvZXMtaXQtbWVhbi9cXFwiPiBUaGVyZSBBcmUgT3ZlciBBIE1pbGxpb24gUG9kY2FzdHMgSW4gQXBwbGVcXHUyMDE5cyBQb2RjYXN0cyBBcHAsIFdoYXQgRG9lcyBJdCBNZWFuPzwvYT48L2xpPiA8bGk+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5pbnNpZGVyYWRpby5jb20vcG9kY2FzdG5ld3NkYWlseS93YWxjaC1wb2RjYXN0LWRvd25sb2Fkcy1hcmVuLXQtZG93bi1hcy1tdWNoLWFzLW1vYmlsaXR5LXNob3dpbmctbWVkaXVtLXMtc3RpY2tpbmVzcy9hcnRpY2xlXzM5NGUwNTdhLTg0YmEtMTFlYS1hNmQwLWEzZGVmYzcxMzk0OS5odG1sXFxcIj4gV2FsY2g6IFByb29mIE9mIFBvZGNhc3QgXFx1MjAxOFN0aWNraW5lc3MuXFx1MjAxOTwvYT48L2xpPiA8L3VsPiAgPGVtPkhFTFAgVVMgU1BSRUFEIFRIRSBXT1JEITwvZW0+IDxwPjxlbT5XZVxcdTIwMTlkIGxvdmUgaXQgaWYgeW91IGNvdWxkIHBsZWFzZSBzaGFyZSAjVGhlRmVlZCB3aXRoIHlvdXIgdHdpdHRlciBmb2xsb3dlcnMuIDxhIGhyZWY9XFxcImh0dHA6Ly9jbGlja3RvdHdlZXQuY29tLzlkMnRlXFxcIj5DbGljayBoZXJlIHRvIHBvc3QgYSB0d2VldCE8L2E+PC9lbT48L3A+IDxwPjxlbT5JZiB5b3UgZHVnIHRoaXMgZXBpc29kZSBoZWFkIG9uIG92ZXIgdG8gQXBwbGUgUG9kY2FzdHMgYW5kIGtpbmRseSA8YSBocmVmPVxcXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvcG9kY2FzdC9mZWVkLW9mZmljaWFsLWxpYnN5bi1wb2RjYXN0L2lkNjY4NDEzMTQ0XFxcIj4gbGVhdmUgdXMgYSByYXRpbmcsIGEgcmV2aWV3IGFuZCBzdWJzY3JpYmUhPC9hPjwvZW0+PC9wPiA8ZW0+V2F5cyB0byBzdWJzY3JpYmUgdG8gVGhlIEZlZWQ6IFRoZSBPZmZpY2lhbCBMaWJzeW4gUG9kY2FzdDwvZW0+IDx1bD4gPGxpPjxlbT48YSBocmVmPVxcXCJodHRwczovL2l0dW5lcy5hcHBsZS5jb20vdXMvcG9kY2FzdC9mZWVkLW9mZmljaWFsLWxpYnN5bi1wb2RjYXN0L2lkNjY4NDEzMTQ0XFxcIj4gQ2xpY2sgaGVyZSB0byBzdWJzY3JpYmUgdmlhIEFwcGxlIFBvZGNhc3RzPC9hPjwvZW0+PC9saT4gPGxpPjxlbT48YSBocmVmPVxcXCJodHRwOi8vdGhlZmVlZC5saWJzeW4uY29tL3Jzc1xcXCI+Q2xpY2sgaGVyZSB0byBzdWJzY3JpYmUgdmlhIFJTUzwvYT48L2VtPjwvbGk+IDxsaT48ZW0+PGEgaHJlZj1cXFwiaHR0cDovL3d3dy5zdGl0Y2hlci5jb20vcG9kY2FzdC9saWJzeW4vdGhlLWZlZWRcXFwiPllvdSBjYW4gYWxzbyBzdWJzY3JpYmUgdmlhIFN0aXRjaGVyPC9hPjwvZW0+PC9saT4gPC91bD4gRkVFREJBQ0sgKyBQUk9NT1RJT04gPHA+PGVtPllvdSBjYW4gYXNrIHlvdXIgcXVlc3Rpb25zLCBtYWtlIGNvbW1lbnRzIGFuZCBjcmVhdGUgYSBzZWdtZW50IGFib3V0IHBvZGNhc3RpbmcgZm9yIHBvZGNhc3RlcnMhIExldCB5b3VyIHZvaWNlIGJlIGhlYXJkLjwvZW0+PC9wPiA8dWw+IDxsaT5Eb3dubG9hZCB0aGUgRlJFRSBUaGUgRmVlZCBBcHAgZm9yIDxhIGhyZWY9XFxcImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS91cy9hcHAvdGhlLWZlZWQtcG9kY2FzdGluZy10aXBzLWZyb20tbGlic3luL2lkMzgxNzg3NDM0P210PThcXFwiPiBpT1M8L2E+IGFuZCA8YSBocmVmPVxcXCJodHRwczovL3BsYXkuZ29vZ2xlLmNvbS9zdG9yZS9hcHBzL2RldGFpbHM/aWQ9Y29tLmxpYnN5bi5hbmRyb2lkLnRoZWZlZWQmYW1wO2hsPWVuXFxcIj4gQW5kcm9pZDwvYT4gKHlvdSBjYW4gc2VuZCBmZWVkYmFjayBzdHJhaWdodCBmcm9tIHdpdGhpbiB0aGUgYXBwKTwvbGk+IDxsaT5DYWxsIDQxMiA1NzMgMTkzNDwvbGk+IDxsaT5FbWFpbCB0aGVmZWVkQGxpYnN5bi5jb208L2xpPiA8bGk+VXNlIG91ciA8YSBocmVmPVxcXCJodHRwOi8vc3BlYWtwaXBlLmNvbS90aGVmZWVkXFxcIj5TcGVha1BpcGUgUGFnZTwvYT4hPC9saT4gPC91bD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTg4Njk0NzAwMDU3LFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCI3ZDc1ODg3NS02NDQzLTQyNjAtYTU3Zi1mMzFlMzVkMjFlYzhcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS84ZjUxYzhlOGIxOWE0YzYzOGVjYmNlMTJmOTMyMmJhOC9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDQzMzcsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOGY1MWM4ZThiMTlhNGM2MzhlY2JjZTEyZjkzMjJiYTgvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU5NTczMTM0MzQ1MFxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAzNDU2MDEsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiZGJkM2Q0NzdkZmM5NDEyODk4MmI3OWU4MTUyMzAxYjRcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cDovL21zY2hvb2wubGlic3luLmNvbS9zcG90aWZ5LWFjcXVpcmVkLXRoZS1yaW5nZXItcG9kY2FzdC0xNW0taW4tcmV2ZW51ZXMtaGVyZXMtd2hhdC1pdC1tZWFucy1lcC0xMzA2P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2RiZDNkNDc3ZGZjOTQxMjg5ODJiNzllODE1MjMwMWI0L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL21hcmtldGluZy1zY2hvb2wtZGlnaXRhbC1tYXJrZXRpbmctYW5kLWtuTHpCUHJlcVl4LXBIeWlJSlQ0THhsLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgXCJ0aXRsZVwiOiBcIlNwb3RpZnkgQWNxdWlyZWQgJ1RoZSBSaW5nZXInIFBvZGNhc3QgKCQxNU0gSW4gUmV2ZW51ZXMpIC0gSGVyZSdzIFdoYXQgSXQgTWVhbnMgIHwgRXAuICMxMzA2XCIsXG4gICAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgICAgXCJpZFwiOiBcIjlhMmFiZjZiNjhiNTQ1NTRhNjBhMzJhMjkzMmZlYmNiXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRpbmctc2Nob29sLWRpZ2l0YWwtbWFya2V0aW5nLWFuZC1rbkx6QlByZXFZeC1wSHlpSUpUNEx4bC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIk1hcmtldGluZyBTY2hvb2wgLSBEaWdpdGFsIE1hcmtldGluZyBhbmQgT25saW5lIE1hcmtldGluZyBUaXBzXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJFcmljIFNpdSAmIE5laWwgUGF0ZWxcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9tYXJrZXRpbmctc2Nob29sLWRpZ2l0YWwtbWFya2V0aW5nLWFuZC05RlM1VHN2YWIwUS1wSHlpSUpUNEx4bC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDY0LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvOWEyYWJmNmI2OGI1NDU1NGE2MGEzMmEyOTMyZmViY2IvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjElXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvbWFya2V0aW5nLXNjaG9vbC1kaWdpdGFsLW1hcmtldGluZy1hbmQtOUZTNVRzdmFiMFEtcEh5aUlKVDRMeGwuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPkluIGVwaXNvZGUgIzEzMDYsIHdlIGRpc2N1c3MgU3BvdGlmeVxcdTIwMTlzIGFjcXVpc2l0aW9uIG9mIFRoZSBSaW5nZXIuIFRoZSBwb2RjYXN0aW5nIGluZHVzdHJ5IGlzIGdyb3dpbmcgZXhwb25lbnRpYWxseSBhbmQgU3BvdGlmeSB3YW50ZWQgdG8gbWFrZSBhbiBhZ2dyZXNzaXZlIG1vdmUgdG93YXJkIGdyb3dpbmcgaXRzIG1hcmtldCBzaGFyZS4gVHVuZSBpbiB0byBoZWFyIHdoeSB0aGlzIHdhcyBhIHN1cGVyIHNtYXJ0IGRlY2lzaW9uIG9uIHRoZWlyIHBhcnQhPC9wPiA8cD5USU1FLVNUQU1QRUQgU0hPVyBOT1RFUzo8L3A+IDx1bD4gPGxpPlswMDoyNV0gVG9kYXlcXHUyMDE5cyB0b3BpYzogSG93IFNwb3RpZnkgQWNxdWlyZWQgVGhlIFJpbmdlci5cXHUwMGEwXFx1MDBhMDwvbGk+IDxsaT5bMDA6NDJdIFRoZSBzb2xpZCBmaW5hbmNpYWwgcmVzdWx0cyBmb3IgU3BvdGlmeSBpbiBRNCBvZiAyMDE5LjwvbGk+IDxsaT5bMDA6NTZdIEhvdyBTcG90aWZ5IHJlY29nbml6ZWQgZXhwb25lbnRpYWwgZ3Jvd3RoIGluIHBvZGNhc3QgaG91cnMgc3RyZWFtZWQuPC9saT4gPGxpPlswMToyNF0gUmVhbGl6aW5nIHRoYXQgdGhleSBuZWVkZWQgdG8gYWNxdWlyZSBhIGJpZyBwb2RjYXN0IHRvIGRvdWJsZSBkb3duIG9uIG9wcG9ydHVuaXRpZXMuXFx1MDBhMFxcdTAwYTBcXHUwMGEwPC9saT4gPGxpPlswMTo1M10gVGhlIGltcHJlc3NpdmUgcmV0ZW50aW9uIHJhdGVzIG9mIHRoZSBNYXJrZXRpbmcgU2Nob29sIHBvZGNhc3QuPC9saT4gPGxpPlswMjowOV0gV2h5IFNwb3RpZnlcXHUyMDE5cyBkZWNpc2lvbiBtYWtlcyBhIGxvdCBvZiBzZW5zZS5cXHUwMGEwPC9saT4gPGxpPlswMjozOV0gS2VlcCBpbiBtaW5kIHRoYXQgYWxsIGdvb2QgY2hhbm5lbHMgZXZlbnR1YWxseSBiZWNvbWUgY3Jvd2RlZC5cXHUwMGEwXFx1MDBhMDwvbGk+IDxsaT5bMDM6MDldIFNwb3RpZnlcXHUyMDE5cyBtYXJrZXQgc2hhcmUgYXJvdW5kIHBvZGNhc3RpbmcgYW5kIGhvdyB0aGV5XFx1MjAxOXJlIG1vcmUgYWdncmVzc2l2ZSB0aGFuIEFwcGxlLlxcdTAwYTA8L2xpPiA8bGk+WzAzOjQ4XSBUaGUgbnVtYmVyIG9mIGRvd25sb2FkcyBUaGUgUmluZ2VyIHBvZGNhc3QgaXMgZ2V0dGluZy5cXHUwMGEwPC9saT4gPGxpPlswNDowN10gU3RhcnQgY29tcGFyaW5nIHlvdXIgQXBwbGUgUG9kY2FzdCBhbmQgU3BvdGlmeSBhbmFseXRpY3MgZm9yIHlvdXIgcG9kY2FzdC5cXHUwMGEwPC9saT4gPGxpPlswNDo1MF0gSG93IG91ciBwb2RjYXN0cyBhbmQgRXJpY1xcdTIwMTlzIG93biBwb2RjYXN0IGFyZSBwZXJmb3JtaW5nLlxcdTAwYTBcXHUwMGEwPC9saT4gPGxpPlswNTo1Nl0gVGhlIHByb3Bvc2VkIHByaWNlIGZvciBUaGUgUmluZ2VyIHN0YXRlZCBieSBCaWxsIFNpbW1vbnM6ICQxMDAgbWlsbGlvbi5cXHUwMGEwPC9saT4gPGxpPlswNjoyNV0gVGhhdFxcdTIwMTlzIGl0IGZvciB0b2RheSE8L2xpPiA8bGk+WzA2OjI2XSBUbyBzdGF5IHVwZGF0ZWQgd2l0aCBldmVudHMgYW5kIGxlYXJuIG1vcmUgYWJvdXQgb3VyIG1hc3Rlcm1pbmQsIGdvIHRvIHRoZSA8YSBocmVmPVxcXCJodHRwczovL21hcmtldGluZ3NjaG9vbC5pby9ncm93dGgtYWNjZWxlcmF0b3ItbWFzdGVybWluZFxcXCI+IE1hcmtldGluZyBTY2hvb2w8L2E+IHNpdGUgZm9yIG1vcmUgaW5mb3JtYXRpb24uPC9saT4gPC91bD4gPHA+TGlua3MgTWVudGlvbmVkIGluIFRvZGF5XFx1MjAxOXMgRXBpc29kZTo8L3A+IDx1bD4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnNwb3RpZnkuY29tL1xcXCI+U3BvdGlmeTwvYT5cXHUwMGEwPC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LnRoZXJpbmdlci5jb21cXFwiPlRoZSBSaW5nZXI8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmFwcGxlLmNvbVxcXCI+QXBwbGU8L2E+PC9saT4gPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vZ3Jvd3RoZXZlcnl3aGVyZS5jb20vcG9kY2FzdC1wbGF5ZXIvXFxcIj5MZXZlbGluZyBVcCBQb2RjYXN0PC9hPjwvbGk+IDxsaT48YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL0JpbGxTaW1tb25zP3JlZl9zcmNcXFwiPkJpbGwgU2ltbW9ucyBvbiBUd2l0dGVyPC9hPjwvbGk+IDwvdWw+IDxwPkxlYXZlIFNvbWUgRmVlZGJhY2s6PC9wPiA8cD5cXHUwMGEwPC9wPiA8dWw+IDxsaT5XaGF0IHNob3VsZCB3ZSB0YWxrIGFib3V0IG5leHQ/XFx1MDBhMFBsZWFzZSBsZXQgdXMga25vdyBpbiB0aGUgY29tbWVudHMgYmVsb3c8L2xpPiA8L3VsPiA8dWw+IDxsaT5EaWQgeW91IGVuam95IHRoaXMgZXBpc29kZT9cXHUwMGEwSWYgc28sIHBsZWFzZSBsZWF2ZSBhIHNob3J0IHJldmlldy48L2xpPiA8L3VsPiA8cD5cXHUwMGEwPC9wPiA8cD5Db25uZWN0IHdpdGggVXM6XFx1MDBhMDwvcD4gPHVsPiA8bGkgc3R5bGU9XFxcImZvbnQtd2VpZ2h0OiA0MDA7XFxcIj48YSBocmVmPVxcXCJodHRwOi8vbmVpbHBhdGVsLmNvbVxcXCI+TmVpbHBhdGVsLmNvbTwvYT48L2xpPiA8bGkgc3R5bGU9XFxcImZvbnQtd2VpZ2h0OiA0MDA7XFxcIj48YSBocmVmPVxcXCJodHRwczovL3d3dy5xdWlja3Nwcm91dC5jb20vXFxcIj5RdWljayBTcHJvdXQ8L2E+XFx1MDBhMDwvbGk+IDxsaSBzdHlsZT1cXFwiZm9udC13ZWlnaHQ6IDQwMDtcXFwiPjxhIGhyZWY9XFxcImh0dHBzOi8vZ3Jvd3RoZXZlcnl3aGVyZS5jb20vXFxcIj5Hcm93dGggRXZlcnl3aGVyZTwvYT48L2xpPiA8bGkgc3R5bGU9XFxcImZvbnQtd2VpZ2h0OiA0MDA7XFxcIj48YSBocmVmPVxcXCJodHRwczovL3d3dy5zaW5nbGVncmFpbi5jb20vXFxcIj5TaW5nbGUgR3JhaW48L2E+PC9saT4gPGxpIHN0eWxlPVxcXCJmb250LXdlaWdodDogNDAwO1xcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9uZWlscGF0ZWxcXFwiPlR3aXR0ZXIgQG5laWxwYXRlbDwvYT5cXHUwMGEwPC9saT4gPGxpIHN0eWxlPVxcXCJmb250LXdlaWdodDogNDAwO1xcXCI+PGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9lcmljb3NpdVxcXCI+VHdpdHRlciBAZXJpY29zaXU8L2E+PC9saT4gPC91bD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTgyODEyMDAwODUwLFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJiZjA3MzI0MC05NjgwLTQyZTctODlhYS04MmEyMzM4ODQwZGNcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kYmQzZDQ3N2RmYzk0MTI4OTgyYjc5ZTgxNTIzMDFiNC9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDQzNCxcbiAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kYmQzZDQ3N2RmYzk0MTI4OTgyYjc5ZTgxNTIzMDFiNC8jZWRpdFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlwiLFxuICAgICAgXCJhZGRlZF9hdF9tc1wiOiAxNTgyODI0NjYxNzg4XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDMzNzIyMyxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI1YjhiOWQ1ODUxYWQ0NjM0ODEyNzk4ZDI1NTUzZDhkN1wiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL3d3dy52b3guY29tL3JlY29kZS1tZWRpYS1wb2RjYXN0P3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzViOGI5ZDU4NTFhZDQ2MzQ4MTI3OThkMjU1NTNkOGQ3L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3JlY29kZS1tZWRpYS1yZWNvZGUtaDl6UEtfMVVrZEItMWlQd1RhakxYbFMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiU3BvdGlmeSwgVGhlIFJpbmdlciBhbmQgdGhlIGZ1dHVyZSBvZiBwb2RjYXN0c1wiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCIyYWJhNDlkYzNmYzA0ZTNlOTZmZTg5Zjc5YTI2MTc5OFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcmVjb2RlLW1lZGlhLXJlY29kZS1oOXpQS18xVWtkQi0xaVB3VGFqTFhsUy4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIlJlY29kZSBNZWRpYVwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiUmVjb2RlXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcmVjb2RlLW1lZGlhLXJlY29kZS1lSFRWbmtpWHl1OS0xaVB3VGFqTFhsUy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDU1LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvMmFiYTQ5ZGMzZmMwNGUzZTk2ZmU4OWY3OWEyNjE3OTgvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcmVjb2RlLW1lZGlhLXJlY29kZS1lSFRWbmtpWHl1OS0xaVB3VGFqTFhsUy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+U3BvdGlmeSBpcyBidXlpbmcgQmlsbCBTaW1tb25zXFx1MjAxOSBzcG9ydHMgYW5kIHBvcCBjdWx0dXJlIHdlYnNpdGUgYW5kIHBvZGNhc3QgbmV0d29yaywgVGhlIFJpbmdlci4gSXRcXHUyMDE5cyBTcG90aWZ5XFx1MjAxOXMgZm91cnRoIHBvZGNhc3QgYWNxdWlzaXRpb24gaW4gYSB5ZWFyLiBSZWNvZGVcXHUyMDE5cyBQZXRlciBLYWZrYSAod2hvIGJyb2tlIHRoZSBzdG9yeSkgc2l0cyBkb3duIHdpdGggVm94IE1lZGlhIFBvZGNhc3QgTmV0d29yayBwcm9kdWNlciBhbmQgZm9ybWVyIFJpbmdlciBzdGFmZiBtZW1iZXIgWmFjaCBNYWNrIHRvIGRpc2N1c3Mgd2hhdCB0aGlzIGRlYWwgbWVhbnMgZm9yIFNwb3RpZnksIFRoZSBSaW5nZXIgYW5kIHRoZSBmdXR1cmUgb2YgcG9kY2FzdHMuPC9wPjxwPjxiciAvPjwvcD48cD48c3Ryb25nPkZlYXR1cmluZzwvc3Ryb25nPjogWmFjaCBNYWNrICg8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL3phY2h0aGVtYWNrXFxcIj5AemFjaHRoZW1hY2s8L2E+KSwgU2VuaW9yIFBvZGNhc3QgUHJvZHVjZXIgYXQgVm94IE1lZGlhIFBvZGNhc3QgTmV0d29yazwvcD48cD48c3Ryb25nPkhvc3Q8L3N0cm9uZz46IFBldGVyIEthZmthXFx1MDBhMCg8YSBocmVmPVxcXCJodHRwczovL3R3aXR0ZXIuY29tL3BrYWZrYVxcXCI+QHBrYWZrYTwvYT4pLCBTZW5pb3IgRWRpdG9yIGF0IFJlY29kZTwvcD48cD48c3Ryb25nPk1vcmUgdG8gZXhwbG9yZTwvc3Ryb25nPjogPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2QubGluay8xMDgwNDY3MTc0XFxcIj5TdWJzY3JpYmUgZm9yIGZyZWUgdG8gUmVjb2RlIE1lZGlhPC9hPiwgUGV0ZXIgS2Fma2EsIG9uZSBvZiB0aGUgbWVkaWEgaW5kdXN0cnkncyBtb3N0IGFjY2xhaW1lZCByZXBvcnRlcnMsIHRhbGtzIHRvIGJ1c2luZXNzIHRpdGFucywgam91cm5hbGlzdHMsIGNvbWVkaWFucywgYW5kIG1vcmUgdG8gZ2V0IHRoZWlyIHRha2Ugb24gdG9kYXkncyBtZWRpYSBsYW5kc2NhcGUuPC9wPjxwPjxzdHJvbmc+QWJvdXQgUmVjb2RlIGJ5IFZveDwvc3Ryb25nPjogUmVjb2RlIGJ5IFZveCBoZWxwcyB5b3UgdW5kZXJzdGFuZCBob3cgdGVjaCBpcyBjaGFuZ2luZyB0aGUgd29ybGQgXFx1MjAxNCBhbmQgY2hhbmdpbmcgdXMuPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vcG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlc1xcXCI+cG9kY2FzdGNob2ljZXMuY29tL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICAgIFwicHViX2RhdGVfbXNcIjogMTU4MTAyMTg3MDEzMixcbiAgICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiOTg0ZDg3ZmUtNDkxZC0xMWVhLWExNTAtYWIyODZiODZlNTYzXCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNWI4YjlkNTg1MWFkNDYzNDgxMjc5OGQyNTU1M2Q4ZDcvXCIsXG4gICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAxMjE2LFxuICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzViOGI5ZDU4NTFhZDQ2MzQ4MTI3OThkMjU1NTNkOGQ3LyNlZGl0XCJcbiAgICAgIH0sXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiXCIsXG4gICAgICBcImFkZGVkX2F0X21zXCI6IDE1ODEwMzIwNTk1MDhcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMzEyMjYyLFxuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcImVhYTgxZjdiYmEzNDRhZTc4YmNmMjI4Yjg4ZTEwMmE3XCIsXG4gICAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vYTE2ei5zaW1wbGVjYXN0LmNvbS9lcGlzb2Rlcy9hMTZ6LXBvZGNhc3QtaG93LXdoYXQtd2h5LTUwMHRoLWVwaXNvZGUtYmVoaW5kLXRoZS1zY2VuZXMtWGdPSzhhQlQ/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvZWFhODFmN2JiYTM0NGFlNzhiY2YyMjhiODhlMTAyYTcvXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYTE2ei1wb2RjYXN0LWFuZHJlZXNzZW4taG9yb3dpdHotc0JtUzdUXzg2cUgtSVdGMmFsRXItOWguMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiSG93IFdlIFBvZGNhc3RcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiN2MyMDM4OGQ4ZDdlNDVkNmFlNGI3NzBjMWZlMzZiNmZcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2ExNnotcG9kY2FzdC1hbmRyZWVzc2VuLWhvcm93aXR6LXNCbVM3VF84NnFILUlXRjJhbEVyLTloLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiYTE2eiBQb2RjYXN0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJBbmRyZWVzc2VuIEhvcm93aXR6XCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvYTE2ei1wb2RjYXN0LWFuZHJlZXNzZW4taG9yb3dpdHotM2JQRVltMDZYdVItSVdGMmFsRXItOWguMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA2MixcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzdjMjAzODhkOGQ3ZTQ1ZDZhZTRiNzcwYzFmZTM2YjZmL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4xJVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2ExNnotcG9kY2FzdC1hbmRyZWVzc2VuLWhvcm93aXR6LTNiUEVZbTA2WHVSLUlXRjJhbEVyLTloLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5cXFwiSGkgZXZlcnlvbmUsIHdlbGNvbWUgdG8gdGhlIGExNnogUG9kY2FzdC4uLlxcXCIgLi4uIGFuZCB3ZWxjb21lIHRvIG91ciA1MDB0aCBlcGlzb2RlLCB3aGVyZSwgZm9yIHRoZSBmaXJzdCB0aW1lLCB3ZSByZXZlYWwgYmVoaW5kLXRoZS1zY2VuZXMgZGV0YWlscyBhbmQgdGhlIGJhY2tzdG9yeSBvZiBob3cgd2UgYnVpbHQgdGhpcyBzaG93LCBhbmQgdGhlIGJyb2FkZXIgZWRpdG9yaWFsIG9wZXJhdGlvbi4gW1lvdSBjYW4gYWxzbyBsaXN0ZW4gdG8gZXBpc29kZSA0OTksIHdpdGggaGVhZCBvZiBtYXJrZXRpbmcgTWFyZ2l0IFdlbm5tYWNoZXJzLCBvbiBidWlsZGluZyB0aGUgYTE2eiBicmFuZCwgPGEgaHJlZj1cXFwiaHR0cHM6Ly9hMTZ6LmNvbS8yMDE5LzExLzIwL2JyYW5kLWJ1aWxkaW5nLWExNnotaWRlYXMtcGVvcGxlLW1hcmtldGluZy9cXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5oZXJlPC9hPi5dPC9wPjxwPldlJ3ZlIHRhbGtlZCBhIGxvdCBhYm91dCB0aGUgcG9kY2FzdGluZyBpbmR1c3RyeSwgYW5kIGV2ZW4gZG9uZSBwb2RjYXN0cyBhYm91dCBwb2RjYXN0aW5nLCBzbyBmb3IgdGhpcyBzcGVjaWFsIGVwaXNvZGUsIGVkaXRvci1pbi1jaGllZiBhbmQgc2hvd3J1bm5lciBTb25hbCBDaG9rc2hpIHJldmVhbHMgdGhlIGhvdywgd2hhdCwgYW5kIHdoeSBpbiBjb252ZXJzYXRpb24gd2l0aCBhMTZ6IGdlbmVyYWwgcGFydG5lciAoYW5kIGd1ZXN0LWhvc3QgZm9yIHRoaXMgc3BlY2lhbCBlcGlzb2RlKSA8YSBocmVmPVxcXCJodHRwczovL2ExNnouY29tLzIwMTkvMTAvMDEva25vd2FibGUtYXVkaW8tc3RhcnR1cHMvXFxcIiB0YXJnZXQ9XFxcIl9ibGFua1xcXCI+cG9kY2FzdGluZzwvYT4gZmFuIENvbm5pZSBDaGFuLiBXZSBhbHNvIGFuc3dlciBzb21lIGZyZXF1ZW50bHkgYXNrZWQgcXVlc3Rpb25zIHRoYXQgd2Ugb2Z0ZW4gZ2V0IChhbmQgcmVjZW50bHkgPGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS9zbWM5MC9zdGF0dXMvMTE5ODAyNjcyOTQyMTMyNDI4OVxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPmdvdDwvYT4gdmlhIFR3aXR0ZXIpLCBzdWNoIGFzOjwvcD48dWw+PGxpPmhvdyB3ZSBwcm9ncmFtIHBvZGNhc3RzPC9saT48bGk+d2hhdCdzIHRoZSBwcm9jZXNzLCBmcm9tIGlkZWFzIHRvIHB1Ymxpc2hpbmc8L2xpPjxsaT5kbyB3ZSBlZGl0IHRoZW0gYW5kIGhvdyE8L2xpPjxsaT5kbyBndWVzdHMgcHJlcCwgZG8gd2UgaGF2ZSBhIHNjcmlwdDwvbGk+PGxpPnRlY2huaWNhbCBzdGFjazwvbGk+PC91bD48cD4uLi5hbmQgbXVjaCBtb3JlLiBJbiBmYWN0LCBtdWNoIG9mIHRoZSBjb252ZXJzYXRpb24gZ29lcyBiZXlvbmQgdGhlIGExNnogUG9kY2FzdCBhbmQgdG93YXJkcyBTb25hbCdzIGJyb2FkZXIgcHJpbmNpcGxlcyBvZiAnZWRpdG9yaWFsIGNvbnRlbnQgbWFya2V0aW5nJywgd2hpY2ggaG9wZWZ1bGx5IGhlbHBzIHRob3NlIHRoaW5raW5nIGFib3V0IHRoZWlyIG93biBjb250ZW50IG9wZXJhdGlvbnMgYW5kIHBvZGNhc3RzLCB0b28uIEluY2x1ZGluZyB3aGVyZSBwb2RjYXN0aW5nIG1heSBiZSBnb2luZy48L3A+PHA+RmluYWxseSwgd2Ugc2hhcmUgc29tZSB1bmV4cGVjdGVkIG1vbWVudHMsIGFuZCBsZXNzb25zIGxlYXJuZWQgYWxvbmcgdGhlIHdheTsgb3VyIHBvc2l0aW9ucyBvbiBcXFwidGljc1xcXCIsIHN3ZWFyLXdvcmRzLCBhbmQgdGFsa2luZyB0b28gZmFzdDsgZmFpbGVkIGV4cGVyaW1lbnRzLCBhbmQgbmV3IGRpcmVjdGlvbnMuIEJ1dCBtb3N0IGltcG9ydGFudGx5LCB3ZSBzaGFyZSBzb21lIG9mIHRoZSBwZW9wbGUgYmVoaW5kIHRoZSBzY2VuZXMgd2hvIGhlbHAgbWFrZSB0aGUgYTE2eiBQb2RjYXN0IHdoYXQgaXQgd2FzLCBpcywgYW5kIGNhbiBiZS4uLiB3aXRoIHRoYW5rcyBtb3N0IG9mIGFsbCB0byAqeW91Kiwgb3VyIHdvbmRlcmZ1bCBmYW5zITwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc0ODM4MDAwMTY4LFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCIyMzA3YzQ0Yi04Yjg4LTQzNDgtYjRmNS0zZGVhYTIwNDEzNWVcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9lYWE4MWY3YmJhMzQ0YWU3OGJjZjIyOGI4OGUxMDJhNy9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDI4NjAsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvZWFhODFmN2JiYTM0NGFlNzhiY2YyMjhiODhlMTAyYTcvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU3NDkxNzI1NDQ5MFxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAzMTIyNTksXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiMWNhNWQzMzAzMTFkNDgwOGE0ZGJjNjY4NjgwZjU2NWJcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzFjYTVkMzMwMzExZDQ4MDhhNGRiYzY2ODY4MGY1NjViL1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiKkxpdmUqIGF0IFNwb3RpZnkgLSBQYXJ0IElJOiBXaHkgU3BvdGlmeSBpcyBkb2luZyBwb2RjYXN0cyBcXHUyMDE0IE91ciBpbnRlcnZpZXcgd2l0aCBNYXggQ3V0bGVyLCAgRm91bmRlciAmIE1EIG9mIHBvZGNhc3RzIGF0IFNwb3RpZnlcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJUaGUgQmVzdCBPbmUgWWV0XCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJOaWNrICYgSmFjayBTdHVkaW9zXCIsXG4gICAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvdGhlLWJlc3Qtb25lLXlldC1uaWNrLWphY2stc3R1ZGlvcy1LbElGT2EtZHBSVy1rbXgwWElaVEF5cy4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDczLFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvYzVjZTZjMDJjYmYxNDg2NDk2MjA2ODI5ZjdkNDJlOGUvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIwLjA1JVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtS2xJRk9hLWRwUlcta214MFhJWlRBeXMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjxwPlRoZSAybmQgaGFsZiBvZiBvdXIgU25hY2tzIHJlY29yZGluZyBsaXZlIGZyb20gU3BvdGlmeS4gV2Ugc2l0IGRvd24gd2l0aCBNYXggQ3V0bGVyLCB0aGUgRm91bmRlciAmYW1wOyBNRCBvZiBQYXJjYXN0IFN0dWRpb3MgYXQgU3BvdGlmeSBcXHUyMDE0IGhpcyBzdGFydHVwIHdhcyBhY3F1aXJlZCBieSBTcG90aWZ5IGVhcmxpZXIgdGhpcyB5ZWFyLiBXZVxcdTIwMTlyZSBhc2tpbmcgYWJvdXQgaG93IGhlIGZpcnN0IHBpdGNoZWQgaGlzIGNvbXBhbnksIHdoZXRoZXIgcG9kY2FzdHMgd2lsbCBmb2xsb3cgdGhlIE5ldGZsaXggc3RyYXRlZ3ksIGFuZCB3aGF0IGhpcyBmYXZvcml0ZSBwb2QgaXMuIEV2ZXIuPC9wPjxwPjxiciAvPjwvcD48cD48YnIgLz48L3A+PHA+IDwvcD48cD5MZWFybiBtb3JlIGFib3V0IHlvdXIgYWQgY2hvaWNlcy4gVmlzaXQgPGEgaHJlZj1cXFwiaHR0cHM6Ly9wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzXFxcIj5wb2RjYXN0Y2hvaWNlcy5jb20vYWRjaG9pY2VzPC9hPjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc0ODUyNDAwNjE5LFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJiMTIxMDk2Ni0xMGE4LTExZWEtYTViNS02ZmI2MTI0YTY0Y2RcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8xY2E1ZDMzMDMxMWQ0ODA4YTRkYmM2Njg2ODBmNTY1Yi9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDEwMjAsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMWNhNWQzMzAzMTFkNDgwOGE0ZGJjNjY4NjgwZjU2NWIvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU3NDkxNzE4ODg0NlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAzMTA2NjQsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiZGYxMWM5ZmRlODIzNDE0MGE3MDVjNGFlZGZmMjU2MWVcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS90Ym95cG9kP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wL2RmMTFjOWZkZTgyMzQxNDBhNzA1YzRhZWRmZjI1NjFlL1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtWXcyUTVkSXBLM0Eta214MFhJWlRBeXMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiKkxpdmUqIGF0IFNwb3RpZnkgLSBQYXJ0IEk6IEhvdyB3ZSBidWlsZCB0aGlzIChldmVyeSBkYXkpXCIsXG4gICAgICAgIFwicG9kY2FzdFwiOiB7XG4gICAgICAgICAgXCJpZFwiOiBcImM1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlXCIsXG4gICAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLVl3MlE1ZElwSzNBLWtteDBYSVpUQXlzLjE0MDB4MTQwMC5qcGdcIixcbiAgICAgICAgICBcInRpdGxlXCI6IFwiVGhlIEJlc3QgT25lIFlldFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiTmljayAmIEphY2sgU3R1ZGlvc1wiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3RoZS1iZXN0LW9uZS15ZXQtbmljay1qYWNrLXN0dWRpb3MtS2xJRk9hLWRwUlcta214MFhJWlRBeXMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA3MyxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jL2M1Y2U2YzAyY2JmMTQ4NjQ5NjIwNjgyOWY3ZDQyZThlL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMC4wNSVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy90aGUtYmVzdC1vbmUteWV0LW5pY2stamFjay1zdHVkaW9zLUtsSUZPYS1kcFJXLWtteDBYSVpUQXlzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5TcG90aWZ5IGludml0ZWQgdXMgdG8gdGhlaXIgTllDIG9mZmljZXMgdG8gcmVjb3JkIGEgbGl2ZSBwb2RjYXN0IFxcdTIwMTQgaXRcXHUyMDE5cyBhIHBvZGNhc3QgYWJvdXQgcG9kY2FzdHMgZm9yIG91ciBwb2RjYXN0IGxpc3RlbmluZyBTbmFja2Vycy4gV2UgaW50cm9kdWNlIHRvIHRoZSBTbmFja2VycyBob3cgd2UgZ290IGludG8gcG9kY2FzdGluZywgaG93IHdlIGJ1aWx0IHRoaXMgcG9kY2FzdCAoZXZlcnkgZGF5KSwgYW5kIHRoZSA1IGluZ3JlZGllbnRzIGZvciBhIHBvZGNhc3QgdGhhdCBwZW9wbGUgd2lsbCBhY3R1YWxseSBsaXN0ZW4gdG8uXFx1MDBhMDwvcD48cD4gPC9wPjxwPkxlYXJuIG1vcmUgYWJvdXQgeW91ciBhZCBjaG9pY2VzLiBWaXNpdCA8YSBocmVmPVxcXCJodHRwczovL3BvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXNcXFwiPnBvZGNhc3RjaG9pY2VzLmNvbS9hZGNob2ljZXM8L2E+PC9wPlwiLFxuICAgICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NzQ0MjA0MDA2MjIsXG4gICAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImIxNjMyZTNhLTBjY2ItMTFlYS04MmNlLTZmZDQ3ZDU5Zjg2ZVwiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL2RmMTFjOWZkZTgyMzQxNDBhNzA1YzRhZWRmZjI1NjFlL1wiLFxuICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMTIyNixcbiAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9kZjExYzlmZGU4MjM0MTQwYTcwNWM0YWVkZmYyNTYxZS8jZWRpdFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlwiLFxuICAgICAgXCJhZGRlZF9hdF9tc1wiOiAxNTc0NDQ1NDA2NjA5XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDMwOTczOCxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI3NTYyMDNlZWY1MWY0ODhmYTk5MGZkYTlkYWEzYzU0YlwiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL3Byb2R1Y3QtaHVudC1yYWRpby5zaW1wbGVjYXN0LmNvbS9lcGlzb2Rlcy90aGUtZnV0dXJlLW9mLXBvZGNhc3Rpbmctd2l0aC1hbmRyZXctbWFzb24tdHJEM3dVd2U/dXRtX3NvdXJjZT1saXN0ZW5ub3Rlcy5jb20mdXRtX2NhbXBhaWduPUxpc3RlbitOb3RlcyZ1dG1fbWVkaXVtPXdlYnNpdGVcIixcbiAgICAgICAgXCJhdWRpb1wiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lL3AvNzU2MjAzZWVmNTFmNDg4ZmE5OTBmZGE5ZGFhM2M1NGIvXCIsXG4gICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvcHJvZHVjdC1odW50LXJhZGlvLXByb2R1Y3QtaHVudC1HV1ZLamgtMGtncy00cVBOa2xyWkk5My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJUaGUgZnV0dXJlIG9mIHBvZGNhc3Rpbmcgd2l0aCBBbmRyZXcgTWFzb25cIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiNDA0MjY1ODJlM2NkNGRkMmJmOTMxZjg4MGU3Mzc0YWFcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3Byb2R1Y3QtaHVudC1yYWRpby1wcm9kdWN0LWh1bnQtR1dWS2poLTBrZ3MtNHFQTmtsclpJOTMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJQcm9kdWN0IEh1bnQgUmFkaW9cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIlByb2R1Y3QgSHVudFwiLFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL3Byb2R1Y3QtaHVudC1yYWRpby1wcm9kdWN0LWh1bnQtLVFPcHplYzY5WVYtNHFQTmtsclpJOTMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzQwNDI2NTgyZTNjZDRkZDJiZjkzMWY4ODBlNzM3NGFhL1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMSVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9wcm9kdWN0LWh1bnQtcmFkaW8tcHJvZHVjdC1odW50LS1RT3B6ZWM2OVlWLTRxUE5rbHJaSTkzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD5PbiB0aGlzIGVwaXNvZGUgQWJhZGVzaSB0YWxrcyB0byA8YSBocmVmPVxcXCJodHRwczovL3d3dy5wcm9kdWN0aHVudC5jb20vQGFuZHJld21hc29uXFxcIj5BbmRyZXcgTWFzb248L2E+LCBmb3VuZGVyIGFuZCBDRU8gb2YgPGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cucHJvZHVjdGh1bnQuY29tL3Bvc3RzL2Rlc2NyaXB0LXBvZGNhc3Qtc3R1ZGlvXFxcIj5EZXNjcmlwdDwvYT4uIEhlIHdhcyBmb3JtZXJseSBmb3VuZGVyIG9mIERldG91ciwgd2hpY2ggRGVzY3JpcHQgZW1lcmdlZCB3aXRoaW4gYmVmb3JlIGl0IHdhcyBzcHVuIG91dCBpbnRvIGl0cyBvd24gY29tcGFueSB3aGVuIEJvc2UgYm91Z2h0IHRoZSB0ZWNobm9sb2d5IGJlaGluZCBEZXRvdXIuIEFuZHJldyB3YXMgYWxzbyBmb3VuZGVyIG9mIEdyb3Vwb24uPC9wPjxwPkluIHRoaXMgZXBpc29kZSB0aGV5IHRhbGsgYWJvdXQuLi48L3A+PGgyPkRlc2NyaXB0XFx1MjAxOXMgb3JpZ2luIGFzIHBhcnQgb2YgRGV0b3VyLCBhbmQgaG93IHRvIGtub3cgd2hlbiBpdFxcdTIwMTlzIHRoZSByaWdodCB0aW1lIHRvIHBpdm90IGZyb20geW91ciBvcmlnaW5hbCBpZGVhPC9oMj48YmxvY2txdW90ZT48cD5cXHUyMDFjV2Ugd291bGQgaGF2ZSBiZWVuIG92ZXItaW52ZXN0aW5nIGluIERlc2NyaXB0IGlmIGFsbCB3ZSB3ZXJlIHVzaW5nIGl0IGZvciB3YXMgZm9yIERldG91ciwgYnV0IHdlIGtuZXcgdGhlcmUgd2FzIGEgcG90ZW50aWFsIGJ1c2luZXNzIHRoZXJlIGFuZCB3ZXJlIHRyZWF0aW5nIGl0IGxpa2UgYSBraW5kIG9mIGEgYmFja3VwIHBsYW4gd2hlbiB5b3VcXHUyMDE5cmUgcHJlLXByb2R1Y3QtbWFya2V0IGZpdCwgbGlrZSB3ZSB3ZXJlLiBZb3VcXHUyMDE5cmUgc3RheWluZyBvcGVuIHRvIGRpZmZlcmVudCBwYXRocy5cXHUyMDFkPC9wPjwvYmxvY2txdW90ZT48cD5EZXNjcmlwdCBhY3R1YWxseSBlbWVyZ2VkIGFzIGEgcGFydCBvZiBEZXRvdXIsIHRoZSBjb21wYW55IEFuZHJldyBmb3VuZGVkIHRvIGNyZWF0ZSBsb2NhbCBhdWRpbyB0b3Vycy4gVGhlIHRlYW0gYnVpbHQgdGhlbXNlbHZlcyBhIGJldHRlciB3b3JrZmxvdyBmb3IgZWRpdGluZyBhdWRpbyBhbmQgcmVhbGl6ZWQgdGhhdCB0aGUgaW50ZXJuYWwgcHJvZHVjdCB0aGV5IGhhZCBjcmVhdGVkIGNvdWxkIGJlIG11Y2ggbGFyZ2VyIHRoYW4gRGV0b3VyIGl0c2VsZi4gVGhleSBhbHNvIHJlY29nbml6ZWQgdGhhdCBhIGNvbmZsdWVuY2Ugb2YgZmFjdG9ycyBpbiB0ZWNoIHdlcmUgZ29pbmcgdG8gYWxsb3cgdGhlbSB0byBjcmVhdGUgdGhlIG5leHQgZ2VuZXJhdGlvbiBvZiBhdWRpbyBlZGl0aW5nIHRvb2xzLiBBbmRyZXcgZXhwbGFpbnMgaG93IGhlIHdlbnQgdGhyb3VnaCB0aGUgcHJvY2VzcyBvZiBmaWd1cmluZyBvdXQgd2hlbiB0byBcXHUyMDFjY3V0IGJhaXRcXHUyMDFkIG9uIERldG91ci4gSGUgcHJldmlvdXNseSBoYWQgcGl2b3RlZCBUaGUgUG9pbnQgaW50byBHcm91cG9uLCBzbyBoZSBoYXMgc29tZSBpbnNpZ2h0ZnVsIHRoaW5ncyB0byBzYXkgYWJvdXQgd2hlbiBhbmQgaG93IHRvIHBpdm90LjwvcD48YmxvY2txdW90ZT48cD5cXHUyMDFjV2UgdHJpZWQgZXZlcnkgbGFzdCBwb3NzaWJsZSBhcHByb2FjaCB0aGF0IHdlIGNvdWxkIHRoaW5rIG9mIGFuZCBldmVudHVhbGx5IGl0IHdhcyBsaWtlLCBpdFxcdTIwMTlzIG5vdCBzdXBwb3NlZCB0byBiZSB0aGlzIGhhcmQuIEhhdmluZyBiZWVuIHRocm91Z2ggdGhpcyBiZWZvcmUsIGl0IGZlbHQgbGlrZSB3ZSB3ZXJlIGRvaW5nIHRoZSBtb3N0IGVsYWJvcmF0ZSB0aGluZ3MgdG8gbWFya2V0IHRoZSBwcm9kdWN0IGFuZCByZWFjaCBjdXN0b21lcnMsIGFuZCBhdCBzb21lIHBvaW50IGl0IGp1c3QgY2xpY2tlZCB0aGF0IGl0XFx1MjAxOXMgbm90IHN1cHBvc2VkIHRvIGJlIHRoaXMgaGFyZCBhbmQgd2Ugc2hvdWxkIG1vdmUgb24uXFx1MjAxZDwvcD48L2Jsb2NrcXVvdGU+PGgyPkFuZHJld1xcdTIwMTlzIGFkdmljZSBvbiBtYW5hZ2luZyBwZW9wbGUgYW5kIHNjYWxpbmcgYSBjb21wYW55PC9oMj48YmxvY2txdW90ZT48cD5cXHUyMDFjSW4gYSBsb3Qgb2YgY29tcGFuaWVzIHRoZSB3YXkgdGhhdCBwZW9wbGUgZ2V0IGludG8gbWFuYWdlbWVudCBpcyB0aGV5J2xsIGJlIGluZGl2aWR1YWwgY29udHJpYnV0b3JzIHdobyBoYXZlIGdyZWF0IGlkZWFzIGFuZCBub2JvZHkgd2FudHMgdG8gbGlzdGVuIHRvIHRoZWlyIGlkZWFzIGJlY2F1c2UgaXQncyB0aGUgcGVvcGxlIGluIG1hbmFnZW1lbnQgdGhhdCBnZXQgdG8gaGF2ZSB0aG9zZSBjb252ZXJzYXRpb25zLiBTbyBwZW9wbGUgc2F5ICdva2F5LCBJIGd1ZXNzIEknbGwgYmVjb21lIGEgbWFuYWdlcicgYW5kIHRoZW4gdGhleSBiZWNvbWUgYSBtYW5hZ2VyIGZvciBjb21wbGV0ZWx5IHRoZSB3cm9uZyByZWFzb25zIFxcdTIwMTQgbm90IGJlY2F1c2UgdGhleSBjYXJlIGFib3V0IHBlb3BsZSBvciB1bmxvY2tpbmcgdGhlIGJlc3QgcG9zc2libGUgaW5jYXJuYXRpb24gb2YgdGhlaXIgdGVhbXMsIGJ1dCBiZWNhdXNlIHRoZXkgY2FyZSBhYm91dCBoYXZpbmcgdGhlaXIgaWRlYXMgbGlzdGVuZWQgdG8uXFx1MjAxZDwvcD48L2Jsb2NrcXVvdGU+PHA+SGUgZ2l2ZXMgYSBydW5kb3duIG9mIHRoZSBoaXN0b3J5IG9mIHRoZSBjb21wYW55IGFuZCB3aGVyZSB0aGV5IGFyZSBhdCBub3csIGFmdGVyIGhhdmluZyByYWlzZWQgYSBsYXJnZSBTZXJpZXMgQSByb3VuZCBhbmQgbWFkZSB0aGUgYWNxdWlzaXRpb24gb2YgTHlyZWJpcmQuIEhlIHRhbGtzIGFib3V0IHdoYXQgdGhlIG5leHQgc3RhZ2Ugb2YgZ3Jvd3RoIHdpbGwgaG9sZCBmb3IgdGhlbSwgYW5kIGhvdyBoZSBpcyBtYW5hZ2luZyB0aGUgc2NhbGluZyBwcm9jZXNzIGJ5IHB1dHRpbmcgaW50byBwbGFjZSBwcm9jZXNzZXMgYW5kIHByb3RvY29scyB0aGF0IHdpbGwgcHJvdmlkZSBzdHJ1Y3R1cmUgZm9yIHRoZSBjb21wYW55IGFzIGl0IGdyb3dzLiBIZSBhbHNvIHRhbGtzIGFib3V0IHRoZSBpbXBvcnRhbmNlIG9mIGRlbGVnYXRpbmcgdGhlIHdvcmsgdGhhdCB0aGUgZm91bmRlciBoYXMgYmVlbiBkb2luZyBpbiBhIGdyb3dpbmcgY29tcGFueS48L3A+PGgyPlBlcnNvbmFsIGRldmVsb3BtZW50IGFzIGEgbGVhZGVyIGFuZCBoZWxwaW5nIHlvdXIgdGVhbSBncm93PC9oMj48cD5BbmRyZXcgZXhwbGFpbnMgd2hhdCBhIHR5cGljYWwgZGF5IGxvb2tzIGxpa2UgZm9yIHRoZSB0ZWFtIGF0IERlc2NyaXB0LiBIZSBleHBsYWlucyBob3cgdGhleSBtYW5hZ2UgaW50ZXJuYWwgdG9vbHMgYW5kIGhvdyBoZSB0cmllcyB0byBjcmVhdGUgYW4gZW52aXJvbm1lbnQgd2hlcmUgZmVlZGJhY2sgY2FuIGZsb3cgZnJlZWx5IGFtb25nIHRoZSB0ZWFtIG1lbWJlcnMuIEhlIHRhbGtzIGFib3V0IHNvbWUgb2YgdGhlIGJlc3Qgd2F5cyB0byBncm93IGFzIGEgbGVhZGVyLCBpbmNsdWRpbmcgc29tZSBvZiB0aGUgZXZlbnRzIHRoYXQgaGUgYXR0ZW5kcyBhbmQgd2h5IGhlIHJlYWRzIGEgbG90LiBIZSBhbHNvIHNheXMgdGhhdCB0aGV5IGhhdmUgY3JlYXRlZCBhbiBpbnRlcm5hbCBwb2RjYXN0IGZvciB0aGUgdGVhbSwgYSBjb29sIGlkZWEgd2hpY2ggeW91IG1pZ2h0IGV4cGVjdCBmcm9tIHRoZSBjb21wYW55IGdpdmVuIHdoYXQgRGVzY3JpcHQgaXMgdHlwaWNhbGx5IHVzZWQgZm9yITwvcD48cD5BbmRyZXcgYWxzbyB0ZWxscyB1cyBhYm91dCBvbmUgb2YgaGlzIGZhdm9yaXRlIHByb2R1Y3RzIHRoYXQgaGUgdXNlcyB0byBidWlsZCB0b29scyBmb3IgdGhlIHRlYW0uPC9wPjxwPldlXFx1MjAxOWxsIGJlIGJhY2sgbmV4dCB3ZWVrIHNvIGJlIHN1cmUgdG8gc3Vic2NyaWJlIG9uIDxhIGhyZWY9XFxcImh0dHBzOi8vaXR1bmVzLmFwcGxlLmNvbS9wb2RjYXN0L3Byb2R1Y3QtaHVudC1yYWRpby9pZDg2MjcxNDg4M1xcXCI+QXBwbGUgUG9kY2FzdHM8L2E+LCA8YSBocmVmPVxcXCJodHRwczovL3d3dy5nb29nbGUuY29tL3BvZGNhc3RzP2ZlZWQ9YUhSMGNITTZMeTl5YzNNdWMybHRjR3hsWTJGemRDNWpiMjB2Y0c5a1kyRnpkSE12TmpJMk1TOXljM00lM0RcXFwiPkdvb2dsZSBQb2RjYXN0czwvYT4sIDxhIGhyZWY9XFxcImh0dHBzOi8vb3Blbi5zcG90aWZ5LmNvbS9zaG93LzRBazZIcGJWa0xLR2FjWTNFMEdITDg/c2k9Tjh4WENmc2NRUGFwUFNGSUYyclAzd1xcXCI+U3BvdGlmeTwvYT4sIDxhIGhyZWY9XFxcImh0dHBzOi8vd3d3LmJyZWFrZXIuYXVkaW8vcHJvZHVjdC1odW50XFxcIj5CcmVha2VyPC9hPiwgPGEgaHJlZj1cXFwiaHR0cHM6Ly9vdmVyY2FzdC5mbS9pdHVuZXM4NjI3MTQ4ODMvcHJvZHVjdC1odW50LXJhZGlvXFxcIj5PdmVyY2FzdDwvYT4sIG9yIHdoZXJldmVyIHlvdSBsaXN0ZW4gdG8geW91ciBmYXZvcml0ZSBwb2RjYXN0cy4gXFx1ZDgzZFxcdWRlMzg8L3A+PGgzPkNvbXBhbmllcyBhbmQgUHJvZHVjdHMgTWVudGlvbmVkIEluIFRoaXMgRXBpc29kZTwvaDM+PHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly93d3cucHJvZHVjdGh1bnQuY29tL3Bvc3RzL3JldG9vbC0yXFxcIj5SZXRvb2w8L2E+IFxcdTIwMTQgQ3VzdG9taXplZCBpbnRlcm5hbCB0b29scyBpbiBtaW51dGVzLjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTc0MjI2MDA5MDIwLFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCIzMGI0MTY5Zi1jMTE3LTQ1MzAtYjQxNi1lMDU3ZTE2YzNmMzBcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS83NTYyMDNlZWY1MWY0ODhmYTk5MGZkYTlkYWEzYzU0Yi9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE4MTYsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNzU2MjAzZWVmNTFmNDg4ZmE5OTBmZGE5ZGFhM2M1NGIvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU3NDI3MzY0OTYwMlxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAyOTQ2MjAsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiNDQwMTdjZDQzOGEyNDEzOWE5MTNhM2UyODhhNTE4ZmVcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cDovL2RlbWFuZGdlbnJhZGlvLmNvbS9lLzEyOS1ob3ctdG8tYnVpbGQteW91ci1icmFuZC13aXRoLXBvZGNhc3RpbmcvP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzQ0MDE3Y2Q0MzhhMjQxMzlhOTEzYTNlMjg4YTUxOGZlL1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2RlbWFuZGdlbi1yYWRpby1iZG8tZGlnaXRhbC1sbGMtdWZ4RndUQVpEcXAtb1ZCeU8zdHVGd1IuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiIzEyOSBIb3cgdG8gQnVpbGQgeW91ciBCcmFuZCB3aXRoIFBvZGNhc3RpbmdcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiZjQ0NmEwZWFhYzJlNDgxOTkxZTM2NDY3ZTRhNGY5NmZcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2RlbWFuZGdlbi1yYWRpby1iZG8tZGlnaXRhbC1sbGMtdWZ4RndUQVpEcXAtb1ZCeU8zdHVGd1IuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJEZW1hbmRHZW4gUmFkaW9cIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkJETyBEaWdpdGFsLCBMTENcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9kZW1hbmRnZW4tcmFkaW8tYmRvLWRpZ2l0YWwtbGxjLVE4TFBGdXF4WHdOLW9WQnlPM3R1RndSLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogMzcsXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy9mNDQ2YTBlYWFjMmU0ODE5OTFlMzY0NjdlNGE0Zjk2Zi9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjIuNSVcIlxuICAgICAgICB9LFxuICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9kZW1hbmRnZW4tcmFkaW8tYmRvLWRpZ2l0YWwtbGxjLVE4TFBGdXF4WHdOLW9WQnlPM3R1RndSLjMwMHgzMDAuanBnXCIsXG4gICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCI8cD48L3A+XFxuXFxuPHA+Sm9yZGFuIFBhcmlzIGlzIGEgMjEteWVhci1vbGQgZW50cmVwcmVuZXVyIHdobyBydW5zIGEgd2lsZGx5IHN1Y2Nlc3NmdWwgcG9kY2FzdC4gSW4gdGhpcyBlcGlzb2RlLCBoZSBzaGFyZXMgaG93IGFuZCB3aHkgaGUgc3RhcnRlZCBoaXMgcG9kY2FzdCBhbmQgaG93IHBvZGNhc3RpbmcgcHJvcGVsbGVkIHRoZSBncm93dGggb2YgaGlzIGJ1c2luZXNzIGFuZCBwZXJzb25hbCBicmFuZC4gVHVuZSBpbiBhcyBKb3JkYW4gc2hhcmVzIGhvdyBoZSByZW1haW5zIHNvIGRyaXZlbiBhbmQgYWNjb21wbGlzaGVkIGF0IGFuIGVhcmx5IGFnZSwgd2hhdCBsZXNzb25zIGhlXFx1MjAxOXMgbGVhcm5lZCBmcm9tIHN0YXJ0aW5nIGhpcyBwb2RjYXN0LCBhbmQgaG93IHlvdSBjYW4gYmVuZWZpdCBmcm9tIHN0YXJ0aW5nIHlvdXIgb3duIHBvZGNhc3QuPC9wPlwiLFxuICAgICAgICBcInB1Yl9kYXRlX21zXCI6IDE1NjkxNDY0MDAxMjMsXG4gICAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcImRlbWFuZGdlbi5wb2RiZWFuLmNvbS8xMjktaG93LXRvLWJ1aWxkLXlvdXItYnJhbmQtd2l0aC1wb2RjYXN0aW5nLWIzNjE5MTg5YWJjNzZlMWQ4NTdhMzVkNWZmMzA2MmQ5XCIsXG4gICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvNDQwMTdjZDQzOGEyNDEzOWE5MTNhM2UyODhhNTE4ZmUvXCIsXG4gICAgICAgIFwiYXVkaW9fbGVuZ3RoX3NlY1wiOiAyMzI5LFxuICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjogZmFsc2UsXG4gICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiBmYWxzZSxcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc19lZGl0X3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzQ0MDE3Y2Q0MzhhMjQxMzlhOTEzYTNlMjg4YTUxOGZlLyNlZGl0XCJcbiAgICAgIH0sXG4gICAgICBcInR5cGVcIjogXCJlcGlzb2RlXCIsXG4gICAgICBcIm5vdGVzXCI6IFwiXCIsXG4gICAgICBcImFkZGVkX2F0X21zXCI6IDE1NzAxNzc1NjQwNTBcbiAgICB9LFxuICAgIHtcbiAgICAgIFwiaWRcIjogMjkzODA5LFxuICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgXCJpZFwiOiBcIjlkZjIzYTQwNTNjOTQwZmE4NzYyY2M5NGQwOGM0ODM2XCIsXG4gICAgICAgIFwibGlua1wiOiBcImh0dHBzOi8vaGJyLm9yZy9wb2RjYXN0LzIwMTkvMTAvY2FuLWdpbWxldC10dXJuLWEtcG9kY2FzdC1uZXR3b3JrLWludG8tYS1kaXNydXB0aXZlLXBsYXRmb3JtP3V0bV9zb3VyY2U9bGlzdGVubm90ZXMuY29tJnV0bV9jYW1wYWlnbj1MaXN0ZW4rTm90ZXMmdXRtX21lZGl1bT13ZWJzaXRlXCIsXG4gICAgICAgIFwiYXVkaW9cIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS9wLzlkZjIzYTQwNTNjOTQwZmE4NzYyY2M5NGQwOGM0ODM2L1wiLFxuICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2NvbGQtY2FsbC1oYnItcHJlc2VudHMtYnJpYW4ta2VubnktVWVwdlBoTm1NRlYtc0Mya2ZYN2dNMEQuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiQ2FuIEdpbWxldCBUdXJuIGEgUG9kY2FzdCBOZXR3b3JrIEludG8gYSBEaXNydXB0aXZlIFBsYXRmb3JtP1wiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCI4NDFlY2E3YTI1YzY0NDIwYjJiZDBiNTM2ZDM1MTA4ZFwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY29sZC1jYWxsLWhici1wcmVzZW50cy1icmlhbi1rZW5ueS1VZXB2UGhObU1GVi1zQzJrZlg3Z00wRC4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkNvbGQgQ2FsbFwiLFxuICAgICAgICAgIFwicHVibGlzaGVyXCI6IFwiSEJSIFByZXNlbnRzIC8gQnJpYW4gS2VubnlcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jb2xkLWNhbGwtaGJyLXByZXNlbnRzLWJyaWFuLWtlbm55LWVnUnRLMmIxT2RvLXNDMmtmWDdnTTBELjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjogNDksXG4gICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vYy84NDFlY2E3YTI1YzY0NDIwYjJiZDBiNTM2ZDM1MTA4ZC9cIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiBcIjElXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY29sZC1jYWxsLWhici1wcmVzZW50cy1icmlhbi1rZW5ueS1lZ1J0SzJiMU9kby1zQzJrZlg3Z00wRC4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+SGFydmFyZCBCdXNpbmVzcyBTY2hvb2wgcHJvZmVzc29ycyA8c3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lmhicy5lZHUvZmFjdWx0eS9QYWdlcy9wcm9maWxlLmFzcHg/ZmFjSWQ9NjQ0NlxcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkpvaG4gRGVpZ2h0b248L2E+PC9zdHJvbmc+IGFuZCA8c3Ryb25nPjxhIGhyZWY9XFxcImh0dHBzOi8vd3d3Lmhicy5lZHUvZmFjdWx0eS9QYWdlcy9wcm9maWxlLmFzcHg/ZmFjSWQ9NjUzNlxcXCIgcmVsPVxcXCJub29wZW5lclxcXCIgdGFyZ2V0PVxcXCJfYmxhbmtcXFwiPkplZmZyZXkgUmF5cG9ydDwvYT48L3N0cm9uZz4gZGlzY3VzcyB0aGVpciBjYXNlLCAmIzgyMjA7PGEgaHJlZj1cXFwiaHR0cHM6Ly9zdG9yZS5oYnIub3JnL3Byb2R1Y3QvZ2ltbGV0LW1lZGlhLWEtcG9kY2FzdGluZy1zdGFydHVwLzkxODQxMz9za3U9OTE4NDEzLVBERi1FTkdcXFwiIHJlbD1cXFwibm9vcGVuZXJcXFwiIHRhcmdldD1cXFwiX2JsYW5rXFxcIj5HaW1sZXQgTWVkaWE6IEEgUG9kY2FzdGluZyBTdGFydHVwPC9hPiwmIzgyMjE7IGFuZCBob3cgdHdvIGZvcm1lciBwdWJsaWMgcmFkaW8gcHJvZHVjZXJzIGxhdW5jaCBhIHBvZGNhc3QgbmV0d29yaywgZW50ZXJpbmcgdGhlIGxhc3QgZnJvbnRpZXIgb2YgZGlnaXRhbCBtZWRpYS4gQ2FuIHRoZXkgdHVybiBhIGNvbnRlbnQgc3VwcGxpZXIgaW50byBhIGRpc3J1cHRpdmUgcGxhdGZvcm0/PC9wPlwiLFxuICAgICAgICBcInB1Yl9kYXRlX21zXCI6IDE1Njk5NDg0NzYwNzUsXG4gICAgICAgIFwiZ3VpZF9mcm9tX3Jzc1wiOiBcInRhZzphdWRpby5oYnIub3JnLDIwMTYtMDktMTY6Y29sZC1jYWxsLjAxMDRcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS85ZGYyM2E0MDUzYzk0MGZhODc2MmNjOTRkMDhjNDgzNi9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDE1ODQsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvOWRmMjNhNDA1M2M5NDBmYTg3NjJjYzk0ZDA4YzQ4MzYvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU2OTk3MTg0NDM5MFxuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiAyNzQyMTIsXG4gICAgICBcImRhdGFcIjoge1xuICAgICAgICBcImlkXCI6IFwiMDBkOGM0M2RmM2Y5NGViN2I0MDkxMzVmY2JhNmEwODNcIixcbiAgICAgICAgXCJsaW5rXCI6IFwiaHR0cHM6Ly9nbGl0Y2guY29tL2N1bHR1cmUvZnVuY3Rpb24tZXBpc29kZS02Lz91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8wMGQ4YzQzZGYzZjk0ZWI3YjQwOTEzNWZjYmE2YTA4My9cIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9mdW5jdGlvbi13aXRoLWFuaWwvdGhlLXdpbGQtd29ybGQtb2YtcG9kY2FzdC1hZHMtLU9FSmYyUlVJa1gtaWd5Uy1CNXIyNEEuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICBcInRpdGxlXCI6IFwiVGhlIFdpbGQgV29ybGQgb2YgUG9kY2FzdCBBZHNcIixcbiAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICBcImlkXCI6IFwiM2I3YzZjODUxZWMxNGY0MGJiMDYyYjkxODk0MmFhMTVcIixcbiAgICAgICAgICBcImltYWdlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Z1bmN0aW9uLXdpdGgtYW5pbC1kYXNoLXZveC1tZWRpYS0zRGpOb0FJR3RWXy1wZnFJekdENG9kbi4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgXCJ0aXRsZVwiOiBcIkZ1bmN0aW9uIHdpdGggQW5pbCBEYXNoXCIsXG4gICAgICAgICAgXCJwdWJsaXNoZXJcIjogXCJWb3ggTWVkaWFcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9mdW5jdGlvbi13aXRoLWFuaWwtZGFzaC12b3gtbWVkaWEteVlQXzhLUUZrMDYtcGZxSXpHRDRvZG4uMzAweDMwMC5qcGdcIixcbiAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiA0NCxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9jLzNiN2M2Yzg1MWVjMTRmNDBiYjA2MmI5MTg5NDJhYTE1L1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlX2dsb2JhbF9yYW5rXCI6IFwiMS41JVwiXG4gICAgICAgIH0sXG4gICAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2Z1bmN0aW9uLXdpdGgtYW5pbC90aGUtd2lsZC13b3JsZC1vZi1wb2RjYXN0LWFkcy1SajZ1M2J0TnJtcS1pZ3lTLUI1cjI0QS4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiPHA+U3F1YXJlc3BhY2UuIE1haWxjaGltcC4gQ2FzcGVyLiBCbHVlIEFwcm9uLiBJZiB5b3UncmUgYSByZWd1bGFyIHBvZGNhc3QgbGlzdGVuZXIsIHRoZW4gdGhlcmUncyBubyBkb3VidCB5b3UndmUgaGVhcmQgYWRzIGZyb20gdGhlc2UgY29tcGFuaWVzLCBhbW9uZyBtYW55IG90aGVycy4gUG9kY2FzdGluZydzIHJlYWNoIGhhcyBncm93biBleHBvbmVudGlhbGx5IG92ZXIgdGhlIHBhc3QgZmV3IHllYXJzLCBhbmQgY29tcGFuaWVzIGxpa2UgdGhlc2UgYXJlIHNwZW5kaW5nIG1pbGxpb25zIG9mIGRvbGxhcnMgdG8gcmVhY2ggbGlzdGVuZXJzIHdoZW5ldmVyLCB3aGVyZXZlciBhbmQgaG93ZXZlciB0aGV5IHR1bmUgaW4uIEJ1dCBpcyB0aGlzIHRydWx5IGVmZmVjdGl2ZT8gV2hhdCB0eXBlIG9mIGFkcyB3b3JrIGJlc3Q/IEFuZCBpZiB5b3UncmUgbm90IGEgcG9kY2FzdCBmcm9tIGEgYmlnIG1lZGlhIG9yZ2FuaXphdGlvbiwgaG93IGNhblxcdTAwYTA8ZW0+eW91PC9lbT5cXHUwMGEwY2FuIGdldCBhIHBpZWNlIG9mIHRoZSBwaWU/PC9wPjxwPlRoaXMgd2VlayBvbiBGdW5jdGlvbiwgd2UgZXhhbWluZSB0aGUgd29ybGQgb2YgcG9kY2FzdCBhZHZlcnRpc2luZy4gQW5pbCBzaXRzIGRvd24gd2l0aFxcdTAwYTA8c3Ryb25nPkZyYW5jZXNjbyBCYXNjaGllcmk8L3N0cm9uZz4sIHByZXNpZGVudCBvZiBWb3huZXN0LCBhbmQgdGFsa3MgYWJvdXQgc29tZSBvZiB0aGUgdHJlbmRzIGFuZCB0ZWNobm9sb2d5IGJlaGluZCBwb2RjYXN0IGFkcy4gV2UgYWxzbyBoZWFyIGZyb20gTmV3IFlvcmsgQ2l0eSBwb2RjYXN0aW5nIGR1b1xcdTAwYTA8c3Ryb25nPkphZGUgKyBYRDwvc3Ryb25nPlxcdTAwYTBhbmQgcHVsbCBiYWNrIHRoZSBjdXJ0YWluIG9uIGFkdmVydGlzaW5nIGFuZCBtb25ldGl6YXRpb24gZnJvbSBhbiBpbmRlcGVuZGVudCBtZWRpYSBwZXJzcGVjdGl2ZS48L3A+PHA+SG93IGRvZXMgcG9kY2FzdCBhZHZlcnRpc2luZyBzdGF5IGFoZWFkIG9mIHRlY2ggbGlrZSBhZGJsb2NrZXJzPyBXaGF0IGhhcHBlbnMgd2hlbiBhbiBhZCBpcyBhdXRvbWF0aWNhbGx5IHBsYWNlZCBpbiB5b3VyIHBvZGNhc3QgYnkgdGhlIG5ldHdvcmsgdGhhdCBnb2VzIGFnYWluc3QgYm90aCB0aGUgaG9zdCBhbmQgdGhlIGF1ZGllbmNlPyBZb3UnbGwgZmluZCBvdXQgdGhlIGFuc3dlcnMgdG8gYWxsIHRoaXMgYW5kIG1vcmUgb24gdGhpcyB3ZWVrJ3MgZXBpc29kZSE8L3A+PHA+QnV0IGZpcnN0LCBhIHdvcmQgZnJvbSBvdXIgc3BvbnNvcnMuLi4uPC9wPjxwPjxzdHJvbmc+R3Vlc3RzPC9zdHJvbmc+PC9wPjx1bD5cXG48bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly90d2l0dGVyLmNvbS90aGViYXNrXFxcIj5GcmFuY2VzY28gQmFzY2hpZXJpPC9hPjwvbGk+XFxuPGxpPjxhIGhyZWY9XFxcImh0dHBzOi8vdHdpdHRlci5jb20vSmFkZUFuZFhEXFxcIj5KYWRlICsgWEQ8L2E+PC9saT5cXG48L3VsPjxwPjwvcD48cD48c3Ryb25nPk90aGVyIExpbmtzPC9zdHJvbmc+PC9wPjx1bD5cXG48bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly92b3huZXN0LmNvbS9cXFwiPlZveG5lc3Q8L2E+PC9saT5cXG48bGk+PGEgaHJlZj1cXFwiaHR0cHM6Ly9qYWRlYW5keGQuY29tL1xcXCI+SmFkZSArIFhEJ3MgV2Vic2l0ZTwvYT48L2xpPlxcbjxsaT5cXG48YSBocmVmPVxcXCJodHRwczovL2Jsb2cudm94bmVzdC5jb20vZHluYW1pYy1hZC1pbnNlcnRpb24td2hhdC1pdC1pcy13aHktdXNlLWl0L1xcXCI+PGVtPkR5bmFtaWMgQWQgSW5zZXJ0aW9uIFxcdTIwMTQgV2hhdCBpdCBpcyBhbmQgV2h5IFlvdSBTaG91bGQgQmUgVXRpbGlzaW5nIEl0PC9lbT48L2E+XFx1MDBhMChWb3huZXN0KTwvbGk+XFxuPGxpPlxcbjxhIGhyZWY9XFxcImh0dHBzOi8vc3RyYXRlY2hlcnkuY29tLzIwMTcvcG9kY2FzdHMtYW5hbHl0aWNzLWFuZC1jZW50cmFsaXphdGlvbi9cXFwiPjxlbT5Qb2RjYXN0cywgQW5hbHl0aWNzLCBhbmQgQ2VudHJhbGl6YXRpb248L2VtPjwvYT5cXHUwMGEwKFN0cmF0ZWNoZXJ5KTwvbGk+XFxuPGxpPlxcbjxhIGhyZWY9XFxcImh0dHBzOi8vZml2ZXRoaXJ0eWVpZ2h0LmNvbS9mZWF0dXJlcy9idXQtZmlyc3QtYS13b3JkLWZyb20tMTAwLXBvZGNhc3Qtc3BvbnNvcnMvXFxcIj48ZW0+QnV0IEZpcnN0LCBBIFdvcmQgRnJvbSAxMDAgUG9kY2FzdHMnIFNwb25zb3JzPC9lbT48L2E+XFx1MDBhMChGaXZlVGhpcnR5RWlnaHQpPC9saT5cXG48L3VsPjxwPjwvcD5cIixcbiAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiAxNTQzODM0ODAwMDE3LFxuICAgICAgICBcImd1aWRfZnJvbV9yc3NcIjogXCJnaWQ6Ly9hcnQxOS1lcGlzb2RlLWxvY2F0b3IvVjAvM05CMlF2NWR1UjlRNURHc3duR2E3UjMxdG8zTTYwZ21pWGhQRDZPdTFGa1wiLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9lLzAwZDhjNDNkZjNmOTRlYjdiNDA5MTM1ZmNiYTZhMDgzL1wiLFxuICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjogMzMzOCxcbiAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IGZhbHNlLFxuICAgICAgICBcIm1heWJlX2F1ZGlvX2ludmFsaWRcIjogZmFsc2UsXG4gICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS8wMGQ4YzQzZGYzZjk0ZWI3YjQwOTEzNWZjYmE2YTA4My8jZWRpdFwiXG4gICAgICB9LFxuICAgICAgXCJ0eXBlXCI6IFwiZXBpc29kZVwiLFxuICAgICAgXCJub3Rlc1wiOiBcIlwiLFxuICAgICAgXCJhZGRlZF9hdF9tc1wiOiAxNTY1NDYwMDQ3MzY3XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IDI3MDU4NyxcbiAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgIFwiaWRcIjogXCI4OTc2NWZhMmJlZTI0NjAzYTkzYjQwOTg4MzBjNGVmYVwiLFxuICAgICAgICBcImxpbmtcIjogXCJodHRwczovL3Nob3dzLmFjYXN0LmNvbS9nL2VwaXNvZGVzLzYxMDU2MjZhN2MyYTgyMDAxYTc5YjdlOD91dG1fc291cmNlPWxpc3Rlbm5vdGVzLmNvbSZ1dG1fY2FtcGFpZ249TGlzdGVuK05vdGVzJnV0bV9tZWRpdW09d2Vic2l0ZVwiLFxuICAgICAgICBcImF1ZGlvXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC84OTc2NWZhMmJlZTI0NjAzYTkzYjQwOTg4MzBjNGVmYS9cIixcbiAgICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jaGluYXRhbGsvbGVhcm5pbmctdG8tbGlzdGVuLWNoaW5hcy1YTUhtMW80VGFGNy1Mb08wVUFhX0c0ZS4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgIFwidGl0bGVcIjogXCJMZWFybmluZyB0byBsaXN0ZW46IENoaW5hJ3MgYmlsbGlvbi1kb2xsYXIgcG9kY2FzdCBpbmR1c3RyeVwiLFxuICAgICAgICBcInBvZGNhc3RcIjoge1xuICAgICAgICAgIFwiaWRcIjogXCI1Y2QzZmUzZmMwYzA0YzhkYTlhYmY0YTZmYjg5N2EzMVwiLFxuICAgICAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2hpbmF0YWxrLWpvcmRhbi1zY2huZWlkZXItRzQxUzdvWkVpTjYtSno0REF5cW05WlYuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgIFwidGl0bGVcIjogXCJDaGluYVRhbGtcIixcbiAgICAgICAgICBcInB1Ymxpc2hlclwiOiBcIkpvcmRhbiBTY2huZWlkZXJcIixcbiAgICAgICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9jaGluYXRhbGstam9yZGFuLXNjaG5laWRlci02cUtXbjdJeEpQVC1KejREQXlxbTlaVi4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgIFwibGlzdGVuX3Njb3JlXCI6IDM3LFxuICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNWNkM2ZlM2ZjMGMwNGM4ZGE5YWJmNGE2ZmI4OTdhMzEvXCIsXG4gICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjogXCIyLjUlXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvY2hpbmF0YWxrL2xlYXJuaW5nLXRvLWxpc3Rlbi1jaGluYXMtSUg0ZUtmd0R5VDYtTG9PMFVBYV9HNGUuMzAweDMwMC5qcGdcIixcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoaWxlIGl0IG1heSBiZSBhIHBpcGUgZHJlYW0gZm9yIENoaW5hRWNvblRhbGsgdG8gZXZlciBtZXJpdCBhIGJpbGxpb24tZG9sbGFyIHByaWNlIHRhZywgaW4gQ2hpbmEsIHBvZGNhc3QgXFx1MjAxY3VuaWNvcm5zXFx1MjAxZCBhcmUgZXZlcnl3aGVyZS4gQ29tcGFuaWVzIGxpa2UgWGltYWxheWEgYW5kIFl1ZGFvIGhhdmUgbXVsdGliaWxsaW9uLWRvbGxhciB2YWx1YXRpb25zLCBidXQgZmVhdHVyZSBzdGFydGxpbmdseSBkaWZmZXJlbnQgY29udGVudCBmcm9tIHdoYXQgY29uc3VtZXJzIGV4cGVjdCBpbiB0aGUgV2VzdC4gV2hhdCBkcml2ZXMgdGhlc2UgZGlmZmVyZW5jZXMsIGFuZCB3aGF0IGRvZXMgdGhlIGZ1dHVyZSBob2xkIGZvciBzcG9rZW4gYXVkaW8gaW4gQ2hpbmE/IFRvIGFuc3dlciB0aGVzZSBxdWVzdGlvbnMsIFlpIFlhbmcsIGEgeW91bmcgcG9kY2FzdCBob3N0IGFuZCBmb3VuZGVyIG9mIHRoZSBNYW5kYXJpbi1sYW5ndWFnZSBwb2RjYXN0IHN0YXJ0dXAgSnVzdFBvZCBcXHU2NGFkXFx1NWJhMlxcdTRlMDBcXHU0ZTBiLCBqb2lucyBKb3JkYW4gdG8gZXhwbGFpbiBob3csIGFmdGVyIHRoZSBhZHZlbnQgb2YgcG9kY2FzdHMgaW4gQ2hpbmEsIHBlb3BsZSBhcmUgZmluYWxseSBcXHUyMDFjbGVhcm5pbmcgdG8gbGlzdGVuLlxcdTIwMWQgWWkgWWFuZydzIG9yaWdpbmFsIHBvZGNhc3QgaXMgY2FsbGVkIExlZnRSaWdodFxcdTAwYTBcXHU1ZmZkXFx1NWRlNlxcdTVmZmRcXHU1M2YzLiBIaXMgdHdvIGJyYW5kZWQgcG9kY2FzdHMgYXJlXFx1MDBhMFN0YXJ0dXAgSW5zaWRlclxcdTAwYTBcXHU1MjFiXFx1NGUxYVxcdTUxODVcXHU1ZTU1IGFuZCBCZXNzaWVcXHUyMDE5cyBOb3Rlc1xcdTAwYTBcXHU4ZDFkXFx1NjcxYlxcdTVmNTUuIENoaW5hRWNvblRhbGsncyBuZXdzbGV0dGVyIGlzIGRvcGUuIFNpZ24gdXAgaGVyZSBhdFxcdTAwYTB3d3cuY2hpbmFlY29udGFsay5zdWJzdGFjay5jb20uIFRoZSBsYXRlc3QgaXNzdWVzIGluY2x1ZGUgYW4gYW5hbHlzaXMgb2Ygd2h5IEFtYXpvbiBsb3N0IGluIENoaW5hIGFuZCBsZWFybiBhYm91dCB0aGUgYmFuZSBvZiBDaGluYVxcdTIwMTlzIGF1dG9tb2JpbGUgaW5kdXN0cnkuIDxhIGhyZWY9XFxcImh0dHBzOi8vb3Blbi5hY2FzdC5jb20vcHVibGljL3BhdHJlb24vZmFuU3Vic2NyaWJlLzE5NTkzNTJcXFwiPkdldCBib251cyBjb250ZW50IG9uIFBhdHJlb248L2E+PGJyIC8+PHA+IFNlZSA8YSBocmVmPVxcXCJodHRwczovL2FjYXN0LmNvbS9wcml2YWN5XFxcIj5hY2FzdC5jb20vcHJpdmFjeTwvYT4gZm9yIHByaXZhY3kgYW5kIG9wdC1vdXQgaW5mb3JtYXRpb24uPC9wPjxwPiA8L3A+PHA+TGVhcm4gbW9yZSBhYm91dCB5b3VyIGFkIGNob2ljZXMuIFZpc2l0IDxhIGhyZWY9XFxcImh0dHBzOi8vbWVnYXBob25lLmZtL2FkY2hvaWNlc1xcXCI+bWVnYXBob25lLmZtL2FkY2hvaWNlczwvYT48L3A+XCIsXG4gICAgICAgIFwicHViX2RhdGVfbXNcIjogMTU2Mjc5NTc3MzE2MixcbiAgICAgICAgXCJndWlkX2Zyb21fcnNzXCI6IFwiODA3MzAxOTYyZmQxNGZmZGJkODM5MjgyNGY2ZjFlNWZcIixcbiAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS84OTc2NWZhMmJlZTI0NjAzYTkzYjQwOTg4MzBjNGVmYS9cIixcbiAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IDMwMDAsXG4gICAgICAgIFwiZXhwbGljaXRfY29udGVudFwiOiBmYWxzZSxcbiAgICAgICAgXCJtYXliZV9hdWRpb19pbnZhbGlkXCI6IGZhbHNlLFxuICAgICAgICBcImxpc3Rlbm5vdGVzX2VkaXRfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvODk3NjVmYTJiZWUyNDYwM2E5M2I0MDk4ODMwYzRlZmEvI2VkaXRcIlxuICAgICAgfSxcbiAgICAgIFwidHlwZVwiOiBcImVwaXNvZGVcIixcbiAgICAgIFwibm90ZXNcIjogXCJcIixcbiAgICAgIFwiYWRkZWRfYXRfbXNcIjogMTU2NDYxNDM1MDM2MFxuICAgIH1cbiAgXSxcbiAgXCJ0b3RhbFwiOiAzNyxcbiAgXCJ0aHVtYm5haWxcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1wbGF5bGlzdHMvcG9kY2FzdHMtYWJvdXQtcG9kY2FzdGluZy0wTGxLeGp0UW5mMS1tMXBlN3o2MGJzdy4zMDB4MzAwLmpwZ1wiLFxuICBcInZpc2liaWxpdHlcIjogXCJwdWJsaWNcIixcbiAgXCJkZXNjcmlwdGlvblwiOiBcIkEgY3VyYXRlZCBwbGF5bGlzdCBvZiBwb2RjYXN0cyBieSBXZW5iaW4gRmFuZy5cIixcbiAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcGxheWxpc3RzL3BvZGNhc3RzLWFib3V0LXBvZGNhc3RpbmctbTFwZTd6NjBic3cvZXBpc29kZXMvXCIsXG4gIFwibGFzdF90aW1lc3RhbXBfbXNcIjogMTU2NDYxNDM1MDM2MCxcbiAgXCJ0b3RhbF9hdWRpb19sZW5ndGhfc2VjXCI6IDEwODY1N1xufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwiaWRcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJtMXBlN3o2MGJzd1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgMTEtY2hhcmFjdGVyIHBsYXlsaXN0IGlkLCB3aGljaCBjYW4gYmUgdXNlZCB0byBmdXJ0aGVyIGZldGNoIGRldGFpbGVkIHBsYXlsaXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wbGF5bGlzdHMve2lkfWAuXCJcbiAgICB9LFxuICAgIFwibmFtZVwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIk15IHBvZGNhc3QgcGxheWxpc3RcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGF5bGlzdCBuYW1lLlwiXG4gICAgfSxcbiAgICBcInR5cGVcIjoge1xuICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgXCJlcGlzb2RlX2xpc3RcIixcbiAgICAgICAgXCJwb2RjYXN0X2xpc3RcIlxuICAgICAgXSxcbiAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgXCJleGFtcGxlXCI6IFwiZXBpc29kZV9saXN0XCIsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHR5cGUgb2YgdGhpcyBwbGF5bGlzdCwgd2hpY2ggc2hvdWxkIGJlIGVpdGhlciAqKmVwaXNvZGVfbGlzdCoqIG9yICoqcG9kY2FzdF9saXN0KiouXFxuXCJcbiAgICB9LFxuICAgIFwiaW1hZ2VcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcGxheWxpc3QvaW1hZ2UvNjkwN2U4ZmY2YjZjNDVkZjk0Y2MwNTk3NTNmMzY5Y2MuSlBFR1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkhpZ2ggcmVzb2x1dGlvbiBpbWFnZSB1cmwgb2YgdGhlIHBsYXlsaXN0LlwiXG4gICAgfSxcbiAgICBcIml0ZW1zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMjMsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxheWxpc3QgaXRlbSBpZC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwib25lT2ZcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiaWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiNGQ4MmU1MDMxNDE3NDc1NGEzYjYwMzkxMjQ0OGU4MTJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVwaXNvZGUgaWQsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIGZ1cnRoZXIgZmV0Y2ggZGV0YWlsZWQgZXBpc29kZSBtZXRhZGF0YSB2aWEgYEdFVCAvZXBpc29kZXMve2lkfWAuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImxpbmtcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubnByLm9yZy8yMDIwLzAxLzIyLzc5ODUzMjE3OS9zb2xlaW1hbmlzLWlyYW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldlYiBsaW5rIG9mIHRoaXMgZXBpc29kZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiYXVkaW9cIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvcC8xMWIzNDA0MWU4MDQ0OTFiOTcwNGQxMWYyODNjNzRkZS9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF1ZGlvIHVybCBvZiB0aGlzIGVwaXNvZGUsIHdoaWNoIGNhbiBiZSBwbGF5ZWQgZGlyZWN0bHkuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW1hZ2UgdXJsIGZvciB0aGlzIGVwaXNvZGUuXFxuSWYgYW4gZXBpc29kZSBkb2Vzbid0IGhhdmUgaXRzIG93biBpbWFnZSwgdGhlbiB0aGlzIGZpZWxkIHdvdWxkIGJlIHRoZSB1cmwgb2YgdGhlIHBvZGNhc3QgYXJ0d29yayBpbWFnZS5cXG5JZiB5b3UgYXJlIHVzaW5nIFBSTy9FTlRFUlBSSVNFIHBsYW4sIHRoZW4gaXQnc1xcbmEgaGlnaCByZXNvbHV0aW9uIGltYWdlICgxNDAweDE0MDApLiBJZiB5b3UgYXJlIHVzaW5nIEZSRUUgcGxhbiwgdGhlbiBpdCdzIHRoZSBzYW1lIGFzICoqdGh1bWJuYWlsKiosXFxubG93IHJlc29sdXRpb24gaW1hZ2UgKDMwMHgzMDApLlxcblwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJDZWxlYnJhdGlvbiBSZWNhcCwgSmFzb24gRnJ5IGFuZCBDaHJpc3RpYW4gQmxhdXZlbHQgSW50ZXJ2aWV3cyBcXHUyMDEzIFNXQlcgIzEwMVwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJwb2RjYXN0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIjRkM2ZlNzE3NzQyZDQ5NjNhODU1NjJlOWY4NGQ4Yzc5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMTQwMHgxNDAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yay4gSWYgeW91IGFyZSB1c2luZyBQUk8vRU5URVJQUklTRSBwbGFuLCB0aGVuIGl0J3NcXG5hIGhpZ2ggcmVzb2x1dGlvbiBpbWFnZSAoMTQwMHgxNDAwKS4gSWYgeW91IGFyZSB1c2luZyBGUkVFIHBsYW4sIHRoZW4gaXQncyB0aGUgc2FtZSBhcyAqKnRodW1ibmFpbCoqLFxcbmxvdyByZXNvbHV0aW9uIGltYWdlICgzMDB4MzAwKS5cXG5cIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlBsYW5ldCBCcm9hZGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0cy9leHBvbmVudC1iZW4tdGhvbXBzb24tamFtZXMtYWxsd29ydGgtT2FKU2piNHhRdjMuMzAweDMwMC5qcGdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgdXJsIGZvciB0aGlzIHBvZGNhc3QncyBhcnR3b3JrICgzMDB4MzAwKS5cIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlc3RpbWF0ZWQgcG9wdWxhcml0eSBzY29yZSBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkIG9uIGEgc2NhbGUgZnJvbSAwIHRvIDEwMC5cXG5JZiB0aGUgc2NvcmUgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBvZGNhc3Qgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5fc2NvcmVfZ2xvYmFsX3JhbmtcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHJhbmtpbmcgb2YgYSBwb2RjYXN0IGNvbXBhcmVkIHRvIGFsbCBvdGhlciByc3MtYmFzZWQgcHVibGljIHBvZGNhc3RzIGluIHRoZSB3b3JsZC5cXG5Gb3IgZXhhbXBsZSwgaWYgdGhlIHZhbHVlIGlzIDAuNSUsIHRoZW4gdGhpcyBwb2RjYXN0IGlzIG9uZSBvZiB0aGUgdG9wIDAuNSUgbW9zdCBwb3B1bGFyIHNob3dzIG91dCBvZiBhbGwgcG9kY2FzdHMgZ2xvYmFsbHksIHJhbmtlZCBieSBMaXN0ZW4gU2NvcmUuXFxuSWYgdGhlIHJhbmtpbmcgaXMgbm90IGF2YWlsYWJsZSwgaXQnbGwgYmUgbnVsbC4gTGVhcm4gbW9yZSBhdCBsaXN0ZW5ub3Rlcy5jb20vbGlzdGVuLXNjb3JlXFxuXCJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdHMvZXhwb25lbnQtYmVuLXRob21wc29uLWphbWVzLWFsbHdvcnRoLU9hSlNqYjR4UXYzLjMwMHgzMDAuanBnXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaHVtYm5haWwgaW1hZ2UgKDMwMHgzMDApIHVybCBmb3IgdGhpcyBlcGlzb2RlLlxcbklmIGFuIGVwaXNvZGUgZG9lc24ndCBoYXZlIGl0cyBvd24gaW1hZ2UsIHRoZW4gdGhpcyBmaWVsZCB3b3VsZCBiZSB0aGUgdXJsIG9mIHRoZSBwb2RjYXN0IGFydHdvcmsgdGh1bWJuYWlsIGltYWdlLlxcblwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI8cD5EaXNuZXkgY2hpZWYgQm9iIElnZXIgc2hhcmVkIG5ld3MgYWJvdXQgU3RhciBXYXJzIG1vdmllcyBpbiAyMDIwIGFuZCBiZXlvbmQsIGJ1dCBzb21lIG1lZGlhIG91dGxldHMgZ2F2ZSBjb25mbGljdGluZyByZXBvcnRzIGFib3V0IGl0LiBIZXJlJ3MgdGhlIHJlYWwgc2Nvb3AuIFB1bmNoIGl0ITwvcD4gPHA+KioqV2VcXHUyMDE5cmUgbGlzdGVuZXIgc3VwcG9ydGVkISBHbyB0byBodHRwOi8vUGF0cmVvbi5jb20vc3c3eDcgdG8gZG9uYXRlIHRvIHRoZSBTdGFyIFdhcnMgN3g3IHBvZGNhc3QsIGFuZCB5b3VcXHUyMDE5bGwgZ2V0IHNvbWUgZmFidWxvdXMgcmV3YXJkcyBmb3IgeW91ciBwbGVkZ2UuKioqXFx1MDBhMDwvcD4gPHA+Q2hlY2sgb3V0IFNXN3g3LmNvbSBmb3IgZnVsbCBTdGFyIFdhcnMgN3g3IHNob3cgbm90ZXMgYW5kIGxpbmtzLCBhbmQgdG8gY29tbWVudCBvbiBhbnkgb2YgdGhlIGNvbnRlbnQgb2YgdGhpcyBlcGlzb2RlISBJZiB5b3UgbGlrZSB3aGF0IHlvdSd2ZSBoZWFyZCwgcGxlYXNlIGxlYXZlIHVzIGEgcmF0aW5nIG9yIHJldmlldyBvbiBpVHVuZXMgb3IgU3RpdGNoZXIsIHdoaWNoIHdpbGwgYWxzbyBoZWxwIG1vcmUgcGVvcGxlIGRpc2NvdmVyIHRoaXMgU3RhciBXYXJzIHBvZGNhc3QuPC9wPiA8cD5Eb24ndCBmb3JnZXQgdG8gam9pbiB0aGUgU3RhciBXYXJzIDd4NyBmdW4gb24gRmFjZWJvb2sgYXQgRmFjZWJvb2suY29tL1NXN3g3LCBhbmQgZm9sbG93IHRoZSBicmVha2luZyBuZXdzIFR3aXR0ZXIgZmVlZCBhdCBUd2l0dGVyLmNvbS9TVzd4N1BvZGNhc3QuIFdlJ3JlIGFsc28gb24gUGludGVyZXN0IGFuZCBJbnN0YWdyYW0gYXMgXFxcIlNXN3g3XFxcIiB0b28sIGFuZCB3ZSdkIGxvdmUgdG8gY29ubmVjdCB3aXRoIHlvdSB0aGVyZSE8L3A+XFxuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIdG1sIG9mIHRoaXMgZXBpc29kZSdzIGZ1bGwgZGVzY3JpcHRpb25cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwicHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDc0ODczMjAwMDAwLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUHVibGlzaGVkIGRhdGUgZm9yIHRoaXMgZXBpc29kZS4gSW4gbWlsbGlzZWNvbmQuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vZS80ZDgyZTUwMzE0MTc0NzU0YTNiNjAzOTEyNDQ4ZTgxMi9cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBlcGlzb2RlIG9uIFtMaXN0ZW5Ob3Rlcy5jb21dKGh0dHBzOi8vd3d3Lkxpc3Rlbk5vdGVzLmNvbSkuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA1NjcsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyBsZW5ndGggb2YgdGhpcyBlcGlzb2RlLiBJbiBzZWNvbmRzLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJleHBsaWNpdF9jb250ZW50XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaGV0aGVyIHRoaXMgcG9kY2FzdCBjb250YWlucyBleHBsaWNpdCBsYW5ndWFnZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwibWF5YmVfYXVkaW9faW52YWxpZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciBvciBub3QgdGhpcyBlcGlzb2RlJ3MgYXVkaW8gaXMgaW52YWxpZC4gUG9kY2FzdGVycyBtYXkgZGVsZXRlIHRoZSBvcmlnaW5hbCBhdWRpby5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwibGlzdGVubm90ZXNfZWRpdF91cmxcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2UvMTFiMzQwNDFlODA0NDkxYjk3MDRkMTFmMjgzYzc0ZGUvI2VkaXRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkVkaXQgdXJsIG9mIHRoaXMgZXBpc29kZSB3aGVyZSB5b3UgY2FuIHVwZGF0ZSB0aGUgYXVkaW8gdXJsIGlmIHlvdSBmaW5kIHRoZSBhdWRpbyBpcyBicm9rZW4uXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI0ZDNmZTcxNzc0MmQ0OTYzYTg1NTYyZTlmODRkOGM3OVwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUG9kY2FzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwb2RjYXN0IG1ldGFkYXRhIHZpYSBgR0VUIC9wb2RjYXN0cy97aWR9YC5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwicnNzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vc3c3eDcubGlic3luLmNvbS9yc3NcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJTUyB1cmwgb2YgdGhpcyBwb2RjYXN0LiBUaGlzIGZpZWxkIGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICBcImVwaXNvZGljXCIsXG4gICAgICAgICAgICAgICAgICAgICAgXCJzZXJpYWxcIlxuICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiZXBpc29kaWNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB0eXBlIG9mIHRoaXMgcG9kY2FzdCAtIGVwaXNvZGljIG9yIHNlcmlhbC5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZW1haWxcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaGVsbG9AZXhhbXBsZS5jb21cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBlbWFpbCBvZiB0aGlzIHBvZGNhc3QncyBwcm9kdWNlci4gVGhpcyBmaWVsZCBpcyBhdmFpbGFibGUgb25seSBpbiB0aGUgUFJPL0VOVEVSUFJJU0UgcGxhbi5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZXh0cmFcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICBcInVybDFcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVXJsIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ1cmwyXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlVybCBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwidXJsM1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJVcmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcImdvb2dsZV91cmxcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3BvZGNhc3RzLmdvb2dsZS5jb20vZmVlZC9hSFIwY0hNNkx5OXljM011WVhKME1Ua3VZMjl0TDJwdmFHNHRjMjlzYjIxdmJpMXlaWEJ2Y25SelwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkdvb2dsZSBQb2RjYXN0cyB1cmwgZm9yIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcInNwb3RpZnlfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9vcGVuLnNwb3RpZnkuY29tL3Nob3cvMnJRSlVQOVkzSHhlbWlXM0pIdDlXVlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlNwb3RpZnkgdXJsIGZvciB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJ5b3V0dWJlX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3N3N3g3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiWW91VHViZSB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcImxpbmtlZGluX3VybFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJMaW5rZWRJbiB1cmwgYWZmaWxpYXRlZCB3aXRoIHRoaXMgcG9kY2FzdFwiXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBcIndlY2hhdF9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2VDaGF0IHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJwYXRyZW9uX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGF0cmVvbiB1c2VybmFtZSBhZmZpbGlhdGVkIHdpdGggdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwidHdpdHRlcl9oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJTVzd4N3BvZGNhc3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUd2l0dGVyIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJmYWNlYm9va19oYW5kbGVcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJzdzd4N1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkZhY2Vib29rIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJhbWF6b25fbXVzaWNfdXJsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9tdXNpYy5hbWF6b24uY29tL3BvZGNhc3RzLzZmYzZkNjgzLTllZjMtNDg1MC05YzM1LThlOGIxYTQyYTE0Ny90aGUtbG9jay1zcG9ydHNjYXN0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQW1hem9uIE11c2ljIHVybCBmb3IgdGhpcyBwb2RjYXN0XCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiaW5zdGFncmFtX2hhbmRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInN3N3g3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSW5zdGFncmFtIHVzZXJuYW1lIGFmZmlsaWF0ZWQgd2l0aCB0aGlzIHBvZGNhc3RcIlxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiaW1hZ2VcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4xNDAweDE0MDAuanBnXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbWFnZSB1cmwgZm9yIHRoaXMgcG9kY2FzdCdzIGFydHdvcmsuIElmIHlvdSBhcmUgdXNpbmcgUFJPL0VOVEVSUFJJU0UgcGxhbiwgdGhlbiBpdCdzXFxuYSBoaWdoIHJlc29sdXRpb24gaW1hZ2UgKDE0MDB4MTQwMCkuIElmIHlvdSBhcmUgdXNpbmcgRlJFRSBwbGFuLCB0aGVuIGl0J3MgdGhlIHNhbWUgYXMgKip0aHVtYm5haWwqKixcXG5sb3cgcmVzb2x1dGlvbiBpbWFnZSAoMzAweDMwMCkuXFxuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInRpdGxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIlN0YXIgV2FycyA3eDcgfCBTdGFyIFdhcnMgTmV3cywgSW50ZXJ2aWV3cywgYW5kIE1vcmUhXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IG5hbWUuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImNvdW50cnlcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiVW5pdGVkIFN0YXRlc1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGNvdW50cnkgd2hlcmUgdGhpcyBwb2RjYXN0IGlzIHByb2R1Y2VkLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ3ZWJzaXRlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHA6Ly9zdzd4Ny5jb20vXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZWJzaXRlIHVybCBvZiB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImxhbmd1YWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIkVuZ2xpc2hcIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBsYW5ndWFnZSBvZiB0aGlzIHBvZGNhc3QuIFlvdSBjYW4gZ2V0IGFsbCBzdXBwb3J0ZWQgbGFuZ3VhZ2VzIGZyb20gYEdFVCAvbGFuZ3VhZ2VzYC5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZ2VucmVfaWRzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJHZW5yZSBpZHMuXCJcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgICAgICAgICAgODYsXG4gICAgICAgICAgICAgICAgICAgICAgMTYwLFxuICAgICAgICAgICAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgICAgICAgICAgIDgyLFxuICAgICAgICAgICAgICAgICAgICAgIDEwMCxcbiAgICAgICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiaXR1bmVzX2lkXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogODk2MzU0NjM4LFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiaVR1bmVzIGlkIGZvciB0aGlzIHBvZGNhc3QuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcInB1Ymxpc2hlclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJQbGFuZXQgQnJvYWRjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQb2RjYXN0IHB1Ymxpc2hlciBuYW1lLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ0aHVtYm5haWxcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3RzL2V4cG9uZW50LWJlbi10aG9tcHNvbi1qYW1lcy1hbGx3b3J0aC1PYUpTamI0eFF2My4zMDB4MzAwLmpwZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGh1bWJuYWlsIGltYWdlIHVybCBmb3IgdGhpcyBwb2RjYXN0J3MgYXJ0d29yayAoMzAweDMwMCkuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImlzX2NsYWltZWRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgY2xhaW1lZCBieSBpdHMgcHJvZHVjZXIgb24gW0xpc3Rlbk5vdGVzLmNvbV0oaHR0cHM6Ly93d3cuTGlzdGVuTm90ZXMuY29tKS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiPHA+VGhlIFN0YXIgV2FycyA3eDcgUG9kY2FzdCBpcyBSZWJlbC1yb3VzaW5nIGZ1biBmb3IgZXZlcnlkYXkgSmVkaSwgYmV0d2VlbiA3IGFuZCAxNCBtaW51dGVzIGEgZGF5LCA3IGRheXMgYSB3ZWVrLiBKb2luIGhvc3QgQWxsZW4gVm9pdm9kIGZvciBTdGFyIFdhcnMgbmV3cywgaGlzdG9yeSwgaW50ZXJ2aWV3cywgdHJpdmlhLCBhbmQgZGVlcCBkaXZlcyBpbnRvIHRoZSBTdGFyIFdhcnMgc3RvcnkgYXMgdG9sZCBpbiBtb3ZpZXMsIGJvb2tzLCBjb21pY3MsIGdhbWVzLCBjYXJ0b29ucywgYW5kIG1vcmUuIFN1YnNjcmliZSBub3cgZm9yIHlvdXIgZGFpbHkgZG9zZSBvZiBTdGFyIFdhcnMgam95LiBJdCdzIGRlc3RpbnkgdW5sZWFzaGVkITwvcD5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkh0bWwgb2YgdGhpcyBlcGlzb2RlJ3MgZnVsbCBkZXNjcmlwdGlvblwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJsb29raW5nX2ZvclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgIFwiZ3Vlc3RzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGd1ZXN0cy5cIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgXCJjb2hvc3RzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNvaG9zdHMuXCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwic3BvbnNvcnNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiYm9vbGVhblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiV2hldGhlciB0aGlzIHBvZGNhc3QgaXMgbG9va2luZyBmb3Igc3BvbnNvcnMuXCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiY3Jvc3NfcHJvbW90aW9uXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImJvb2xlYW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGlzIGxvb2tpbmcgZm9yIGNyb3NzIHByb21vdGlvbiBvcHBvcnR1bml0aWVzIHdpdGggb3RoZXIgcG9kY2FzdHMuXCJcbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImxpc3Rlbl9zY29yZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDgxLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGVzdGltYXRlZCBwb3B1bGFyaXR5IHNjb3JlIG9mIGEgcG9kY2FzdCBjb21wYXJlZCB0byBhbGwgb3RoZXIgcnNzLWJhc2VkIHB1YmxpYyBwb2RjYXN0cyBpbiB0aGUgd29ybGQgb24gYSBzY2FsZSBmcm9tIDAgdG8gMTAwLlxcbklmIHRoZSBzY29yZSBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidG90YWxfZXBpc29kZXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAzMjQsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUb3RhbCBudW1iZXIgb2YgZXBpc29kZXMgaW4gdGhpcyBwb2RjYXN0LlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2MvNGQzZmU3MTc3NDJkNDk2M2E4NTU2MmU5Zjg0ZDhjNzkvXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgdXJsIG9mIHRoaXMgcG9kY2FzdCBvbiBbTGlzdGVuTm90ZXMuY29tXShodHRwczovL3d3dy5MaXN0ZW5Ob3Rlcy5jb20pLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJhdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMTI5MSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkF2ZXJhZ2UgYXVkaW8gbGVuZ3RoIG9mIGFsbCBlcGlzb2RlcyBvZiB0aGlzIHBvZGNhc3QuIEluIHNlY29uZHMuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImV4cGxpY2l0X2NvbnRlbnRcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIldoZXRoZXIgdGhpcyBwb2RjYXN0IGNvbnRhaW5zIGV4cGxpY2l0IGxhbmd1YWdlLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJsYXRlc3RfZXBpc29kZV9pZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJkMDU3MDkyZTU3Y2M0Y2VkODBlMGVmYWExOTY1OTNkOVwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIGlkIG9mIHRoZSBtb3N0IHJlY2VudGx5IHB1Ymxpc2hlZCBlcGlzb2RlIG9mIHRoaXMgcG9kY2FzdCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBlcGlzb2RlIG1ldGFkYXRhIHZpYSBgR0VUIC9lcGlzb2Rlcy97aWR9YC5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwibGF0ZXN0X3B1Yl9kYXRlX21zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMTU1NzQ5OTc3MDAwMCxcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBwdWJsaXNoZWQgZGF0ZSBvZiB0aGUgbGF0ZXN0IGVwaXNvZGUgb2YgdGhpcyBwb2RjYXN0LiBJbiBtaWxsaXNlY29uZHNcIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwiZWFybGllc3RfcHViX2RhdGVfbXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNDcwNjY3OTAyMDAwLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHB1Ymxpc2hlZCBkYXRlIG9mIHRoZSBvbGRlc3QgZXBpc29kZSBvZiB0aGlzIHBvZGNhc3QuIEluIG1pbGxpc2Vjb25kc1wiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVfZnJlcXVlbmN5X2hvdXJzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogMTY4LFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSG93IGZyZXF1ZW50bHkgZG9lcyB0aGlzIHBvZGNhc3QgcmVsZWFzZSBhIG5ldyBlcGlzb2RlPyBJbiBob3Vycy4gRm9yIGV4YW1wbGUsIGlmIHRoZSB2YWx1ZSBpcyAxNjYsIHRoZW4gaXQncyBldmVyeSAxNjYgaG91cnMgKG9yIHdlZWtseSkuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImxpc3Rlbl9zY29yZV9nbG9iYWxfcmFua1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCIwLjUlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgZXN0aW1hdGVkIHBvcHVsYXJpdHkgcmFua2luZyBvZiBhIHBvZGNhc3QgY29tcGFyZWQgdG8gYWxsIG90aGVyIHJzcy1iYXNlZCBwdWJsaWMgcG9kY2FzdHMgaW4gdGhlIHdvcmxkLlxcbkZvciBleGFtcGxlLCBpZiB0aGUgdmFsdWUgaXMgMC41JSwgdGhlbiB0aGlzIHBvZGNhc3QgaXMgb25lIG9mIHRoZSB0b3AgMC41JSBtb3N0IHBvcHVsYXIgc2hvd3Mgb3V0IG9mIGFsbCBwb2RjYXN0cyBnbG9iYWxseSwgcmFua2VkIGJ5IExpc3RlbiBTY29yZS5cXG5JZiB0aGUgcmFua2luZyBpcyBub3QgYXZhaWxhYmxlLCBpdCdsbCBiZSBudWxsLiBMZWFybiBtb3JlIGF0IGxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4tc2NvcmVcXG5cIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICAgICAgICAgIFwicHJvcGVydGllc1wiOiB7XG4gICAgICAgICAgICAgICAgICBcImF1ZGlvXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vZXhhbXBsZS5jb20vYXVkaW8ubXAzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyB1cmwsIHdoaWNoIGNhbiBiZSBwbGF5ZWQgZGlyZWN0bHkuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImltYWdlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wbGF5bGlzdC9pbWFnZS82OTA3ZThmZjZiNmM0NWRmOTRjYzA1OTc1M2YzNjljYy5KUEVHXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJIaWdoIHJlc29sdXRpb24gaW1hZ2UgdXJsIG9mIHRoaXMgY3VzdG9tIGF1ZGlvLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJ0aXRsZVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJBbiBhd2Vzb21lIGF1ZGlvIHRvIGxpc3Rlbi5cIixcbiAgICAgICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkN1c3RvbSBhdWRpbyB0aXRsZS5cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vZDNzdjJlZHVoZXdvYXMuY2xvdWRmcm9udC5uZXQvcGxheWxpc3QvaW1hZ2UvNDg0NzdkZWFlMDI2NDlkN2FiOWQzZjFiMzk2NmFmMzguSlBFR1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTG93IHJlc29sdXRpb24gaW1hZ2UgdXJsIG9mIHRoaXMgY3VzdG9tIGF1ZGlvLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJwdWJfZGF0ZV9tc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IDE1OTU1NjcwMjgxMzMsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQdWJsaXNoZWQgZGF0ZSAoaW4gbWlsbGlzZWNvbmRzKSBvZiB0aGlzIGN1c3RvbSBhdWRpby5cXG5Gb3Igbm93LCBpdCdzIHRoZSBzYW1lIGFzICoqYWRkZWRfYXRfbXMqKiBvZiB0aGlzIHBsYXlsaXN0IGl0ZW0uXFxuXCJcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBcImF1ZGlvX2xlbmd0aF9zZWNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAyNTMsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBdWRpbyBsZW5ndGggaW4gc2Vjb25kcy5cIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgY3VzdG9tIGF1ZGlvIGluIGEgcGxheWxpc3QsIHdoaWNoIGlzIGEgdHlwZSBvZiBwbGF5bGlzdCBpdGVtLlwiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgICAgICAgICAgXCJpZFwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCI5NmZjNDAwMTcxMzY0ZTMyODk3YjI1ZDg0YThlZDhlY1wiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSBpZCBvciBwb2RjYXN0IGlkLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJlcnJvclwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcImV4YW1wbGVcIjogXCJUaGlzIGVwaXNvZGUgaXMgZGVsZXRlZCBmcm9tIHRoZSBwb2RjYXN0IGRhdGFiYXNlLCBiZWNhdXNlLi4uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXaHkgdGhpcyBlcGlzb2RlIG9yIHBvZGNhc3QgaXMgZGVsZXRlZD9cIlxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIFwidGl0bGVcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiVGhpcyBpcyBhIHRlc3QgZXBpc29kZVwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiRXBpc29kZSB0aXRsZSBvciBwb2RjYXN0IHRpdGxlLlwiXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgXCJzdGF0dXNcIjoge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiZGVsZXRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHN0YXR1cyBvZiB0aGlzIGVwaXNvZGUgb3IgcG9kY2FzdC4gRm9yIG5vdywgdGhlIG9ubHkgcG9zc2libGUgdmFsdWUgaXMgKipkZWxldGVkKiouXCJcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGRlbGV0ZWQgZXBpc29kZSBvciBwb2RjYXN0LlxcbkFuIGVwaXNvZGUgb3IgYSBwb2RjYXN0IGNvdWxkIGJlIGRlbGV0ZWQgZnJvbSBvdXIgcG9kY2FzdCBkYXRhYmFzZS5cXG5Qb3NzaWJsZSByZWFzb25zOiAxKSBQb2RjYXN0IHByb2R1Y2VycyBzb21ldGltZXMgZGVsZXRlIHRoZWlyIG9sZCBlcGlzb2Rlcy4gMikgQ29weXJpZ2h0IGlzc3Vlcy5cXG5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInR5cGVcIjoge1xuICAgICAgICAgICAgXCJlbnVtXCI6IFtcbiAgICAgICAgICAgICAgXCJlcGlzb2RlXCIsXG4gICAgICAgICAgICAgIFwiY3VzdG9tX2F1ZGlvXCIsXG4gICAgICAgICAgICAgIFwicG9kY2FzdFwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJlcGlzb2RlXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHR5cGUgb2YgdGhpcyBwbGF5bGlzdCBpdGVtLlxcbklmIGEgcGxheWxpc3QgaXMgKiplcGlzb2RlX2xpc3QqKiwgdGhlbiBhbiBpdGVtIGNvdWxkIGJlIGVpdGhlciAqKmVwaXNvZGUqKiBvciAqKmN1c3RvbV9hdWRpbyoqLlxcbklmIGl0J3MgKipwb2RjYXN0X2xpc3QqKiwgdGhlbiBhbiBpdGVtIGNhbiBvbmx5IGJlICoqcG9kY2FzdCoqLlxcblwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5vdGVzXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiVGhpcyBpcyBhIGdvb2QgZXBpc29kZS5cIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJOb3RlcyBmb3IgdGhpcyBpdGVtLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImFkZGVkX2F0X21zXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAxNTk1NTY3MDA0OTU4LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRpbWVzdGFtcCAoaW4gbWlsbGlzZWNvbmRzKSB3aGVuIHRoaXMgaXRlbSBpcyBhZGRlZC5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkFuIGl0ZW0gaW4gYSBwbGF5bGlzdFwiXG4gICAgICB9LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkEgbGlzdCBvZiBwbGF5bGlzdCBpdGVtcy5cIlxuICAgIH0sXG4gICAgXCJ0b3RhbFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMzI1LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvdGFsIG51bWJlciBvZiBpdGVtcyBpbiB0aGlzIHBsYXlsaXN0LlwiXG4gICAgfSxcbiAgICBcInRodW1ibmFpbFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vZDNzdjJlZHVoZXdvYXMuY2xvdWRmcm9udC5uZXQvcGxheWxpc3QvaW1hZ2UvNDg0NzdkZWFlMDI2NDlkN2FiOWQzZjFiMzk2NmFmMzguSlBFR1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIkxvdyByZXNvbHV0aW9uIGltYWdlIHVybCBvZiB0aGUgcGxheWxpc3QuXCJcbiAgICB9LFxuICAgIFwidmlzaWJpbGl0eVwiOiB7XG4gICAgICBcImVudW1cIjogW1xuICAgICAgICBcInB1YmxpY1wiLFxuICAgICAgICBcInVubGlzdGVkXCIsXG4gICAgICAgIFwicHJpdmF0ZVwiXG4gICAgICBdLFxuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJwdWJsaWNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJWaXNpYmlsaXR5IG9mIHRoaXMgcGxheWxpc3QuXCJcbiAgICB9LFxuICAgIFwiZGVzY3JpcHRpb25cIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJBIGN1cmF0ZWQgcGxheWxpc3Qgb2YgcG9kY2FzdHMgYWJvdXQgcG9kY2FzdGluZy5cIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQbGF5bGlzdCBkZXNjcmlwdGlvbi5cIlxuICAgIH0sXG4gICAgXCJsaXN0ZW5ub3Rlc191cmxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICBcImV4YW1wbGVcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vbGlzdGVuL3BvZGNhc3RzLWFib3V0LXBvZGNhc3RpbmctbTFwZTd6NjBic3cvP2Rpc3BsYXk9ZXBpc29kZVwiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB1cmwgb2YgdGhpcyBwbGF5bGlzdCBvbiBMaXN0ZW5Ob3Rlcy5jb20uXCJcbiAgICB9LFxuICAgIFwibGFzdF90aW1lc3RhbXBfbXNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDE1OTU2NDEwOTI5MDcsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGFzc2VkIHRvIHRoZSAqKmxhc3RfdGltZXN0YW1wX21zKiogcGFyYW1ldGVyIG9mIGBHRVQgL3BsYXlsaXN0cy97aWR9YCB0byBwYWdpbmF0ZSB0aHJvdWdoIGl0ZW1zIG9mIHRoYXQgcGxheWxpc3QuXFxuXCJcbiAgICB9LFxuICAgIFwidG90YWxfYXVkaW9fbGVuZ3RoX3NlY1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICBcImV4YW1wbGVcIjogMjM0NTY3LFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRvdGFsIGF1ZGlvIGxlbmd0aCBvZiBhbGwgZXBpc29kZXMgaW4gdGhpcyBwbGF5bGlzdCwgaW4gc2Vjb25kcy4gSXQgd2lsbCBoYXZlIGEgdmFsaWQgdmFsdWUgb25seSB3aGVuIHR5cGUgaXMgKiplcGlzb2RlX2xpc3QqKi4gSW4gb3RoZXIgd29yZHMsIGl0IHdpbGwgYmUgMCBpZiB0eXBlIGlzICoqcG9kY2FzdF9saXN0KiouXCJcbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgRmV0Y2ggYSBsaXN0IG9mIHlvdXIgcGxheWxpc3RzLlxuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX215X3BsYXlsaXN0cyoqXG5cblRoaXMgZW5kcG9pbnQgcmV0dXJucyBzYW1lIGRhdGEgYXMgbGlzdGVubm90ZXMuY29tL2xpc3RlbiB1bmRlciB5b3VyIGFjY291bnQuXG5Zb3UgY2FuIHVzZSB0aGUgKipwYWdlKiogcGFyYW1ldGVyIHRvIGRvIHBhZ2luYXRpb24gYW5kIGZldGNoIG1vcmUgcGxheWxpc3RzLlxuXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX215X3BsYXlsaXN0cyhwYWdlPTEsIHNvcnQ9J25hbWVfYV90b196JylcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLXBsYXlsaXN0cykuXG5cblxuPGRldGFpbHM+XG4gIDxzdW1tYXJ5PkNsaWNrIHRvIHNlZSBleGFtcGxlIHJlc3BvbnNlPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0b3RhbFwiOiAzLFxuICBcImhhc19uZXh0XCI6IGZhbHNlLFxuICBcInBsYXlsaXN0c1wiOiBbXG4gICAge1xuICAgICAgXCJpZFwiOiBcImtyMy10YTI4Y0p1XCIsXG4gICAgICBcIm5hbWVcIjogXCJXZW5iaW4gRmFuZydzIFBvZGNhc3QgUGxheWxpc3RcIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1wbGF5bGlzdHMvd2VuYmluLWZhbmdzLXBvZGNhc3QtcGxheWxpc3QtYUl5a2c1R3ZtY0Eta3IzLXRhMjhjSnUuMzAweDI5OS5qcGdcIixcbiAgICAgIFwidGh1bWJuYWlsXCI6IFwiaHR0cHM6Ly9jZG4taW1hZ2VzLTEubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtcGxheWxpc3RzL3dlbmJpbi1mYW5ncy1wb2RjYXN0LXBsYXlsaXN0LWFJeWtnNUd2bWNBLWtyMy10YTI4Y0p1LjMwMHgyOTkuanBnXCIsXG4gICAgICBcInZpc2liaWxpdHlcIjogXCJwdWJsaWNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJXZW5iaW4gRmFuZ1xcdTIwMTlzIG1hc3RlciBwbGF5bGlzdC4gSnVzdCBsaXN0ZW4gdG8gaW5kaXZpZHVhbCBlcGlzb2RlcywgcmF0aGVyIHRoYW4gc3Vic2NyaWJpbmcgdG8gdG9ucyBvZiBwb2RjYXN0cy4gSG93IEkgbGlzdGVuIHRvIHBvZGNhc3RzOiBodHRwczovL2xubnMuY28vNkFyUHN6VHd2REVcIixcbiAgICAgIFwiZXBpc29kZV9jb3VudFwiOiA1NTM2LFxuICAgICAgXCJwb2RjYXN0X2NvdW50XCI6IDcwLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcGxheWxpc3RzL3dlbmJpbi1mYW5ncy1wb2RjYXN0LXBsYXlsaXN0LWtyMy10YTI4Y0p1L2VwaXNvZGVzL1wiLFxuICAgICAgXCJ0b3RhbF9hdWRpb19sZW5ndGhfc2VjXCI6IDE2NDY1Mjc5XG4gICAgfSxcbiAgICB7XG4gICAgICBcImlkXCI6IFwibTFwZTd6NjBic3dcIixcbiAgICAgIFwibmFtZVwiOiBcIlBvZGNhc3RzIGFib3V0IHBvZGNhc3RpbmdcIixcbiAgICAgIFwiaW1hZ2VcIjogXCJodHRwczovL2Nkbi1pbWFnZXMtMS5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1wbGF5bGlzdHMvcG9kY2FzdHMtYWJvdXQtcG9kY2FzdGluZy00YlU3TVpJbEVWTy1tMXBlN3o2MGJzdy4xNjAweDE2MDAuanBnXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LXBsYXlsaXN0cy9wb2RjYXN0cy1hYm91dC1wb2RjYXN0aW5nLTBMbEt4anRRbmYxLW0xcGU3ejYwYnN3LjMwMHgzMDAuanBnXCIsXG4gICAgICBcInZpc2liaWxpdHlcIjogXCJwdWJsaWNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIGN1cmF0ZWQgcGxheWxpc3Qgb2YgcG9kY2FzdHMgYnkgV2VuYmluIEZhbmcuXCIsXG4gICAgICBcImVwaXNvZGVfY291bnRcIjogMzcsXG4gICAgICBcInBvZGNhc3RfY291bnRcIjogMixcbiAgICAgIFwibGlzdGVubm90ZXNfdXJsXCI6IFwiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BsYXlsaXN0cy9wb2RjYXN0cy1hYm91dC1wb2RjYXN0aW5nLW0xcGU3ejYwYnN3L2VwaXNvZGVzL1wiLFxuICAgICAgXCJ0b3RhbF9hdWRpb19sZW5ndGhfc2VjXCI6IDEwODY1N1xuICAgIH0sXG4gICAge1xuICAgICAgXCJpZFwiOiBcInVJSzg1Qk02RVdKXCIsXG4gICAgICBcIm5hbWVcIjogXCJUaGVyZSdzIGEgcG9kY2FzdCBmb3IgdGhhdFwiLFxuICAgICAgXCJpbWFnZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LXBsYXlsaXN0cy90aGVyZXMtYS1wb2RjYXN0LWZvci10aGF0LVJPbVd3Z1hySmhjLXVJSzg1Qk02RVdKLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInRodW1ibmFpbFwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LXBsYXlsaXN0cy90aGVyZXMtYS1wb2RjYXN0LWZvci10aGF0LVJPbVd3Z1hySmhjLXVJSzg1Qk02RVdKLjMwMHgzMDAuanBnXCIsXG4gICAgICBcInZpc2liaWxpdHlcIjogXCJwdWJsaWNcIixcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJJbnNwaXJlZCBieSBcXFwiVGhlcmUncyBhbiBhcHAgZm9yIHRoYXRcXFwiLiBFbWFpbCBtZSBpZiB5b3Ugd2FudCB0byBiZWNvbWUgYSBjb250cmlidXRvciBvZiB0aGlzIGxpc3Q6IGhlbGxvQGxpc3Rlbm5vdGVzLmNvbVwiLFxuICAgICAgXCJlcGlzb2RlX2NvdW50XCI6IDAsXG4gICAgICBcInBvZGNhc3RfY291bnRcIjogMTMyLFxuICAgICAgXCJsaXN0ZW5ub3Rlc191cmxcIjogXCJodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcGxheWxpc3RzL3RoZXJlcy1hLXBvZGNhc3QtZm9yLXRoYXQtdUlLODVCTTZFV0ovcG9kY2FzdHMvXCIsXG4gICAgICBcInRvdGFsX2F1ZGlvX2xlbmd0aF9zZWNcIjogMFxuICAgIH1cbiAgXSxcbiAgXCJwYWdlX251bWJlclwiOiAxLFxuICBcImhhc19wcmV2aW91c1wiOiBmYWxzZSxcbiAgXCJuZXh0X3BhZ2VfbnVtYmVyXCI6IDIsXG4gIFwicHJldmlvdXNfcGFnZV9udW1iZXJcIjogMFxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwidG90YWxcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgXCJleGFtcGxlXCI6IDMyNVxuICAgIH0sXG4gICAgXCJoYXNfbmV4dFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICBcImV4YW1wbGVcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCJwbGF5bGlzdHNcIjoge1xuICAgICAgXCJ0eXBlXCI6IFwiYXJyYXlcIixcbiAgICAgIFwiaXRlbXNcIjoge1xuICAgICAgICBcInR5cGVcIjogXCJvYmplY3RcIixcbiAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICAgICAgICBcImlkXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwibTFwZTd6NjBic3dcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJBIDExLWNoYXJhY3RlciBwbGF5bGlzdCBpZCwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gZnVydGhlciBmZXRjaCBkZXRhaWxlZCBwbGF5bGlzdCBtZXRhZGF0YSB2aWEgYEdFVCAvcGxheWxpc3RzL3tpZH1gLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcIm5hbWVcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJNeSBwb2RjYXN0IHBsYXlsaXN0XCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiUGxheWxpc3QgbmFtZS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJpbWFnZVwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vY2RuLWltYWdlcy0xLmxpc3Rlbm5vdGVzLmNvbS9wbGF5bGlzdC9pbWFnZS82OTA3ZThmZjZiNmM0NWRmOTRjYzA1OTc1M2YzNjljYy5KUEVHXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiSGlnaCByZXNvbHV0aW9uIGltYWdlIHVybCBvZiB0aGUgcGxheWxpc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwidGh1bWJuYWlsXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInN0cmluZ1wiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IFwiaHR0cHM6Ly9kM3N2MmVkdWhld29hcy5jbG91ZGZyb250Lm5ldC9wbGF5bGlzdC9pbWFnZS80ODQ3N2RlYWUwMjY0OWQ3YWI5ZDNmMWIzOTY2YWYzOC5KUEVHXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiTG93IHJlc29sdXRpb24gaW1hZ2UgdXJsIG9mIHRoZSBwbGF5bGlzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ2aXNpYmlsaXR5XCI6IHtcbiAgICAgICAgICAgIFwiZW51bVwiOiBbXG4gICAgICAgICAgICAgIFwicHVibGljXCIsXG4gICAgICAgICAgICAgIFwidW5saXN0ZWRcIixcbiAgICAgICAgICAgICAgXCJwcml2YXRlXCJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcInB1YmxpY1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlZpc2liaWxpdHkgb2YgdGhpcyBwbGF5bGlzdC5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcIkEgY3VyYXRlZCBwbGF5bGlzdCBvZiBwb2RjYXN0cyBhYm91dCBwb2RjYXN0aW5nLlwiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlBsYXlsaXN0IGRlc2NyaXB0aW9uLlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImVwaXNvZGVfY291bnRcIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwiaW50ZWdlclwiLFxuICAgICAgICAgICAgXCJleGFtcGxlXCI6IDIzLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBudW1iZXIgb2YgZXBpc29kZXMgKGluY2x1ZGluZyBjdXN0b20gYXVkaW8pIGluIHRoaXMgcGxheWxpc3QuXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwicG9kY2FzdF9jb3VudFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTAsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIG51bWJlciBvZiBwb2RjYXN0cyBpbiB0aGlzIHBsYXlsaXN0LlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcImxpc3Rlbm5vdGVzX3VybFwiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiBcImh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9saXN0ZW4vcG9kY2FzdHMtYWJvdXQtcG9kY2FzdGluZy1tMXBlN3o2MGJzdy8/ZGlzcGxheT1lcGlzb2RlXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHVybCBvZiB0aGlzIHBsYXlsaXN0IG9uIExpc3Rlbk5vdGVzLmNvbS5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJsYXN0X3RpbWVzdGFtcF9tc1wiOiB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJpbnRlZ2VyXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogMTU5NTY0MTA5MjkwNyxcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJQYXNzZWQgdG8gdGhlICoqbGFzdF90aW1lc3RhbXBfbXMqKiBwYXJhbWV0ZXIgb2YgYEdFVCAvcGxheWxpc3RzL3tpZH1gIHRvIHBhZ2luYXRlIHRocm91Z2ggaXRlbXMgb2YgdGhhdCBwbGF5bGlzdC5cXG5cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJ0b3RhbF9hdWRpb19sZW5ndGhfc2VjXCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiAyMzQ1NjcsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVG90YWwgYXVkaW8gbGVuZ3RoIG9mIGFsbCBlcGlzb2RlcyBpbiB0aGlzIHBsYXlsaXN0LCBpbiBzZWNvbmRzLlwiXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSBwbGF5bGlzdFwiXG4gICAgICB9XG4gICAgfSxcbiAgICBcInBhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAyXG4gICAgfSxcbiAgICBcImhhc19wcmV2aW91c1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJib29sZWFuXCIsXG4gICAgICBcImV4YW1wbGVcIjogdHJ1ZVxuICAgIH0sXG4gICAgXCJuZXh0X3BhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAzXG4gICAgfSxcbiAgICBcInByZXZpb3VzX3BhZ2VfbnVtYmVyXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgIFwiZXhhbXBsZVwiOiAxXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIHRyZW5kaW5nIHNlYXJjaCB0ZXJtc1xuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX3RyZW5kaW5nX3NlYXJjaGVzKipcblxuRmV0Y2ggdXAgdG8gMTAgbW9zdCByZWNlbnQgdHJlbmRpbmcgc2VhcmNoIHRlcm1zIG9uIHRoZSBMaXN0ZW4gTm90ZXMgcGxhdGZvcm0uXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX3RyZW5kaW5nX3NlYXJjaGVzKClcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLXRyZW5kaW5nX3NlYXJjaGVzKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInRlcm1zXCI6IFtcbiAgICBcIkRvbmFsZCBIb2ZmbWFuXCIsXG4gICAgXCJKdWRpdGggQmFyc2lcIixcbiAgICBcIlBldGVyIFNhbnRlbmVsbG9cIixcbiAgICBcIk1hcmsgQm93ZGVuXCIsXG4gICAgXCJBc3dhdGggRGFtb2RhcmFuXCIsXG4gICAgXCJKZW5ueSBPZGVsbFwiLFxuICAgIFwiTGV4IEZyaWRtYW5cIixcbiAgICBcIkNoZWxzZWEgSGFuZGxlclwiLFxuICAgIFwiRGlnaXRhbCBOb21hZFwiLFxuICAgIFwiU2hlcnlsIFNhbmRiZXJnXCJcbiAgXVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcInRlcm1zXCJcbiAgXSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInRlcm1zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICBcIlRhbGliYW5cIixcbiAgICAgICAgXCJBbmRyZXcgQ3VvbW9cIixcbiAgICAgICAgXCJqb2huIE1jQWZlZVwiXG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRyZW5kaW5nIHNlYXJjaCB0ZXJtc1wiXG4gICAgfVxuICB9XG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cblxuIyMjIEZldGNoIHJlbGF0ZWQgc2VhcmNoIHRlcm1zXG5cbkZ1bmN0aW9uIE5hbWU6ICoqZmV0Y2hfcmVsYXRlZF9zZWFyY2hlcyoqXG5cblN1Z2dlc3QgcmVsYXRlZCBzZWFyY2ggdGVybXMuIFRoZSByZXN1bHRzIGFyZSBtb3JlIGNvbXByZWhlbnNpdmUgdGhhbiBmcm9tIGBHRVQgL3R5cGVhaGVhZGAuIFRoaXMgZW5kcG9pbnQgaXMgYXZhaWxhYmxlIG9ubHkgaW4gdGhlIFBSTy9FTlRFUlBSSVNFIHBsYW4uXG5cbkV4YW1wbGU6XG5gYGBweXRob25cblxuZnJvbSBsaXN0ZW5ub3RlcyBpbXBvcnQgcG9kY2FzdF9hcGlcblxuIyBJZiBhcGlfa2V5IGlzIE5vbmUsIHRoZSBzZGsgd2lsbCBjb25uZWN0IHRvIGEgbW9jayBzZXJ2ZXIgdGhhdCdsbFxuIyByZXR1cm4gZmFrZSBkYXRhIGZvciB0ZXN0aW5nIHB1cnBvc2UgICAgICAgICAgICBcbmFwaV9rZXkgPSAnYTZhMWY3YWU2YTRhNGNmN2EyMDhlNWJhKioqKioqKionXG5cbmNsaWVudCA9IHBvZGNhc3RfYXBpLkNsaWVudChhcGlfa2V5PWFwaV9rZXkpICAgICAgXG5cbnJlc3BvbnNlID0gY2xpZW50LmZldGNoX3JlbGF0ZWRfc2VhcmNoZXMocT0nZXZlcmdyYW5kZScpXG4gICAgICAgICAgICBcbnByaW50KHJlc3BvbnNlLmpzb24oKSlcblxuYGBgXG5cblNlZSBhbGwgYXZhaWxhYmxlIHBhcmFtZXRlcnMgb24gdGhlIFtBUEkgRG9jcyBwYWdlXShodHRwczovL3d3dy5saXN0ZW5ub3Rlcy5jb20vcG9kY2FzdC1hcGkvZG9jcy8jZ2V0LWFwaS12Mi1yZWxhdGVkX3NlYXJjaGVzKS5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIGV4YW1wbGUgcmVzcG9uc2U8L3N1bW1hcnk+XG4gIFxuYGBganNvblxue1xuICBcInRlcm1zXCI6IFtcbiAgICBcImV2ZXJncmFuZGUgc3RvY2tcIixcbiAgICBcImV2ZXJncmFuZGUgbmV3c1wiLFxuICAgIFwiZXZlcmdyYW5kZSBkZWZhdWx0XCIsXG4gICAgXCJldmVyZ3JhbmRlIGNoaW5hXCIsXG4gICAgXCJldmVyZ3JhbmRlIGNyaXNpc1wiLFxuICAgIFwiZXZlcmdyYW5kZSBjb2xsYXBzZVwiLFxuICAgIFwiZXZlcmdyYW5kZSBzdG9jayBwcmljZVwiLFxuICAgIFwiZXZlcmdyYW5kZSBkZWJ0XCJcbiAgXVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInJlcXVpcmVkXCI6IFtcbiAgICBcInRlcm1zXCJcbiAgXSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInRlcm1zXCI6IHtcbiAgICAgIFwidHlwZVwiOiBcImFycmF5XCIsXG4gICAgICBcIml0ZW1zXCI6IHtcbiAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCJcbiAgICAgIH0sXG4gICAgICBcImV4YW1wbGVcIjogW1xuICAgICAgICBcImV2ZXJncmFuZGUgc3RvY2tcIixcbiAgICAgICAgXCJldmVyZ3JhbmRlIGNoaW5hXCIsXG4gICAgICAgIFwiZXZlcmdyYW5kZSBncm91cFwiLFxuICAgICAgICBcImV2ZXJncmFuZGUgbmV3c1wiXG4gICAgICBdLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlJlbGF0ZWQgc2VhcmNoIHRlcm1zXCJcbiAgICB9XG4gIH1cbn1cbmBgYCAgIFxuPC9kZXRhaWxzPlxuXG5cblxuXG4jIyMgU3BlbGwgY2hlY2sgb24gYSBzZWFyY2ggdGVybVxuXG5GdW5jdGlvbiBOYW1lOiAqKnNwZWxsY2hlY2sqKlxuXG5TdWdnZXN0IGEgbGlzdCBvZiB3b3JkcyB0aGF0IGNvcnJlY3QgdGhlIHNwZWxsaW5nIGVycm9ycyBvZiBhIHNlYXJjaCB0ZXJtLiBUaGlzIGVuZHBvaW50IGlzIGF2YWlsYWJsZSBvbmx5IGluIHRoZSBQUk8vRU5URVJQUklTRSBwbGFuLlxuXG5FeGFtcGxlOlxuYGBgcHl0aG9uXG5cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbiMgSWYgYXBpX2tleSBpcyBOb25lLCB0aGUgc2RrIHdpbGwgY29ubmVjdCB0byBhIG1vY2sgc2VydmVyIHRoYXQnbGxcbiMgcmV0dXJuIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3NlICAgICAgICAgICAgXG5hcGlfa2V5ID0gJ2E2YTFmN2FlNmE0YTRjZjdhMjA4ZTViYSoqKioqKioqJ1xuXG5jbGllbnQgPSBwb2RjYXN0X2FwaS5DbGllbnQoYXBpX2tleT1hcGlfa2V5KSAgICAgIFxuXG5yZXNwb25zZSA9IGNsaWVudC5zcGVsbGNoZWNrKHE9J2V2ZXJncmFuZCBzdG9rJylcbiAgICAgICAgICAgIFxucHJpbnQocmVzcG9uc2UuanNvbigpKVxuXG5gYGBcblxuU2VlIGFsbCBhdmFpbGFibGUgcGFyYW1ldGVycyBvbiB0aGUgW0FQSSBEb2NzIHBhZ2VdKGh0dHBzOi8vd3d3Lmxpc3Rlbm5vdGVzLmNvbS9wb2RjYXN0LWFwaS9kb2NzLyNnZXQtYXBpLXYyLXNwZWxsY2hlY2spLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidG9rZW5zXCI6IFtcbiAgICB7XG4gICAgICBcInRva2VuXCI6IFwiZXZlcmdyYW5kXCIsXG4gICAgICBcIm9mZnNldFwiOiAwLFxuICAgICAgXCJzdWdnZXN0aW9uXCI6IFwiZXZlcmdyYW5kZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInRva2VuXCI6IFwic3Rva1wiLFxuICAgICAgXCJvZmZzZXRcIjogMTAsXG4gICAgICBcInN1Z2dlc3Rpb25cIjogXCJzdG9ja1wiXG4gICAgfVxuICBdLFxuICBcImNvcnJlY3RlZF90ZXh0X2h0bWxcIjogXCI8Yj48aT5ldmVyZ3JhbmRlPC9pPjwvYj4gPGI+PGk+c3RvY2s8L2k+PC9iPlwiXG59XG5gYGAgICBcbjwvZGV0YWlscz5cblxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgcmVzcG9uc2Ugc2NoZW1hPC9zdW1tYXJ5PlxuICBcbmBgYGpzb25cbntcbiAgXCJ0eXBlXCI6IFwib2JqZWN0XCIsXG4gIFwicmVxdWlyZWRcIjogW1xuICAgIFwidG9rZW5zXCIsXG4gICAgXCJjb3JyZWN0ZWRfdGV4dF9odG1sXCJcbiAgXSxcbiAgXCJwcm9wZXJ0aWVzXCI6IHtcbiAgICBcInRva2Vuc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwidG9rZW5cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJldmVyZ3JhbmRcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJUaGUgbWlzc3BlbGxlZCB3b3JkXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIFwib2Zmc2V0XCI6IHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcImludGVnZXJcIixcbiAgICAgICAgICAgIFwiZXhhbXBsZVwiOiA1LFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSB6ZXJvLWJhc2VkIG9mZnNldCBmcm9tIHRoZSBiZWdpbm5pbmcgb2YgdGhlIHRleHQgcXVlcnkgc3RyaW5nIHRvIHRoZSB3b3JkIHRoYXQgaXMgbWlzc3BlbGxlZFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICBcInN1Z2dlc3Rpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJldmVyZ3JhbmRlXCIsXG4gICAgICAgICAgICBcImRlc2NyaXB0aW9uXCI6IFwiQSB3b3JkIHRoYXQgY29ycmVjdHMgdGhlIHNwZWxsaW5nIGVycm9yXCJcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBcImRlc2NyaXB0aW9uXCI6IFwiVGhlIHdvcmQgaW4gdGhlIHRleHQgcXVlcnkgc3RyaW5nIHRoYXQgaXMgbm90IHNwZWxsZWQgY29ycmVjdGx5XCJcbiAgICB9LFxuICAgIFwiY29ycmVjdGVkX3RleHRfaHRtbFwiOiB7XG4gICAgICBcInR5cGVcIjogXCJzdHJpbmdcIixcbiAgICAgIFwiZXhhbXBsZVwiOiBcIjxiPjxpPmV2ZXJncmFuZGU8L2k+PC9iPiBzdG9ja1wiLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIlRoZSBjb3JyZWN0ZWQgdGV4dCBmb3IgdGhlIGVudGlyZSBzZWFyY2ggdGVybSAobXVsdGlwbGUgd29yZHMvdG9rZW5zKSwgd2hlcmUgbWlzc3BlbGxlZCB0b2tlbnMgYXJlIHJlcGxhY2VkIHdpdGggdGhlIGNvcnJlY3QgdGV4dHMgYW5kIGh0bWwgdGFncyA8Yj48aT5cIlxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cbiMjIyBGZXRjaCBhdWRpZW5jZSBkZW1vZ3JhcGhpY3MgZm9yIGEgcG9kY2FzdFxuXG5GdW5jdGlvbiBOYW1lOiAqKmZldGNoX2F1ZGllbmNlX2Zvcl9wb2RjYXN0KipcblxuRmV0Y2ggYXVkaWVuY2UgZGVtb2dyYXBoaWNzIGZvciBhIHBvZGNhc3QgLSAxKSBkaXJlY3RseSBtZWFzdXJlZCBvbiB0aGUgTGlzdGVuIE5vdGVzIHBsYXRmb3JtOyAyKSBvbmx5IHN1cHBvcnRzIGF1ZGllbmNlIGJyZWFrZG93biBieSByZWdpb25zIGZvciBub3c7IDMpIG5vdCBldmVyeSBwb2RjYXN0IGhhcyBkYXRhLlxuXG5FeGFtcGxlOlxuYGBgcHl0aG9uXG5cbmZyb20gbGlzdGVubm90ZXMgaW1wb3J0IHBvZGNhc3RfYXBpXG5cbiMgSWYgYXBpX2tleSBpcyBOb25lLCB0aGUgc2RrIHdpbGwgY29ubmVjdCB0byBhIG1vY2sgc2VydmVyIHRoYXQnbGxcbiMgcmV0dXJuIGZha2UgZGF0YSBmb3IgdGVzdGluZyBwdXJwb3NlICAgICAgICAgICAgXG5hcGlfa2V5ID0gJ2E2YTFmN2FlNmE0YTRjZjdhMjA4ZTViYSoqKioqKioqJ1xuXG5jbGllbnQgPSBwb2RjYXN0X2FwaS5DbGllbnQoYXBpX2tleT1hcGlfa2V5KSAgICAgIFxuXG5yZXNwb25zZSA9IGNsaWVudC5mZXRjaF9hdWRpZW5jZV9mb3JfcG9kY2FzdChpZD0nMjUyMTJhYzNjNTMyNDBhODgwZGQ1MDMyZTU0NzA0N2InKVxuICAgICAgICAgICAgXG5wcmludChyZXNwb25zZS5qc29uKCkpXG5cbmBgYFxuXG5TZWUgYWxsIGF2YWlsYWJsZSBwYXJhbWV0ZXJzIG9uIHRoZSBbQVBJIERvY3MgcGFnZV0oaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL3BvZGNhc3QtYXBpL2RvY3MvI2dldC1hcGktdjItcG9kY2FzdHMtaWQtYXVkaWVuY2UpLlxuXG5cbjxkZXRhaWxzPlxuICA8c3VtbWFyeT5DbGljayB0byBzZWUgZXhhbXBsZSByZXNwb25zZTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwiYnlfcmVnaW9uc1wiOiBbXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjUyLjc3JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJ1c1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiNi42MCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiY2FcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjYuMDMlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImdiXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCI0Ljc5JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJpblwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiNC4xMyVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiYXVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjIuOTMlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImRlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIxLjMzJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJmclwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMS4yMyVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwic2dcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjEuMTglXCIsXG4gICAgICBcInJlZ2lvblwiOiBcIm5sXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjg4JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJlc1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC44NSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiemFcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuODElXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImJyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjcxJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJwbFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC42OSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwic2VcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuNjElXCIsXG4gICAgICBcInJlZ2lvblwiOiBcIm56XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjYwJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJoa1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC41OSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiaWVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuNTMlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcIml0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjUxJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJjaFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC40OSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwicGhcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuNDclXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImpwXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjQ0JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJpZFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC40NCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwicnVcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuNDIlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcInB0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjQxJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJteFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4zOSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwidHdcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMzglXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImJlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjM3JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJyb1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4zNiVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiZmlcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMzQlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImF0XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjM0JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJub1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4zMyVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiaWxcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMzMlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcInBrXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjMxJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJjelwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4zMCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiZGtcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMzAlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImdyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjI3JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJ2blwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4yNyVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwidGhcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMjUlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcInVhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjI0JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJhZVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4yMCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiYmdcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMjAlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcIm15XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjE5JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJrclwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4xOCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwic2tcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMTglXCIsXG4gICAgICBcInJlZ2lvblwiOiBcInNhXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjE4JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJ0clwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4xNyVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiaHJcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMTclXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImFyXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjE0JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJodVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4xNCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwiY29cIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMTMlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImVlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjExJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJjbFwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4xMSVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwibmdcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMTElXCIsXG4gICAgICBcInJlZ2lvblwiOiBcImtlXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIwLjExJVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJzaVwiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInJhdGlvXCI6IFwiMC4xMCVcIixcbiAgICAgIFwicmVnaW9uXCI6IFwibWRcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJyYXRpb1wiOiBcIjAuMTAlXCIsXG4gICAgICBcInJlZ2lvblwiOiBcInJzXCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicmF0aW9cIjogXCIyLjI2JVwiLFxuICAgICAgXCJyZWdpb25cIjogXCJvdGhlcnNcIlxuICAgIH1cbiAgXVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG48ZGV0YWlscz5cbiAgPHN1bW1hcnk+Q2xpY2sgdG8gc2VlIHJlc3BvbnNlIHNjaGVtYTwvc3VtbWFyeT5cbiAgXG5gYGBqc29uXG57XG4gIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICBcInByb3BlcnRpZXNcIjoge1xuICAgIFwiYnlfcmVnaW9uc1wiOiB7XG4gICAgICBcInR5cGVcIjogXCJhcnJheVwiLFxuICAgICAgXCJpdGVtc1wiOiB7XG4gICAgICAgIFwidHlwZVwiOiBcIm9iamVjdFwiLFxuICAgICAgICBcInByb3BlcnRpZXNcIjoge1xuICAgICAgICAgIFwicmF0aW9cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCIyMC4yMiVcIixcbiAgICAgICAgICAgIFwiZGVzY3JpcHRpb25cIjogXCJwZXJjZW50YWdlIG9mIGF1ZGllbmNlIGZyb20gdGhpcyBzcGVjaWZpYyByZWdpb25cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAgXCJyZWdpb25cIjoge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwic3RyaW5nXCIsXG4gICAgICAgICAgICBcImV4YW1wbGVcIjogXCJ1c1wiLFxuICAgICAgICAgICAgXCJkZXNjcmlwdGlvblwiOiBcIjItbGV0dGVyIGNvdW50cnkgY29kZSBvZiBhIHJlZ2lvbi5cIlxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuYGBgICAgXG48L2RldGFpbHM+XG5cblxuXG5cblxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2xpc3Rlbm5vdGVzL3BvZGNhc3QtYXBpLXB5dGhvbiIs
ICAgICJrZXl3b3JkcyI6ICJsaXN0ZW4gbm90ZXMgcG9kY2FzdCBhcGkiLA==
ICAgICJsaWNlbnNlIjogIk1JVCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogInBvZGNhc3QtYXBpIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcG9kY2FzdC1hcGkvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcG9kY2FzdC1hcGkvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkJ1ZyBUcmFja2VyIjogImh0dHBzOi8vZ2l0aHViLmNvbS9saXN0ZW5ub3Rlcy9wb2RjYXN0LWFwaS1weXRob24vaXNzdWVzIiw=
ICAgICAgIkRvY3VtZW50YXRpb24iOiAiaHR0cHM6Ly93d3cubGlzdGVubm90ZXMuY29tL2FwaS9kb2NzLyIs
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9saXN0ZW5ub3Rlcy9wb2RjYXN0LWFwaS1weXRob24iLA==
ICAgICAgIlNvdXJjZSBDb2RlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9saXN0ZW5ub3Rlcy9wb2RjYXN0LWFwaS1weXRob24vIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvcG9kY2FzdC1hcGkvMS4xLjQvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjUiLA==
ICAgICJzdW1tYXJ5IjogIlB5dGhvbiBiaW5kaW5ncyBmb3IgdGhlIExpc3RlbiBOb3RlcyBQb2RjYXN0IEFQSSIs
ICAgICJ2ZXJzaW9uIjogIjEuMS40Iiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNDU3MzAwMSw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAuMTAiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI0MGY0NzAyZjk3OTc3MzViNzNlNjMwYzhiMTVhNTE3N2NjNzFiNDZlNGQyM2NkYTIwY2U5MTljN2NiZmZkMTFjIiw=
ICAgICAgICAgICJtZDUiOiAiNGI5OGQ4MjdmY2E5NTk0YzgxNTA5OGY4NzZiMjE0MDMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZGJlNTMzZTczZDVkOTI3YTM0NTk0NzYwZmE5MDY0ZjkxN2M4OGNjODM3YmM1ZWY3MjZjYmFjMDEyYjIyYjNhNCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4wLjEwLnppcCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI0Yjk4ZDgyN2ZjYTk1OTRjODE1MDk4Zjg3NmIyMTQwMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDEzMDg3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNC0yN1QwNDo1NDoyNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNC0yN1QwNDo1NDoyNS40MDUwMzVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy80MC9mNC83MDJmOTc5NzczNWI3M2U2MzBjOGIxNWE1MTc3Y2M3MWI0NmU0ZDIzY2RhMjBjZTkxOWM3Y2JmZmQxMWMvcG9kY2FzdC1hcGktMS4wLjEwLnppcCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjAuMTEiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwMzE4NTg3OTgzZTI4MjFhNmZlYjg1ZDgzNWM2MjM5MjA0NWExYmEwMjZjOTFjOTg4YWM3YmQxZjNlYTEwNzFjIiw=
ICAgICAgICAgICJtZDUiOiAiNjliMTkzYmU5MDljY2NmMzI4Y2QyYjFkMTBhM2I3OWEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOWJjZjQwMjBmMWI0YmJiYjk4ZjJiYWQ5ODhiYzMxZTM2YjliMmI4NzRmMTMwNTcxZDQ3MjRmZjU1ZGFmMzA5MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4wLjExLnppcCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI2OWIxOTNiZTkwOWNjY2YzMjhjZDJiMWQxMGEzYjc5YSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM3OTc1OCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNS0wMlQwMjo0MjowMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNS0wMlQwMjo0MjowMi4xMDMzNzhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wMy8xOC81ODc5ODNlMjgyMWE2ZmViODVkODM1YzYyMzkyMDQ1YTFiYTAyNmM5MWM5ODhhYzdiZDFmM2VhMTA3MWMvcG9kY2FzdC1hcGktMS4wLjExLnppcCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjAuMTIiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI2ZmNhNDZmZWJhYmZhNjZmOThjOGYzM2Y3OWMwODMyODg4YjkxNTBkMTVhYmRmMTQ4ODM1YTRhZTk2YzY1ZDY3Iiw=
ICAgICAgICAgICJtZDUiOiAiNGE1YmJjOGEwODdmMTExNmE5OTUxZDQyMjJiMGIxYmIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZDVmYzJmZTEzMmViOTNkNDJiNTkyYzk2YjhjNzg1MDQyZTExZjE4Y2M4YWE4YThjMzAyMjlhY2RiMjM1MDBmOCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4wLjEyLnppcCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI0YTViYmM4YTA4N2YxMTE2YTk5NTFkNDIyMmIwYjFiYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM3OTc1OCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNS0wOFQwNTo0Mjo0NSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNS0wOFQwNTo0Mjo0NS4zOTYzODRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy82Zi9jYS80NmZlYmFiZmE2NmY5OGM4ZjMzZjc5YzA4MzI4ODhiOTE1MGQxNWFiZGYxNDg4MzVhNGFlOTZjNjVkNjcvcG9kY2FzdC1hcGktMS4wLjEyLnppcCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjAuOSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI5ZDI1ZGM2ZTczZjc1ZjFhOTYxNjlhYmEyNGY5YmM4MjVlY2E3NTI1ZmE0MTgyOTljODczYTM1Mzc0ZTUyNTQzIiw=
ICAgICAgICAgICJtZDUiOiAiNWNmNTE5ZmRiMmY5YzIyNjEyNDAwMWI0NTFiODY3MGUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTYzNDQ4NDdmNTU0MjdkNWZkZmFlOTM2M2RjMTQzY2E0MWJhMTA5ZDJjMDBkYTM1NDk2MjA1MDNjNzhiOGY4MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4wLjkuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1Y2Y1MTlmZGIyZjljMjI2MTI0MDAxYjQ1MWI4NjcwZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDEzMDU1LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNC0yN1QwNDoxNToxNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNC0yN1QwNDoxNToxNy45NjcyMzlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy85ZC8yNS9kYzZlNzNmNzVmMWE5NjE2OWFiYTI0ZjliYzgyNWVjYTc1MjVmYTQxODI5OWM4NzNhMzUzNzRlNTI1NDMvcG9kY2FzdC1hcGktMS4wLjkuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiOTYzZWYxYmE4NDZiZGQyZGMxZmE2YzE3ODc3MzUxM2I1MmUyODY2NGNmNzRhNGJhYTBjZmM5MWZjMjBmNzMxIiw=
ICAgICAgICAgICJtZDUiOiAiM2E5ZTY1NDFmMWVmOGY1OGViZTgyNjcxOTYzOTRlNDYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZDczZjM2ZTk1MjdjYTc1MDMyNzhiMWE4OTRjMWFmNmFlYjVjZGEyY2Q3ODYxZjgyMGNlMzQwY2U2YzUwNzcyYyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4xLjAuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzYTllNjU0MWYxZWY4ZjU4ZWJlODI2NzE5NjM5NGU0NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM5MzkxNyw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMC0yNlQwNDoyOTo1NSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMC0yNlQwNDoyOTo1NS4xODI3NTVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iOS82My9lZjFiYTg0NmJkZDJkYzFmYTZjMTc4NzczNTEzYjUyZTI4NjY0Y2Y3NGE0YmFhMGNmYzkxZmMyMGY3MzEvcG9kY2FzdC1hcGktMS4xLjAuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmMWRiZDdkN2Y2MTg0ODgzN2E2ZWUyN2Q4ZjcyNGU3NTk4ZTMwYzVkNjkyNDMzZGJkZDg0MTNmYjE4MWIyMjFiIiw=
ICAgICAgICAgICJtZDUiOiAiYzc3NmU5MmRlZDE3Mjg1MDc2YTMxMTcwODVmMmVmN2QiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzJjZTYxZjBkNDFiYTBiNTRkYTJlNWM3NWZkYjU5NmE5OGM3YmNkYmMzYjBhZmQ4YWY4YWZlZjVmNDAyNGZlZSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4xLjEuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJjNzc2ZTkyZGVkMTcyODUwNzZhMzExNzA4NWYyZWY3ZCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM4NjE1MSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMy0xMFQxODozMDo1NCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMy0xMFQxODozMDo1NC4yNzczODZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mMS9kYi9kN2Q3ZjYxODQ4ODM3YTZlZTI3ZDhmNzI0ZTc1OThlMzBjNWQ2OTI0MzNkYmRkODQxM2ZiMTgxYjIyMWIvcG9kY2FzdC1hcGktMS4xLjEuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxOWJjOTFlMWQyZTExMTNlNDZhNzBhMDRkYjgxZjliNTNkZDgxODAyODYwYzYzNmY2YTg5NGMyMDNmOTAwYjgzIiw=
ICAgICAgICAgICJtZDUiOiAiNjg2MmZhNTA4NzA2MzNjODczNjRlOWQyNjFiNzhjZmIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiY2ZmNDljMGQ1NmI5NDQ0MDQ5MDdmMmE5OTUyZTIyYjQ1ZjVkYWJkZGYxYmVjMTY4OGE2NDVkNjdiNTI4N2JjNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4xLjIuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI2ODYyZmE1MDg3MDYzM2M4NzM2NGU5ZDI2MWI3OGNmYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM4NjI0OCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMy0xMFQxODozNTozNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMy0xMFQxODozNTozNi4yOTIwMThaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xOS9iYy85MWUxZDJlMTExM2U0NmE3MGEwNGRiODFmOWI1M2RkODE4MDI4NjBjNjM2ZjZhODk0YzIwM2Y5MDBiODMvcG9kY2FzdC1hcGktMS4xLjIuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmNDQwNzkzYTQ1NDU5ODUzNzFhZTJmZGQ1MzNkYTFhZWRkOTQ3M2ViMGRiNzU3ZjhiNThhNWQzYTVjODI0OWRmIiw=
ICAgICAgICAgICJtZDUiOiAiNDc4NmJhMWM5ZTc3NDkwMGNiNGYwODgxZjM4NzUzM2QiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjIwZjU5OGI0MzQ4ZmE2MmU5ODdiOTI3NzRhM2JjOTM3MjZjZTQxZTc3YmFlY2EzOTc4M2I1MDU1OTBhMzU0NSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4xLjMuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI0Nzg2YmExYzllNzc0OTAwY2I0ZjA4ODFmMzg3NTMzZCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDM4NjI0OSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMy0xNFQyMTozOTozOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMy0xNFQyMTozOTozOS43Mjc2NTFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mNC80MC83OTNhNDU0NTk4NTM3MWFlMmZkZDUzM2RhMWFlZGQ5NDczZWIwZGI3NTdmOGI1OGE1ZDNhNWM4MjQ5ZGYvcG9kY2FzdC1hcGktMS4xLjMuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuNCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwN2U0ZDc3NjY3MGY5MjIyYjNmZGE2NTE5YTA2OGI5MDc1MzU1NjA0ZDQ2YWUwNGVhYmJkYTk1YWU4OTY4YzdmIiw=
ICAgICAgICAgICJtZDUiOiAiN2EyYzBjNjQ3YzljOGE4NmUzNzM4MmJmNWViZTI4ZWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNTU0Y2M0MGNhNTYyYTg5NTgwNGRmYWJmN2ZlYmUyMWNkZjQ2YzJjNjA4MzM4MWNjOTg2MDQ0N2Y4YzA2ZDIwYSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAicG9kY2FzdC1hcGktMS4xLjQuemlwIiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3YTJjMGM2NDdjOWM4YTg2ZTM3MzgyYmY1ZWJlMjhlYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My41Iiw=
ICAgICAgICAic2l6ZSI6IDQwNDQ4NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNy0yOFQwNDo1NDoxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNy0yOFQwNDo1NDoxNi4yMzQ3MzZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNy9lNC9kNzc2NjcwZjkyMjJiM2ZkYTY1MTlhMDY4YjkwNzUzNTU2MDRkNDZhZTA0ZWFiYmRhOTVhZTg5NjhjN2YvcG9kY2FzdC1hcGktMS4xLjQuemlwIiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMDdlNGQ3NzY2NzBmOTIyMmIzZmRhNjUxOWEwNjhiOTA3NTM1NTYwNGQ0NmFlMDRlYWJiZGE5NWFlODk2OGM3ZiIs
ICAgICAgICAibWQ1IjogIjdhMmMwYzY0N2M5YzhhODZlMzczODJiZjVlYmUyOGViIiw=
ICAgICAgICAic2hhMjU2IjogIjU1NGNjNDBjYTU2MmE4OTU4MDRkZmFiZjdmZWJlMjFjZGY0NmMyYzYwODMzODFjYzk4NjA0NDdmOGMwNmQyMGEi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInBvZGNhc3QtYXBpLTEuMS40LnppcCIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiN2EyYzBjNjQ3YzljOGE4NmUzNzM4MmJmNWViZTI4ZWIiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNSIs
ICAgICAgInNpemUiOiA0MDQ0ODUs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDctMjhUMDQ6NTQ6MTYiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDctMjhUMDQ6NTQ6MTYuMjM0NzM2WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMDcvZTQvZDc3NjY3MGY5MjIyYjNmZGE2NTE5YTA2OGI5MDc1MzU1NjA0ZDQ2YWUwNGVhYmJkYTk1YWU4OTY4YzdmL3BvZGNhc3QtYXBpLTEuMS40LnppcCIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
