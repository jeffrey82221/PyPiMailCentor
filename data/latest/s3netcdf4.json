ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiTmVpbCBNYXNzZXkiLA==
ICAgICJhdXRob3JfZW1haWwiOiAibmVpbC5tYXNzZXlAc3RmYy5hYy51ayIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA0IC0gQmV0YSIs
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IFNjaWVuY2UvUmVzZWFyY2giLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEJTRCBMaWNlbnNlIiw=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlRvcGljIDo6IFNvZnR3YXJlIERldmVsb3BtZW50IDo6IExpYnJhcmllcyA6OiBQeXRob24gTW9kdWxlcyIs
ICAgICAgIlRvcGljIDo6IFN5c3RlbSA6OiBBcmNoaXZpbmcgOjogQ29tcHJlc3Npb24i
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIjIFMzbmV0Q0RGNFxuXG5BbiBleHRlbnNpb24gcGFja2FnZSB0byBuZXRDREY0LXB5dGhvbiB0byBlbmFibGUgcmVhZGluZyBhbmQgd3JpdGluZyAqKm5ldENERioqXG5maWxlcyBhbmQgKipDRkEtbmV0Y2RmKiogZmlsZXMgZnJvbSAvIHRvIG9iamVjdCBzdG9yZXMgYW5kIHB1YmxpYyBjbG91ZCB3aXRoIGFcblMzIEhUVFAgaW50ZXJmYWNlLCB0byBkaXNrIG9yIHRvIE9QZU5EQVAuXG5cbiMgQ29udGVudHNcbiogW1JlcXVpcmVtZW50c10oI3JlcXVpcmVtZW50cylcbiogW0luc3RhbGxhdGlvbl0oI2luc3RhbGxhdGlvbilcbiogW0NvbmZpZ3VyYXRpb25dKCNjb25maWd1cmF0aW9uKVxuKiBbQWxpYXNlc10oI2FsaWFzZXMpXG4qIFtDYWNoaW5nXSgjY2FjaGluZylcbiogW0JhY2tlbmRzXSgjYmFja2VuZHMpXG4qIFtSZXNvdXJjZSBVc2FnZV0oI3Jlc291cmNlKVxuKiBbV3JpdGluZyBmaWxlc10oI3dyaXRpbmctZmlsZXMpXG4gICogW0NGQS1uZXRDREYgZmlsZXNdKCNjZmEtbmV0Y2RmLWZpbGVzKVxuICAqIFtDcmVhdGluZyBkaW1lbnNpb25zIGFuZCB2YXJpYWJsZXNdKCNjcmVhdGluZy1kaW1lbnNpb25zLWFuZC12YXJpYWJsZXMpXG4gICogW0ZpbGVuYW1lcyBhbmQgZmlsZSBoaWVyYXJjaHkgb2YgQ0ZBIGZpbGVzXSgjZmlsZW5hbWVzLWFuZC1maWxlLWhpZXJhcmNoeS1vZi1jZmEtZmlsZXMpXG4gICogW1dyaXRpbmcgZmllbGQgZGF0YV0oI3dyaXRpbmctZmllbGQtZGF0YSlcbiAgKiBbRmlsZSBzcGxpdHRpbmcgYWxnb3JpdGhtXSgjZmlsZS1zcGxpdHRpbmctYWxnb3JpdGhtKVxuKiBbUmVhZGluZyBmaWxlc10oI3JlYWRpbmctZmlsZXMpXG4gICogW1JlYWRpbmcgdmFyaWFibGVzXSgjcmVhZGluZy12YXJpYWJsZXMpXG4gICogW1JlYWRpbmcgbWV0YWRhdGFdKCNyZWFkaW5nLW1ldGFkYXRhKVxuICAqIFtSZWFkaW5nIGZpZWxkIGRhdGFdKCNyZWFkaW5nLWZpZWxkLWRhdGEpXG4qIFtMaXN0IG9mIGV4YW1wbGVzXSgjbGlzdC1vZi1leGFtcGxlcylcblxuIyBSZXF1aXJlbWVudHNcblMzLW5ldENERjQgcmVxdWlyZXMgUHl0aG9uIDMuNyBvciBsYXRlci5cblxuSXQgYWxzbyByZXF1aXJlcyB0aGUgZm9sbG93aW5nIHBhY2thZ2VzOlxuKiBudW1weT09MS4xOS40XG4qIEN5dGhvbj09MC4yOS4yMVxuKiBuZXRDREY0PT0xLjUuNS4xXG4qIGJvdG9jb3JlPT0xLjE5LjIwXG4qIGFpb2JvdG9jb3JlPT0xLjEuMlxuKiBwc3V0aWw9PTUuNy4zXG5cbihUaGVzZSBhcmUgZnVsZmlsbGVkIGJ5IGEgcGlwIGluc3RhbGxhdGlvbiwgc28gaXQgaXMgbm90IG5lY2Vzc2FyeSB0byBpbnN0YWxsXG50aGVtIGlmIHlvdSBhcmUgaW5zdGFsbGluZyB0aGUgcGFja2FnZSB2aWEgcGlwLCBhcyBiZWxvdy4pXG5cbltbVG9wXV0oI2NvbnRlbnRzKVxuXG4jIEluc3RhbGxhdGlvblxuXG5TM25ldENERjQgaXMgZGVzaWduZWQgdG8gYmUgaW5zdGFsbGVkIGluIHVzZXIgc3BhY2UsIHdpdGhvdXQgdGhlIHVzZXIgaGF2aW5nXG5gcm9vdGAgb3IgYHN1ZG9gIHByaXZpbGVnZXMuICBTeXN0ZW0gd2lkZSBpbnN0YWxsYXRpb24gaXMgYWxzbyBzdXBwb3J0ZWQuICBJdFxuaXMgcmVjb21tZW5kZWQgdG8gaW5zdGFsbCBTM25ldENERjQgaW50byBhIHZpcnR1YWwgZW52aXJvbm1lbnQsIHJhdGhlciB0aGFuXG51c2luZyB0aGUgc3lzdGVtIFB5dGhvbi4gIFMzbmV0Q0RGNCBkb2VzIG5vdCByZWx5IG9uIGFueSBleHRlcm5hbCBzZXJ2ZXJzLFxuYmVzaWRlcyB0aGUgc3RvcmFnZSBzeXN0ZW1zLCBpdCBpcyBydW4gZW50aXJlbHkgb24gdGhlIGhvc3QgbWFjaGluZS5cblxuczNuZXRDREY0IGNhbiBiZSBpbnN0YWxsZWQgZWl0aGVyIGZyb20gUHlQaSBvciBkaXJlY3RseSBmcm9tIHRoZSBHaXRIdWIgcmVwb3NpdG9yeS5cblxuIyMjIEZyb20gUHlQaVxuXG4xLiBDcmVhdGUgYSBQeXRob24gMyB2aXJ0dWFsIGVudmlyb25tZW50OlxuXG4gIGBweXRob24zIC1tIHZlbnYgL3BhdGgvdG8vdmVudmBcblxuMi4gQWN0aXZhdGUgdGhlIHZpcnR1YWwgZW52aXJvbm1lbnQ6XG5cbiAgYHNvdXJjZSAvcGF0aC90by92ZW52L2Jpbi9hY3RpdmF0ZWBcblxuMy4gSW5zdGFsbGluZyBTM25ldENERjQgcmVxdWlyZXMgYSB2ZXJzaW9uIG9mIGBwaXBgID4gMTAuMC4gIFRvIGluc3RhbGwgdGhlXG5sYXRlc3QgdmVyc2lvbiBvZiBwaXAgaW50byB0aGUgdmlydHVhbCBlbnZpcm9ubWVudCB1c2UgdGhlIGNvbW1hbmQ6XG5cbiAgYHBpcCBpbnN0YWxsIC0tdXBncmFkZSBwaXBgXG5cbjQuIEluc3RhbGwgZnJvbSBQeVBpOlxuXG4gIGBwaXAgaW5zdGFsbCBTM25ldENERjRgXG5cbjUuIENvcHkgdGhlIGNvbmZpZ3VyYXRpb24gdGVtcGxhdGUgZmlsZSBmcm9tIGBjb25maWcvLnMzbmMuanNvbi50ZW1wbGF0ZWAgdG9cbiAgYH4vLnMzbmMuanNvbmAgYW5kIGZpbGwgaW4gdGhlIHZhbHVlcyBmb3IgdGhlIHZhcmlhYmxlcy4gIFNlZSB0aGUgc2VjdGlvblxuICBbQ29uZmlndXJhdGlvbl0oI2NvbmZpZ3VyYXRpb24pLlxuXG42LiBSdW4gYSB0ZXN0IHRvIGVuc3VyZSB0aGUgcGFja2FnZSBoYXMgaW5zdGFsbGVkIGNvcnJlY3RseTpcblxuICAgIGBweXRob24gdGVzdC90ZXN0X3MzRGF0YXNldC5weWBcblxuIyMjIEZyb20gR2l0SHViICAgIFxuXG4wLiBVc2VycyBvbiB0aGUgU1RGQy9ORVJDIEpBU01JTiBzeXN0ZW0gd2lsbCBoYXZlIHRvIGFjdGl2YXRlIFB5dGhvbiAzLjcgYnlcbnVzaW5nIHRoZSBjb21tYW5kOlxuXG4gICBgbW9kdWxlIGxvYWQgamFzcHlgXG5cbjEuIENyZWF0ZSBhIFB5dGhvbiAzIHZpcnR1YWwgZW52aXJvbm1lbnQ6XG5cbiAgYHB5dGhvbjMgLW0gdmVudiAvcGF0aC90by92ZW52YFxuXG4yLiBBY3RpdmF0ZSB0aGUgdmlydHVhbCBlbnZpcm9ubWVudDpcblxuICBgc291cmNlIC9wYXRoL3RvL3ZlbnYvYmluL2FjdGl2YXRlYFxuXG4zLiBJbnN0YWxsaW5nIFMzbmV0Q0RGNCByZXF1aXJlcyBhIHZlcnNpb24gb2YgYHBpcGAgPiAxMC4wLiAgVG8gaW5zdGFsbCB0aGVcbmxhdGVzdCB2ZXJzaW9uIG9mIHBpcCBpbnRvIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50IHVzZSB0aGUgY29tbWFuZDpcblxuICBgcGlwIGluc3RhbGwgLS11cGdyYWRlIHBpcGBcblxuNC4gSW5zdGFsbCB0aGUgUzNuZXRDREY0IGxpYnJhcnksIGRpcmVjdGx5IGZyb20gdGhlIGdpdGh1YiByZXBvc2l0b3J5OlxuXG4gIGBwaXAgaW5zdGFsbCAtZSBnaXQraHR0cHM6Ly9naXRodWIuY29tL2NlZGFkZXYvUzMtbmV0Y2RmLXB5dGhvbi5naXQjZWdnPVMzbmV0Q0RGNGBcblxuNS4gQ29weSB0aGUgY29uZmlndXJhdGlvbiB0ZW1wbGF0ZSBmaWxlIGZyb20gYGNvbmZpZy8uczNuYy5qc29uLnRlbXBsYXRlYCB0b1xuYH4vLnMzbmMuanNvbmAgYW5kIGZpbGwgaW4gdGhlIHZhbHVlcyBmb3IgdGhlIHZhcmlhYmxlcy4gIFNlZSB0aGUgc2VjdGlvblxuW0NvbmZpZ3VyYXRpb25dKCNjb25maWd1cmF0aW9uKS5cblxuNi4gUnVuIGEgdGVzdCB0byBlbnN1cmUgdGhlIHBhY2thZ2UgaGFzIGluc3RhbGxlZCBjb3JyZWN0bHk6XG5cbiAgYHB5dGhvbiB0ZXN0L3Rlc3RfczNEYXRhc2V0LnB5YFxuXG43LiBVc2VycyBvbiB0aGUgU1RGQy9ORVJDIEpBU01JTiBzeXN0ZW0gd2lsbCBoYXZlIHRvIHJlcGVhdCBzdGVwIDAgZXZlcnkgdGltZVxudGhleSB3aXNoIHRvIHVzZSBTM25ldENERjQgdmlhIHRoZSB2aXJ0dWFsIGVudmlyb25tZW50LlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyBDb25maWd1cmF0aW9uXG5TM25ldENERjQgcmVsaWVzIG9uIGEgY29uZmlndXJhdGlvbiBmaWxlIHRvIHJlc29sdmUgZW5kcG9pbnRzIGZvciB0aGUgUzNcbnNlcnZpY2VzLCBhbmQgdG8gY29udHJvbCB2YXJpb3VzIGFzcGVjdHMgb2YgdGhlIHdheSB0aGUgcGFja2FnZSBvcGVyYXRlcy4gIFRoaXNcbmNvbmZpZyBmaWxlIGlzIGEgSlNPTiBmaWxlIGFuZCBpcyBsb2NhdGVkIGluIHRoZSB1c2VyJ3MgaG9tZSBkaXJlY3Rvcnk6XG5cbmB+Ly5zM25jLmpzb25gXG5cbkluIHRoZSBnaXQgcmVwb3NpdG9yeSBhIHRlbXBsYXRpc2VkIGV4YW1wbGUgb2YgdGhpcyBjb25maWd1cmF0aW9uIGZpbGUgaXNcbnByb3ZpZGVkOlxuXG5gY29uZmlnLy5zM25jLmpzb24udGVtcGxhdGVgXG5cblRoaXMgY2FuIGJlIGNvcGllZCB0byB0aGUgdXNlcidzIGhvbWUgZGlyZWN0b3J5LCBhbmQgdGhlIHRlbXBsYXRlIHJlbmFtZWQgdG9cbmB+Ly5zM25jLmpzb25gLiAgXG5cbkFsdGVybmF0aXZlbHksIGFuIGVudmlyb25tZW50IHZhcmlhYmxlIGBTM19OQ19DT05GSUdgIGNhbiBiZSBzZXQgdG8gZGVmaW5lIHRoZVxubG9jYXRpb24gYW5kIG5hbWUgb2YgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZS4gIFRoaXMgY2FuIGFsc28gYmUgc2V0IGluIGNvZGUsXG5iZWZvcmUgdGhlIGltcG9ydCBvZiB0aGUgUzNuZXRDREY0IG1vZHVsZTpcblxuICAgIGltcG9ydCBvc1xuICAgIG9zLmVudmlyb25bXCJTM19OQ19DT05GSUdcIl0gPSBcIi9Vc2Vycy9uZWlsLy5zM25jX2RpZmZlcmVudF9jb25maWcuanNvblwiXG4gICAgZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0XG5cbk9uY2UgdGhlIGNvbmZpZyBmaWxlIGhhcyBiZWVuIGNvcGllZCwgdGhlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUgc2hvdWxkIHRoZW5cbmJlIGZpbGxlZCBpbi4gIFRoaXMgZmlsZSBpcyBhIFtqaW5qYTJdKGh0dHA6Ly9qaW5qYS5wb2Nvby5vcmcvZG9jcy8yLjEwLylcbnRlbXBsYXRlIG9mIGEgSlNPTiBmaWxlLCBhbmQgc28gY2FuIGJlIHVzZWQgd2l0aGluIGFuXG5bYW5zaWJsZV0oaHR0cHM6Ly93d3cuYW5zaWJsZS5jb20vKSBkZXBsb3ltZW50LiAgXG5FYWNoIGVudHJ5IGluIHRoZSBmaWxlIGhhcyBhIGtleTp2YWx1ZSBwYWlyLiAgQW4gZXhhbXBsZSBvZiB0aGUgZmlsZSBpcyBnaXZlblxuYmVsb3c6XG5cbiAgICB7XG4gICAgICAgIFwidmVyc2lvblwiOiBcIjlcIixcbiAgICAgICAgXCJob3N0c1wiOiB7XG4gICAgICAgICAgICBcInMzOi8vdGVuYW5jeS0wXCI6IHtcbiAgICAgICAgICAgICAgICBcImFsaWFzXCI6IFwidGVuYW5jeS0wXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidXJsXCI6IFwiaHR0cDovL3RlbmFuY3ktMC5qYy5ybC5hYy51a1wiLFxuICAgICAgICAgICAgICAgICAgICBcImNyZWRlbnRpYWxzXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWNjZXNzS2V5XCI6IFwiYmxhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VjcmV0S2V5XCI6IFwiYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBcImJhY2tlbmRcIjogXCJzM2Fpb0ZpbGVPYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgXCJhcGlcIjogXCJTM3Y0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJiYWNrZW5kc1wiOiB7XG4gICAgICAgICAgICBcInMzYWlvRmlsZU9iamVjdFwiIDoge1xuICAgICAgICAgICAgICAgIFwibWF4aW11bV9wYXJ0X3NpemVcIjogXCI1ME1CXCIsXG4gICAgICAgICAgICAgICAgXCJtYXhpbXVtX3BhcnRzXCI6IDgsXG4gICAgICAgICAgICAgICAgXCJlbmFibGVfbXVsdGlwYXJ0X2Rvd25sb2FkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJlbmFibGVfbXVsdGlwYXJ0X3VwbG9hZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiY29ubmVjdF90aW1lb3V0XCI6IDMwLjAsXG4gICAgICAgICAgICAgICAgXCJyZWFkX3RpbWVvdXRcIjogMzAuMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiczNGaWxlT2JqZWN0XCIgOiB7XG4gICAgICAgICAgICAgICAgXCJtYXhpbXVtX3BhcnRfc2l6ZVwiOiBcIjUwTUJcIixcbiAgICAgICAgICAgICAgICBcIm1heGltdW1fcGFydHNcIjogNCxcbiAgICAgICAgICAgICAgICBcImVuYWJsZV9tdWx0aXBhcnRfZG93bmxvYWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJlbmFibGVfbXVsdGlwYXJ0X3VwbG9hZFwiOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBcImNvbm5lY3RfdGltZW91dFwiOiAzMC4wLFxuICAgICAgICAgICAgICAgIFwicmVhZF90aW1lb3V0XCI6IDMwLjBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgXCJjYWNoZV9sb2NhdGlvblwiOiBcIi9jYWNoZV9sb2NhdGlvbi8uY2FjaGVcIixcbiAgICAgICAgXCJyZXNvdXJjZV9hbGxvY2F0aW9uXCIgOiB7XG4gICAgICAgICAgICBcIm1lbW9yeVwiOiBcIjFHQlwiLFxuICAgICAgICAgICAgXCJmaWxlaGFuZGxlc1wiOiAyMFxuICAgICAgICB9XG4gICAgfVxuXG4qIGB2ZXJzaW9uYCBpbmRpY2F0ZXMgd2hpY2ggdmVyc2lvbiBvZiB0aGUgY29uZmlndXJhdGlvbiBmaWxlIHRoaXMgaXMuXG4qIGBob3N0c2AgY29udGFpbnMgYSBsaXN0IG9mIG5hbWVkIGhvc3RzIGFuZCB0aGVpciByZXNwZWN0aXZlIGNvbmZpZ3VyYXRpb25cbmRldGFpbHMuXG4gICogYHMzOi8vdGVuYW5jeS0wYCBjb250YWlucyB0aGUgZGVmaW5pdGlvbiBvZiBhIHNpbmdsZSBob3N0IGNhbGxlZFxuICBgdGVuYW5jeS0wYC4gIEZvciBlYWNoIGhvc3QgYSBudW1iZXIgb2YgY29uZmlndXJhdGlvbiBkZXRhaWxzIG5lZWQgdG8gYmVcbiAgc3VwcGxpZWQ6XG4gICAgKiBgYWxpYXNgIHRoZSBhbGlhcyBmb3IgdGhlIFMzIHNlcnZlci4gIFNlZSB0aGUgW0FsaWFzZXNdKCNhbGlhc2VzKVxuICAgIHNlY3Rpb24uXG4gICAgKiBgdXJsYCB0aGUgRE5TIHJlc29sdmFibGUgVVJMIGZvciB0aGUgUzMgc2VydmVyLCB3aXRoIG9wdGlvbmFsIHBvcnRcbiAgICBudW1iZXIuXG4gICAgKiBgY3JlZGVudGlhbHNgIGNvbnRhaW5zIHR3byBrZXlzOlxuICAgICAgICAqIGBhY2Nlc3NLZXlgIHRoZSB1c2VyJ3MgYWNjZXNzIGtleSBmb3IgdGhlIFMzIGVuZHBvaW50LlxuICAgICAgICAqIGBzZWNyZXRLZXlgIHRoZSB1c2VyJ3Mgc2VjcmV0IGtleSAvIHBhc3N3b3JkIGZvciB0aGUgUzMgZW5kcG9pbnQuXG4gICAgKiBgYmFja2VuZGAgd2hpY2ggYmFja2VuZCB0byB1c2UgdG8gd3JpdGUgdGhlIGZpbGVzIHRvIHRoZSBTMyBzZXJ2ZXIuICBTZWVcbiAgICB0aGUgW0JhY2tlbmRzXSgjYmFja2VuZHMpIHNlY3Rpb24uXG4gICAgKiBgYXBpYCB0aGUgYXBpIHZlcnNpb24gdXNlZCB0byBhY2Nlc3MgdGhlIFMzIGVuZHBvaW50LlxuKiBgYmFja2VuZHNgIGNvbnRhaW5zIGxvY2FsaXNlZCBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGZvciBlYWNoIG9mIHRoZVxuYmFja2VuZHMgd2hpY2ggbWF5IGJlIHVzZWQgKGlmIGluY2x1ZGVkIGluIGEgYGhvc3RgIGRlZmluaXRpb24pIHRvIHdyaXRlIHRoZVxuZmlsZXMgdG8gdGhlIFMzIHNlcnZlci4gIFNlZSB0aGUgW0JhY2tlbmRzXSgjYmFja2VuZHMpIHNlY3Rpb24gZm9yIG1vcmVcbmRldGFpbHMgb24gYmFja2VuZHMuXG4gICAgKiBgZW5hYmxlX211bHRpcGFydF9kb3dubG9hZGAgYWxsb3cgdGhlIGJhY2tlbmQgdG8gc3BsaXQgZmlsZXMgZmV0Y2hlZFxuICAgIGZyb20gUzMgaW50byBtdWx0aXBsZSBwYXJ0cyB3aGVuIGRvd25sb2FkaW5nLlxuICAgICogYGVuYWJsZV9tdWx0aXBhcnRfdXBsb2FkYCBhbGxvdyB0aGUgYmFja2VuZCB0byBzcGxpdCBmaWxlcyB3aGVuXG4gICAgdXBsb2FkaW5nLlxuICAgIFRoZSBhZHZhbnRhZ2Ugb2Ygc3BsaXR0aW5nIHRoZSBmaWxlcyBpbnRvIHBhcnRzIGlzIHRoYXQgdGhleSBjYW4gYmVcbiAgICB1cGxvYWRlZCBvciBkb3dubG9hZGVkIGFzeW5jaHJvbm91c2x5LCB3aGVuIHRoZSBiYWNrZW5kIHN1cHBvcnRzXG4gICAgYXN5bmNocm9ub3VzIHRyYW5zZmVycy5cbiAgICAqIGBtYXhpbXVtX3BhcnRfc2l6ZWAgdGhlIG1heGltdW0gc2l6ZSBmb3IgZWFjaCBwYXJ0IG9mIHRoZSBmaWxlIGNhbiByZWFjaFxuICAgIGJlZm9yZSBpdCBpcyB1cGxvYWRlZCBvciB0aGUgc2l6ZSBvZiBlYWNoIHBhcnQgd2hlbiBkb3dubG9hZGluZyBhIGZpbGUuXG4gICAgKiBgbWF4aW11bV9wYXJ0c2AgdGhlIG1heGltdW0gbnVtYmVyIG9mIGZpbGUgcGFydHMgdGhhdCBhcmUgaGVsZCBpbiBtZW1vcnlcbiAgICBiZWZvcmUgdGhleSBhcmUgdXBsb2FkZWQgb3IgdGhlIG51bWJlciBvZiBmaWxlIHBhcnRzIHRoYXQgYXJlIGRvd25sb2FkZWRcbiAgICBhdCBvbmNlLCBmb3IgYXN5bmNocm9ub3VzIGJhY2tlbmRzLlxuICAgICogYGNvbm5lY3RfdGltZW91dGAgdGhlIG51bWJlciBvZiBzZWNvbmRzIHRoYXQgYSBjb25uZWN0aW9uIGF0dGVtcHQgd2lsbFxuICAgIGJlIG1hZGUgZm9yIGJlZm9yZSB0aW1pbmcgb3V0LlxuICAgICogYHJlYWRfdGltZW91dGAgdGhlIG51bWJlciBvZiBzZWNvbmRzIHRoYXQgYSByZWFkIGF0dGVtcHQgd2lsbCBiZSBtYWRlXG4gICAgYmVmb3JlIHRpbWluZyBvdXQuXG4qIGBjYWNoZV9sb2NhdGlvbmAgIFMzbmV0Q0RGNCBjYW4gcmVhZCBhbmQgd3JpdGUgdmVyeSBsYXJnZSBhcnJheXMgdGhhdCBhcmVcbnNwbGl0IGludG8gKipzdWItYXJyYXlzKiouIFRvIGVuYWJsZSB2ZXJ5IGxhcmdlIGFycmF5cyB0byBiZSByZWFkLCBTM25ldENERjRcbnVzZXMgTnVtcHkgbWVtb3J5IG1hcHBlZCBhcnJheXMuICBgY2FjaGVfbG9jYXRpb25gIGNvbnRhaW5zIHRoZSBsb2NhdGlvbiBvZlxudGhlc2UgbWVtb3J5IG1hcHBlZCBhcnJheSBmaWxlcy4gIFNlZSBbQ2FjaGluZ10oI2NhY2hpbmcpIHNlY3Rpb24gYmVsb3cuXG4qIGByZXNvdXJjZV9hbGxvY2F0aW9uYCBjb250YWlucyBsb2NhbGlzZWQgaW5mb3JtYXRpb24gYWJvdXQgaG93IG11Y2hcbnJlc291cmNlcyBlYWNoIGluc3RhbmNlIG9mIFMzbmV0Q0RGNCBzaG91bGQgdXNlIG9uIHRoZSBob3N0IG1hY2hpbmUuICBTZWUgdGhlXG50aGUgW1Jlc291cmNlIFVzYWdlXSgjcmVzb3VyY2UpIHNlY3Rpb24gYmVsb3cuXG5JdCBjb250YWlucyB0d28ga2V5czpcbiAgICAqIGBtZW1vcnlgIHRoZSBhbW91bnQgb2YgUkFNIHRvIGRlZGljYXRlIHRvIHRoaXMgaW5zdGFuY2Ugb2YgUzNuZXRDREY0LlxuICAgICogYGZpbGVfaGFuZGxlc2AgdGhlIG51bWJlciBvZiBmaWxlIGhhbmRsZXMgdG8gZGVkaWNhdGUgdG8gdGhpcyBpbnN0YW5jZVxuICAgIG9mIFMzbmV0Q0RGNFxuXG4qTm90ZSB0aGF0IHNpemVzIGNhbiBiZSBleHByZXNzZWQgaW4gdW5pdHMgb3RoZXIgdGhhbiBieXRlcyBieSBzdWZmaXhpbmcgdGhlXG5zaXplIHdpdGggYSBtYWduaXR1ZGUgaWRlbnRpZmllcjosIGtpbG9ieXRlcyAoYGtCYCksIG1lZ2FieXRlcyAoYE1CYCksXG5naWdhYnl0ZXMgKGBHQmApLCB0ZXJhYnl0ZXMgKGBUQmApLCBleGFieXRlcyAoYEVCYCksIHpldHRhYnl0ZXMgKGBaQmApIG9yXG55b3R0YWJ5dGVzIChgWUJgKS4qXG5cbltbVG9wXV0oI2NvbnRlbnRzKVxuXG4jIyBBbGlhc2VzXG5UbyBlbmFibGUgUzNuZXRDREY0IHRvIHdyaXRlIHRvIGRpc2ssIE9QZU5EQVAgYW5kIFMzIG9iamVjdCBzdG9yZSwgYWxpYXNlcyBhcmVcbnVzZWQgdG8gaWRlbnRpZnkgUzMgc2VydmVycy4gIFRoZXkgcHJvdmlkZSBhbiBlYXN5IHRvIHJlbWVtYmVyIChhbmQgdHlwZSlcbnNob3J0aGFuZCBmb3IgdGhlIHVzZXIgc28gdGhhdCB0aGV5IGRvbid0IGhhdmUgdG8gdXNlIHRoZSBETlMgcmVzb2x2ZWQgVVJMIGFuZFxucG9ydCBudW1iZXIgZm9yIGVhY2ggUzMgb2JqZWN0IGFjY2Vzcy4gIFdoZW4gY3JlYXRpbmcgYSBuZXRDREY0IGBzM0RhdGFzZXRgXG5vYmplY3QsIGVpdGhlciB0byByZWFkIG9yIHdyaXRlLCB0aGUgdXNlciBzdXBwbGllcyBhIGZpbGVuYW1lLiAgVG8gaW5kaWNhdGVcbnRoYXQgdGhlIGZpbGUgc2hvdWxkIGJlIHdyaXR0ZW4gdG8gb3IgcmVhZCBmcm9tIGEgUzMgc2VydmVyLCB0aGUgc3RyaW5nXG5tdXN0IHN0YXJ0IHdpdGggYHMzOi8vYC4gIEFmdGVyIHRoaXMgbXVzdCBmb2xsb3cgdGhlIGFsaWFzZWQgc2VydmVyIG5hbWUsIGFzXG5kZWZpbmVkIGluIHRoZSBjb25maWcgZmlsZSBhYm92ZS4gIEFmdGVyIHRoaXMgYWxpYXNlZCBzZXJ2ZXIgbmFtZSBhIGJ1Y2tldFxubmFtZSB3aWxsIGZvbGxvdywgZm9yIGV4YW1wbGUgdG8gcmVhZCBhIG5ldENERiBmaWxlIGNhbGxlZCBgdGVzdDIubmNgIGZyb20gdGhlXG5gdGVzdGAgYnVja2V0IG9uIHRoZSBgczM6Ly90ZW5hbmN5LTBgIHNlcnZlciwgdGhlIHVzZXIgd291bGQgdXNlIHRoaXMgY29kZTpcblxuKkV4YW1wbGUgMTogb3BlbiBhIG5ldENERiBmaWxlIGZyb20gYSBTMyBzdG9yYWdlIHVzaW5nIHRoZSBhbGlhcyBcInRlbmFuY3ktMFwiKjxhXG5uYW1lPWV4YW1wbGUtMT48L2E+XG5cbmBgYFxuZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0IGFzIERhdGFzZXRcbnRlc3RfZGF0YXNldCA9IERhdGFzZXQoXCJzMzovL3RlbmFuY3ktMC90ZXN0L3Rlc3QyLm5jXCIsIFwiclwiKVxuYGBgXG5cbk9uIGNyZWF0aW9uIG9mIHRoZSBgczNEYXRhc2V0YCBvYmplY3QsIHRoZSBTM25ldENERjQgcGFja2FnZSByZWFkcyB0aGVcbmZpbGVuYW1lLCBkZXRlcm1pbmVzIHRoYXQgdGhlIGZpbGVuYW1lIHN0YXJ0cyB3aXRoIGBzMzovL2AsIHJlYWRzIHRoZSBuZXh0XG5wYXJ0IG9mIHRoZSBzdHJpbmcgdXAgdG8gdGhlIG5leHQgYC9gICh3aGljaCBlcXVhdGVzIHRvIGB0ZW5hbmN5LTBgIGluIHRoaXNcbmNhc2VzKSBhbmQgc2VhcmNoZXMgdGhyb3VnaCB0aGUgYWxpYXNlcyBkZWZpbmVkIGluIHRoZSBgfi8uczNuYy5qc29uYCBmaWxlIHRvXG5maW5kIGEgbWF0Y2hpbmcgYWxpYXMuICBJZiBvbmUgaXMgbm90IGZvdW5kIGl0IHdpbGwgcmV0dXJuIGFuIGVycm9yIG1lc3NhZ2UsXG5pZiBpdCBpcyBmb3VuZCB0aGVuIGl0IHdpbGwgZXN0YWJsaXNoIGEgY29ubmVjdGlvbiB0byB0aGF0IFMzIHNlcnZlciwgdXNpbmcgdGhlXG5gdXJsYCwgYGFjY2Vzc0tleWAgYW5kIGBzZWNyZXRLZXlgIGRlZmluZWQgZm9yIHRoYXQgc2VydmVyLiAgSXQgaXMgb3ZlciB0aGlzXG5jb25uZWN0aW9uIHRoYXQgYWxsIHRoZSBkYXRhIHRyYW5zZmVycyBmb3IgdGhpcyBgczNEYXRhc2V0YCB0YWtlIHBsYWNlLlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMgQ2FjaGluZ1xuSWYgdGhlIHVzZXIgcmVxdWVzdHMgdG8gcmVhZCBhIHZhcmlhYmxlLCBvciBhIHNsaWNlIG9mIGEgdmFyaWFibGUsIHRoYXQgaXNcbmxhcmdlciB0aGFuIGVpdGhlciB0aGUgaG9zdCBtYWNoaW5lcyBwaHlzaWNhbCBtZW1vcnkgb3IgdGhlXG5gcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YCBzZXR0aW5nIGluIGB+Ly5zM25jLmpzb25gLCB0aGVuIFMzbmV0Q0RGNCB3aWxsXG51c2UgdHdvIHN0cmF0ZWdpZXMgdG8gZW5hYmxlIHJlYWRpbmcgdmVyeSBsYXJnZSBhcnJheXM6XG4qIGEgTnVtcHkgbWVtb3J5IG1hcHBlZCBhcnJheSBpcyB1c2VkIGFzIHRoZSBcInRhcmdldCBhcnJheVwiLCB3aGljaCB3aWxsXG5jb250YWluIHRoZSBkYXRhIHJlcXVlc3RlZCBieSB0aGUgdXNlci4gIFRoaXMgaXMgc3RvcmVkIGluIGEgbG9jYWxseSBjYWNoZWRcbmZpbGUsIGluIHRoZSBgY2FjaGVfbG9jYXRpb25gIHJvb3QgZGlyZWN0b3J5LiAgVGhlc2UgZmlsZXMgYXJlIGRlbGV0ZWQgaW4gdGhlXG5kZXN0cnVjdG9yIG9mIFMzbmV0Q0RGNCAtIGkuZS4gd2hlbiB0aGUgcHJvZ3JhbSBleGl0cywgb3IgdGhlIFMzbmV0Q0RGNCBvYmplY3RcbmdvZXMgb3V0IG9mIHNjb3BlLiAgSG93ZXZlciwgZHVyaW5nIHByb2Nlc3NpbmcsIHRoaXMgZGlyZWN0b3J5IGhhcyB0aGVcbnBvdGVudGlhbCB0byBncm93IHF1aXRlIGxhcmdlIHNvIGFkZXF1YXRlIHByb3Zpc2lvbiBzaG91bGQgYmUgbWFkZSBvbiBkaXNrIGZvclxuaXQuXG4qIElmIHRoZSBmaWxlIGJlaW5nIHJlYWQgaXMgYSAqKkNGQS1uZXRDREYqKiBmaWxlLCByZWZlcmVuY2luZyAqKnN1Yi1hcnJheSoqXG5maWxlcywgdGhlbiB0aGUgKipzdWItYXJyYXkqKiBmaWxlcyBhcmUgc3RyZWFtZWQgaW50byBtZW1vcnkgKGZvciBmaWxlcyBvbiBTM1xuc3RvcmFnZSkgb3IgcmVhZCBmcm9tIGRpc2suICBJZiB0aGUgYW1vdW50IG9mIG1lbW9yeSB1c2VkIGV4Y2VlZHMgdGhlXG5gcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YCBjb25maWcgc2V0dGluZywgb3IgdGhlIG51bWJlciBvZiBvcGVuIGZpbGVzXG5leGNlZWRzIHRoZSBgcmVzb3VyY2VfYWxsb2NhdGlvbjogZmlsZWhhbmRsZXNgIGNvbmZpZyBzZXR0aW5nLCB0aGVuIHRoZSBsYXN0XG5hY2Nlc3NlZCAqKnN1Yi1hcnJheSoqIGZpbGUgaXMgY2xvc2VkLiAgVGhpcyBtZWFucyBpdCB3aWxsIGJlIHJlbW92ZWQgZnJvbVxubWVtb3J5LCBvciB0aGUgZmlsZSBoYW5kbGUgd2lsbCBiZSBmcmVlZCwgYWxsb3dpbmcgYW5vdGhlciAqKnN1Yi1hcnJheSoqIGZpbGVcbnRvIGJlIHJlYWQuXG5cblNlZSB0aGUgW1Jlc291cmNlIFVzYWdlXSgjcmVzb3VyY2UpIHNlY3Rpb24gYmVsb3cgZm9yIG1vcmUgaW5mb3JtYXRpb24gb25cbnRoaXMgXCJtZW1vcnkgYW5kIGZpbGUgc2h1ZmZsaW5nXCIgYmVoYXZpb3VyLlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMgQmFja2VuZHNcblxuSW4gUzMtbmV0Q0RGNCwgYSBiYWNrZW5kIHJlZmVycyB0byBhIHNldCBvZiByb3V0aW5lcyB0aGF0IGhhbmRsZXMgdGhlXG5pbnRlcmZhY2UgdG8gYSBzdG9yYWdlIHN5c3RlbS4gIFRoZSBpbnRlcmZhY2UgaW5jbHVkZXMgcmVhZCBhbmQgd3JpdGUsIGJ1dFxuYWxzbyBnYXRoZXJpbmcgZmlsZSBpbmZvcm1hdGlvbiBhbmQgZmlsZSBsaXN0aW5ncy4gIFMzLW5ldENERjQgaGFzIGEgcGx1Z2dhYmxlXG5iYWNrZW5kIGFyY2hpdGVjdHVyZSwgYW5kIHNvIGNhbiBpbnRlcmFjdCB3aXRoIG5ldyBzdG9yYWdlIHN5c3RlbXMgYnkgd3JpdGluZ1xuYSBuZXcgYmFja2VuZCBwbHVnaW4uICBUaGUgYmFja2VuZCBwbHVnaW5zIGFyZSBleHRlbnNpb25zIG9mIHRoZVxuYGlvLkJ1ZmZlcmVkSU9CYXNlYCBQeXRob24gY2xhc3MgYW5kIGltcGxlbWVudCBQeXRob24gZmlsZSBvYmplY3QgbWV0aG9kcywgc3VjaFxuYXMgYHRlbGxgLCBgc2Vla2AsIGByZWFkYCBhbmQgYHdyaXRlYC4gIFRoaXMgZW5hYmxlcyBpbnRlcmFjdGlvbiB3aXRoIHRoZVxuYmFja2VuZCBhcyB0aG91Z2ggdGhleSBhcmUgUE9TSVggZGlza3MuXG5UaGVzZSBiYWNrZW5kcyBoYXZlIHRvIGJlIGNvbmZpZ3VyZWQgb24gYSBob3N0IGJ5IGhvc3QgYmFzaXMgYnkgc2V0dGluZyB0aGVcbmBob3N0OiBiYWNrZW5kYCB2YWx1ZSBpbiB0aGUgYH4vLnMzbmMuanNvbmAgY29uZmlnIGZpbGUuICBDdXJyZW50bHkgdGhlcmUgYXJlXG50d28gYmFja2VuZHM6XG5cbiogYF9zM2Fpb0ZpbGVPYmplY3RgOiBUaGlzIGJhY2tlbmQgZW5hYmxlcyBhc3luY2hyb25vdXMgdHJhbnNmZXJzIHRvIGEgUzNcbmNvbXBhdGlibGUgc3RvcmFnZSBzeXN0ZW0uICBJdCBpcyB0aGUgZmFzdGVzdCBiYWNrZW5kIGZvciBTMyBhbmQgc2hvdWxkIGJlIHVzZWRcbmluIHByZWZlcmVuY2UgdG8gYF9zM0ZpbGVPYmplY3RgLlxuKiBgX3MzRmlsZU9iamVjdGA6IFRoaXMgaXMgYSBzaW1wbGVyLCBzeW5jaHJvbm91cyBpbmZlcmZhY2UgdG8gUzMgc3RvcmFnZVxuc3lzdGVtcy4gIEl0IGNhbiBiZSB1c2VkIGlmIHRoZXJlIGlzIGEgcHJvYmxlbSB1c2luZyBgX3MzYWlvRmlsZU9iamVjdGBcblxuW1tUb3BdXSgjY29udGVudHMpXG5cbiMjIFJlc291cmNlIFVzYWdlXG5cblMzbmV0Q0RGNCBoYXMgdGhlIGFiaWxpdHkgdG8gcmVhZCBhbmQgd3JpdGUgdmVyeSBsYXJnZSBmaWxlcywgbXVjaCBsYXJnZXIgdGhhblxudGhlIGF2YWlsYWJsZSwgb3IgYWxsb2NhdGVkLCBtZW1vcnkgb24gYSBtYWNoaW5lLiAgSXQgYWxzbyBoYXMgdGhlIGFiaWxpdHkgdG9cbnJlYWQgYW5kIHdyaXRlIG1hbnkgZmlsZXMgdG8gYW5kIGZyb20gZGlzaywgd2hpY2ggbWVhbnMgdGhlIG51bWJlciBvZiBvcGVuXG5maWxlcyBtYXkgZXhjZWVkIHRoZSBsaW1pdCBzZXQgYnkgdGhlIGZpbGUgc3lzdGVtLCBvciB0aGUgc2V0dGluZ3MgaW4gYHVsaW1pdGAuXG5cbkZpbGVzIGFyZSBhY2Nlc3NlZCB3aGVuIGEgRGF0YXNldCBpcyBvcGVuZWQsIGFuZCB3aGVuIGEgc2xpY2Ugb3BlcmF0b3JcbihgW3gseSx6XWApIGlzIHVzZWQgb24gYSAqKkNGQS1uZXRDREYqKiBmaWxlLlxuXG5UbyBlbmFibGUgdmVyeSBsYXJnZSBhbmQgdmVyeSBtYW55IGZpbGVzIHRvIGJlIHJlYWQgYW5kIHdyaXR0ZW4gdG8sIFMzbmV0Q0RGNFxuZW1wbG95cyBhIHN0cmF0ZWd5IHdoZXJlIGZpbGVzIGFyZSBcInNodWZmbGVkXCIgb3V0IG9mIG1lbW9yeSAodG8gZnJlZSB1cCBtZW1vcnkpXG5vciBjbG9zZWQgKHRvIGZyZWUgdXAgZGlzayBoYW5kbGVzKS4gIFRoZSB0cmlnZ2VycyBmb3IgdGhpcyBzaHVmZmxpbmcgYXJlXG5jb25maWd1cmVkIGluIHRoZSBgXCJyZXNvdXJjZV9hbGxvY2F0aW9uXCJgIHNlY3Rpb24gb2YgdGhlIGAuczNuYy5qc29uYCBjb25maWdcbmZpbGU6XG5cbiogYHJlc291cmNlX2FsbG9jYXRpb246IG1lbW9yeWA6IHRoZSBhbW91bnQgb2YgbWVtb3J5IHRoYXQgUzNuZXRDREY0IGlzIGFsbG93ZWRcbnRvIHVzZSBiZWZvcmUgYSBzaHVmZmxlIGlzIHRyaWdnZXJlZC4gIFRoaXMgYXBwbGllcyB3aGVuIHJlYWRpbmcgb3Igd3JpdGluZ1xuZmlsZXMgZnJvbSAvIHRvIHJlbW90ZSBzdG9yYWdlLCBzdWNoIGFzIGEgUzMgb2JqZWN0IHN0b3JlLiAgUzNuZXRDREY0IHdpbGxcbnN0cmVhbSB0aGUgZW50aXJlIG5ldENERiBmaWxlLCBvciBhbiBlbnRpcmUgKipzdWItYXJyYXkqKiBmaWxlIGludG8gbWVtb3J5IHdoZW5cbnJlYWRpbmcuICBXaGVuIHdyaXRpbmcsIGl0IHdpbGwgY3JlYXRlIGFuIGVudGlyZSBuZXRDREYgZmlsZSBvciAqKnN1Yi1hcnJheSoqXG5maWxlIGluIG1lbW9yeSwgd3JpdGluZyB0aGUgZmlsZSB0byB0aGUgcmVtb3RlIHN0b3JhZ2UgdXBvbiBjbG9zaW5nIHRoZSBmaWxlLlxuXG4qIGByZXNvdXJjZV9hbGxvY2F0aW9uOiBkaXNrX2hhbmRsZXNgOiB0aGUgbnVtYmVyIG9mIGZpbGVzIG9uIGRpc2sgdGhhdFxuUzNuZXRDREY0IGlzIGFsbG93ZWQgdG8gaGF2ZSBvcGVuIGF0IGFueSBvbmUgdGltZS4gIFRoaXMgYXBwbGllcyB3aGVuIHJlYWRpbmdcbm9yIHdyaXRpbmcgZmlsZXMgdG8gZGlzay4gIFMzbmV0Q0RGNCB1c2VzIHRoZSB1bmRlcmx5aW5nIG5ldENERjQgbGlicmFyeSB0b1xucmVhZCBhbmQgd3JpdGUgZmlsZXMgdG8gZGlzaywgYnV0IGl0IGtlZXBzIGEgdHJhY2sgb2YgdGhlIG51bWJlciBvZiBvcGVuIGZpbGVzLlxuXG4qTm90ZSB0aGF0IFMzbmV0Q0RGNCBhbGxvd3MgZnVsbCBmbGV4aWJpbGl0eSBvdmVyIHRoZSBsb2NhdGlvbiBvZiB0aGVcbm1hc3Rlci1hcnJheSBhbmQgc3ViLWFycmF5IGZpbGVzIG9mIENGQS1uZXRDREYgZmlsZXMuICBJdCBhbGxvd3MgYm90aCB0byBiZVxuc3RvcmVkIG9uIGRpc2sgb3IgUzMgc3RvcmFnZS4gIEZvciBleGFtcGxlLCB0aGUgbWFzdGVyLWFycmF5IGZpbGUgY291bGQgYmVcbnN0b3JlZCBvbiBkaXNrIGZvciBwZXJmb3JtYW5jZSByZWFzb25zLCBhbmQgdGhlIHN1Yi1hcnJheSBmaWxlcyBzdG9yZWQgb24gUzMuICBcbk9yIHRoZSBmaXJzdCB0aW1lc3RlcCBvZiB0aGUgc3ViLWFycmF5IGZpbGVzIGNvdWxkIGFsc28gYmUgc3RvcmVkIG9uIGRpc2sgdG9cbmVuYWJsZSB1c2VycyB0byBxdWlja2x5IHBlcmZvcm0gdGVzdCBhbmFseXNlcypcblxuVGhlIGZpbGUgc2h1ZmZsaW5nIHByb2NlZHVyZSBpcyBjYXJyaWVkIG91dCBieSBhbiBpbnRlcm5hbCBGaWxlTWFuYWdlciwgd2hpY2hcbmtlZXBzIG5vdGVzIGFib3V0IHRoZSBmaWxlcyB0aGF0IGFyZSBvcGVuIGF0IGFueSB0aW1lLCBvciBoYXZlIGJlZW4gb3BlbmVkIGluXG50aGUgcGFzdCBhbmQgdGhlIGxhc3QgdGltZSB0aGV5IHdlcmUgYWNjZXNzZWQuICBUaGUgdXNlciBkb2VzIG5vdCBzZWUgYW55IG9mXG50aGlzIGludGVyYWN0aW9uLCB0aGV5IG1lcmVseSBpbnRlcmFjdCB3aXRoIHRoZSBTM0RhdGFzZXQsIFMzR3JvdXAsIFMzVmFyaWFibGVcbmFuZCBTM0RpbWVuc2lvbiBvYmplY3RzLlxuXG4xLiBXaGVuIGEgZmlsZSBpcyBpbml0aWFsbHkgb3BlbmVkLCBhIG5vdGUgaXMgbWFkZSBvZiB0aGUgbW9kZSBhbmQgd2hldGhlciB0aGVcbmZpbGUgaXMgb24gZGlzayBvciByZW1vdGUgc3RvcmFnZS4gIFRoZXkgYXJlIG1hcmtlZCBhcyBcIk9QRU5fTkVXXCIgYW5kIHRoZW4sXG5cIk9QRU5fRVhJU1RTXCIgd2hlbiB0aGV5IGhhdmUgYmVlbiBvcGVuZWQgc3VjY2Vzc2Z1bGx5LlxuICAgIC0gRm9yIHJlYWRpbmcgZnJvbSByZW1vdGUgc3RvcmFnZSwgdGhlIGZpbGUgaXMgc3RyZWFtZWQgaW50byBtZW1vcnkgYW5kXG4gICAgdGhlbiBhIG5ldENERiBEYXRhc2V0IGlzIGNyZWF0ZWQgZnJvbSB0aGUgcmVhZCBpbiBkYXRhLlxuICAgIC0gRm9yIHdyaXRpbmcgdG8gcmVtb3RlIHN0b3JhZ2UsIHRoZSBuZXRDREYgRGF0YXNldCBpcyBjcmVhdGVkIGluIG1lbW9yeS5cbiAgICAtIEZvciByZWFkaW5nIGZyb20gZGlzaywgdGhlIGZpbGUgaXMgb3BlbmVkIHVzaW5nIHRoZSB1bmRlcmx5aW5nIG5ldENERjRcbiAgICBsaWJyYXJ5LCBhbmQgdGhlIG5ldENERiBEYXRhc2V0IGlzIHJldHVybmVkLlxuICAgIC0gRm9yIHdyaXRpbmcgdG8gZGlzaywgdGhlIGZpbGUgaXMgY3JlYXRlZCB1c2luZyB0aGUgbmV0Q0RGNCBsaWJyYXJ5IGFuZFxuICAgIHRoZSBEYXRhc2V0IGlzIHJldHVybmVkLlxuMi4gSWYgdGhlIGZpbGUgaXMgYWNjZXNzZWQgYWdhaW4gKGUuZy4gdmlhIHRoZSBzbGljaW5nIG9wZXJhdG9yKSwgdGhlbiB0aGVcbm5ldENERiBEYXRhc2V0IGlzIHJldHVybmVkLiAgVGhlIEZpbGVNYW5hZ2VyIGtub3dzIHRoZXNlIGZpbGVzIGFyZSBhbHJlYWR5IG9wZW5cbm9yIHByZXNlbnQgaW4gbWVtb3J5IGFzIHRoZXkgYXJlIG1hcmtlZCBhcyBcIk9QRU5fRVhJU1RTXCIuXG4zLiBTdGVwcyAxIGFuZCAyIGNvbnRpbnVlIHVudGlsIGVpdGhlciB0aGUgYW1vdW50IG9mIG1lbW9yeSB1c2VkIGV4Y2VlZHNcbmByZXNvdXJjZV9hbGxvY2F0aW9uOiBtZW1vcnlgIG9yIHRoZSBudW1iZXIgb2Ygb3BlbiBmaWxlcyBleGNlZWRzXG5gcmVzb3VyY2VfYWxsb2NhdGlvbjogZGlza19oYW5kbGVzYC5cbjQuIElmIHRoZSBhbW91bnQgb2YgbWVtb3J5IHVzZWQgZXhjZWVkcyBgcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YDpcbiAgLSBUaGUgc2l6ZSBvZiB0aGUgbmV4dCBmaWxlIGlzIGRldGVybWluZWQgKHJlYWQpIG9yIGNhbGN1bGF0ZWQgKHdyaXRlKS4gIFxuICBGaWxlcyBhcmUgY2xvc2VkLCBhbmQgdGhlIG1lbW9yeSB0aGV5IG9jY3VweSBpcyBmcmVlZCB1c2luZyB0aGUgUHl0aG9uXG4gIGdhcmJhZ2UgY29sbGVjdG9yLCB1bnRpbCB0aGVyZSBpcyBlbm91Z2ggbWVtb3J5IGZyZWUgdG8gcmVhZCBpbiBvciBjcmVhdGUgdGhlXG4gIG5leHQgZmlsZS5cbiAgLSBGaWxlcyB0aGF0IHdlcmUgb3BlbmVkIGluIFwid3JpdGVcIiBtb2RlIGFyZSBjbG9zZWQsIG1hcmtlZCBhcyBcIktOT1dOX0VYSVNUU1wiXG4gIGFuZCB3cml0dGVuIHRvIGVpdGhlciB0aGUgcmVtb3RlIHN0b3JhZ2UgKFMzKSBvciBkaXNrLlxuICAtIEZpbGVzIHRoYXQgd2VyZSBvcGVuIGluIFwicmVhZFwiIG1vZGUgYXJlIHNpbXBseSBjbG9zZWQgYW5kIHRoZWlyIGVudHJ5IGlzXG4gIHJlbW92ZWQgZnJvbSB0aGUgRmlsZU1hbmFnZXIuXG4gIC0gVGhlIHByaW9yaXR5IGZvciBjbG9zaW5nIGZpbGVzIGlzIHRoYXQgdGhlIGxhc3QgYWNjZXNzZWQgZmlsZSBpcyBjbG9zZWRcbiAgZmlyc3QuICBUaGUgRmlsZU1hbmFnZXIga2VlcHMgYSBub3RlIHdoZW4gZWFjaCBmaWxlIHdhcyBhY2Nlc3NlZCBsYXN0LlxuICAtIElmIGEgZmlsZSBpcyBhY2Nlc3NlZCBhZ2FpbiBpbiBcIndyaXRlXCIgbW9kZSwgYW5kIGl0IGlzIG1hcmtlZCBhc1xuICBcIktOT1dOX0VYSVNUU1wiIGluIHRoZSBGaWxlTWFuYWdlciwgdGhlbiBpdCBpcyBvcGVuZWQgaW4gXCJhcHBlbmRcIiBtb2RlLiAgSW5cbiAgdGhpcyB3YXksIGEgZmlsZSBjYW4gYmUgY3JlYXRlZCwgYmUgc2h1ZmZsZWQgaW4gYW5kIG91dCBvZiBtZW1vcnksIGFuZCBzdGlsbFxuICBiZSB3cml0dGVuIHRvIHNvIHRoYXQgdGhlIGVuZCByZXN1bHQgaXMgdGhlIHNhbWUgYXMgaWYgaXQgaGFkIGJlZW4gaW4gbWVtb3J5XG4gIHRocm91Z2hvdXQgdGhlIG9wZXJhdGlvbi5cbjUuIElmIHRoZSBudW1iZXIgb2Ygb3BlbiBmaWxlcyBleGNlZWRzIGByZXNvdXJjZV9hbGxvY2F0aW9uOiBkaXNrX2hhbmRsZXNgOlxuICAtIFRoZSBwcm9jZWR1cmUgZm9yIHBvaW50IDQgaXMgZm9sbG93ZWQsIGV4Y2VwdCByYXRoZXIgdGhhbiBjbG9zaW5nIGZpbGVzXG4gIHVudGlsIHRoZXJlIGlzIGVub3VnaCBtZW1vcnkgYXZhaWxhYmxlLCBmaWxlcyBhcmUgY2xvc2VkIHVudGlsIHRoZXJlIGFyZSBmcmVlXG4gIGZpbGUgaGFuZGxlcy5cbiAgLSBGaWxlcyBhcmUgbWFya2VkIGFzIFwiS05PV05fRVhJU1RTXCIgYXMgaW4gcG9pbnQgNC5cblxuVGhpcyBmaWxlIHNodWZmbGluZyBwcm9jZWR1cmUgaXMgZnVuZGFtZW50YWwgdG8gdGhlIHBlcmZvcm1hbmNlIG9mIFMzbmV0Q0RGNCxcbmFzIGl0IG1pbmltaXNlcyB0aGUgbnVtYmVyIG9mIHRpbWVzIGEgZmlsZSBoYXMgdG8gYmUgc3RyZWFtZWQgZnJvbSByZW1vdGVcbnN0b3JhZ2UsIG9yIG9wZW5lZCBmcm9tIGRpc2suICBUaGVyZSBhcmUgYWxzbyBvcHRpbWlzYXRpb25zIGluIHRoZSBGaWxlXG5NYW5hZ2VyLCBmb3IgZXhhbXBsZSwgaWYgYSBmaWxlIGhhcyBiZWVuIHdyaXR0ZW4gdG8gYW5kIHRoZW4gcmVhZCwgaXQgd2lsbCB1c2VcbnRoZSBjb3B5IGluIG1lbW9yeSBmb3IgYWxsIG9wZXJhdGlvbnMsIHJhdGhlciB0aGFuIGhvbGRpbmcgdHdvIGNvcGllcywgb3JcbnN0cmVhbWluZyB0byBhbmQgZnJvbSByZW1vdGUgc3RvcmFnZSByZXBlYXRhYmx5LlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMgV3JpdGluZyBmaWxlc1xuUzNuZXRDREY0IGhhcyB0aGUgYWJpbGl0eSB0byB3cml0ZSAqKm5ldENERjMqKiwgKipuZXRDREY0KiosICoqQ0ZBLW5ldENERjMqKlxuYW5kICoqQ0ZBLW5ldENERjQqKiBmaWxlcyB0byBhIFBPU0lYIGZpbGVzeXN0ZW0sIEFtYXpvbiBTMyBvYmplY3Qgc3RvcmFnZSAob3JcbnB1YmxpYyBjbG91ZCkgb3IgT1BlTkRBUC4gIEZpbGVzIGFyZSBjcmVhdGVkIGluIHRoZSBzYW1lIHdheSBhcyB0aGUgc3RhbmRhcmRcbm5ldENERjQtcHl0aG9uIHBhY2thZ2UsIGJ5IGNyZWF0aW5nIGEgYHMzRGF0YXNldGAgb2JqZWN0LiAgSG93ZXZlciwgdGhlXG5wYXJhbWV0ZXJzIHRvIHRoZSBgczNEYXRhc2V0YCBjb25zdHJ1Y3RvciBjYW4gdmFyeSBpbiB0d28gd2F5czpcblxuMS4gVGhlIGBmaWxlbmFtZWAgY2FuIGJlIGFuIFMzIGVuZHBvaW50LCBpLmUuIGl0IHN0YXJ0cyB3aXRoIGBzMzovL2BcbjIuIFRoZSBgZm9ybWF0YCBrZXl3b3JkIGNhbiBhbHNvLCBpbiBhZGRpdGlvbiB0byB0aGUgZm9ybWF0cyBwZXJtaXR0ZWQgYnlcbm5ldENERjQtcHl0aG9uLCBiZSBgQ0ZBM2AsIHRvIGNyZWF0ZSBhIENGQS1uZXRDREYzIGRhdGFzZXQsIG9yIGBDRkE0YCwgdG9cbmNyZWF0ZSBhIENGQS1uZXRDREY0IGRhdGFzZXQuXG4zLiBJZiBjcmVhdGluZyBhIGBDRkEzYCBvciBgQ0ZBNGAgZGF0YXNldCwgdGhlbiBhbiBvcHRpb25hbCBrZXl3b3JkIHBhcmFtZXRlclxuY2FuIGJlIHNldDogYGNmYV92ZXJzaW9uYC4gIFRoaXMgY2FuIGJlIGVpdGhlciBgXCIwLjRcImAgb3IgYFwiMC41XCJgLiAgU2VlIHRoZVxuW0NGQS1uZXRDREZdKCNjZmEtbmV0Y2RmKSBmaWxlcyBzZWN0aW9uIGJlbG93LlxuXG4qRXhhbXBsZSAyOiBDcmVhdGUgYSBuZXRDREY0IGZpbGUgaW4gdGhlIGZpbGVzeXN0ZW0qPGEgbmFtZT1leGFtcGxlLTI+PC9hPlxuYGBgXG5mcm9tIFMzbmV0Q0RGNC5fczNuZXRDREY0IGltcG9ydCBzM0RhdGFzZXQgYXMgRGF0YXNldFxudGVzdF9kYXRhc2V0ID0gRGF0YXNldChcIi9Vc2Vycy9uZWlsL3Rlc3RfZGF0YXNldF9uYzQubmNcIiwgJ3cnLFxuZm9ybWF0PSdORVRDREY0JylcbmBgYFxuXG4qRXhhbXBsZSAzOiBDcmVhdGUgYSBDRkEtbmV0Q0RGNCBmaWxlIGluIHRoZSBmaWxlc3lzdGVtIHdpdGggQ0ZBIHZlcnNpb25cbjAuNSAodGhlIGRlZmF1bHQpKjxhIG5hbWU9ZXhhbXBsZS0zPjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0IGFzIERhdGFzZXRcbmNmYV9kYXRhc2V0ID0gRGF0YXNldChcIi9Vc2Vycy9uZWlsL3Rlc3RfZGF0YXNldF9jZmE0Lm5jXCIsICd3Jyxmb3JtYXQ9J0NGQTQnKVxuYGBgXG4qRXhhbXBsZSA0OiBDcmVhdGUgYSBDRkEtbmV0Q0RGMyBmaWxlIG9uIFMzIHN0b3JhZ2Ugd2l0aCBDRkEgdmVyc2lvbiAwLjQqPGFcbm5hbWU9ZXhhbXBsZS00PjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0IGFzIERhdGFzZXRcbmNmYV9kYXRhc2V0ID0gRGF0YXNldChcInMzOi8vdGVuYW5jeS0wL3Rlc3RfYnVja2V0L3Rlc3RfZGF0YXNldF9zM19jZmEzLm5jXCIsXG4ndycsIGZvcm1hdD0nQ0ZBMycsIGNmYV92ZXJzaW9uPVwiMC40XCIpXG5gYGBcblxuW1tUb3BdXSgjY29udGVudHMpXG5cbiMjIyBDRkEtbmV0Q0RGIGZpbGVzXG5DaG9vc2luZyBgZm9ybWF0PVwiQ0ZBM1wiYCBvciBgZm9ybWF0PVwiQ0ZBNFwiYCB3aGVuIGNyZWF0aW5nIGEgZmlsZSBjcmVhdGVzIGFcbkNGQS1jb21wbGlhbnQgbmV0Q0RGIGZpbGUuICBUaGlzIGNvbnNpc3RzIG9mIGEgKiptYXN0ZXItYXJyYXkqKiBmaWxlIGFuZCBhXG5udW1iZXIgb2YgKipzdWItYXJyYXkqKiBmaWxlcy5cblRoZSB2ZXJzaW9uIG9mIENGQSB0byB1c2UgY2FuIGFsc28gYmUgc3BlY2lmaWVkLCBlaXRoZXIgYGNmYV92ZXJzaW9uPVwiMC40XCJgIG9yXG5gY2ZhX3ZlcnNpb249XCIwLjVcImAuICBgXCIwLjRcImAgZm9sbG93cyB0aGVcbltDRkEgY29udmVudGlvbnNdKGh0dHA6Ly93d3cubWV0LnJlYWRpbmcuYWMudWsvfmRhdmlkL2NmYS8wLjQvKSwgd2hlcmUgdGhlXG4qKnN1Yi1hcnJheSoqIG1ldGFkYXRhIGlzIHdyaXR0ZW4gaW50byB0aGUgYXR0cmlidXRlcyBvZiB0aGUgbmV0Q0RGIHZhcmlhYmxlcy5cbmBcIjAuNVwiYCByZWZhY3RvcnMgdGhlICoqc3ViLWFycmF5KiogbWV0YWRhdGEgaW50byBleHRyYSBncm91cHMgYW5kIHZhcmlhYmxlc1xuaW4gdGhlICoqbWFzdGVyLWFycmF5KiogZmlsZS4gIGBcIjAuNVwiYCBpcyB0aGUgcHJlZmVycmVkIGZvcm1hdCBhcyBpdCBpcyBtb3JlXG5tZW1vcnkgZWZmaWNpZW50LCByZWx5aW5nIG9uIG5ldENERiBzbGljaW5nIGFuZCBwYXJ0aWFsIHJlYWRpbmcgb2YgZmlsZXMsIGFuZFxuaXMgZmFzdGVyIGFzIGl0IGRvZXMgbm90IHJlcXVpcmUgcGFyc2luZyB3aGVuIHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUgaXNcbmZpcnN0IHJlYWQuICBBcyBpdCB1c2VzIGZlYXR1cmVzIG9mIG5ldENERjQsIGBjZmFfdmVyc2lvbj1cIjAuNVwiYCBpcyBvbmx5XG5jb21wYXRpYmxlIHdpdGggYGZvcm1hdD1cIkNGQTRcImBcblxuKk5vdGUgdGhhdCBgY2ZhX3ZlcnNpb249XCIwLjVcImAgYW5kIGBmb3JtYXQ9XCJDRkEzXCJgIGFyZSBpbmNvbXBhdGlibGUsIGFzIE5FVENERjNcbmRvZXMgbm90IGVuYWJsZSBncm91cHMgdG8gYmUgdXNlZCpcblxuVGhlICoqbWFzdGVyLWFycmF5KiogZmlsZSBjb250YWluczpcblxuKiB0aGUgZGltZW5zaW9uIGRlZmluaXRpb25zXG4qIGRpbWVuc2lvbiB2YXJpYWJsZXNcbiogc2NhbGFyIHZhcmlhYmxlIGRlZmluaXRpb25zOiB2YXJpYWJsZSBkZWZpbml0aW9ucyB3aXRob3V0IHJlZmVyZW5jZSB0byB0aGVcbmRvbWFpbiBpdCBzcGFuc1xuKiB2YXJpYWJsZSBtZXRhZGF0YVxuKiBnbG9iYWwgbWV0YWRhdGFcbiogSXQgZG9lcyBub3QgY29udGFpbiBhbnkgZmllbGQgZGF0YSwgYnV0IGl0ICpkb2VzKiBjb250YWluIGRhdGEgZm9yIHRoZVxuZGltZW5zaW9uIHZhcmlhYmxlcywgYW5kIHRoZXJlZm9yZSB0aGUgZG9tYWluIG9mIGVhY2ggdmFyaWFibGUuICBcbiogVGhlICoqbWFzdGVyLWFycmF5KiogZmlsZSBtYXkgY29udGFpbiBhIHNpbmdsZSBmaWVsZCB2YXJpYWJsZSBvciBtdWx0aXBsZVxuZmllbGQgdmFyaWFibGVzLiAgXG5cblRoZSAqKnN1Yi1hcnJheSoqIGZpbGVzIGNvbnRhaW4gYSBzdWJkb21haW4gb2YgYSBzaW5nbGUgdmFyaWFibGUgaW4gdGhlXG4qKm1hc3Rlci1hcnJheSoqLiAgVGhleSBjb250YWluOlxuXG4qIHRoZSBkaW1lbnNpb24gZGVmaW5pdGlvbnMgZm9yIHRoZSBzdWJkb21haW5cbiogdGhlIGRpbWVuc2lvbiB2YXJpYWJsZXMgZm9yIHRoZSBzdWJkb21haW5cbiogYSBzaW5nbGUgdmFyaWFibGUgZGVmaW5pdGlvbiwgY29tcGxldGUgd2l0aCByZWZlcmVuY2UgdG8gdGhlIGRpbWVuc2lvbnNcbiogbWV0YWRhdGEgZm9yIHRoZSB2YXJpYWJsZVxuXG5UaGVyZWZvcmUsIGVhY2ggKipzdWItYXJyYXkqKiBmaWxlIGlzIGEgc2VsZi1kZXNjcmliaW5nIG5ldENERiBmaWxlLiAgSWYgdGhlXG4qKm1hc3Rlci1hcnJheSoqIGZpbGUgaXMgbG9zdCwgaXQgY2FuIGJlIHJlY29uc3RydWN0ZWQgZnJvbSB0aGUgKipzdWItYXJyYXkqKlxuZmlsZXMuXG5cbkluIENGQSB2MC40LCB0aGUgKnZhcmlhYmxlIG1ldGFkYXRhKiAobmV0Q0RGIGF0dHJpYnV0ZXMpIGluIGVhY2ggdmFyaWFibGUgaW5cbnRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUgY29udGFpbnMgYSAqKnBhcnRpdGlvbiBtYXRyaXgqKi4gIFRoZSAqKnBhcnRpdGlvblxubWF0cml4KiogY29udGFpbnMgaW5mb3JtYXRpb24gb24gaG93IHRvIHJlY29uc3RydWN0IHRoZSAqKm1hc3Rlci1hcnJheSoqXG52YXJpYWJsZXMgZnJvbSB0aGUgYXNzb2NpYXRlZCAqKnN1Yi1hcnJheXMqKiBhbmQsIHRoZXJlZm9yZSwgYWxzbyBjb250YWlucyB0aGVcbm5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0byByZWFkIG9yIHdyaXRlIHNsaWNlcyBvZiB0aGUgKiptYXN0ZXItYXJyYXkqKlxudmFyaWFibGVzLlxuXG5JbiBDRkEgdjAuNSwgdGhlICoqcGFydGl0aW9uIG1hdHJpeCoqIGlzIHN0b3JlZCBpbiBhIGdyb3VwLiAgVGhpcyBncm91cCBoYXMgdGhlXG5zYW1lIG5hbWUgYXMgdGhlIHZhcmlhYmxlLCBidXQgcHJlZml4ZWQgd2l0aCBgY2ZhX2AuICBUaGUgZ3JvdXAgY29udGFpbnNcbmRpbWVuc2lvbnMgYW5kIHZhcmlhYmxlcyB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gZm9yIHRoZSAqKnBhcnRpdGlvbiBtYXRyaXgqKlxuYW5kIHRoZSAqKnBhcnRpdGlvbnMqKi5cbkZ1bGwgZG9jdW1lbnRhdGlvbiBmb3IgQ0ZBIHYwLjUgd2lsbCBiZSBmb3J0aGNvbWluZy5cblxuVGhlICoqcGFydGl0aW9uIG1hdHJpeCoqIGNvbnRhaW5zOlxuXG4qIFRoZSBkaW1lbnNpb25zIGluIHRoZSBuZXRDREYgZmlsZSB0aGF0IHRoZSBwYXJ0aXRpb24gbWF0cml4IGFjdHMgb3ZlciAoZS5nLlxuYFtcInRpbWVcIiwgXCJsYXRpdHVkZVwiLCBcImxvbmdpdHVkZVwiYClcbiogVGhlIHNoYXBlIG9mIHRoZSBwYXJ0aXRpb24gbWF0cml4IChlLmcuIGBbNCwyLDJdYClcbiogQSBsaXN0IG9mIHBhcnRpdGlvbnNcblxuRWFjaCAqKnBhcnRpdGlvbioqIGluIHRoZSAqKnBhcnRpdGlvbiBtYXRyaXgqKiBjb250YWluczpcblxuKiBBbiBpbmRleCBmb3IgdGhlIHBhcnRpdGlvbiBpbnRvIHRoZSBwYXJ0aXRpb24gbWF0cml4IC0gYSBsaXN0IHRoZSBsZW5ndGggb2ZcbnRoZSBudW1iZXIgb2YgZGltZW5zaW9ucyBmb3IgdGhlIHZhcmlhYmxlIChlLmcgYFszLCAxLCAwXWApXG4qIFRoZSBsb2NhdGlvbiBvZiB0aGUgcGFydGl0aW9uIGluIHRoZSAqKm1hc3Rlci1hcnJheSoqIC0gYSBsaXN0ICh0aGUgbGVuZ3RoXG5vZiB0aGUgbnVtYmVyIG9mIGRpbWVuc2lvbnMpIG9mIHBhaXJzLCBlYWNoIHBhaXIgZ2l2aW5nIHRoZSByYW5nZSBvZlxuaW5kaWNlcyBpbiB0aGUgKiptYXN0ZXItYXJyYXkqKiBmb3IgdGhhdCBkaW1lbnNpb24gKGUuZy4gYFtbMCwgMTBdLCBbMjAsXG40MF0sIFswLCA0NV1dYClcbiogQSBkZWZpbml0aW9uIG9mIHRoZSAqKnN1Yi1hcnJheSoqIHdoaWNoIGNvbnRhaW5zOlxuICAgICogVGhlIHBhdGggb3IgVVJJIG9mIHRoZSBmaWxlIGNvbnRhaW5pbmcgdGhlICoqc3ViLWFycmF5KiouICBUaGlzIG1heSBiZVxuICAgIG9uIHRoZSBmaWxlc3lzdGVtLCBhbiBPUGVOREFQIGZpbGUgb3IgYW4gUzMgVVJJLlxuICAgICogVGhlIG5hbWUgb2YgdGhlIG5ldENERiB2YXJpYWJsZSBpbiB0aGUgKipzdWItYXJyYXkqKiBmaWxlXG4gICAgKiBUaGUgZm9ybWF0IG9mIHRoZSBmaWxlIChhbHdheXMgYG5ldENERmAgZm9yIFMzbmV0Q0RGNClcbiAgICAqIFRoZSBzaGFwZSBvZiB0aGUgdmFyaWFibGUgLSBpLmUuIHRoZSBsZW5ndGggb2YgdGhlIHN1YmRvbWFpbiBpbiBlYWNoXG4gICAgZGltZW5zaW9uXG5cbkZvciBtb3JlIGluZm9ybWF0aW9uIHNlZSB0aGUgW0NGQSBjb252ZW50aW9ucyAwLjQgd2Vic2l0ZV0oaHR0cDovL1xud3d3Lm1ldC5yZWFkaW5nLmFjLnVrL35kYXZpZC9jZmEvMC40LykuXG5UaGVyZSBpcyBhbHNvIGEgdXNlZnVsIHN5bm9wc2lzIGluIHRoZSBoZWFkZXIgb2YgdGhlIGBfQ0ZBQ2xhc3Nlcy5weXhgIGZpbGUgaW5cbnRoZSBTM25ldENERjQgc291cmNlIGNvZGUuICBEb2N1bWVudGF0aW9uIGZvciB0aGUgYFwiMC41XCJgIHZlcnNpb24gb2YgQ0ZBIHdpbGxcbmZvbGxvdy5cblxuKk5vdGUgdGhhdCBpbmRpY2VzIGluIHRoZSBwYXJ0aXRpb24gbWF0cml4IGFyZSBpbmRleGVkIGZyb20gemVybywgYnV0IHRoZVxuaW5kaWNlcyBhcmUgaW5jbHVzaXZlIGZvciB0aGUgbG9jYXRpb24gb2YgdGhlIHBhcnRpdGlvbiBpbiB0aGUgbWFzdGVyLWFycmF5LiAgXG5UaGlzIGlzIGRpZmZlcmVudCBmcm9tIFB5dGhvbiB3aGVyZSB0aGUgaW5kaWNlcyBhcmUgbm9uLWluY2x1c2l2ZS4gIFRoZVxuY29udmVyc2lvbiBiZXR3ZWVuIHRoZSB0d28gaW5kZXhpbmcgbWV0aG9kcyBpcyBoYW5kbGVkIGluIHRoZSBpbXBsZW1lbnRhdGlvblxub2YgX0NGQW5ldENERlBhcnNlciwgc28gdGhlIHVzZXIgZG9lcyBub3QgaGF2ZSB0byB3b3JyeWluZyBhYm91dCBjb252ZXJ0aW5nXG5pbmRpY2VzKlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMjIENyZWF0aW5nIGRpbWVuc2lvbnMgYW5kIHZhcmlhYmxlc1xuXG5DcmVhdGluZyBkaW1lbnNpb25zIGFuZCB2YXJpYWJsZXMgaW4gdGhlIG5ldENERiBvciBDRkEtbmV0Q0RGNCBkYXRhc2V0IGZvbGxvd3NcbnRoZSBzYW1lIG1ldGhvZCBhcyBjcmVhdGluZyB2YXJpYWJsZXMgaW4gdGhlIHN0YW5kYXJkIG5ldENERjQtcHl0aG9uIGxpYnJhcnk6XG5cbipFeGFtcGxlIDU6IGNyZWF0aW5nIGRpbWVuc2lvbnMgYW5kIHZhcmlhYmxlcyo8YSBuYW1lPWV4YW1wbGUtNT48L2E+XG5gYGBcbmZyb20gUzNuZXRDREY0Ll9zM25ldENERjQgaW1wb3J0IHMzRGF0YXNldCBhcyBEYXRhc2V0XG5jZmFfZGF0YXNldCA9IERhdGFzZXQoXCJzMzovL21pbmlvL3Rlc3RfYnVja2V0L3Rlc3RfZGF0YXNldF9zM19jZmEzLm5jXCIsICd3JyxcbmZvcm1hdD0nQ0ZBMycpXG5cbnRpbWVkID0gY2ZhX2RhdGFzZXQuY3JlYXRlRGltZW5zaW9uKFwidGltZVwiLCBOb25lKVxudGltZXMgPSBjZmFfZGF0YXNldC5jcmVhdGVWYXJpYWJsZShcInRpbWVcIiwgXCJmNFwiLCAoXCJ0aW1lXCIsKSlcbmBgYFxuXG5XaGVuIGNyZWF0aW5nIHZhcmlhYmxlcywgYSBudW1iZXIgb2YgZGlmZmVyZW50IHdvcmtmbG93cyBmb3Igd3JpdGluZyB0aGUgZmlsZXNcbm9jY3VyLiAgV2hpY2ggd29ya2Zsb3cgaXMgdGFrZW4gZGVwZW5kcyBvbiB0aGUgY29tYmluYXRpb24gb2YgdGhlIGZpbGVuYW1lXG5wYXRoIChgUzNgLCBmaWxlc3lzdGVtIG9yIE9QZU5EQVApIGFuZCBmb3JtYXQgKGBDRkEzYCBhbmQgYENGQTRgIG9yIGBORVRDREY0YFxuYW5kIGBORVRDREYzX0NMQVNTSUNgKS4gIFRoZXNlIHdvcmtmbG93cyBjYW4gYmUgc3VtbWFyaXNlZCBieTpcblxuKiBgZm9ybWF0PU5FVENERjRgIG9yIGBmb3JtYXQ9TkVUQ0RGM19DTEFTU0lDYC4gIFRoZXNlIHR3byBvcHRpb25zIHdpbGwgY3JlYXRlXG5hIHN0YW5kYXJkIG5ldENERiBmaWxlLlxuICAqIElmIHRoZSBmaWxlbmFtZSBpcyBvbiBhIHJlbW90ZSBzeXN0ZW0sIChpLmUuIGl0IGNvbnRhaW5zIGBzMzovL2ApIHRoZW4gdGhlXG4gIG5ldENERiBmaWxlIHdpbGwgYmUgY3JlYXRlZCBpbiBtZW1vcnkgYW5kIHVwbG9hZGVkIChQVVQpIHRvIHRoZSBTM1xuICBmaWxlc3lzdGVtIHdoZW4gYHMzRGF0YXNldC5jbG9zZSgpYCBpcyBjYWxsZWQgb3IgdGhlIGZpbGUgaXMgXCJzaHVmZmxlZFwiIG91dFxuICBvZiBtZW1vcnkuIChzZWUgW1Jlc291cmNlIFVzYWdlXSgjcmVzb3VyY2UpIGZvciBtb3JlIGRldGFpbHMpLlxuICAqIElmIHRoZSBmaWxlbmFtZSBkb2VzIG5vdCBjb250YWluIGBzMzovL2AgdGhlbiB0aGUgbmV0Q0RGIGZpbGUgd2lsbCBiZVxuICB3cml0dGVuIG91dCB0byB0aGUgZmlsZXN5c3RlbSBvciBPUGVOREFQLCB3aXRoIHRoZSBiZWhhdmlvdXIgZm9sbG93aW5nIHRoZVxuICBzdGFuZGFyZCBuZXRDREY0LXB5dGhvbiBsaWJyYXJ5LlxuXG4qIGBmb3JtYXQ9Q0ZBM2Agb3IgYGZvcm1hdD1DRkE0YC4gIFRoZXNlIHR3byBvcHRpb25zIHdpbGwgY3JlYXRlIGFcbiAgKipDRkEtbmV0Q0RGIGZpbGUqKi5cbiAgKiBBdCBmaXJzdCBvbmx5IHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUgaXMgY3JlYXRlZCBhbmQgd3JpdHRlbiB0by4gIFRoZVxuICAqKnN1Yi1hcnJheSoqIGZpbGVzIGFyZSBjcmVhdGVkIGFuZCB3cml0dGVuIHRvIHdoZW4gZGF0YSBpcyB3cml0dGVuIHRvIHRoZVxuICAqKm1hc3Rlci1hcnJheSoqIHZhcmlhYmxlLlxuICAqIFdoZW4gdGhlIHZhcmlhYmxlIGlzIGNyZWF0ZWQsIHRoZSBkaW1lbnNpb25zIGFyZSBzdXBwbGllZCBhbmQgdGhpcyBlbmFibGVzXG4gIHRoZSAqKnBhcnRpdGlvbiBtYXRyaXgqKiBtZXRhZGF0YSB0byBiZSBnZW5lcmF0ZWQ6XG4gICAgKiBUaGUgW2ZpbGUgc3BsaXR0aW5nIGFsZ29yaXRobV0oI2ZpbGUtc3BsaXR0aW5nLWFsZ29yaXRobSkgZGV0ZXJtaW5lcyBob3dcbiAgICB0byBzcGxpdCB0aGUgdmFyaWFibGUgaW50byB0aGUgKipzdWItYXJyYXlzKiosIG9yIHRoZSB1c2VyIGNhbiBzdXBwbHkgdGhlXG4gICAgc2hhcGUgb2YgdGhlICoqc3ViLWFycmF5cyoqXG4gICAgKiBGcm9tIHRoaXMgaW5mb3JtYXRpb24gdGhlICoqcGFydGl0aW9uIG1hdHJpeCoqIHNoYXBlIGFuZCAqKnBhcnRpdGlvblxuICAgIG1hdHJpeCoqIGxpc3Qgb2YgZGltZW5zaW9ucyBhcmUgY3JlYXRlZC4gIFRoZSAqKnBhcnRpdGlvbiBtYXRyaXgqKiBpc1xuICAgIHJlcHJlc2VudGVkIGludGVybmFsbHkgYnkgYSBuZXRDREYgZGF0YXNldCwgYW5kIHRoaXMgaXMgYWxzbyBjcmVhdGVkLlxuICAqIE9ubHkgd2hlbiBhIHZhcmlhYmxlIGlzIHdyaXR0ZW4gdG8sIHZpYSBhIHNsaWNlIG9wZXJhdGlvbiBvbiBhIHZhcmlhYmxlLFxuICBpcyBlYWNoIGluZGl2aWR1YWwgKipwYXJ0aXRpb24qKiB3cml0dGVuIGludG8gdGhlICoqcGFydGl0aW9uIG1hdHJpeCoqLlxuICAgICogVGhlICoqc3ViLWFycmF5KiogZmlsZSBpcyBjcmVhdGVkLCBlaXRoZXIgaW4gbWVtb3J5IGZvciByZW1vdGVcbiAgICBmaWxlc3lzdGVtcyAoUzMpLCBvciB0byBkaXNrIGZvciBsb2NhbCBmaWxlc3lzdGVtcyAoUE9TSVgpLlxuICAgICogVGhlIGZpbGVuYW1lIGZvciB0aGUgKipzdWItYXJyYXkqKiBpcyBkZXRlcm1pbmVkIHByb2dyYW1tYXRpY2FsbHkuXG4gICAgKiBUaGUgbG9jYXRpb24gaW4gdGhlICoqbWFzdGVyLWFycmF5KiogZm9yIGVhY2ggKipzdWItYXJyYXkqKiAoYW5kIGl0c1xuICAgICBzaGFwZSkgaXMgZGV0ZXJtaW5lZCBieSB0aGUgc2xpY2UgYW5kIHRoZSAqKnN1Yi1hcnJheSoqIHNoYXBlIGRldGVybWluZWRcbiAgICAgYnkgZWl0aGVyIHRoZSBmaWxlIHNwbGl0dGluZyBhbGdvcml0aG0sIG9yIHN1cHBsaWVkIGJ5IHRoZSB1c2VyLlxuICAgICogVGhpcyBzaW5nbGUgKipwYXJ0aXRpb24qKiBpbmZvcm1hdGlvbiBpcyB3cml0dGVuIGludG8gdGhlICoqcGFydGl0aW9uLVxuICAgIG1hdHJpeCoqXG4gICAgKiBUaGUgZmllbGQgZGF0YSBpcyB3cml0dGVuIGludG8gdGhlICoqc3ViLWFycmF5KiogZmlsZS5cbiAgICAqIE9uIHN1YnNlcXVlbnQgc2xpY2VzIGludG8gdGhlIHNhbWUgKipzdWItYXJyYXkqKiwgdGhlICoqcGFydGl0aW9uKipcbiAgICBpbmZvcm1hdGlvbiBpcyB1c2VkLCByYXRoZXIgdGhhbiByZXdyaXR0ZW4uXG4gICogV2hlbiB0aGUgKiptYXN0ZXItYXJyYXkqKiBmaWxlIGlzIGNsb3NlZCAoYnkgdGhlIHVzZXIgY2FsbGluZ1xuICAgICAgYHMzRGF0YXNldC5jbG9zZSgpYCk6XG4gICAgKiBUaGUgKipwYXJ0aXRpb24gbWF0cml4KiogbWV0YWRhdGEgaXMgd3JpdHRlbiB0byB0aGUgKiptYXN0ZXItYXJyYXkqKlxuICAgICogSWYgdGhlIGZpbGVzIGFyZSBsb2NhdGVkIG9uIGEgcmVtb3RlIGZpbGVzeXN0ZW0gKFMzKSwgdGhlbiB0aGV5IG9ubHlcbiAgICBjdXJyZW50bHkgZXhpc3QgaW4gbWVtb3J5ICh1bmxlc3MgdGhleSBoYXZlIGJlZW4gXCJzaHVmZmxlZFwiIHRvIHN0b3JhZ2UpLlxuICAgIFRoZXkgYXJlIG5vdyBjbG9zZWQgKGluIG1lbW9yeSkgYW5kIHRoZW4gdXBsb2FkZWQgdG8gdGhlIHJlbW90ZSBzdG9yYWdlLiAgXG4gICAgQW55IGFwcGVuZGVkIGZpbGVzIGFyZSBhbHNvIHVwbG9hZGVkIHRvIHJlbW90ZSBzdG9yYWdlLlxuICAgICogSWYgdGhlIGZpbGVzIGFyZSBub3Qgb24gYSByZW1vdGUgZmlsZXN5c3RlbSwgdGhlbiB0aGV5IGFyZSBjbG9zZWQsIHRoZVxuICAgICoqc3ViLWFycmF5KiogZmlsZXMgaW4gdHVybiwgYW5kIHRoZW4gdGhlICoqbWFzdGVyLWFycmF5KiogZmlsZSBsYXN0LlxuXG4jIyMgRmlsZW5hbWVzIGFuZCBmaWxlIGhpZXJhcmNoeSBvZiBDRkEgZmlsZXNcblxuQXMgbm90ZWQgYWJvdmUsIENGQSBmaWxlcyBhY3R1YWxseSBjb25zaXN0IG9mIGEgc2luZ2xlICoqbWFzdGVyLWFycmF5KiogZmlsZVxuYW5kIG1hbnkgKipzdWItYXJyYXkqKiBmaWxlcy4gIFRoZXNlICoqc3ViYXJyYXktZmlsZXMqKiBhcmUgcmVmZXJyZWQgdG8gYnlcbnRoZWlyIGZpbGVwYXRoIG9yIFVSSSBpbiB0aGUgcGFydGl0aW9uIG1hdHJpeC4gIFRvIGVhc2lseSBhc3NvY2lhdGUgdGhlICoqc3ViLVxuYXJyYXkqKiBmaWxlcyB3aXRoIHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUsIGEgbmFtaW5nIGNvbnZlbnRpb24gYW5kIGZpbGVcbnN0cnVjdHVyZSBpcyB1c2VkOlxuXG4qIFRoZSBbQ0ZBIGNvbnZlbnRpb25zXShodHRwOi8vd3d3Lm1ldC5yZWFkaW5nLmFjLnVrL35kYXZpZC9jZmEvMC40LykgZGljdGF0ZVxudGhhdCB0aGUgZmlsZSBleHRlbnNpb24gZm9yIGEgQ0ZBLW5ldENERiBmaWxlIHNob3VsZCBiZSBgLm5jYWBcbiogQSBkaXJlY3RvcnkgaXMgY3JlYXRlZCBpbiB0aGUgc2FtZSBkaXJlY3RvcnkgLyBzYW1lIHJvb3QgVVJJIGFzIHRoZSAqKm1hc3Rlci1cbmFycmF5KiogZmlsZS4gIFRoaXMgZGlyZWN0b3J5IGhhcyB0aGUgc2FtZSBuYW1lICoqbWFzdGVyLWFycmF5KiogZmlsZSB3aXRob3V0XG50aGUgYC5uY2FgIGV4dGVuc2lvblxuKiBJbiB0aGlzIGRpcmVjdG9yeSBhbGwgb2YgdGhlICoqc3ViLWFycmF5KiogZmlsZXMgYXJlIGNvbnRhaW5lZC4gIFRoZXNlXG5zdWJhcnJheSBmaWxlcyBmb2xsb3cgdGhlIG5hbWluZyBjb252ZW50aW9uOlxuXG4gICAgYDxtYXN0ZXItYXJyYXktZmlsZS1uYW1lPi48dmFyaWFibGUtbmFtZT4uWzxsb2NhdGlvbiBpbiB0aGUgcGFydGl0aW9uXG4gICAgbWF0cml4Pl0ubmNgXG5cbkV4YW1wbGUgZm9yIHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUgYGE3dHpnYS5wZGw0ZmViLm5jYWA6XG5cbiAgICDilJzilIDilIAgYTd0emdhLnBkbDRmZWIubmNhXG4gICAg4pSc4pSA4pSAIGE3dHpnYS5wZGw0ZmViXG4gICAg4pSCwqDCoCDilJzilIDilIAgYTd0emdhLnBkbDRmZWIuZmllbGQxNi4wLm5jXG4gICAg4pSCwqDCoCDilJzilIDilIAgYTd0emdhLnBkbDRmZWIuZmllbGQxNi4xLm5jXG4gICAg4pSCwqDCoCDilJzilIDilIAgYTd0emdhLnBkbDRmZWIuZmllbGQxODYuMC5uY1xuICAgIOKUgsKgwqAg4pSc4pSA4pSAIGE3dHpnYS5wZGw0ZmViLmZpZWxkMTg2LjEubmNcbiAgICDilILCoMKgIOKUnOKUgOKUgCBhN3R6Z2EucGRsNGZlYi5maWVsZDEuMC4wLm5jXG4gICAg4pSCwqDCoCDilJzilIDilIAgYTd0emdhLnBkbDRmZWIuZmllbGQxLjAuMS5uY1xuICAgIOKUgsKgwqAg4pSc4pSA4pSAIGE3dHpnYS5wZGw0ZmViLmZpZWxkMS4xLjAubmNcbiAgICDilILCoMKgIOKUnOKUgOKUgCBhN3R6Z2EucGRsNGZlYi5maWVsZDEuMS4xLm5jXG5cbk9uIGFuIFMzIHN0b3JhZ2Ugc3lzdGVtLCB0aGUgKiptYXN0ZXItYXJyYXkqKiBkaXJlY3Rvcnkgd2lsbCBmb3JtIHBhcnQgb2YgdGhlXG4qcHJlZml4KiBmb3IgdGhlICoqc3ViLWFycmF5Kiogb2JqZWN0cywgYXMgZGlyZWN0b3JpZXMgZG8gbm90IGV4aXN0LCBpbiBhXG5saXRlcmFsIHNlbnNlLCBvbiBTMyBzdG9yYWdlIHN5c3RlbXMsIG9ubHkgcHJlZml4ZXMuXG5cbipOb3RlIHRoYXQgdGhlIG1ldGFkYXRhIGluIHRoZSBtYXN0ZXItYXJyYXkgZmlsZSBpbmZvcm1zIFMzbmV0Q0RGNCB3aGVyZSB0aGVcbnN1Yi1hcnJheSBmaWxlcyBhcmUgbG9jYXRlZC4gIFRoZSBhYm92ZSBmaWxlIHN0cnVjdHVyZSBkZWZpbmVzIHRoZSBkZWZhdWx0XG5iZWhhdmlvdXIsIGJ1dCB0aGUgc3BlY2lmaWNhdGlvbiBvZiBTM25ldENERjQgYWxsb3dzIHN1Yi1hcnJheSBmaWxlcyB0byBiZVxubG9jYXRlZCBhbnl3aGVyZSwgYmUgdGhhdCBvbiBTMywgUE9TSVggZGlzayBvciBPcGVuREFQLipcblxuIyMjIFdyaXRpbmcgbWV0YWRhdGFcblxuTWV0YWRhdGEgY2FuIGJlIHdyaXR0ZW4gdG8gdGhlIHZhcmlhYmxlcyBhbmQgdGhlIERhdGFzZXQgKGdsb2JhbCBtZXRhZGF0YSkgaW5cbnRoZSBzYW1lIHdheSBhcyB0aGUgc3RhbmRhcmQgbmV0Q0RGNCBsaWJyYXJ5LCBieSBjcmVhdGluZyBhIG1lbWJlciB2YXJpYWJsZSBvblxudGhlIFZhcmlhYmxlIG9yIERhdGFzZXQgb2JqZWN0OlxuXG4qRXhhbXBsZSA2OiBjcmVhdGluZyB2YXJpYWJsZXMgd2l0aCBtZXRhZGF0YSo8YSBuYW1lPWV4YW1wbGUtNj48L2E+XG5gYGBcbmZyb20gUzNuZXRDREY0Ll9zM25ldENERjQgaW1wb3J0IHMzRGF0YXNldCBhcyBEYXRhc2V0XG53aXRoIERhdGFzZXQoXCIvVXNlcnMvbmVpbC90ZXN0X2RhdGFzZXRfY2ZhMy5uY2FcIiwgbW9kZT0ndycsIGRpc2tsZXNzPVRydWUsXG5mb3JtYXQ9XCJDRkEzXCIpIGFzIHMzX2RhdGE6XG4gICAgIyBjcmVhdGUgdGhlIGRpbWVuc2lvbnNcbiAgICBsYXRkID0gczNfZGF0YS5jcmVhdGVEaW1lbnNpb24oXCJsYXRcIiwgMTk2KVxuICAgIGxvbmQgPSBzM19kYXRhLmNyZWF0ZURpbWVuc2lvbihcImxvblwiLCAyNTYpXG4gICAgIyBjcmVhdGUgdGhlIGRpbWVuc2lvbiB2YXJpYWJsZXNcbiAgICBsYXRpdHVkZXMgPSBzM19kYXRhLmNyZWF0ZVZhcmlhYmxlKFwibGF0XCIsIFwiZjRcIiwgKFwibGF0XCIsKSlcbiAgICBsb25naXR1ZGVzID0gczNfZGF0YS5jcmVhdGVWYXJpYWJsZShcImxvblwiLCBcImY0XCIsIChcImxvblwiLCkpXG4gICAgIyBjcmVhdGUgdGhlIGZpZWxkIHZhcmlhYmxlXG4gICAgdGVtcCA9IHMzX2RhdGEuY3JlYXRlVmFyaWFibGUoXCJ0bXBcIiwgXCJmNFwiLCAoXCJsYXRcIiwgXCJsb25cIikpXG5cbiAgICAjIGFkZCBzb21lIGF0dHJpYnV0ZXMgLSB2YXJpYWJsZSBtZXRhZGF0YVxuICAgIHMzX2RhdGEuc291cmNlID0gXCJzM25ldENERjQgcHl0aG9uIG1vZHVsZSB0dXRvcmlhbFwiXG4gICAgczNfZGF0YS51bml0cyA9IFwiZGVncmVlcyBDXCJcbiAgICBsYXRpdHVkZXMudW5pdHMgPSBcImRlZ3JlZXMgbm9ydGhcIlxuICAgIGxvbmdpdHVkZXMudW5pdHMgPSBcImRlZ3JlZXMgZWFzdFwiXG5cbiAgICAjIGFkZCBzb21lIGdsb2JhbCBtZXRhZGF0YVxuICAgIHRlbXAuYXV0aG9yID0gXCJOZWlsIE1hc3NleVwiXG5gYGBcblxuIyMjIFdyaXRpbmcgZmllbGQgZGF0YVxuXG5Gb3IgbmV0Q0RGIGZpbGVzIHdpdGggYGZvcm1hdD1ORVRDREYzX0NMQVNTSUNgIG9yIGBmb3JtYXQ9TkVUQ0RGNGAsIHRoZVxudmFyaWFibGUgaXMgY3JlYXRlZCBhbmQgZmllbGQgZGF0YSBpcyB3cml0dGVuIHRvIHRoZSBmaWxlIChhcyBtaXNzaW5nIHZhbHVlcylcbndoZW4gYGNyZWF0ZVZhcmlhYmxlYCBpcyBjYWxsZWQgb24gdGhlIGBzM0RhdGFzZXRgIG9iamVjdC4gIENhbGxzIHRvIHRoZSBgW11gXG5vcGVyYXRvciAoaS5lLiBzbGljaW5nIHRoZSBhcnJheSkgd2lsbCB3cml0ZSBkYXRhIHRvIHRoZSB2YXJpYWJsZSBhbmQgdG8gdGhlXG5maWxlIHdoZW4gdGhlIG9wZXJhdG9yIGlzIGNhbGxlZC4gIFRoaXMgaXMgdGhlIHNhbWUgYmVoYXZpb3VyIGFzIG5ldENERjQtXG5weXRob24uIElmIGEgUzMgVVJJIGlzIHNwZWNpZmllZCAoZmlsZXBhdGggc3RhcnRzIHdpdGggYHMzOi8vYCkgdGhlbiB0aGUgZmlsZVxuaXMgZmlyc3QgY3JlYXRlZCBpbiBtZW1vcnkgYW5kIHRoZW4gc3RyZWFtZWQgdG8gUzMgb24gY2xvc2luZyB0aGUgZmlsZS5cblxuRm9yIG5ldENERiBmaWxlcyB3aXRoIGBmb3JtYXQ9Q0ZBM2Agb3IgYGZvcm1hdD1DRkE0YCBzcGVjaWZpZWQgaW4gdGhlXG5gczNEYXRhc2V0YCBjb25zdHJ1Y3Rvciwgb25seSB0aGUgKiptYXN0ZXItYXJyYXkqKiBmaWxlIGlzIHdyaXR0ZW4gdG8gd2hlblxuYGNyZWF0ZURpbWVuc2lvbmAsIGBjcmVhdGVWYXJpYWJsZWAgZXRjLiBhcmUgY2FsbGVkIG9uIHRoZSBgczNEYXRhc2V0YFxub2JqZWN0LiAgV2hlbiBgY3JlYXRlVmFyaWFibGVgIGlzIGNhbGxlZCwgYSBzY2FsYXIgZmllbGQgdmFyaWFibGUgKGkuZS4gd2l0aFxubm8gZGltZW5zaW9ucykgaXMgY3JlYXRlZCwgdGhlICoqcGFydGl0aW9uLW1hdHJpeCoqIGlzIGNhbGN1bGF0ZWQgKHNlZSBbRmlsZVxuc3BsaXR0aW5nIGFsZ29yaXRobV0oI2ZpbGUtc3BsaXR0aW5nLWFsZ29yaXRobSkpIGFuZCB3cml0dGVuIHRvIHRoZSBzY2FsYXJcbmZpZWxkIHZhcmlhYmxlLiAgVGhlICoqc3ViLWFycmF5KiogZmlsZXMgYXJlIG9ubHkgY3JlYXRlZCB3aGVuIHRoZSBgW11gXG5vcGVyYXRvciBpcyBjYWxsZWQgb24gdGhlIGBWYXJpYWJsZWAgb2JqZWN0IHJldHVybiBmcm9tIHRoZVxuYHMzRGF0YXNldC5jcmVhdGVWYXJpYWJsZWAgbWV0aG9kLiAgVGhpcyBvcGVyYXRvciBpcyBpbXBsZW1lbnRlZCBpbiBTM25ldENERiBhc1xudGhlIGBfX3NldGl0ZW1fX2AgbWVtYmVyIGZ1bmN0aW9uIG9mIHRoZSBgczNWYXJpYWJsZWAgY2xhc3MsIGFuZCBjb3JyZXNwb25kc1xudG8gc2xpY2luZyB0aGUgYXJyYXkuXG5cbldyaXRpbmcgYSBzbGljZSBvZiBmaWVsZCBkYXRhIHRvIHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUsIHZpYSBgX19zZXRpdGVtX19gXG5jb25zaXN0cyBvZiBmaXZlIG9wZXJhdGlvbnM6XG5cbjEuIERldGVybWluaW5nIHdoaWNoIG9mIHRoZSAqKnN1Yi1hcnJheXMqKiBvdmVybGFwIHdpdGggdGhlIHNsaWNlLiAgVGhpcyBpc1xuY3VycmVudGx5IGRvbmUgdmlhIGEgaHlwZXJjdWJlIG92ZXJsYXBwaW5nIG1ldGhvZCwgaS5lLiB0aGUgbG9jYXRpb24gb2YgdGhlXG4qKnN1Yi1hcnJheSoqIGNhbiBiZSBkZXRlcm1pbmVkIGJ5IGRpdmlkaW5nIHRoZSBkaW1lbnNpb24gaW5kZXggYnkgdGhlIGxlbmd0aFxub2YgdGhlIGRpbWVuc2lvbiBpbiB0aGUgKipwYXJ0aXRpb24gbWF0cml4KiouICBUaGlzIGFzc3VtZXMgdGhhdCB0aGUgKipzdWItYXJyYXlzKiogYXJlIHVuaWZvcm0gKHBlciBkaW1lbnNpb24pIGluIHNpemUuXG5cbjIuIElmIHRoZSBzaXplIG9mIHRoZSAqKnN1Yi1hcnJheSoqIGZpbGUgd2lsbCBjYXVzZSB0aGUgY3VycmVudGx5IHVzZWQgYW1vdW50XG5vZiBtZW1vcnkgdG8gZXhjZWVkIHRoZSBgcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YCBzZXR0aW5nIGluIGB+Ly5zM25jLmpzb25gXG50aGVuIHNvbWUgZmlsZXMgbWF5IGJlIHNodWZmbGVkIG91dCBvZiBtZW1vcnkuICBTZWUgdGhlIFtSZXNvdXJjZSBVc2FnZV0oI3Jlc291cmNlKSBzZWN0aW9uIGFib3ZlLiAgVGhpcyBtYXkgcmVzdWx0IGluIHNvbWUgZmlsZXMgYmVpbmcgd3JpdHRlblxudG8gdGhlIHJlbW90ZSBzdG9yYWdlLCBtZWFuaW5nIHRoZXkgd2lsbCBiZSBvcGVuZWQgaW4gYXBwZW5kIG1vZGUgdGhlIG5leHQgdGltZVxudGhleSBhcmUgd3JpdHRlbiB0by5cbklmLCBldmVuIGFmdGVyIHRoZSBmaWxlIHNodWZmbGluZyBoYXMgb2NjdXJyZWQsIHRoZSBzaXplIG9mIHRoZSAqKnN1Yi1hcnJheSoqXG5jYW5ub3QgYmUgY29udGFpbmVkIGluIG1lbW9yeSB0aGVuIGEgbWVtb3J5IGVycm9yIHdpbGwgb2NjdXIuXG5cbjMuIE9wZW4gb3IgY3JlYXRlIHRoZSBmaWxlIGZvciB0aGUgKipzdWItYXJyYXkqKiBhY2NvcmRpbmcgdG8gdGhlIGZpbGVwYXRoIG9yXG5VUkkgaW4gdGhlICoqcGFydGl0aW9uKiogaW5mb3JtYXRpb24uICBJZiBhIFMzIFVSSSBpcyBzcGVjaWZpZWQgKGZpbGVwYXRoXG5zdGFydHMgd2l0aCBgczM6Ly9gKSB0aGVuIHRoZSBmaWxlIGlzIG9wZW5lZCBvciBjcmVhdGVkIGluIG1lbW9yeSwgYW5kXG53aWxsIGJlIHVwbG9hZGVkIHdoZW4gYC5jbG9zZSgpYCBpcyBjYWxsZWQgb24gdGhlIGBzM0RhdGFzZXRgLiAgVGhlIGZpbGUgd2lsbCBiZVxud2lsbCBiZSBvcGVuZWQgaW4gY3JlYXRlIG1vZGUgKGB3YCkuXG5cbjQuIFRoZSBkaW1lbnNpb25zIGFuZCB2YXJpYWJsZSBhcmUgY3JlYXRlZCBmb3IgdGhlICoqc3ViLWFycmF5KiogZmlsZSwgYW5kIHRoZVxubWV0YWRhdGEgaXMgYWxzbyB3cml0dGVuLlxuXG41LiBDYWxjdWxhdGUgdGhlIHNvdXJjZSBhbmQgdGFyZ2V0IHNsaWNlcy4gIFRoaXMgY2FsY3VsYXRlcyB0aGUgbWFwcGluZ1xuYmV0d2VlbiB0aGUgaW5kaWNlcyBpbiB0aGUgKiptYXN0ZXItYXJyYXkqKiBhbmQgZWFjaCAqKnN1Yi1hcnJheSoqLiAgVGhpcyBpc1xuY29tcGxpY2F0ZWQgYnkgYWxsb3dpbmcgdGhlIHVzZXIgdG8gY2hvb3NlIGFueSBzbGljZSBmb3IgdGhlICoqbWFzdGVyLWFycmF5KipcbmFuZCBzbyB0aGlzIG11c3QgYmUgY29ycmVjdGx5IHRyYW5zbGF0ZWQgdG8gdGhlICoqc3ViLWFycmF5KiogaW5kaWNlcy5cblxuNi4gQ29weSB0aGUgZGF0YSBmcm9tIHRoZSBzb3VyY2Ugc2xpY2UgdG8gdGhlIHRhcmdldCBzbGljZS5cblxuRm9yIHRob3NlIGZpbGVzIHRoYXQgaGF2ZSBhbiBTMyBVUkksIHVwbG9hZGluZyB0byBTMyBvYmplY3Qgc3RvcmFnZSBpc1xucGVyZm9ybWVkIHdoZW4gYC5jbG9zZSgpYCBpcyBjYWxsZWQgb24gdGhlIGBzM0RhdGFzZXRgLlxuXG4jIyMgUGFydGlhbCB3cml0aW5nIG9mIGZpZWxkIGRhdGFcblxuVGhlICoqcGFydGl0aW9uKiogaW5mb3JtYXRpb24gaXMgb25seSB3cml0dGVuIGludG8gdGhlICoqcGFydGl0aW9uLW1hdHJpeCoqXG53aGVuIHRoZSBzM0RhdGFzZXQgaXMgaW4gXCJ3cml0ZVwiIG1vZGUgYW5kIHRoZSB1c2VyIHNsaWNlcyBpbnRvIHRoZSBwYXJ0IG9mIHRoZVxuKiptYXN0ZXItYXJyYXkqKiB0aGF0IGlzIGNvdmVyZWQgYnkgdGhhdCAqKnBhcnRpdGlvbioqLiAgQ29uc2VxdWVudGx5LCB0aGVcbioqc3ViLWFycmF5KiogZmlsZSBpcyBvbmx5IGNyZWF0ZWQgd2hlbiB0aGUgKipwYXJ0aXRpb24qKiBpcyB3cml0dGVuIGludG8gdGhlXG4qKnBhcnRpdGlvbi1tYXRyaXgqKi5cblxuVGhpcyBsZWFkcyB0byB0aGUgc2l0dWF0aW9uIHRoYXQgYSBsYXJnZSBwYXJ0IG9mIHRoZSAqKnBhcnRpdGlvbi1tYXRyaXgqKiBtYXlcbmhhdmUgdW5kZWZpbmVkIGRhdGEsIGFuZCBhIGxhcmdlIG51bWJlciBvZiAqKnN1Yi1hcnJheSoqIGZpbGVzIG1heSBub3QgZXhpc3QuICBcblRoaXMgbWFrZXMgczNuZXRDREY0IGV4Y2VsbGVudCBmb3Igc3BhcnNlIGRhdGEsIGFzIHRoZSAqKnN1Yi1hcnJheSoqIHNpemUgY2FuXG5iZSBvcHRpbWlzZWQgc28gdGhhdCB0aGUgc3BhcnNlIGRhdGEgb2NjdXBpZXMgbWluaW1hbCBzcGFjZS5cblxuSWYsIGluIFwicmVhZFwiIG1vZGUsIHRoZSB1c2VyIHNwZWNpZmllcyBhIHNsaWNlIHRoYXQgY29udGFpbnMgYSAqKnN1Yi1hcnJheSoqXG50aGF0IGlzIG5vdCBkZWZpbmVkLCB0aGVuIHRoZSAqKm1pc3NpbmcgdmFsdWUqKiAoYF9GaWxsVmFsdWVgKSBpcyByZXR1cm5lZCBmb3JcbnRoZSBzdWItZG9tYWluIG9mIHRoZSAqKm1hc3Rlci1hcnJheSoqIHdoaWNoIHRoZSAqKnN1Yi1hcnJheSoqIG9jY3VwaWVzLlxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMjIEZpbGUgc3BsaXR0aW5nIGFsZ29yaXRobVxuXG5UbyBzcGxpdCB0aGUgKiptYXN0ZXItYXJyYXkqKiBpbnRvIGl0J3MgY29uc3RpdHVlbnQgKipzdWItYXJyYXlzKiogYSBtZXRob2RcbmZvciBzcGxpdHRpbmcgYSBsYXJnZSBuZXRDREYgZmlsZSBpbnRvIHNtYWxsZXIgbmV0Q0RGIGZpbGVzIGlzIHVzZWQuICBUaGVcbmhpZ2gtbGV2ZWwgYWxnb3JpdGhtIGlzOlxuXG4xLiBTcGxpdCB0aGUgZmllbGQgdmFyaWFibGVzIHNvIHRoYXQgdGhlcmUgaXMgb25lIGZpZWxkIHZhcmlhYmxlIHBlciBmaWxlLiAgXG5uZXRDREYgYWxsb3dzIG11bHRpcGxlIGZpZWxkIHZhcmlhYmxlcyBpbiBhIHNpbmdsZSBmaWxlLCBzbyB0aGlzIGlzIGFuIG9idmlvdXNcbmFuZCBlYXN5IHdheSBvZiBwYXJ0aXRpb25pbmcgdGhlIGZpbGUuICBOb3RlIHRoYXQgdGhpcyBvbmx5IHNwbGl0cyB0aGUgZmllbGRcbnZhcmlhYmxlcyB1cCwgdGhlIGRpbWVuc2lvbiB2YXJpYWJsZXMgYWxsIHJlbWFpbiBpbiB0aGUgKiptYXN0ZXItYXJyYXkqKiBmaWxlLlxuXG4yLiBGb3IgZWFjaCBmaWVsZCB2YXJpYWJsZSBmaWxlLCBzcGxpdCBhbG9uZyB0aGUgYHRpbWVgLCBgbGV2ZWxgLCBgbGF0aXR1ZGVgIG9yXG5gbG9uZ2l0dWRlYCBkaW1lbnNpb25zLiAgTm90ZSB0aGF0LCBpbiBuZXRDREYgZmlsZXMsIHRoZSBvcmRlciBvZiB0aGVcbmRpbWVuc2lvbnMgaXMgYXJiaXRyYXJ5LCBlLmcuIHRoZSBvcmRlciBjb3VsZCBiZSBgW3RpbWUsIGxldmVsLCBsYXRpdGlkZSxcbmxvbmdpdHVkZV1gIG9yIGBbbG9uZ2l0dWRlLCBsYXRpdHVkZSwgbGV2ZWwsIHRpbWVdYCBvciBldmVuIGBbbGF0aXR1ZGUsIHRpbWUsXG5sb25naXR1ZGUsIGxldmVsXWAuICBcblMzbmV0Q0RGNCB1c2VzIHRoZSBtZXRhZGF0YSBhbmQgbmFtZSBmb3IgZWFjaCBkaW1lbnNpb24gdmFyaWFibGUgdG8gZGV0ZXJtaW5lXG50aGUgb3JkZXIgb2YgdGhlIGRpbWVuc2lvbnMgc28gdGhhdCBpdCBjYW4gc3BsaXQgdGhlbSBjb3JyZWN0bHkuICBOb3RlIHRoYXRcbmFueSBvdGhlciBkaW1lbnNpb24gKGBlbnNlbWJsZWAgb3IgYGV4cGVyaW1lbnRgKSB3aWxsIGFsd2F5cyBoYXZlIGxlbmd0aCBvZiAxLFxuaS5lLiB0aGUgZGltZW5zaW9uIHdpbGwgYmUgc3BsaXQgaW50byBhIG51bWJlciBvZiBmaWVsZHMgZXF1YWwgdG8gaXRzIGxlbmd0aC5cblxuVGhlIG1heGltdW0gc2l6ZSBvZiBhbiBvYmplY3QgKGEgKipzdWItYXJyYXkqKiBmaWxlKSBjYW4gYmUgZ2l2ZW4gYXMgYSBrZXl3b3JkXG5hcmd1bWVudCB0byBgczNEYXRhc2V0LmNyZWF0ZVZhcmlhYmxlYCBvciBgczNHcm91cC5jcmVhdGVWYXJpYWJsZWA6XG5gbWF4X3N1YmFycmF5X3NpemU9YC4gIElmIG5vIGBtYXhfc3ViYXJyYXlfc2l6ZWAga2V5d29yZCBpcyBzdXBwbGllZCwgdGhlbiBpdFxuZGVmYXVsdHMgdG8gNTBNQi5cblRvIGRldGVybWluZSB0aGUgbW9zdCBvcHRpbWFsIG51bWJlciBvZiBzcGxpdHMgZm9yIHRoZSBgdGltZWAsIGBsYXRpdHVkZWAgb3JcbmBsb25naXR1ZGVgIGRpbWVuc2lvbnMsIHdoaWxlIHN0aWxsIHN0YXlpbmcgdW5kZXIgdGhpcyBtYXhpbXVtIHNpemVcbmNvbnN0cmFpbnQsIHR3byB1c2UgY2FzZXMgYXJlIGNvbnNpZGVyZWQ6XG5cbjEuIFRoZSB1c2VyIHdpc2hlcyB0byByZWFkIGFsbCB0aGUgdGltZXN0ZXBzIGZvciBhIHNpbmdsZSBsYXRpdHVkZS1sb25naXR1ZGVcbnBvaW50IG9mIGRhdGEuXG4yLiBUaGUgdXNlciB3aXNoZXMgdG8gcmVhZCBhbGwgbGF0aXR1ZGUtbG9uZ2l0dWRlIHBvaW50cyBvZiB0aGUgZGF0YSBmb3IgYVxuc2luZ2xlIHRpbWVzdGVwLlxuXG5Gb3IgY2FzZSAxLCB0aGUgb3B0aW1hbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBzcGxpdCB0aGUgKiptYXN0ZXItYXJyYXkqKiBpbnRvXG4qKnN1Yi1hcnJheXMqKiB0aGF0IGhhdmUgbGVuZ3RoIDEgZm9yIHRoZSBgbG9uZ2l0dWRlYCBhbmQgYGxhdGl0dWRlYCBkaW1lbnNpb25cbmFuZCBhIGxlbmd0aCBlcXVhbCB0byB0aGUgbnVtYmVyIG9mIHRpbWVzdGVwcyBmb3IgdGhlIGB0aW1lYCBkaW1lbnNpb24uICBGb3JcbmNhc2UgMiwgdGhlIG9wdGltYWwgc29sdXRpb24gd291bGQgYmUgdG8gbm90IHNwbGl0IHRoZSBgbG9uZ2l0dWRlYCBhbmRcbmBsYXRpdHVkZWAgZGltZW5zaW9ucyBidXQgc3BsaXQgZWFjaCB0aW1lc3RlcCBzbyB0aGF0IHRoZSBsZW5ndGggb2YgdGhlIGB0aW1lYFxuZGltZW5zaW9uIGlzIDEuICBIb3dldmVyLCBib3RoIG9mIHRoZXNlIGNhc2VzIGhhdmUgdGhlIHdvcnN0IGNhc2Ugc2NlbmFyaW8gZm9yXG50aGUgb3RoZXIgdXNlIGNhc2UuICBcblxuQmFsYW5jaW5nIHRoZSBudW1iZXIgb2Ygb3BlcmF0aW9ucyBuZWVkZWQgdG8gcGVyZm9ybSBib3RoIG9mIHRoZXNlIHVzZSBjYXNlcyxcbndoaWxlIHN0aWxsIHN0YXlpbmcgdW5kZXIgdGhlIGBtYXhfc3ViYXJyYXlfc2l6ZWAgbGVhZHMgdG8gYW4gb3B0aW1pc2F0aW9uXG5wcm9ibGVtIHdoZXJlIHRoZSBmb2xsb3dpbmcgdHdvIGVxdWFsaXRpZXMgbXVzdCBiZSBiYWxhbmNlZDpcblxuMS4gdXNlIGNhc2UgMSA9IG48c3ViPlQ8L3N1Yj4gLyBkPHN1Yj5UPC9zdWI+XG4yLiB1c2UgY2FzZSAyID0gbjxzdWI+bGF0PC9zdWI+IC8gZDxzdWI+bGF0PC9zdWI+ICoqWCoqIG48c3ViPmxvbjwvc3ViPiAvXG5kPHN1Yj5sb248L3N1Yj5cblxud2hlcmUgbjxzdWI+VDwvc3ViPiBpcyB0aGUgbGVuZ3RoIG9mIHRoZSBgdGltZWAgZGltZW5zaW9uIGFuZCBkPHN1Yj5UPC9zdWI+IGlzXG50aGUgbnVtYmVyIG9mIHNwbGl0cyBhbG9uZyB0aGUgYHRpbWVgIGRpbWVuc2lvbi4gIG48c3ViPmxhdDwvc3ViPiBpcyB0aGVcbmxlbmd0aCBvZiB0aGUgYGxhdGl0dWRlYCBkaW1lbnNpb24gYW5kIGQ8c3ViPmxhdDwvc3ViPiB0aGUgbnVtYmVyIG9mIHNwbGl0c1xuYWxvbmcgdGhlIGBsYXRpdHVkZWAgZGltZW5zaW9uLiAgbjxzdWI+bG9uPC9zdWI+IGlzIHRoZSBsZW5ndGggb2YgdGhlXG5gbG9uZ2l0dWRlYCBkaW1lbnNpb24gYW5kIGQ8c3ViPmxvbjwvc3ViPiB0aGUgbnVtYmVyIG9mIHNwbGl0cyBhbG9uZyB0aGVcbmBsb25naXR1ZGUgZGltZW5zaW9uYC5cblxuVGhlIGZvbGxvd2luZyBhbGdvcml0aG0gaXMgdXNlZDpcbiogQ2FsY3VsYXRlIHRoZSBjdXJyZW50IG9iamVjdCBzaXplIE88c3ViPnM8L3N1Yj4gPSBuPHN1Yj5UPC9zdWI+IC8gZDxzdWI+VDwvXG5zdWI+ICoqWCoqIG48c3ViPmxhdDwvc3ViPiAvIGQ8c3ViPmxhdDwvc3ViPiAqKlgqKiBuPHN1Yj5sb248L3N1Yj4gL1xuZDxzdWI+bG9uPC9zdWI+XG4qICoqd2hpbGUqKiBPPHN1Yj5zPC9zdWI+ID4gYG1heF9zdWJhcnJheV9zaXplYCwgc3BsaXQgYSBkaW1lbnNpb246XG4gICogKippZioqIGQ8c3ViPmxhdDwvc3ViPiAqKlgqKiBkPHN1Yj5sb248L3N1Yj4gPD0gZDxzdWI+VDwvc3ViPjpcbiAgICAqICoqaWYqKiBkPHN1Yj5sYXQ8L3N1Yj4gPD0gZDxzdWI+bG9uPC9zdWI+OlxuICAgICAgICBzcGxpdCBsYXRpdHVkZSBkaW1lbnNpb24gYWdhaW46IGQ8c3ViPmxhdDwvc3ViPiArPSAxXG4gICAgKiAqKmVsc2U6KipcbiAgICAgICAgc3BsaXQgbG9uZ2l0dWRlIGRpbWVuc2lvbiBhZ2FpbjogZDxzdWI+bG9uPC9zdWI+ICs9IDFcbiAgKiAqKmVsc2U6KipcbiAgICBzcGxpdCB0aGUgdGltZSBkaW1lbnNpb24gYWdhaW46IGQ8c3ViPlQ8L3N1Yj4gKz0gMVxuXG5Vc2luZyB0aGlzIHNpbXBsZSBkaXZpZGUgYW5kIGNvbnF1ZXIgYWxnb3JpdGhtIGVuc3VyZXMgdGhlIGBtYXhfc3ViYXJyYXlfc2l6ZWBcbmNvbnN0cmFpbnQgaXMgbWV0IGFuZCB0aGUgdXNlIGNhc2VzIHJlcXVpcmUgYW4gZXF1YWwgbnVtYmVyIG9mIG9wZXJhdGlvbnMuXG5cbipOb3RlIHRoYXQgaW4gdjIuMCBvZiBTM25ldENERjQsIHRoZSB1c2VyIGNhbiBzcGVjaWZ5IHRoZSBzdWItYXJyYXkgc2hhcGUgaW5cbnRoZSBzM0RhdGFzZXQuY3JlYXRlVmFyaWFibGUgbWV0aG9kLiAgVGhpcyBjaXJjdW12ZW50cyB0aGUgZmlsZS1zcGxpdHRpbmdcbmFsZ29yaXRobSBhbmQgdXNlcyBqdXN0IHRoZSBzdWItYXJyYXkgc2hhcGUgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyLipcblxuW1tUb3BdXSgjY29udGVudHMpXG5cbiMjIFJlYWRpbmcgZmlsZXNcblxuUzNuZXRDREY0IGhhcyB0aGUgYWJpbGl0eSB0byByZWFkIG5vcm1hbCBuZXRDREY0IGFuZCBuZXRDREYzIGZpbGVzLCAqKkNGQS1cbm5ldENERjQqKiBhbmQgKipDRkEtbmV0Q0RGMyoqIGZpbGVzIGZyb20gYSBQT1NJWCBmaWxlc3lzdGVtLCBBbWF6b24gUzMgb2JqZWN0XG5zdG9yZSBhbmQgT1BlTkRBUC4gIFxuRm9yIGZpbGVzIG9uIHJlbW90ZSBzdG9yYWdlLCBiZWZvcmUgcmVhZGluZyB0aGUgZmlsZSwgUzNuZXRDREY0IHdpbGwgcXVlcnlcbnRoZSBmaWxlIHNpemUgYW5kIGRldGVybWluZSB3aGV0aGVyIGl0IGlzIGdyZWF0ZXIgdGhhbiB0aGVcbmByZXNvdXJjZV9hbGxvY2F0aW9uOiBtZW1vcnlgIHNldHRpbmcgaW4gdGhlIGB+Ly5zM25jLmpzb25gIGNvbmZpZ3VyYXRpb24gb3JcbmdyZWF0ZXIgdGhhbiB0aGUgY3VycmVudCBhdmFpbGFibGUgbWVtb3J5LiAgSWYgaXQgaXMsIHRoZW4gc29tZSBmaWxlcyB3aWxsIGJlXG5cInNodWZmbGVkXCIgb3V0IG9mIG1lbW9yeSB1bnRpbCB0aGVyZSBpcyBlbm91Z2ggYWxsb2NhdGVkIG1lbW9yeSBhdmFpbGFibGUuICBTZWVcbltSZXNvdXJjZSBVc2FnZV0oI3Jlc291cmNlKSBmb3IgbW9yZSBkZXRhaWxzLiAgSWYgaXQgaXMgbGVzcyB0aGFuIHRoZVxuYHJlc291cmNlX2FsbG9jYXRpb246IG1lbW9yeWAgc2V0dGluZyB0aGVuIGl0IHdpbGwgc3RyZWFtIHRoZSBmaWxlXG5kaXJlY3RseSBpbnRvIG1lbW9yeS4gIEZpbGVzIG9uIGxvY2FsIGRpc2sgKFBPU0lYKSBhcmUgb3BlbmVkIGluIHRoZSBzYW1lIHdheVxuYXMgdGhlIHN0YW5kYXJkIG5ldENERjQgbGlicmFyeSwgaS5lLiB0aGUgaGVhZGVyLCB2YXJpYWJsZSBhbmQgZGltZW5zaW9uXG5pbmZvcm1hdGlvbiBhbmQgbWV0YWRhdGEgYXJlIHJlYWQgaW4sIGJ1dCBubyBmaWVsZCBkYXRhIGlzIHJlYWQuXG5cbkZyb20gYSB1c2VyIHBlcnNwZWN0aXZlLCBmaWxlcyBhcmUgcmVhZCBpbiB0aGUgc2FtZSB3YXkgYXMgdGhlIHN0YW5kYXJkXG5uZXRDREY0LXB5dGhvbiBwYWNrYWdlLCBieSBjcmVhdGluZyBhIGBzM0RhdGFzZXRgIG9iamVjdC4gIEFzIHdpdGggd3JpdGluZ1xuZmlsZXMsIHRoZSBwYXJhbWV0ZXJzIHRvIHRoZSBgczNEYXRhc2V0YCBjb25zdHJ1Y3RvciBjYW4gdmFyeSBpbiBhIG51bWJlciBvZlxud2F5czpcblxuMS4gIFRoZSBgZmlsZW5hbWVgIGNhbiBiZSBhbiBTMyBlbmRwb2ludCwgaS5lLiBpdCBzdGFydHMgd2l0aCBgczM6Ly9gLCBvciBhXG5maWxlIG9uIHRoZSBkaXNrLCBvciBhbiBPcGVuREFQIFVSTC5cbjIuICBUaGUgYGZvcm1hdGAgY2FuIGJlIGBDRkEzYCBvciBgQ0ZBNGAgdG8gcmVhZCBpbiBhICoqQ0ZBLW5ldENERjMqKiBvciAqKkNGQS1cbm5ldENERjQqKiBkYXRhc2V0LiAgKipIb3dldmVyKiosIGl0IGlzIG5vdCBuZWNlc3NhcnkgdG8gc3BlY2lmeSB0aGlzIGtleXdvcmQgaWZcbnRoZSB1c2VyIHdpc2hlcyB0byByZWFkIGluIGEgQ0ZBIGZpbGUsIGFzIFMzbmV0Q0RGNCB3aWxsIGRldGVybWluZSwgZnJvbSB0aGVcbm1ldGFkYXRhLCB3aGV0aGVyIGEgbmV0Q0RGIGZpbGUgaXMgYSByZWd1bGFyIG5ldENERiBmaWxlIG9yIGEgQ0ZBLW5ldENERiBmaWxlLiAgXG5TM25ldENERjQgd2lsbCBhbHNvIGRldGVybWluZSwgZnJvbSB0aGUgZmlsZSBoZWFkZXIsIHdoZXRoZXIgYSBuZXRDREYgZmlsZSBpcyBhXG5uZXRDREY0IG9yIG5ldENERjMgZmlsZS4gIElmIHRoZSBmaWxlIHJlc2lkZXMgb24gYW4gUzMgc3RvcmFnZSBzeXN0ZW0sIHRoZW4gdGhlXG5maXJzdCA2IGJ5dGVzIG9ubHkgb2YgdGhlIGZpbGUgd2lsbCBiZSBmaXJzdCByZWFkIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBmaWxlXG5pcyBhIG5ldENERjQgb3IgbmV0Q0RGMyBmaWxlIG9yIGFuIGludmFsaWQgZmlsZS4gIEFzIGEgQ0ZBLW5ldENERiBmaWxlIGlzIGp1c3RcbmEgbmV0Q0RGIGZpbGUsIGRldGVybWluaW5nIHdoZXRoZXIgdGhlIG5ldENERiBmaWxlIGlzIGEgQ0ZBLW5ldENERiBmaWxlIGlzIGxlZnRcbnVudGlsIHRoZSBmaWxlIGlzIHJlYWQgaW4sIGkuZS4gYWZ0ZXIgdGhlIGludGVycHJldGF0aW9uIG9mIHRoZSBoZWFkZXIuXG4zLiBGaWxlcyB0aGF0IGFyZSBvbiByZW1vdGUgc3RvcmFnZSBhcmUgc3RyZWFtZWQgaW50byBtZW1vcnkuICBBcyBmaWxlcyBhcmVcbnJlYWQgaW4sIG90aGVyIGZpbGVzIG1heSBiZSBcInNodWZmbGVkXCIgb3V0IG9mIG1lbW9yeSBpZiB0aGUgY3VycmVudGx5IHVzZWRcbm1lbW9yeSBleGNlZWRzIHRoZSBgcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YCBzZXR0aW5nIGluIHRoZSBgfi8uczNuYy5qc29uYFxuY29uZmlnIGZpbGUuICBTZWUgW1Jlc291cmNlIFVzYWdlXSgjcmVzb3VyY2UpLlxuXG4qRXhhbXBsZSA3OiBSZWFkIGEgbmV0Q0RGIGZpbGUgZnJvbSBkaXNrKjxhIG5hbWU9ZXhhbXBsZS03PjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0IGFzIERhdGFzZXRcbndpdGggRGF0YXNldChcIi9Vc2Vycy9uZWlsL3Rlc3RfZGF0YXNldF9uYzQubmNcIiwgJ3InKSBhcyBuY19kYXRhOlxuICAgIHByaW50KG5jX2RhdGEudmFyaWFibGVzKVxuYGBgXG5cbipFeGFtcGxlIDg6IFJlYWQgYSBDRkEtbmV0Q0RGIGZpbGUgZnJvbSBTMyBzdG9yYWdlKjxhIG5hbWU9ZXhhbXBsZS04PjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQuX3MzbmV0Q0RGNCBpbXBvcnQgczNEYXRhc2V0IGFzIERhdGFzZXRcbmZyb20gUzNuZXRDREY0IGltcG9ydCBzM0RhdGFzZXQgYXMgRGF0YXNldFxud2l0aCBEYXRhc2V0KFwiczM6Ly90ZW5hbmN5LTAvdGVzdF9idWNrZXQvdGVzdF9kYXRhc2V0X3MzX2NmYTMubmNcIiwgJ3InKSBhcyBuY19kYXRhOlxuICAgIHByaW50KG5jX2RhdGEudmFyaWFibGVzKVxuYGBgXG5cblVwb24gcmVhZGluZyBhIENGQS1uZXRDREYgZmlsZSwgdGhlICoqbWFzdGVyLWFycmF5KiogZmlsZSBpcyBpbnRlcnByZXRlZCB0b1xudHJhbnNmb3JtIHRoZSBtZXRhZGF0YSBpbiB0aGUgZmlsZSAoZm9yIENGQSBgXCJ2MC40XCJgKSwgb3IgdGhlIGluZm9ybWF0aW9uIGluXG50aGUgQ0ZBIGdyb3VwIGZvciB0aGUgdmFyaWFibGUgKGZvciBDRkEgYFwidjAuNVwiYCkgaW50byB0aGUgKipwYXJ0aXRpb25cbm1hdHJpeCoqLiAgU2VlIFtDRkEtXG5uZXRDREYgZmlsZXNdKCNjZmEtbmV0Y2RmLWZpbGVzKSBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gIFxuUGFydCBvZiB0aGlzIHRyYW5zZm9ybWF0aW9uIGludm9sdmVzIGNyZWF0aW5nIGFuIGluc3RhbmNlIG9mIHRoZSBgczNWYXJpYWJsZWBcbmNsYXNzIGZvciBlYWNoIHZhcmlhYmxlIGluIHRoZSBDRkEtbmV0Q0RGIGZpbGUuICBUaGUgYHMzVmFyaWFibGVgIGNsYXNzXG5jb250YWlucyBgX25jX3ZhcmA6IHRoZSBpbnN0YW5jZSBvZiB0aGUgc3RhbmRhcmQgYG5ldENERjQuVmFyaWFibGVgIG9iamVjdDtcbmBfY2ZhX3ZhcmA6IGFuIGluc3RhbmNlIG9mIGBDRkFWYXJpYWJsZWAsIGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIENGQVxuKipzdWItYXJyYXkqKiBhc3NvY2lhdGVkIHdpdGggdGhpcyB2YXJpYWJsZTsgYW5kIGBfY2ZhYDogYW4gaW5zdGFuY2Ugb2ZcbmBDRkFEYXRhc2V0YCwgY29udGFpbmluZyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgQ0ZBICoqbWFzdGVyLWFycmF5KiogZmlsZSB0aGF0XG5jb250YWlucyB0aGlzIHZhcmlhYmxlLlxuVGhlIG1ldGFkYXRhLCBvciBDRkEgZ3JvdXAsIGluIHRoZSAqKm1hc3Rlci1hcnJheSoqIGZpbGUgaXMgcGFyc2VkIHRvIGdlbmVyYXRlXG50aGVzZSB0d28gb2JqZWN0cy4gIFRoZXNlIHR3byBvYmplY3RzIHdpbGwgYmUgdXNlZCB3aGVuIGEgdXNlciBjYWxscyBhIHNsaWNlXG5vcGVyYXRpb24gb24gYSBzM1ZhcmlhYmxlIG9iamVjdC5cblxuW1tUb3BdXSgjY29udGVudHMpXG5cbiMjIyBSZWFkaW5nIHZhcmlhYmxlc1xuXG5JbiB2Mi4wLngsdGhlIHMzbmV0Q0RGNCBBUEkgbm93IG1hdGNoZXMgdGhlIHN0YW5kYXJkIG5ldENERjQgcHl0aG9uIEFQSSBpblxucmVhZGluZyB2YXJpYWJsZSBuYW1lcyBhbmQgdmFyaWFibGVzLiAgUHJldmlvdXNseSwgdHdvIGV4dHJhIGZ1bmN0aW9ucyB3ZXJlIHVzZWRcbihgdmFyaWFibGVzKClgLCBhbmQgYGdldFZhcmlhYmxlKClgKS4gIER1cmluZyB0aGUgcmV3b3JrLCBhIHdheSB3YXMgZm91bmQgdG9cbnByb3ZpZGUgMTAwJSBjb21wYXRpYmlsaXR5IHdpdGggdGhlIG5ldENERjQgcHl0aG9uIEFQSS4gIFRoaXMgaXMgcmVmbGVjdGVkIGluXG50aGUgbWV0aG9kIG9mIGhhbmRsaW5nIHZhcmlhYmxlczpcblxuMS4gYHMzRGF0YXNldC52YXJpYWJsZXNgLCBvciBgczNHcm91cC52YXJpYWJsZXNgIDogcmV0dXJucyBhIGxpc3Qgb2YgdmFyaWFibGVzXG5pbiB0aGUgRGF0YXNldC5cbjIuIGBzM0RhdGFzZXQudmFyaWFibGVzWzx2YXJpYWJsZV9uYW1lPl1gLCBvclxuYHMzR3JvdXAudmFyaWFibGVzWzx2YXJpYWJsZV9uYW1lPl1gIDogcmV0dXJuIHRoZSBgczNuZXRDREY0LnMzVmFyaWFibGVgXG5pbnN0YW5jZSBmb3IgYDx2YXJpYWJsZV9uYW1lPmAgaWYgdGhlIHZhcmlhYmxlIGlzIGEgKiptYXN0ZXItYXJyYXkqKiBpbiBhIENGQS1cbm5ldENERiBmaWxlLCBvciBhIGBuZXRDREY0LlZhcmlhYmxlYCBpbnN0YW5jZSBpZiBpdCBpcyBhIGRpbWVuc2lvbiB2YXJpYWJsZSwgb3JcbmEgdmFyaWFibGUgaW4gYSBzdGFuZGFyZCBuZXRDREYgZmlsZS5cblxuKkV4YW1wbGUgOTogUmVhZCBhIG5ldENERiBmaWxlIGZyb20gZGlzayBhbmQgZ2V0IHRoZSBcImZpZWxkOFwiIHZhcmlhYmxlKjxhIG5hbWU9ZXhhbXBsZS05PjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQgaW1wb3J0IHMzRGF0YXNldCBhcyBEYXRhc2V0XG53aXRoIERhdGFzZXQoXCIvVXNlcnMvbmVpbC90ZXN0X2RhdGFzZXRfbmM0Lm5jXCIpIGFzIHNyY19maWxlOlxuICAgIHByaW50KHNyY19maWxlLnZhcmlhYmxlcylcbiAgICBzcmNfdmFyID0gc3JjX2ZpbGUudmFyaWFibGVzW1wiZmllbGQ4XCJdXG4gICAgcHJpbnQodHlwZShzcmNfdmFyKSlcbmBgYFxuW1tUb3BdXSgjY29udGVudHMpXG5cbiMjIyBSZWFkaW5nIG1ldGFkYXRhXG5cblJlYWRpbmcgbWV0YWRhdGEgZnJvbSB0aGUgVmFyaWFibGVzIG9yIERhdGFzZXQgKGdsb2JhbCBtZXRhZGF0YSkgaXMgZG9uZSBpblxuZXhhY3RseSB0aGUgc2FtZSB3YXkgYXMgaW4gdGhlIHN0YW5kYXJkIG5ldENERjQgcHl0aG9uIHBhY2thZ2UsIGJ5IHF1ZXJ5aW5nIHRoZVxubWVtYmVyIHZhcmlhYmxlIG9mIGVpdGhlciBhIFZhcmlhYmxlIG9yIERhdGFzZXQuICBUaGUgYG5jYXR0cnNgIGFuZCBgZ2V0bmNhdHRyYFxubWVtYmVyIGZ1bmN0aW9ucyBvZiB0aGUgYERhdGFzZXRgIGFuZCBgVmFyaWFibGVgIGNsYXNzZXMgYXJlIGFsc28gc3VwcG9ydGVkLlxuXG4qRXhhbXBsZSAxMDogUmVhZCBhIG5ldENERiBmaWxlLCBhIHZhcmlhYmxlIGFuZCBpdHMgbWV0YWRhdGEqPGEgbmFtZT1leGFtcGxlLTEwPjwvYT5cbmBgYFxuZnJvbSBTM25ldENERjQgaW1wb3J0IHMzRGF0YXNldCBhcyBEYXRhc2V0XG53aXRoIERhdGFzZXQoXCIvVXNlcnMvbmVpbC90ZXN0X2RhdGFzZXRfbmM0Lm5jXCIpIGFzIHNyY19maWxlOlxuICAgIHByaW50KHNyY19maWxlLm5jYXR0cnMoKSlcbiAgICBzcmNfdmFyID0gc3JjX2ZpbGUuZ2V0VmFyaWFibGVbXCJmaWVsZDhcIl1cbiAgICBwcmludChzcmNfdmFyLm5jYXR0cnMoKSlcbiAgICBwcmludChzcmNfdmFyLnVuaXRzKVxuICAgIHByaW50KHNyY192YXIuZ2V0bmNhdHRyKFwidW5pdHNcIikpXG4gICAgcHJpbnQoc3JjX2ZpbGUuYXV0aG9yKVxuICAgIHByaW50KHNyY19maWxlLmdldG5jYXR0cihcImF1dGhvclwiKSlcbmBgYFxuXG5bW1RvcF1dKCNjb250ZW50cylcblxuIyMjIFJlYWRpbmcgZmllbGQgZGF0YVxuXG5SZWFkaW5nIGZpZWxkIGRhdGEgaW4gUzNuZXRDREYgZm9sbG93cyB0aGUgc2FtZSBwcmluY2lwbGVzIGFzIHdyaXRpbmcgdGhlXG5kYXRhOlxuMS4gSWYgdGhlIGZpbGUgaXMgZGV0ZXJtaW5lZCB0byBoYXZlIGBmb3JtYXQ9TkVUQ0RGM19DTEFTU0lDYCBvclxuYGZvcm1hdD1ORVRDREY0YCB0aGVuIGl0IGlzIHJlYWQgaW4gYW5kIHRoZSBmaWVsZCBkYXRhIGlzIG1hZGUgYXZhaWxhYmxlIGluXG50aGUgc2FtZSBtYW5uZXIgYXMgdGhlIHN0YW5kYXJkIG5ldENERjQtcHl0aG9uIHBhY2thZ2UuICBJZiB0aGUgZmlsZSBpc1xucmVzaWRpbmcgb24gUzMgc3RvcmFnZSwgdGhlbiB0aGUgZW50aXJlIGZpbGUgd2lsbCBiZSBzdHJlYW1lZCB0byBtZW1vcnksIGlmXG5pdCBpcyBsYXJnZXIgdGhhbiB0aGUgYHJlc291cmNlX2FsbG9jYXRpb246IG1lbW9yeWAgc2V0dGluZyBpbiBgfi9cbi5zM25jLmpzb25gLCBvciBsYXJnZXIgdGhhbiB0aGUgYXZhaWxhYmxlIG1lbW9yeSwgdGhlbiBhIG1lbW9yeSBlcnJvciB3aWxsXG5iZSByZXR1cm5lZC5cbjIuIElmIHRoZSBmaWxlIGlzIGRldGVybWluZWQgdG8gaGF2ZSBgZm9ybWF0PUNGQTNgIG9yIGBmb3JtYXQ9Q0ZBNGAgdGhlbiBqdXN0XG50aGUgKiptYXN0ZXItYXJyYXkqKiBmaWxlIGlzIHJlYWQgaW4gYW5kIGFueSBmaWVsZCBkYXRhIHdpbGwgb25seSBiZSByZWFkXG53aGVuIHRoZSBgW11gIG9wZXJhdG9yIChgX19nZXRpdGVtX19gKSBpcyBjYWxsZWQgb24gYSBgczNWYXJpYWJsZWAgaW5zdGFuY2UuICBcblVwb24gb3BlbmluZyB0aGUgKiptYXN0ZXItYXJyYXkqKiBmaWxlOlxuMy4gaWYgdGhlIGZpbGUgaXMgYFwidjAuNFwiYCBvZiB0aGUgQ0ZBIGNvbnZlbnRpb25zLCB0aGUgQ0ZBIG1ldGFkYXRhIGlzIHRha2VuXG5mcm9tIHRoZSB2YXJpYWJsZSBtZXRhZGF0YS4gVGhlICoqcGFydGl0aW9uLW1hdHJpeCoqIGlzIGNvbnN0cnVjdGVkIChzZWUgW0ZpbGVcbnNwbGl0dGluZyBhbGdvcml0aG1dKCNmaWxlLXNwbGl0dGluZy1hbGdvcml0aG0pKSBpbnRlcm5hbGx5IGFzIGEgbmV0Q0RGIGdyb3VwXG53aXRoIGRpbWVuc2lvbnMgYW5kIHZhcmlhYmxlcyBjb250YWluaW5nIHRoZSBwYXJ0aXRpb24gaW5mb3JtYXRpb24uXG40LiBpZiB0aGUgZmlsZXMgaXMgQ0ZBIGBcInYwLjVcImAsIHRoZW4gdGhlICoqcGFydGl0aW9uLW1hdHJpeCoqIGlzIHJlYWQgaW5cbmRpcmVjdGx5IGZyb20gdGhlIEdyb3VwcywgRGltZW5zaW9ucyBhbmQgVmFyaWFibGVzIGluIHRoZSBmaWxlLCB3aXRob3V0IGFueVxucGFyc2luZyBoYXZpbmcgdG8gdGFrZSBwbGFjZS5cbjUuIHRoZSBgX2NmYWAsIGBfY2ZhX2dycGAsIGBfY2ZhX2RpbWAgYW5kIGBfY2ZhX3ZhcmAgb2JqZWN0cyBhcmUgY3JlYXRlZCBhc1xubWVtYmVyIHZhcmlhYmxlcyBvZiB0aGUgYHMzRGF0YXNldGAsIGBzM0dyb3VwYCwgYHMzRGltZW5zaW9uYCBhbmQgYHMzVmFyaWFibGVgXG5vYmplY3RzIHJlc3BlY3RpdmVseS4gIFRoZXNlIGFyZSBpbnN0YW5jZXMgb2YgYENGQURhdGFzZXRgLCBgQ0ZBR3JvdXBgLFxuYENGQURpbWVuc2lvbmAgYW5kIGBDRkFWYXJpYWJsZWAgcmVzcGVjdGl2ZWx5LiAgVGhlICoqcGFydGl0aW9uLW1hdHJpeCoqIGlzXG5jb250YWluZWQgd2l0aGluIGEgYG5ldENERjQuR3JvdXBgIHdpdGhpbiB0aGUgYF9jZmFfdmFyYCBpbnN0YW5jZSBvZlxuYENGQVZhcmlhYmxlYFxuXG5JbnRlcm5hbGx5LCB0aGUgKipwYXJ0aXRpb24tbWF0cml4KiogY29uc2lzdHMgb2YgYSBuZXRDREYgZ3JvdXAsIHdoaWNoIGl0c2VsZlxuY29udGFpbnMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIHBhcnRpdGlvbi1tYXRyaXgsIGFuZCB2YXJpYWJsZXMgY29udGFpbmluZyB0aGVcbnBhcnRpdGlvbiBpbmZvcm1hdGlvbi5cbldpdGhpbiB0aGUgczNEYXRhc2V0LCBzM1ZhcmlhYmxlIGFuZCBzM0dyb3VwIG9iamVjdHMsIHRoZXJlIGFyZSBvYmplY3RzIHRoYXRcbmNvbnRhaW4gaGlnaGVyIGxldmVsIENGQSBkYXRhLCBhbmQgdGhlIG1ldGhvZHMgdG8gb3BlcmF0ZSBvbiB0aGF0IGRhdGEuXG5UaGlzIGluZm9ybWF0aW9uIGlzIHVzZWQgd2hlbiBhIHVzZXIgc2xpY2VzIHRoZSBmaWVsZCBkYXRhIHRvIGRldGVybWluZSB3aGljaFxuKipzdWItYXJyYXkqKiBmaWxlcyBhcmUgcmVhZCBhbmQgd2hpY2ggcG9ydGlvbiBvZiB0aGUgKipzdWItYXJyYXkqKiBmaWxlcyBhcmVcbmluY2x1ZGVkIGluIHRoZSBzbGljZTpcblxuMS4gQSBgQ0ZBRGF0YXNldGAgYXMgdGhlIHRvcCBsZXZlbCBjb250YWluZXI6XG4gICAgMS4gQSBudW1iZXIgb2YgYENGQUdyb3VwYHM6IGluZm9ybWF0aW9uIGFib3V0IGdyb3VwcyBpbiB0aGUgZmlsZS4gIFRoZXJlXG4gICAgaXMgYWx3YXlzIGF0IGxlYXN0IG9uZSBncm91cDogdGhlIGByb290YCBncm91cCBpcyBleHBsaWNpdCBpbiBpdHNcbiAgICByZXByZXNlbnRhdGlvbiBpbiB0aGUgYENGQURhdGFzZXRgLiAgV2l0aGluIHRoZSBgQ0ZBR3JvdXBgIHRoZXJlIGFyZTpcbiAgICAgICAgMS4gQSBudW1iZXIgb2YgYENGQURpbWBzIDogaW5mb3JtYXRpb24gYWJvdXQgdGhlIGRpbWVuc2lvbnMgaW4gdGhlXG4gICAgICAgIERhdGFzZXRcbiAgICAgICAgMi4gQSBudW1iZXIgb2YgYENGQVZhcmlhYmxlYHMgOiBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdmFyaWFibGVzIGluXG4gICAgICAgIHRoZSBEYXRhc2V0LCB3aGljaCBjb250YWluczpcbiAgICAgICAgICAgIDEuIFRoZSAqKnBhcnRpdGlvbi1tYXRyaXgqKiB3aGljaCBjb25zaXN0cyBvZiBhIG5ldENERiBncm91cFxuICAgICAgICAgICAgY29udGFpbmluZzpcbiAgICAgICAgICAgICAgICAxLiB0aGUgc2NhbGFyIGRpbWVuc2lvbnMsIHdpdGggbm8gdW5pdHMgb3IgYXNzb2NpYXRlZFxuICAgICAgICAgICAgZGltZW5zaW9uIHZhcmlhYmxlXG4gICAgICAgICAgICAgICAgMi4gdGhlIHZhcmlhYmxlcyBjb250YWluaW5nIHRoZSBwYXJ0aXRpb24gaW5mb3JtYXRpb246XG4gICAgICAgICAgICAgICAgICAgIDEuIGBwbXNoYXBlYCA6IHRoZSBzaGFwZSBvZiB0aGUgKipwYXJ0aXRpb24tbWF0cml4KipcbiAgICAgICAgICAgICAgICAgICAgMi4gYHBtZGltZW5zaW9uc2AgOiB0aGUgZGltZW5zaW9ucyBpbiB0aGUgKiptYXN0ZXItYXJyYXkqKlxuICAgICAgICAgICAgICAgICAgICBmaWxlIHdoaWNoIHRoZSBwYXJ0aXRpb24gbWF0cml4IGFjdHMgb3Zlci5cbiAgICAgICAgICAgICAgICAgICAgMy4gYGluZGV4YCA6IHRoZSBpbmRleCBpbiB0aGUgKipwYXJ0aXRpb24tbWF0cml4KiouICBUaGlzXG4gICAgICAgICAgICAgICAgICAgIGlzIGltcGxpZWQgYnkgdGhlIGxvY2F0aW9uIGluIHRoZSAqKnBhcnRpdGlvbi1tYXRyaXgqKiBidXRcbiAgICAgICAgICAgICAgICAgICAgaXQgaXMgcmV0YWluZWQgdG8gZGV0ZWN0IGVycm9uZW91cyBsb29rdXBzIGJ5IHRoZSBzbGljaW5nXG4gICAgICAgICAgICAgICAgICAgIGFsZ29yaXRobS5cbiAgICAgICAgICAgICAgICAgICAgNC4gYGxvY2F0aW9uYCA6IHRoZSBsb2NhdGlvbiBpbiB0aGUgKiptYXN0ZXItYXJyYXkgZmlsZSoqXG4gICAgICAgICAgICAgICAgICAgIDUuIGBuY3ZhcmAgOiB0aGUgbmFtZSBvZiB0aGUgdmFyaWFibGUgaW4gdGhlICoqc3ViLWFycmF5KipcbiAgICAgICAgICAgICAgICAgICAgZmlsZS5cbiAgICAgICAgICAgICAgICAgICAgNi4gYGZpbGVgIDogdGhlIFVSTCBvciBwYXRoIG9mIHRoZSAqKnN1Yi1hcnJheSoqIGZpbGUuXG4gICAgICAgICAgICAgICAgICAgIDcuIGBmb3JtYXRgIDogdGhlIGZvcm1hdCBvZiB0aGUgKipzdWItYXJyYXkqKiBmaWxlLlxuICAgICAgICAgICAgICAgICAgICA4LiBgc2hhcGVgIDogdGhlIHNoYXBlIG9mIHRoZSAqKnN1Yi1hcnJheSoqIGZpbGUuXG5cbiAgICAgICAgICAgIDIuIE1ldGhvZHMgdG8gYWN0IHVwb24gdGhlIHZhcmlhYmxlIGFuZCBpdHMgKipwYXJ0aXRpb24tbWF0cml4KiosXG4gICAgICAgICAgICBpbmNsdWRpbmc6XG4gICAgICAgICAgICAgICAgMS4gYF9fZ2V0aXRlbV9fYCA6IHJldHVybnMgdGhlIG5lY2Vzc2FyeSBpbmZvcm1hdGlvbiB0b1xuICAgICAgICAgICAgICAgIHJlYWQgYW5kIHdyaXRlICoqc3ViLWFycmF5KiogZmlsZXMuXG4gICAgICAgICAgICAgICAgMi4gYGdldFBhcnRpdGlvbmAgOiByZXR1cm4gYSB1c2VyLXJlYWRhYmxlIHZlcnNpb24gb2YgYVxuICAgICAgICAgICAgICAgIHBhcnRpdGlvbiAoYSBzaW5nbGUgZWxlbWVudCBpbiB0aGUgKipwYXJ0aXRpb24tbWF0cml4KiopIGFzIGFcbiAgICAgICAgICAgICAgICBQeXRob24gbmFtZWQgdHVwbGUsIHJhdGhlciB0aGFuIGEgbmV0Q0RGIEdyb3VwIG9yIFZhcmlhYmxlLlxuXG5SZWFkaW5nIGEgc2xpY2Ugb2YgZmllbGQgZGF0YSBmcm9tIGEgdmFyaWFibGUgaW4gdGhlICoqbWFzdGVyLWFycmF5KiogZmlsZSxcbnZpYSBfX2dldGl0ZW1fXyBjb25zaXN0cyBvZiBmaXZlIG9wZXJhdGlvbnM6XG5cbjEuIElmIHRoZSB0b3RhbCBzaXplIG9mIHRoZSByZXF1ZXN0ZWQgc2xpY2UgaXMgZ3JlYXRlciB0aGFuXG5gcmVzb3VyY2VfYWxsb2NhdGlvbjogbWVtb3J5YCAob3IgdGhlIGF2YWlsYWJsZSBtZW1vcnkpIHRoZW4gYSBOdW1weSBtZW1vcnlcbm1hcHBlZCBhcnJheSBpcyBjcmVhdGVkIGluIHRoZSBsb2NhdGlvbiBpbmRpY2F0ZWQgYnkgdGhlIGBjYWNoZV9sb2NhdGlvbjpgXG5zZXR0aW5nIGluIHRoZSBgfi8uczNuYy5qc29uYCBjb25maWcgZmlsZS5cblxuMi4gRGV0ZXJtaW5lIHdoaWNoIG9mIHRoZSAqKnN1Yi1hcnJheXMqKiBvdmVybGFwcyB3aXRoIHRoZSBzbGljZSwgYnkgcXVlcnlpbmdcbnRoZSAqKnBhcnRpdGlvbi1tYXRyaXgqKi4gIFRoaXMgaXMgY3VycmVudGx5IGRvbmUgYnkgYSBzaW1wbGUgYXJpdGhtZXRpY1xub3BlcmF0aW9uIHRoYXQgcmVsaWVzIG9uIHRoZSAqKnBhcnRpdGlvbnMqKiBhbGwgYmVpbmcgdGhlIHNhbWUgc2l6ZS5cblxuMy4gQ2FsY3VsYXRlIHRoZSBzb3VyY2UgYW5kIHRhcmdldCBzbGljZXMsIHRoZSBzb3VyY2UgYmVpbmcgdGhlICoqc3ViLWFycmF5KipcbmFuZCB0aGUgdGFyZ2V0ICh0aGUgKiptYXN0ZXItYXJyYXkqKikgYSBtZW1vcnktbWFwcGVkIE51bXB5IGFycmF5IHdpdGggYSBzaGFwZVxuZXF1YWwgdG8gdGhlIHVzZXIgc3VwcGxpZWQgc2xpY2UuICBUaGUgbG9jYXRpb24gb2YgdGhpcyAqKnN1Yi1hcnJheSoqIGluIHRoZVxuKiptYXN0ZXItYXJyYXkqKiBpcyBnaXZlbiBieSB0aGUgKipwYXJ0aXRpb24qKiBjb250YWluaW5nIHRoZSAqKnN1Yi1hcnJheSoqLFxud2hpY2ggZ2l2ZXMgdGhlIHNsaWNlIGludG8gdGhlICoqbWFzdGVyLWFycmF5KiouICBIb3dldmVyLCBib3RoIHRoZSBzbGljZSBvZlxudGhlICoqc3ViLWFycmF5KiogYW5kICoqbWFzdGVyLWFycmF5KiogbWF5IG5lZWQgdG8gYmUgYWx0ZXJlZCBpZiB0aGUgdXNlclxuc3VwcGxpZWQgc2xpY2UgZG9lcyBub3QgZW5jYXBzdWxhdGUgdGhlIHdob2xlICoqc3ViLWFycmF5KiosIGZvciBleGFtcGxlIGlmIGFcbnJhbmdlIG9mIHRpbWVzdGVwcyBhcmUgdGFrZW4uXG5cbjQuIEZvciBlYWNoIG9mIHRoZSAqKnN1Yi1hcnJheXMqKiB0aGUgZmlsZSBzcGVjaWZpZWQgYnkgdGhlIGBmaWxlYCB2YXJpYWJsZSBpblxudGhlICoqcGFydGl0aW9uKiogaW5mb3JtYXRpb24gaXMgb3BlbmVkLiAgSWYgdGhlIGZpbGUgaXMgb24gZGlzaywgaXQgaXMgc2ltcGx5XG5vcGVuZWQgaW4gdGhlIHNhbWUgd2F5IGFzIGEgc3RhbmRhcmQgbmV0Q0RGNCBweXRob24gZmlsZS4gIElmIGl0IGlzIG9uIGEgcmVtb3RlXG5maWxlIHN5c3RlbSwgc3VjaCBhcyBTMywgdGhlbiBpdCBpcyBzdHJlYW1lZCBpbnRvIG1lbW9yeS4gIElmIHRoZSBzaXplIG9mIHRoZVxuKipzdWItYXJyYXkqKiBmaWxlIHdpbGwgY2F1c2UgdGhlIGN1cnJlbnRseSB1c2VkIGFtb3VudFxub2YgbWVtb3J5IHRvIGV4Y2VlZCB0aGUgYHJlc291cmNlX2FsbG9jYXRpb246IG1lbW9yeWAgc2V0dGluZyBpbiBgfi8uczNuYy5qc29uYFxudGhlbiBzb21lIGZpbGVzIG1heSBiZSBzaHVmZmxlZCBvdXQgb2YgbWVtb3J5LiAgU2VlIHRoZSBbUmVzb3VyY2VcblVzYWdlXSgjcmVzb3VyY2UpIHNlY3Rpb24gYWJvdmUuXG5JZiwgZXZlbiBhZnRlciB0aGUgZmlsZSBzaHVmZmxpbmcgaGFzIG9jY3VycmVkLCB0aGUgc2l6ZSBvZiB0aGUgKipzdWItYXJyYXkqKlxuY2Fubm90IGJlIGNvbnRhaW5lZCBpbiBtZW1vcnkgdGhlbiBhIG1lbW9yeSBlcnJvciB3aWxsIG9jY3VyLlxuXG41LiBBIG5ldENERjQtcHl0aG9uIGBEYXRhc2V0YCBvYmplY3QgaXMgb3BlbmVkIGZyb20gdGhlIGRvd25sb2FkZWQgZmlsZSBvclxuc3RyZWFtZWQgbWVtb3J5LlxuXG42LiBUaGUgdmFsdWVzIGluIHRoZSAqKnN1Yi1hcnJheSoqIGFyZSBjb3BpZWQgdG8gdGhlICoqbWFzdGVyLWFycmF5KiogKHRoZVxubWVtb3J5LW1hcHBlZCBOdW1weSBhcnJheSkgdXNpbmcgdGhlIHNvdXJjZSAoKipzdWItYXJyYXkqKikgc2xpY2UgYW5kIHRoZVxudGFyZ2V0ICgqKm1hc3Rlci1hcnJheSoqKSBzbGljZS5cblxuKkN1cnJlbnRseSB0aGUgcmVhZGluZyBvZiBkYXRhIGlzIHBlcmZvcm1lZCBhc3luY2hyb25vdXNseSwgdXNpbmdcbmFpb2JvdG9jb3JlLiAgUzNuZXRDREY0IGFsbG93cyBwYXJhbGxlbCB3b3JrZmxvd3MgdXNpbmcgbXVsdGktcHJvY2Vzc2luZyBvclxuRGFzaywgYnkgdXNpbmcgdGhlIENGQSBpbmZvcm1hdGlvbiBzdG9yZWQgaW4gdGhlIENGQURhdGFzZXQsIENGQUdyb3VwLFxuQ0ZBRGltZW5zaW9uIGFuZCBDRkFWYXJpYWJsZSBjbGFzc2VzLiAgRXhhbXBsZXMgb2YgdGhpcyB3aWxsIGZvbGxvdypcblxuIyMgTGlzdCBvZiBleGFtcGxlc1xuXG4qIFtFeGFtcGxlIDE6IG9wZW4gYSBuZXRDREYgZmlsZSBmcm9tIGEgUzMgc3RvcmFnZSB1c2luZyB0aGUgYWxpYXMgXCJ0ZW5hbmN5LTBcIl0oI2V4YW1wbGUtMSlcbiogW0V4YW1wbGUgMjogQ3JlYXRlIGEgbmV0Q0RGNCBmaWxlIGluIHRoZSBmaWxlc3lzdGVtXSgjZXhhbXBsZS0yKVxuKiBbRXhhbXBsZSAzOiBDcmVhdGUgYSBDRkEtbmV0Q0RGNCBmaWxlIGluIHRoZSBmaWxlc3lzdGVtIHdpdGggQ0ZBIHZlcnNpb24gMC41XSgjZXhhbXBsZS0zKVxuKiBbRXhhbXBsZSA0OiBDcmVhdGUgYSBDRkEtbmV0Q0RGNCBmaWxlIGluIHRoZSBmaWxlc3lzdGVtXSgjZXhhbXBsZS00KVxuKiBbRXhhbXBsZSA1OiBDcmVhdGUgYSBDRkEtbmV0Q0RGMyBmaWxlIG9uIFMzIHN0b3JhZ2VdKCNleGFtcGxlLTUpXG4qIFtFeGFtcGxlIDY6IGNyZWF0aW5nIGRpbWVuc2lvbnMgYW5kIHZhcmlhYmxlc10oI2V4YW1wbGUtNilcbiogW0V4YW1wbGUgNzogY3JlYXRpbmcgdmFyaWFibGVzIHdpdGggbWV0YWRhdGFdKCNleGFtcGxlLTcpXG4qIFtFeGFtcGxlIDg6IFJlYWQgYSBuZXRDREYgZmlsZSBmcm9tIGRpc2tdKCNleGFtcGxlLTgpXG4qIFtFeGFtcGxlIDk6IFJlYWQgYSBuZXRDREYgZmlsZSBmcm9tIGRpc2sgYW5kIGdldCB0aGUgXCJmaWVsZDhcIiB2YXJpYWJsZV0oI2V4YW1wbGUtOSlcbiogW0V4YW1wbGUgMTA6IFJlYWQgYSBuZXRDREYgZmlsZSwgYSB2YXJpYWJsZSBhbmQgaXRzIG1ldGFkYXRhXSgjZXhhbXBsZS0xMClcblxuW1tUb3BdXSgjY29udGVudHMpXG5cblxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cDovL3d3dy5jZWRhLmFjLnVrLyIs
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIm15IExpY2Vuc2UiLA==
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogIlMzbmV0Q0RGNCIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvUzNuZXRDREY0LyIs
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvUzNuZXRDREY0LyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHA6Ly93d3cuY2VkYS5hYy51ay8i
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvUzNuZXRDREY0LzIuMXJjMS8iLA==
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgIm51bXB5ICg+PTEuMTkuMCkiLA==
ICAgICAgImN5dGhvbiIs
ICAgICAgIm5ldGNkZjQiLA==
ICAgICAgImJvdG9jb3JlIiw=
ICAgICAgImFpb2JvdG9jb3JlIiw=
ICAgICAgInBzdXRpbCI=
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIkEgbGlicmFyeSB0byBmYWNpbGl0YXRlIHRoZSBzdG9yYWdlIG9mIG5ldENERiBmaWxlcyBvbiBPYmplY3RTdG9yZXMgaW4gYW4gZWZmaWNpZW50IG1hbm5lci4iLA==
ICAgICJ2ZXJzaW9uIjogIjIuMXJjMSIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiA5NjQ5NDEwLA==
ICAicmVsZWFzZXMiOiB7
ICAgICIyLjFyYzEiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmYjI3MjIwZjNlYjg5NmQ3Mjc4MDU1MzczYWMxMjA2MGQzOWY1ZTIwMzk5OTRlZGFjNzhiMDljMmJiZjUwMTVhIiw=
ICAgICAgICAgICJtZDUiOiAiMmU5MDI3ZDY3YmZkYTRjMzFjMGRjZTMzYzI2M2E3NGUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYTI1MWI3ZjdlZWRmNDM0NDc1OWJkMzgzNDA5ODM4ZmIwNmJlOWZmZWNmMDU5ZmYzNTliNDViYzFhYzdlYmY0ZSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiUzNuZXRDREY0LTIuMXJjMS1jcDM5LWNwMzktbWFjb3N4XzEwXzE1X3g4Nl82NC53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyZTkwMjdkNjdiZmRhNGMzMWMwZGNlMzNjMjYzYTc0ZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAiY3AzOSIs
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDE5Nzk0ODUs
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wMy0wNFQxMjozODowOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wMy0wNFQxMjozODowOS43ODc1MDhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mYi8yNy8yMjBmM2ViODk2ZDcyNzgwNTUzNzNhYzEyMDYwZDM5ZjVlMjAzOTk5NGVkYWM3OGIwOWMyYmJmNTAxNWEvUzNuZXRDREY0LTIuMXJjMS1jcDM5LWNwMzktbWFjb3N4XzEwXzE1X3g4Nl82NC53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzZDIyMmNkZDgzZDM5ODM5NmE2NzgwNjg1YmYyNGQ0NTE5YzNkYTVkYmQ2YjQ4NjA2YTRhNTg4YmE2MjIyZWZlIiw=
ICAgICAgICAgICJtZDUiOiAiZTNhYTFiYmU2ZjRhOWZkMjg2YWM5NTNjMTI3MWUwOTciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNDdhMzIyY2M4ZmM3ODgzZTc5NTM3NjUzMTAzYTVmYWVlZGM5MmNlOTQ2Y2I2OWU5YjkyNGE1ODM0YjExZjg5MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiUzNuZXRDREY0LTIuMXJjMS50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlM2FhMWJiZTZmNGE5ZmQyODZhYzk1M2MxMjcxZTA5NyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDEwMzM5NTks
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wMy0wNFQxMjozODoxMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wMy0wNFQxMjozODoxMi4yMjkzNjhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zZC8yMi8yY2RkODNkMzk4Mzk2YTY3ODA2ODViZjI0ZDQ1MTljM2RhNWRiZDZiNDg2MDZhNGE1ODhiYTYyMjJlZmUvUzNuZXRDREY0LTIuMXJjMS50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiZmIyNzIyMGYzZWI4OTZkNzI3ODA1NTM3M2FjMTIwNjBkMzlmNWUyMDM5OTk0ZWRhYzc4YjA5YzJiYmY1MDE1YSIs
ICAgICAgICAibWQ1IjogIjJlOTAyN2Q2N2JmZGE0YzMxYzBkY2UzM2MyNjNhNzRlIiw=
ICAgICAgICAic2hhMjU2IjogImEyNTFiN2Y3ZWVkZjQzNDQ3NTliZDM4MzQwOTgzOGZiMDZiZTlmZmVjZjA1OWZmMzU5YjQ1YmMxYWM3ZWJmNGUi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogIlMzbmV0Q0RGNC0yLjFyYzEtY3AzOS1jcDM5LW1hY29zeF8xMF8xNV94ODZfNjQud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMmU5MDI3ZDY3YmZkYTRjMzFjMGRjZTMzYzI2M2E3NGUiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogImNwMzkiLA==
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAxOTc5NDg1LA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjEtMDMtMDRUMTI6Mzg6MDkiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjEtMDMtMDRUMTI6Mzg6MDkuNzg3NTA4WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvZmIvMjcvMjIwZjNlYjg5NmQ3Mjc4MDU1MzczYWMxMjA2MGQzOWY1ZTIwMzk5OTRlZGFjNzhiMDljMmJiZjUwMTVhL1MzbmV0Q0RGNC0yLjFyYzEtY3AzOS1jcDM5LW1hY29zeF8xMF8xNV94ODZfNjQud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiM2QyMjJjZGQ4M2QzOTgzOTZhNjc4MDY4NWJmMjRkNDUxOWMzZGE1ZGJkNmI0ODYwNmE0YTU4OGJhNjIyMmVmZSIs
ICAgICAgICAibWQ1IjogImUzYWExYmJlNmY0YTlmZDI4NmFjOTUzYzEyNzFlMDk3Iiw=
ICAgICAgICAic2hhMjU2IjogIjQ3YTMyMmNjOGZjNzg4M2U3OTUzNzY1MzEwM2E1ZmFlZWRjOTJjZTk0NmNiNjllOWI5MjRhNTgzNGIxMWY4OTMi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogIlMzbmV0Q0RGNC0yLjFyYzEudGFyLmd6Iiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiZTNhYTFiYmU2ZjRhOWZkMjg2YWM5NTNjMTI3MWUwOTciLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAxMDMzOTU5LA==
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjEtMDMtMDRUMTI6Mzg6MTIiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjEtMDMtMDRUMTI6Mzg6MTIuMjI5MzY4WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvM2QvMjIvMmNkZDgzZDM5ODM5NmE2NzgwNjg1YmYyNGQ0NTE5YzNkYTVkYmQ2YjQ4NjA2YTRhNTg4YmE2MjIyZWZlL1MzbmV0Q0RGNC0yLjFyYzEudGFyLmd6Iiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
