ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiSm9oYW5uZXMgRmlzY2hlciIs
ICAgICJhdXRob3JfZW1haWwiOiAiPGF1bGFzcGFydGljdWxhcmVzZGVhbGVtYW9zcEBnbWFpbC5jb20+Iiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA0IC0gQmV0YSIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIDo6IE9ubHkiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlRvcGljIDo6IFNjaWVudGlmaWMvRW5naW5lZXJpbmcgOjogVmlzdWFsaXphdGlvbiIs
ICAgICAgIlRvcGljIDo6IFNvZnR3YXJlIERldmVsb3BtZW50IDo6IExpYnJhcmllcyA6OiBQeXRob24gTW9kdWxlcyIs
ICAgICAgIlRvcGljIDo6IFRleHQgRWRpdG9ycyA6OiBUZXh0IFByb2Nlc3NpbmciLA==
ICAgICAgIlRvcGljIDo6IFRleHQgUHJvY2Vzc2luZyA6OiBGaWx0ZXJzIiw=
ICAgICAgIlRvcGljIDo6IFRleHQgUHJvY2Vzc2luZyA6OiBHZW5lcmFsIiw=
ICAgICAgIlRvcGljIDo6IFRleHQgUHJvY2Vzc2luZyA6OiBJbmRleGluZyIs
ICAgICAgIlRvcGljIDo6IFV0aWxpdGllcyI=
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICJcbiMjIExpYnJhcnkgdG8gaGFuZGxlIGFueSBuZXN0ZWQgaXRlcmFibGUgKGxpc3QsIHR1cGxlLCBkaWN0LCBqc29uLCBldGMuKSBpbiBQYW5kYXMgLSBubyBtYXR0ZXIgaG93IGRlZXBseSBpdCBpcyBuZXN0ZWQhXG5cblxuXG4jIyBVcGRhdGU6XG5cblxuXG4qKjIwMjIvMDkvMzA6KiogRGF0YUZyYW1lIGlzIG5vdyBjcmVhdGVkIGRpcmVjdGx5IGZyb20gaXRlclxuXG5cblxuKioyMDIyLzA5LzMwOioqIE5vIG1vcmUgd2FybmluZyAoUGVyZm9ybWFuY2VXYXJuaW5nOiBEYXRhRnJhbWUgaXMgaGlnaGx5IGZyYWdtZW50ZWQpLCB3aGVuIERhdGFGcmFtZSBpcyBjcmVhdGVkIGZyb20gYSBodWdlIG5lc3RlZCBkaWN0IChkZXB0aDogMTQ4NikgIFRyeSBpdDogaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2hhbnNhbGVtYW9zL2FfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wvbWFpbi9yZWN1cnNpb24lMjBfaGFyZGNvcmVfdGVzdC5weVxuXG5cblxuYGBgcHl0aG9uXG5cbnBpcCBpbnN0YWxsIGEtcGFuZGFzLWV4LXBsb2RlLXRvb2xcblxuYGBgXG5cblxuXG5gYGBweXRob25cblxuZnJvbSBhX3BhbmRhc19leF9wbG9kZV90b29sIGltcG9ydCBwZF9hZGRfZXhwbG9kZV90b29sc1xuXG5wZF9hZGRfZXhwbG9kZV90b29scygpXG5cbmltcG9ydCBwYW5kYXMgYXMgcGRcblxuZGYgPSBwZC5yZWFkX2NzdihcImh0dHBzOi8vZ2l0aHViLmNvbS9wYW5kYXMtZGV2L3BhbmRhcy9yYXcvbWFpbi9kb2MvZGF0YS9haXJfcXVhbGl0eV9sb25nLmNzdlwiKVxuXG5gYGBcblxuXG5cbioqSEFORExFIE5FU1RFRCBJVEVSQUJMRVMqKlxuXG5cblxuVGhlIGNvZGUgYWJvdmUgd2lsbCBhZGQgc29tZSBtZXRob2RzIHRvwqAqKnBkLiAvIHBkLkRhdGFGcmFtZSAvIHBkLlNlcmllcyoqLCB5b3UgY2FuIHVzZSBwYW5kYXMgbGlrZSB5b3UgZGlkIGJlZm9yZSwgYnV0IHlvdSB3aWxsIGhhdmUgYSBjb3VwbGUgb2YgbWV0aG9kcyBtb3JlOlxuXG5cblxuLSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZigpXG5cbi0gcGQuUV9Db3JydXB0SnNvbkZpbGVfMmRpY3QoKVxuXG4tIHBkLlFfUmVhZEZpbGVXaXRoQWxsRW5jb2RpbmdzXzJkZigpXG5cbi0gZGYuZF9maWx0ZXJfZHR5cGVzKClcblxuLSBkZi5kX211bHRpcGxlX2NvbHVtbnNfdG9fb25lKClcblxuLSBkZi5kX2RmX3RvX25lc3RlZF9kaWN0KClcblxuLSBkZi5kX2FkZF92YWx1ZV90b19leGlzdGluZ19jb2x1bW5zX3dpdGhfbG9jKClcblxuLSBkZi5kX3NldF92YWx1ZXNfd2l0aF9kZl9sb2MoKVxuXG4tIGRmLmRfZHJvcF9yb3dzX3dpdGhfZGZfbG9jKClcblxuLSBkZi5kX2RmbG9jKClcblxuLSBkZi5kX3N0YWNrKClcblxuLSBkZi5kX3Vuc3RhY2soKVxuXG4tIGRmLmRfc29ydF9jb2x1bW5zX3dpdGhfc29ydGVkKClcblxuLSBkZi5kX21lcmdlX211bHRpcGxlX2Rmc19hbmRfc2VyaWVzX29uX29uZV9jb2x1bW4oKVxuXG4tIGRmLmRfbWVyZ2VfbXVsdGlwbGVfZGZzX2FuZF9zZXJpZXNfb25faW5kZXgoKVxuXG4tIGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoKVxuXG4tIGRmLmRzX2FsbF9uYW5zX3RvX3BkTkEoKVxuXG4tIGRmLmRzX2V4cGxvZGVfZGljdHNfaW5fY29sdW1uKClcblxuLSBkZi5kc19pc25hKClcblxuLSBkZi5kc19ub3JtYWxpemVfbGlzdHMoKVxuXG4tIGRmLnNfZGVsZXRlX2R1cGxpY2F0ZXNfZnJvbV9pdGVyc19pbl9jZWxscygpXG5cbi0gZGYuc19mbGF0dGVuX2FsbF9pdGVyc19pbl9jZWxscygpXG5cbi0gZGYuc19hc19mbGF0dGVuZWRfbGlzdCgpXG5cbi0gZGYuc19leHBsb2RlX2xpc3RzX2FuZF90dXBsZXMoKVxuXG5cblxuKipBbGwgbWV0aG9kcyBhZGRlZCB0byBwYW5kYXMgaGF2ZSBvbmUgb2YgdGhlc2UgcHJlZml4ZXM6KipcblxuXG5cbi0gKipkc18qKsKgKGZvciBEYXRhRnJhbWVzIGFuZCBTZXJpZXMpXG5cblxuXG4tICoqc18qKsKgKG9ubHkgZm9yIFNlcmllcylcblxuXG5cbi0gKipkXyoqwqAob25seSBmb3IgRGF0YUZyYW1lcylcblxuXG5cbi0gKipRXyoqwqAoYWRkZWQgdG8gcGQuKVxuXG5cblxuIyMjIHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKCkgLyBkZi5kX2ZpbHRlcl9kdHlwZXMoKSAvIGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoKVxuXG5cblxuKipwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZigpKiogdHJhbnNmb3JtcyBhbnkgbmFzdHkgaXRlcmFibGUgaW50byBhIGJlYXV0aWZ1bCBQYW5kYXMgRGF0YUZyYW1lIHdpdGggYSBbTXVsdGlJbmRleF0oaHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy9kb2NzL3VzZXJfZ3VpZGUvYWR2YW5jZWQuaHRtbClcblxuXG5cbioqZGYuZF9maWx0ZXJfZHR5cGVzKCkqKiBhdm9pZHMgVHlwZUVycm9yIEV4Y2VwdGlvbnMgXG5cblxuXG5kZi5sb2NbZGYuYWFfdmFsdWUgPjMwLCdhYV92YWx1ZSddID0gOTAwMDAwMDAgIFxuXG5cblxuVHJhY2ViYWNrIChtb3N0IHJlY2VudCBjYWxsIGxhc3QpOiAgXG5cbi4uLi4gIFxuXG5UeXBlRXJyb3I6ICc+JyBub3Qgc3VwcG9ydGVkIGJldHdlZW4gaW5zdGFuY2VzIG9mICdzdHInIGFuZCAnaW50JyBcblxuXG5cbioqKmRmLmxvY1tkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KGludCxmbG9hdCksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKSA+IDMwXSA8LS0tLS0tLSBObyBtb3JlIGV4Y2VwdGlvbiEqKipcblxuXG5cbioqZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcigpKiogQWZ0ZXIgeW91IGhhdmUgdXBkYXRlZCB0aGUgRGF0YUZyYW1lLCB5b3UgY2FuIHVwZGF0ZSB0aGUgb3JpZ2luYWwgbmFzdHkgaXRlcmFibGUgYW5kIGtlZXAgaXRzIHVnbHkgc3RydWN0dXJlLiBcblxuXG5cbiMjIyMjIEkgaGF2ZSB0ZXN0ZWQgdGhlc2UgbWV0aG9kcyBhIGxvdCB3aXRoIGV4YW1wbGVzIGZyb20gU3RhY2sgT3ZlcmZsb3cuIFVudGlsIG5vdywgZXZlcnl0aGluZyBoYXMgYmVlbiB3b3JraW5nIGxpa2UgYSBjaGFybS4gSGVyZSBhcmUgYWJvdXQgMTUgZXhhbXBsZXMhXG5cblxuXG5gYGBweXRob25cblxuTmVzdGVkIGl0ZXJhYmxlIGZyb206ICdodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MTk4NDE0OC9ob3ctdG8taGFuZGxlLW5lc3RlZC1saXN0cy1hbmQtZGljdGlvbmFyaWVzLWluLXBhbmRhcy1kYXRhZnJhbWUnXG5cbnsnY3JpdGljX3Jldmlld3MnOiBbeydyZXZpZXdfY3JpdGljJzogJ1hZWicsICdyZXZpZXdfc2NvcmUnOiA5MH0sXG5cbiAgICAgICAgICAgICAgICAgICAgeydyZXZpZXdfY3JpdGljJzogJ0FCQycsICdyZXZpZXdfc2NvcmUnOiA5MH0sXG5cbiAgICAgICAgICAgICAgICAgICAgeydyZXZpZXdfY3JpdGljJzogJzEyMycsICdyZXZpZXdfc2NvcmUnOiA5MH1dLFxuXG4gJ2dlbnJlcyc6IFsnU3BvcnRzJywgJ0dvbGYnXSxcblxuICdzY29yZSc6IDg1LFxuXG4gJ3RpdGxlJzogJ0dvbGYgU2ltdWxhdG9yJyxcblxuICd1cmwnOiAnaHR0cDovL2V4YW1wbGUuY29tL2dvbGYtc2ltdWxhdG9yJ31cblxuXG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKSAgIyBjcmVhdGUgREYgc3RhY2tlZCBvciB1bnN0YWNrZWQsIGl0IGRvZXNuJ3QgbWF0dGVyXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuY3JpdGljX3Jldmlld3MgMCAgIHJldmlld19jcml0aWMgIChjcml0aWNfcmV2aWV3cywgMCwgcmV2aWV3X2NyaXRpYykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFhZWlxuXG4gICAgICAgICAgICAgICAgICAgcmV2aWV3X3Njb3JlICAgIChjcml0aWNfcmV2aWV3cywgMCwgcmV2aWV3X3Njb3JlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDEgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19jcml0aWMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBQkNcblxuICAgICAgICAgICAgICAgICAgIHJldmlld19zY29yZSAgICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19zY29yZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MFxuXG4gICAgICAgICAgICAgICAyICAgcmV2aWV3X2NyaXRpYyAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfY3JpdGljKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIzXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfc2NvcmUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOTBcblxuZ2VucmVzICAgICAgICAgMCAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdlbnJlcywgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwb3J0c1xuXG4gICAgICAgICAgICAgICAxICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2VucmVzLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHb2xmXG5cbnNjb3JlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzY29yZSwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODVcblxudGl0bGUgICAgICAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRpdGxlLCkgICAgICAgICAgICAgICAgICAgICBHb2xmIFNpbXVsYXRvclxuXG51cmwgICAgICAgICAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1cmwsKSAgaHR0cDovL2V4YW1wbGUuY29tL2dvbGYtc2ltdWxhdG9yXG5cblxuXG4jQXZvaWQgZXhjZXB0aW9ucyB3aXRoIGRmLmRfZmlsdGVyX2R0eXBlcygpXG5cbmRmLmxvY1tkZi5hYV92YWx1ZS5zdHIuY29udGFpbnMoJ1tHZ10nLG5hPUZhbHNlKSwnYWFfdmFsdWUnXSA9ICdVUERBVEUxMTExJyAjZGYubG9jIHRvIHVwZGF0ZSB0aGUgZGF0YWZyYW1lIChWRVJZIElNUE9SVEFOVDogVG8gdXBkYXRlIHRoZSBvcmlnaW5hbCBpdGVyYWJsZSB5b3UgaGF2ZSB0byBwYXNzICdhYV92YWx1ZScpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgIGFhX3ZhbHVlXG5cbmNyaXRpY19yZXZpZXdzIDAgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDAsIHJldmlld19jcml0aWMpICAgICAgICAgWFlaXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAwLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDEgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19jcml0aWMpICAgICAgICAgQUJDXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAxLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDIgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDIsIHJldmlld19jcml0aWMpICAgICAgICAgMTIzXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbmdlbnJlcyAgICAgICAgIDAgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnZW5yZXMsIDApICAgICAgU3BvcnRzXG5cbiAgICAgICAgICAgICAgIDEgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnZW5yZXMsIDEpICBVUERBVEUxMTExXG5cbnNjb3JlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzY29yZSwpICAgICAgICAgIDg1XG5cbnRpdGxlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aXRsZSwpICBVUERBVEUxMTExXG5cbnVybCAgICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHVybCwpICBVUERBVEUxMTExXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpICAjdXBkYXRpbmcgdGhlIG5lc3RlZCBpdGVyYWJsZSwgdGhlIG5ldyB2YWx1ZXMgaGF2ZSB0byBiZSBpbiB0aGUgY29sdW1uICdhYV92YWx1ZScsIGlmIHlvdSBoYXZlIGFkZGVkIG5ldyBjb2x1bW5zIHRvIHRoZSBkYXRhZnJhbWUsIGRyb3AgdGhlbSBiZWZvcmUgdXBkYXRpbmcgdGhlIG9yaWdpbmFsIGl0ZXJhYmxlXG5cbltnZW5yZXNdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEdvbGZcblxuW2dlbnJlc11bMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQREFURTExMTFcblxuW3RpdGxlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogR29sZiBTaW11bGF0b3JcblxuW3RpdGxlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQREFURTExMTFcblxuW3VybF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogaHR0cDovL2V4YW1wbGUuY29tL2dvbGYtc2ltdWxhdG9yXG5cblt1cmxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBVUERBVEUxMTExXG5cblxuXG57J2NyaXRpY19yZXZpZXdzJzogW3sncmV2aWV3X2NyaXRpYyc6ICdYWVonLCAncmV2aWV3X3Njb3JlJzogOTB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHsncmV2aWV3X2NyaXRpYyc6ICdBQkMnLCAncmV2aWV3X3Njb3JlJzogOTB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHsncmV2aWV3X2NyaXRpYyc6ICcxMjMnLCAncmV2aWV3X3Njb3JlJzogOTB9XSxcblxuICdnZW5yZXMnOiBbJ1Nwb3J0cycsICdVUERBVEUxMTExJ10sXG5cbiAnc2NvcmUnOiA4NSxcblxuICd0aXRsZSc6ICdVUERBVEUxMTExJyxcblxuICd1cmwnOiAnVVBEQVRFMTExMSd9XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczNDMwNTg1L2hvdy10by1jb252ZXJ0LWEtbGlzdC1vZi1uZXN0ZWQtZGljdGlvbmFyaWVzLWluY2x1ZGVzLXR1cGxlcy1hcy1hLWRhdGFmcmFtZVxuXG5kYXRhPVxuXG5beydjYic6ICh7J0lEJzogMSwgJ05hbWUnOiAnQScsICdudW0nOiA1MH0sIHsnSUQnOiAyLCAnTmFtZSc6ICdBJywgJ251bSc6IDY4fSksXG5cbiAgJ2ZpbmFsX3ZhbHVlJzogMTE4fSxcblxuIHsnY2InOiAoeydJRCc6IDEsICdOYW1lJzogJ0EnLCAnbnVtJzogNTB9LCB7J0lEJzogNCwgJ05hbWUnOiAnQScsICdudW0nOiA2N30pLFxuXG4gICdmaW5hbF92YWx1ZSc6IDExN30sXG5cbiB7J2NiJzogKHsnSUQnOiAxLCAnTmFtZSc6ICdBJywgJ251bSc6IDUwfSwgeydJRCc6IDYsICdOYW1lJzogJ0EnLCAnbnVtJzogNjd9KSxcblxuICAnZmluYWxfdmFsdWUnOiAxMTd9XVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyBhYV92YWx1ZVxuXG4wIGNiICAgICAgICAgIDAgICBJRCAgICAgICgwLCBjYiwgMCwgSUQpICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMCwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMCwgbnVtKSAgICAgICA1MFxuXG4gICAgICAgICAgICAgIDEgICBJRCAgICAgICgwLCBjYiwgMSwgSUQpICAgICAgICAyXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMSwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMSwgbnVtKSAgICAgICA2OFxuXG4gIGZpbmFsX3ZhbHVlIE5hTiBOYU4gICAoMCwgZmluYWxfdmFsdWUpICAgICAgMTE4XG5cbjEgY2IgICAgICAgICAgMCAgIElEICAgICAgKDEsIGNiLCAwLCBJRCkgICAgICAgIDFcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAwLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAwLCBudW0pICAgICAgIDUwXG5cbiAgICAgICAgICAgICAgMSAgIElEICAgICAgKDEsIGNiLCAxLCBJRCkgICAgICAgIDRcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAxLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAxLCBudW0pICAgICAgIDY3XG5cbiAgZmluYWxfdmFsdWUgTmFOIE5hTiAgICgxLCBmaW5hbF92YWx1ZSkgICAgICAxMTdcblxuMiBjYiAgICAgICAgICAwICAgSUQgICAgICAoMiwgY2IsIDAsIElEKSAgICAgICAgMVxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDAsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDAsIG51bSkgICAgICAgNTBcblxuICAgICAgICAgICAgICAxICAgSUQgICAgICAoMiwgY2IsIDEsIElEKSAgICAgICAgNlxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDEsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDEsIG51bSkgICAgICAgNjdcblxuICBmaW5hbF92YWx1ZSBOYU4gTmFOICAgKDIsIGZpbmFsX3ZhbHVlKSAgICAgIDExN1xuXG5kZi5sb2NbZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShpbnQsZmxvYXQpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykgPiAzMCwgJ2FhX3ZhbHVlJ10gPSA5MDAwMDBcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyBhYV92YWx1ZVxuXG4wIGNiICAgICAgICAgIDAgICBJRCAgICAgICgwLCBjYiwgMCwgSUQpICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMCwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMCwgbnVtKSAgIDkwMDAwMFxuXG4gICAgICAgICAgICAgIDEgICBJRCAgICAgICgwLCBjYiwgMSwgSUQpICAgICAgICAyXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMSwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMSwgbnVtKSAgIDkwMDAwMFxuXG4gIGZpbmFsX3ZhbHVlIE5hTiBOYU4gICAoMCwgZmluYWxfdmFsdWUpICAgOTAwMDAwXG5cbjEgY2IgICAgICAgICAgMCAgIElEICAgICAgKDEsIGNiLCAwLCBJRCkgICAgICAgIDFcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAwLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAwLCBudW0pICAgOTAwMDAwXG5cbiAgICAgICAgICAgICAgMSAgIElEICAgICAgKDEsIGNiLCAxLCBJRCkgICAgICAgIDRcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAxLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAxLCBudW0pICAgOTAwMDAwXG5cbiAgZmluYWxfdmFsdWUgTmFOIE5hTiAgICgxLCBmaW5hbF92YWx1ZSkgICA5MDAwMDBcblxuMiBjYiAgICAgICAgICAwICAgSUQgICAgICAoMiwgY2IsIDAsIElEKSAgICAgICAgMVxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDAsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDAsIG51bSkgICA5MDAwMDBcblxuICAgICAgICAgICAgICAxICAgSUQgICAgICAoMiwgY2IsIDEsIElEKSAgICAgICAgNlxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDEsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDEsIG51bSkgICA5MDAwMDBcblxuICBmaW5hbF92YWx1ZSBOYU4gTmFOICAgKDIsIGZpbmFsX3ZhbHVlKSAgIDkwMDAwMFxuXG5tb2RfaXRlciA9IGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoZGF0YSwgdmVyYm9zZT1UcnVlKVxuXG5bMF1bY2JdWzBdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA1MFxuXG5bMF1bY2JdWzBdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblswXVtjYl1bMV1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDY4XG5cblswXVtjYl1bMV1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzBdW2ZpbmFsX3ZhbHVlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTE4XG5cblswXVtmaW5hbF92YWx1ZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzFdW2NiXVswXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTBcblxuWzFdW2NiXVswXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5bMV1bY2JdWzFdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA2N1xuXG5bMV1bY2JdWzFdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblsxXVtmaW5hbF92YWx1ZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDExN1xuXG5bMV1bZmluYWxfdmFsdWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblsyXVtjYl1bMF1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDUwXG5cblsyXVtjYl1bMF1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzJdW2NiXVsxXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNjdcblxuWzJdW2NiXVsxXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5bMl1bZmluYWxfdmFsdWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAxMTdcblxuWzJdW2ZpbmFsX3ZhbHVlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5beydjYic6ICh7J0lEJzogMSwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9LFxuXG4gICAgICAgICB7J0lEJzogMiwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9KSxcblxuICAnZmluYWxfdmFsdWUnOiA5MDAwMDB9LFxuXG4geydjYic6ICh7J0lEJzogMSwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9LFxuXG4gICAgICAgICB7J0lEJzogNCwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9KSxcblxuICAnZmluYWxfdmFsdWUnOiA5MDAwMDB9LFxuXG4geydjYic6ICh7J0lEJzogMSwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9LFxuXG4gICAgICAgICB7J0lEJzogNiwgJ05hbWUnOiAnQScsICdudW0nOiA5MDAwMDB9KSxcblxuICAnZmluYWxfdmFsdWUnOiA5MDAwMDB9XVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82OTk0MzUwOS9wcm9ibGVtcy13aGVuLWZsYXR0ZW4tYS1kaWN0XG5cbmRhdGE9XG5cblt7J2FwcGxpY2F0aW9uX2NvbnRhY3RzJzogW3snYWRyZXNzJzogJ1gnLCAnZW1haWwnOiAndGVzdEB0ZXN0LmNvbSd9XSxcblxuICAnYXBwbGljYXRpb25fZGV0YWlscyc6IHsnZW1haWwnOiBOb25lLCAncGhvbmUnOiBOb25lfSxcblxuICAnZW1wbG95ZXInOiB7J05hbWUnOiAnTm9tJywgJ2VtYWlsJzogTm9uZX0sXG5cbiAgJ2lkJzogJzEnfSxcblxuIHsnYXBwbGljYXRpb25fY29udGFjdHMnOiBbeydhZHJlc3MnOiAnWicsICdlbWFpbCc6IE5vbmV9XSxcblxuICAnYXBwbGljYXRpb25fZGV0YWlscyc6IHsnZW1haWwnOiAndGVzdHlAdGVzdF9hLmNvbScsICdwaG9uZSc6IE5vbmV9LFxuXG4gICdlbXBsb3llcic6IHsnTmFtZSc6ICdOb20nLCAnZW1haWwnOiBOb25lfSxcblxuICAnaWQnOiAnMid9LFxuXG4geydhcHBsaWNhdGlvbl9jb250YWN0cyc6IFt7J2FkcmVzcyc6ICdZJywgJ2VtYWlsJzogTm9uZX1dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6ICd0ZXN0eUB0ZXN0X2EuY29tJywgJ3Bob25lJzogTm9uZX0sXG5cbiAgJ2VtcGxveWVyJzogeydOYW1lJzogJ05vbScsICdlbWFpbCc6IE5vbmV9LFxuXG4gICdpZCc6ICczJ31dXG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgIGFhX3ZhbHVlXG5cbjAgYXBwbGljYXRpb25fY29udGFjdHMgMCAgICAgYWRyZXNzICAoMCwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGFkcmVzcykgICAgICAgICAgICAgICAgIFhcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCAgICAoMCwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGVtYWlsKSAgICAgdGVzdEB0ZXN0LmNvbVxuXG4gIGFwcGxpY2F0aW9uX2RldGFpbHMgIGVtYWlsIE5hTiAgICAgICAgICAoMCwgYXBwbGljYXRpb25fZGV0YWlscywgZW1haWwpICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUgTmFOICAgICAgICAgICgwLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBwaG9uZSkgICAgICAgICAgICAgIE5vbmVcblxuICBlbXBsb3llciAgICAgICAgICAgICBOYW1lICBOYU4gICAgICAgICAgICAgICAgICAgICAgKDAsIGVtcGxveWVyLCBOYW1lKSAgICAgICAgICAgICAgIE5vbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGVtYWlsIE5hTiAgICAgICAgICAgICAgICAgICAgICgwLCBlbXBsb3llciwgZW1haWwpICAgICAgICAgICAgICBOb25lXG5cbiAgaWQgICAgICAgICAgICAgICAgICAgTmFOICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBpZCkgICAgICAgICAgICAgICAgIDFcblxuMSBhcHBsaWNhdGlvbl9jb250YWN0cyAwICAgICBhZHJlc3MgICgxLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgYWRyZXNzKSAgICAgICAgICAgICAgICAgWlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsICAgICgxLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgZW1haWwpICAgICAgICAgICAgICBOb25lXG5cbiAgYXBwbGljYXRpb25fZGV0YWlscyAgZW1haWwgTmFOICAgICAgICAgICgxLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBlbWFpbCkgIHRlc3R5QHRlc3RfYS5jb21cblxuICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSBOYU4gICAgICAgICAgKDEsIGFwcGxpY2F0aW9uX2RldGFpbHMsIHBob25lKSAgICAgICAgICAgICAgTm9uZVxuXG4gIGVtcGxveWVyICAgICAgICAgICAgIE5hbWUgIE5hTiAgICAgICAgICAgICAgICAgICAgICAoMSwgZW1wbG95ZXIsIE5hbWUpICAgICAgICAgICAgICAgTm9tXG5cbiAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgTmFOICAgICAgICAgICAgICAgICAgICAgKDEsIGVtcGxveWVyLCBlbWFpbCkgICAgICAgICAgICAgIE5vbmVcblxuICBpZCAgICAgICAgICAgICAgICAgICBOYU4gICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDEsIGlkKSAgICAgICAgICAgICAgICAgMlxuXG4yIGFwcGxpY2F0aW9uX2NvbnRhY3RzIDAgICAgIGFkcmVzcyAgKDIsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBhZHJlc3MpICAgICAgICAgICAgICAgICBZXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgICAgKDIsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBlbWFpbCkgICAgICAgICAgICAgIE5vbmVcblxuICBhcHBsaWNhdGlvbl9kZXRhaWxzICBlbWFpbCBOYU4gICAgICAgICAgKDIsIGFwcGxpY2F0aW9uX2RldGFpbHMsIGVtYWlsKSAgdGVzdHlAdGVzdF9hLmNvbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIHBob25lIE5hTiAgICAgICAgICAoMiwgYXBwbGljYXRpb25fZGV0YWlscywgcGhvbmUpICAgICAgICAgICAgICBOb25lXG5cbiAgZW1wbG95ZXIgICAgICAgICAgICAgTmFtZSAgTmFOICAgICAgICAgICAgICAgICAgICAgICgyLCBlbXBsb3llciwgTmFtZSkgICAgICAgICAgICAgICBOb21cblxuICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCBOYU4gICAgICAgICAgICAgICAgICAgICAoMiwgZW1wbG95ZXIsIGVtYWlsKSAgICAgICAgICAgICAgTm9uZVxuXG4gIGlkICAgICAgICAgICAgICAgICAgIE5hTiAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMiwgaWQpICAgICAgICAgICAgICAgICAzXG5cbmRmLmxvY1tkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKS5zdHIuY29udGFpbnMocid0ZXN0X2FcXC5cXHcrXFxiJyxuYT1GYWxzZSksICdhYV92YWx1ZSddID0gJ1VQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTSdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbjAgYXBwbGljYXRpb25fY29udGFjdHMgMCAgICAgYWRyZXNzICAoMCwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGFkcmVzcykgICAgICAgICAgICAgICAgICAgICAgICAgWFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsICAgICgwLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgZW1haWwpICAgICAgICAgICAgIHRlc3RAdGVzdC5jb21cblxuICBhcHBsaWNhdGlvbl9kZXRhaWxzICBlbWFpbCBOYU4gICAgICAgICAgKDAsIGFwcGxpY2F0aW9uX2RldGFpbHMsIGVtYWlsKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUgTmFOICAgICAgICAgICgwLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBwaG9uZSkgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gIGVtcGxveWVyICAgICAgICAgICAgIE5hbWUgIE5hTiAgICAgICAgICAgICAgICAgICAgICAoMCwgZW1wbG95ZXIsIE5hbWUpICAgICAgICAgICAgICAgICAgICAgICBOb21cblxuICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCBOYU4gICAgICAgICAgICAgICAgICAgICAoMCwgZW1wbG95ZXIsIGVtYWlsKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgaWQgICAgICAgICAgICAgICAgICAgTmFOICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBpZCkgICAgICAgICAgICAgICAgICAgICAgICAgMVxuXG4xIGFwcGxpY2F0aW9uX2NvbnRhY3RzIDAgICAgIGFkcmVzcyAgKDEsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBhZHJlc3MpICAgICAgICAgICAgICAgICAgICAgICAgIFpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCAgICAoMSwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGVtYWlsKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgYXBwbGljYXRpb25fZGV0YWlscyAgZW1haWwgTmFOICAgICAgICAgICgxLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBlbWFpbCkgIFVQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTVxuXG4gICAgICAgICAgICAgICAgICAgICAgIHBob25lIE5hTiAgICAgICAgICAoMSwgYXBwbGljYXRpb25fZGV0YWlscywgcGhvbmUpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICBlbXBsb3llciAgICAgICAgICAgICBOYW1lICBOYU4gICAgICAgICAgICAgICAgICAgICAgKDEsIGVtcGxveWVyLCBOYW1lKSAgICAgICAgICAgICAgICAgICAgICAgTm9tXG5cbiAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgTmFOICAgICAgICAgICAgICAgICAgICAgKDEsIGVtcGxveWVyLCBlbWFpbCkgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gIGlkICAgICAgICAgICAgICAgICAgIE5hTiAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMSwgaWQpICAgICAgICAgICAgICAgICAgICAgICAgIDJcblxuMiBhcHBsaWNhdGlvbl9jb250YWN0cyAwICAgICBhZHJlc3MgICgyLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgYWRyZXNzKSAgICAgICAgICAgICAgICAgICAgICAgICBZXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgICAgKDIsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBlbWFpbCkgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gIGFwcGxpY2F0aW9uX2RldGFpbHMgIGVtYWlsIE5hTiAgICAgICAgICAoMiwgYXBwbGljYXRpb25fZGV0YWlscywgZW1haWwpICBVUFBQUFBQUFBQUFBQUFBQREFURS5DT01cblxuICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSBOYU4gICAgICAgICAgKDIsIGFwcGxpY2F0aW9uX2RldGFpbHMsIHBob25lKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgZW1wbG95ZXIgICAgICAgICAgICAgTmFtZSAgTmFOICAgICAgICAgICAgICAgICAgICAgICgyLCBlbXBsb3llciwgTmFtZSkgICAgICAgICAgICAgICAgICAgICAgIE5vbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGVtYWlsIE5hTiAgICAgICAgICAgICAgICAgICAgICgyLCBlbXBsb3llciwgZW1haWwpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICBpZCAgICAgICAgICAgICAgICAgICBOYU4gICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDIsIGlkKSAgICAgICAgICAgICAgICAgICAgICAgICAzXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cblsxXVthcHBsaWNhdGlvbl9kZXRhaWxzXVtlbWFpbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IHRlc3R5QHRlc3RfYS5jb21cblxuWzFdW2FwcGxpY2F0aW9uX2RldGFpbHNdW2VtYWlsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTVxuXG5bMl1bYXBwbGljYXRpb25fZGV0YWlsc11bZW1haWxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiB0ZXN0eUB0ZXN0X2EuY29tXG5cblsyXVthcHBsaWNhdGlvbl9kZXRhaWxzXVtlbWFpbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBVUFBQUFBQUFBQUFBQUFBQREFURS5DT01cblxuW3snYXBwbGljYXRpb25fY29udGFjdHMnOiBbeydhZHJlc3MnOiAnWCcsICdlbWFpbCc6ICd0ZXN0QHRlc3QuY29tJ31dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6IE5vbmUsICdwaG9uZSc6IE5vbmV9LFxuXG4gICdlbXBsb3llcic6IHsnTmFtZSc6ICdOb20nLCAnZW1haWwnOiBOb25lfSxcblxuICAnaWQnOiAnMSd9LFxuXG4geydhcHBsaWNhdGlvbl9jb250YWN0cyc6IFt7J2FkcmVzcyc6ICdaJywgJ2VtYWlsJzogTm9uZX1dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6ICdVUFBQUFBQUFBQUFBQUFBQREFURS5DT00nLCAncGhvbmUnOiBOb25lfSxcblxuICAnZW1wbG95ZXInOiB7J05hbWUnOiAnTm9tJywgJ2VtYWlsJzogTm9uZX0sXG5cbiAgJ2lkJzogJzInfSxcblxuIHsnYXBwbGljYXRpb25fY29udGFjdHMnOiBbeydhZHJlc3MnOiAnWScsICdlbWFpbCc6IE5vbmV9XSxcblxuICAnYXBwbGljYXRpb25fZGV0YWlscyc6IHsnZW1haWwnOiAnVVBQUFBQUFBQUFBQUFBQUERBVEUuQ09NJywgJ3Bob25lJzogTm9uZX0sXG5cbiAgJ2VtcGxveWVyJzogeydOYW1lJzogJ05vbScsICdlbWFpbCc6IE5vbmV9LFxuXG4gICdpZCc6ICczJ31dXG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzYyNzY1MzcxL2NvbnZlcnQtbmVzdGVkLWRhdGFmcmFtZS10by1hLXNpbXBsZS1kYXRhZnJhbWVmcmFtZVxuXG5kYXRhPVxuXG57J0EnOiBbMSwgMiwgM10sXG5cbiAnQic6IFs0LCA1LCA2XSxcblxuICdkZXBhcnR1cmUnOiBbeydhY3R1YWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FjdHVhbF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FpcnBvcnQnOiAnRmluZGVsJyxcblxuICAgICAgICAgICAgICAgICdkZWxheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2dhdGUnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2lhdGEnOiAnTFVYJyxcblxuICAgICAgICAgICAgICAgICdpY2FvJzogJ0VMTFgnLFxuXG4gICAgICAgICAgICAgICAgJ3NjaGVkdWxlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICd0ZXJtaW5hbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAndGltZXpvbmUnOiAnRXVyb3BlL0x1eGVtYm91cmcnfSxcblxuICAgICAgICAgICAgICAgeydhY3R1YWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FjdHVhbF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FpcnBvcnQnOiAnRmluZGVsJyxcblxuICAgICAgICAgICAgICAgICdkZWxheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2dhdGUnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2lhdGEnOiAnTFVYJyxcblxuICAgICAgICAgICAgICAgICdpY2FvJzogJ0VMTFgnLFxuXG4gICAgICAgICAgICAgICAgJ3NjaGVkdWxlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICd0ZXJtaW5hbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAndGltZXpvbmUnOiAnRXVyb3BlL0x1eGVtYm91cmcnfSxcblxuICAgICAgICAgICAgICAgeydhY3R1YWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FjdHVhbF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FpcnBvcnQnOiAnRmluZGVsJyxcblxuICAgICAgICAgICAgICAgICdkZWxheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2dhdGUnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2lhdGEnOiAnTFVYJyxcblxuICAgICAgICAgICAgICAgICdpY2FvJzogJ0VMTFgnLFxuXG4gICAgICAgICAgICAgICAgJ3NjaGVkdWxlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICd0ZXJtaW5hbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAndGltZXpvbmUnOiAnRXVyb3BlL0x1eGVtYm91cmcnfV19XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgICBhYV92YWx1ZVxuXG5BICAgICAgICAgMCBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuXG4gICAgICAgICAgMSBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgMlxuXG4gICAgICAgICAgMiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgM1xuXG5CICAgICAgICAgMCBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgNFxuXG4gICAgICAgICAgMSBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgNVxuXG4gICAgICAgICAgMiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgNlxuXG5kZXBhcnR1cmUgMCBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAwLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAwLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBpY2FvKSAgICAgICAgICAgICAgICAgICAgICAgRUxMWFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG4gICAgICAgICAgMSBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAxLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAxLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBpY2FvKSAgICAgICAgICAgICAgICAgICAgICAgRUxMWFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG4gICAgICAgICAgMiBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAyLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAyLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBpY2FvKSAgICAgICAgICAgICAgICAgICAgICAgRUxMWFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG5kZi5sb2NbZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJyk9PSAnRUxMWCcsICdhYV92YWx1ZSddID0gJ0VMTFgtVVBEQVRFRCdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuQSAgICAgICAgIDAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQSwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgIDFcblxuICAgICAgICAgIDEgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQSwgMSkgICAgICAgICAgICAgICAgICAgICAgICAgIDJcblxuICAgICAgICAgIDIgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQSwgMikgICAgICAgICAgICAgICAgICAgICAgICAgIDNcblxuQiAgICAgICAgIDAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQiwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgIDRcblxuICAgICAgICAgIDEgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQiwgMSkgICAgICAgICAgICAgICAgICAgICAgICAgIDVcblxuICAgICAgICAgIDIgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQiwgMikgICAgICAgICAgICAgICAgICAgICAgICAgIDZcblxuZGVwYXJ0dXJlIDAgYWN0dWFsICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGFjdHVhbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWN0dWFsX3J1bndheSAgICAgICAgKGRlcGFydHVyZSwgMCwgYWN0dWFsX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWlycG9ydCAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgYWlycG9ydCkgICAgICAgICAgICAgICAgICAgICBGaW5kZWxcblxuICAgICAgICAgICAgZGVsYXkgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBkZWxheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZXN0aW1hdGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGVzdGltYXRlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgZXN0aW1hdGVkX3J1bndheSAgKGRlcGFydHVyZSwgMCwgZXN0aW1hdGVkX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZ2F0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgZ2F0ZSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgaWF0YSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgaWF0YSkgICAgICAgICAgICAgICAgICAgICAgICBMVVhcblxuICAgICAgICAgICAgaWNhbyAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgaWNhbykgICAgICAgICAgICAgICBFTExYLVVQREFURURcblxuICAgICAgICAgICAgc2NoZWR1bGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIHNjaGVkdWxlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgdGVybWluYWwgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCB0ZXJtaW5hbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgdGltZXpvbmUgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCB0aW1lem9uZSkgICAgICAgICAgRXVyb3BlL0x1eGVtYm91cmdcblxuICAgICAgICAgIDEgYWN0dWFsICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGFjdHVhbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWN0dWFsX3J1bndheSAgICAgICAgKGRlcGFydHVyZSwgMSwgYWN0dWFsX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWlycG9ydCAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgYWlycG9ydCkgICAgICAgICAgICAgICAgICAgICBGaW5kZWxcblxuICAgICAgICAgICAgZGVsYXkgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBkZWxheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZXN0aW1hdGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGVzdGltYXRlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgZXN0aW1hdGVkX3J1bndheSAgKGRlcGFydHVyZSwgMSwgZXN0aW1hdGVkX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZ2F0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgZ2F0ZSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgaWF0YSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgaWF0YSkgICAgICAgICAgICAgICAgICAgICAgICBMVVhcblxuICAgICAgICAgICAgaWNhbyAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgaWNhbykgICAgICAgICAgICAgICBFTExYLVVQREFURURcblxuICAgICAgICAgICAgc2NoZWR1bGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIHNjaGVkdWxlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgdGVybWluYWwgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCB0ZXJtaW5hbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgdGltZXpvbmUgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCB0aW1lem9uZSkgICAgICAgICAgRXVyb3BlL0x1eGVtYm91cmdcblxuICAgICAgICAgIDIgYWN0dWFsICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGFjdHVhbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWN0dWFsX3J1bndheSAgICAgICAgKGRlcGFydHVyZSwgMiwgYWN0dWFsX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgYWlycG9ydCAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgYWlycG9ydCkgICAgICAgICAgICAgICAgICAgICBGaW5kZWxcblxuICAgICAgICAgICAgZGVsYXkgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBkZWxheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZXN0aW1hdGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGVzdGltYXRlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgZXN0aW1hdGVkX3J1bndheSAgKGRlcGFydHVyZSwgMiwgZXN0aW1hdGVkX3J1bndheSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgZ2F0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgZ2F0ZSkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgaWF0YSAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgaWF0YSkgICAgICAgICAgICAgICAgICAgICAgICBMVVhcblxuICAgICAgICAgICAgaWNhbyAgICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgaWNhbykgICAgICAgICAgICAgICBFTExYLVVQREFURURcblxuICAgICAgICAgICAgc2NoZWR1bGVkICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIHNjaGVkdWxlZCkgIDIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDBcblxuICAgICAgICAgICAgdGVybWluYWwgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCB0ZXJtaW5hbCkgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgdGltZXpvbmUgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCB0aW1lem9uZSkgICAgICAgICAgRXVyb3BlL0x1eGVtYm91cmdcblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW2RlcGFydHVyZV1bMF1baWNhb10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRUxMWFxuXG5bZGVwYXJ0dXJlXVswXVtpY2FvXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogRUxMWC1VUERBVEVEXG5cbltkZXBhcnR1cmVdWzFdW2ljYW9dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEVMTFhcblxuW2RlcGFydHVyZV1bMV1baWNhb10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IEVMTFgtVVBEQVRFRFxuXG5bZGVwYXJ0dXJlXVsyXVtpY2FvXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBFTExYXG5cbltkZXBhcnR1cmVdWzJdW2ljYW9dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBFTExYLVVQREFURURcblxueydBJzogWzEsIDIsIDNdLFxuXG4gJ0InOiBbNCwgNSwgNl0sXG5cbiAnZGVwYXJ0dXJlJzogW3snYWN0dWFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdhY3R1YWxfcnVud2F5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdhaXJwb3J0JzogJ0ZpbmRlbCcsXG5cbiAgICAgICAgICAgICAgICAnZGVsYXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWRfcnVud2F5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdnYXRlJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdpYXRhJzogJ0xVWCcsXG5cbiAgICAgICAgICAgICAgICAnaWNhbyc6ICdFTExYLVVQREFURUQnLFxuXG4gICAgICAgICAgICAgICAgJ3NjaGVkdWxlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICd0ZXJtaW5hbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAndGltZXpvbmUnOiAnRXVyb3BlL0x1eGVtYm91cmcnfSxcblxuICAgICAgICAgICAgICAgeydhY3R1YWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FjdHVhbF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FpcnBvcnQnOiAnRmluZGVsJyxcblxuICAgICAgICAgICAgICAgICdkZWxheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2dhdGUnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2lhdGEnOiAnTFVYJyxcblxuICAgICAgICAgICAgICAgICdpY2FvJzogJ0VMTFgtVVBEQVRFRCcsXG5cbiAgICAgICAgICAgICAgICAnc2NoZWR1bGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ3Rlcm1pbmFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICd0aW1lem9uZSc6ICdFdXJvcGUvTHV4ZW1ib3VyZyd9LFxuXG4gICAgICAgICAgICAgICB7J2FjdHVhbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWN0dWFsX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWlycG9ydCc6ICdGaW5kZWwnLFxuXG4gICAgICAgICAgICAgICAgJ2RlbGF5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZ2F0ZSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnaWF0YSc6ICdMVVgnLFxuXG4gICAgICAgICAgICAgICAgJ2ljYW8nOiAnRUxMWC1VUERBVEVEJyxcblxuICAgICAgICAgICAgICAgICdzY2hlZHVsZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAndGVybWluYWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ3RpbWV6b25lJzogJ0V1cm9wZS9MdXhlbWJvdXJnJ31dfVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NDM1OTc2Mi9jb25zdHJ1Y3RpbmctYS1wYW5kYXMtZGF0YWZyYW1lLXdpdGgtY29sdW1ucy1hbmQtc3ViLWNvbHVtbnMtZnJvbS1uZXN0ZWQtZGljdGlvblxuXG5kYXRhPVxuXG57J2xldmVsMSc6IHsndDEnOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiA4fSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLCAnY29sMic6IDgsICdjb2wzJzogMiwgJ2NvbDQnOiA5fSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDl9fSxcblxuICAgICAgICAgICAgJ3QyJzogeydzMSc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDl9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogMSwgJ2NvbDInOiA1LCAnY29sMyc6IDQsICdjb2w0JzogOH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMSwgJ2NvbDInOiA4LCAnY29sMyc6IDIsICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiA5fX0sXG5cbiAgICAgICAgICAgICd0Myc6IHsnczEnOiB7J2NvbDEnOiAxLCAnY29sMic6IDIsICdjb2wzJzogMywgJ2NvbDQnOiA0fSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDUsICdjb2wyJzogNiwgJ2NvbDMnOiA3LCAnY29sNCc6IDh9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogOSwgJ2NvbDInOiAxMCwgJ2NvbDMnOiAxMSwgJ2NvbDQnOiAxMn0sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiAxMywgJ2NvbDInOiAxNCwgJ2NvbDMnOiAxNSwgJ2NvbDQnOiAxNn19fSxcblxuICdsZXZlbDInOiB7J3QxJzogeydzMSc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA5LCAnY29sNCc6IDl9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogMSwgJ2NvbDInOiA1LCAnY29sMyc6IDQsICdjb2w0JzogNX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMSwgJ2NvbDInOiA4LCAnY29sMyc6IDIsICdjb2w0JzogMTN9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMjB9fSxcblxuICAgICAgICAgICAgJ3QyJzogeydzMSc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDl9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogMSwgJ2NvbDInOiA1LCAnY29sMyc6IDQsICdjb2w0JzogOH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMSwgJ2NvbDInOiA4LCAnY29sMyc6IDIsICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiA5fX0sXG5cbiAgICAgICAgICAgICd0Myc6IHsnczEnOiB7J2NvbDEnOiAxLCAnY29sMic6IDIsICdjb2wzJzogMywgJ2NvbDQnOiA0fSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDUsICdjb2wyJzogNiwgJ2NvbDMnOiA3LCAnY29sNCc6IDh9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogOSwgJ2NvbDInOiAxMCwgJ2NvbDMnOiAxMSwgJ2NvbDQnOiAxMn0sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiAxMywgJ2NvbDInOiAxNCwgJ2NvbDMnOiAxNSwgJ2NvbDQnOiAxNn19fX1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICBhYV92YWx1ZVxuXG5sZXZlbDEgdDEgczEgY29sMSAgKGxldmVsMSwgdDEsIHMxLCBjb2wxKSAgICAgICAgIDVcblxuICAgICAgICAgICAgIGNvbDIgIChsZXZlbDEsIHQxLCBzMSwgY29sMikgICAgICAgICA0XG5cbiAgICAgICAgICAgICBjb2wzICAobGV2ZWwxLCB0MSwgczEsIGNvbDMpICAgICAgICAgNFxuXG4gICAgICAgICAgICAgY29sNCAgKGxldmVsMSwgdDEsIHMxLCBjb2w0KSAgICAgICAgIDlcblxuICAgICAgICAgIHMyIGNvbDEgIChsZXZlbDEsIHQxLCBzMiwgY29sMSkgICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAgIC4uLlxuXG5sZXZlbDIgdDMgczMgY29sNCAgKGxldmVsMiwgdDMsIHMzLCBjb2w0KSAgICAgICAgMTJcblxuICAgICAgICAgIHM0IGNvbDEgIChsZXZlbDIsIHQzLCBzNCwgY29sMSkgICAgICAgIDEzXG5cbiAgICAgICAgICAgICBjb2wyICAobGV2ZWwyLCB0MywgczQsIGNvbDIpICAgICAgICAxNFxuXG4gICAgICAgICAgICAgY29sMyAgKGxldmVsMiwgdDMsIHM0LCBjb2wzKSAgICAgICAgMTVcblxuICAgICAgICAgICAgIGNvbDQgIChsZXZlbDIsIHQzLCBzNCwgY29sNCkgICAgICAgIDE2XG5cbls5NiByb3dzIHggMiBjb2x1bW5zXVxuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oaW50KSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpID4gNSkgJiAoZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShpbnQpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykgPCAxMCksICdhYV92YWx1ZSddID0gMTAwMDAwMFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgYWFfdmFsdWVcblxubGV2ZWwxIHQxIHMxIGNvbDEgIChsZXZlbDEsIHQxLCBzMSwgY29sMSkgICAgICAgICA1XG5cbiAgICAgICAgICAgICBjb2wyICAobGV2ZWwxLCB0MSwgczEsIGNvbDIpICAgICAgICAgNFxuXG4gICAgICAgICAgICAgY29sMyAgKGxldmVsMSwgdDEsIHMxLCBjb2wzKSAgICAgICAgIDRcblxuICAgICAgICAgICAgIGNvbDQgIChsZXZlbDEsIHQxLCBzMSwgY29sNCkgICAxMDAwMDAwXG5cbiAgICAgICAgICBzMiBjb2wxICAobGV2ZWwxLCB0MSwgczIsIGNvbDEpICAgICAgICAgMVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAgICAuLi5cblxubGV2ZWwyIHQzIHMzIGNvbDQgIChsZXZlbDIsIHQzLCBzMywgY29sNCkgICAgICAgIDEyXG5cbiAgICAgICAgICBzNCBjb2wxICAobGV2ZWwyLCB0MywgczQsIGNvbDEpICAgICAgICAxM1xuXG4gICAgICAgICAgICAgY29sMiAgKGxldmVsMiwgdDMsIHM0LCBjb2wyKSAgICAgICAgMTRcblxuICAgICAgICAgICAgIGNvbDMgIChsZXZlbDIsIHQzLCBzNCwgY29sMykgICAgICAgIDE1XG5cbiAgICAgICAgICAgICBjb2w0ICAobGV2ZWwyLCB0MywgczQsIGNvbDQpICAgICAgICAxNlxuXG5bOTYgcm93cyB4IDIgY29sdW1uc11cblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW2xldmVsMV1bdDFdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwxXVt0MV1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0MV1bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDFdW3QxXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QxXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDhcblxuW2xldmVsMV1bdDFdW3MzXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDFdW3MzXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwxXVt0MV1bczNdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0MV1bczRdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDFdW3QxXVtzNF1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QyXVtzMV1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMV1bdDJdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDJdW3MyXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOFxuXG5bbGV2ZWwxXVt0Ml1bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0Ml1bczNdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDFdW3QyXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QyXVtzM11bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMV1bdDJdW3MzXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDJdW3M0XVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwxXVt0Ml1bczRdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0M11bczJdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA2XG5cbltsZXZlbDFdW3QzXVtzMl1bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QzXVtzMl1bY29sM10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDdcblxuW2xldmVsMV1bdDNdW3MyXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDNdW3MyXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOFxuXG5bbGV2ZWwxXVt0M11bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0M11bczNdW2NvbDFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDFdW3QzXVtzM11bY29sMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QxXVtzMV1bY29sM10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMl1bdDFdW3MxXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDFdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwyXVt0MV1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0MV1bczNdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDJdW3QxXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QyXVtzMV1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMl1bdDJdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDJdW3MyXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOFxuXG5bbGV2ZWwyXVt0Ml1bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0Ml1bczNdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDJdW3QyXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QyXVtzM11bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMl1bdDJdW3MzXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDJdW3M0XVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwyXVt0Ml1bczRdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0M11bczJdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA2XG5cbltsZXZlbDJdW3QzXVtzMl1bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QzXVtzMl1bY29sM10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDdcblxuW2xldmVsMl1bdDNdW3MyXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDNdW3MyXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOFxuXG5bbGV2ZWwyXVt0M11bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0M11bczNdW2NvbDFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDJdW3QzXVtzM11bY29sMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbnsnbGV2ZWwxJzogeyd0MSc6IHsnczEnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDEsICdjb2wyJzogNSwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogMTEsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDInOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wzJzogMixcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH19LFxuXG4gICAgICAgICAgICAndDInOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wyJzogMTAwMDAwMCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMyc6IDIsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9fSxcblxuICAgICAgICAgICAgJ3QzJzogeydzMSc6IHsnY29sMSc6IDEsICdjb2wyJzogMiwgJ2NvbDMnOiAzLCAnY29sNCc6IDR9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogNSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMic6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDMnOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMDAwMDAwLCAnY29sMic6IDEwLCAnY29sMyc6IDExLCAnY29sNCc6IDEyfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDEzLCAnY29sMic6IDE0LCAnY29sMyc6IDE1LCAnY29sNCc6IDE2fX19LFxuXG4gJ2xldmVsMic6IHsndDEnOiB7J3MxJzogeydjb2wxJzogNSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMic6IDQsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDMnOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiA1fSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLCAnY29sMic6IDEwMDAwMDAsICdjb2wzJzogMiwgJ2NvbDQnOiAxM30sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAyMH19LFxuXG4gICAgICAgICAgICAndDInOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wyJzogMTAwMDAwMCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMyc6IDIsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9fSxcblxuICAgICAgICAgICAgJ3QzJzogeydzMSc6IHsnY29sMSc6IDEsICdjb2wyJzogMiwgJ2NvbDMnOiAzLCAnY29sNCc6IDR9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogNSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMic6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDMnOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMDAwMDAwLCAnY29sMic6IDEwLCAnY29sMyc6IDExLCAnY29sNCc6IDEyfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDEzLCAnY29sMic6IDE0LCAnY29sMyc6IDE1LCAnY29sNCc6IDE2fX19fVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjE0NjA5NC9wcm9ibGVtcy1tYXRjaGluZy12YWx1ZXMtZnJvbS1uZXN0ZWQtZGljdGlvbmFyeVxuXG5kYXRhPVxuXG57J19saW5rcyc6IHsnbmV4dCc6IE5vbmUsICdwcmV2JzogTm9uZX0sXG5cbiAnbGltaXQnOiAyNTAsXG5cbiAnb2Zmc2V0JzogMCxcblxuICdydW5zJzogW3snYXNzaWduZWR0b19pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ2Jsb2NrZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjb21wbGV0ZWRfb24nOiBOb25lLFxuXG4gICAgICAgICAgICdjb25maWcnOiBOb25lLFxuXG4gICAgICAgICAgICdjb25maWdfaWRzJzogW10sXG5cbiAgICAgICAgICAgJ2NyZWF0ZWRfYnknOiAxLFxuXG4gICAgICAgICAgICdjcmVhdGVkX29uJzogMTY1MTc5MDY5MyxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czFfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzMl9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMzX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNV9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM2X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czdfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdkZXNjcmlwdGlvbic6IE5vbmUsXG5cbiAgICAgICAgICAgJ2ZhaWxlZF9jb3VudCc6IDEsXG5cbiAgICAgICAgICAgJ2lkJzogMTMsXG5cbiAgICAgICAgICAgJ2luY2x1ZGVfYWxsJzogRmFsc2UsXG5cbiAgICAgICAgICAgJ2lzX2NvbXBsZXRlZCc6IEZhbHNlLFxuXG4gICAgICAgICAgICdtaWxlc3RvbmVfaWQnOiBOb25lLFxuXG4gICAgICAgICAgICduYW1lJzogJzIwMjItMDUtMDUtdGVzdHJ1bicsXG5cbiAgICAgICAgICAgJ3Bhc3NlZF9jb3VudCc6IDIsXG5cbiAgICAgICAgICAgJ3BsYW5faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdwcm9qZWN0X2lkJzogMSxcblxuICAgICAgICAgICAncmVmcyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3JldGVzdF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3N1aXRlX2lkJzogMSxcblxuICAgICAgICAgICAndW50ZXN0ZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICd1cGRhdGVkX29uJzogMTY1MTc5MDY5MyxcblxuICAgICAgICAgICAndXJsJzogJ2h0dHBzOi8veHh4eHh4eHh4eC50ZXN0cmFpbC5pby9pbmRleC5waHA/L3J1bnMvdmlldy8xMyd9LFxuXG4gICAgICAgICAgeydhc3NpZ25lZHRvX2lkJzogTm9uZSxcblxuICAgICAgICAgICAnYmxvY2tlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2NvbXBsZXRlZF9vbic6IDE2NTA5ODk5NzIsXG5cbiAgICAgICAgICAgJ2NvbmZpZyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ2NvbmZpZ19pZHMnOiBbXSxcblxuICAgICAgICAgICAnY3JlYXRlZF9ieSc6IDUsXG5cbiAgICAgICAgICAgJ2NyZWF0ZWRfb24nOiAxNjUwOTY2MzI5LFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzMV9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMyX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czNfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM1X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czZfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzN19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogTm9uZSxcblxuICAgICAgICAgICAnZmFpbGVkX2NvdW50JzogMCxcblxuICAgICAgICAgICAnaWQnOiA5LFxuXG4gICAgICAgICAgICdpbmNsdWRlX2FsbCc6IEZhbHNlLFxuXG4gICAgICAgICAgICdpc19jb21wbGV0ZWQnOiBUcnVlLFxuXG4gICAgICAgICAgICdtaWxlc3RvbmVfaWQnOiBOb25lLFxuXG4gICAgICAgICAgICduYW1lJzogJ1RoaXMgaXMgYSBuZXcgdGVzdCBydW4nLFxuXG4gICAgICAgICAgICdwYXNzZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdwbGFuX2lkJzogTm9uZSxcblxuICAgICAgICAgICAncHJvamVjdF9pZCc6IDEsXG5cbiAgICAgICAgICAgJ3JlZnMnOiBOb25lLFxuXG4gICAgICAgICAgICdyZXRlc3RfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdzdWl0ZV9pZCc6IDEsXG5cbiAgICAgICAgICAgJ3VudGVzdGVkX2NvdW50JzogMyxcblxuICAgICAgICAgICAndXBkYXRlZF9vbic6IDE2NTA5NjYzMjksXG5cbiAgICAgICAgICAgJ3VybCc6ICdodHRwczovL3h4eHh4eHh4eHgudGVzdHJhaWwuaW8vaW5kZXgucGhwPy9ydW5zL3ZpZXcvOSd9XSxcblxuICdzaXplJzogMn1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbl9saW5rcyBuZXh0IE5hTiAgICAgICAgICAgICAgICAgICAgICAgIChfbGlua3MsIG5leHQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICBwcmV2IE5hTiAgICAgICAgICAgICAgICAgICAgICAgIChfbGlua3MsIHByZXYpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbmxpbWl0ICBOYU4gIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChsaW1pdCwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjUwXG5cbm9mZnNldCBOYU4gIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9mZnNldCwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXG5cbnJ1bnMgICAwICAgIGFzc2lnbmVkdG9faWQgICAgKHJ1bnMsIDAsIGFzc2lnbmVkdG9faWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uXG5cbiAgICAgICAxICAgIHN1aXRlX2lkICAgICAgICAgICAgICAocnVucywgMSwgc3VpdGVfaWQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG5cbiAgICAgICAgICAgIHVudGVzdGVkX2NvdW50ICAocnVucywgMSwgdW50ZXN0ZWRfY291bnQpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzXG5cbiAgICAgICAgICAgIHVwZGF0ZWRfb24gICAgICAgICAgKHJ1bnMsIDEsIHVwZGF0ZWRfb24pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxNjUwOTY2MzI5XG5cbiAgICAgICAgICAgIHVybCAgICAgICAgICAgICAgICAgICAgICAgIChydW5zLCAxLCB1cmwpICBodHRwczovL3h4eHh4eHh4eHgudGVzdHJhaWwuaW8vaW5kZXgucGhwPy9ydW5zLi4uXG5cbnNpemUgICBOYU4gIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZSwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyXG5cbls2MyByb3dzIHggMiBjb2x1bW5zXVxuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oYm9vbCksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKSA9PSBGYWxzZSApLCAnYWFfdmFsdWUnXSA9IFRydWVcblxuZGYubG9jWyhkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKS5zdHIuY29udGFpbnMocidodHRwcz86Ly8uKicsbmE9RmFsc2UpICksICdhYV92YWx1ZSddID0gJ1dXVy5QWVRIT04uT1JHJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgYWFfdmFsdWVcblxuX2xpbmtzIG5leHQgTmFOICAgICAgICAgICAgICAgICAgICAgICAgKF9saW5rcywgbmV4dCkgICAgICAgICAgICBOb25lXG5cbiAgICAgICBwcmV2IE5hTiAgICAgICAgICAgICAgICAgICAgICAgIChfbGlua3MsIHByZXYpICAgICAgICAgICAgTm9uZVxuXG5saW1pdCAgTmFOICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobGltaXQsKSAgICAgICAgICAgICAyNTBcblxub2Zmc2V0IE5hTiAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob2Zmc2V0LCkgICAgICAgICAgICAgICAwXG5cbnJ1bnMgICAwICAgIGFzc2lnbmVkdG9faWQgICAgKHJ1bnMsIDAsIGFzc2lnbmVkdG9faWQpICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAuLi5cblxuICAgICAgIDEgICAgc3VpdGVfaWQgICAgICAgICAgICAgIChydW5zLCAxLCBzdWl0ZV9pZCkgICAgICAgICAgICAgICAxXG5cbiAgICAgICAgICAgIHVudGVzdGVkX2NvdW50ICAocnVucywgMSwgdW50ZXN0ZWRfY291bnQpICAgICAgICAgICAgICAgM1xuXG4gICAgICAgICAgICB1cGRhdGVkX29uICAgICAgICAgIChydW5zLCAxLCB1cGRhdGVkX29uKSAgICAgIDE2NTA5NjYzMjlcblxuICAgICAgICAgICAgdXJsICAgICAgICAgICAgICAgICAgICAgICAgKHJ1bnMsIDEsIHVybCkgIFdXVy5QWVRIT04uT1JHXG5cbnNpemUgICBOYU4gIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc2l6ZSwpICAgICAgICAgICAgICAgMlxuXG5bNjMgcm93cyB4IDIgY29sdW1uc11cblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW3J1bnNdWzBdW2luY2x1ZGVfYWxsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuW3J1bnNdWzBdW2luY2x1ZGVfYWxsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFRydWVcblxuW3J1bnNdWzBdW2lzX2NvbXBsZXRlZF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuW3J1bnNdWzBdW2lzX2NvbXBsZXRlZF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFRydWVcblxuW3J1bnNdWzBdW3VybF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogaHR0cHM6Ly94eHh4eHh4eHh4LnRlc3RyYWlsLmlvL2luZGV4LnBocD8vcnVucy92aWV3LzEzXG5cbltydW5zXVswXVt1cmxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBXV1cuUFlUSE9OLk9SR1xuXG5bcnVuc11bMV1baW5jbHVkZV9hbGxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBGYWxzZVxuXG5bcnVuc11bMV1baW5jbHVkZV9hbGxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogVHJ1ZVxuXG5bcnVuc11bMV1bdXJsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBodHRwczovL3h4eHh4eHh4eHgudGVzdHJhaWwuaW8vaW5kZXgucGhwPy9ydW5zL3ZpZXcvOVxuXG5bcnVuc11bMV1bdXJsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogV1dXLlBZVEhPTi5PUkdcblxueydfbGlua3MnOiB7J25leHQnOiBOb25lLCAncHJldic6IE5vbmV9LFxuXG4gJ2xpbWl0JzogMjUwLFxuXG4gJ29mZnNldCc6IDAsXG5cbiAncnVucyc6IFt7J2Fzc2lnbmVkdG9faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdibG9ja2VkX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY29tcGxldGVkX29uJzogTm9uZSxcblxuICAgICAgICAgICAnY29uZmlnJzogTm9uZSxcblxuICAgICAgICAgICAnY29uZmlnX2lkcyc6IFtdLFxuXG4gICAgICAgICAgICdjcmVhdGVkX2J5JzogMSxcblxuICAgICAgICAgICAnY3JlYXRlZF9vbic6IDE2NTE3OTA2OTMsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMxX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czJfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzM19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czVfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNl9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM3X2NvdW50JzogMCxcblxuICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBOb25lLFxuXG4gICAgICAgICAgICdmYWlsZWRfY291bnQnOiAxLFxuXG4gICAgICAgICAgICdpZCc6IDEzLFxuXG4gICAgICAgICAgICdpbmNsdWRlX2FsbCc6IFRydWUsXG5cbiAgICAgICAgICAgJ2lzX2NvbXBsZXRlZCc6IFRydWUsXG5cbiAgICAgICAgICAgJ21pbGVzdG9uZV9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ25hbWUnOiAnMjAyMi0wNS0wNS10ZXN0cnVuJyxcblxuICAgICAgICAgICAncGFzc2VkX2NvdW50JzogMixcblxuICAgICAgICAgICAncGxhbl9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3Byb2plY3RfaWQnOiAxLFxuXG4gICAgICAgICAgICdyZWZzJzogTm9uZSxcblxuICAgICAgICAgICAncmV0ZXN0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnc3VpdGVfaWQnOiAxLFxuXG4gICAgICAgICAgICd1bnRlc3RlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3VwZGF0ZWRfb24nOiAxNjUxNzkwNjkzLFxuXG4gICAgICAgICAgICd1cmwnOiAnV1dXLlBZVEhPTi5PUkcnfSxcblxuICAgICAgICAgIHsnYXNzaWduZWR0b19pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ2Jsb2NrZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjb21wbGV0ZWRfb24nOiAxNjUwOTg5OTcyLFxuXG4gICAgICAgICAgICdjb25maWcnOiBOb25lLFxuXG4gICAgICAgICAgICdjb25maWdfaWRzJzogW10sXG5cbiAgICAgICAgICAgJ2NyZWF0ZWRfYnknOiA1LFxuXG4gICAgICAgICAgICdjcmVhdGVkX29uJzogMTY1MDk2NjMyOSxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czFfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzMl9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMzX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNV9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM2X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czdfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdkZXNjcmlwdGlvbic6IE5vbmUsXG5cbiAgICAgICAgICAgJ2ZhaWxlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2lkJzogOSxcblxuICAgICAgICAgICAnaW5jbHVkZV9hbGwnOiBUcnVlLFxuXG4gICAgICAgICAgICdpc19jb21wbGV0ZWQnOiBUcnVlLFxuXG4gICAgICAgICAgICdtaWxlc3RvbmVfaWQnOiBOb25lLFxuXG4gICAgICAgICAgICduYW1lJzogJ1RoaXMgaXMgYSBuZXcgdGVzdCBydW4nLFxuXG4gICAgICAgICAgICdwYXNzZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdwbGFuX2lkJzogTm9uZSxcblxuICAgICAgICAgICAncHJvamVjdF9pZCc6IDEsXG5cbiAgICAgICAgICAgJ3JlZnMnOiBOb25lLFxuXG4gICAgICAgICAgICdyZXRlc3RfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdzdWl0ZV9pZCc6IDEsXG5cbiAgICAgICAgICAgJ3VudGVzdGVkX2NvdW50JzogMyxcblxuICAgICAgICAgICAndXBkYXRlZF9vbic6IDE2NTA5NjYzMjksXG5cbiAgICAgICAgICAgJ3VybCc6ICdXV1cuUFlUSE9OLk9SRyd9XSxcblxuICdzaXplJzogMn1cblxuYGBgXG5cblxuXG5gYGBweXRob25cblxuI05lc3RlZCBpdGVyYWJsZSBmcm9tOiBcblxuaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzM3MDg3MDYvaG93LXRvLWdldC12YWx1ZXMtZnJvbS1saXN0LW9mLW5lc3RlZC1kaWN0aW9uYXJpZXMvNzM4Mzk0MzAjNzM4Mzk0MzBcblxuZGF0YT1cblxueydyZXN1bHRzJzogW3snZW5kX3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ2tleSc6ICdxMScsXG5cbiAgICAgICAgICAgICAgJ3Jlc3VsdF90eXBlJzogJ211bHRpcGxlQ2hvaWNlJyxcblxuICAgICAgICAgICAgICAnc3RhcnRfdGltZSc6ICcyMDIxLTAxLTIxJyxcblxuICAgICAgICAgICAgICAndmFsdWUnOiBbJzEnXX0sXG5cbiAgICAgICAgICAgICB7J2VuZF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTInLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWydGYWxzZSddfSxcblxuICAgICAgICAgICAgIHsnZW5kX3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ2tleSc6ICdxMycsXG5cbiAgICAgICAgICAgICAgJ3Jlc3VsdF90eXBlJzogJ211bHRpcGxlQ2hvaWNlJyxcblxuICAgICAgICAgICAgICAnc3RhcnRfdGltZSc6ICcyMDIxLTAxLTIxJyxcblxuICAgICAgICAgICAgICAndmFsdWUnOiBbJzMnXX0sXG5cbiAgICAgICAgICAgICB7J2VuZF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTQnLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWyczJ119XX1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgIGFhX3ZhbHVlXG5cbnJlc3VsdHMgMCBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAwLCBlbmRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDAsIGtleSkgICAgICAgICAgICAgIHExXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAwLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMCwgc3RhcnRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAwLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAxXG5cbiAgICAgICAgMSBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAxLCBlbmRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDEsIGtleSkgICAgICAgICAgICAgIHEyXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAxLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMSwgc3RhcnRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAxLCB2YWx1ZSwgMCkgICAgICAgICAgIEZhbHNlXG5cbiAgICAgICAgMiBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAyLCBlbmRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDIsIGtleSkgICAgICAgICAgICAgIHEzXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAyLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMiwgc3RhcnRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAyLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAzXG5cbiAgICAgICAgMyBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAzLCBlbmRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDMsIGtleSkgICAgICAgICAgICAgIHE0XG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAzLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMywgc3RhcnRfdGltZSkgICAgICAyMDIxLTAxLTIxXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAzLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAzXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykuc3RyLmNvbnRhaW5zKHInXjIwMjEuKicsbmE9RmFsc2UpICksICdhYV92YWx1ZSddID0gMTAwMDAwMDAwMDAgXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgIGFhX3ZhbHVlXG5cbnJlc3VsdHMgMCBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAwLCBlbmRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDAsIGtleSkgICAgICAgICAgICAgIHExXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAwLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMCwgc3RhcnRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAwLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAxXG5cbiAgICAgICAgMSBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAxLCBlbmRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDEsIGtleSkgICAgICAgICAgICAgIHEyXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAxLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMSwgc3RhcnRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAxLCB2YWx1ZSwgMCkgICAgICAgICAgIEZhbHNlXG5cbiAgICAgICAgMiBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAyLCBlbmRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDIsIGtleSkgICAgICAgICAgICAgIHEzXG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAyLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMiwgc3RhcnRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAyLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAzXG5cbiAgICAgICAgMyBlbmRfdGltZSAgICBOYU4gICAgIChyZXN1bHRzLCAzLCBlbmRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICBrZXkgICAgICAgICBOYU4gICAgICAgICAgKHJlc3VsdHMsIDMsIGtleSkgICAgICAgICAgICAgIHE0XG5cbiAgICAgICAgICByZXN1bHRfdHlwZSBOYU4gIChyZXN1bHRzLCAzLCByZXN1bHRfdHlwZSkgIG11bHRpcGxlQ2hvaWNlXG5cbiAgICAgICAgICBzdGFydF90aW1lICBOYU4gICAocmVzdWx0cywgMywgc3RhcnRfdGltZSkgICAgIDEwMDAwMDAwMDAwXG5cbiAgICAgICAgICB2YWx1ZSAgICAgICAwICAgICAgIChyZXN1bHRzLCAzLCB2YWx1ZSwgMCkgICAgICAgICAgICAgICAzXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cbltyZXN1bHRzXVswXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzBdW2VuZF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVswXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzBdW3N0YXJ0X3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVsxXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzFdW2VuZF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVsxXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzFdW3N0YXJ0X3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVsyXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzJdW2VuZF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVsyXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzJdW3N0YXJ0X3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVszXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzNdW2VuZF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbltyZXN1bHRzXVszXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDIwMjEtMDEtMjFcblxuW3Jlc3VsdHNdWzNdW3N0YXJ0X3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDAwMDAwXG5cbnsncmVzdWx0cyc6IFt7J2VuZF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ2tleSc6ICdxMScsXG5cbiAgICAgICAgICAgICAgJ3Jlc3VsdF90eXBlJzogJ211bHRpcGxlQ2hvaWNlJyxcblxuICAgICAgICAgICAgICAnc3RhcnRfdGltZSc6IDEwMDAwMDAwMDAwLFxuXG4gICAgICAgICAgICAgICd2YWx1ZSc6IFsnMSddfSxcblxuICAgICAgICAgICAgIHsnZW5kX3RpbWUnOiAxMDAwMDAwMDAwMCxcblxuICAgICAgICAgICAgICAna2V5JzogJ3EyJyxcblxuICAgICAgICAgICAgICAncmVzdWx0X3R5cGUnOiAnbXVsdGlwbGVDaG9pY2UnLFxuXG4gICAgICAgICAgICAgICdzdGFydF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWydGYWxzZSddfSxcblxuICAgICAgICAgICAgIHsnZW5kX3RpbWUnOiAxMDAwMDAwMDAwMCxcblxuICAgICAgICAgICAgICAna2V5JzogJ3EzJyxcblxuICAgICAgICAgICAgICAncmVzdWx0X3R5cGUnOiAnbXVsdGlwbGVDaG9pY2UnLFxuXG4gICAgICAgICAgICAgICdzdGFydF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWyczJ119LFxuXG4gICAgICAgICAgICAgeydlbmRfdGltZSc6IDEwMDAwMDAwMDAwLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTQnLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAxMDAwMDAwMDAwMCxcblxuICAgICAgICAgICAgICAndmFsdWUnOiBbJzMnXX1dfVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82NjQ2MTkwMi9mbGF0dGVuaW5nLW5lc3RlZC1kaWN0aW9uYXJ5LWludG8tZGF0YWZyYW1lLXB5dGhvblxuXG5kYXRhPVxuXG57MTogezI6IHsnSURzJzogeydCb29rSUQnOiBbJzU0MzUzMzI1NDM1MycsICc0MzI0MjMyMzQyJ10sXG5cbiAgICAgICAgICAgICAgICAgJ1NhbGVzSUQnOiBbJzU0MzI2Nzc2NTM0NScsICc0MzUzNTQzJ10sXG5cbiAgICAgICAgICAgICAgICAgJ1N0b3JlSUQnOiBbJzExMTExMScsICcxMTIxMTExJ119LFxuXG4gICAgICAgICAnTmFtZSc6ICdib3JpbmcgVGFsZXMgb2YgRHJhZ29uIFNsYXllcnMnfSxcblxuICAgICAnSURzJzogeydCb29rSUQnOiBbJzU0MzUzMzI1NDM1MyddLFxuXG4gICAgICAgICAgICAgJ1NhbGVzSUQnOiBbJzU0MzI2Nzc2NTM0NSddLFxuXG4gICAgICAgICAgICAgJ1N0b3JlSUQnOiBbJzEyMzQ0NTQ1MjU0MyddfSxcblxuICAgICAnTmFtZSc6ICdUaHJpbGxpbmcgVGFsZXMgb2YgRHJhZ29uIFNsYXllcnMnfX1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbjEgSURzICBCb29rSUQgIDAgICAgICAgTmFOICAgICAgKDEsIElEcywgQm9va0lELCAwKSAgICAgICAgICAgICAgICAgICAgICAgNTQzNTMzMjU0MzUzXG5cbiAgICAgICBTYWxlc0lEIDAgICAgICAgTmFOICAgICAoMSwgSURzLCBTYWxlc0lELCAwKSAgICAgICAgICAgICAgICAgICAgICAgNTQzMjY3NzY1MzQ1XG5cbiAgICAgICBTdG9yZUlEIDAgICAgICAgTmFOICAgICAoMSwgSURzLCBTdG9yZUlELCAwKSAgICAgICAgICAgICAgICAgICAgICAgMTIzNDQ1NDUyNTQzXG5cbiAgTmFtZSBOYU4gICAgIE5hTiAgICAgTmFOICAgICAgICAgICAgICAgICgxLCBOYW1lKSAgVGhyaWxsaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzXG5cbiAgMiAgICBJRHMgICAgIEJvb2tJRCAgMCAgICAgKDEsIDIsIElEcywgQm9va0lELCAwKSAgICAgICAgICAgICAgICAgICAgICAgNTQzNTMzMjU0MzUzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgKDEsIDIsIElEcywgQm9va0lELCAxKSAgICAgICAgICAgICAgICAgICAgICAgICA0MzI0MjMyMzQyXG5cbiAgICAgICAgICAgICAgIFNhbGVzSUQgMCAgICAoMSwgMiwgSURzLCBTYWxlc0lELCAwKSAgICAgICAgICAgICAgICAgICAgICAgNTQzMjY3NzY1MzQ1XG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAoMSwgMiwgSURzLCBTYWxlc0lELCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICA0MzUzNTQzXG5cbiAgICAgICAgICAgICAgIFN0b3JlSUQgMCAgICAoMSwgMiwgSURzLCBTdG9yZUlELCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTExMTExXG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAoMSwgMiwgSURzLCBTdG9yZUlELCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMTIxMTExXG5cbiAgICAgICBOYW1lICAgIE5hTiAgICAgTmFOICAgICAgICAgICAgICgxLCAyLCBOYW1lKSAgICAgYm9yaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykuc3RyLmNvbnRhaW5zKHInXlxcZCskJyxuYT1GYWxzZSkgKSwgJ2FhX3ZhbHVlJ10gPSBkZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpLnN0ci5jb250YWlucyhyJ15cXGQrJCcsbmE9RmFsc2UpICksICdhYV92YWx1ZSddLmFzdHlwZShmbG9hdClcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuMSBJRHMgIEJvb2tJRCAgMCAgICAgICBOYU4gICAgICAoMSwgSURzLCBCb29rSUQsIDApICAgICAgICAgICAgICAgICAgICAgNTQzNTMzMjU0MzUzLjBcblxuICAgICAgIFNhbGVzSUQgMCAgICAgICBOYU4gICAgICgxLCBJRHMsIFNhbGVzSUQsIDApICAgICAgICAgICAgICAgICAgICAgNTQzMjY3NzY1MzQ1LjBcblxuICAgICAgIFN0b3JlSUQgMCAgICAgICBOYU4gICAgICgxLCBJRHMsIFN0b3JlSUQsIDApICAgICAgICAgICAgICAgICAgICAgMTIzNDQ1NDUyNTQzLjBcblxuICBOYW1lIE5hTiAgICAgTmFOICAgICBOYU4gICAgICAgICAgICAgICAgKDEsIE5hbWUpICBUaHJpbGxpbmcgVGFsZXMgb2YgRHJhZ29uIFNsYXllcnNcblxuICAyICAgIElEcyAgICAgQm9va0lEICAwICAgICAoMSwgMiwgSURzLCBCb29rSUQsIDApICAgICAgICAgICAgICAgICAgICAgNTQzNTMzMjU0MzUzLjBcblxuICAgICAgICAgICAgICAgICAgICAgICAxICAgICAoMSwgMiwgSURzLCBCb29rSUQsIDEpICAgICAgICAgICAgICAgICAgICAgICA0MzI0MjMyMzQyLjBcblxuICAgICAgICAgICAgICAgU2FsZXNJRCAwICAgICgxLCAyLCBJRHMsIFNhbGVzSUQsIDApICAgICAgICAgICAgICAgICAgICAgNTQzMjY3NzY1MzQ1LjBcblxuICAgICAgICAgICAgICAgICAgICAgICAxICAgICgxLCAyLCBJRHMsIFNhbGVzSUQsIDEpICAgICAgICAgICAgICAgICAgICAgICAgICA0MzUzNTQzLjBcblxuICAgICAgICAgICAgICAgU3RvcmVJRCAwICAgICgxLCAyLCBJRHMsIFN0b3JlSUQsIDApICAgICAgICAgICAgICAgICAgICAgICAgICAgMTExMTExLjBcblxuICAgICAgICAgICAgICAgICAgICAgICAxICAgICgxLCAyLCBJRHMsIFN0b3JlSUQsIDEpICAgICAgICAgICAgICAgICAgICAgICAgICAxMTIxMTExLjBcblxuICAgICAgIE5hbWUgICAgTmFOICAgICBOYU4gICAgICAgICAgICAgKDEsIDIsIE5hbWUpICAgICBib3JpbmcgVGFsZXMgb2YgRHJhZ29uIFNsYXllcnNcblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuWzFdWzJdW0lEc11bQm9va0lEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTQzNTMzMjU0MzUzXG5cblsxXVsyXVtJRHNdW0Jvb2tJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA1NDM1MzMyNTQzNTMuMFxuXG5bMV1bMl1bSURzXVtCb29rSURdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA0MzI0MjMyMzQyXG5cblsxXVsyXVtJRHNdW0Jvb2tJRF1bMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA0MzI0MjMyMzQyLjBcblxuWzFdWzJdW0lEc11bU2FsZXNJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTQzMjY3NzY1MzQ1XG5cblsxXVsyXVtJRHNdW1NhbGVzSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA1NDMyNjc3NjUzNDUuMFxuXG5bMV1bMl1bSURzXVtTYWxlc0lEXVsxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA0MzUzNTQzXG5cblsxXVsyXVtJRHNdW1NhbGVzSURdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA0MzUzNTQzLjBcblxuWzFdWzJdW0lEc11bU3RvcmVJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTExMTExXG5cblsxXVsyXVtJRHNdW1N0b3JlSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMTExMTEuMFxuXG5bMV1bMl1bSURzXVtTdG9yZUlEXVsxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAxMTIxMTExXG5cblsxXVsyXVtJRHNdW1N0b3JlSURdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMTIxMTExLjBcblxuWzFdW0lEc11bQm9va0lEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTQzNTMzMjU0MzUzXG5cblsxXVtJRHNdW0Jvb2tJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA1NDM1MzMyNTQzNTMuMFxuXG5bMV1bSURzXVtTYWxlc0lEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA1NDMyNjc3NjUzNDVcblxuWzFdW0lEc11bU2FsZXNJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDU0MzI2Nzc2NTM0NS4wXG5cblsxXVtJRHNdW1N0b3JlSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDEyMzQ0NTQ1MjU0M1xuXG5bMV1bSURzXVtTdG9yZUlEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTIzNDQ1NDUyNTQzLjBcblxuezE6IHsyOiB7J0lEcyc6IHsnQm9va0lEJzogWzU0MzUzMzI1NDM1My4wLCA0MzI0MjMyMzQyLjBdLFxuXG4gICAgICAgICAgICAgICAgICdTYWxlc0lEJzogWzU0MzI2Nzc2NTM0NS4wLCA0MzUzNTQzLjBdLFxuXG4gICAgICAgICAgICAgICAgICdTdG9yZUlEJzogWzExMTExMS4wLCAxMTIxMTExLjBdfSxcblxuICAgICAgICAgJ05hbWUnOiAnYm9yaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzJ30sXG5cbiAgICAgJ0lEcyc6IHsnQm9va0lEJzogWzU0MzUzMzI1NDM1My4wXSxcblxuICAgICAgICAgICAgICdTYWxlc0lEJzogWzU0MzI2Nzc2NTM0NS4wXSxcblxuICAgICAgICAgICAgICdTdG9yZUlEJzogWzEyMzQ0NTQ1MjU0My4wXX0sXG5cbiAgICAgJ05hbWUnOiAnVGhyaWxsaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzJ319XG5cbk5lc3RlZCBpdGVyYWJsZSBmcm9tOiAnaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjE5ODQxNDgvaG93LXRvLWhhbmRsZS1uZXN0ZWQtbGlzdHMtYW5kLWRpY3Rpb25hcmllcy1pbi1wYW5kYXMtZGF0YWZyYW1lJ1xuXG57J2NyaXRpY19yZXZpZXdzJzogW3sncmV2aWV3X2NyaXRpYyc6ICdYWVonLCAncmV2aWV3X3Njb3JlJzogOTB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHsncmV2aWV3X2NyaXRpYyc6ICdBQkMnLCAncmV2aWV3X3Njb3JlJzogOTB9LFxuXG4gICAgICAgICAgICAgICAgICAgIHsncmV2aWV3X2NyaXRpYyc6ICcxMjMnLCAncmV2aWV3X3Njb3JlJzogOTB9XSxcblxuICdnZW5yZXMnOiBbJ1Nwb3J0cycsICdHb2xmJ10sXG5cbiAnc2NvcmUnOiA4NSxcblxuICd0aXRsZSc6ICdHb2xmIFNpbXVsYXRvcicsXG5cbiAndXJsJzogJ2h0dHA6Ly9leGFtcGxlLmNvbS9nb2xmLXNpbXVsYXRvcid9XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKSAgIyBjcmVhdGUgREYgc3RhY2tlZCBvciB1bnN0YWNrZWQsIGl0IGRvZXNuJ3QgbWF0dGVyXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuY3JpdGljX3Jldmlld3MgMCAgIHJldmlld19jcml0aWMgIChjcml0aWNfcmV2aWV3cywgMCwgcmV2aWV3X2NyaXRpYykgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFhZWlxuXG4gICAgICAgICAgICAgICAgICAgcmV2aWV3X3Njb3JlICAgIChjcml0aWNfcmV2aWV3cywgMCwgcmV2aWV3X3Njb3JlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDEgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19jcml0aWMpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBQkNcblxuICAgICAgICAgICAgICAgICAgIHJldmlld19zY29yZSAgICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19zY29yZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5MFxuXG4gICAgICAgICAgICAgICAyICAgcmV2aWV3X2NyaXRpYyAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfY3JpdGljKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTIzXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfc2NvcmUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOTBcblxuZ2VucmVzICAgICAgICAgMCAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGdlbnJlcywgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNwb3J0c1xuXG4gICAgICAgICAgICAgICAxICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZ2VucmVzLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHb2xmXG5cbnNjb3JlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzY29yZSwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgODVcblxudGl0bGUgICAgICAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRpdGxlLCkgICAgICAgICAgICAgICAgICAgICBHb2xmIFNpbXVsYXRvclxuXG51cmwgICAgICAgICAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh1cmwsKSAgaHR0cDovL2V4YW1wbGUuY29tL2dvbGYtc2ltdWxhdG9yXG5cbmRmLmxvY1tkZi5hYV92YWx1ZS5zdHIuY29udGFpbnMoJ1tHZ10nLG5hPUZhbHNlKSwnYWFfdmFsdWUnXSA9ICdVUERBVEUxMTExJyAjZGYubG9jIHRvIHVwZGF0ZSB0aGUgZGF0YWZyYW1lIChWRVJZIElNUE9SVEFOVDogVG8gdXBkYXRlIHRoZSBvcmlnaW5hbCBpdGVyYWJsZSB5b3UgaGF2ZSB0byBwYXNzICdhYV92YWx1ZScpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgIGFhX3ZhbHVlXG5cbmNyaXRpY19yZXZpZXdzIDAgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDAsIHJldmlld19jcml0aWMpICAgICAgICAgWFlaXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAwLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDEgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDEsIHJldmlld19jcml0aWMpICAgICAgICAgQUJDXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAxLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbiAgICAgICAgICAgICAgIDIgICByZXZpZXdfY3JpdGljICAoY3JpdGljX3Jldmlld3MsIDIsIHJldmlld19jcml0aWMpICAgICAgICAgMTIzXG5cbiAgICAgICAgICAgICAgICAgICByZXZpZXdfc2NvcmUgICAgKGNyaXRpY19yZXZpZXdzLCAyLCByZXZpZXdfc2NvcmUpICAgICAgICAgIDkwXG5cbmdlbnJlcyAgICAgICAgIDAgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnZW5yZXMsIDApICAgICAgU3BvcnRzXG5cbiAgICAgICAgICAgICAgIDEgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChnZW5yZXMsIDEpICBVUERBVEUxMTExXG5cbnNjb3JlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzY29yZSwpICAgICAgICAgIDg1XG5cbnRpdGxlICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aXRsZSwpICBVUERBVEUxMTExXG5cbnVybCAgICAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHVybCwpICBVUERBVEUxMTExXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpICAjdXBkYXRpbmcgdGhlIG5lc3RlZCBpdGVyYWJsZSwgdGhlIG5ldyB2YWx1ZXMgaGF2ZSB0byBiZSBpbiB0aGUgY29sdW1uICdhYV92YWx1ZScsIGlmIHlvdSBoYXZlIGFkZGVkIG5ldyBjb2x1bW5zIHRvIHRoZSBkYXRhZnJhbWUsIGRyb3AgdGhlbSBiZWZvcmUgdXBkYXRpbmcgdGhlIG9yaWdpbmFsIGl0ZXJhYmxlXG5cbltnZW5yZXNdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEdvbGZcblxuW2dlbnJlc11bMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQREFURTExMTFcblxuW3RpdGxlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogR29sZiBTaW11bGF0b3JcblxuW3RpdGxlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQREFURTExMTFcblxuW3VybF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogaHR0cDovL2V4YW1wbGUuY29tL2dvbGYtc2ltdWxhdG9yXG5cblt1cmxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBVUERBVEUxMTExXG5cbnsnY3JpdGljX3Jldmlld3MnOiBbeydyZXZpZXdfY3JpdGljJzogJ1hZWicsICdyZXZpZXdfc2NvcmUnOiA5MH0sXG5cbiAgICAgICAgICAgICAgICAgICAgeydyZXZpZXdfY3JpdGljJzogJ0FCQycsICdyZXZpZXdfc2NvcmUnOiA5MH0sXG5cbiAgICAgICAgICAgICAgICAgICAgeydyZXZpZXdfY3JpdGljJzogJzEyMycsICdyZXZpZXdfc2NvcmUnOiA5MH1dLFxuXG4gJ2dlbnJlcyc6IFsnU3BvcnRzJywgJ1VQREFURTExMTEnXSxcblxuICdzY29yZSc6IDg1LFxuXG4gJ3RpdGxlJzogJ1VQREFURTExMTEnLFxuXG4gJ3VybCc6ICdVUERBVEUxMTExJ31cblxuYGBgXG5cblxuXG5gYGBweXRob25cblxuI05lc3RlZCBpdGVyYWJsZSBmcm9tOiBcblxuaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzI5OTAyNjUvY29udmVydC1uZXN0ZWQtbGlzdC1pbi1kaWN0aW9uYXJ5LXRvLWRhdGFmcmFtZS83Mjk5MDM0NlxuXG5kYXRhPVxuXG57J2EnOiAndGVzdCcsXG5cbiAnYic6IDE2NTcsXG5cbiAnYyc6ICdhc3NldCcsXG5cbiAnZCc6IFtbJzIwODknLCAnMC4wJ10sIFsnMjA4OCcsICcwLjAnXV0sXG5cbiAnZSc6IFtbJzIwODgnLCAnMC4wJ10sIFsnMjA4OCcsICcwLjAnXSwgWycyMDg4JywgJzAuMDAnXV0sXG5cbiAnZic6IFtbJzIwODgnLCAnMC4wJywgJ3gnLCAnZm9vJ10sXG5cbiAgICAgICBbJzIwODgnLCAnMC4wJywgJ2JhcicsICdpJ10sXG5cbiAgICAgICBbJzIwODgnLCAnMC4wMCcsICd6JywgJzAuMiddXSxcblxuICd4JzogWyd0ZXN0MScsICd0ZXN0MiddfVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgIGFhX2FsbF9rZXlzIGFhX3ZhbHVlXG5cbmEgTmFOIE5hTiAgICAgICAgKGEsKSAgICAgdGVzdFxuXG5iIE5hTiBOYU4gICAgICAgIChiLCkgICAgIDE2NTdcblxuYyBOYU4gTmFOICAgICAgICAoYywpICAgIGFzc2V0XG5cbmQgMCAgIDAgICAgIChkLCAwLCAwKSAgICAgMjA4OVxuXG4gICAgICAxICAgICAoZCwgMCwgMSkgICAgICAwLjBcblxuICAxICAgMCAgICAgKGQsIDEsIDApICAgICAyMDg4XG5cbiAgICAgIDEgICAgIChkLCAxLCAxKSAgICAgIDAuMFxuXG5lIDAgICAwICAgICAoZSwgMCwgMCkgICAgIDIwODhcblxuICAgICAgMSAgICAgKGUsIDAsIDEpICAgICAgMC4wXG5cbiAgMSAgIDAgICAgIChlLCAxLCAwKSAgICAgMjA4OFxuXG4gICAgICAxICAgICAoZSwgMSwgMSkgICAgICAwLjBcblxuICAyICAgMCAgICAgKGUsIDIsIDApICAgICAyMDg4XG5cbiAgICAgIDEgICAgIChlLCAyLCAxKSAgICAgMC4wMFxuXG5mIDAgICAwICAgICAoZiwgMCwgMCkgICAgIDIwODhcblxuICAgICAgMSAgICAgKGYsIDAsIDEpICAgICAgMC4wXG5cbiAgICAgIDIgICAgIChmLCAwLCAyKSAgICAgICAgeFxuXG4gICAgICAzICAgICAoZiwgMCwgMykgICAgICBmb29cblxuICAxICAgMCAgICAgKGYsIDEsIDApICAgICAyMDg4XG5cbiAgICAgIDEgICAgIChmLCAxLCAxKSAgICAgIDAuMFxuXG4gICAgICAyICAgICAoZiwgMSwgMikgICAgICBiYXJcblxuICAgICAgMyAgICAgKGYsIDEsIDMpICAgICAgICBpXG5cbiAgMiAgIDAgICAgIChmLCAyLCAwKSAgICAgMjA4OFxuXG4gICAgICAxICAgICAoZiwgMiwgMSkgICAgIDAuMDBcblxuICAgICAgMiAgICAgKGYsIDIsIDIpICAgICAgICB6XG5cbiAgICAgIDMgICAgIChmLCAyLCAzKSAgICAgIDAuMlxuXG54IDAgICBOYU4gICAgICAoeCwgMCkgICAgdGVzdDFcblxuICAxICAgTmFOICAgICAgKHgsIDEpICAgIHRlc3QyXG5cbmRmLmxvY1tkZi5hYV92YWx1ZSA9PSAxNjU3LCdhYV92YWx1ZSddID0gMTY1NyozMFxuXG4gICAgICAgICAgYWFfYWxsX2tleXMgYWFfdmFsdWVcblxuYSBOYU4gTmFOICAgICAgICAoYSwpICAgICB0ZXN0XG5cbmIgTmFOIE5hTiAgICAgICAgKGIsKSAgICA0OTcxMFxuXG5jIE5hTiBOYU4gICAgICAgIChjLCkgICAgYXNzZXRcblxuZCAwICAgMCAgICAgKGQsIDAsIDApICAgICAyMDg5XG5cbiAgICAgIDEgICAgIChkLCAwLCAxKSAgICAgIDAuMFxuXG4gIDEgICAwICAgICAoZCwgMSwgMCkgICAgIDIwODhcblxuICAgICAgMSAgICAgKGQsIDEsIDEpICAgICAgMC4wXG5cbmUgMCAgIDAgICAgIChlLCAwLCAwKSAgICAgMjA4OFxuXG4gICAgICAxICAgICAoZSwgMCwgMSkgICAgICAwLjBcblxuICAxICAgMCAgICAgKGUsIDEsIDApICAgICAyMDg4XG5cbiAgICAgIDEgICAgIChlLCAxLCAxKSAgICAgIDAuMFxuXG4gIDIgICAwICAgICAoZSwgMiwgMCkgICAgIDIwODhcblxuICAgICAgMSAgICAgKGUsIDIsIDEpICAgICAwLjAwXG5cbmYgMCAgIDAgICAgIChmLCAwLCAwKSAgICAgMjA4OFxuXG4gICAgICAxICAgICAoZiwgMCwgMSkgICAgICAwLjBcblxuICAgICAgMiAgICAgKGYsIDAsIDIpICAgICAgICB4XG5cbiAgICAgIDMgICAgIChmLCAwLCAzKSAgICAgIGZvb1xuXG4gIDEgICAwICAgICAoZiwgMSwgMCkgICAgIDIwODhcblxuICAgICAgMSAgICAgKGYsIDEsIDEpICAgICAgMC4wXG5cbiAgICAgIDIgICAgIChmLCAxLCAyKSAgICAgIGJhclxuXG4gICAgICAzICAgICAoZiwgMSwgMykgICAgICAgIGlcblxuICAyICAgMCAgICAgKGYsIDIsIDApICAgICAyMDg4XG5cbiAgICAgIDEgICAgIChmLCAyLCAxKSAgICAgMC4wMFxuXG4gICAgICAyICAgICAoZiwgMiwgMikgICAgICAgIHpcblxuICAgICAgMyAgICAgKGYsIDIsIDMpICAgICAgMC4yXG5cbnggMCAgIE5hTiAgICAgICh4LCAwKSAgICB0ZXN0MVxuXG4gIDEgICBOYU4gICAgICAoeCwgMSkgICAgdGVzdDJcblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW2JdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTY1N1xuXG5bYl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNDk3MTBcblxueydhJzogJ3Rlc3QnLFxuXG4gJ2InOiA0OTcxMCxcblxuICdjJzogJ2Fzc2V0JyxcblxuICdkJzogW1snMjA4OScsICcwLjAnXSwgWycyMDg4JywgJzAuMCddXSxcblxuICdlJzogW1snMjA4OCcsICcwLjAnXSwgWycyMDg4JywgJzAuMCddLCBbJzIwODgnLCAnMC4wMCddXSxcblxuICdmJzogW1snMjA4OCcsICcwLjAnLCAneCcsICdmb28nXSxcblxuICAgICAgIFsnMjA4OCcsICcwLjAnLCAnYmFyJywgJ2knXSxcblxuICAgICAgIFsnMjA4OCcsICcwLjAwJywgJ3onLCAnMC4yJ11dLFxuXG4gJ3gnOiBbJ3Rlc3QxJywgJ3Rlc3QyJ119XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczNDMwNTg1L2hvdy10by1jb252ZXJ0LWEtbGlzdC1vZi1uZXN0ZWQtZGljdGlvbmFyaWVzLWluY2x1ZGVzLXR1cGxlcy1hcy1hLWRhdGFmcmFtZVxuXG5kYXRhPVxuXG5beydjYic6ICh7J0lEJzogMSwgJ05hbWUnOiAnQScsICdudW0nOiA1MH0sIHsnSUQnOiAyLCAnTmFtZSc6ICdBJywgJ251bSc6IDY4fSksXG5cbiAgJ2ZpbmFsX3ZhbHVlJzogMTE4fSxcblxuIHsnY2InOiAoeydJRCc6IDEsICdOYW1lJzogJ0EnLCAnbnVtJzogNTB9LCB7J0lEJzogNCwgJ05hbWUnOiAnQScsICdudW0nOiA2N30pLFxuXG4gICdmaW5hbF92YWx1ZSc6IDExN30sXG5cbiB7J2NiJzogKHsnSUQnOiAxLCAnTmFtZSc6ICdBJywgJ251bSc6IDUwfSwgeydJRCc6IDYsICdOYW1lJzogJ0EnLCAnbnVtJzogNjd9KSxcblxuICAnZmluYWxfdmFsdWUnOiAxMTd9XVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyBhYV92YWx1ZVxuXG4wIGNiICAgICAgICAgIDAgICBJRCAgICAgICgwLCBjYiwgMCwgSUQpICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMCwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMCwgbnVtKSAgICAgICA1MFxuXG4gICAgICAgICAgICAgIDEgICBJRCAgICAgICgwLCBjYiwgMSwgSUQpICAgICAgICAyXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgwLCBjYiwgMSwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgwLCBjYiwgMSwgbnVtKSAgICAgICA2OFxuXG4gIGZpbmFsX3ZhbHVlIE5hTiBOYU4gICAoMCwgZmluYWxfdmFsdWUpICAgICAgMTE4XG5cbjEgY2IgICAgICAgICAgMCAgIElEICAgICAgKDEsIGNiLCAwLCBJRCkgICAgICAgIDFcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAwLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAwLCBudW0pICAgICAgIDUwXG5cbiAgICAgICAgICAgICAgMSAgIElEICAgICAgKDEsIGNiLCAxLCBJRCkgICAgICAgIDRcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDEsIGNiLCAxLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDEsIGNiLCAxLCBudW0pICAgICAgIDY3XG5cbiAgZmluYWxfdmFsdWUgTmFOIE5hTiAgICgxLCBmaW5hbF92YWx1ZSkgICAgICAxMTdcblxuMiBjYiAgICAgICAgICAwICAgSUQgICAgICAoMiwgY2IsIDAsIElEKSAgICAgICAgMVxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDAsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDAsIG51bSkgICAgICAgNTBcblxuICAgICAgICAgICAgICAxICAgSUQgICAgICAoMiwgY2IsIDEsIElEKSAgICAgICAgNlxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMiwgY2IsIDEsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMiwgY2IsIDEsIG51bSkgICAgICAgNjdcblxuICBmaW5hbF92YWx1ZSBOYU4gTmFOICAgKDIsIGZpbmFsX3ZhbHVlKSAgICAgIDExN1xuXG5kZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KGludCxmbG9hdCksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKSA+IDMwLCAnYWFfdmFsdWUnXSA9IDkwMDAwMFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzIGFhX3ZhbHVlXG5cbjAgY2IgICAgICAgICAgMCAgIElEICAgICAgKDAsIGNiLCAwLCBJRCkgICAgICAgIDFcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDAsIGNiLCAwLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDAsIGNiLCAwLCBudW0pICAgOTAwMDAwXG5cbiAgICAgICAgICAgICAgMSAgIElEICAgICAgKDAsIGNiLCAxLCBJRCkgICAgICAgIDJcblxuICAgICAgICAgICAgICAgICAgTmFtZSAgKDAsIGNiLCAxLCBOYW1lKSAgICAgICAgQVxuXG4gICAgICAgICAgICAgICAgICBudW0gICAgKDAsIGNiLCAxLCBudW0pICAgOTAwMDAwXG5cbiAgZmluYWxfdmFsdWUgTmFOIE5hTiAgICgwLCBmaW5hbF92YWx1ZSkgICA5MDAwMDBcblxuMSBjYiAgICAgICAgICAwICAgSUQgICAgICAoMSwgY2IsIDAsIElEKSAgICAgICAgMVxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMSwgY2IsIDAsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMSwgY2IsIDAsIG51bSkgICA5MDAwMDBcblxuICAgICAgICAgICAgICAxICAgSUQgICAgICAoMSwgY2IsIDEsIElEKSAgICAgICAgNFxuXG4gICAgICAgICAgICAgICAgICBOYW1lICAoMSwgY2IsIDEsIE5hbWUpICAgICAgICBBXG5cbiAgICAgICAgICAgICAgICAgIG51bSAgICAoMSwgY2IsIDEsIG51bSkgICA5MDAwMDBcblxuICBmaW5hbF92YWx1ZSBOYU4gTmFOICAgKDEsIGZpbmFsX3ZhbHVlKSAgIDkwMDAwMFxuXG4yIGNiICAgICAgICAgIDAgICBJRCAgICAgICgyLCBjYiwgMCwgSUQpICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgyLCBjYiwgMCwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgyLCBjYiwgMCwgbnVtKSAgIDkwMDAwMFxuXG4gICAgICAgICAgICAgIDEgICBJRCAgICAgICgyLCBjYiwgMSwgSUQpICAgICAgICA2XG5cbiAgICAgICAgICAgICAgICAgIE5hbWUgICgyLCBjYiwgMSwgTmFtZSkgICAgICAgIEFcblxuICAgICAgICAgICAgICAgICAgbnVtICAgICgyLCBjYiwgMSwgbnVtKSAgIDkwMDAwMFxuXG4gIGZpbmFsX3ZhbHVlIE5hTiBOYU4gICAoMiwgZmluYWxfdmFsdWUpICAgOTAwMDAwXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cblswXVtjYl1bMF1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDUwXG5cblswXVtjYl1bMF1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzBdW2NiXVsxXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNjhcblxuWzBdW2NiXVsxXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5bMF1bZmluYWxfdmFsdWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAxMThcblxuWzBdW2ZpbmFsX3ZhbHVlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5bMV1bY2JdWzBdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA1MFxuXG5bMV1bY2JdWzBdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblsxXVtjYl1bMV1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDY3XG5cblsxXVtjYl1bMV1bbnVtXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzFdW2ZpbmFsX3ZhbHVlXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTE3XG5cblsxXVtmaW5hbF92YWx1ZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA5MDAwMDBcblxuWzJdW2NiXVswXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTBcblxuWzJdW2NiXVswXVtudW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDkwMDAwMFxuXG5bMl1bY2JdWzFdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA2N1xuXG5bMl1bY2JdWzFdW251bV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblsyXVtmaW5hbF92YWx1ZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDExN1xuXG5bMl1bZmluYWxfdmFsdWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogOTAwMDAwXG5cblt7J2NiJzogKHsnSUQnOiAxLCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0sXG5cbiAgICAgICAgIHsnSUQnOiAyLCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0pLFxuXG4gICdmaW5hbF92YWx1ZSc6IDkwMDAwMH0sXG5cbiB7J2NiJzogKHsnSUQnOiAxLCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0sXG5cbiAgICAgICAgIHsnSUQnOiA0LCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0pLFxuXG4gICdmaW5hbF92YWx1ZSc6IDkwMDAwMH0sXG5cbiB7J2NiJzogKHsnSUQnOiAxLCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0sXG5cbiAgICAgICAgIHsnSUQnOiA2LCAnTmFtZSc6ICdBJywgJ251bSc6IDkwMDAwMH0pLFxuXG4gICdmaW5hbF92YWx1ZSc6IDkwMDAwMH1dXG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY5OTQzNTA5L3Byb2JsZW1zLXdoZW4tZmxhdHRlbi1hLWRpY3RcblxuZGF0YT1cblxuW3snYXBwbGljYXRpb25fY29udGFjdHMnOiBbeydhZHJlc3MnOiAnWCcsICdlbWFpbCc6ICd0ZXN0QHRlc3QuY29tJ31dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6IE5vbmUsICdwaG9uZSc6IE5vbmV9LFxuXG4gICdlbXBsb3llcic6IHsnTmFtZSc6ICdOb20nLCAnZW1haWwnOiBOb25lfSxcblxuICAnaWQnOiAnMSd9LFxuXG4geydhcHBsaWNhdGlvbl9jb250YWN0cyc6IFt7J2FkcmVzcyc6ICdaJywgJ2VtYWlsJzogTm9uZX1dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6ICd0ZXN0eUB0ZXN0X2EuY29tJywgJ3Bob25lJzogTm9uZX0sXG5cbiAgJ2VtcGxveWVyJzogeydOYW1lJzogJ05vbScsICdlbWFpbCc6IE5vbmV9LFxuXG4gICdpZCc6ICcyJ30sXG5cbiB7J2FwcGxpY2F0aW9uX2NvbnRhY3RzJzogW3snYWRyZXNzJzogJ1knLCAnZW1haWwnOiBOb25lfV0sXG5cbiAgJ2FwcGxpY2F0aW9uX2RldGFpbHMnOiB7J2VtYWlsJzogJ3Rlc3R5QHRlc3RfYS5jb20nLCAncGhvbmUnOiBOb25lfSxcblxuICAnZW1wbG95ZXInOiB7J05hbWUnOiAnTm9tJywgJ2VtYWlsJzogTm9uZX0sXG5cbiAgJ2lkJzogJzMnfV1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgYWFfdmFsdWVcblxuMCBhcHBsaWNhdGlvbl9jb250YWN0cyAwICAgICBhZHJlc3MgICgwLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgYWRyZXNzKSAgICAgICAgICAgICAgICAgWFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsICAgICgwLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgZW1haWwpICAgICB0ZXN0QHRlc3QuY29tXG5cbiAgYXBwbGljYXRpb25fZGV0YWlscyAgZW1haWwgTmFOICAgICAgICAgICgwLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBlbWFpbCkgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSBOYU4gICAgICAgICAgKDAsIGFwcGxpY2F0aW9uX2RldGFpbHMsIHBob25lKSAgICAgICAgICAgICAgTm9uZVxuXG4gIGVtcGxveWVyICAgICAgICAgICAgIE5hbWUgIE5hTiAgICAgICAgICAgICAgICAgICAgICAoMCwgZW1wbG95ZXIsIE5hbWUpICAgICAgICAgICAgICAgTm9tXG5cbiAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgTmFOICAgICAgICAgICAgICAgICAgICAgKDAsIGVtcGxveWVyLCBlbWFpbCkgICAgICAgICAgICAgIE5vbmVcblxuICBpZCAgICAgICAgICAgICAgICAgICBOYU4gICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGlkKSAgICAgICAgICAgICAgICAgMVxuXG4xIGFwcGxpY2F0aW9uX2NvbnRhY3RzIDAgICAgIGFkcmVzcyAgKDEsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBhZHJlc3MpICAgICAgICAgICAgICAgICBaXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgICAgKDEsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBlbWFpbCkgICAgICAgICAgICAgIE5vbmVcblxuICBhcHBsaWNhdGlvbl9kZXRhaWxzICBlbWFpbCBOYU4gICAgICAgICAgKDEsIGFwcGxpY2F0aW9uX2RldGFpbHMsIGVtYWlsKSAgdGVzdHlAdGVzdF9hLmNvbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIHBob25lIE5hTiAgICAgICAgICAoMSwgYXBwbGljYXRpb25fZGV0YWlscywgcGhvbmUpICAgICAgICAgICAgICBOb25lXG5cbiAgZW1wbG95ZXIgICAgICAgICAgICAgTmFtZSAgTmFOICAgICAgICAgICAgICAgICAgICAgICgxLCBlbXBsb3llciwgTmFtZSkgICAgICAgICAgICAgICBOb21cblxuICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCBOYU4gICAgICAgICAgICAgICAgICAgICAoMSwgZW1wbG95ZXIsIGVtYWlsKSAgICAgICAgICAgICAgTm9uZVxuXG4gIGlkICAgICAgICAgICAgICAgICAgIE5hTiAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMSwgaWQpICAgICAgICAgICAgICAgICAyXG5cbjIgYXBwbGljYXRpb25fY29udGFjdHMgMCAgICAgYWRyZXNzICAoMiwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGFkcmVzcykgICAgICAgICAgICAgICAgIFlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCAgICAoMiwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGVtYWlsKSAgICAgICAgICAgICAgTm9uZVxuXG4gIGFwcGxpY2F0aW9uX2RldGFpbHMgIGVtYWlsIE5hTiAgICAgICAgICAoMiwgYXBwbGljYXRpb25fZGV0YWlscywgZW1haWwpICB0ZXN0eUB0ZXN0X2EuY29tXG5cbiAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUgTmFOICAgICAgICAgICgyLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBwaG9uZSkgICAgICAgICAgICAgIE5vbmVcblxuICBlbXBsb3llciAgICAgICAgICAgICBOYW1lICBOYU4gICAgICAgICAgICAgICAgICAgICAgKDIsIGVtcGxveWVyLCBOYW1lKSAgICAgICAgICAgICAgIE5vbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGVtYWlsIE5hTiAgICAgICAgICAgICAgICAgICAgICgyLCBlbXBsb3llciwgZW1haWwpICAgICAgICAgICAgICBOb25lXG5cbiAgaWQgICAgICAgICAgICAgICAgICAgTmFOICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgyLCBpZCkgICAgICAgICAgICAgICAgIDNcblxuZGYubG9jW2RmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpLnN0ci5jb250YWlucyhyJ3Rlc3RfYVxcLlxcdytcXGInLG5hPUZhbHNlKSwgJ2FhX3ZhbHVlJ10gPSAnVVBQUFBQUFBQUFBQUFBQUERBVEUuQ09NJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuMCBhcHBsaWNhdGlvbl9jb250YWN0cyAwICAgICBhZHJlc3MgICgwLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgYWRyZXNzKSAgICAgICAgICAgICAgICAgICAgICAgICBYXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgICAgKDAsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBlbWFpbCkgICAgICAgICAgICAgdGVzdEB0ZXN0LmNvbVxuXG4gIGFwcGxpY2F0aW9uX2RldGFpbHMgIGVtYWlsIE5hTiAgICAgICAgICAoMCwgYXBwbGljYXRpb25fZGV0YWlscywgZW1haWwpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgICAgICAgICAgICBwaG9uZSBOYU4gICAgICAgICAgKDAsIGFwcGxpY2F0aW9uX2RldGFpbHMsIHBob25lKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgZW1wbG95ZXIgICAgICAgICAgICAgTmFtZSAgTmFOICAgICAgICAgICAgICAgICAgICAgICgwLCBlbXBsb3llciwgTmFtZSkgICAgICAgICAgICAgICAgICAgICAgIE5vbVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGVtYWlsIE5hTiAgICAgICAgICAgICAgICAgICAgICgwLCBlbXBsb3llciwgZW1haWwpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICBpZCAgICAgICAgICAgICAgICAgICBOYU4gICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIGlkKSAgICAgICAgICAgICAgICAgICAgICAgICAxXG5cbjEgYXBwbGljYXRpb25fY29udGFjdHMgMCAgICAgYWRyZXNzICAoMSwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGFkcmVzcykgICAgICAgICAgICAgICAgICAgICAgICAgWlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYWlsICAgICgxLCBhcHBsaWNhdGlvbl9jb250YWN0cywgMCwgZW1haWwpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICBhcHBsaWNhdGlvbl9kZXRhaWxzICBlbWFpbCBOYU4gICAgICAgICAgKDEsIGFwcGxpY2F0aW9uX2RldGFpbHMsIGVtYWlsKSAgVVBQUFBQUFBQUFBQUFBQUERBVEUuQ09NXG5cbiAgICAgICAgICAgICAgICAgICAgICAgcGhvbmUgTmFOICAgICAgICAgICgxLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBwaG9uZSkgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gIGVtcGxveWVyICAgICAgICAgICAgIE5hbWUgIE5hTiAgICAgICAgICAgICAgICAgICAgICAoMSwgZW1wbG95ZXIsIE5hbWUpICAgICAgICAgICAgICAgICAgICAgICBOb21cblxuICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCBOYU4gICAgICAgICAgICAgICAgICAgICAoMSwgZW1wbG95ZXIsIGVtYWlsKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgaWQgICAgICAgICAgICAgICAgICAgTmFOICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgxLCBpZCkgICAgICAgICAgICAgICAgICAgICAgICAgMlxuXG4yIGFwcGxpY2F0aW9uX2NvbnRhY3RzIDAgICAgIGFkcmVzcyAgKDIsIGFwcGxpY2F0aW9uX2NvbnRhY3RzLCAwLCBhZHJlc3MpICAgICAgICAgICAgICAgICAgICAgICAgIFlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWFpbCAgICAoMiwgYXBwbGljYXRpb25fY29udGFjdHMsIDAsIGVtYWlsKSAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgYXBwbGljYXRpb25fZGV0YWlscyAgZW1haWwgTmFOICAgICAgICAgICgyLCBhcHBsaWNhdGlvbl9kZXRhaWxzLCBlbWFpbCkgIFVQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTVxuXG4gICAgICAgICAgICAgICAgICAgICAgIHBob25lIE5hTiAgICAgICAgICAoMiwgYXBwbGljYXRpb25fZGV0YWlscywgcGhvbmUpICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICBlbXBsb3llciAgICAgICAgICAgICBOYW1lICBOYU4gICAgICAgICAgICAgICAgICAgICAgKDIsIGVtcGxveWVyLCBOYW1lKSAgICAgICAgICAgICAgICAgICAgICAgTm9tXG5cbiAgICAgICAgICAgICAgICAgICAgICAgZW1haWwgTmFOICAgICAgICAgICAgICAgICAgICAgKDIsIGVtcGxveWVyLCBlbWFpbCkgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gIGlkICAgICAgICAgICAgICAgICAgIE5hTiAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMiwgaWQpICAgICAgICAgICAgICAgICAgICAgICAgIDNcblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuWzFdW2FwcGxpY2F0aW9uX2RldGFpbHNdW2VtYWlsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogdGVzdHlAdGVzdF9hLmNvbVxuXG5bMV1bYXBwbGljYXRpb25fZGV0YWlsc11bZW1haWxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogVVBQUFBQUFBQUFBQUFBQUERBVEUuQ09NXG5cblsyXVthcHBsaWNhdGlvbl9kZXRhaWxzXVtlbWFpbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IHRlc3R5QHRlc3RfYS5jb21cblxuWzJdW2FwcGxpY2F0aW9uX2RldGFpbHNdW2VtYWlsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFVQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTVxuXG5beydhcHBsaWNhdGlvbl9jb250YWN0cyc6IFt7J2FkcmVzcyc6ICdYJywgJ2VtYWlsJzogJ3Rlc3RAdGVzdC5jb20nfV0sXG5cbiAgJ2FwcGxpY2F0aW9uX2RldGFpbHMnOiB7J2VtYWlsJzogTm9uZSwgJ3Bob25lJzogTm9uZX0sXG5cbiAgJ2VtcGxveWVyJzogeydOYW1lJzogJ05vbScsICdlbWFpbCc6IE5vbmV9LFxuXG4gICdpZCc6ICcxJ30sXG5cbiB7J2FwcGxpY2F0aW9uX2NvbnRhY3RzJzogW3snYWRyZXNzJzogJ1onLCAnZW1haWwnOiBOb25lfV0sXG5cbiAgJ2FwcGxpY2F0aW9uX2RldGFpbHMnOiB7J2VtYWlsJzogJ1VQUFBQUFBQUFBQUFBQUFBEQVRFLkNPTScsICdwaG9uZSc6IE5vbmV9LFxuXG4gICdlbXBsb3llcic6IHsnTmFtZSc6ICdOb20nLCAnZW1haWwnOiBOb25lfSxcblxuICAnaWQnOiAnMid9LFxuXG4geydhcHBsaWNhdGlvbl9jb250YWN0cyc6IFt7J2FkcmVzcyc6ICdZJywgJ2VtYWlsJzogTm9uZX1dLFxuXG4gICdhcHBsaWNhdGlvbl9kZXRhaWxzJzogeydlbWFpbCc6ICdVUFBQUFBQUFBQUFBQUFBQREFURS5DT00nLCAncGhvbmUnOiBOb25lfSxcblxuICAnZW1wbG95ZXInOiB7J05hbWUnOiAnTm9tJywgJ2VtYWlsJzogTm9uZX0sXG5cbiAgJ2lkJzogJzMnfV1cblxuYGBgXG5cblxuXG5gYGBweXRob25cblxuI05lc3RlZCBpdGVyYWJsZSBmcm9tOiBcblxuaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjI3NjUzNzEvY29udmVydC1uZXN0ZWQtZGF0YWZyYW1lLXRvLWEtc2ltcGxlLWRhdGFmcmFtZWZyYW1lXG5cbmRhdGE9XG5cbnsnQSc6IFsxLCAyLCAzXSxcblxuICdCJzogWzQsIDUsIDZdLFxuXG4gJ2RlcGFydHVyZSc6IFt7J2FjdHVhbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWN0dWFsX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWlycG9ydCc6ICdGaW5kZWwnLFxuXG4gICAgICAgICAgICAgICAgJ2RlbGF5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZ2F0ZSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnaWF0YSc6ICdMVVgnLFxuXG4gICAgICAgICAgICAgICAgJ2ljYW8nOiAnRUxMWCcsXG5cbiAgICAgICAgICAgICAgICAnc2NoZWR1bGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ3Rlcm1pbmFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICd0aW1lem9uZSc6ICdFdXJvcGUvTHV4ZW1ib3VyZyd9LFxuXG4gICAgICAgICAgICAgICB7J2FjdHVhbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWN0dWFsX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWlycG9ydCc6ICdGaW5kZWwnLFxuXG4gICAgICAgICAgICAgICAgJ2RlbGF5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZ2F0ZSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnaWF0YSc6ICdMVVgnLFxuXG4gICAgICAgICAgICAgICAgJ2ljYW8nOiAnRUxMWCcsXG5cbiAgICAgICAgICAgICAgICAnc2NoZWR1bGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ3Rlcm1pbmFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICd0aW1lem9uZSc6ICdFdXJvcGUvTHV4ZW1ib3VyZyd9LFxuXG4gICAgICAgICAgICAgICB7J2FjdHVhbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWN0dWFsX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWlycG9ydCc6ICdGaW5kZWwnLFxuXG4gICAgICAgICAgICAgICAgJ2RlbGF5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZ2F0ZSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnaWF0YSc6ICdMVVgnLFxuXG4gICAgICAgICAgICAgICAgJ2ljYW8nOiAnRUxMWCcsXG5cbiAgICAgICAgICAgICAgICAnc2NoZWR1bGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ3Rlcm1pbmFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICd0aW1lem9uZSc6ICdFdXJvcGUvTHV4ZW1ib3VyZyd9XX1cblxuZGYgPSBwZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihkYXRhLHVuc3RhY2s9RmFsc2UpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbkEgICAgICAgICAwIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEEsIDApICAgICAgICAgICAgICAgICAgICAgICAgICAxXG5cbiAgICAgICAgICAxIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEEsIDEpICAgICAgICAgICAgICAgICAgICAgICAgICAyXG5cbiAgICAgICAgICAyIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEEsIDIpICAgICAgICAgICAgICAgICAgICAgICAgICAzXG5cbkIgICAgICAgICAwIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEIsIDApICAgICAgICAgICAgICAgICAgICAgICAgICA0XG5cbiAgICAgICAgICAxIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEIsIDEpICAgICAgICAgICAgICAgICAgICAgICAgICA1XG5cbiAgICAgICAgICAyIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEIsIDIpICAgICAgICAgICAgICAgICAgICAgICAgICA2XG5cbmRlcGFydHVyZSAwIGFjdHVhbCAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBhY3R1YWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFjdHVhbF9ydW53YXkgICAgICAgIChkZXBhcnR1cmUsIDAsIGFjdHVhbF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFpcnBvcnQgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGFpcnBvcnQpICAgICAgICAgICAgICAgICAgICAgRmluZGVsXG5cbiAgICAgICAgICAgIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgZGVsYXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGVzdGltYXRlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBlc3RpbWF0ZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIGVzdGltYXRlZF9ydW53YXkgIChkZXBhcnR1cmUsIDAsIGVzdGltYXRlZF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGdhdGUgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGdhdGUpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGlhdGEgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGlhdGEpICAgICAgICAgICAgICAgICAgICAgICAgTFVYXG5cbiAgICAgICAgICAgIGljYW8gICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGljYW8pICAgICAgICAgICAgICAgICAgICAgICBFTExYXG5cbiAgICAgICAgICAgIHNjaGVkdWxlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBzY2hlZHVsZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIHRlcm1pbmFsICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgdGVybWluYWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIHRpbWV6b25lICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgdGltZXpvbmUpICAgICAgICAgIEV1cm9wZS9MdXhlbWJvdXJnXG5cbiAgICAgICAgICAxIGFjdHVhbCAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBhY3R1YWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFjdHVhbF9ydW53YXkgICAgICAgIChkZXBhcnR1cmUsIDEsIGFjdHVhbF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFpcnBvcnQgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGFpcnBvcnQpICAgICAgICAgICAgICAgICAgICAgRmluZGVsXG5cbiAgICAgICAgICAgIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgZGVsYXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGVzdGltYXRlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBlc3RpbWF0ZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIGVzdGltYXRlZF9ydW53YXkgIChkZXBhcnR1cmUsIDEsIGVzdGltYXRlZF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGdhdGUgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGdhdGUpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGlhdGEgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGlhdGEpICAgICAgICAgICAgICAgICAgICAgICAgTFVYXG5cbiAgICAgICAgICAgIGljYW8gICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGljYW8pICAgICAgICAgICAgICAgICAgICAgICBFTExYXG5cbiAgICAgICAgICAgIHNjaGVkdWxlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBzY2hlZHVsZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIHRlcm1pbmFsICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgdGVybWluYWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIHRpbWV6b25lICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgdGltZXpvbmUpICAgICAgICAgIEV1cm9wZS9MdXhlbWJvdXJnXG5cbiAgICAgICAgICAyIGFjdHVhbCAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBhY3R1YWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFjdHVhbF9ydW53YXkgICAgICAgIChkZXBhcnR1cmUsIDIsIGFjdHVhbF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGFpcnBvcnQgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGFpcnBvcnQpICAgICAgICAgICAgICAgICAgICAgRmluZGVsXG5cbiAgICAgICAgICAgIGRlbGF5ICAgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgZGVsYXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGVzdGltYXRlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBlc3RpbWF0ZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIGVzdGltYXRlZF9ydW53YXkgIChkZXBhcnR1cmUsIDIsIGVzdGltYXRlZF9ydW53YXkpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGdhdGUgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGdhdGUpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIGlhdGEgICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGlhdGEpICAgICAgICAgICAgICAgICAgICAgICAgTFVYXG5cbiAgICAgICAgICAgIGljYW8gICAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGljYW8pICAgICAgICAgICAgICAgICAgICAgICBFTExYXG5cbiAgICAgICAgICAgIHNjaGVkdWxlZCAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBzY2hlZHVsZWQpICAyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwXG5cbiAgICAgICAgICAgIHRlcm1pbmFsICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgdGVybWluYWwpICAgICAgICAgICAgICAgICAgICAgICBOb25lXG5cbiAgICAgICAgICAgIHRpbWV6b25lICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgdGltZXpvbmUpICAgICAgICAgIEV1cm9wZS9MdXhlbWJvdXJnXG5cbmRmLmxvY1tkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKT09ICdFTExYJywgJ2FhX3ZhbHVlJ10gPSAnRUxMWC1VUERBVEVEJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgICBhYV92YWx1ZVxuXG5BICAgICAgICAgMCBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgMVxuXG4gICAgICAgICAgMSBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgMlxuXG4gICAgICAgICAgMiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChBLCAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgM1xuXG5CICAgICAgICAgMCBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgNFxuXG4gICAgICAgICAgMSBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgNVxuXG4gICAgICAgICAgMiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChCLCAyKSAgICAgICAgICAgICAgICAgICAgICAgICAgNlxuXG5kZXBhcnR1cmUgMCBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAwLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAwLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAwLCBpY2FvKSAgICAgICAgICAgICAgIEVMTFgtVVBEQVRFRFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMCwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDAsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG4gICAgICAgICAgMSBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAxLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAxLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAxLCBpY2FvKSAgICAgICAgICAgICAgIEVMTFgtVVBEQVRFRFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMSwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDEsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG4gICAgICAgICAgMiBhY3R1YWwgICAgICAgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgYWN0dWFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhY3R1YWxfcnVud2F5ICAgICAgICAoZGVwYXJ0dXJlLCAyLCBhY3R1YWxfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBhaXJwb3J0ICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBhaXJwb3J0KSAgICAgICAgICAgICAgICAgICAgIEZpbmRlbFxuXG4gICAgICAgICAgICBkZWxheSAgICAgICAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIGRlbGF5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBlc3RpbWF0ZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgZXN0aW1hdGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICBlc3RpbWF0ZWRfcnVud2F5ICAoZGVwYXJ0dXJlLCAyLCBlc3RpbWF0ZWRfcnVud2F5KSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBnYXRlICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBnYXRlKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICBpYXRhICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBpYXRhKSAgICAgICAgICAgICAgICAgICAgICAgIExVWFxuXG4gICAgICAgICAgICBpY2FvICAgICAgICAgICAgICAgICAgICAgICAgICAoZGVwYXJ0dXJlLCAyLCBpY2FvKSAgICAgICAgICAgICAgIEVMTFgtVVBEQVRFRFxuXG4gICAgICAgICAgICBzY2hlZHVsZWQgICAgICAgICAgICAgICAgKGRlcGFydHVyZSwgMiwgc2NoZWR1bGVkKSAgMjAyMC0wNy0wN1QwNjozMDowMCswMDowMFxuXG4gICAgICAgICAgICB0ZXJtaW5hbCAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIHRlcm1pbmFsKSAgICAgICAgICAgICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgICAgICB0aW1lem9uZSAgICAgICAgICAgICAgICAgIChkZXBhcnR1cmUsIDIsIHRpbWV6b25lKSAgICAgICAgICBFdXJvcGUvTHV4ZW1ib3VyZ1xuXG5tb2RfaXRlciA9IGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoZGF0YSwgdmVyYm9zZT1UcnVlKVxuXG5bZGVwYXJ0dXJlXVswXVtpY2FvXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBFTExYXG5cbltkZXBhcnR1cmVdWzBdW2ljYW9dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBFTExYLVVQREFURURcblxuW2RlcGFydHVyZV1bMV1baWNhb10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRUxMWFxuXG5bZGVwYXJ0dXJlXVsxXVtpY2FvXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogRUxMWC1VUERBVEVEXG5cbltkZXBhcnR1cmVdWzJdW2ljYW9dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEVMTFhcblxuW2RlcGFydHVyZV1bMl1baWNhb10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IEVMTFgtVVBEQVRFRFxuXG57J0EnOiBbMSwgMiwgM10sXG5cbiAnQic6IFs0LCA1LCA2XSxcblxuICdkZXBhcnR1cmUnOiBbeydhY3R1YWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FjdHVhbF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2FpcnBvcnQnOiAnRmluZGVsJyxcblxuICAgICAgICAgICAgICAgICdkZWxheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZF9ydW53YXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2dhdGUnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2lhdGEnOiAnTFVYJyxcblxuICAgICAgICAgICAgICAgICdpY2FvJzogJ0VMTFgtVVBEQVRFRCcsXG5cbiAgICAgICAgICAgICAgICAnc2NoZWR1bGVkJzogJzIwMjAtMDctMDdUMDY6MzA6MDArMDA6MDAnLFxuXG4gICAgICAgICAgICAgICAgJ3Rlcm1pbmFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICd0aW1lem9uZSc6ICdFdXJvcGUvTHV4ZW1ib3VyZyd9LFxuXG4gICAgICAgICAgICAgICB7J2FjdHVhbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWN0dWFsX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnYWlycG9ydCc6ICdGaW5kZWwnLFxuXG4gICAgICAgICAgICAgICAgJ2RlbGF5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAnZXN0aW1hdGVkX3J1bndheSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnZ2F0ZSc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAnaWF0YSc6ICdMVVgnLFxuXG4gICAgICAgICAgICAgICAgJ2ljYW8nOiAnRUxMWC1VUERBVEVEJyxcblxuICAgICAgICAgICAgICAgICdzY2hlZHVsZWQnOiAnMjAyMC0wNy0wN1QwNjozMDowMCswMDowMCcsXG5cbiAgICAgICAgICAgICAgICAndGVybWluYWwnOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ3RpbWV6b25lJzogJ0V1cm9wZS9MdXhlbWJvdXJnJ30sXG5cbiAgICAgICAgICAgICAgIHsnYWN0dWFsJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdhY3R1YWxfcnVud2F5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdhaXJwb3J0JzogJ0ZpbmRlbCcsXG5cbiAgICAgICAgICAgICAgICAnZGVsYXknOiBOb25lLFxuXG4gICAgICAgICAgICAgICAgJ2VzdGltYXRlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICdlc3RpbWF0ZWRfcnVud2F5JzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdnYXRlJzogTm9uZSxcblxuICAgICAgICAgICAgICAgICdpYXRhJzogJ0xVWCcsXG5cbiAgICAgICAgICAgICAgICAnaWNhbyc6ICdFTExYLVVQREFURUQnLFxuXG4gICAgICAgICAgICAgICAgJ3NjaGVkdWxlZCc6ICcyMDIwLTA3LTA3VDA2OjMwOjAwKzAwOjAwJyxcblxuICAgICAgICAgICAgICAgICd0ZXJtaW5hbCc6IE5vbmUsXG5cbiAgICAgICAgICAgICAgICAndGltZXpvbmUnOiAnRXVyb3BlL0x1eGVtYm91cmcnfV19XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzY0MzU5NzYyL2NvbnN0cnVjdGluZy1hLXBhbmRhcy1kYXRhZnJhbWUtd2l0aC1jb2x1bW5zLWFuZC1zdWItY29sdW1ucy1mcm9tLW5lc3RlZC1kaWN0aW9uXG5cbmRhdGE9XG5cbnsnbGV2ZWwxJzogeyd0MSc6IHsnczEnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiA5fSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDEsICdjb2wyJzogNSwgJ2NvbDMnOiA0LCAnY29sNCc6IDh9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogMTEsICdjb2wyJzogOCwgJ2NvbDMnOiAyLCAnY29sNCc6IDl9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogOX19LFxuXG4gICAgICAgICAgICAndDInOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiA4fSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLCAnY29sMic6IDgsICdjb2wzJzogMiwgJ2NvbDQnOiA5fSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDl9fSxcblxuICAgICAgICAgICAgJ3QzJzogeydzMSc6IHsnY29sMSc6IDEsICdjb2wyJzogMiwgJ2NvbDMnOiAzLCAnY29sNCc6IDR9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogNSwgJ2NvbDInOiA2LCAnY29sMyc6IDcsICdjb2w0JzogOH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiA5LCAnY29sMic6IDEwLCAnY29sMyc6IDExLCAnY29sNCc6IDEyfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDEzLCAnY29sMic6IDE0LCAnY29sMyc6IDE1LCAnY29sNCc6IDE2fX19LFxuXG4gJ2xldmVsMic6IHsndDEnOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDksICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiA1fSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLCAnY29sMic6IDgsICdjb2wzJzogMiwgJ2NvbDQnOiAxM30sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAyMH19LFxuXG4gICAgICAgICAgICAndDInOiB7J3MxJzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogOX0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiAxLCAnY29sMic6IDUsICdjb2wzJzogNCwgJ2NvbDQnOiA4fSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDExLCAnY29sMic6IDgsICdjb2wzJzogMiwgJ2NvbDQnOiA5fSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDl9fSxcblxuICAgICAgICAgICAgJ3QzJzogeydzMSc6IHsnY29sMSc6IDEsICdjb2wyJzogMiwgJ2NvbDMnOiAzLCAnY29sNCc6IDR9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogNSwgJ2NvbDInOiA2LCAnY29sMyc6IDcsICdjb2w0JzogOH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiA5LCAnY29sMic6IDEwLCAnY29sMyc6IDExLCAnY29sNCc6IDEyfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDEzLCAnY29sMic6IDE0LCAnY29sMyc6IDE1LCAnY29sNCc6IDE2fX19fVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgIGFhX3ZhbHVlXG5cbmxldmVsMSB0MSBzMSBjb2wxICAobGV2ZWwxLCB0MSwgczEsIGNvbDEpICAgICAgICAgNVxuXG4gICAgICAgICAgICAgY29sMiAgKGxldmVsMSwgdDEsIHMxLCBjb2wyKSAgICAgICAgIDRcblxuICAgICAgICAgICAgIGNvbDMgIChsZXZlbDEsIHQxLCBzMSwgY29sMykgICAgICAgICA0XG5cbiAgICAgICAgICAgICBjb2w0ICAobGV2ZWwxLCB0MSwgczEsIGNvbDQpICAgICAgICAgOVxuXG4gICAgICAgICAgczIgY29sMSAgKGxldmVsMSwgdDEsIHMyLCBjb2wxKSAgICAgICAgIDFcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAgLi4uXG5cbmxldmVsMiB0MyBzMyBjb2w0ICAobGV2ZWwyLCB0MywgczMsIGNvbDQpICAgICAgICAxMlxuXG4gICAgICAgICAgczQgY29sMSAgKGxldmVsMiwgdDMsIHM0LCBjb2wxKSAgICAgICAgMTNcblxuICAgICAgICAgICAgIGNvbDIgIChsZXZlbDIsIHQzLCBzNCwgY29sMikgICAgICAgIDE0XG5cbiAgICAgICAgICAgICBjb2wzICAobGV2ZWwyLCB0MywgczQsIGNvbDMpICAgICAgICAxNVxuXG4gICAgICAgICAgICAgY29sNCAgKGxldmVsMiwgdDMsIHM0LCBjb2w0KSAgICAgICAgMTZcblxuWzk2IHJvd3MgeCAyIGNvbHVtbnNdXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShpbnQpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykgPiA1KSAmIChkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KGludCksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKSA8IDEwKSwgJ2FhX3ZhbHVlJ10gPSAxMDAwMDAwXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICBhYV92YWx1ZVxuXG5sZXZlbDEgdDEgczEgY29sMSAgKGxldmVsMSwgdDEsIHMxLCBjb2wxKSAgICAgICAgIDVcblxuICAgICAgICAgICAgIGNvbDIgIChsZXZlbDEsIHQxLCBzMSwgY29sMikgICAgICAgICA0XG5cbiAgICAgICAgICAgICBjb2wzICAobGV2ZWwxLCB0MSwgczEsIGNvbDMpICAgICAgICAgNFxuXG4gICAgICAgICAgICAgY29sNCAgKGxldmVsMSwgdDEsIHMxLCBjb2w0KSAgIDEwMDAwMDBcblxuICAgICAgICAgIHMyIGNvbDEgIChsZXZlbDEsIHQxLCBzMiwgY29sMSkgICAgICAgICAxXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAgIC4uLlxuXG5sZXZlbDIgdDMgczMgY29sNCAgKGxldmVsMiwgdDMsIHMzLCBjb2w0KSAgICAgICAgMTJcblxuICAgICAgICAgIHM0IGNvbDEgIChsZXZlbDIsIHQzLCBzNCwgY29sMSkgICAgICAgIDEzXG5cbiAgICAgICAgICAgICBjb2wyICAobGV2ZWwyLCB0MywgczQsIGNvbDIpICAgICAgICAxNFxuXG4gICAgICAgICAgICAgY29sMyAgKGxldmVsMiwgdDMsIHM0LCBjb2wzKSAgICAgICAgMTVcblxuICAgICAgICAgICAgIGNvbDQgIChsZXZlbDIsIHQzLCBzNCwgY29sNCkgICAgICAgIDE2XG5cbls5NiByb3dzIHggMiBjb2x1bW5zXVxuXG5tb2RfaXRlciA9IGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoZGF0YSwgdmVyYm9zZT1UcnVlKVxuXG5bbGV2ZWwxXVt0MV1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDFdW3QxXVtzMV1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QxXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDhcblxuW2xldmVsMV1bdDFdW3MyXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDFdW3MzXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOFxuXG5bbGV2ZWwxXVt0MV1bczNdW2NvbDJdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0MV1bczNdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDFdW3QxXVtzM11bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QxXVtzNF1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMV1bdDFdW3M0XVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDJdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwxXVt0Ml1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0Ml1bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDFdW3QyXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QyXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDhcblxuW2xldmVsMV1bdDJdW3MzXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDJdW3MzXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwxXVt0Ml1bczNdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0Ml1bczRdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDFdW3QyXVtzNF1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QzXVtzMl1bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDZcblxuW2xldmVsMV1bdDNdW3MyXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMV1bdDNdW3MyXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogN1xuXG5bbGV2ZWwxXVt0M11bczJdW2NvbDNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwxXVt0M11bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDFdW3QzXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDFdW3QzXVtzM11bY29sMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMV1bdDNdW3MzXVtjb2wxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDFdW3MxXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwyXVt0MV1bczFdW2NvbDNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0MV1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDJdW3QxXVtzMV1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QxXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDhcblxuW2xldmVsMl1bdDFdW3MzXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDJdW3MxXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwyXVt0Ml1bczFdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0Ml1bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDJdW3QyXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QyXVtzM11bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDhcblxuW2xldmVsMl1bdDJdW3MzXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDJdW3MzXVtjb2w0XSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogOVxuXG5bbGV2ZWwyXVt0Ml1bczNdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0Ml1bczRdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA5XG5cbltsZXZlbDJdW3QyXVtzNF1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QzXVtzMl1bY29sMl0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDZcblxuW2xldmVsMl1bdDNdW3MyXVtjb2wyXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxuW2xldmVsMl1bdDNdW3MyXVtjb2wzXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogN1xuXG5bbGV2ZWwyXVt0M11bczJdW2NvbDNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDAwMFxuXG5bbGV2ZWwyXVt0M11bczJdW2NvbDRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiA4XG5cbltsZXZlbDJdW3QzXVtzMl1bY29sNF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwXG5cbltsZXZlbDJdW3QzXVtzM11bY29sMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDlcblxuW2xldmVsMl1bdDNdW3MzXVtjb2wxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwMDBcblxueydsZXZlbDEnOiB7J3QxJzogeydzMSc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MyJzogeydjb2wxJzogMSwgJ2NvbDInOiA1LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczMnOiB7J2NvbDEnOiAxMSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMic6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDMnOiAyLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2w0JzogMTAwMDAwMH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczQnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfX0sXG5cbiAgICAgICAgICAgICd0Mic6IHsnczEnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDEsICdjb2wyJzogNSwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogMTEsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDInOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wzJzogMixcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH19LFxuXG4gICAgICAgICAgICAndDMnOiB7J3MxJzogeydjb2wxJzogMSwgJ2NvbDInOiAyLCAnY29sMyc6IDMsICdjb2w0JzogNH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiA1LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wyJzogMTAwMDAwMCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMyc6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDEwMDAwMDAsICdjb2wyJzogMTAsICdjb2wzJzogMTEsICdjb2w0JzogMTJ9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogMTMsICdjb2wyJzogMTQsICdjb2wzJzogMTUsICdjb2w0JzogMTZ9fX0sXG5cbiAnbGV2ZWwyJzogeyd0MSc6IHsnczEnOiB7J2NvbDEnOiA1LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wyJzogNCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMyc6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDEsICdjb2wyJzogNSwgJ2NvbDMnOiA0LCAnY29sNCc6IDV9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogMTEsICdjb2wyJzogMTAwMDAwMCwgJ2NvbDMnOiAyLCAnY29sNCc6IDEzfSxcblxuICAgICAgICAgICAgICAgICAgICdzNCc6IHsnY29sMSc6IDUsICdjb2wyJzogNCwgJ2NvbDMnOiA0LCAnY29sNCc6IDIwfX0sXG5cbiAgICAgICAgICAgICd0Mic6IHsnczEnOiB7J2NvbDEnOiA1LCAnY29sMic6IDQsICdjb2wzJzogNCwgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMic6IHsnY29sMSc6IDEsICdjb2wyJzogNSwgJ2NvbDMnOiA0LCAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3MzJzogeydjb2wxJzogMTEsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDInOiAxMDAwMDAwLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wzJzogMixcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sNCc6IDEwMDAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogNSwgJ2NvbDInOiA0LCAnY29sMyc6IDQsICdjb2w0JzogMTAwMDAwMH19LFxuXG4gICAgICAgICAgICAndDMnOiB7J3MxJzogeydjb2wxJzogMSwgJ2NvbDInOiAyLCAnY29sMyc6IDMsICdjb2w0JzogNH0sXG5cbiAgICAgICAgICAgICAgICAgICAnczInOiB7J2NvbDEnOiA1LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdjb2wyJzogMTAwMDAwMCxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAnY29sMyc6IDEwMDAwMDAsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbDQnOiAxMDAwMDAwfSxcblxuICAgICAgICAgICAgICAgICAgICdzMyc6IHsnY29sMSc6IDEwMDAwMDAsICdjb2wyJzogMTAsICdjb2wzJzogMTEsICdjb2w0JzogMTJ9LFxuXG4gICAgICAgICAgICAgICAgICAgJ3M0Jzogeydjb2wxJzogMTMsICdjb2wyJzogMTQsICdjb2wzJzogMTUsICdjb2w0JzogMTZ9fX19XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzcyMTQ2MDk0L3Byb2JsZW1zLW1hdGNoaW5nLXZhbHVlcy1mcm9tLW5lc3RlZC1kaWN0aW9uYXJ5XG5cbmRhdGE9XG5cbnsnX2xpbmtzJzogeyduZXh0JzogTm9uZSwgJ3ByZXYnOiBOb25lfSxcblxuICdsaW1pdCc6IDI1MCxcblxuICdvZmZzZXQnOiAwLFxuXG4gJ3J1bnMnOiBbeydhc3NpZ25lZHRvX2lkJzogTm9uZSxcblxuICAgICAgICAgICAnYmxvY2tlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2NvbXBsZXRlZF9vbic6IE5vbmUsXG5cbiAgICAgICAgICAgJ2NvbmZpZyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ2NvbmZpZ19pZHMnOiBbXSxcblxuICAgICAgICAgICAnY3JlYXRlZF9ieSc6IDEsXG5cbiAgICAgICAgICAgJ2NyZWF0ZWRfb24nOiAxNjUxNzkwNjkzLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzMV9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMyX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czNfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM1X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czZfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzN19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogTm9uZSxcblxuICAgICAgICAgICAnZmFpbGVkX2NvdW50JzogMSxcblxuICAgICAgICAgICAnaWQnOiAxMyxcblxuICAgICAgICAgICAnaW5jbHVkZV9hbGwnOiBGYWxzZSxcblxuICAgICAgICAgICAnaXNfY29tcGxldGVkJzogRmFsc2UsXG5cbiAgICAgICAgICAgJ21pbGVzdG9uZV9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ25hbWUnOiAnMjAyMi0wNS0wNS10ZXN0cnVuJyxcblxuICAgICAgICAgICAncGFzc2VkX2NvdW50JzogMixcblxuICAgICAgICAgICAncGxhbl9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3Byb2plY3RfaWQnOiAxLFxuXG4gICAgICAgICAgICdyZWZzJzogTm9uZSxcblxuICAgICAgICAgICAncmV0ZXN0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnc3VpdGVfaWQnOiAxLFxuXG4gICAgICAgICAgICd1bnRlc3RlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3VwZGF0ZWRfb24nOiAxNjUxNzkwNjkzLFxuXG4gICAgICAgICAgICd1cmwnOiAnaHR0cHM6Ly94eHh4eHh4eHh4LnRlc3RyYWlsLmlvL2luZGV4LnBocD8vcnVucy92aWV3LzEzJ30sXG5cbiAgICAgICAgICB7J2Fzc2lnbmVkdG9faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdibG9ja2VkX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY29tcGxldGVkX29uJzogMTY1MDk4OTk3MixcblxuICAgICAgICAgICAnY29uZmlnJzogTm9uZSxcblxuICAgICAgICAgICAnY29uZmlnX2lkcyc6IFtdLFxuXG4gICAgICAgICAgICdjcmVhdGVkX2J5JzogNSxcblxuICAgICAgICAgICAnY3JlYXRlZF9vbic6IDE2NTA5NjYzMjksXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMxX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czJfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzM19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czVfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNl9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM3X2NvdW50JzogMCxcblxuICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBOb25lLFxuXG4gICAgICAgICAgICdmYWlsZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdpZCc6IDksXG5cbiAgICAgICAgICAgJ2luY2x1ZGVfYWxsJzogRmFsc2UsXG5cbiAgICAgICAgICAgJ2lzX2NvbXBsZXRlZCc6IFRydWUsXG5cbiAgICAgICAgICAgJ21pbGVzdG9uZV9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ25hbWUnOiAnVGhpcyBpcyBhIG5ldyB0ZXN0IHJ1bicsXG5cbiAgICAgICAgICAgJ3Bhc3NlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3BsYW5faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdwcm9qZWN0X2lkJzogMSxcblxuICAgICAgICAgICAncmVmcyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3JldGVzdF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3N1aXRlX2lkJzogMSxcblxuICAgICAgICAgICAndW50ZXN0ZWRfY291bnQnOiAzLFxuXG4gICAgICAgICAgICd1cGRhdGVkX29uJzogMTY1MDk2NjMyOSxcblxuICAgICAgICAgICAndXJsJzogJ2h0dHBzOi8veHh4eHh4eHh4eC50ZXN0cmFpbC5pby9pbmRleC5waHA/L3J1bnMvdmlldy85J31dLFxuXG4gJ3NpemUnOiAyfVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuX2xpbmtzIG5leHQgTmFOICAgICAgICAgICAgICAgICAgICAgICAgKF9saW5rcywgbmV4dCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgIHByZXYgTmFOICAgICAgICAgICAgICAgICAgICAgICAgKF9saW5rcywgcHJldikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxubGltaXQgIE5hTiAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpbWl0LCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyNTBcblxub2Zmc2V0IE5hTiAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob2Zmc2V0LCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDBcblxucnVucyAgIDAgICAgYXNzaWduZWR0b19pZCAgICAocnVucywgMCwgYXNzaWduZWR0b19pZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5cblxuICAgICAgIDEgICAgc3VpdGVfaWQgICAgICAgICAgICAgIChydW5zLCAxLCBzdWl0ZV9pZCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDFcblxuICAgICAgICAgICAgdW50ZXN0ZWRfY291bnQgIChydW5zLCAxLCB1bnRlc3RlZF9jb3VudCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDNcblxuICAgICAgICAgICAgdXBkYXRlZF9vbiAgICAgICAgICAocnVucywgMSwgdXBkYXRlZF9vbikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE2NTA5NjYzMjlcblxuICAgICAgICAgICAgdXJsICAgICAgICAgICAgICAgICAgICAgICAgKHJ1bnMsIDEsIHVybCkgIGh0dHBzOi8veHh4eHh4eHh4eC50ZXN0cmFpbC5pby9pbmRleC5waHA/L3J1bnMuLi5cblxuc2l6ZSAgIE5hTiAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzaXplLCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDJcblxuWzYzIHJvd3MgeCAyIGNvbHVtbnNdXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShib29sKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpID09RmFsc2UgKSwgJ2FhX3ZhbHVlJ10gPSBUcnVlXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2FhX3ZhbHVlJykuc3RyLmNvbnRhaW5zKHInaHR0cHM/Oi8vLionLG5hPUZhbHNlKSApLCAnYWFfdmFsdWUnXSA9ICdXV1cuUFlUSE9OLk9SRydcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgIGFhX3ZhbHVlXG5cbl9saW5rcyBuZXh0IE5hTiAgICAgICAgICAgICAgICAgICAgICAgIChfbGlua3MsIG5leHQpICAgICAgICAgICAgTm9uZVxuXG4gICAgICAgcHJldiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAoX2xpbmtzLCBwcmV2KSAgICAgICAgICAgIE5vbmVcblxubGltaXQgIE5hTiAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGxpbWl0LCkgICAgICAgICAgICAgMjUwXG5cbm9mZnNldCBOYU4gIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9mZnNldCwpICAgICAgICAgICAgICAgMFxuXG5ydW5zICAgMCAgICBhc3NpZ25lZHRvX2lkICAgIChydW5zLCAwLCBhc3NpZ25lZHRvX2lkKSAgICAgICAgICAgIE5vbmVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAgICAgICAgLi4uXG5cbiAgICAgICAxICAgIHN1aXRlX2lkICAgICAgICAgICAgICAocnVucywgMSwgc3VpdGVfaWQpICAgICAgICAgICAgICAgMVxuXG4gICAgICAgICAgICB1bnRlc3RlZF9jb3VudCAgKHJ1bnMsIDEsIHVudGVzdGVkX2NvdW50KSAgICAgICAgICAgICAgIDNcblxuICAgICAgICAgICAgdXBkYXRlZF9vbiAgICAgICAgICAocnVucywgMSwgdXBkYXRlZF9vbikgICAgICAxNjUwOTY2MzI5XG5cbiAgICAgICAgICAgIHVybCAgICAgICAgICAgICAgICAgICAgICAgIChydW5zLCAxLCB1cmwpICBXV1cuUFlUSE9OLk9SR1xuXG5zaXplICAgTmFOICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHNpemUsKSAgICAgICAgICAgICAgIDJcblxuWzYzIHJvd3MgeCAyIGNvbHVtbnNdXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cbltydW5zXVswXVtpbmNsdWRlX2FsbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cbltydW5zXVswXVtpbmNsdWRlX2FsbF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBUcnVlXG5cbltydW5zXVswXVtpc19jb21wbGV0ZWRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cbltydW5zXVswXVtpc19jb21wbGV0ZWRdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBUcnVlXG5cbltydW5zXVswXVt1cmxdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IGh0dHBzOi8veHh4eHh4eHh4eC50ZXN0cmFpbC5pby9pbmRleC5waHA/L3J1bnMvdmlldy8xM1xuXG5bcnVuc11bMF1bdXJsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogV1dXLlBZVEhPTi5PUkdcblxuW3J1bnNdWzFdW2luY2x1ZGVfYWxsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuW3J1bnNdWzFdW2luY2x1ZGVfYWxsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFRydWVcblxuW3J1bnNdWzFdW3VybF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogaHR0cHM6Ly94eHh4eHh4eHh4LnRlc3RyYWlsLmlvL2luZGV4LnBocD8vcnVucy92aWV3LzlcblxuW3J1bnNdWzFdW3VybF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IFdXVy5QWVRIT04uT1JHXG5cbnsnX2xpbmtzJzogeyduZXh0JzogTm9uZSwgJ3ByZXYnOiBOb25lfSxcblxuICdsaW1pdCc6IDI1MCxcblxuICdvZmZzZXQnOiAwLFxuXG4gJ3J1bnMnOiBbeydhc3NpZ25lZHRvX2lkJzogTm9uZSxcblxuICAgICAgICAgICAnYmxvY2tlZF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2NvbXBsZXRlZF9vbic6IE5vbmUsXG5cbiAgICAgICAgICAgJ2NvbmZpZyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ2NvbmZpZ19pZHMnOiBbXSxcblxuICAgICAgICAgICAnY3JlYXRlZF9ieSc6IDEsXG5cbiAgICAgICAgICAgJ2NyZWF0ZWRfb24nOiAxNjUxNzkwNjkzLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzMV9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMyX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czNfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM1X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czZfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzN19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogTm9uZSxcblxuICAgICAgICAgICAnZmFpbGVkX2NvdW50JzogMSxcblxuICAgICAgICAgICAnaWQnOiAxMyxcblxuICAgICAgICAgICAnaW5jbHVkZV9hbGwnOiBUcnVlLFxuXG4gICAgICAgICAgICdpc19jb21wbGV0ZWQnOiBUcnVlLFxuXG4gICAgICAgICAgICdtaWxlc3RvbmVfaWQnOiBOb25lLFxuXG4gICAgICAgICAgICduYW1lJzogJzIwMjItMDUtMDUtdGVzdHJ1bicsXG5cbiAgICAgICAgICAgJ3Bhc3NlZF9jb3VudCc6IDIsXG5cbiAgICAgICAgICAgJ3BsYW5faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdwcm9qZWN0X2lkJzogMSxcblxuICAgICAgICAgICAncmVmcyc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3JldGVzdF9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ3N1aXRlX2lkJzogMSxcblxuICAgICAgICAgICAndW50ZXN0ZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICd1cGRhdGVkX29uJzogMTY1MTc5MDY5MyxcblxuICAgICAgICAgICAndXJsJzogJ1dXVy5QWVRIT04uT1JHJ30sXG5cbiAgICAgICAgICB7J2Fzc2lnbmVkdG9faWQnOiBOb25lLFxuXG4gICAgICAgICAgICdibG9ja2VkX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY29tcGxldGVkX29uJzogMTY1MDk4OTk3MixcblxuICAgICAgICAgICAnY29uZmlnJzogTm9uZSxcblxuICAgICAgICAgICAnY29uZmlnX2lkcyc6IFtdLFxuXG4gICAgICAgICAgICdjcmVhdGVkX2J5JzogNSxcblxuICAgICAgICAgICAnY3JlYXRlZF9vbic6IDE2NTA5NjYzMjksXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXMxX2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czJfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzM19jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnY3VzdG9tX3N0YXR1czVfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdjdXN0b21fc3RhdHVzNl9jb3VudCc6IDAsXG5cbiAgICAgICAgICAgJ2N1c3RvbV9zdGF0dXM3X2NvdW50JzogMCxcblxuICAgICAgICAgICAnZGVzY3JpcHRpb24nOiBOb25lLFxuXG4gICAgICAgICAgICdmYWlsZWRfY291bnQnOiAwLFxuXG4gICAgICAgICAgICdpZCc6IDksXG5cbiAgICAgICAgICAgJ2luY2x1ZGVfYWxsJzogVHJ1ZSxcblxuICAgICAgICAgICAnaXNfY29tcGxldGVkJzogVHJ1ZSxcblxuICAgICAgICAgICAnbWlsZXN0b25lX2lkJzogTm9uZSxcblxuICAgICAgICAgICAnbmFtZSc6ICdUaGlzIGlzIGEgbmV3IHRlc3QgcnVuJyxcblxuICAgICAgICAgICAncGFzc2VkX2NvdW50JzogMCxcblxuICAgICAgICAgICAncGxhbl9pZCc6IE5vbmUsXG5cbiAgICAgICAgICAgJ3Byb2plY3RfaWQnOiAxLFxuXG4gICAgICAgICAgICdyZWZzJzogTm9uZSxcblxuICAgICAgICAgICAncmV0ZXN0X2NvdW50JzogMCxcblxuICAgICAgICAgICAnc3VpdGVfaWQnOiAxLFxuXG4gICAgICAgICAgICd1bnRlc3RlZF9jb3VudCc6IDMsXG5cbiAgICAgICAgICAgJ3VwZGF0ZWRfb24nOiAxNjUwOTY2MzI5LFxuXG4gICAgICAgICAgICd1cmwnOiAnV1dXLlBZVEhPTi5PUkcnfV0sXG5cbiAnc2l6ZSc6IDJ9XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczNzA4NzA2L2hvdy10by1nZXQtdmFsdWVzLWZyb20tbGlzdC1vZi1uZXN0ZWQtZGljdGlvbmFyaWVzLzczODM5NDMwIzczODM5NDMwXG5cbmRhdGE9XG5cbnsncmVzdWx0cyc6IFt7J2VuZF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTEnLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWycxJ119LFxuXG4gICAgICAgICAgICAgeydlbmRfdGltZSc6ICcyMDIxLTAxLTIxJyxcblxuICAgICAgICAgICAgICAna2V5JzogJ3EyJyxcblxuICAgICAgICAgICAgICAncmVzdWx0X3R5cGUnOiAnbXVsdGlwbGVDaG9pY2UnLFxuXG4gICAgICAgICAgICAgICdzdGFydF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICd2YWx1ZSc6IFsnRmFsc2UnXX0sXG5cbiAgICAgICAgICAgICB7J2VuZF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTMnLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAnMjAyMS0wMS0yMScsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWyczJ119LFxuXG4gICAgICAgICAgICAgeydlbmRfdGltZSc6ICcyMDIxLTAxLTIxJyxcblxuICAgICAgICAgICAgICAna2V5JzogJ3E0JyxcblxuICAgICAgICAgICAgICAncmVzdWx0X3R5cGUnOiAnbXVsdGlwbGVDaG9pY2UnLFxuXG4gICAgICAgICAgICAgICdzdGFydF90aW1lJzogJzIwMjEtMDEtMjEnLFxuXG4gICAgICAgICAgICAgICd2YWx1ZSc6IFsnMyddfV19XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICBhYV92YWx1ZVxuXG5yZXN1bHRzIDAgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMCwgZW5kX3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAwLCBrZXkpICAgICAgICAgICAgICBxMVxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMCwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDAsIHN0YXJ0X3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMCwgdmFsdWUsIDApICAgICAgICAgICAgICAgMVxuXG4gICAgICAgIDEgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMSwgZW5kX3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAxLCBrZXkpICAgICAgICAgICAgICBxMlxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMSwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDEsIHN0YXJ0X3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMSwgdmFsdWUsIDApICAgICAgICAgICBGYWxzZVxuXG4gICAgICAgIDIgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMiwgZW5kX3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAyLCBrZXkpICAgICAgICAgICAgICBxM1xuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMiwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDIsIHN0YXJ0X3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMiwgdmFsdWUsIDApICAgICAgICAgICAgICAgM1xuXG4gICAgICAgIDMgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMywgZW5kX3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAzLCBrZXkpICAgICAgICAgICAgICBxNFxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMywgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDMsIHN0YXJ0X3RpbWUpICAgICAgMjAyMS0wMS0yMVxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMywgdmFsdWUsIDApICAgICAgICAgICAgICAgM1xuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpLnN0ci5jb250YWlucyhyJ14yMDIxLionLG5hPUZhbHNlKSApLCAnYWFfdmFsdWUnXSA9IDEwMDAwMDAwMDAwIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICAgICAgICBhYV92YWx1ZVxuXG5yZXN1bHRzIDAgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMCwgZW5kX3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAwLCBrZXkpICAgICAgICAgICAgICBxMVxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMCwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDAsIHN0YXJ0X3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMCwgdmFsdWUsIDApICAgICAgICAgICAgICAgMVxuXG4gICAgICAgIDEgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMSwgZW5kX3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAxLCBrZXkpICAgICAgICAgICAgICBxMlxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMSwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDEsIHN0YXJ0X3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMSwgdmFsdWUsIDApICAgICAgICAgICBGYWxzZVxuXG4gICAgICAgIDIgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMiwgZW5kX3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAyLCBrZXkpICAgICAgICAgICAgICBxM1xuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMiwgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDIsIHN0YXJ0X3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMiwgdmFsdWUsIDApICAgICAgICAgICAgICAgM1xuXG4gICAgICAgIDMgZW5kX3RpbWUgICAgTmFOICAgICAocmVzdWx0cywgMywgZW5kX3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAga2V5ICAgICAgICAgTmFOICAgICAgICAgIChyZXN1bHRzLCAzLCBrZXkpICAgICAgICAgICAgICBxNFxuXG4gICAgICAgICAgcmVzdWx0X3R5cGUgTmFOICAocmVzdWx0cywgMywgcmVzdWx0X3R5cGUpICBtdWx0aXBsZUNob2ljZVxuXG4gICAgICAgICAgc3RhcnRfdGltZSAgTmFOICAgKHJlc3VsdHMsIDMsIHN0YXJ0X3RpbWUpICAgICAxMDAwMDAwMDAwMFxuXG4gICAgICAgICAgdmFsdWUgICAgICAgMCAgICAgICAocmVzdWx0cywgMywgdmFsdWUsIDApICAgICAgICAgICAgICAgM1xuXG5tb2RfaXRlciA9IGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoZGF0YSwgdmVyYm9zZT1UcnVlKVxuXG5bcmVzdWx0c11bMF1bZW5kX3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVswXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bMF1bc3RhcnRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVswXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bMV1bZW5kX3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVsxXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bMV1bc3RhcnRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVsxXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bMl1bZW5kX3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVsyXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bMl1bc3RhcnRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVsyXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bM11bZW5kX3RpbWVdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVszXVtlbmRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG5bcmVzdWx0c11bM11bc3RhcnRfdGltZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAyMDIxLTAxLTIxXG5cbltyZXN1bHRzXVszXVtzdGFydF90aW1lXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAxMDAwMDAwMDAwMFxuXG57J3Jlc3VsdHMnOiBbeydlbmRfdGltZSc6IDEwMDAwMDAwMDAwLFxuXG4gICAgICAgICAgICAgICdrZXknOiAncTEnLFxuXG4gICAgICAgICAgICAgICdyZXN1bHRfdHlwZSc6ICdtdWx0aXBsZUNob2ljZScsXG5cbiAgICAgICAgICAgICAgJ3N0YXJ0X3RpbWUnOiAxMDAwMDAwMDAwMCxcblxuICAgICAgICAgICAgICAndmFsdWUnOiBbJzEnXX0sXG5cbiAgICAgICAgICAgICB7J2VuZF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ2tleSc6ICdxMicsXG5cbiAgICAgICAgICAgICAgJ3Jlc3VsdF90eXBlJzogJ211bHRpcGxlQ2hvaWNlJyxcblxuICAgICAgICAgICAgICAnc3RhcnRfdGltZSc6IDEwMDAwMDAwMDAwLFxuXG4gICAgICAgICAgICAgICd2YWx1ZSc6IFsnRmFsc2UnXX0sXG5cbiAgICAgICAgICAgICB7J2VuZF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ2tleSc6ICdxMycsXG5cbiAgICAgICAgICAgICAgJ3Jlc3VsdF90eXBlJzogJ211bHRpcGxlQ2hvaWNlJyxcblxuICAgICAgICAgICAgICAnc3RhcnRfdGltZSc6IDEwMDAwMDAwMDAwLFxuXG4gICAgICAgICAgICAgICd2YWx1ZSc6IFsnMyddfSxcblxuICAgICAgICAgICAgIHsnZW5kX3RpbWUnOiAxMDAwMDAwMDAwMCxcblxuICAgICAgICAgICAgICAna2V5JzogJ3E0JyxcblxuICAgICAgICAgICAgICAncmVzdWx0X3R5cGUnOiAnbXVsdGlwbGVDaG9pY2UnLFxuXG4gICAgICAgICAgICAgICdzdGFydF90aW1lJzogMTAwMDAwMDAwMDAsXG5cbiAgICAgICAgICAgICAgJ3ZhbHVlJzogWyczJ119XX1cblxuYGBgXG5cblxuXG5gYGBweXRob25cblxuI05lc3RlZCBpdGVyYWJsZSBmcm9tOiBcblxuaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNjY0NjE5MDIvZmxhdHRlbmluZy1uZXN0ZWQtZGljdGlvbmFyeS1pbnRvLWRhdGFmcmFtZS1weXRob25cblxuZGF0YT1cblxuezE6IHsyOiB7J0lEcyc6IHsnQm9va0lEJzogWyc1NDM1MzMyNTQzNTMnLCAnNDMyNDIzMjM0MiddLFxuXG4gICAgICAgICAgICAgICAgICdTYWxlc0lEJzogWyc1NDMyNjc3NjUzNDUnLCAnNDM1MzU0MyddLFxuXG4gICAgICAgICAgICAgICAgICdTdG9yZUlEJzogWycxMTExMTEnLCAnMTEyMTExMSddfSxcblxuICAgICAgICAgJ05hbWUnOiAnYm9yaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzJ30sXG5cbiAgICAgJ0lEcyc6IHsnQm9va0lEJzogWyc1NDM1MzMyNTQzNTMnXSxcblxuICAgICAgICAgICAgICdTYWxlc0lEJzogWyc1NDMyNjc3NjUzNDUnXSxcblxuICAgICAgICAgICAgICdTdG9yZUlEJzogWycxMjM0NDU0NTI1NDMnXX0sXG5cbiAgICAgJ05hbWUnOiAnVGhyaWxsaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzJ319XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV92YWx1ZVxuXG4xIElEcyAgQm9va0lEICAwICAgICAgIE5hTiAgICAgICgxLCBJRHMsIEJvb2tJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgIDU0MzUzMzI1NDM1M1xuXG4gICAgICAgU2FsZXNJRCAwICAgICAgIE5hTiAgICAgKDEsIElEcywgU2FsZXNJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgIDU0MzI2Nzc2NTM0NVxuXG4gICAgICAgU3RvcmVJRCAwICAgICAgIE5hTiAgICAgKDEsIElEcywgU3RvcmVJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgIDEyMzQ0NTQ1MjU0M1xuXG4gIE5hbWUgTmFOICAgICBOYU4gICAgIE5hTiAgICAgICAgICAgICAgICAoMSwgTmFtZSkgIFRocmlsbGluZyBUYWxlcyBvZiBEcmFnb24gU2xheWVyc1xuXG4gIDIgICAgSURzICAgICBCb29rSUQgIDAgICAgICgxLCAyLCBJRHMsIEJvb2tJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgIDU0MzUzMzI1NDM1M1xuXG4gICAgICAgICAgICAgICAgICAgICAgIDEgICAgICgxLCAyLCBJRHMsIEJvb2tJRCwgMSkgICAgICAgICAgICAgICAgICAgICAgICAgNDMyNDIzMjM0MlxuXG4gICAgICAgICAgICAgICBTYWxlc0lEIDAgICAgKDEsIDIsIElEcywgU2FsZXNJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgIDU0MzI2Nzc2NTM0NVxuXG4gICAgICAgICAgICAgICAgICAgICAgIDEgICAgKDEsIDIsIElEcywgU2FsZXNJRCwgMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDM1MzU0M1xuXG4gICAgICAgICAgICAgICBTdG9yZUlEIDAgICAgKDEsIDIsIElEcywgU3RvcmVJRCwgMCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExMVxuXG4gICAgICAgICAgICAgICAgICAgICAgIDEgICAgKDEsIDIsIElEcywgU3RvcmVJRCwgMSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTEyMTExMVxuXG4gICAgICAgTmFtZSAgICBOYU4gICAgIE5hTiAgICAgICAgICAgICAoMSwgMiwgTmFtZSkgICAgIGJvcmluZyBUYWxlcyBvZiBEcmFnb24gU2xheWVyc1xuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpLnN0ci5jb250YWlucyhyJ15cXGQrJCcsbmE9RmFsc2UpICksICdhYV92YWx1ZSddID0gZGYubG9jWyhkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nYWFfdmFsdWUnKS5zdHIuY29udGFpbnMocideXFxkKyQnLG5hPUZhbHNlKSApLCAnYWFfdmFsdWUnXS5hc3R5cGUoZmxvYXQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbjEgSURzICBCb29rSUQgIDAgICAgICAgTmFOICAgICAgKDEsIElEcywgQm9va0lELCAwKSAgICAgICAgICAgICAgICAgICAgIDU0MzUzMzI1NDM1My4wXG5cbiAgICAgICBTYWxlc0lEIDAgICAgICAgTmFOICAgICAoMSwgSURzLCBTYWxlc0lELCAwKSAgICAgICAgICAgICAgICAgICAgIDU0MzI2Nzc2NTM0NS4wXG5cbiAgICAgICBTdG9yZUlEIDAgICAgICAgTmFOICAgICAoMSwgSURzLCBTdG9yZUlELCAwKSAgICAgICAgICAgICAgICAgICAgIDEyMzQ0NTQ1MjU0My4wXG5cbiAgTmFtZSBOYU4gICAgIE5hTiAgICAgTmFOICAgICAgICAgICAgICAgICgxLCBOYW1lKSAgVGhyaWxsaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzXG5cbiAgMiAgICBJRHMgICAgIEJvb2tJRCAgMCAgICAgKDEsIDIsIElEcywgQm9va0lELCAwKSAgICAgICAgICAgICAgICAgICAgIDU0MzUzMzI1NDM1My4wXG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAgKDEsIDIsIElEcywgQm9va0lELCAxKSAgICAgICAgICAgICAgICAgICAgICAgNDMyNDIzMjM0Mi4wXG5cbiAgICAgICAgICAgICAgIFNhbGVzSUQgMCAgICAoMSwgMiwgSURzLCBTYWxlc0lELCAwKSAgICAgICAgICAgICAgICAgICAgIDU0MzI2Nzc2NTM0NS4wXG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAoMSwgMiwgSURzLCBTYWxlc0lELCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgNDM1MzU0My4wXG5cbiAgICAgICAgICAgICAgIFN0b3JlSUQgMCAgICAoMSwgMiwgSURzLCBTdG9yZUlELCAwKSAgICAgICAgICAgICAgICAgICAgICAgICAgIDExMTExMS4wXG5cbiAgICAgICAgICAgICAgICAgICAgICAgMSAgICAoMSwgMiwgSURzLCBTdG9yZUlELCAxKSAgICAgICAgICAgICAgICAgICAgICAgICAgMTEyMTExMS4wXG5cbiAgICAgICBOYW1lICAgIE5hTiAgICAgTmFOICAgICAgICAgICAgICgxLCAyLCBOYW1lKSAgICAgYm9yaW5nIFRhbGVzIG9mIERyYWdvbiBTbGF5ZXJzXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cblsxXVsyXVtJRHNdW0Jvb2tJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDU0MzUzMzI1NDM1M1xuXG5bMV1bMl1bSURzXVtCb29rSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNTQzNTMzMjU0MzUzLjBcblxuWzFdWzJdW0lEc11bQm9va0lEXVsxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNDMyNDIzMjM0MlxuXG5bMV1bMl1bSURzXVtCb29rSURdWzFdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNDMyNDIzMjM0Mi4wXG5cblsxXVsyXVtJRHNdW1NhbGVzSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDU0MzI2Nzc2NTM0NVxuXG5bMV1bMl1bSURzXVtTYWxlc0lEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNTQzMjY3NzY1MzQ1LjBcblxuWzFdWzJdW0lEc11bU2FsZXNJRF1bMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNDM1MzU0M1xuXG5bMV1bMl1bSURzXVtTYWxlc0lEXVsxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNDM1MzU0My4wXG5cblsxXVsyXVtJRHNdW1N0b3JlSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDExMTExMVxuXG5bMV1bMl1bSURzXVtTdG9yZUlEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTExMTExLjBcblxuWzFdWzJdW0lEc11bU3RvcmVJRF1bMV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTEyMTExMVxuXG5bMV1bMl1bSURzXVtTdG9yZUlEXVsxXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTEyMTExMS4wXG5cblsxXVtJRHNdW0Jvb2tJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDU0MzUzMzI1NDM1M1xuXG5bMV1bSURzXVtCb29rSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogNTQzNTMzMjU0MzUzLjBcblxuWzFdW0lEc11bU2FsZXNJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogNTQzMjY3NzY1MzQ1XG5cblsxXVtJRHNdW1NhbGVzSURdWzBdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiA1NDMyNjc3NjUzNDUuMFxuXG5bMV1bSURzXVtTdG9yZUlEXVswXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAxMjM0NDU0NTI1NDNcblxuWzFdW0lEc11bU3RvcmVJRF1bMF0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEyMzQ0NTQ1MjU0My4wXG5cbnsxOiB7MjogeydJRHMnOiB7J0Jvb2tJRCc6IFs1NDM1MzMyNTQzNTMuMCwgNDMyNDIzMjM0Mi4wXSxcblxuICAgICAgICAgICAgICAgICAnU2FsZXNJRCc6IFs1NDMyNjc3NjUzNDUuMCwgNDM1MzU0My4wXSxcblxuICAgICAgICAgICAgICAgICAnU3RvcmVJRCc6IFsxMTExMTEuMCwgMTEyMTExMS4wXX0sXG5cbiAgICAgICAgICdOYW1lJzogJ2JvcmluZyBUYWxlcyBvZiBEcmFnb24gU2xheWVycyd9LFxuXG4gICAgICdJRHMnOiB7J0Jvb2tJRCc6IFs1NDM1MzMyNTQzNTMuMF0sXG5cbiAgICAgICAgICAgICAnU2FsZXNJRCc6IFs1NDMyNjc3NjUzNDUuMF0sXG5cbiAgICAgICAgICAgICAnU3RvcmVJRCc6IFsxMjM0NDU0NTI1NDMuMF19LFxuXG4gICAgICdOYW1lJzogJ1RocmlsbGluZyBUYWxlcyBvZiBEcmFnb24gU2xheWVycyd9fVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy83MjAxNzc3MS9rZXktZXJyb3Itd2hlbi1hY2Nlc3NpbmctYS1uZXN0ZWQtZGljdGlvbmFyeVxuXG5kYXRhPVxuXG5beydibG9ja3MnOiBbeydibG9ja19pZCc6ICdCSk5UbicsXG5cbiAgICAgICAgICAgICAgJ3RleHQnOiB7J3RleHQnOiAnWW91IGhhdmUgYSBuZXcgbWVzc2FnZS4nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogRmFsc2V9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnV1BuL2wnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypIZWFyZCBCeSpcXG5GcmllbmQnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogRmFsc2V9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnNXlwJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqV2hpY2ggRGlyZWN0aW9uPyAqXFxuTm9ydGgnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogRmFsc2V9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnZktFcEYnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEZXN0aW5hdGlvbipcXG5OZXcgWW9yaycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiBGYWxzZX0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICdxakFIJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqTmV3IEN1c3RvbWVyOipcXFxcWWVzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdtcmtkd24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd2ZXJiYXRpbSc6IEZhbHNlfSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdzZWN0aW9uJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ3l0NCcsXG5cbiAgICAgICAgICAgICAgJ2VsZW1lbnRzJzogW3snYWN0aW9uX2lkJzogJytiYycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGV4dCc6IHsnYmFyJzogJ1ZpZXcgcmVzdWx0cycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1vamknOiBUcnVlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAncGxhaW5fdGV4dCd9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnYnV0dG9uJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1cmwnOiAnd3d3LmV4YW1wbGUuY29tL3Jlc3VsdHMnfV0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnYWN0aW9ucyd9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICdJQnInLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJyAnLCAndHlwZSc6ICdtcmtkd24nLCAndmVyYmF0aW0nOiBGYWxzZX0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9XSxcblxuICAnYm90X2lkJzogJ0JQRDRLM1NKVycsXG5cbiAgJ3N1YnR5cGUnOiAnYm90X21lc3NhZ2UnLFxuXG4gICd0ZXh0JzogXCJUaGlzIGNvbnRlbnQgY2FuJ3QgYmUgZGlzcGxheWVkLlwiLFxuXG4gICd0aW1lc3RhbXAnOiAnMTY1MDkwNTYwNi43NTU5NjknLFxuXG4gICd0eXBlJzogJ21lc3NhZ2UnLFxuXG4gICd1c2VybmFtZSc6ICdhZG1pbid9LFxuXG4geydibG9ja3MnOiBbeydibG9ja19pZCc6ICdTbWQnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJ1lvdSBoYXZlIGEgbmV3IG1lc3NhZ2UuJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdtcmtkd24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd2ZXJiYXRpbSc6IEZhbHNlfSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdzZWN0aW9uJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJzZZYUx0JyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqSGVhcmQgQnkqXFxuT25saW5lIFNlYXJjaCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiBGYWxzZX0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICd3M28nLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEaXJlY3Rpb246ICpcXG5Ob3J0aCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiBGYWxzZX0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICdQVFEnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEZXN0aW5hdGlvbj8gKlxcbk1pYW1pJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdtcmtkd24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd2ZXJiYXRpbSc6IEZhbHNlfSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdzZWN0aW9uJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ0pDZlNQJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqTmV3IEN1c3RvbWVyPyAqXFxuTm8nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogRmFsc2V9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAneXQ0JyxcblxuICAgICAgICAgICAgICAnZWxlbWVudHMnOiBbeydhY3Rpb25faWQnOiAnK2JjJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JzogeydiYXInOiAnVmlldyByZXN1bHRzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbW9qaSc6IFRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdwbGFpbl90ZXh0J30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdidXR0b24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6ICd3d3cuZXhhbXBsZS5jb20vcmVzdWx0cyd9XSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdhY3Rpb25zJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ1JKT0EnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJyAnLCAndHlwZSc6ICdtcmtkd24nLCAndmVyYmF0aW0nOiBGYWxzZX0sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9XSxcblxuICAnYm90X2lkJzogJ0JQRDRLM1NKVycsXG5cbiAgJ3N1YnR5cGUnOiAnYm90X21lc3NhZ2UnLFxuXG4gICd0ZXh0JzogXCJUaGlzIGNvbnRlbnQgY2FuJ3QgYmUgZGlzcGxheWVkLlwiLFxuXG4gICd0aW1lc3RhbXAnOiAnMTY1MDg5OTQyOC4wNzc3MDknLFxuXG4gICd0eXBlJzogJ21lc3NhZ2UnLFxuXG4gICd1c2VybmFtZSc6ICdhZG1pbid9XVxuXG5kZiA9IHBkLlFfQW55TmVzdGVkSXRlcmFibGVfMmRmKGRhdGEsdW5zdGFjaz1GYWxzZSlcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuMCBibG9ja3MgICAgMC4wIGJsb2NrX2lkIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICgwLCBibG9ja3MsIDAsIGJsb2NrX2lkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQkpOVG5cblxuICAgICAgICAgICAgICAgIHRleHQgICAgIHRleHQgICAgIE5hTiBOYU4gICAgICAoMCwgYmxvY2tzLCAwLCB0ZXh0LCB0ZXh0KSAgICAgICAgICAgWW91IGhhdmUgYSBuZXcgbWVzc2FnZS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGUgICAgIE5hTiBOYU4gICAgICAoMCwgYmxvY2tzLCAwLCB0ZXh0LCB0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICBtcmtkd25cblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJhdGltIE5hTiBOYU4gICgwLCBibG9ja3MsIDAsIHRleHQsIHZlcmJhdGltKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmFsc2VcblxuICAgICAgICAgICAgICAgIHR5cGUgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAoMCwgYmxvY2tzLCAwLCB0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5cblxuMSBzdWJ0eXBlICAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICgxLCBzdWJ0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgYm90X21lc3NhZ2VcblxuICB0ZXh0ICAgICAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICgxLCB0ZXh0KSAgVGhpcyBjb250ZW50IGNhbid0IGJlIGRpc3BsYXllZC5cblxuICB0aW1lc3RhbXAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAoMSwgdGltZXN0YW1wKSAgICAgICAgICAgICAgICAgMTY1MDg5OTQyOC4wNzc3MDlcblxuICB0eXBlICAgICAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICgxLCB0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VcblxuICB1c2VybmFtZSAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgKDEsIHVzZXJuYW1lKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW5cblxuWzg4IHJvd3MgeCAyIGNvbHVtbnNdXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShib29sKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpID09IEZhbHNlKSwgJ2FhX3ZhbHVlJ10gPSAnTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0wnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuMCBibG9ja3MgICAgMC4wIGJsb2NrX2lkIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICgwLCBibG9ja3MsIDAsIGJsb2NrX2lkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCSk5UblxuXG4gICAgICAgICAgICAgICAgdGV4dCAgICAgdGV4dCAgICAgTmFOIE5hTiAgICAgICgwLCBibG9ja3MsIDAsIHRleHQsIHRleHQpICAgICAgICAgICAgICAgICAgICAgICAgICAgIFlvdSBoYXZlIGEgbmV3IG1lc3NhZ2UuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlICAgICBOYU4gTmFOICAgICAgKDAsIGJsb2NrcywgMCwgdGV4dCwgdHlwZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtcmtkd25cblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZlcmJhdGltIE5hTiBOYU4gICgwLCBibG9ja3MsIDAsIHRleHQsIHZlcmJhdGltKSAgTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQi4uLlxuXG4gICAgICAgICAgICAgICAgdHlwZSAgICAgTmFOICAgICAgTmFOIE5hTiAgICAgICAgICAgICgwLCBibG9ja3MsIDAsIHR5cGUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWN0aW9uXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5cblxuMSBzdWJ0eXBlICAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICgxLCBzdWJ0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3RfbWVzc2FnZVxuXG4gIHRleHQgICAgICBOYU4gTmFOICAgICAgTmFOICAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAgICAgKDEsIHRleHQpICAgICAgICAgICAgICAgICAgIFRoaXMgY29udGVudCBjYW4ndCBiZSBkaXNwbGF5ZWQuXG5cbiAgdGltZXN0YW1wIE5hTiBOYU4gICAgICBOYU4gICAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgKDEsIHRpbWVzdGFtcCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTY1MDg5OTQyOC4wNzc3MDlcblxuICB0eXBlICAgICAgTmFOIE5hTiAgICAgIE5hTiAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICgxLCB0eXBlKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZVxuXG4gIHVzZXJuYW1lICBOYU4gTmFOICAgICAgTmFOICAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAoMSwgdXNlcm5hbWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkbWluXG5cbls4OCByb3dzIHggMiBjb2x1bW5zXVxuXG5tb2RfaXRlciA9IGRmLmRfdXBkYXRlX29yaWdpbmFsX2l0ZXIoZGF0YSwgdmVyYm9zZT1UcnVlKVxuXG5bMF1bYmxvY2tzXVswXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBGYWxzZVxuXG5bMF1bYmxvY2tzXVswXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0xcblxuWzBdW2Jsb2Nrc11bMV1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuWzBdW2Jsb2Nrc11bMV1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IE5PT09PT09PT09PT09PT09PT09PIE1PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MXG5cblswXVtibG9ja3NdWzJdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cblswXVtibG9ja3NdWzJdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBOT09PT09PT09PT09PT09PT09PTyBNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTFxuXG5bMF1bYmxvY2tzXVszXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBGYWxzZVxuXG5bMF1bYmxvY2tzXVszXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0xcblxuWzBdW2Jsb2Nrc11bNF1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuWzBdW2Jsb2Nrc11bNF1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IE5PT09PT09PT09PT09PT09PT09PIE1PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MXG5cblswXVtibG9ja3NdWzZdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cblswXVtibG9ja3NdWzZdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBOT09PT09PT09PT09PT09PT09PTyBNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTFxuXG5bMV1bYmxvY2tzXVswXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBGYWxzZVxuXG5bMV1bYmxvY2tzXVswXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0xcblxuWzFdW2Jsb2Nrc11bMV1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuWzFdW2Jsb2Nrc11bMV1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IE5PT09PT09PT09PT09PT09PT09PIE1PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MXG5cblsxXVtibG9ja3NdWzJdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cblsxXVtibG9ja3NdWzJdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBOT09PT09PT09PT09PT09PT09PTyBNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTFxuXG5bMV1bYmxvY2tzXVszXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiBGYWxzZVxuXG5bMV1bYmxvY2tzXVszXVt0ZXh0XVt2ZXJiYXRpbV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogTk9PT09PT09PT09PT09PT09PT08gTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0xcblxuWzFdW2Jsb2Nrc11bNF1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogRmFsc2VcblxuWzFdW2Jsb2Nrc11bNF1bdGV4dF1bdmVyYmF0aW1dICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IE5PT09PT09PT09PT09PT09PT09PIE1PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MXG5cblsxXVtibG9ja3NdWzZdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IEZhbHNlXG5cblsxXVtibG9ja3NdWzZdW3RleHRdW3ZlcmJhdGltXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiBOT09PT09PT09PT09PT09PT09PTyBNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTFxuXG5beydibG9ja3MnOiBbeydibG9ja19pZCc6ICdCSk5UbicsXG5cbiAgICAgICAgICAgICAgJ3RleHQnOiB7J3RleHQnOiAnWW91IGhhdmUgYSBuZXcgbWVzc2FnZS4nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogJ05PT09PT09PT09PT09PT09PT09PICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0wnfSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdzZWN0aW9uJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ1dQbi9sJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqSGVhcmQgQnkqXFxuRnJpZW5kJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdtcmtkd24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd2ZXJiYXRpbSc6ICdOT09PT09PT09PT09PT09PT09PTyAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MJ30sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICc1eXAnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEaXJlY3Rpb24/ICpcXG5Ob3J0aCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnZktFcEYnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEZXN0aW5hdGlvbipcXG5OZXcgWW9yaycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAncWpBSCcsXG5cbiAgICAgICAgICAgICAgJ3RleHQnOiB7J3RleHQnOiAnKk5ldyBDdXN0b21lcjoqXFxcXFllcycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAneXQ0JyxcblxuICAgICAgICAgICAgICAnZWxlbWVudHMnOiBbeydhY3Rpb25faWQnOiAnK2JjJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JzogeydiYXInOiAnVmlldyByZXN1bHRzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbW9qaSc6IFRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdwbGFpbl90ZXh0J30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdidXR0b24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6ICd3d3cuZXhhbXBsZS5jb20vcmVzdWx0cyd9XSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdhY3Rpb25zJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ0lCcicsXG5cbiAgICAgICAgICAgICAgJ3RleHQnOiB7J3RleHQnOiAnICcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfV0sXG5cbiAgJ2JvdF9pZCc6ICdCUEQ0SzNTSlcnLFxuXG4gICdzdWJ0eXBlJzogJ2JvdF9tZXNzYWdlJyxcblxuICAndGV4dCc6IFwiVGhpcyBjb250ZW50IGNhbid0IGJlIGRpc3BsYXllZC5cIixcblxuICAndGltZXN0YW1wJzogJzE2NTA5MDU2MDYuNzU1OTY5JyxcblxuICAndHlwZSc6ICdtZXNzYWdlJyxcblxuICAndXNlcm5hbWUnOiAnYWRtaW4nfSxcblxuIHsnYmxvY2tzJzogW3snYmxvY2tfaWQnOiAnU21kJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICdZb3UgaGF2ZSBhIG5ldyBtZXNzYWdlLicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnNllhTHQnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypIZWFyZCBCeSpcXG5PbmxpbmUgU2VhcmNoJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdtcmtkd24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd2ZXJiYXRpbSc6ICdOT09PT09PT09PT09PT09PT09PTyAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01PT09PT09PT09PT09PT09PT09PT1JFIEJPT09PT09PT09PT09PT09MJ30sXG5cbiAgICAgICAgICAgICAgJ3R5cGUnOiAnc2VjdGlvbid9LFxuXG4gICAgICAgICAgICAgeydibG9ja19pZCc6ICd3M28nLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypXaGljaCBEaXJlY3Rpb246ICpcXG5Ob3J0aCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnUFRRJyxcblxuICAgICAgICAgICAgICAndGV4dCc6IHsndGV4dCc6ICcqV2hpY2ggRGVzdGluYXRpb24/ICpcXG5NaWFtaScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAnSkNmU1AnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJypOZXcgQ3VzdG9tZXI/ICpcXG5ObycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3R5cGUnOiAnbXJrZHduJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmVyYmF0aW0nOiAnTk9PT09PT09PT09PT09PT09PT08gJ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNT09PT09PT09PT09PT09PT09PT09SRSBCT09PT09PT09PT09PT09PTCd9LFxuXG4gICAgICAgICAgICAgICd0eXBlJzogJ3NlY3Rpb24nfSxcblxuICAgICAgICAgICAgIHsnYmxvY2tfaWQnOiAneXQ0JyxcblxuICAgICAgICAgICAgICAnZWxlbWVudHMnOiBbeydhY3Rpb25faWQnOiAnK2JjJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0ZXh0JzogeydiYXInOiAnVmlldyByZXN1bHRzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdlbW9qaSc6IFRydWUsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdwbGFpbl90ZXh0J30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndHlwZSc6ICdidXR0b24nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3VybCc6ICd3d3cuZXhhbXBsZS5jb20vcmVzdWx0cyd9XSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdhY3Rpb25zJ30sXG5cbiAgICAgICAgICAgICB7J2Jsb2NrX2lkJzogJ1JKT0EnLFxuXG4gICAgICAgICAgICAgICd0ZXh0Jzogeyd0ZXh0JzogJyAnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICd0eXBlJzogJ21ya2R3bicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3ZlcmJhdGltJzogJ05PT09PT09PT09PT09PT09PT09PICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTU9PT09PT09PT09PT09PT09PT09PUkUgQk9PT09PT09PT09PT09PT0wnfSxcblxuICAgICAgICAgICAgICAndHlwZSc6ICdzZWN0aW9uJ31dLFxuXG4gICdib3RfaWQnOiAnQlBENEszU0pXJyxcblxuICAnc3VidHlwZSc6ICdib3RfbWVzc2FnZScsXG5cbiAgJ3RleHQnOiBcIlRoaXMgY29udGVudCBjYW4ndCBiZSBkaXNwbGF5ZWQuXCIsXG5cbiAgJ3RpbWVzdGFtcCc6ICcxNjUwODk5NDI4LjA3NzcwOScsXG5cbiAgJ3R5cGUnOiAnbWVzc2FnZScsXG5cbiAgJ3VzZXJuYW1lJzogJ2FkbWluJ31dXG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzczNjQzMDc3L2hvdy10by10cmFuc2Zvcm0tYS1saXN0LW9mLW5lc3RlZC1kaWN0aW9uYXJpZXMtaW50by1hLWRhdGEtZnJhbWUtcGQtanNvbi1ub3JtYWxcblxuZGF0YT1cblxuW3snYXBwbGUnOiB7J3ByaWNlJzogNCwgJ3VuaXRzJzogM319LFxuXG4geydiYW5hbmEnOiB7J3ByaWNlJzogMiwgJ3VuaXRzJzogMjB9fSxcblxuIHsnb3JhbmdlJzogeydwcmljZSc6IDUsICd1bml0cyc6IDE1fX1dXG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgIGFhX2FsbF9rZXlzICBhYV92YWx1ZVxuXG4wIGFwcGxlICBwcmljZSAgICgwLCBhcHBsZSwgcHJpY2UpICAgICAgICAgNFxuXG4gICAgICAgICB1bml0cyAgICgwLCBhcHBsZSwgdW5pdHMpICAgICAgICAgM1xuXG4xIGJhbmFuYSBwcmljZSAgKDEsIGJhbmFuYSwgcHJpY2UpICAgICAgICAgMlxuXG4gICAgICAgICB1bml0cyAgKDEsIGJhbmFuYSwgdW5pdHMpICAgICAgICAyMFxuXG4yIG9yYW5nZSBwcmljZSAgKDIsIG9yYW5nZSwgcHJpY2UpICAgICAgICAgNVxuXG4gICAgICAgICB1bml0cyAgKDIsIG9yYW5nZSwgdW5pdHMpICAgICAgICAxNVxuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oaW50KSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdhYV92YWx1ZScpID4zKSAmIChkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nbGV2ZWxfMScpLnN0ci5jb250YWlucyhcImJhbmFuYVwiKSksICdhYV92YWx1ZSddID0gNTAwMDBcblxuICAgbGV2ZWxfMCBsZXZlbF8xIGxldmVsXzIgICAgICAgICBhYV9hbGxfa2V5cyAgYWFfdmFsdWVcblxuMCAgICAgICAgMCAgIGFwcGxlICAgcHJpY2UgICAoMCwgYXBwbGUsIHByaWNlKSAgICAgICAgIDRcblxuMSAgICAgICAgMCAgIGFwcGxlICAgdW5pdHMgICAoMCwgYXBwbGUsIHVuaXRzKSAgICAgICAgIDNcblxuMiAgICAgICAgMSAgYmFuYW5hICAgcHJpY2UgICgxLCBiYW5hbmEsIHByaWNlKSAgICAgICAgIDJcblxuMyAgICAgICAgMSAgYmFuYW5hICAgdW5pdHMgICgxLCBiYW5hbmEsIHVuaXRzKSAgICAgNTAwMDBcblxuNCAgICAgICAgMiAgb3JhbmdlICAgcHJpY2UgICgyLCBvcmFuZ2UsIHByaWNlKSAgICAgICAgIDVcblxuNSAgICAgICAgMiAgb3JhbmdlICAgdW5pdHMgICgyLCBvcmFuZ2UsIHVuaXRzKSAgICAgICAgMTVcblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuWzFdW2JhbmFuYV1bdW5pdHNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMjBcblxuWzFdW2JhbmFuYV1bdW5pdHNdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDUwMDAwXG5cblt7J2FwcGxlJzogeydwcmljZSc6IDQsICd1bml0cyc6IDN9fSxcblxuIHsnYmFuYW5hJzogeydwcmljZSc6IDIsICd1bml0cyc6IDUwMDAwfX0sXG5cbiB7J29yYW5nZSc6IHsncHJpY2UnOiA1LCAndW5pdHMnOiAxNX19XVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy81ODExMDQ0MC9vcGVuaW5nLW5lc3RlZC1kaWN0LWluLWEtc2luZ2xlLWNvbHVtbi10by1tdWx0aXBsZS1jb2x1bW5zLWluLXBhbmRhc1xuXG5kYXRhPVxuXG57J3NpbXBsZTI1Yic6IHsnaGFuZHMnOiB7JzAnOiB7J2N1cnJlbmN5JzogJ3JtJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoYW5kSWQnOiAneHl6JyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogJzIwMTktMDktMjMgMTE6MDA6MDEnfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICcxJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ2FiYycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6ICcyMDE5LTA5LTIzIDExOjAxOjE4J319fSxcblxuICdzaW1wbGU1YWYnOiB7J2hhbmRzJzogeycwJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ2FrZycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6ICcyMDE5LTA5LTIzIDEwOjUzOjIyJ30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6IHsnY3VycmVuY3knOiAncm0nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhbmRJZCc6ICdtemMnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiAnMjAxOS0wOS0yMyAxMDo1NDoxNSd9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgJzInOiB7J2N1cnJlbmN5JzogJ3JtJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdoYW5kSWQnOiAnc3drJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aW1lJzogJzIwMTktMDktMjMgMTA6NTY6MDMnfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICczJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ3BRYycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6ICcyMDE5LTA5LTIzIDEwOjU3OjE1J30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAnNCc6IHsnY3VycmVuY3knOiAncm0nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhbmRJZCc6ICd5d2gnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiAnMjAxOS0wOS0yMyAxMDo1ODo1Myd9fX19XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV9hbGxfa2V5cyAgICAgICAgICAgICBhYV92YWx1ZVxuXG5zaW1wbGUyNWIgaGFuZHMgMCBjdXJyZW5jeSAgKHNpbXBsZTI1YiwgaGFuZHMsIDAsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlMjViLCBoYW5kcywgMCwgaGFuZElkKSAgICAgICAgICAgICAgICAgIHh5elxuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGUyNWIsIGhhbmRzLCAwLCB0aW1lKSAgMjAxOS0wOS0yMyAxMTowMDowMVxuXG4gICAgICAgICAgICAgICAgMSBjdXJyZW5jeSAgKHNpbXBsZTI1YiwgaGFuZHMsIDEsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlMjViLCBoYW5kcywgMSwgaGFuZElkKSAgICAgICAgICAgICAgICAgIGFiY1xuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGUyNWIsIGhhbmRzLCAxLCB0aW1lKSAgMjAxOS0wOS0yMyAxMTowMToxOFxuXG5zaW1wbGU1YWYgaGFuZHMgMCBjdXJyZW5jeSAgKHNpbXBsZTVhZiwgaGFuZHMsIDAsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMCwgaGFuZElkKSAgICAgICAgICAgICAgICAgIGFrZ1xuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGU1YWYsIGhhbmRzLCAwLCB0aW1lKSAgMjAxOS0wOS0yMyAxMDo1MzoyMlxuXG4gICAgICAgICAgICAgICAgMSBjdXJyZW5jeSAgKHNpbXBsZTVhZiwgaGFuZHMsIDEsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMSwgaGFuZElkKSAgICAgICAgICAgICAgICAgIG16Y1xuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGU1YWYsIGhhbmRzLCAxLCB0aW1lKSAgMjAxOS0wOS0yMyAxMDo1NDoxNVxuXG4gICAgICAgICAgICAgICAgMiBjdXJyZW5jeSAgKHNpbXBsZTVhZiwgaGFuZHMsIDIsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMiwgaGFuZElkKSAgICAgICAgICAgICAgICAgIHN3a1xuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGU1YWYsIGhhbmRzLCAyLCB0aW1lKSAgMjAxOS0wOS0yMyAxMDo1NjowM1xuXG4gICAgICAgICAgICAgICAgMyBjdXJyZW5jeSAgKHNpbXBsZTVhZiwgaGFuZHMsIDMsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMywgaGFuZElkKSAgICAgICAgICAgICAgICAgIHBRY1xuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGU1YWYsIGhhbmRzLCAzLCB0aW1lKSAgMjAxOS0wOS0yMyAxMDo1NzoxNVxuXG4gICAgICAgICAgICAgICAgNCBjdXJyZW5jeSAgKHNpbXBsZTVhZiwgaGFuZHMsIDQsIGN1cnJlbmN5KSAgICAgICAgICAgICAgICAgICBybVxuXG4gICAgICAgICAgICAgICAgICBoYW5kSWQgICAgICAoc2ltcGxlNWFmLCBoYW5kcywgNCwgaGFuZElkKSAgICAgICAgICAgICAgICAgIHl3aFxuXG4gICAgICAgICAgICAgICAgICB0aW1lICAgICAgICAgIChzaW1wbGU1YWYsIGhhbmRzLCA0LCB0aW1lKSAgMjAxOS0wOS0yMyAxMDo1ODo1M1xuXG5kZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdsZXZlbF8zJykuc3RyLmNvbnRhaW5zKFwidGltZVwiKSksICdhYV92YWx1ZSddID0gcGQudG9fZGF0ZXRpbWUoZGYubG9jWyhkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nbGV2ZWxfMycpLnN0ci5jb250YWlucyhcInRpbWVcIikpLCAnYWFfdmFsdWUnXSlcblxuICAgICAgbGV2ZWxfMCBsZXZlbF8xICAuLi4gICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgYWFfdmFsdWVcblxuMCAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gIChzaW1wbGUyNWIsIGhhbmRzLCAwLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuMSAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTI1YiwgaGFuZHMsIDAsIGhhbmRJZCkgICAgICAgICAgICAgICAgICB4eXpcblxuMiAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlMjViLCBoYW5kcywgMCwgdGltZSkgIDIwMTktMDktMjMgMTE6MDA6MDFcblxuMyAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gIChzaW1wbGUyNWIsIGhhbmRzLCAxLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuNCAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTI1YiwgaGFuZHMsIDEsIGhhbmRJZCkgICAgICAgICAgICAgICAgICBhYmNcblxuNSAgIHNpbXBsZTI1YiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlMjViLCBoYW5kcywgMSwgdGltZSkgIDIwMTktMDktMjMgMTE6MDE6MThcblxuNiAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gIChzaW1wbGU1YWYsIGhhbmRzLCAwLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuNyAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTVhZiwgaGFuZHMsIDAsIGhhbmRJZCkgICAgICAgICAgICAgICAgICBha2dcblxuOCAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMCwgdGltZSkgIDIwMTktMDktMjMgMTA6NTM6MjJcblxuOSAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gIChzaW1wbGU1YWYsIGhhbmRzLCAxLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuMTAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTVhZiwgaGFuZHMsIDEsIGhhbmRJZCkgICAgICAgICAgICAgICAgICBtemNcblxuMTEgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMSwgdGltZSkgIDIwMTktMDktMjMgMTA6NTQ6MTVcblxuMTIgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gIChzaW1wbGU1YWYsIGhhbmRzLCAyLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuMTMgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTVhZiwgaGFuZHMsIDIsIGhhbmRJZCkgICAgICAgICAgICAgICAgICBzd2tcblxuMTQgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMiwgdGltZSkgIDIwMTktMDktMjMgMTA6NTY6MDNcblxuMTUgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gIChzaW1wbGU1YWYsIGhhbmRzLCAzLCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuMTYgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTVhZiwgaGFuZHMsIDMsIGhhbmRJZCkgICAgICAgICAgICAgICAgICBwUWNcblxuMTcgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlNWFmLCBoYW5kcywgMywgdGltZSkgIDIwMTktMDktMjMgMTA6NTc6MTVcblxuMTggIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gIChzaW1wbGU1YWYsIGhhbmRzLCA0LCBjdXJyZW5jeSkgICAgICAgICAgICAgICAgICAgcm1cblxuMTkgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgKHNpbXBsZTVhZiwgaGFuZHMsIDQsIGhhbmRJZCkgICAgICAgICAgICAgICAgICB5d2hcblxuMjAgIHNpbXBsZTVhZiAgIGhhbmRzICAuLi4gICAgICAoc2ltcGxlNWFmLCBoYW5kcywgNCwgdGltZSkgIDIwMTktMDktMjMgMTA6NTg6NTNcblxuWzIxIHJvd3MgeCA2IGNvbHVtbnNdXG5cbm1vZF9pdGVyID0gZGYuZF91cGRhdGVfb3JpZ2luYWxfaXRlcihkYXRhLCB2ZXJib3NlPVRydWUpXG5cbnsnc2ltcGxlMjViJzogeydoYW5kcyc6IHsnMCc6IHsnY3VycmVuY3knOiAncm0nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhbmRJZCc6ICd4eXonLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBUaW1lc3RhbXAoJzIwMTktMDktMjMgMTE6MDA6MDEnKX0sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAnMSc6IHsnY3VycmVuY3knOiAncm0nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hhbmRJZCc6ICdhYmMnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpbWUnOiBUaW1lc3RhbXAoJzIwMTktMDktMjMgMTE6MDE6MTgnKX19fSxcblxuICdzaW1wbGU1YWYnOiB7J2hhbmRzJzogeycwJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ2FrZycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IFRpbWVzdGFtcCgnMjAxOS0wOS0yMyAxMDo1MzoyMicpfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICcxJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ216YycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IFRpbWVzdGFtcCgnMjAxOS0wOS0yMyAxMDo1NDoxNScpfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICcyJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ3N3aycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IFRpbWVzdGFtcCgnMjAxOS0wOS0yMyAxMDo1NjowMycpfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICczJzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ3BRYycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IFRpbWVzdGFtcCgnMjAxOS0wOS0yMyAxMDo1NzoxNScpfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICc0JzogeydjdXJyZW5jeSc6ICdybScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaGFuZElkJzogJ3l3aCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGltZSc6IFRpbWVzdGFtcCgnMjAxOS0wOS0yMyAxMDo1ODo1MycpfX19fVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4jTmVzdGVkIGl0ZXJhYmxlIGZyb206IFxuXG5odHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy82MjA1OTk3MC9ob3ctY2FuLWktY29udmVydC1uZXN0ZWQtZGljdGlvbmFyeS10by1wZC1kYXRhZnJhbWUtZmFzdGVyXG5cbmRhdGE9XG5cbnsnZmlsZSc6ICduYW1lJyxcblxuICdtYWluJzogW3snYW5zd2VyJzogW3snY29tbWVudCc6ICdJdCBpcyBkZWZpbmVkIGFzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndXNlcic6ICdKb2huJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbeydteV92YWx1ZSc6IDUsICd2YWx1ZV8yJzogMTB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J215X3ZhbHVlJzogMjQsICd2YWx1ZV8yJzogMzB9XX0sXG5cbiAgICAgICAgICAgICAgICAgICAgICB7J2NvbW1lbnQnOiAnYXMgSm9obiBzYWlkIGFib3ZlIGl0IHNpbXBseSBtZWFucycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXInOiAnU2FtJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbeydteV92YWx1ZSc6IDksICd2YWx1ZV8yJzogMTB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J215X3ZhbHVlJzogNTQsICd2YWx1ZV8yJzogMTl9XX1dLFxuXG4gICAgICAgICAgICdjbG9zZWQnOiAnbm8nLFxuXG4gICAgICAgICAgICdxdWVzdGlvbic6ICd3aGF0IGlzID8nLFxuXG4gICAgICAgICAgICdxdWVzdGlvbl9ubyc6ICdRLjEnfV19XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxuZmlsZSBOYU4gTmFOICAgICAgICAgTmFOIE5hTiAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZmlsZSwpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXG5cbm1haW4gMCAgIGFuc3dlciAgICAgIDAgICBjb21tZW50IE5hTiBOYU4gICAgICAgICAgICAgICAgICAobWFpbiwgMCwgYW5zd2VyLCAwLCBjb21tZW50KSAgICAgICAgICAgICAgICAgICAgSXQgaXMgZGVmaW5lZCBhc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgdXNlciAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgICAgKG1haW4sIDAsIGFuc3dlciwgMCwgdXNlcikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpvaG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgMCAgIG15X3ZhbHVlICAobWFpbiwgMCwgYW5zd2VyLCAwLCB2YWx1ZSwgMCwgbXlfdmFsdWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZV8yICAgIChtYWluLCAwLCBhbnN3ZXIsIDAsIHZhbHVlLCAwLCB2YWx1ZV8yKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxICAgbXlfdmFsdWUgIChtYWluLCAwLCBhbnN3ZXIsIDAsIHZhbHVlLCAxLCBteV92YWx1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXzIgICAgKG1haW4sIDAsIGFuc3dlciwgMCwgdmFsdWUsIDEsIHZhbHVlXzIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMwXG5cbiAgICAgICAgICAgICAgICAgICAgIDEgICBjb21tZW50IE5hTiBOYU4gICAgICAgICAgICAgICAgICAobWFpbiwgMCwgYW5zd2VyLCAxLCBjb21tZW50KSAgYXMgSm9obiBzYWlkIGFib3ZlIGl0IHNpbXBseSBtZWFuc1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgdXNlciAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgICAgKG1haW4sIDAsIGFuc3dlciwgMSwgdXNlcikgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTYW1cblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlICAgMCAgIG15X3ZhbHVlICAobWFpbiwgMCwgYW5zd2VyLCAxLCB2YWx1ZSwgMCwgbXlfdmFsdWUpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA5XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZV8yICAgIChtYWluLCAwLCBhbnN3ZXIsIDEsIHZhbHVlLCAwLCB2YWx1ZV8yKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxICAgbXlfdmFsdWUgIChtYWluLCAwLCBhbnN3ZXIsIDEsIHZhbHVlLCAxLCBteV92YWx1ZSkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNTRcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlXzIgICAgKG1haW4sIDAsIGFuc3dlciwgMSwgdmFsdWUsIDEsIHZhbHVlXzIpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE5XG5cbiAgICAgICAgIGNsb3NlZCAgICAgIE5hTiBOYU4gICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobWFpbiwgMCwgY2xvc2VkKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub1xuXG4gICAgICAgICBxdWVzdGlvbiAgICBOYU4gTmFOICAgICBOYU4gTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtYWluLCAwLCBxdWVzdGlvbikgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0IGlzID9cblxuICAgICAgICAgcXVlc3Rpb25fbm8gTmFOIE5hTiAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAobWFpbiwgMCwgcXVlc3Rpb25fbm8pICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUS4xXG5cbmRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2xldmVsXzYnKS5zdHIuY29udGFpbnMoXCJ2YWx1ZV8yXCIsbmE9RmFsc2UpKSwgJ2FhX3ZhbHVlJ10gPSBkZi5sb2NbKGRmLmRfZmlsdGVyX2R0eXBlcyhhbGxvd2VkX2R0eXBlcz0oc3RyKSxmaWxsdmFsdWU9cGQuTkEsY29sdW1uPSdsZXZlbF82Jykuc3RyLmNvbnRhaW5zKFwidmFsdWVfMlwiLG5hPUZhbHNlKSksICdhYV92YWx1ZSddKjEwMDBcblxuICAgbGV2ZWxfMCAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFhX3ZhbHVlXG5cbjAgICAgIGZpbGUgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuXG4xICAgICBtYWluICAuLi4gICAgICAgICAgICAgICAgICAgIEl0IGlzIGRlZmluZWQgYXNcblxuMiAgICAgbWFpbiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKb2huXG5cbjMgICAgIG1haW4gIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNVxuXG40ICAgICBtYWluICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMDBcblxuNSAgICAgbWFpbiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI0XG5cbjYgICAgIG1haW4gIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMDAwMFxuXG43ICAgICBtYWluICAuLi4gIGFzIEpvaG4gc2FpZCBhYm92ZSBpdCBzaW1wbHkgbWVhbnNcblxuOCAgICAgbWFpbiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2FtXG5cbjkgICAgIG1haW4gIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOVxuXG4xMCAgICBtYWluICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTAwMDBcblxuMTEgICAgbWFpbiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU0XG5cbjEyICAgIG1haW4gIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOTAwMFxuXG4xMyAgICBtYWluICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9cblxuMTQgICAgbWFpbiAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdCBpcyA/XG5cbjE1ICAgIG1haW4gIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFEuMVxuXG5bMTYgcm93cyB4IDkgY29sdW1uc11cblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW21haW5dWzBdW2Fuc3dlcl1bMF1bdmFsdWVdWzBdW3ZhbHVlXzJdICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTBcblxuW21haW5dWzBdW2Fuc3dlcl1bMF1bdmFsdWVdWzBdW3ZhbHVlXzJdICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDEwMDAwXG5cblttYWluXVswXVthbnN3ZXJdWzBdW3ZhbHVlXVsxXVt2YWx1ZV8yXSAgICAgICAgICAgICAgICAgICAgICBPbGQgdmFsdWU6IDMwXG5cblttYWluXVswXVthbnN3ZXJdWzBdW3ZhbHVlXVsxXVt2YWx1ZV8yXSAgICAgICAgICAgICAgICAgICAgICBVcGRhdGVkIHZhbHVlOiAzMDAwMFxuXG5bbWFpbl1bMF1bYW5zd2VyXVsxXVt2YWx1ZV1bMF1bdmFsdWVfMl0gICAgICAgICAgICAgICAgICAgICAgT2xkIHZhbHVlOiAxMFxuXG5bbWFpbl1bMF1bYW5zd2VyXVsxXVt2YWx1ZV1bMF1bdmFsdWVfMl0gICAgICAgICAgICAgICAgICAgICAgVXBkYXRlZCB2YWx1ZTogMTAwMDBcblxuW21haW5dWzBdW2Fuc3dlcl1bMV1bdmFsdWVdWzFdW3ZhbHVlXzJdICAgICAgICAgICAgICAgICAgICAgIE9sZCB2YWx1ZTogMTlcblxuW21haW5dWzBdW2Fuc3dlcl1bMV1bdmFsdWVdWzFdW3ZhbHVlXzJdICAgICAgICAgICAgICAgICAgICAgIFVwZGF0ZWQgdmFsdWU6IDE5MDAwXG5cbnsnZmlsZSc6ICduYW1lJyxcblxuICdtYWluJzogW3snYW5zd2VyJzogW3snY29tbWVudCc6ICdJdCBpcyBkZWZpbmVkIGFzJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndXNlcic6ICdKb2huJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbeydteV92YWx1ZSc6IDUsICd2YWx1ZV8yJzogMTAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J215X3ZhbHVlJzogMjQsICd2YWx1ZV8yJzogMzAwMDB9XX0sXG5cbiAgICAgICAgICAgICAgICAgICAgICB7J2NvbW1lbnQnOiAnYXMgSm9obiBzYWlkIGFib3ZlIGl0IHNpbXBseSBtZWFucycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgJ3VzZXInOiAnU2FtJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbeydteV92YWx1ZSc6IDksICd2YWx1ZV8yJzogMTAwMDB9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J215X3ZhbHVlJzogNTQsICd2YWx1ZV8yJzogMTkwMDB9XX1dLFxuXG4gICAgICAgICAgICdjbG9zZWQnOiAnbm8nLFxuXG4gICAgICAgICAgICdxdWVzdGlvbic6ICd3aGF0IGlzID8nLFxuXG4gICAgICAgICAgICdxdWVzdGlvbl9ubyc6ICdRLjEnfV19XG5cbmBgYFxuXG5cblxuYGBgcHl0aG9uXG5cbiNOZXN0ZWQgaXRlcmFibGUgZnJvbTogXG5cbmh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM5NjM0MzY5LzQtZGltZW5zaW9uYWwtbmVzdGVkLWRpY3Rpb25hcnktdG8tcGFuZGFzLWRhdGEtZnJhbWVcblxuZGF0YT1cblxueydvcmRlcnMnOiBbeydjcmVhdGVkX2F0JzogJzIwMTYtMDktMjBUMjI6MDQ6NDkrMDI6MDAnLFxuXG4gICAgICAgICAgICAgJ2VtYWlsJzogJ3Rlc3RAYW9sLmNvbScsXG5cbiAgICAgICAgICAgICAnaWQnOiA0MzE0MTI3MTA4LFxuXG4gICAgICAgICAgICAgJ2xpbmVfaXRlbXMnOiBbeydkZXN0aW5hdGlvbl9sb2NhdGlvbic6IHsnYWRkcmVzczEnOiAnVGVzdHN0cmVldCAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxMicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzMic6ICcnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2l0eSc6ICdCZXJsaW4nLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY291bnRyeV9jb2RlJzogJ0RFJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2lkJzogMjM4MzMzMTAxMixcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAnVGVzdCBUZXN0JyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ppcCc6ICcxMDExNyd9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICdnaWZ0X2NhcmQnOiBGYWxzZSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICdCbHVlYmVycnkgQ3VwJ30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7J2Rlc3RpbmF0aW9uX2xvY2F0aW9uJzogeydhZGRyZXNzMSc6ICdUZXN0c3RyZWV0ICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzEyJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2FkZHJlc3MyJzogJycsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjaXR5JzogJ0JlcmxpbicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjb3VudHJ5X2NvZGUnOiAnREUnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaWQnOiAyMzgzMzMxMDEyLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmFtZSc6ICdUZXN0IFRlc3QnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnemlwJzogJzEwMTE3J30sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dpZnRfY2FyZCc6IEZhbHNlLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ1N0cmF3YmVycnkgQ3VwJ31dfV19XG5cbmRmID0gcGQuUV9BbnlOZXN0ZWRJdGVyYWJsZV8yZGYoZGF0YSx1bnN0YWNrPUZhbHNlKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgICAgICAgICAgICAgICAgICAgYWFfdmFsdWVcblxub3JkZXJzIDAgY3JlYXRlZF9hdCBOYU4gTmFOICAgICAgICAgICAgICAgICAgTmFOICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcmRlcnMsIDAsIGNyZWF0ZWRfYXQpICAyMDE2LTA5LTIwVDIyOjA0OjQ5KzAyOjAwXG5cbiAgICAgICAgIGVtYWlsICAgICAgTmFOIE5hTiAgICAgICAgICAgICAgICAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvcmRlcnMsIDAsIGVtYWlsKSAgICAgICAgICAgICAgIHRlc3RAYW9sLmNvbVxuXG4gICAgICAgICBpZCAgICAgICAgIE5hTiBOYU4gICAgICAgICAgICAgICAgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3JkZXJzLCAwLCBpZCkgICAgICAgICAgICAgICAgIDQzMTQxMjcxMDhcblxuICAgICAgICAgbGluZV9pdGVtcyAwICAgZGVzdGluYXRpb25fbG9jYXRpb24gYWRkcmVzczEgICAgICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAwLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICBUZXN0c3RyZWV0IDEyXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MyICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMCwgZGVzdGluYXRpb25fbG9jYXRpby4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5ICAgICAgICAgIChvcmRlcnMsIDAsIGxpbmVfaXRlbXMsIDAsIGRlc3RpbmF0aW9uX2xvY2F0aW8uLi4gICAgICAgICAgICAgICAgICAgICBCZXJsaW5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeV9jb2RlICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAwLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICAgICAgICAgICAgIERFXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMCwgZGVzdGluYXRpb25fbG9jYXRpby4uLiAgICAgICAgICAgICAgICAgMjM4MzMzMTAxMlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgIChvcmRlcnMsIDAsIGxpbmVfaXRlbXMsIDAsIGRlc3RpbmF0aW9uX2xvY2F0aW8uLi4gICAgICAgICAgICAgICAgICBUZXN0IFRlc3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemlwICAgICAgICAgICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAwLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICAgICAgICAgIDEwMTE3XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdpZnRfY2FyZCAgICAgICAgICAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMCwgZ2lmdF9jYXJkKSAgICAgICAgICAgICAgICAgICAgICBGYWxzZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgICAgICAgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMCwgbmFtZSkgICAgICAgICAgICAgIEJsdWViZXJyeSBDdXBcblxuICAgICAgICAgICAgICAgICAgICAxICAgZGVzdGluYXRpb25fbG9jYXRpb24gYWRkcmVzczEgICAgICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAxLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICBUZXN0c3RyZWV0IDEyXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3MyICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMSwgZGVzdGluYXRpb25fbG9jYXRpby4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5ICAgICAgICAgIChvcmRlcnMsIDAsIGxpbmVfaXRlbXMsIDEsIGRlc3RpbmF0aW9uX2xvY2F0aW8uLi4gICAgICAgICAgICAgICAgICAgICBCZXJsaW5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnRyeV9jb2RlICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAxLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICAgICAgICAgICAgIERFXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMSwgZGVzdGluYXRpb25fbG9jYXRpby4uLiAgICAgICAgICAgICAgICAgMjM4MzMzMTAxMlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgIChvcmRlcnMsIDAsIGxpbmVfaXRlbXMsIDEsIGRlc3RpbmF0aW9uX2xvY2F0aW8uLi4gICAgICAgICAgICAgICAgICBUZXN0IFRlc3RcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgemlwICAgICAgICAgICAob3JkZXJzLCAwLCBsaW5lX2l0ZW1zLCAxLCBkZXN0aW5hdGlvbl9sb2NhdGlvLi4uICAgICAgICAgICAgICAgICAgICAgIDEwMTE3XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGdpZnRfY2FyZCAgICAgICAgICAgIE5hTiAgICAgICAgICAgICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMSwgZ2lmdF9jYXJkKSAgICAgICAgICAgICAgICAgICAgICBGYWxzZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lICAgICAgICAgICAgICAgICBOYU4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9yZGVycywgMCwgbGluZV9pdGVtcywgMSwgbmFtZSkgICAgICAgICAgICAgU3RyYXdiZXJyeSBDdXBcblxuZGYubG9jWyhkZi5kX2ZpbHRlcl9kdHlwZXMoYWxsb3dlZF9kdHlwZXM9KHN0ciksZmlsbHZhbHVlPXBkLk5BLGNvbHVtbj0nbGV2ZWxfNicpLnN0ci5jb250YWlucyhcInZhbHVlXzJcIixuYT1GYWxzZSkpLCAnYWFfdmFsdWUnXSA9IGRmLmxvY1soZGYuZF9maWx0ZXJfZHR5cGVzKGFsbG93ZWRfZHR5cGVzPShzdHIpLGZpbGx2YWx1ZT1wZC5OQSxjb2x1bW49J2xldmVsXzYnKS5zdHIuY29udGFpbnMoXCJ2YWx1ZV8yXCIsbmE9RmFsc2UpKSwgJ2FhX3ZhbHVlJ10qMTAwMFxuXG4gICBsZXZlbF8wICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhYV92YWx1ZVxuXG4wICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgMjAxNi0wOS0yMFQyMjowNDo0OSswMjowMFxuXG4xICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RAYW9sLmNvbVxuXG4yICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgNDMxNDEyNzEwOFxuXG4zICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgVGVzdHN0cmVldCAxMlxuXG40ICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG41ICAgb3JkZXJzICAuLi4gIEZSQU5LRlVSVCBJU1QgVklFTCBCRVNTRVIgQUxTIEJFUkxJTlxuXG42ICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBERVxuXG43ICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMjM4MzMzMTAxMlxuXG44ICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QgVGVzdFxuXG45ICAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDExN1xuXG4xMCAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGYWxzZVxuXG4xMSAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgQmx1ZWJlcnJ5IEN1cFxuXG4xMiAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgVGVzdHN0cmVldCAxMlxuXG4xMyAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4xNCAgb3JkZXJzICAuLi4gIEZSQU5LRlVSVCBJU1QgVklFTCBCRVNTRVIgQUxTIEJFUkxJTlxuXG4xNSAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBERVxuXG4xNiAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgMjM4MzMzMTAxMlxuXG4xNyAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlc3QgVGVzdFxuXG4xOCAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMDExN1xuXG4xOSAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGYWxzZVxuXG4yMCAgb3JkZXJzICAuLi4gICAgICAgICAgICAgICAgICAgICAgICBTdHJhd2JlcnJ5IEN1cFxuXG5bMjEgcm93cyB4IDggY29sdW1uc11cblxubW9kX2l0ZXIgPSBkZi5kX3VwZGF0ZV9vcmlnaW5hbF9pdGVyKGRhdGEsIHZlcmJvc2U9VHJ1ZSlcblxuW29yZGVyc11bMF1bbGluZV9pdGVtc11bMF1bZGVzdGluYXRpb25fbG9jYXRpb25dW2NpdHldICAgICAgIE9sZCB2YWx1ZTogQmVybGluXG5cbltvcmRlcnNdWzBdW2xpbmVfaXRlbXNdWzBdW2Rlc3RpbmF0aW9uX2xvY2F0aW9uXVtjaXR5XSAgICAgICBVcGRhdGVkIHZhbHVlOiBGUkFOS0ZVUlQgSVNUIFZJRUwgQkVTU0VSIEFMUyBCRVJMSU5cblxuW29yZGVyc11bMF1bbGluZV9pdGVtc11bMV1bZGVzdGluYXRpb25fbG9jYXRpb25dW2NpdHldICAgICAgIE9sZCB2YWx1ZTogQmVybGluXG5cbltvcmRlcnNdWzBdW2xpbmVfaXRlbXNdWzFdW2Rlc3RpbmF0aW9uX2xvY2F0aW9uXVtjaXR5XSAgICAgICBVcGRhdGVkIHZhbHVlOiBGUkFOS0ZVUlQgSVNUIFZJRUwgQkVTU0VSIEFMUyBCRVJMSU5cblxueydvcmRlcnMnOiBbeydjcmVhdGVkX2F0JzogJzIwMTYtMDktMjBUMjI6MDQ6NDkrMDI6MDAnLFxuXG4gICAgICAgICAgICAgJ2VtYWlsJzogJ3Rlc3RAYW9sLmNvbScsXG5cbiAgICAgICAgICAgICAnaWQnOiA0MzE0MTI3MTA4LFxuXG4gICAgICAgICAgICAgJ2xpbmVfaXRlbXMnOiBbeydkZXN0aW5hdGlvbl9sb2NhdGlvbic6IHsnYWRkcmVzczEnOiAnVGVzdHN0cmVldCAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxMicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzMic6ICcnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2l0eSc6ICdGUkFOS0ZVUlQgSVNUICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVklFTCBCRVNTRVIgQUxTICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQkVSTElOJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50cnlfY29kZSc6ICdERScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IDIzODMzMzEwMTIsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ1Rlc3QgVGVzdCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd6aXAnOiAnMTAxMTcnfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2lmdF9jYXJkJzogRmFsc2UsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAnQmx1ZWJlcnJ5IEN1cCd9LFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeydkZXN0aW5hdGlvbl9sb2NhdGlvbic6IHsnYWRkcmVzczEnOiAnVGVzdHN0cmVldCAnXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcxMicsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhZGRyZXNzMic6ICcnLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2l0eSc6ICdGUkFOS0ZVUlQgSVNUICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVklFTCBCRVNTRVIgQUxTICdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQkVSTElOJyxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvdW50cnlfY29kZSc6ICdERScsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdpZCc6IDIzODMzMzEwMTIsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICduYW1lJzogJ1Rlc3QgVGVzdCcsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd6aXAnOiAnMTAxMTcnfSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2lmdF9jYXJkJzogRmFsc2UsXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnOiAnU3RyYXdiZXJyeSBDdXAnfV19XX1cblxuYGBgXG5cblxuXG4jIyMgKipkZi5zX2RlbGV0ZV9kdXBsaWNhdGVzX2Zyb21faXRlcnNfaW5fY2VsbHMqKlxuXG5cblxuYGBgcHl0aG9uXG5cbiAgICBkZWxldGVfZHVwbGljYXRlc19pbl9jb2x1bW5fZnVsbF9vZl9pdGVycyhkZjogcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcykgLT4gcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllc1xuXG4gICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHsnbGtleSc6IFsnZm9vJywgJ2JhcicsICdiYXonLCAnZm9vJ10sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IFsxLCAyLCAzLCA1XX0pXG5cbiAgICAgICAgZ2V0ZGkgPSBsYW1iZGEgeDogWyAgICAocmFuZHJhbmdlKDEsIDQpLCByYW5kcmFuZ2UoMSwgNCkpIGZvciB2IGluIHJhbmdlKDIwKV0gICNjcmVhdGUgc29tZSByYW5kb20gdHVwbGVzXG5cbiAgICAgICAgZGZbXCJkaWN0dGVzdFwiXSA9IGRmLmxrZXkuYXBwbHkobGFtYmRhIHg6IGdldGRpKHgpKVxuXG4gICAgICAgIHByaW50KGRmKVxuXG4gICAgICAgIGRmW1wiZGljdHRlc3RcIl09ZGYuZGljdHRlc3Quc19kZWxldGVfZHVwbGljYXRlc19mcm9tX2l0ZXJzX2luX2NlbGxzKClcblxuICAgICAgICBwcmludChkZilcblxuICAgICAgICAgIGxrZXkgIHZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpY3R0ZXN0XG5cbiAgICAgICAgMCAgZm9vICAgICAgMSAgWygyLCAxKSwgKDMsIDMpLCAoMywgMyksICgyLCAxKSwgKDEsIDIpLCAoMSwgMi4uLlxuXG4gICAgICAgIDEgIGJhciAgICAgIDIgIFsoMywgMiksICgxLCAxKSwgKDEsIDEpLCAoMSwgMiksICgzLCAyKSwgKDEsIDIuLi5cblxuICAgICAgICAyICBiYXogICAgICAzICBbKDEsIDIpLCAoMywgMSksICgyLCAxKSwgKDIsIDEpLCAoMSwgMSksICgyLCAzLi4uXG5cbiAgICAgICAgMyAgZm9vICAgICAgNSAgWygyLCAzKSwgKDIsIDMpLCAoMywgMyksICgyLCAyKSwgKDEsIDIpLCAoMSwgMi4uLlxuXG4gICAgICAgICAgbGtleSAgdmFsdWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGljdHRlc3RcblxuICAgICAgICAwICBmb28gICAgICAxICBbKDIsIDEpLCAoMywgMyksICgxLCAyKSwgKDEsIDMpLCAoMywgMiksICgyLCAzLi4uXG5cbiAgICAgICAgMSAgYmFyICAgICAgMiAgWygzLCAyKSwgKDEsIDEpLCAoMSwgMiksICgyLCAxKSwgKDMsIDEpLCAoMywgMy4uLlxuXG4gICAgICAgIDIgIGJheiAgICAgIDMgIFsoMSwgMiksICgzLCAxKSwgKDIsIDEpLCAoMSwgMSksICgyLCAzKSwgKDMsIDMuLi5cblxuICAgICAgICAzICBmb28gICAgICA1ICBbKDIsIDMpLCAoMywgMyksICgyLCAyKSwgKDEsIDIpLCAoMSwgMSksICgxLCAzLi4uXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgIGRmIDogcGQuU2VyaWVzXG5cbiAgICAgICAgICAgICAgICBDb2x1bW4gd2l0aCBkdXBsaWNhdGVzIHRoYXQgYXJlIGRpZmZpY3VsdCB0byBoYW5kbGVcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLlNlcmllc1xuXG5gYGBcblxuXG5cbiMjIyBkZi5kc19leHBsb2RlX2RpY3RzX2luX2NvbHVtbigpXG5cblxuXG5gYGBweXRob25cblxuICAgIGV4cGxvZGVfZGljdHNfaW5fY29sdW1uKGRmOiBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWUsIGNvbHVtbl90b19leHBsb2RlOiBzdHIsIGRyb3BfZXhwbG9kZWRfY29sdW1uOiBib29sID0gVHJ1ZSkgLT4gcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXG5cbiAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUoeydsa2V5JzogWydmb28nLCAnYmFyJywgJ2JheicsICdmb28nXSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzEsIDIsIDMsIDVdfSlcblxuICAgICAgICBnZXRkaSA9IGxhbWJkYSB4OiB7ICAgIHY6IHt2ICogcmFuZHJhbmdlKDEsIDEwKTogdiAqIHJhbmRyYW5nZSgxLCAxMCl9IGZvciB2IGluIHJhbmdlKChyYW5kcmFuZ2UoMSwgMTApKSl9ICNjcmVhdGUgcmFuZG9tIG5lc3RlZCBkaWN0c1xuXG4gICAgICAgIGRmW1wiZGljdHRlc3RcIl0gPSBkZi5sa2V5LmFwcGx5KGdldGRpKVxuXG4gICAgICAgIHByaW50KGRmKVxuXG4gICAgICAgIHByaW50KGRmLmRzX2V4cGxvZGVfZGljdHNfaW5fY29sdW1uKCdkaWN0dGVzdCcpKVxuXG4gICAgICAgICAgbGtleSAgdmFsdWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGljdHRlc3RcblxuICAgICAgICAwICBmb28gICAgICAxICB7MDogezA6IDB9LCAxOiB7MTogN30sIDI6IHsyOiA4fSwgMzogezM6IDE4fSwgLi4uXG5cbiAgICAgICAgMSAgYmFyICAgICAgMiAgezA6IHswOiAwfSwgMTogezk6IDR9LCAyOiB7MTA6IDZ9LCAzOiB7MzogMjF9LC4uLlxuXG4gICAgICAgIDIgIGJheiAgICAgIDMgIHswOiB7MDogMH0sIDE6IHs5OiA3fSwgMjogezI6IDEwfSwgMzogezIxOiAyN30uLi5cblxuICAgICAgICAzICBmb28gICAgICA1ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHswOiB7MDogMH19XG5cbiAgICAgICAgICAgbGtleSB2YWx1ZSAgbGV2ZWxfMCAgbGV2ZWxfMSBhYV9hbGxfa2V5cyAgYWFfdmFsdWVcblxuICAgICAgICAwICAgZm9vICAgICAxICAgICAgICAwICAgICAgICAwICAgICAgKDAsIDApICAgICAgICAgMFxuXG4gICAgICAgIDEgICBmb28gICAgIDEgICAgICAgIDEgICAgICAgIDEgICAgICAoMSwgMSkgICAgICAgICA3XG5cbiAgICAgICAgMiAgIGZvbyAgICAgMSAgICAgICAgMiAgICAgICAgMiAgICAgICgyLCAyKSAgICAgICAgIDhcblxuICAgICAgICAzICAgZm9vICAgICAxICAgICAgICAzICAgICAgICAzICAgICAgKDMsIDMpICAgICAgICAxOFxuXG4gICAgICAgIDQgICBmb28gICAgIDEgICAgICAgIDQgICAgICAgMzIgICAgICg0LCAzMikgICAgICAgIDE2XG5cbiAgICAgICAgNSAgIGZvbyAgICAgMSAgICAgICAgNSAgICAgICAzNSAgICAgKDUsIDM1KSAgICAgICAgMTVcblxuICAgICAgICA2ICAgYmFyICAgICAyICAgICAgICAwICAgICAgICAwICAgICAgKDAsIDApICAgICAgICAgMFxuXG4gICAgICAgIDcgICBiYXIgICAgIDIgICAgICAgIDEgICAgICAgIDkgICAgICAoMSwgOSkgICAgICAgICA0XG5cbiAgICAgICAgOCAgIGJhciAgICAgMiAgICAgICAgMiAgICAgICAxMCAgICAgKDIsIDEwKSAgICAgICAgIDZcblxuICAgICAgICA5ICAgYmFyICAgICAyICAgICAgICAzICAgICAgICAzICAgICAgKDMsIDMpICAgICAgICAyMVxuXG4gICAgICAgIDEwICBiYXIgICAgIDIgICAgICAgIDQgICAgICAgMjQgICAgICg0LCAyNCkgICAgICAgIDM2XG5cbiAgICAgICAgMTEgIGJheiAgICAgMyAgICAgICAgMCAgICAgICAgMCAgICAgICgwLCAwKSAgICAgICAgIDBcblxuICAgICAgICAxMiAgYmF6ICAgICAzICAgICAgICAxICAgICAgICA5ICAgICAgKDEsIDkpICAgICAgICAgN1xuXG4gICAgICAgIDEzICBiYXogICAgIDMgICAgICAgIDIgICAgICAgIDIgICAgICAoMiwgMikgICAgICAgIDEwXG5cbiAgICAgICAgMTQgIGJheiAgICAgMyAgICAgICAgMyAgICAgICAyMSAgICAgKDMsIDIxKSAgICAgICAgMjdcblxuICAgICAgICAxNSAgYmF6ICAgICAzICAgICAgICA0ICAgICAgIDI4ICAgICAoNCwgMjgpICAgICAgICAyMFxuXG4gICAgICAgIDE2ICBiYXogICAgIDMgICAgICAgIDUgICAgICAgMTUgICAgICg1LCAxNSkgICAgICAgIDMwXG5cbiAgICAgICAgMTcgIGJheiAgICAgMyAgICAgICAgNiAgICAgICAgNiAgICAgICg2LCA2KSAgICAgICAgIDZcblxuICAgICAgICAxOCAgYmF6ICAgICAzICAgICAgICA3ICAgICAgIDIxICAgICAoNywgMjEpICAgICAgICAgN1xuXG4gICAgICAgIDE5ICBiYXogICAgIDMgICAgICAgIDggICAgICAgMjQgICAgICg4LCAyNCkgICAgICAgIDQ4XG5cbiAgICAgICAgMjAgIGZvbyAgICAgNSAgICAgICAgMCAgICAgICAgMCAgICAgICgwLCAwKSAgICAgICAgIDBcblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmOnBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgY29sdW1uX3RvX2V4cGxvZGU6c3RyXG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1uIHdpdGggZGljdCBpbiBjZWxsc1xuXG4gICAgICAgICAgICAgICAgZHJvcF9leHBsb2RlZF9jb2x1bW46Ym9vbFxuXG4gICAgICAgICAgICAgICAgICAgIERyb3AgY29sdW1uIGFmdGVyIGV4cGxvZGluZyAoZGVmYXVsdCA9IFRydWUgIClcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbiMjIyBkZi5kX2RmX3RvX25lc3RlZF9kaWN0KClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgUGFyYW1ldGVyc1xuXG4gICAgLS0tLS0tLS0tLVxuXG4gICAgZGY6IHBkLkRhdGFGcmFtZVxuXG4gICAgICAgIERhdGFGcmFtZSB0byBjb252ZXJ0XG5cbiAgICBncm91cGJ5OiBzdHJcblxuICAgICAgICBjb2x1bW4gd2hvc2UgdmFsdWVzIHdpbGwgYmUgdGhlIHRvcCBsZXZlbCBrZXlzXG5cbiAgICBzdWJrZXlzOiBsaXN0XG5cbiAgICAgICAgY29sdW1ucyB3aG9sc2UgdmFsdWVzIHdpbGwgYmUgdGhlIG5lc3RlZCBrZXlzXG5cblxuXG4gICAgZGYgPSBwZC5yZWFkX2NzdiggICAgXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiKVxuXG5cblxuICAgICAgICBOZXN0ZWQgZGljdCBmcm9tIERhdGFGcmFtZTpcblxuICAgIGRmWzo1XS5kX2RmX3RvX25lc3RlZF9kaWN0KGdyb3VwYnk9J1N1cnZpdmVkJywgc3Via2V5cz1bJ1Bhc3NlbmdlcklkJywgJ0FnZScsICdQY2xhc3MnLCAnTmFtZScsICdTZXgnXSlcblxuXG5cbiAgICB7MDogeydQYXNzZW5nZXJJZCc6IHswOiAxLCA0OiA1fSxcblxuICAgICAgJ0FnZSc6IHswOiAyMi4wLCA0OiAzNS4wfSxcblxuICAgICAgJ1BjbGFzcyc6IHswOiAzLCA0OiAzfSxcblxuICAgICAgJ05hbWUnOiB7MDogJ0JyYXVuZCwgTXIuIE93ZW4gSGFycmlzJywgNDogJ0FsbGVuLCBNci4gV2lsbGlhbSBIZW5yeSd9LFxuXG4gICAgICAnU2V4JzogezA6ICdtYWxlJywgNDogJ21hbGUnfX0sXG5cbiAgICAgMTogeydQYXNzZW5nZXJJZCc6IHsxOiAyLCAyOiAzLCAzOiA0fSxcblxuICAgICAgJ0FnZSc6IHsxOiAzOC4wLCAyOiAyNi4wLCAzOiAzNS4wfSxcblxuICAgICAgJ1BjbGFzcyc6IHsxOiAxLCAyOiAzLCAzOiAxfSxcblxuICAgICAgJ05hbWUnOiB7MTogJ0N1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGhheWVyKScsXG5cbiAgICAgICAyOiAnSGVpa2tpbmVuLCBNaXNzLiBMYWluYScsXG5cbiAgICAgICAzOiAnRnV0cmVsbGUsIE1ycy4gSmFjcXVlcyBIZWF0aCAoTGlseSBNYXkgUGVlbCknfSxcblxuICAgICAgJ1NleCc6IHsxOiAnZmVtYWxlJywgMjogJ2ZlbWFsZScsIDM6ICdmZW1hbGUnfX19XG5cblxuXG5cblxuICAgIGRmWzo1XS5kX2RmX3RvX25lc3RlZF9kaWN0KGdyb3VwYnk9J1NleCcsIHN1YmtleXM9WydQYXNzZW5nZXJJZCcsICdOYW1lJ10pXG5cbiAgICBPdXRbMzldOlxuXG4gICAgeydtYWxlJzogeydQYXNzZW5nZXJJZCc6IHswOiAxLCA0OiA1fSxcblxuICAgICAgJ05hbWUnOiB7MDogJ0JyYXVuZCwgTXIuIE93ZW4gSGFycmlzJywgNDogJ0FsbGVuLCBNci4gV2lsbGlhbSBIZW5yeSd9fSxcblxuICAgICAnZmVtYWxlJzogeydQYXNzZW5nZXJJZCc6IHsxOiAyLCAyOiAzLCAzOiA0fSxcblxuICAgICAgJ05hbWUnOiB7MTogJ0N1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGhheWVyKScsXG5cbiAgICAgICAyOiAnSGVpa2tpbmVuLCBNaXNzLiBMYWluYScsXG5cbiAgICAgICAzOiAnRnV0cmVsbGUsIE1ycy4gSmFjcXVlcyBIZWF0aCAoTGlseSBNYXkgUGVlbCknfX19XG5cbmBgYFxuXG5cblxuIyMjIGRmLnNfZXhwbG9kZV9saXN0c19hbmRfdHVwbGVzKClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgZXhwbG9kZV9saXN0c19hbmRfdHVwbGVzX2luX2NvbHVtbihkZjogVW5pb25bcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcywgcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXSwgY29sdW1uOiBPcHRpb25hbFtzdHJdID0gTm9uZSwgY29uY2F0X3dpdGhfZGY6IGJvb2wgPSBGYWxzZSkgLT4gcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXG5cbiAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUoeydsa2V5JzogWydmb28nLCAnYmFyJywgJ2JheicsICdmb28nXSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IFsxLCAyLCAzLCA1XX0pXG5cbiAgICAgICAgZ2V0ZGkgPSBsYW1iZGEgeDogWyAgICAocmFuZHJhbmdlKDEsIDQpLCByYW5kcmFuZ2UoMSwgNCkpIGZvciB2IGluIHJhbmdlKHJhbmRyYW5nZSgxLDUpKV0gICNjcmVhdGUgc29tZSByYW5kb20gdHVwbGVzXG5cbiAgICAgICAgZGZbXCJkaWN0dGVzdFwiXSA9IGRmLmxrZXkuYXBwbHkobGFtYmRhIHg6IGdldGRpKHgpKVxuXG4gICAgICAgIHByaW50KGRmKVxuXG4gICAgICAgIGRmMT1kZi5zX2V4cGxvZGVfbGlzdHNfYW5kX3R1cGxlcyhjb2x1bW49J2RpY3R0ZXN0JywgY29uY2F0X3dpdGhfZGY9VHJ1ZSlcblxuICAgICAgICBwcmludChkZjEpXG5cbiAgICAgICAgZGYyPWRmLnNfZXhwbG9kZV9saXN0c19hbmRfdHVwbGVzKGNvbHVtbj0nZGljdHRlc3QnLCBjb25jYXRfd2l0aF9kZj1GYWxzZSlcblxuICAgICAgICBwcmludChkZjIpXG5cbiAgICAgICAgZGYzPWRmLmRpY3R0ZXN0LnNfZXhwbG9kZV9saXN0c19hbmRfdHVwbGVzKGNvbHVtbj1Ob25lKVxuXG4gICAgICAgIHByaW50KGRmMylcblxuXG5cbiAgICAgICAgICBsa2V5ICB2YWx1ZSAgICAgICAgICAgICAgICAgIGRpY3R0ZXN0XG5cbiAgICAgICAgMCAgZm9vICAgICAgMSAgICAgICAgICAgICAgICAgIFsoMywgMyldXG5cbiAgICAgICAgMSAgYmFyICAgICAgMiAgWygyLCAzKSwgKDIsIDEpLCAoMiwgMildXG5cbiAgICAgICAgMiAgYmF6ICAgICAgMyAgICAgICAgICBbKDIsIDMpLCAoMiwgMyldXG5cbiAgICAgICAgMyAgZm9vICAgICAgNSAgICAgICAgICAgICAgICAgIFsoMSwgMildXG5cblxuXG4gICAgICAgICAgbGtleSAgdmFsdWUgICAgICAgICAgICAgICAgICBkaWN0dGVzdCBkaWN0dGVzdF8wIGRpY3R0ZXN0XzEgZGljdHRlc3RfMlxuXG4gICAgICAgIDAgIGZvbyAgICAgIDEgICAgICAgICAgICAgICAgICBbKDMsIDMpXSAgICAgKDMsIDMpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG4gICAgICAgIDEgIGJhciAgICAgIDIgIFsoMiwgMyksICgyLCAxKSwgKDIsIDIpXSAgICAgKDIsIDMpICAgICAoMiwgMSkgICAgICgyLCAyKVxuXG4gICAgICAgIDIgIGJheiAgICAgIDMgICAgICAgICAgWygyLCAzKSwgKDIsIDMpXSAgICAgKDIsIDMpICAgICAoMiwgMykgICAgICAgPE5BPlxuXG4gICAgICAgIDMgIGZvbyAgICAgIDUgICAgICAgICAgICAgICAgICBbKDEsIDIpXSAgICAgKDEsIDIpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG5cblxuICAgICAgICAgIGRpY3R0ZXN0XzAgZGljdHRlc3RfMSBkaWN0dGVzdF8yXG5cbiAgICAgICAgMCAgICAgKDMsIDMpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG4gICAgICAgIDEgICAgICgyLCAzKSAgICAgKDIsIDEpICAgICAoMiwgMilcblxuICAgICAgICAyICAgICAoMiwgMykgICAgICgyLCAzKSAgICAgICA8TkE+XG5cbiAgICAgICAgMyAgICAgKDEsIDIpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG5cblxuICAgICAgICAgIGRpY3R0ZXN0XzAgZGljdHRlc3RfMSBkaWN0dGVzdF8yXG5cbiAgICAgICAgMCAgICAgKDMsIDMpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG4gICAgICAgIDEgICAgICgyLCAzKSAgICAgKDIsIDEpICAgICAoMiwgMilcblxuICAgICAgICAyICAgICAoMiwgMykgICAgICgyLCAzKSAgICAgICA8TkE+XG5cbiAgICAgICAgMyAgICAgKDEsIDIpICAgICAgIDxOQT4gICAgICAgPE5BPlxuXG5cblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmOiBVbmlvbltwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZV1cblxuICAgICAgICAgICAgICAgICAgICBwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZSB3aXRoIGxpc3RzL3R1cGxlcyBpbiBjZWxsc1xuXG4gICAgICAgICAgICAgICAgY29sdW1uOiBVbmlvbltzdHIsIE5vbmVdXG5cbiAgICAgICAgICAgICAgICAgICAgTm9uZSBjYW4gb25seSBiZSB1c2VkIGlmIGEgcGQuU2VyaWVzIGlzIHBhc3NlZC4gSWYgYSBEYXRhRnJhbWUgaXMgcGFzc2VkLCBhIGNvbHVtbiBuZWVkcyB0byBiZSBwYXNzZWQgdG9vLlxuXG4gICAgICAgICAgICAgICAgY29uY2F0X3dpdGhfZGY6IGJvb2xcblxuICAgICAgICAgICAgICAgICAgICBpZiBUcnVlIC0+IHJldHVybnMgZGYgKyBleHBsb2RlZCBTZXJpZXMgYXMgRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgRmFsc2UgLT4gcmV0dXJucyBleHBsb2RlZCBTZXJpZXMgYXMgRGF0YUZyYW1lXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBwZC5EYXRhRnJhbWVcblxuICAgICAgICAgICAgICAgICAgICAgTWlzc2luZyB2YWx1ZXMgYXJlIGZpbGxlZCB3aXRoIHBkLk5BXG5cbmBgYFxuXG5cblxuIyMjIGRmLnNfZmxhdHRlbl9hbGxfaXRlcnNfaW5fY2VsbHMoKVxuXG5cblxuYGBgcHl0aG9uXG5cbiAgICBmbGF0dGVuX2FsbF9pdGVyc19pbl9jZWxscyhkZjogcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcykgLT4gcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllc1xuXG4gICAgICAgIGRmID0gcGQuRGF0YUZyYW1lKHsnbGtleSc6IFsnZm9vJywgJ2JhcicsICdiYXonLCAnZm9vJ10sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IFsxLCAyLCAzLCA1XX0pXG5cbiAgICAgICAgZ2V0ZGkgPSBsYW1iZGEgeDogWyAgICAocmFuZHJhbmdlKDEsIDQpLCByYW5kcmFuZ2UoMSwgNCkpIGZvciB2IGluIHJhbmdlKDIwKV0gICNjcmVhdGUgc29tZSByYW5kb20gdHVwbGVzXG5cbiAgICAgICAgZGZbXCJkaWN0dGVzdFwiXSA9IGRmLmxrZXkuYXBwbHkobGFtYmRhIHg6IGdldGRpKHgpKVxuXG4gICAgICAgIHByaW50KGRmKVxuXG4gICAgICAgIGRmW1wiZGljdHRlc3RcIl09ZGYuZGljdHRlc3Quc19mbGF0dGVuX2FsbF9pdGVyc19pbl9jZWxscygpXG5cbiAgICAgICAgcHJpbnQoZGYpXG5cbiAgICAgICAgICBsa2V5ICB2YWx1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWN0dGVzdFxuXG4gICAgICAgIDAgIGZvbyAgICAgIDEgIFsoMiwgMiksICgzLCAzKSwgKDMsIDIpLCAoMSwgMyksICgxLCAyKSwgKDIsIDIuLi5cblxuICAgICAgICAxICBiYXIgICAgICAyICBbKDEsIDEpLCAoMywgMSksICgxLCAzKSwgKDMsIDIpLCAoMywgMSksICgyLCAyLi4uXG5cbiAgICAgICAgMiAgYmF6ICAgICAgMyAgWygzLCAxKSwgKDEsIDEpLCAoMywgMyksICgxLCAzKSwgKDMsIDIpLCAoMywgMy4uLlxuXG4gICAgICAgIDMgIGZvbyAgICAgIDUgIFsoMywgMyksICgzLCAzKSwgKDMsIDIpLCAoMiwgMyksICgzLCAzKSwgKDIsIDMuLi5cblxuICAgICAgICAgIGxrZXkgIHZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpY3R0ZXN0XG5cbiAgICAgICAgMCAgZm9vICAgICAgMSAgWzIsIDIsIDMsIDMsIDMsIDIsIDEsIDMsIDEsIDIsIDIsIDIsIDEsIDMsIDEsIC4uLlxuXG4gICAgICAgIDEgIGJhciAgICAgIDIgIFsxLCAxLCAzLCAxLCAxLCAzLCAzLCAyLCAzLCAxLCAyLCAyLCAzLCAxLCAzLCAuLi5cblxuICAgICAgICAyICBiYXogICAgICAzICBbMywgMSwgMSwgMSwgMywgMywgMSwgMywgMywgMiwgMywgMywgMSwgMywgMSwgLi4uXG5cbiAgICAgICAgMyAgZm9vICAgICAgNSAgWzMsIDMsIDMsIDMsIDMsIDIsIDIsIDMsIDMsIDMsIDIsIDMsIDMsIDMsIDMsIC4uLlxuXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOlxuXG4gICAgICAgICAgICBkZiA6IHBkLlNlcmllc1xuXG4gICAgICAgICAgICAgICAgQ29sdW1uIHdpdGggZHVwbGljYXRlcyB0aGF0IGFyZSBkaWZmaWN1bHQgdG8gaGFuZGxlXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBwZC5TZXJpZXNcblxuYGBgXG5cblxuXG4jIyMgZGYuZF9tdWx0aXBsZV9jb2x1bW5zX3RvX29uZSgpXG5cblxuXG5gYGBweXRob25cblxuICAgIG1ha2Vfc2V2ZXJhbF9jb2x1bW5zX2ZpdF9pbl9vbmUoZGY6IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZSwgY29sdW1uczogbGlzdCkgLT4gbGlzdFxuXG4gICAgICAgIGRmID0gcGQucmVhZF9jc3YoXG5cbiAgICAgICAgXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiXG5cbiAgICAgICAgKVs6MjBdXG5cbiAgICAgICAgcHJpbnQoZGYpXG5cbiAgICAgICAgZGZbJ1RpY2tldF9GYXJlX0VtYmFya2VkJ10gPSBkZi5kX211bHRpcGxlX2NvbHVtbnNfdG9fb25lKGNvbHVtbnM9WydUaWNrZXQnLCdGYXJlJywgJ0VtYmFya2VkJ10pXG5cbiAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAxICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJyYXVuZCwgTXIuIE93ZW4gSGFycmlzICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICBBLzUgMjExNzEgICA3LjI1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMSAgICAgICAgICAgICAyICAgICAgICAgMSAgICAgICAxICBDdW1pbmdzLCBNcnMuIEpvaG4gQnJhZGxleSAoRmxvcmVuY2UgQnJpZ2dzIFRoLi4uICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgUEMgMTc1OTkgIDcxLjI4MzMgICBDODUgICAgICAgICBDXG5cbiAgICAgICAgMiAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICA0ICAgICAgICAgMSAgICAgICAxICAgICAgIEZ1dHJlbGxlLCBNcnMuIEphY3F1ZXMgSGVhdGggKExpbHkgTWF5IFBlZWwpICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTM4MDMgIDUzLjEwMDAgIEMxMjMgICAgICAgICBTXG5cbiAgICAgICAgNCAgICAgICAgICAgICA1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzNzM0NTAgICA4LjA1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgNSAgICAgICAgICAgICA2ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3JhbiwgTXIuIEphbWVzICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzMzA4NzcgICA4LjQ1ODMgICBOYU4gICAgICAgICBRXG5cbiAgICAgICAgNiAgICAgICAgICAgICA3ICAgICAgICAgMCAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1jQ2FydGh5LCBNci4gVGltb3RoeSBKICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAgMTc0NjMgIDUxLjg2MjUgICBFNDYgICAgICAgICBTXG5cbiAgICAgICAgNyAgICAgICAgICAgICA4ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgUGFsc3NvbiwgTWFzdGVyLiBHb3N0YSBMZW9uYXJkICAgIG1hbGUgIC4uLiAgICAgIDEgICAgICAgICAgICAzNDk5MDkgIDIxLjA3NTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgOCAgICAgICAgICAgICA5ICAgICAgICAgMSAgICAgICAzICBKb2huc29uLCBNcnMuIE9zY2FyIFcgKEVsaXNhYmV0aCBWaWxoZWxtaW5hIEJlcmcpICBmZW1hbGUgIC4uLiAgICAgIDIgICAgICAgICAgICAzNDc3NDIgIDExLjEzMzMgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgOSAgICAgICAgICAgIDEwICAgICAgICAgMSAgICAgICAyICAgICAgICAgICAgICAgIE5hc3NlciwgTXJzLiBOaWNob2xhcyAoQWRlbGUgQWNoZW0pICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAyMzc3MzYgIDMwLjA3MDggICBOYU4gICAgICAgICBDXG5cbiAgICAgICAgMTAgICAgICAgICAgIDExICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICBTYW5kc3Ryb20sIE1pc3MuIE1hcmd1ZXJpdGUgUnV0ICBmZW1hbGUgIC4uLiAgICAgIDEgICAgICAgICAgIFBQIDk1NDkgIDE2LjcwMDAgICAgRzYgICAgICAgICBTXG5cbiAgICAgICAgMTEgICAgICAgICAgIDEyICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgQm9ubmVsbCwgTWlzcy4gRWxpemFiZXRoICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTM3ODMgIDI2LjU1MDAgIEMxMDMgICAgICAgICBTXG5cbiAgICAgICAgMTIgICAgICAgICAgIDEzICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgU2F1bmRlcmNvY2ssIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICBBLzUuIDIxNTEgICA4LjA1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTMgICAgICAgICAgIDE0ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgQW5kZXJzc29uLCBNci4gQW5kZXJzIEpvaGFuICAgIG1hbGUgIC4uLiAgICAgIDUgICAgICAgICAgICAzNDcwODIgIDMxLjI3NTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTQgICAgICAgICAgIDE1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgVmVzdHJvbSwgTWlzcy4gSHVsZGEgQW1hbmRhIEFkb2xmaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzNTA0MDYgICA3Ljg1NDIgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTUgICAgICAgICAgIDE2ICAgICAgICAgMSAgICAgICAyICAgICAgICAgICAgICAgICAgIEhld2xldHQsIE1ycy4gKE1hcnkgRCBLaW5nY29tZSkgICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAyNDg3MDYgIDE2LjAwMDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTYgICAgICAgICAgIDE3ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJpY2UsIE1hc3Rlci4gRXVnZW5lICAgIG1hbGUgIC4uLiAgICAgIDEgICAgICAgICAgICAzODI2NTIgIDI5LjEyNTAgICBOYU4gICAgICAgICBRXG5cbiAgICAgICAgMTcgICAgICAgICAgIDE4ICAgICAgICAgMSAgICAgICAyICAgICAgICAgICAgICAgICAgICAgICBXaWxsaWFtcywgTXIuIENoYXJsZXMgRXVnZW5lICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAyNDQzNzMgIDEzLjAwMDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTggICAgICAgICAgIDE5ICAgICAgICAgMCAgICAgICAzICBWYW5kZXIgUGxhbmtlLCBNcnMuIEp1bGl1cyAoRW1lbGlhIE1hcmlhIFZhbmRlLi4uICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzNDU3NjMgIDE4LjAwMDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMTkgICAgICAgICAgIDIwICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hc3NlbG1hbmksIE1ycy4gRmF0aW1hICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAgIDI2NDkgICA3LjIyNTAgICBOYU4gICAgICAgICBDXG5cbiAgICAgICAgWzIwIHJvd3MgeCAxMiBjb2x1bW5zXVxuXG4gICAgICAgIGRmXG5cbiAgICAgICAgT3V0WzMwXTpcblxuICAgICAgICAgICAgUGFzc2VuZ2VySWQgIFN1cnZpdmVkICBQY2xhc3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgICAgIFNleCAgLi4uICAgICAgICAgICAgVGlja2V0ICAgICBGYXJlICBDYWJpbiBFbWJhcmtlZCAgICAgICAgICBUaWNrZXRfRmFyZV9FbWJhcmtlZFxuXG4gICAgICAgIDAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAgICBBLzUgMjExNzEgICA3LjI1MDAgICAgTmFOICAgICAgICBTICAgICAgICAgIFtBLzUgMjExNzEsIDcuMjUsIFNdXG5cbiAgICAgICAgMSAgICAgICAgICAgICAyICAgICAgICAgMSAgICAgICAxICBDdW1pbmdzLCBNcnMuIEpvaG4gQnJhZGxleSAoRmxvcmVuY2UgQnJpZ2dzIFRoLi4uICBmZW1hbGUgIC4uLiAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgICBDODUgICAgICAgIEMgICAgICAgIFtQQyAxNzU5OSwgNzEuMjgzMywgQ11cblxuICAgICAgICAyICAgICAgICAgICAgIDMgICAgICAgICAxICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlaWtraW5lbiwgTWlzcy4gTGFpbmEgIGZlbWFsZSAgLi4uICBTVE9OL08yLiAzMTAxMjgyICAgNy45MjUwICAgIE5hTiAgICAgICAgUyAgW1NUT04vTzIuIDMxMDEyODIsIDcuOTI1LCBTXVxuXG4gICAgICAgIDMgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAgICAgICAxMTM4MDMgIDUzLjEwMDAgICBDMTIzICAgICAgICBTICAgICAgICAgICAgIFsxMTM4MDMsIDUzLjEsIFNdXG5cbiAgICAgICAgNCAgICAgICAgICAgICA1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgICBOYU4gICAgICAgIFMgICAgICAgICAgICAgWzM3MzQ1MCwgOC4wNSwgU11cblxuICAgICAgICA1ICAgICAgICAgICAgIDYgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vcmFuLCBNci4gSmFtZXMgICAgbWFsZSAgLi4uICAgICAgICAgICAgMzMwODc3ICAgOC40NTgzICAgIE5hTiAgICAgICAgUSAgICAgICAgICAgWzMzMDg3NywgOC40NTgzLCBRXVxuXG4gICAgICAgIDYgICAgICAgICAgICAgNyAgICAgICAgIDAgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICBNY0NhcnRoeSwgTXIuIFRpbW90aHkgSiAgICBtYWxlICAuLi4gICAgICAgICAgICAgMTc0NjMgIDUxLjg2MjUgICAgRTQ2ICAgICAgICBTICAgICAgICAgICBbMTc0NjMsIDUxLjg2MjUsIFNdXG5cbiAgICAgICAgNyAgICAgICAgICAgICA4ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgUGFsc3NvbiwgTWFzdGVyLiBHb3N0YSBMZW9uYXJkICAgIG1hbGUgIC4uLiAgICAgICAgICAgIDM0OTkwOSAgMjEuMDc1MCAgICBOYU4gICAgICAgIFMgICAgICAgICAgIFszNDk5MDksIDIxLjA3NSwgU11cblxuICAgICAgICA4ICAgICAgICAgICAgIDkgICAgICAgICAxICAgICAgIDMgIEpvaG5zb24sIE1ycy4gT3NjYXIgVyAoRWxpc2FiZXRoIFZpbGhlbG1pbmEgQmVyZykgIGZlbWFsZSAgLi4uICAgICAgICAgICAgMzQ3NzQyICAxMS4xMzMzICAgIE5hTiAgICAgICAgUyAgICAgICAgICBbMzQ3NzQyLCAxMS4xMzMzLCBTXVxuXG4gICAgICAgIDkgICAgICAgICAgICAxMCAgICAgICAgIDEgICAgICAgMiAgICAgICAgICAgICAgICBOYXNzZXIsIE1ycy4gTmljaG9sYXMgKEFkZWxlIEFjaGVtKSAgZmVtYWxlICAuLi4gICAgICAgICAgICAyMzc3MzYgIDMwLjA3MDggICAgTmFOICAgICAgICBDICAgICAgICAgIFsyMzc3MzYsIDMwLjA3MDgsIENdXG5cbiAgICAgICAgMTAgICAgICAgICAgIDExICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICBTYW5kc3Ryb20sIE1pc3MuIE1hcmd1ZXJpdGUgUnV0ICBmZW1hbGUgIC4uLiAgICAgICAgICAgUFAgOTU0OSAgMTYuNzAwMCAgICAgRzYgICAgICAgIFMgICAgICAgICAgICBbUFAgOTU0OSwgMTYuNywgU11cblxuICAgICAgICAxMSAgICAgICAgICAgMTIgICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICAgICBCb25uZWxsLCBNaXNzLiBFbGl6YWJldGggIGZlbWFsZSAgLi4uICAgICAgICAgICAgMTEzNzgzICAyNi41NTAwICAgQzEwMyAgICAgICAgUyAgICAgICAgICAgIFsxMTM3ODMsIDI2LjU1LCBTXVxuXG4gICAgICAgIDEyICAgICAgICAgICAxMyAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgIFNhdW5kZXJjb2NrLCBNci4gV2lsbGlhbSBIZW5yeSAgICBtYWxlICAuLi4gICAgICAgICBBLzUuIDIxNTEgICA4LjA1MDAgICAgTmFOICAgICAgICBTICAgICAgICAgIFtBLzUuIDIxNTEsIDguMDUsIFNdXG5cbiAgICAgICAgMTMgICAgICAgICAgIDE0ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgQW5kZXJzc29uLCBNci4gQW5kZXJzIEpvaGFuICAgIG1hbGUgIC4uLiAgICAgICAgICAgIDM0NzA4MiAgMzEuMjc1MCAgICBOYU4gICAgICAgIFMgICAgICAgICAgIFszNDcwODIsIDMxLjI3NSwgU11cblxuICAgICAgICAxNCAgICAgICAgICAgMTUgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICBWZXN0cm9tLCBNaXNzLiBIdWxkYSBBbWFuZGEgQWRvbGZpbmEgIGZlbWFsZSAgLi4uICAgICAgICAgICAgMzUwNDA2ICAgNy44NTQyICAgIE5hTiAgICAgICAgUyAgICAgICAgICAgWzM1MDQwNiwgNy44NTQyLCBTXVxuXG4gICAgICAgIDE1ICAgICAgICAgICAxNiAgICAgICAgIDEgICAgICAgMiAgICAgICAgICAgICAgICAgICBIZXdsZXR0LCBNcnMuIChNYXJ5IEQgS2luZ2NvbWUpICAgZmVtYWxlICAuLi4gICAgICAgICAgICAyNDg3MDYgIDE2LjAwMDAgICAgTmFOICAgICAgICBTICAgICAgICAgICAgIFsyNDg3MDYsIDE2LjAsIFNdXG5cbiAgICAgICAgMTYgICAgICAgICAgIDE3ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJpY2UsIE1hc3Rlci4gRXVnZW5lICAgIG1hbGUgIC4uLiAgICAgICAgICAgIDM4MjY1MiAgMjkuMTI1MCAgICBOYU4gICAgICAgIFEgICAgICAgICAgIFszODI2NTIsIDI5LjEyNSwgUV1cblxuICAgICAgICAxNyAgICAgICAgICAgMTggICAgICAgICAxICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgIFdpbGxpYW1zLCBNci4gQ2hhcmxlcyBFdWdlbmUgICAgbWFsZSAgLi4uICAgICAgICAgICAgMjQ0MzczICAxMy4wMDAwICAgIE5hTiAgICAgICAgUyAgICAgICAgICAgICBbMjQ0MzczLCAxMy4wLCBTXVxuXG4gICAgICAgIDE4ICAgICAgICAgICAxOSAgICAgICAgIDAgICAgICAgMyAgVmFuZGVyIFBsYW5rZSwgTXJzLiBKdWxpdXMgKEVtZWxpYSBNYXJpYSBWYW5kZS4uLiAgZmVtYWxlICAuLi4gICAgICAgICAgICAzNDU3NjMgIDE4LjAwMDAgICAgTmFOICAgICAgICBTICAgICAgICAgICAgIFszNDU3NjMsIDE4LjAsIFNdXG5cbiAgICAgICAgMTkgICAgICAgICAgIDIwICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hc3NlbG1hbmksIE1ycy4gRmF0aW1hICBmZW1hbGUgIC4uLiAgICAgICAgICAgICAgMjY0OSAgIDcuMjI1MCAgICBOYU4gICAgICAgIEMgICAgICAgICAgICAgIFsyNjQ5LCA3LjIyNSwgQ11cblxuICAgICAgICBbMjAgcm93cyB4IDEzIGNvbHVtbnNdXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgICAgICBkZjogcGQuRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICAgICAgRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICBjb2x1bW5zOiBsaXN0XG5cbiAgICAgICAgICAgICAgICAgICAgY29sdW1ucyB0byBzcXVlZXplXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBsaXN0XG5cbmBgYFxuXG5cblxuIyMjIGRmLmRzX25vcm1hbGl6ZV9saXN0cygpXG5cblxuXG5gYGBweXRob25cblxuICAgIG5vcm1hbGl6ZV9saXN0c19pbl9jb2x1bW5fZW5kX3VzZXIoZGY6IFVuaW9uW3BhbmRhcy5jb3JlLnNlcmllcy5TZXJpZXMsIHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZV0sIGNvbHVtbjogT3B0aW9uYWxbc3RyXSA9IE5vbmUpIC0+IHBhbmRhcy5jb3JlLnNlcmllcy5TZXJpZXNcblxuICAgICAgICBkZiA9IHBkLkRhdGFGcmFtZSh7J2xrZXknOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbMSwgMiwgMywgNV19KVxuXG4gICAgICAgIGdldGRpID0gbGFtYmRhIHg6IFsgICAgKHJhbmRyYW5nZSgxLCA0KSwgcmFuZHJhbmdlKDEsIDQpKSBmb3IgdiBpbiByYW5nZShyYW5kcmFuZ2UoMSw1KSldICAjY3JlYXRlIHNvbWUgcmFuZG9tIHR1cGxlc1xuXG4gICAgICAgIGRmW1wiZGljdHRlc3RcIl0gPSBkZi5sa2V5LmFwcGx5KGxhbWJkYSB4OiBnZXRkaSh4KSlcblxuICAgICAgICBwcmludChkZilcblxuICAgICAgICBkZjE9ZGYuZHNfbm9ybWFsaXplX2xpc3RzKGNvbHVtbj0nZGljdHRlc3QnKVxuXG4gICAgICAgIHByaW50KGRmMSlcblxuICAgICAgICBkZjI9ZGYuZGljdHRlc3QuZHNfbm9ybWFsaXplX2xpc3RzKGNvbHVtbj0nZGljdHRlc3QnKVxuXG4gICAgICAgIHByaW50KGRmMilcblxuXG5cbiAgICAgICAgICBsa2V5ICB2YWx1ZSAgICAgICAgICBkaWN0dGVzdFxuXG4gICAgICAgIDAgIGZvbyAgICAgIDEgICAgICAgICAgWygzLCAyKV1cblxuICAgICAgICAxICBiYXIgICAgICAyICAgICAgICAgIFsoMywgMSldXG5cbiAgICAgICAgMiAgYmF6ICAgICAgMyAgWygzLCAyKSwgKDMsIDMpXVxuXG4gICAgICAgIDMgIGZvbyAgICAgIDUgIFsoMiwgMyksICgyLCAxKV1cblxuXG5cbiAgICAgICAgMCAgICAgIFsoMywgMiksIDxOQT5dXG5cbiAgICAgICAgMSAgICAgIFsoMywgMSksIDxOQT5dXG5cbiAgICAgICAgMiAgICBbKDMsIDIpLCAoMywgMyldXG5cbiAgICAgICAgMyAgICBbKDIsIDMpLCAoMiwgMSldXG5cbiAgICAgICAgTmFtZTogZGljdHRlc3QsIGR0eXBlOiBvYmplY3RcblxuXG5cbiAgICAgICAgMCAgICAgIFsoMywgMiksIDxOQT5dXG5cbiAgICAgICAgMSAgICAgIFsoMywgMSksIDxOQT5dXG5cbiAgICAgICAgMiAgICBbKDMsIDIpLCAoMywgMyldXG5cbiAgICAgICAgMyAgICBbKDIsIDMpLCAoMiwgMSldXG5cbiAgICAgICAgTmFtZTogZGljdHRlc3QsIGR0eXBlOiBvYmplY3RcblxuXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgICAgICBkZjogVW5pb25bcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWVdXG5cbiAgICAgICAgICAgICAgICAgICAgcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWUgd2l0aCBsaXN0cy90dXBsZXMgaW4gY2VsbHNcblxuICAgICAgICAgICAgICAgIGNvbHVtbjogVW5pb25bc3RyLCBOb25lXVxuXG4gICAgICAgICAgICAgICAgICAgIE5vbmUgY2FuIG9ubHkgYmUgdXNlZCBpZiBhIHBkLlNlcmllcyBpcyBwYXNzZWQuIElmIGEgRGF0YUZyYW1lIGlzIHBhc3NlZCwgYSBjb2x1bW4gbmVlZHMgdG8gYmUgcGFzc2VkIHRvby5cblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgICAgICBNaXNzaW5nIHZhbHVlcyBhcmUgZmlsbGVkIHdpdGggcGQuTkFcblxuYGBgXG5cblxuXG4jIyMgZGYuZF9tZXJnZV9tdWx0aXBsZV9kZnNfYW5kX3Nlcmllc19vbl9pbmRleCgpIC8gZGYuZF9tZXJnZV9tdWx0aXBsZV9kZnNfYW5kX3Nlcmllc19vbl9vbmVfY29sdW1uKClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgcXFfZHNfbWVyZ2VfbXVsdGlwbGVfZGZzX2FuZF9zZXJpZXNfb25faW5kZXgoZGY6IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZSwgbGlzdF93aXRoX2RzOiBsaXN0W3R5cGluZy5VbmlvbltwYW5kYXMuY29yZS5zZXJpZXMuU2VyaWVzLCBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWVdXSwgaG93PSdpbm5lcicsIG9uPU5vbmUsIHNvcnQ9RmFsc2UsIHN1ZmZpeGVzPSgnX3gnLCAnX3knKSwgaW5kaWNhdG9yPUZhbHNlLCB2YWxpZGF0ZT1Ob25lKSAtPiBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWVcblxuICAgICAgICBkZjEgPSBwZC5EYXRhRnJhbWUoeydsa2V5YWFhYWFhYWFhYWFhYWFhYWFhJzogWydmb28nLCAnYmFyJywgJ2JheicsICdmb28nXSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzEsIDIsIDMsIDVdfSlcblxuICAgICAgICBkZjIgPSBwZC5EYXRhRnJhbWUoeydsa2V5YmJiYmJiYmJiYic6IFsnZm9vJywgJ2JhcicsICdiYXonLCAnZm9vJ10sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbNSwgNiwgNywgOF19KVxuXG4gICAgICAgIGRmMyA9IHBkLkRhdGFGcmFtZSh7J2xrZXljY2NjY2NjY2NjY2NjY2MnOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzE1LCAxNiwgMTcsIDE4XX0pXG5cbiAgICAgICAgZGY0ID0gcGQuRGF0YUZyYW1lKHsnbGtleWRkZGRkZGRkZGRkZGQnOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzExNSwgMTE2LCAxMTcsIDExOF19KVxuXG4gICAgICAgIGRmNSA9IHBkLkRhdGFGcmFtZSh7J2xrZXllZWVlZSc6IFsnZm9vJywgJ2JhcicsICdiYXonLCAnZm9vJ10sXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbMTExNSwgMTExNiwgMTExNywgMTExOF19KVxuXG4gICAgICAgIGRmMS5kX21lcmdlX211bHRpcGxlX2Rmc19hbmRfc2VyaWVzX29uX2luZGV4KGxpc3Rfd2l0aF9kcz1bZGYyLGRmMyxkZjQsZGY1XSwgaG93PVwib3V0ZXJcIilcblxuICAgICAgICBPdXRbODVdOlxuXG4gICAgICAgICAgbGtleWFhYWFhYWFhYWFhYWFhYWFhYSAgdmFsdWVfeF8wMDAgbGtleWJiYmJiYmJiYmIgIHZhbHVlX3lfMDAwIGxrZXljY2NjY2NjY2NjY2NjY2MgIHZhbHVlX3hfMDAyIGxrZXlkZGRkZGRkZGRkZGRkICB2YWx1ZV95XzAwMiBsa2V5ZWVlZWUgIHZhbHVlXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgICAgICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIGZvbyAgICAgICAgICAgIDUgICAgICAgICAgICAgICAgIGZvbyAgICAgICAgICAgMTUgICAgICAgICAgICAgICBmb28gICAgICAgICAgMTE1ICAgICAgIGZvbyAgIDExMTVcblxuICAgICAgICAxICAgICAgICAgICAgICAgICAgICBiYXIgICAgICAgICAgICAyICAgICAgICAgICAgYmFyICAgICAgICAgICAgNiAgICAgICAgICAgICAgICAgYmFyICAgICAgICAgICAxNiAgICAgICAgICAgICAgIGJhciAgICAgICAgICAxMTYgICAgICAgYmFyICAgMTExNlxuXG4gICAgICAgIDIgICAgICAgICAgICAgICAgICAgIGJheiAgICAgICAgICAgIDMgICAgICAgICAgICBiYXogICAgICAgICAgICA3ICAgICAgICAgICAgICAgICBiYXogICAgICAgICAgIDE3ICAgICAgICAgICAgICAgYmF6ICAgICAgICAgIDExNyAgICAgICBiYXogICAxMTE3XG5cbiAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIGZvbyAgICAgICAgICAgIDggICAgICAgICAgICAgICAgIGZvbyAgICAgICAgICAgMTggICAgICAgICAgICAgICBmb28gICAgICAgICAgMTE4ICAgICAgIGZvbyAgIDExMThcblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmIDogcGQuRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICAgICAgRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICBsaXN0X3dpdGhfZHM6IGxpc3RbVW5pb25bcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWVdXVxuXG4gICAgICAgICAgICAgICAgICAgIEEgbGlzdCBvZiBEYXRhRnJhbWVzIGFuZCBTZXJpZXMgeW91IHdhbnQgdG8gbWVyZ2VcblxuICAgICAgICAgICAgICAgIGhvdzogaHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy9kb2NzL3JlZmVyZW5jZS9hcGkvcGFuZGFzLkRhdGFGcmFtZS5tZXJnZS5odG1sXG5cbiAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQgPSBcImlubmVyXCIgIClcblxuICAgICAgICAgICAgICAgIG9uOiBodHRwczovL3BhbmRhcy5weWRhdGEub3JnL2RvY3MvcmVmZXJlbmNlL2FwaS9wYW5kYXMuRGF0YUZyYW1lLm1lcmdlLmh0bWxcblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9IE5vbmUgIClcblxuICAgICAgICAgICAgICAgIHNvcnQ6IGh0dHBzOi8vcGFuZGFzLnB5ZGF0YS5vcmcvZG9jcy9yZWZlcmVuY2UvYXBpL3BhbmRhcy5EYXRhRnJhbWUubWVyZ2UuaHRtbFxuXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0ID0gRmFsc2UgIClcblxuICAgICAgICAgICAgICAgIHN1ZmZpeGVzOiBodHRwczovL3BhbmRhcy5weWRhdGEub3JnL2RvY3MvcmVmZXJlbmNlL2FwaS9wYW5kYXMuRGF0YUZyYW1lLm1lcmdlLmh0bWxcblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9IChcIl94XCIsIFwiX3lcIikpXG5cbiAgICAgICAgICAgICAgICBpbmRpY2F0b3I6IGh0dHBzOi8vcGFuZGFzLnB5ZGF0YS5vcmcvZG9jcy9yZWZlcmVuY2UvYXBpL3BhbmRhcy5EYXRhRnJhbWUubWVyZ2UuaHRtbFxuXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0ID0gRmFsc2UgIClcblxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBodHRwczovL3BhbmRhcy5weWRhdGEub3JnL2RvY3MvcmVmZXJlbmNlL2FwaS9wYW5kYXMuRGF0YUZyYW1lLm1lcmdlLmh0bWxcblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9IE5vbmUgIClcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgcXFfZHNfbWVyZ2VfbXVsdGlwbGVfZGZzX2FuZF9zZXJpZXNfb25fY29sdW1uKGRmOiBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWUsIGxpc3Rfd2l0aF9kczogbGlzdFt0eXBpbmcuVW5pb25bcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcywgcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXV0sIGNvbHVtbjogc3RyLCBob3c9J2lubmVyJywgc29ydD1GYWxzZSwgc3VmZml4ZXM9KCdfeCcsICdfeScpLCBpbmRpY2F0b3I9RmFsc2UsIHZhbGlkYXRlPU5vbmUpIC0+IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZVxuXG4gICAgICAgIGRmMSA9IHBkLkRhdGFGcmFtZSh7J2xrZXknOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAndmFsdWUnOiBbMSwgMiwgMywgNV19KVxuXG4gICAgICAgIGRmMiA9IHBkLkRhdGFGcmFtZSh7J2xrZXknOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzUsIDYsIDcsIDhdfSlcblxuICAgICAgICBkZjMgPSBwZC5EYXRhRnJhbWUoeydsa2V5JzogWydmb28nLCAnYmFyJywgJ2JheicsICdmb28nXSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd2YWx1ZSc6IFsxNSwgMTYsIDE3LCAxOF19KVxuXG4gICAgICAgIGRmNCA9IHBkLkRhdGFGcmFtZSh7J2xrZXknOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzExNSwgMTE2LCAxMTcsIDExOF19KVxuXG4gICAgICAgIGRmNSA9IHBkLkRhdGFGcmFtZSh7J2xrZXknOiBbJ2ZvbycsICdiYXInLCAnYmF6JywgJ2ZvbyddLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzExMTUsIDExMTYsIDExMTcsIDExMThdfSlcblxuICAgICAgICBkZjEuZF9tZXJnZV9tdWx0aXBsZV9kZnNfYW5kX3Nlcmllc19vbl9vbmVfY29sdW1uKGxpc3Rfd2l0aF9kcz1bZGYyLGRmMyxkZjQsZGY1XSxjb2x1bW49J2xrZXknLCAgICBob3c9XCJvdXRlclwiLFxuXG4gICAgICAgICAgICBzb3J0PUZhbHNlLFxuXG4gICAgICAgICAgICBzdWZmaXhlcz0oXCJfeFwiLCBcIl95XCIpLFxuXG4gICAgICAgICAgICBpbmRpY2F0b3I9RmFsc2UsXG5cbiAgICAgICAgICAgIHZhbGlkYXRlPU5vbmUsKVxuXG5cblxuICAgICAgICAgICBsa2V5ICB2YWx1ZV94XzAwMCAgdmFsdWVfeV8wMDAgIHZhbHVlX3hfMDAyICB2YWx1ZV95XzAwMiAgdmFsdWVcblxuICAgICAgICAwICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAxICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAyICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAzICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICA0ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICA1ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICA2ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICA3ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICA4ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICA5ICAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAxMCAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAxMSAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAxMiAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAxMyAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAxNCAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAxNSAgZm9vICAgICAgICAgICAgMSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAxNiAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAxNyAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAxOCAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAxOSAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAyMCAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAyMSAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAyMiAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAyMyAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDUgICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAyNCAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAyNSAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAyNiAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAyNyAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE1ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAyOCAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMTVcblxuICAgICAgICAyOSAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExNSAgIDExMThcblxuICAgICAgICAzMCAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMTVcblxuICAgICAgICAzMSAgZm9vICAgICAgICAgICAgNSAgICAgICAgICAgIDggICAgICAgICAgIDE4ICAgICAgICAgIDExOCAgIDExMThcblxuICAgICAgICAzMiAgYmFyICAgICAgICAgICAgMiAgICAgICAgICAgIDYgICAgICAgICAgIDE2ICAgICAgICAgIDExNiAgIDExMTZcblxuICAgICAgICAzMyAgYmF6ICAgICAgICAgICAgMyAgICAgICAgICAgIDcgICAgICAgICAgIDE3ICAgICAgICAgIDExNyAgIDExMTdcblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmOnBkLkRhdGFGcmFtZTpcblxuICAgICAgICAgICAgICAgICAgICBEYXRhRnJhbWVcblxuICAgICAgICAgICAgICAgIGxpc3Rfd2l0aF9kczpsaXN0W1VuaW9uW3BkLlNlcmllcywgcGQuRGF0YUZyYW1lXV1cblxuICAgICAgICAgICAgICAgICAgICBBIGxpc3Qgb2YgRGF0YUZyYW1lcyBhbmQgU2VyaWVzIHlvdSB3YW50IHRvIG1lcmdlXG5cbiAgICAgICAgICAgICAgICBjb2x1bW46c3RyXG5cbiAgICAgICAgICAgICAgICAgICAgQ29sdW1uIHRvIG1lcmdlIG9uIC0gaGFzIHRvIGJlIHByZXNlbnQgaW4gZXZlcnkgZGZcblxuICAgICAgICAgICAgICAgIGhvdzogaHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy9kb2NzL3JlZmVyZW5jZS9hcGkvcGFuZGFzLkRhdGFGcmFtZS5tZXJnZS5odG1sXG5cbiAgICAgICAgICAgICAgICAgICAgKGRlZmF1bHQgPSBcImlubmVyXCIgIClcblxuICAgICAgICAgICAgICAgIHNvcnQ6IGh0dHBzOi8vcGFuZGFzLnB5ZGF0YS5vcmcvZG9jcy9yZWZlcmVuY2UvYXBpL3BhbmRhcy5EYXRhRnJhbWUubWVyZ2UuaHRtbFxuXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0ID0gRmFsc2UgIClcblxuICAgICAgICAgICAgICAgIHN1ZmZpeGVzOiBodHRwczovL3BhbmRhcy5weWRhdGEub3JnL2RvY3MvcmVmZXJlbmNlL2FwaS9wYW5kYXMuRGF0YUZyYW1lLm1lcmdlLmh0bWxcblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9IChcIl94XCIsIFwiX3lcIikpXG5cbiAgICAgICAgICAgICAgICBpbmRpY2F0b3I6IGh0dHBzOi8vcGFuZGFzLnB5ZGF0YS5vcmcvZG9jcy9yZWZlcmVuY2UvYXBpL3BhbmRhcy5EYXRhRnJhbWUubWVyZ2UuaHRtbFxuXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0ID0gRmFsc2UgIClcblxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiBodHRwczovL3BhbmRhcy5weWRhdGEub3JnL2RvY3MvcmVmZXJlbmNlL2FwaS9wYW5kYXMuRGF0YUZyYW1lLm1lcmdlLmh0bWxcblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9IE5vbmUgIClcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbiMjIyBkZi5kaWN0dGVzdC5zX2FzX2ZsYXR0ZW5lZF9saXN0KClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgc2VyaWVzX2FzX2ZsYXR0ZW5lZF9saXN0KGRmKSAtPiBsaXN0XG5cbiAgICAgICAgZGYgPSBwZC5EYXRhRnJhbWUoeydsa2V5JzogWydmb28nLCAnYmFyJywgJ2JheicsICdmb28nXSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgJ3ZhbHVlJzogWzEsIDIsIDMsIDVdfSlcblxuICAgICAgICBnZXRkaSA9IGxhbWJkYSB4OiBbICAgIChyYW5kcmFuZ2UoMSwgNCksIHJhbmRyYW5nZSgxLCA0KSkgZm9yIHYgaW4gcmFuZ2UoMjApXSAgI2NyZWF0ZSBzb21lIHJhbmRvbSB0dXBsZXNcblxuICAgICAgICBkZltcImRpY3R0ZXN0XCJdID0gZGYubGtleS5hcHBseShsYW1iZGEgeDogZ2V0ZGkoeCkpXG5cbiAgICAgICAgcHJpbnQoZGYpXG5cblxuXG4gICAgICAgIGxrZXkgIHZhbHVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpY3R0ZXN0XG5cbiAgICAgICAgMCAgZm9vICAgICAgMSAgWygzLCAyKSwgKDMsIDMpLCAoMywgMSksICgxLCAyKSwgKDIsIDEpLCAoMywgMi4uLlxuXG4gICAgICAgIDEgIGJhciAgICAgIDIgIFsoMSwgMyksICgzLCAzKSwgKDEsIDIpLCAoMywgMyksICgyLCAzKSwgKDEsIDMuLi5cblxuICAgICAgICAyICBiYXogICAgICAzICBbKDEsIDEpLCAoMSwgMSksICgzLCAzKSwgKDEsIDIpLCAoMSwgMSksICgyLCAyLi4uXG5cbiAgICAgICAgMyAgZm9vICAgICAgNSAgWygyLCAxKSwgKDIsIDEpLCAoMSwgMyksICgxLCAzKSwgKDMsIDIpLCAoMiwgMS4uLlxuXG5cblxuICAgICAgICBsaXN0Xz1kZi5kaWN0dGVzdC5zX2FzX2ZsYXR0ZW5lZF9saXN0KClcblxuICAgICAgICBwcmludChsaXN0X1s6MjBdKVxuXG4gICAgICAgIFszLCAyLCAzLCAzLCAzLCAxLCAxLCAyLCAyLCAxLCAzLCAyLCAyLCAxLCAxLCAyLCAzLCAzLCAyLCAyXVxuXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOlxuXG4gICAgICAgICAgICAgICAgZGY6IHBkLlNlcmllc1xuXG4gICAgICAgICAgICAgICAgICAgIFNlcmllcyB0byBmbGF0dGVuIChyZW1vdmVzIGFsbCBrZXlzIGluIGRpY3RzLCBvbmx5IGtlZXBzIHRoZSB2YWx1ZXMpXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBsaXN0XG5cbmBgYFxuXG5cblxuIyMjIGRmMS5kX3N0YWNrKCkgLyBkZjEuZF91bnN0YWNrKClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgdW5zdGFja2VkX2RmX2JhY2tfdG9fbXVsdGlpbmRleChkYXRhZnJhbWU6IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZSkgLT4gcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXG5cbiAgICAgICAgICAgIERvbid0IHVzZSBkZi5zdGFjaygpISEhIVxuXG5cblxuICAgICAgICBuZXN0ZWQgPSB7XG5cbiAgICAgICAgXCJNb2xpXCI6IHtcblxuICAgICAgICAgICAgXCJCdXlcIjogNzUsXG5cbiAgICAgICAgICAgIFwiU2VsbFwiOiA1MyxcblxuICAgICAgICAgICAgXCJRdWFudGl0eVwiOiAzMDAsXG5cbiAgICAgICAgICAgIFwiVEZcIjogVHJ1ZX0sXG5cbiAgICAgICAgXCJBbm5hXCI6IHtcblxuICAgICAgICAgICAgXCJCdXlcIjogNTUsXG5cbiAgICAgICAgICAgIFwiU2VsbFwiOiA4MyxcblxuICAgICAgICAgICAgXCJRdWFudGl0eVwiOiAxNTQsXG5cbiAgICAgICAgICAgIFwiVEZcIjogRmFsc2V9LFxuXG4gICAgICAgIFwiQm9iXCI6IHtcblxuICAgICAgICAgICAgXCJCdXlcIjogMjUsXG5cbiAgICAgICAgICAgIFwiU2VsbFwiOiAzMyxcblxuICAgICAgICAgICAgXCJRdWFudGl0eVwiOiAxMDAsXG5cbiAgICAgICAgICAgIFwiVEZcIjogRmFsc2V9LFxuXG4gICAgICAgIFwiQW5uaWVcIjoge1xuXG4gICAgICAgICAgICBcIkJ1eVwiOiA3NCxcblxuICAgICAgICAgICAgXCJTZWxsXCI6IDgzLFxuXG4gICAgICAgICAgICBcIlF1YW50aXR5XCI6IDk2LFxuXG4gICAgICAgICAgICBcIlRGXCI6IFRydWV9XG5cbiAgICAgICAgfVxuXG4gICAgICAgIGRmMT1wZC5RX0FueU5lc3RlZEl0ZXJhYmxlXzJkZihuZXN0ZWQsIHVuc3RhY2s9VHJ1ZSlcblxuICAgICAgICBwcmludChkZjEpXG5cbiAgICAgICAgZGYxLmRfc3RhY2soKVxuXG4gICAgICAgICAgIGxldmVsXzAgICBsZXZlbF8xICAgICAgICBhYV9hbGxfa2V5cyBhYV92YWx1ZVxuXG4gICAgICAgIDAgICAgIEFubmEgICAgICAgQnV5ICAgICAgICAoQW5uYSwgQnV5KSAgICAgICA1NVxuXG4gICAgICAgIDEgICAgIEFubmEgIFF1YW50aXR5ICAgKEFubmEsIFF1YW50aXR5KSAgICAgIDE1NFxuXG4gICAgICAgIDIgICAgIEFubmEgICAgICBTZWxsICAgICAgIChBbm5hLCBTZWxsKSAgICAgICA4M1xuXG4gICAgICAgIDMgICAgIEFubmEgICAgICAgIFRGICAgICAgICAgKEFubmEsIFRGKSAgICBGYWxzZVxuXG4gICAgICAgIDQgICAgQW5uaWUgICAgICAgQnV5ICAgICAgIChBbm5pZSwgQnV5KSAgICAgICA3NFxuXG4gICAgICAgIDUgICAgQW5uaWUgIFF1YW50aXR5ICAoQW5uaWUsIFF1YW50aXR5KSAgICAgICA5NlxuXG4gICAgICAgIDYgICAgQW5uaWUgICAgICBTZWxsICAgICAgKEFubmllLCBTZWxsKSAgICAgICA4M1xuXG4gICAgICAgIDcgICAgQW5uaWUgICAgICAgIFRGICAgICAgICAoQW5uaWUsIFRGKSAgICAgVHJ1ZVxuXG4gICAgICAgIDggICAgICBCb2IgICAgICAgQnV5ICAgICAgICAgKEJvYiwgQnV5KSAgICAgICAyNVxuXG4gICAgICAgIDkgICAgICBCb2IgIFF1YW50aXR5ICAgIChCb2IsIFF1YW50aXR5KSAgICAgIDEwMFxuXG4gICAgICAgIDEwICAgICBCb2IgICAgICBTZWxsICAgICAgICAoQm9iLCBTZWxsKSAgICAgICAzM1xuXG4gICAgICAgIDExICAgICBCb2IgICAgICAgIFRGICAgICAgICAgIChCb2IsIFRGKSAgICBGYWxzZVxuXG4gICAgICAgIDEyICAgIE1vbGkgICAgICAgQnV5ICAgICAgICAoTW9saSwgQnV5KSAgICAgICA3NVxuXG4gICAgICAgIDEzICAgIE1vbGkgIFF1YW50aXR5ICAgKE1vbGksIFF1YW50aXR5KSAgICAgIDMwMFxuXG4gICAgICAgIDE0ICAgIE1vbGkgICAgICBTZWxsICAgICAgIChNb2xpLCBTZWxsKSAgICAgICA1M1xuXG4gICAgICAgIDE1ICAgIE1vbGkgICAgICAgIFRGICAgICAgICAgKE1vbGksIFRGKSAgICAgVHJ1ZVxuXG4gICAgICAgIE91dFs2NF06XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFfYWxsX2tleXMgYWFfdmFsdWVcblxuICAgICAgICBsZXZlbF8wIGxldmVsXzFcblxuICAgICAgICBBbm5hICAgIEJ1eSAgICAgICAgICAgICAoQW5uYSwgQnV5KSAgICAgICA1NVxuXG4gICAgICAgICAgICAgICAgUXVhbnRpdHkgICAoQW5uYSwgUXVhbnRpdHkpICAgICAgMTU0XG5cbiAgICAgICAgICAgICAgICBTZWxsICAgICAgICAgICAoQW5uYSwgU2VsbCkgICAgICAgODNcblxuICAgICAgICAgICAgICAgIFRGICAgICAgICAgICAgICAgKEFubmEsIFRGKSAgICBGYWxzZVxuXG4gICAgICAgIEFubmllICAgQnV5ICAgICAgICAgICAgKEFubmllLCBCdXkpICAgICAgIDc0XG5cbiAgICAgICAgICAgICAgICBRdWFudGl0eSAgKEFubmllLCBRdWFudGl0eSkgICAgICAgOTZcblxuICAgICAgICAgICAgICAgIFNlbGwgICAgICAgICAgKEFubmllLCBTZWxsKSAgICAgICA4M1xuXG4gICAgICAgICAgICAgICAgVEYgICAgICAgICAgICAgIChBbm5pZSwgVEYpICAgICBUcnVlXG5cbiAgICAgICAgQm9iICAgICBCdXkgICAgICAgICAgICAgIChCb2IsIEJ1eSkgICAgICAgMjVcblxuICAgICAgICAgICAgICAgIFF1YW50aXR5ICAgIChCb2IsIFF1YW50aXR5KSAgICAgIDEwMFxuXG4gICAgICAgICAgICAgICAgU2VsbCAgICAgICAgICAgIChCb2IsIFNlbGwpICAgICAgIDMzXG5cbiAgICAgICAgICAgICAgICBURiAgICAgICAgICAgICAgICAoQm9iLCBURikgICAgRmFsc2VcblxuICAgICAgICBNb2xpICAgIEJ1eSAgICAgICAgICAgICAoTW9saSwgQnV5KSAgICAgICA3NVxuXG4gICAgICAgICAgICAgICAgUXVhbnRpdHkgICAoTW9saSwgUXVhbnRpdHkpICAgICAgMzAwXG5cbiAgICAgICAgICAgICAgICBTZWxsICAgICAgICAgICAoTW9saSwgU2VsbCkgICAgICAgNTNcblxuICAgICAgICAgICAgICAgIFRGICAgICAgICAgICAgICAgKE1vbGksIFRGKSAgICAgVHJ1ZVxuXG5cblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRhdGFmcmFtZTpwZC5EYXRhRnJhbWVcblxuICAgICAgICAgICAgICAgICAgICBwZC5EYXRhRnJhbWVcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbiMjIyBwZC5RX1JlYWRGaWxlV2l0aEFsbEVuY29kaW5nc18yZGYoKVxuXG5cblxuICAgICAgICBUaGVyZSBhcmUgcGxlbnR5IG9mIGdvb2QgbGlicmFyaWVzIG91dCB0aGVyZSB0aGF0IGhlbHAgeW91IHdpdGggZmluZGluZyB0aGUgcmlnaHQgZW5jb2RpbmcgZm9yIHlvdXIgZmlsZSxcblxuICAgICAgICBidXQgc29tZXRpbWVzIHRoZXkgZG9uJ3Qgd29yayBsaWtlIGV4cGVjdGVkLCBhbmQgeW91IGhhdmUgdG8gY2hvb3NlIHRoZSBiZXN0IGVuY29kaW5nIG1hbnVhbGx5LiBUaGlzIG1ldGhvZFxuXG4gICAgICAgIG9wZW5zIGFueSBmaWxlIGluIGFsbCBlbmNvZGluZ3MgYXZhaWxhYmxlIGluIHlvdXIgZW52IGFuZCByZXR1cm5zIGFsbCByZXN1bHRzIGluIGEgRGF0YUZyYW1lLlxuXG5cblxuYGBgcHl0aG9uXG5cbiAgICAgICAgcGQuUV9SZWFkRmlsZVdpdGhBbGxFbmNvZGluZ3NfMmRmKHJcIkM6XFxVc2Vyc1xcR2FtZXJcXERvY3VtZW50c1xcRG93bmxvYWRzXFxjb3JydXB0anNvbjEuanNvblwiKVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2RlYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpY3RfZW5jb2RlZCAgXFxcblxuICAgICAgICAwICAgICAgICAgICBhc2NpaSAgWydhc2NpaScgY29kZWMgY2FuJ3QgZGVjb2RlIGJ5dGUgMHhlZiBpbiBwb3NpdC4uLlxuXG4gICAgICAgIDEgICAgYmFzZTY0X2NvZGVjICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbSW5jb3JyZWN0IHBhZGRpbmddXG5cbiAgICAgICAgMiAgICAgICAgICAgIGJpZzUgIFsoe1xcclxcblwiZG9jX2lkXCI6IFwic29tZV9udW1iZXJcIixcXHJcXG5cInVybFwiOiBcInd3dy4uLlxuXG4gICAgICAgIDMgICAgICAgYmlnNWhrc2NzICBbKHtcXHJcXG5cImRvY19pZFwiOiBcInNvbWVfbnVtYmVyXCIsXFxyXFxuXCJ1cmxcIjogXCJ3d3cuLi5cblxuICAgICAgICA0ICAgICAgIGJ6Ml9jb2RlYyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtJbnZhbGlkIGRhdGEgc3RyZWFtXVxuXG4gICAgICAgIC4uICAgICAgICAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uXG5cbiAgICAgICAgMTE1ICAgICAgICAgdXRmXzcgIFsndXRmNycgY29kZWMgY2FuJ3QgZGVjb2RlIGJ5dGUgMHhlZiBpbiBwb3NpdGkuLi5cblxuICAgICAgICAxMTYgICAgICAgICB1dGZfOCAgWyh7XFxyXFxuXCJkb2NfaWRcIjogXCJzb21lX251bWJlclwiLFxcclxcblwidXJsXCI6IFwid3d3Li4uXG5cbiAgICAgICAgMTE3ICAgICB1dGZfOF9zaWcgIFsoe1xcclxcblwiZG9jX2lkXCI6IFwic29tZV9udW1iZXJcIixcXHJcXG5cInVybFwiOiBcInd3dy4uLlxuXG4gICAgICAgIDExOCAgICAgIHV1X2NvZGVjICAgICAgICAgICAgICAgW01pc3NpbmcgXCJiZWdpblwiIGxpbmUgaW4gaW5wdXQgZGF0YV1cblxuICAgICAgICAxMTkgICAgemxpYl9jb2RlYyAgW0Vycm9yIC0zIHdoaWxlIGRlY29tcHJlc3NpbmcgZGF0YTogaW5jb3JyZWN0IC4uLlxuXG4gICAgICAgICAgICAgc3RyaWN0X2JhZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZ25vcmVfZW5jb2RlZCAgXFxcblxuICAgICAgICAwICAgICAgICAgIFRydWUgIFsoe1xcclxcblwiZG9jX2lkXCI6IFwic29tZV9udW1iZXJcIixcXHJcXG5cInVybFwiOiBcInd3dy4uLlxuXG4gICAgICAgIDEgICAgICAgICAgVHJ1ZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXVxuXG5cblxuXG5cblxuXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOlxuXG4gICAgICAgICAgICAgICAgZmlsZXBhdGggKHN0cik6IGZpbGUgcGF0aFxuXG4gICAgICAgICAgICBSZXR1cm5zOlxuXG4gICAgICAgICAgICAgICAgcGQuRGF0YUZyYW1lXG5cbmBgYFxuXG5cblxuIyMjIHBkLlFfQ29ycnVwdEpzb25GaWxlXzJkaWN0KClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgcmVhZF9jb3JydXB0X2pzb24oZmlsZXBhdGg6IHN0cikgLT4gZGljdFxuXG4gICAgICAgIFVzYWdlOiBwZFFfQ29ycnVwdEpzb25GaWxlXzJkaWN0ZihyJ0M6XFxjb3JydXB0anNvbjEuanNvbicpXG5cblxuXG4gICAgICAgIElmIHlvdSBuZWVkIHRvIHJlYWQgYSBjb3JydXB0ZWQgSlNPTiBmaWxlLCB5b3UgY2FuIHRyeSB0aGlzIG1ldGhvZC5cblxuICAgICAgICBJdCB3aWxsIGZpcnN0IHRyeSB0byByZWFkIHRoZSBmaWxlIHVzaW5nIHVqc29uLlxuXG4gICAgICAgIFNlY29uZCBzdGVwOiBUaGUgZmlsZSB3aWxsIGJlIHJlYWQgdXNpbmcgYWxsIGVuY29kZXJzIGZvdW5kIGluIHlvdXIgZW52LiBFYWNoIHJlc3VsdCB3aWxsIGJlIHBhc3NlZCB0byBhc3QubGl0ZXJhbF9ldmFsLCBqc29uLmxvYWRzIGFuZCB1anNvbi5sb2Fkc1xuXG4gICAgICAgIFRoaXJkIHN0ZXA6IEtleXMgYW5kIHZhbHVlcyBhcmUgZXh0cmFjdGVkIHVzaW5nIHJlZ2V4XG5cblxuXG4gICAgICAgIEFsbCBwb3NpdGl2ZSByZXN1bHRzIGFyZSByZXR1cm5lZCBhcyBhIGRpY3QsIHlvdSBoYXZlIHRvIGNoZWNrIHdoaWNoIG9uZSBmaXRzIGJlc3QgdG8geW91ciBuZWVkc1xuXG5cblxuICAgICAgICAgICAgZmluYWxkaWN0ID0ge1xuXG4gICAgICAgICAgICAgICAgXCJ1anNvbl9maWxlX3JlYWRpbmdfcmVzdWx0XCI6IHVqc29uX2ZpbGVfcmVhZGluZ19yZXN1bHQsXG5cbiAgICAgICAgICAgICAgICBcImxpdGVyYWxfZXZhbF9hZnRlcl9uZXdsaW5lX3JlbW92ZWRcIjogbGl0ZXJhbF9ldmFsX2FmdGVyX25ld2xpbmVfcmVtb3ZlZCxcblxuICAgICAgICAgICAgICAgIFwianNvbl9hZnRlcl9oZWFkX3RhaWxfcmVtb3ZlZFwiOiBqc29uX2FmdGVyX2hlYWRfdGFpbF9yZW1vdmVkLFxuXG4gICAgICAgICAgICAgICAgXCJ1anNvbl9hZnRlcl9oZWFkX3RhaWxfcmVtb3ZlZFwiOiB1anNvbl9hZnRlcl9oZWFkX3RhaWxfcmVtb3ZlZCxcblxuICAgICAgICAgICAgICAgIFwicmVnZXhfZ2V0X3NpbmdsZV9pdGVtX2tleXNcIjogYWxsZ29vZHJlc3VsdHNkaWN0LFxuXG4gICAgICAgICAgICB9XG5cblxuXG4gICAgICAgIElmIHRoZSBrZXlzIGFyZSBub3QgZG91YmxlLXF1b3RlZCwgaXQgd29uJ3Qgd29yay5cblxuICAgICAgICBJdCB3b3JrcyB3ZWxsIHdpdGggc3BhY2VzIGFuZCBub3QgY29ycmVjdGx5IGVzY2FwZWQgY2hhcmFjdGVyc1xuXG5cblxuICAgICAgICBFeGFtcGxlIGZyb20gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTk5Mjc1NDkvaG93LXRvLWZpeC1hLXBvc3NpYmx5LWNvcnJ1cHRlZC1qc29uLWZpbGUtcHJvYmxlbXMtd2l0aC1hLWN1cmx5LWJyYWNrZXQtY2hhcmFjdFxuXG5cblxuICAgICAgICB7XG5cbiAgICAgICAgXCJkb2NfaWRcIjogXCJzb21lX251bWJlclwiLFxuXG4gICAgICAgIFwidXJsXCI6IFwid3d3LnNlZWR1cmwxLmNvbVwiLFxuXG4gICAgICAgIFwic2NyYXBlX2RhdGVcIjogXCIyMDE5LTEwLTIyIDE2OjE3OjIyXCIsXG5cbiAgICAgICAgXCJwdWJsaXNoX2RhdGVcIjogXCJ1bmtub3duXCIsXG5cbiAgICAgICAgXCJhdXRob3JcIjogXCJ1bmtub3duXCIsXG5cbiAgICAgICAgXCJ1cmxzX291dFwiOiBbXG5cbiAgICAgICAgXCJodHRwczovL3d3dy5zb21ldGhpbmcuY29tXCIsXG5cbiAgICAgICAgXCJodHRwczovL3d3dy5zb21ldGluZ2Vsc2UuY29tL3NtdGhcIlxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgXCJ0ZXh0XCI6IFwibG90cyBvZiB0ZXh0IGhlcmVcIlxuXG4gICAgICAgIH1cblxuICAgICAgICDvu797XG5cbiAgICAgICAgXCJkb2NfaWRcIjogXCJzb21lX290aGVyX251bWJlclwiLFxuXG4gICAgICAgIFwidXJsXCI6IFwid3d3LnNlZWR1cmwyLmNvbS9zbXRoXCIsXG5cbiAgICAgICAgXCJzY3JhcGVfZGF0ZVwiOiBcIjIwMTktMTAtMjIgMTc6NDQ6NDBcIixcblxuICAgICAgICBcInB1Ymxpc2hfZGF0ZVwiOiBcInVua25vd25cIixcblxuICAgICAgICBcImF1dGhvclwiOiBcInVua25vd25cIixcblxuICAgICAgICBcInVybHNfb3V0XCI6IFtcblxuICAgICAgICBcInd3dy5hbm90aGVydXJsLmNvbS9zbXRoXCIsXG5cbiAgICAgICAgXCJodHRwOi8vdXJseC5jb20vc210aC5odG1cIlxuXG4gICAgICAgIF0sXG5cbiAgICAgICAgXCJ0ZXh0XCI6IFwibG90cyBtb3JlIHRleHQgb3ZlciBoZXJlLlwiXG5cbiAgICAgICAgfVxuXG5cblxuICAgICAgICBSZXN1bHQ6XG5cbiAgICAgICAgeyd1anNvbl9maWxlX3JlYWRpbmdfcmVzdWx0JzogTm9uZSxcblxuICAgICAgICAgJ2xpdGVyYWxfZXZhbF9hZnRlcl9uZXdsaW5lX3JlbW92ZWQnOiBFbXB0eSBEYXRhRnJhbWVcblxuICAgICAgICAgQ29sdW1uczogW2xldmVsXzAsIGxldmVsXzEsIGxldmVsXzIsIGFhX2FsbF9rZXlzLCBhYV92YWx1ZSwgYXN0X3Jlc3VsdHNdXG5cbiAgICAgICAgIEluZGV4OiBbXSxcblxuICAgICAgICAgJ2pzb25fYWZ0ZXJfaGVhZF90YWlsX3JlbW92ZWQnOiAgICAgICBsZXZlbF8wICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25fbG9hZHNcblxuICAgICAgICAgODYyICBwdW55Y29kZSAgLi4uICB7J2RvY19pZCc6ICdzb21lX251bWJlcicsICd1cmwnOiAnd3d3LnNlZWR1cmwxLi4uXG5cbiAgICAgICAgIDg2NSAgcHVueWNvZGUgIC4uLiAgeydkb2NfaWQnOiAnc29tZV9udW1iZXInLCAndXJsJzogJ3d3dy5zZWVkdXJsMS4uLlxuXG5cblxuICAgICAgICAgWzIgcm93cyB4IDggY29sdW1uc10sXG5cbiAgICAgICAgICd1anNvbl9hZnRlcl9oZWFkX3RhaWxfcmVtb3ZlZCc6ICAgICAgIGxldmVsXzAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1anNvbl9sb2Fkc1xuXG4gICAgICAgICA4NjIgIHB1bnljb2RlICAuLi4gIHsnZG9jX2lkJzogJ3NvbWVfbnVtYmVyJywgJ3VybCc6ICd3d3cuc2VlZHVybDEuLi5cblxuICAgICAgICAgODY1ICBwdW55Y29kZSAgLi4uICB7J2RvY19pZCc6ICdzb21lX251bWJlcicsICd1cmwnOiAnd3d3LnNlZWR1cmwxLi4uXG5cblxuXG4gICAgICAgICBbMiByb3dzIHggOSBjb2x1bW5zXSxcblxuICAgICAgICAgJ3JlZ2V4X2dldF9zaW5nbGVfaXRlbV9rZXlzJzogW3snYWFfdmFsdWUnOiB7MDogJ3NvbWVfbnVtYmVyJyxcblxuICAgICAgICAgICAgMTogJ3d3dy5zZWVkdXJsMS5jb20nLFxuXG4gICAgICAgICAgICAyOiAnMjAxOS0xMC0yMiAxNjoxNzoyMicsXG5cbiAgICAgICAgICAgIDM6ICd1bmtub3duJyxcblxuICAgICAgICAgICAgNDogJ3Vua25vd24nLFxuXG4gICAgICAgICAgICA1OiBbJ2h0dHBzOi8vd3d3LnNvbWV0aGluZy5jb20nLCAnaHR0cHM6Ly93d3cuc29tZXRpbmdlbHNlLmNvbS9zbXRoJ10sXG5cbiAgICAgICAgICAgIDY6ICdsb3RzIG9mIHRleHQgaGVyZSd9LFxuXG4gICAgICAgICAgICdhYV9rZXknOiB7MDogJ2RvY19pZCcsXG5cbiAgICAgICAgICAgIDE6ICd1cmwnLFxuXG4gICAgICAgICAgICAyOiAnc2NyYXBlX2RhdGUnLFxuXG4gICAgICAgICAgICAzOiAncHVibGlzaF9kYXRlJyxcblxuICAgICAgICAgICAgNDogJ2F1dGhvcicsXG5cbiAgICAgICAgICAgIDU6ICd1cmxzX291dCcsXG5cbiAgICAgICAgICAgIDY6ICd0ZXh0J319LFxuXG4gICAgICAgICAgeydhYV92YWx1ZSc6IHs3OiAnc29tZV9vdGhlcl9udW1iZXInLFxuXG4gICAgICAgICAgICA4OiAnd3d3LnNlZWR1cmwyLmNvbS9zbXRoJyxcblxuICAgICAgICAgICAgOTogJzIwMTktMTAtMjIgMTc6NDQ6NDAnLFxuXG4gICAgICAgICAgICAxMDogJ3Vua25vd24nLFxuXG4gICAgICAgICAgICAuLi4uLi4uLlxuXG5cblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGZpbGVwYXRoIChzdHIpOiBmaWxlIHBhdGhcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIGRpY3RcblxuYGBgXG5cblxuXG4jIyMgZGYuZF9zb3J0X2NvbHVtbnNfd2l0aF9zb3J0ZWQoKVxuXG5cblxuYGBgcHl0aG9uXG5cbiAgICBxcV9kX3NvcnRfY29sdW1uc19hbHBoYWJldGljYWxseShkZjogcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lLCByZXZlcnNlOiBib29sID0gRmFsc2UpIC0+IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZVxuXG4gICAgICAgIFNvcnRzIGNvbHVtbnMgYWxwaGFiZXRpY2FsbHkgd2l0aCBzb3J0ZWQoKSEgTm90IHdpdGggbmF0c29ydCgpIVxuXG4gICAgICAgIGRmID0gcGQucmVhZF9jc3YoXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiKVxuXG4gICAgICAgIHByaW50KGRmKVxuXG4gICAgICAgIGRmLmRfc29ydF9jb2x1bW5zX3dpdGhfc29ydGVkKClcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAgNy4yNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDEgICAgICAgICAgICAgIDIgICAgICAgICAxICAgICAgIDEgIEN1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGguLi4gIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICA1My4xMDAwICBDMTIzICAgICAgICAgU1xuXG4gICAgICAgIDQgICAgICAgICAgICAgIDUgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGxlbiwgTXIuIFdpbGxpYW0gSGVucnkgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgICAuLi4gICAgICAgICAgICAgICAuLi4gICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICAgIDg4NyAgICAgICAgIDAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMjExNTM2ICAxMy4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4NyAgICAgICAgICA4ODggICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgIEdyYWhhbSwgTWlzcy4gTWFyZ2FyZXQgRWRpdGggIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMjA1MyAgMzAuMDAwMCAgIEI0MiAgICAgICAgIFNcblxuICAgICAgICA4ODggICAgICAgICAgODg5ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICBKb2huc3RvbiwgTWlzcy4gQ2F0aGVyaW5lIEhlbGVuIFwiQ2FycmllXCIgIGZlbWFsZSAgLi4uICAgICAgMiAgICAgICAgVy4vQy4gNjYwNyAgMjMuNDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVociwgTXIuIEthcmwgSG93ZWxsICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDMwLjAwMDAgIEMxNDggICAgICAgICBDXG5cbiAgICAgICAgODkwICAgICAgICAgIDg5MSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9vbGV5LCBNci4gUGF0cmljayAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICAgTmFOICAgICAgICAgUVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgT3V0WzY2XTpcblxuICAgICAgICAgICAgICBBZ2UgQ2FiaW4gRW1iYXJrZWQgICAgIEZhcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgIC4uLiAgUGNsYXNzICAgICBTZXggIFNpYlNwIFN1cnZpdmVkICAgICAgICAgICAgVGlja2V0XG5cbiAgICAgICAgMCAgICAyMi4wICAgTmFOICAgICAgICBTICAgNy4yNTAwICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJyYXVuZCwgTXIuIE93ZW4gSGFycmlzICAuLi4gICAgICAgMyAgICBtYWxlICAgICAgMSAgICAgICAgMCAgICAgICAgIEEvNSAyMTE3MVxuXG4gICAgICAgIDEgICAgMzguMCAgIEM4NSAgICAgICAgQyAgNzEuMjgzMyAgQ3VtaW5ncywgTXJzLiBKb2huIEJyYWRsZXkgKEZsb3JlbmNlIEJyaWdncyBUaC4uLiAgLi4uICAgICAgIDEgIGZlbWFsZSAgICAgIDEgICAgICAgIDEgICAgICAgICAgUEMgMTc1OTlcblxuICAgICAgICAyICAgIDI2LjAgICBOYU4gICAgICAgIFMgICA3LjkyNTAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlaWtraW5lbiwgTWlzcy4gTGFpbmEgIC4uLiAgICAgICAzICBmZW1hbGUgICAgICAwICAgICAgICAxICBTVE9OL08yLiAzMTAxMjgyXG5cbiAgICAgICAgMyAgICAzNS4wICBDMTIzICAgICAgICBTICA1My4xMDAwICAgICAgIEZ1dHJlbGxlLCBNcnMuIEphY3F1ZXMgSGVhdGggKExpbHkgTWF5IFBlZWwpICAuLi4gICAgICAgMSAgZmVtYWxlICAgICAgMSAgICAgICAgMSAgICAgICAgICAgIDExMzgwM1xuXG4gICAgICAgIDQgICAgMzUuMCAgIE5hTiAgICAgICAgUyAgIDguMDUwMCAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsbGVuLCBNci4gV2lsbGlhbSBIZW5yeSAgLi4uICAgICAgIDMgICAgbWFsZSAgICAgIDAgICAgICAgIDAgICAgICAgICAgICAzNzM0NTBcblxuICAgICAgICAuLiAgICAuLi4gICAuLi4gICAgICAuLi4gICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gIC4uLiAgICAgLi4uICAgICAuLi4gICAgLi4uICAgICAgLi4uICAgICAgICAgICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAyNy4wICAgTmFOICAgICAgICBTICAxMy4wMDAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9udHZpbGEsIFJldi4gSnVvemFzICAuLi4gICAgICAgMiAgICBtYWxlICAgICAgMCAgICAgICAgMCAgICAgICAgICAgIDIxMTUzNlxuXG4gICAgICAgIDg4NyAgMTkuMCAgIEI0MiAgICAgICAgUyAgMzAuMDAwMCAgICAgICAgICAgICAgICAgICAgICAgR3JhaGFtLCBNaXNzLiBNYXJnYXJldCBFZGl0aCAgLi4uICAgICAgIDEgIGZlbWFsZSAgICAgIDAgICAgICAgIDEgICAgICAgICAgICAxMTIwNTNcblxuICAgICAgICA4ODggICBOYU4gICBOYU4gICAgICAgIFMgIDIzLjQ1MDAgICAgICAgICAgIEpvaG5zdG9uLCBNaXNzLiBDYXRoZXJpbmUgSGVsZW4gXCJDYXJyaWVcIiAgLi4uICAgICAgIDMgIGZlbWFsZSAgICAgIDEgICAgICAgIDAgICAgICAgIFcuL0MuIDY2MDdcblxuICAgICAgICA4ODkgIDI2LjAgIEMxNDggICAgICAgIEMgIDMwLjAwMDAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCZWhyLCBNci4gS2FybCBIb3dlbGwgIC4uLiAgICAgICAxICAgIG1hbGUgICAgICAwICAgICAgICAxICAgICAgICAgICAgMTExMzY5XG5cbiAgICAgICAgODkwICAzMi4wICAgTmFOICAgICAgICBRICAgNy43NTAwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEb29sZXksIE1yLiBQYXRyaWNrICAuLi4gICAgICAgMyAgICBtYWxlICAgICAgMCAgICAgICAgMCAgICAgICAgICAgIDM3MDM3NlxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgICAgICBkZiA6IHBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgcmV2ZXJzZTogYm9vbFxuXG4gICAgICAgICAgICAgICAgICAgIFotQSBpbnN0ZWFkIG9mIEEtWiAoZGVmYXVsdCA9IEZhbHNlKVxuXG5cblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbiMjIyBkZi5kc19pc25hKClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgaXNfbmFuX3RydWVfZmFsc2VfY2hlY2soZGY6IFVuaW9uW3BhbmRhcy5jb3JlLnNlcmllcy5TZXJpZXMsIHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZV0sIGluY2x1ZGVfbmFfc3RyaW5nczogYm9vbCA9IFRydWUsIGluY2x1ZGVfZW1wdHlfaXRlcnM6IGJvb2wgPSBGYWxzZSwgaW5jbHVkZV8wX2xlbl9zdHJpbmc6IGJvb2wgPSBGYWxzZSkgLT4gVW5pb25bcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcywgcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXVxuXG4gICAgICAgIGRmID0gcGQucmVhZF9jc3YoXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiKVxuXG4gICAgICAgIGRmLmRzX2lzbmEoKVxuXG4gICAgICAgIE91dFsxMDddOlxuXG4gICAgICAgICAgICAgUGFzc2VuZ2VySWQgIFN1cnZpdmVkICBQY2xhc3MgICBOYW1lICAgIFNleCAgLi4uICBQYXJjaCAgVGlja2V0ICAgRmFyZSAgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICBGYWxzZSAgICAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAuLi4gIEZhbHNlICAgRmFsc2UgIEZhbHNlICAgVHJ1ZSAgICAgRmFsc2VcblxuICAgICAgICAxICAgICAgICAgIEZhbHNlICAgICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgRmFsc2UgIC4uLiAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAgICBGYWxzZVxuXG4gICAgICAgIDIgICAgICAgICAgRmFsc2UgICAgIEZhbHNlICAgRmFsc2UgIEZhbHNlICBGYWxzZSAgLi4uICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgIFRydWUgICAgIEZhbHNlXG5cbiAgICAgICAgMyAgICAgICAgICBGYWxzZSAgICAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAuLi4gIEZhbHNlICAgRmFsc2UgIEZhbHNlICBGYWxzZSAgICAgRmFsc2VcblxuICAgICAgICA0ICAgICAgICAgIEZhbHNlICAgICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgRmFsc2UgIC4uLiAgRmFsc2UgICBGYWxzZSAgRmFsc2UgICBUcnVlICAgICBGYWxzZVxuXG4gICAgICAgIC4uICAgICAgICAgICAuLi4gICAgICAgLi4uICAgICAuLi4gICAgLi4uICAgIC4uLiAgLi4uICAgIC4uLiAgICAgLi4uICAgIC4uLiAgICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICBGYWxzZSAgICAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAuLi4gIEZhbHNlICAgRmFsc2UgIEZhbHNlICAgVHJ1ZSAgICAgRmFsc2VcblxuICAgICAgICA4ODcgICAgICAgIEZhbHNlICAgICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgRmFsc2UgIC4uLiAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAgICBGYWxzZVxuXG4gICAgICAgIDg4OCAgICAgICAgRmFsc2UgICAgIEZhbHNlICAgRmFsc2UgIEZhbHNlICBGYWxzZSAgLi4uICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgIFRydWUgICAgIEZhbHNlXG5cbiAgICAgICAgODg5ICAgICAgICBGYWxzZSAgICAgRmFsc2UgICBGYWxzZSAgRmFsc2UgIEZhbHNlICAuLi4gIEZhbHNlICAgRmFsc2UgIEZhbHNlICBGYWxzZSAgICAgRmFsc2VcblxuICAgICAgICA4OTAgICAgICAgIEZhbHNlICAgICBGYWxzZSAgIEZhbHNlICBGYWxzZSAgRmFsc2UgIC4uLiAgRmFsc2UgICBGYWxzZSAgRmFsc2UgICBUcnVlICAgICBGYWxzZVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgZGYuQ2FiaW4uZHNfaXNuYSgpXG5cbiAgICAgICAgT3V0WzEwOF06XG5cbiAgICAgICAgMCAgICAgICBUcnVlXG5cbiAgICAgICAgMSAgICAgIEZhbHNlXG5cbiAgICAgICAgMiAgICAgICBUcnVlXG5cbiAgICAgICAgMyAgICAgIEZhbHNlXG5cbiAgICAgICAgNCAgICAgICBUcnVlXG5cbiAgICAgICAgICAgICAgIC4uLlxuXG4gICAgICAgIDg4NiAgICAgVHJ1ZVxuXG4gICAgICAgIDg4NyAgICBGYWxzZVxuXG4gICAgICAgIDg4OCAgICAgVHJ1ZVxuXG4gICAgICAgIDg4OSAgICBGYWxzZVxuXG4gICAgICAgIDg5MCAgICAgVHJ1ZVxuXG4gICAgICAgIE5hbWU6IENhYmluLCBMZW5ndGg6IDg5MSwgZHR5cGU6IGJvb2xcblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmOiBVbmlvbltwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZV1cblxuICAgICAgICAgICAgICAgICAgICBwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgaW5jbHVkZV9uYV9zdHJpbmdzOiBib29sXG5cbiAgICAgICAgICAgICAgICAgICAgV2hlbiBUcnVlIC0+IHRyZWF0ZWQgYXMgbmFuOlxuXG5cblxuICAgICAgICAgICAgICAgICAgICBbXG5cbiAgICAgICAgICAgICAgICAgICAgXCI8TkE+XCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCI8TkFOPlwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiPG5hbj5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIm5wLm5hblwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiTm9uZVR5cGVcIixcblxuICAgICAgICAgICAgICAgICAgICBcIk5vbmVcIixcblxuICAgICAgICAgICAgICAgICAgICBcIi0xLiNJTkRcIixcblxuICAgICAgICAgICAgICAgICAgICBcIjEuI1FOQU5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIjEuI0lORFwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiLTEuI1FOQU5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIiNOL0EgTi9BXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCIjTi9BXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCJOL0FcIixcblxuICAgICAgICAgICAgICAgICAgICBcIm4vYVwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiTkFcIixcblxuICAgICAgICAgICAgICAgICAgICBcIiNOQVwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiTlVMTFwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwibnVsbFwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiTmFOXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCItTmFOXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCJuYW5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIi1uYW5cIixcblxuICAgICAgICAgICAgICAgICAgICBdXG5cblxuXG4gICAgICAgICAgICAgICAgICAgIChkZWZhdWx0ID1UcnVlKVxuXG4gICAgICAgICAgICAgICAgaW5jbHVkZV9lbXB0eV9pdGVyczogYm9vbFxuXG4gICAgICAgICAgICAgICAgICAgIFdoZW4gVHJ1ZSAtPiBbXSwge30gYXJlIHRyZWF0ZWQgYXMgbmFuIChkZWZhdWx0ID0gRmFsc2UgKVxuXG5cblxuICAgICAgICAgICAgICAgIGluY2x1ZGVfMF9sZW5fc3RyaW5nOiBib29sXG5cbiAgICAgICAgICAgICAgICAgICAgV2hlbiBUcnVlIC0+ICcnIGlzIHRyZWF0ZWQgYXMgbmFuIChkZWZhdWx0ID0gRmFsc2UgKVxuXG4gICAgICAgICAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBkaWN0XG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBVbmlvbltwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZV1cblxuYGBgXG5cblxuXG4jIyMgZGYuZF9hZGRfdmFsdWVfdG9fZXhpc3RpbmdfY29sdW1uc193aXRoX2xvYygpXG5cblxuXG5gYGBweXRob25cblxuICAgIGRmX2xvY19hZGQoZGY6IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZSwgY29uZGl0aW9uOiBVbmlvbltwYW5kYXMuY29yZS5zZXJpZXMuU2VyaWVzLCBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWVdLCBhZGRfdG9fY29sdW06IEFueSwgY29sdW1uOiBzdHIsIHRocm93X3Rvd2VsX2Vhcmx5OiBib29sID0gRmFsc2UsIGFzX2xhc3RfY2hhbmNlX2NvbnZlcnRfdG9fc3RyaW5nOiBib29sID0gRmFsc2UpIC0+IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZVxuXG4gICAgICAgIGRmID0gcGQucmVhZF9jc3YoXG5cbiAgICAgICAgXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiXG5cbiAgICAgICAgKVxuXG4gICAgICAgIHByaW50KGRmWzo2XSlcblxuICAgICAgICBkZls6Nl0uZF9hZGRfdmFsdWVfdG9fZXhpc3RpbmdfY29sdW1uc193aXRoX2xvYyhjb25kaXRpb249KGRmLlBjbGFzcyA9PSAzKSwgYWRkX3RvX2NvbHVtPTEwMDAwMCwgY29sdW1uPVwiRmFyZVwiKVxuXG4gICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgIDEgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnJhdW5kLCBNci4gT3dlbiBIYXJyaXMgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgIEEvNSAyMTE3MSAgIDcuMjUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAxICAgICAgICAgICAgMiAgICAgICAgIDEgICAgICAgMSAgQ3VtaW5ncywgTXJzLiBKb2huIEJyYWRsZXkgKEZsb3JlbmNlIEJyaWdncyBUaC4uLiAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgIFBDIDE3NTk5ICA3MS4yODMzICAgQzg1ICAgICAgICAgQ1xuXG4gICAgICAgIDIgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgIDQgICAgICAgICAxICAgICAgIDEgICAgICAgRnV0cmVsbGUsIE1ycy4gSmFjcXVlcyBIZWF0aCAoTGlseSBNYXkgUGVlbCkgIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMzgwMyAgNTMuMTAwMCAgQzEyMyAgICAgICAgIFNcblxuICAgICAgICA0ICAgICAgICAgICAgNSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsbGVuLCBNci4gV2lsbGlhbSBIZW5yeSAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzczNDUwICAgOC4wNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDUgICAgICAgICAgICA2ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3JhbiwgTXIuIEphbWVzICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzMzA4NzcgICA4LjQ1ODMgICBOYU4gICAgICAgICBRXG5cbiAgICAgICAgWzYgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgT3V0WzM3XTpcblxuICAgICAgICAgICBQYXNzZW5nZXJJZCAgU3Vydml2ZWQgIFBjbGFzcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSAgICAgU2V4ICAuLi4gIFBhcmNoICAgICAgICAgICAgVGlja2V0ICAgICAgICAgRmFyZSBDYWJpbiAgRW1iYXJrZWRcblxuICAgICAgICAwICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAxMDAwMDcuMjUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAxICAgICAgICAgICAgMiAgICAgICAgIDEgICAgICAgMSAgQ3VtaW5ncywgTXJzLiBKb2huIEJyYWRsZXkgKEZsb3JlbmNlIEJyaWdncyBUaC4uLiAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgIFBDIDE3NTk5ICAgICAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgMyAgICAgICAgIDEgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVpa2tpbmVuLCBNaXNzLiBMYWluYSAgZmVtYWxlICAuLi4gICAgICAwICBTVE9OL08yLiAzMTAxMjgyICAxMDAwMDcuOTI1MCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAzICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICAgICAgNTMuMTAwMCAgQzEyMyAgICAgICAgIFNcblxuICAgICAgICA0ICAgICAgICAgICAgNSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgIEFsbGVuLCBNci4gV2lsbGlhbSBIZW5yeSAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzczNDUwICAxMDAwMDguMDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA1ICAgICAgICAgICAgNiAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9yYW4sIE1yLiBKYW1lcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzMwODc3ICAxMDAwMDguNDU4MyAgIE5hTiAgICAgICAgIFFcblxuICAgICAgICBbNiByb3dzIHggMTIgY29sdW1uc11cblxuICAgICAgICAgICAgUGFyYW1ldGVyczpcblxuICAgICAgICAgICAgICAgIGRmOiBwZC5EYXRhRnJhbWVcblxuICAgICAgICAgICAgICAgICAgICBEYXRhRnJhbWUgdG8gdXBkYXRlXG5cbiAgICAgICAgICAgICAgICBjb25kaXRpb246IFVuaW9uW3BkLlNlcmllcywgcGQuRGF0YUZyYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgIFBhc3MgYSBjb25kaXRpb24gd2l0aCBkZi5sb2M6IGRmLmxvY1tkZlsnc2hpZWxkJ10gPiA2XVxuXG4gICAgICAgICAgICAgICAgYWRkX3RvX2NvbHVtOjogQW55XG5cbiAgICAgICAgICAgICAgICAgICAgVmFsdWUgdGhhdCB5b3Ugd2FudCB0byBhZGQgdG8gb2xkIHZhbHVlc1xuXG4gICAgICAgICAgICAgICAgY29sdW1uOiBzdHJcblxuICAgICAgICAgICAgICAgICAgICBDb2x1bW4gd2hpY2ggc2hvdWxkIGJlIHVwZGF0ZWRcblxuICAgICAgICAgICAgICAgIHRocm93X3Rvd2VsX2Vhcmx5OiBib29sXG5cbiAgICAgICAgICAgICAgICAgICAgSWYgRmFsc2U6IElmIHRoZXJlIGlzIGFuIGV4Y2VwdGlvbiwgd2lsbCBiZSBpdGVyYXRpbmcgbGluZSBieSBsaW5lIGNoYW5naW5nIGVhY2ggdmFsdWUuXG5cbiAgICAgICAgICAgICAgICAgICAgSWYgaXQgZmFpbHMsIGl0IHdpbGwga2VlcCB0aGUgb2xkIHZhbHVlLiAoZGVmYXVsdCA9IEZhbHNlKVxuXG4gICAgICAgICAgICAgICAgYXNfbGFzdF9jaGFuY2VfY29udmVydF90b19zdHJpbmc6IGJvb2xcblxuICAgICAgICAgICAgICAgICAgICBJZiB5b3Ugd2FudCB0byBjaGFuZ2UgdGhlIHZhbHVlIGF0IGFueSBjb3N0LCB5b3UgY2FuIGNoYW5nZSBib3RoIHZhbHVlcyB0byBzdHJpbmdzIGFuZCBhZGQgdGhlbSB1cCwgd2hpY2ggd2lsbCByZXN1bHQgaW46XG5cbiAgICAgICAgICAgICAgICAgICAgMSsxID0gXCIxMVwiXG5cbiAgICAgICAgICAgICAgICAgICAgXCJCaWdcIiArIFwiQnJvdGhlclwiID0gXCJCaWdCcm90aGVyXCJcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIHBkLkRhdGFGcmFtZVxuXG5gYGBcblxuXG5cbiMjIyBkZi5kX2Ryb3Bfcm93c193aXRoX2RmX2xvYygpXG5cblxuXG5gYGBweXRob25cblxuICAgIGRmX2xvY19kcm9wKGRmOiBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWUsIGNvbmRpdGlvbjogVW5pb25bcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcywgcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXSkgLT4gcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXG5cbiAgICAgICAgZGYuZF9kcm9wX3Jvd3Nfd2l0aF9kZl9sb2MoZGYubGV2ZWxfMS5zdHIuY29udGFpbnMoXCJhYV9rXCIpKSBpcyB0aGUgc2FtZSBhcyBkZi5sb2NbfmRmLmxldmVsXzEuc3RyLmNvbnRhaW5zKCdhYV9rJyldLmNvcHkoKVxuXG4gICAgICAgIGRmID0gcGQucmVhZF9jc3YoXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcGFuZGFzLWRldi9wYW5kYXMvbWFpbi9kb2MvZGF0YS90aXRhbmljLmNzdlwiKVxuXG4gICAgICAgIGRmXG5cbiAgICAgICAgT3V0WzU0XTpcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAgNy4yNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDEgICAgICAgICAgICAgIDIgICAgICAgICAxICAgICAgIDEgIEN1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGguLi4gIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICA1My4xMDAwICBDMTIzICAgICAgICAgU1xuXG4gICAgICAgIDQgICAgICAgICAgICAgIDUgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGxlbiwgTXIuIFdpbGxpYW0gSGVucnkgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgICAuLi4gICAgICAgICAgICAgICAuLi4gICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICAgIDg4NyAgICAgICAgIDAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMjExNTM2ICAxMy4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4NyAgICAgICAgICA4ODggICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgIEdyYWhhbSwgTWlzcy4gTWFyZ2FyZXQgRWRpdGggIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMjA1MyAgMzAuMDAwMCAgIEI0MiAgICAgICAgIFNcblxuICAgICAgICA4ODggICAgICAgICAgODg5ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICBKb2huc3RvbiwgTWlzcy4gQ2F0aGVyaW5lIEhlbGVuIFwiQ2FycmllXCIgIGZlbWFsZSAgLi4uICAgICAgMiAgICAgICAgVy4vQy4gNjYwNyAgMjMuNDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVociwgTXIuIEthcmwgSG93ZWxsICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDMwLjAwMDAgIEMxNDggICAgICAgICBDXG5cbiAgICAgICAgODkwICAgICAgICAgIDg5MSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9vbGV5LCBNci4gUGF0cmljayAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICAgTmFOICAgICAgICAgUVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgZGYuZF9kcm9wX3Jvd3Nfd2l0aF9kZl9sb2MoZGYuU2V4LnN0ci5jb250YWlucyhyXCJtYWxlJFwiLCByZWdleD1UcnVlLCBuYT1GYWxzZSkpXG5cbiAgICAgICAgT3V0WzU1XTpcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMSAgICAgICAgICAgICAgMiAgICAgICAgIDEgICAgICAgMSAgQ3VtaW5ncywgTXJzLiBKb2huIEJyYWRsZXkgKEZsb3JlbmNlIEJyaWdncyBUaC4uLiAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgIFBDIDE3NTk5ICA3MS4yODMzICAgQzg1ICAgICAgICAgQ1xuXG4gICAgICAgIDIgICAgICAgICAgICAgIDMgICAgICAgICAxICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlaWtraW5lbiwgTWlzcy4gTGFpbmEgIGZlbWFsZSAgLi4uICAgICAgMCAgU1RPTi9PMi4gMzEwMTI4MiAgIDcuOTI1MCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAzICAgICAgICAgICAgICA0ICAgICAgICAgMSAgICAgICAxICAgICAgIEZ1dHJlbGxlLCBNcnMuIEphY3F1ZXMgSGVhdGggKExpbHkgTWF5IFBlZWwpICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTM4MDMgIDUzLjEwMDAgIEMxMjMgICAgICAgICBTXG5cbiAgICAgICAgOCAgICAgICAgICAgICAgOSAgICAgICAgIDEgICAgICAgMyAgSm9obnNvbiwgTXJzLiBPc2NhciBXIChFbGlzYWJldGggVmlsaGVsbWluYSBCZXJnKSAgZmVtYWxlICAuLi4gICAgICAyICAgICAgICAgICAgMzQ3NzQyICAxMS4xMzMzICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDkgICAgICAgICAgICAgMTAgICAgICAgICAxICAgICAgIDIgICAgICAgICAgICAgICAgTmFzc2VyLCBNcnMuIE5pY2hvbGFzIChBZGVsZSBBY2hlbSkgIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDIzNzczNiAgMzAuMDcwOCAgIE5hTiAgICAgICAgIENcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgICAuLi4gICAgICAgICAgICAgICAuLi4gICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODgwICAgICAgICAgIDg4MSAgICAgICAgIDEgICAgICAgMiAgICAgICBTaGVsbGV5LCBNcnMuIFdpbGxpYW0gKEltYW5pdGEgUGFycmlzaCBIYWxsKSAgZmVtYWxlICAuLi4gICAgICAxICAgICAgICAgICAgMjMwNDMzICAyNi4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4MiAgICAgICAgICA4ODMgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgIERhaGxiZXJnLCBNaXNzLiBHZXJkYSBVbHJpa2EgIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgICAgNzU1MiAgMTAuNTE2NyAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODUgICAgICAgICAgODg2ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgUmljZSwgTXJzLiBXaWxsaWFtIChNYXJnYXJldCBOb3J0b24pICBmZW1hbGUgIC4uLiAgICAgIDUgICAgICAgICAgICAzODI2NTIgIDI5LjEyNTAgICBOYU4gICAgICAgICBRXG5cbiAgICAgICAgODg3ICAgICAgICAgIDg4OCAgICAgICAgIDEgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgR3JhaGFtLCBNaXNzLiBNYXJnYXJldCBFZGl0aCAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEyMDUzICAzMC4wMDAwICAgQjQyICAgICAgICAgU1xuXG4gICAgICAgIDg4OCAgICAgICAgICA4ODkgICAgICAgICAwICAgICAgIDMgICAgICAgICAgIEpvaG5zdG9uLCBNaXNzLiBDYXRoZXJpbmUgSGVsZW4gXCJDYXJyaWVcIiAgZmVtYWxlICAuLi4gICAgICAyICAgICAgICBXLi9DLiA2NjA3ICAyMy40NTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIFszMTQgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgICAgICBkZjogcGQuRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICAgICAgRGF0YUZyYW1lXG5cbiAgICAgICAgICAgICAgICBjb25kaXRpb246IFVuaW9uW3BkLlNlcmllcywgcGQuRGF0YUZyYW1lXVxuXG4gICAgICAgICAgICAgICAgICAgIENvbmRpdGlvbiB3aXRoIGRmLmxvYzogZGYubG9jW2RmWydzaGllbGQnXSA+IDZdXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBwZC5EYXRhRnJhbWVcblxuYGBgXG5cblxuXG4jIyMgZGYuZF9zZXRfdmFsdWVzX3dpdGhfZGZfbG9jXG5cblxuXG5gYGBweXRob25cblxuICAgIGRmX2xvY19zZXQoZGY6IHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZSwgY29uZGl0aW9uOiBVbmlvbltwYW5kYXMuY29yZS5zZXJpZXMuU2VyaWVzLCBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWVdLCBuZXdfZGF0YTogQW55LCBjb2x1bW46IHN0cikgLT4gcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXG5cbiAgICAgICAgZGYgPSBwZC5yZWFkX2NzdihcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wYW5kYXMtZGV2L3BhbmRhcy9tYWluL2RvYy9kYXRhL3RpdGFuaWMuY3N2XCIpXG5cblxuXG4gICAgICAgIGRmXG5cbiAgICAgICAgT3V0WzUxXTpcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAgNy4yNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDEgICAgICAgICAgICAgIDIgICAgICAgICAxICAgICAgIDEgIEN1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGguLi4gIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICA1My4xMDAwICBDMTIzICAgICAgICAgU1xuXG4gICAgICAgIDQgICAgICAgICAgICAgIDUgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGxlbiwgTXIuIFdpbGxpYW0gSGVucnkgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgICAuLi4gICAgICAgICAgICAgICAuLi4gICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICAgIDg4NyAgICAgICAgIDAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMjExNTM2ICAxMy4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4NyAgICAgICAgICA4ODggICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgIEdyYWhhbSwgTWlzcy4gTWFyZ2FyZXQgRWRpdGggIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMjA1MyAgMzAuMDAwMCAgIEI0MiAgICAgICAgIFNcblxuICAgICAgICA4ODggICAgICAgICAgODg5ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICBKb2huc3RvbiwgTWlzcy4gQ2F0aGVyaW5lIEhlbGVuIFwiQ2FycmllXCIgIGZlbWFsZSAgLi4uICAgICAgMiAgICAgICAgVy4vQy4gNjYwNyAgMjMuNDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVociwgTXIuIEthcmwgSG93ZWxsICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDMwLjAwMDAgIEMxNDggICAgICAgICBDXG5cbiAgICAgICAgODkwICAgICAgICAgIDg5MSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9vbGV5LCBNci4gUGF0cmljayAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICAgTmFOICAgICAgICAgUVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgZGYuZF9zZXRfdmFsdWVzX3dpdGhfZGZfbG9jKGNvbmRpdGlvbiA9IGRmLlNleC5zdHIuY29udGFpbnMoclwibWFsZSRcIiwgcmVnZXg9VHJ1ZSwgbmE9RmFsc2UpLGNvbHVtbiA9ICdGYXJlJyxuZXdfZGF0YSA9IDEwMDAwMClcblxuICAgICAgICBPdXRbNTJdOlxuXG4gICAgICAgICAgICAgUGFzc2VuZ2VySWQgIFN1cnZpdmVkICBQY2xhc3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgICAgIFNleCAgLi4uICBQYXJjaCAgICAgICAgICAgIFRpY2tldCAgICAgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAxMDAwMDAuMDAwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAxICAgICAgICAgICAgICAyICAgICAgICAgMSAgICAgICAxICBDdW1pbmdzLCBNcnMuIEpvaG4gQnJhZGxleSAoRmxvcmVuY2UgQnJpZ2dzIFRoLi4uICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgUEMgMTc1OTkgICAgICA3MS4yODMzICAgQzg1ICAgICAgICAgQ1xuXG4gICAgICAgIDIgICAgICAgICAgICAgIDMgICAgICAgICAxICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhlaWtraW5lbiwgTWlzcy4gTGFpbmEgIGZlbWFsZSAgLi4uICAgICAgMCAgU1RPTi9PMi4gMzEwMTI4MiAgICAgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICAgICAgNTMuMTAwMCAgQzEyMyAgICAgICAgIFNcblxuICAgICAgICA0ICAgICAgICAgICAgICA1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzNzM0NTAgIDEwMDAwMC4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIC4uICAgICAgICAgICAuLi4gICAgICAgLi4uICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi4gICAgIC4uLiAgLi4uICAgIC4uLiAgICAgICAgICAgICAgIC4uLiAgICAgICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICAgIDg4NyAgICAgICAgIDAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMjExNTM2ICAxMDAwMDAuMDAwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODcgICAgICAgICAgODg4ICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICBHcmFoYW0sIE1pc3MuIE1hcmdhcmV0IEVkaXRoICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTIwNTMgICAgICAzMC4wMDAwICAgQjQyICAgICAgICAgU1xuXG4gICAgICAgIDg4OCAgICAgICAgICA4ODkgICAgICAgICAwICAgICAgIDMgICAgICAgICAgIEpvaG5zdG9uLCBNaXNzLiBDYXRoZXJpbmUgSGVsZW4gXCJDYXJyaWVcIiAgZmVtYWxlICAuLi4gICAgICAyICAgICAgICBXLi9DLiA2NjA3ICAgICAgMjMuNDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVociwgTXIuIEthcmwgSG93ZWxsICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDEwMDAwMC4wMDAwICBDMTQ4ICAgICAgICAgQ1xuXG4gICAgICAgIDg5MCAgICAgICAgICA4OTEgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvb2xleSwgTXIuIFBhdHJpY2sgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MDM3NiAgMTAwMDAwLjAwMDAgICBOYU4gICAgICAgICBRXG5cbiAgICAgICAgWzg5MSByb3dzIHggMTIgY29sdW1uc11cblxuXG5cblxuXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOlxuXG4gICAgICAgICAgICAgICAgZGY6IHBkLkRhdGFmcmFtZVxuXG4gICAgICAgICAgICAgICAgICAgIERhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiBVbmlvbltwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZV1cblxuICAgICAgICAgICAgICAgICAgICBQYXNzIGEgY29uZGl0aW9uIHdpdGggZGYubG9jOiBkZi5sb2NbZGZbJ3NoaWVsZCddID4gNl1cblxuICAgICAgICAgICAgICAgIG5ld19kYXRhOiBBbnlcblxuICAgICAgICAgICAgICAgICAgICBOZXcgdmFsdWVzIGZvciB1cGRhdGVcblxuICAgICAgICAgICAgICAgIGNvbHVtbjogc3RyXG5cbiAgICAgICAgICAgICAgICAgICAgQ29sdW1uIHdoaWNoIHNob3VsZCBiZSB1cGRhdGVkXG5cbiAgICAgICAgICAgIFJldHVybnM6XG5cbiAgICAgICAgICAgICAgICBwZC5EYXRhRnJhbWVcblxuYGBgXG5cblxuXG4jIyMgZGYuZF9kZmxvYygpXG5cblxuXG5gYGBweXRob25cblxuICAgIGRmX2xvYyhkZjogcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lLCBjb25kaXRpb246IFVuaW9uW3BhbmRhcy5jb3JlLnNlcmllcy5TZXJpZXMsIHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZV0sIGNvbHVtbjogT3B0aW9uYWxbc3RyXSA9IE5vbmUpIC0+IFVuaW9uW3BhbmRhcy5jb3JlLnNlcmllcy5TZXJpZXMsIHBhbmRhcy5jb3JlLmZyYW1lLkRhdGFGcmFtZV1cblxuICAgICAgICBkZi5kX2RmbG9jKGRmLmFhX3ZhbHVlLnN0ci5jb250YWlucyhcImF1dGhvclwiKSkgaXMgdGhlIHNhbWUgYXMgZGYubG9jW2RmLmFhX3ZhbHVlLnN0ci5jb250YWlucygnYXV0aG9yJyldLmNvcHkoKVxuXG5cblxuICAgICAgICBkZiA9IHBkLnJlYWRfY3N2KFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3BhbmRhcy1kZXYvcGFuZGFzL21haW4vZG9jL2RhdGEvdGl0YW5pYy5jc3ZcIilcblxuICAgICAgICBwcmludChkZilcblxuICAgICAgICBwcmludChkZi5kX2RmbG9jKGRmLlNleC5zdHIuY29udGFpbnMoclwibWFsZSRcIiwgcmVnZXg9VHJ1ZSwgbmE9RmFsc2UpKSlcblxuICAgICAgICBkZi5kX2RmbG9jKGRmLlNleC5zdHIuY29udGFpbnMoclwibWFsZSRcIiwgcmVnZXg9VHJ1ZSwgbmE9RmFsc2UpLGNvbHVtbj0nTmFtZScpXG5cbiAgICAgICAgICAgICBQYXNzZW5nZXJJZCAgU3Vydml2ZWQgIFBjbGFzcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSAgICAgU2V4ICAuLi4gIFBhcmNoICAgICAgICAgICAgVGlja2V0ICAgICBGYXJlIENhYmluICBFbWJhcmtlZFxuXG4gICAgICAgIDAgICAgICAgICAgICAgIDEgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnJhdW5kLCBNci4gT3dlbiBIYXJyaXMgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgIEEvNSAyMTE3MSAgIDcuMjUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAxICAgICAgICAgICAgICAyICAgICAgICAgMSAgICAgICAxICBDdW1pbmdzLCBNcnMuIEpvaG4gQnJhZGxleSAoRmxvcmVuY2UgQnJpZ2dzIFRoLi4uICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgUEMgMTc1OTkgIDcxLjI4MzMgICBDODUgICAgICAgICBDXG5cbiAgICAgICAgMiAgICAgICAgICAgICAgMyAgICAgICAgIDEgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGVpa2tpbmVuLCBNaXNzLiBMYWluYSAgZmVtYWxlICAuLi4gICAgICAwICBTVE9OL08yLiAzMTAxMjgyICAgNy45MjUwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDMgICAgICAgICAgICAgIDQgICAgICAgICAxICAgICAgIDEgICAgICAgRnV0cmVsbGUsIE1ycy4gSmFjcXVlcyBIZWF0aCAoTGlseSBNYXkgUGVlbCkgIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMzgwMyAgNTMuMTAwMCAgQzEyMyAgICAgICAgIFNcblxuICAgICAgICA0ICAgICAgICAgICAgICA1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAzNzM0NTAgICA4LjA1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgLi4gICAgICAgICAgIC4uLiAgICAgICAuLi4gICAgIC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgICAgLi4uICAuLi4gICAgLi4uICAgICAgICAgICAgICAgLi4uICAgICAgLi4uICAgLi4uICAgICAgIC4uLlxuXG4gICAgICAgIDg4NiAgICAgICAgICA4ODcgICAgICAgICAwICAgICAgIDIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb250dmlsYSwgUmV2LiBKdW96YXMgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDIxMTUzNiAgMTMuMDAwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODcgICAgICAgICAgODg4ICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICBHcmFoYW0sIE1pc3MuIE1hcmdhcmV0IEVkaXRoICBmZW1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTIwNTMgIDMwLjAwMDAgICBCNDIgICAgICAgICBTXG5cbiAgICAgICAgODg4ICAgICAgICAgIDg4OSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgSm9obnN0b24sIE1pc3MuIENhdGhlcmluZSBIZWxlbiBcIkNhcnJpZVwiICBmZW1hbGUgIC4uLiAgICAgIDIgICAgICAgIFcuL0MuIDY2MDcgIDIzLjQ1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgODg5ICAgICAgICAgIDg5MCAgICAgICAgIDEgICAgICAgMSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJlaHIsIE1yLiBLYXJsIEhvd2VsbCAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTExMzY5ICAzMC4wMDAwICBDMTQ4ICAgICAgICAgQ1xuXG4gICAgICAgIDg5MCAgICAgICAgICA4OTEgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvb2xleSwgTXIuIFBhdHJpY2sgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MDM3NiAgIDcuNzUwMCAgIE5hTiAgICAgICAgIFFcblxuICAgICAgICBbODkxIHJvd3MgeCAxMiBjb2x1bW5zXVxuXG4gICAgICAgICAgICAgUGFzc2VuZ2VySWQgIFN1cnZpdmVkICBQY2xhc3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSAgIFNleCAgLi4uICBQYXJjaCAgICAgICAgICAgIFRpY2tldCAgICAgRmFyZSBDYWJpbiAgRW1iYXJrZWRcblxuICAgICAgICAwICAgICAgICAgICAgICAxICAgICAgICAgMCAgICAgICAzICAgICAgICAgQnJhdW5kLCBNci4gT3dlbiBIYXJyaXMgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICBBLzUgMjExNzEgICA3LjI1MDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgNCAgICAgICAgICAgICAgNSAgICAgICAgIDAgICAgICAgMyAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzczNDUwICAgOC4wNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDUgICAgICAgICAgICAgIDYgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgTW9yYW4sIE1yLiBKYW1lcyAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDMzMDg3NyAgIDguNDU4MyAgIE5hTiAgICAgICAgIFFcblxuICAgICAgICA2ICAgICAgICAgICAgICA3ICAgICAgICAgMCAgICAgICAxICAgICAgICAgTWNDYXJ0aHksIE1yLiBUaW1vdGh5IEogIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAgMTc0NjMgIDUxLjg2MjUgICBFNDYgICAgICAgICBTXG5cbiAgICAgICAgNyAgICAgICAgICAgICAgOCAgICAgICAgIDAgICAgICAgMyAgUGFsc3NvbiwgTWFzdGVyLiBHb3N0YSBMZW9uYXJkICBtYWxlICAuLi4gICAgICAxICAgICAgICAgICAgMzQ5OTA5ICAyMS4wNzUwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIC4uICAgICAgICAgICAuLi4gICAgICAgLi4uICAgICAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLiAgIC4uLiAgLi4uICAgIC4uLiAgICAgICAgICAgICAgIC4uLiAgICAgIC4uLiAgIC4uLiAgICAgICAuLi5cblxuICAgICAgICA4ODMgICAgICAgICAgODg0ICAgICAgICAgMCAgICAgICAyICAgQmFuZmllbGQsIE1yLiBGcmVkZXJpY2sgSmFtZXMgIG1hbGUgIC4uLiAgICAgIDAgIEMuQS4vU09UT04gMzQwNjggIDEwLjUwMDAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgODg0ICAgICAgICAgIDg4NSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICBTdXRlaGFsbCwgTXIuIEhlbnJ5IEpyICBtYWxlICAuLi4gICAgICAwICAgU09UT04vT1EgMzkyMDc2ICAgNy4wNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4NiAgICAgICAgICA4ODcgICAgICAgICAwICAgICAgIDIgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDIxMTUzNiAgMTMuMDAwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICBCZWhyLCBNci4gS2FybCBIb3dlbGwgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDMwLjAwMDAgIEMxNDggICAgICAgICBDXG5cbiAgICAgICAgODkwICAgICAgICAgIDg5MSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICBEb29sZXksIE1yLiBQYXRyaWNrICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICAgTmFOICAgICAgICAgUVxuXG4gICAgICAgIFs1Nzcgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgT3V0WzYwXTpcblxuICAgICAgICAwICAgICAgICAgICAgIEJyYXVuZCwgTXIuIE93ZW4gSGFycmlzXG5cbiAgICAgICAgNCAgICAgICAgICAgIEFsbGVuLCBNci4gV2lsbGlhbSBIZW5yeVxuXG4gICAgICAgIDUgICAgICAgICAgICAgICAgICAgIE1vcmFuLCBNci4gSmFtZXNcblxuICAgICAgICA2ICAgICAgICAgICAgIE1jQ2FydGh5LCBNci4gVGltb3RoeSBKXG5cbiAgICAgICAgNyAgICAgIFBhbHNzb24sIE1hc3Rlci4gR29zdGEgTGVvbmFyZFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uXG5cbiAgICAgICAgODgzICAgICBCYW5maWVsZCwgTXIuIEZyZWRlcmljayBKYW1lc1xuXG4gICAgICAgIDg4NCAgICAgICAgICAgIFN1dGVoYWxsLCBNci4gSGVucnkgSnJcblxuICAgICAgICA4ODYgICAgICAgICAgICAgTW9udHZpbGEsIFJldi4gSnVvemFzXG5cbiAgICAgICAgODg5ICAgICAgICAgICAgIEJlaHIsIE1yLiBLYXJsIEhvd2VsbFxuXG4gICAgICAgIDg5MCAgICAgICAgICAgICAgIERvb2xleSwgTXIuIFBhdHJpY2tcblxuICAgICAgICBOYW1lOiBOYW1lLCBMZW5ndGg6IDU3NywgZHR5cGU6IG9iamVjdFxuXG4gICAgICAgICAgICBQYXJhbWV0ZXJzOlxuXG4gICAgICAgICAgICAgICAgZGY6IHBkLkRhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgICAgIERhdGFGcmFtZVxuXG4gICAgICAgICAgICAgICAgY29uZGl0aW9uOiBVbmlvbltwZC5TZXJpZXMsIHBkLkRhdGFGcmFtZV1cblxuICAgICAgICAgICAgICAgICAgICBQYXNzIGEgY29uZGl0aW9uIHdpdGggZGYubG9jOiBkZi5sb2NbZGZbJ3NoaWVsZCddID4gNl1cblxuICAgICAgICAgICAgICAgIGNvbHVtbjogVW5pb25bTm9uZSwgc3RyXVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIGEgc3RyaW5nIGlzIHBhc3NlZCwgdGhlIG1ldGhvZCB3aWxsIHJldHVybiBwZC5TZXJpZXNcblxuICAgICAgICAgICAgICAgICAgICBOb25lIHdpbGwgcmV0dXJuIHRoZSB3aG9sZSBEYXRhRnJhbWUgKGRlZmF1bHQgPSBOb25lIClcblxuICAgICAgICAgICAgUmV0dXJuczpcblxuICAgICAgICAgICAgICAgIFVuaW9uW3BkLlNlcmllcywgcGQuRGF0YUZyYW1lXVxuXG5gYGBcblxuXG5cbiMjIyBkZi5kZi5kc19hbGxfbmFuc190b19wZE5BKClcblxuXG5cbmBgYHB5dGhvblxuXG4gICAgYWxsX25hbnNfaW5fZGZfdG9fcGROQShkZjogVW5pb25bcGFuZGFzLmNvcmUuc2VyaWVzLlNlcmllcywgcGFuZGFzLmNvcmUuZnJhbWUuRGF0YUZyYW1lXSwgaW5jbHVkZV9uYV9zdHJpbmdzOiBib29sID0gVHJ1ZSwgaW5jbHVkZV9lbXB0eV9pdGVyczogYm9vbCA9IEZhbHNlLCBpbmNsdWRlXzBfbGVuX3N0cmluZzogYm9vbCA9IEZhbHNlKSAtPiBVbmlvbltwYW5kYXMuY29yZS5zZXJpZXMuU2VyaWVzLCBwYW5kYXMuY29yZS5mcmFtZS5EYXRhRnJhbWVdXG5cbiAgICAgICAgZGYgPSBwZC5yZWFkX2NzdihcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9wYW5kYXMtZGV2L3BhbmRhcy9tYWluL2RvYy9kYXRhL3RpdGFuaWMuY3N2XCIpXG5cblxuXG4gICAgICAgIGRmXG5cbiAgICAgICAgT3V0Wzg2XTpcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiAgUGFyY2ggICAgICAgICAgICBUaWNrZXQgICAgIEZhcmUgQ2FiaW4gIEVtYmFya2VkXG5cbiAgICAgICAgMCAgICAgICAgICAgICAgMSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICBCcmF1bmQsIE1yLiBPd2VuIEhhcnJpcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgQS81IDIxMTcxICAgNy4yNTAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDEgICAgICAgICAgICAgIDIgICAgICAgICAxICAgICAgIDEgIEN1bWluZ3MsIE1ycy4gSm9obiBCcmFkbGV5IChGbG9yZW5jZSBCcmlnZ3MgVGguLi4gIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgIDAgIFNUT04vTzIuIDMxMDEyODIgICA3LjkyNTAgICBOYU4gICAgICAgICBTXG5cbiAgICAgICAgMyAgICAgICAgICAgICAgNCAgICAgICAgIDEgICAgICAgMSAgICAgICBGdXRyZWxsZSwgTXJzLiBKYWNxdWVzIEhlYXRoIChMaWx5IE1heSBQZWVsKSAgZmVtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMTEzODAzICA1My4xMDAwICBDMTIzICAgICAgICAgU1xuXG4gICAgICAgIDQgICAgICAgICAgICAgIDUgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICBBbGxlbiwgTXIuIFdpbGxpYW0gSGVucnkgICAgbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgICAuLi4gICAgICAgICAgICAgICAuLi4gICAgICAuLi4gICAuLi4gICAgICAgLi4uXG5cbiAgICAgICAgODg2ICAgICAgICAgIDg4NyAgICAgICAgIDAgICAgICAgMiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1vbnR2aWxhLCBSZXYuIEp1b3phcyAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMjExNTM2ICAxMy4wMDAwICAgTmFOICAgICAgICAgU1xuXG4gICAgICAgIDg4NyAgICAgICAgICA4ODggICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgIEdyYWhhbSwgTWlzcy4gTWFyZ2FyZXQgRWRpdGggIGZlbWFsZSAgLi4uICAgICAgMCAgICAgICAgICAgIDExMjA1MyAgMzAuMDAwMCAgIEI0MiAgICAgICAgIFNcblxuICAgICAgICA4ODggICAgICAgICAgODg5ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICBKb2huc3RvbiwgTWlzcy4gQ2F0aGVyaW5lIEhlbGVuIFwiQ2FycmllXCIgIGZlbWFsZSAgLi4uICAgICAgMiAgICAgICAgVy4vQy4gNjYwNyAgMjMuNDUwMCAgIE5hTiAgICAgICAgIFNcblxuICAgICAgICA4ODkgICAgICAgICAgODkwICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQmVociwgTXIuIEthcmwgSG93ZWxsICAgIG1hbGUgIC4uLiAgICAgIDAgICAgICAgICAgICAxMTEzNjkgIDMwLjAwMDAgIEMxNDggICAgICAgICBDXG5cbiAgICAgICAgODkwICAgICAgICAgIDg5MSAgICAgICAgIDAgICAgICAgMyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9vbGV5LCBNci4gUGF0cmljayAgICBtYWxlICAuLi4gICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICAgTmFOICAgICAgICAgUVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgZGYuZHNfYWxsX25hbnNfdG9fcGROQSgpXG5cbiAgICAgICAgT3V0Wzg3XTpcblxuICAgICAgICAgICAgIFBhc3NlbmdlcklkICBTdXJ2aXZlZCAgUGNsYXNzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lICAgICBTZXggIC4uLiBQYXJjaCAgICAgICAgICAgIFRpY2tldCAgICAgRmFyZSBDYWJpbiAgRW1iYXJrZWRcblxuICAgICAgICAwICAgICAgICAgICAgICAxICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJyYXVuZCwgTXIuIE93ZW4gSGFycmlzICAgIG1hbGUgIC4uLiAgICAgMCAgICAgICAgIEEvNSAyMTE3MSAgIDcuMjUwMCAgPE5BPiAgICAgICAgIFNcblxuICAgICAgICAxICAgICAgICAgICAgICAyICAgICAgICAgMSAgICAgICAxICBDdW1pbmdzLCBNcnMuIEpvaG4gQnJhZGxleSAoRmxvcmVuY2UgQnJpZ2dzIFRoLi4uICBmZW1hbGUgIC4uLiAgICAgMCAgICAgICAgICBQQyAxNzU5OSAgNzEuMjgzMyAgIEM4NSAgICAgICAgIENcblxuICAgICAgICAyICAgICAgICAgICAgICAzICAgICAgICAgMSAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIZWlra2luZW4sIE1pc3MuIExhaW5hICBmZW1hbGUgIC4uLiAgICAgMCAgU1RPTi9PMi4gMzEwMTI4MiAgIDcuOTI1MCAgPE5BPiAgICAgICAgIFNcblxuICAgICAgICAzICAgICAgICAgICAgICA0ICAgICAgICAgMSAgICAgICAxICAgICAgIEZ1dHJlbGxlLCBNcnMuIEphY3F1ZXMgSGVhdGggKExpbHkgTWF5IFBlZWwpICBmZW1hbGUgIC4uLiAgICAgMCAgICAgICAgICAgIDExMzgwMyAgNTMuMTAwMCAgQzEyMyAgICAgICAgIFNcblxuICAgICAgICA0ICAgICAgICAgICAgICA1ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxsZW4sIE1yLiBXaWxsaWFtIEhlbnJ5ICAgIG1hbGUgIC4uLiAgICAgMCAgICAgICAgICAgIDM3MzQ1MCAgIDguMDUwMCAgPE5BPiAgICAgICAgIFNcblxuICAgICAgICAuLiAgICAgICAgICAgLi4uICAgICAgIC4uLiAgICAgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4uICAgICAuLi4gIC4uLiAgIC4uLiAgICAgICAgICAgICAgIC4uLiAgICAgIC4uLiAgIC4uLiAgICAgICAuLi5cblxuICAgICAgICA4ODYgICAgICAgICAgODg3ICAgICAgICAgMCAgICAgICAyICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTW9udHZpbGEsIFJldi4gSnVvemFzICAgIG1hbGUgIC4uLiAgICAgMCAgICAgICAgICAgIDIxMTUzNiAgMTMuMDAwMCAgPE5BPiAgICAgICAgIFNcblxuICAgICAgICA4ODcgICAgICAgICAgODg4ICAgICAgICAgMSAgICAgICAxICAgICAgICAgICAgICAgICAgICAgICBHcmFoYW0sIE1pc3MuIE1hcmdhcmV0IEVkaXRoICBmZW1hbGUgIC4uLiAgICAgMCAgICAgICAgICAgIDExMjA1MyAgMzAuMDAwMCAgIEI0MiAgICAgICAgIFNcblxuICAgICAgICA4ODggICAgICAgICAgODg5ICAgICAgICAgMCAgICAgICAzICAgICAgICAgICBKb2huc3RvbiwgTWlzcy4gQ2F0aGVyaW5lIEhlbGVuIFwiQ2FycmllXCIgIGZlbWFsZSAgLi4uICAgICAyICAgICAgICBXLi9DLiA2NjA3ICAyMy40NTAwICA8TkE+ICAgICAgICAgU1xuXG4gICAgICAgIDg4OSAgICAgICAgICA4OTAgICAgICAgICAxICAgICAgIDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCZWhyLCBNci4gS2FybCBIb3dlbGwgICAgbWFsZSAgLi4uICAgICAwICAgICAgICAgICAgMTExMzY5ICAzMC4wMDAwICBDMTQ4ICAgICAgICAgQ1xuXG4gICAgICAgIDg5MCAgICAgICAgICA4OTEgICAgICAgICAwICAgICAgIDMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERvb2xleSwgTXIuIFBhdHJpY2sgICAgbWFsZSAgLi4uICAgICAwICAgICAgICAgICAgMzcwMzc2ICAgNy43NTAwICA8TkE+ICAgICAgICAgUVxuXG4gICAgICAgIFs4OTEgcm93cyB4IDEyIGNvbHVtbnNdXG5cbiAgICAgICAgZGYuQ2FiaW4uZHNfYWxsX25hbnNfdG9fcGROQSgpXG5cbiAgICAgICAgT3V0Wzg4XTpcblxuICAgICAgICAwICAgICAgPE5BPlxuXG4gICAgICAgIDEgICAgICAgQzg1XG5cbiAgICAgICAgMiAgICAgIDxOQT5cblxuICAgICAgICAzICAgICAgQzEyM1xuXG4gICAgICAgIDQgICAgICA8TkE+XG5cbiAgICAgICAgICAgICAgIC4uLlxuXG4gICAgICAgIDg4NiAgICA8TkE+XG5cbiAgICAgICAgODg3ICAgICBCNDJcblxuICAgICAgICA4ODggICAgPE5BPlxuXG4gICAgICAgIDg4OSAgICBDMTQ4XG5cbiAgICAgICAgODkwICAgIDxOQT5cblxuICAgICAgICBOYW1lOiBDYWJpbiwgTGVuZ3RoOiA4OTEsIGR0eXBlOiBvYmplY3RcblxuXG5cbiAgICAgICAgICAgIFBhcmFtZXRlcnM6XG5cbiAgICAgICAgICAgICAgICBkZjogVW5pb25bcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWVdXG5cbiAgICAgICAgICAgICAgICAgICAgcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWVcblxuICAgICAgICAgICAgICAgIGluY2x1ZGVfbmFfc3RyaW5nczogYm9vbFxuXG4gICAgICAgICAgICAgICAgICAgIFdoZW4gVHJ1ZSAtPiB0cmVhdGVkIGFzIG5hbjpcblxuXG5cbiAgICAgICAgICAgICAgICAgICAgW1xuXG4gICAgICAgICAgICAgICAgICAgIFwiPE5BPlwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiPE5BTj5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIjxuYW4+XCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCJucC5uYW5cIixcblxuICAgICAgICAgICAgICAgICAgICBcIk5vbmVUeXBlXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCJOb25lXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCItMS4jSU5EXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCIxLiNRTkFOXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCIxLiNJTkRcIixcblxuICAgICAgICAgICAgICAgICAgICBcIi0xLiNRTkFOXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCIjTi9BIE4vQVwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiI04vQVwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiTi9BXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCJuL2FcIixcblxuICAgICAgICAgICAgICAgICAgICBcIk5BXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCIjTkFcIixcblxuICAgICAgICAgICAgICAgICAgICBcIk5VTExcIixcblxuICAgICAgICAgICAgICAgICAgICBcIm51bGxcIixcblxuICAgICAgICAgICAgICAgICAgICBcIk5hTlwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwiLU5hTlwiLFxuXG4gICAgICAgICAgICAgICAgICAgIFwibmFuXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXCItbmFuXCIsXG5cbiAgICAgICAgICAgICAgICAgICAgXVxuXG5cblxuICAgICAgICAgICAgICAgICAgICAoZGVmYXVsdCA9VHJ1ZSlcblxuICAgICAgICAgICAgICAgIGluY2x1ZGVfZW1wdHlfaXRlcnM6IGJvb2xcblxuICAgICAgICAgICAgICAgICAgICBXaGVuIFRydWUgLT4gW10sIHt9IGFyZSB0cmVhdGVkIGFzIG5hbiAoZGVmYXVsdCA9IEZhbHNlIClcblxuXG5cbiAgICAgICAgICAgICAgICBpbmNsdWRlXzBfbGVuX3N0cmluZzogYm9vbFxuXG4gICAgICAgICAgICAgICAgICAgIFdoZW4gVHJ1ZSAtPiAnJyBpcyB0cmVhdGVkIGFzIG5hbiAoZGVmYXVsdCA9IEZhbHNlIClcblxuICAgICAgICAgICAgICAgICAgICBSZXR1cm5zOlxuXG4gICAgICAgICAgICAgICAgZGljdFxuXG4gICAgICAgICAgICBSZXR1cm5zOlxuXG4gICAgICAgICAgICAgICAgVW5pb25bcGQuU2VyaWVzLCBwZC5EYXRhRnJhbWVdXG5cbmBgYFxuXG4iLA==
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2hhbnNhbGVtYW9zL2FfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wiLA==
ICAgICJrZXl3b3JkcyI6ICJmbGF0dGVuLHBhbmRhcyxkaWN0LGxpc3QsbnVtcHksdHVwbGUsVGFnc2l0ZXIsbmVzdGVkLGl0ZXJhYmxlLGxpc3Rzb2ZsaXN0cyxmbGF0dGVuanNvbixpdGVyLGV4cGxvZGUsc3F1ZWV6ZSIs
ICAgICJsaWNlbnNlIjogIk1JVCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImEtcGFuZGFzLWV4LXBsb2RlLXRvb2wiLA==
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYS1wYW5kYXMtZXgtcGxvZGUtdG9vbC8iLA==
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYS1wYW5kYXMtZXgtcGxvZGUtdG9vbC8iLA==
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9oYW5zYWxlbWFvcy9hX3BhbmRhc19leF9wbG9kZV90b29sIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYS1wYW5kYXMtZXgtcGxvZGUtdG9vbC8wLjQ0LyIs
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgImEtcGFuZGFzLWV4LWRmLXRvLXN0cmluZyIs
ICAgICAgIkJydXRlQ29kZWNDaGVja2VyIiw=
ICAgICAgImZsYXR0ZW4tYW55LWRpY3QtaXRlcmFibGUtb3Itd2hhdHNvZXZlciIs
ICAgICAgImZsYXR0ZW4tZXZlcnl0aGluZyIs
ICAgICAgIm51bXB5Iiw=
ICAgICAgInBhbmRhcyIs
ICAgICAgInJlZ2V4Iiw=
ICAgICAgInVqc29uIg==
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIk5vIG1vcmUgc2xlZXBsZXNzIG5pZ2h0cyBkdWUgdG8gYSBuZXN0ZWQgZGljdCwganNvbiwgbGlzdCBvciB3aGF0c29ldmVyIiw=
ICAgICJ2ZXJzaW9uIjogIjAuNDQiLA==
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNTM0ODM3MSw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjEiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIyNWVlMTRhNWRjZDlkMzQ4YTQyY2I2ZDFiODA2YTk2YjMwOTVjOGJlNGU3ZjU4MDRkZTk2ZjYwZTYyZGIwY2QzIiw=
ICAgICAgICAgICJtZDUiOiAiZmZmOTEyZDM3MDU0NmU2ZmJhNDRmMDM3MDZhZWY0ZWQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZmFmM2M3NDU1MWVjMTNmMjY5MzkxYWQzZTE3ZDJlY2ZhZjJkNTUwNzM5Yzk4Yjc1ZmQ5MmE4MDc5NjZkNTA5ZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjEtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmZmY5MTJkMzcwNTQ2ZTZmYmE0NGYwMzcwNmFlZjRlZCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDY5NzcxLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wOS0yOVQxMDoyNjo0NCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wOS0yOVQxMDoyNjo0NC44NjExOTlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8yNS9lZS8xNGE1ZGNkOWQzNDhhNDJjYjZkMWI4MDZhOTZiMzA5NWM4YmU0ZTdmNTgwNGRlOTZmNjBlNjJkYjBjZDMvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjEtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhMjUyY2JiOTkyZjhlMWU3NzZjMzYxNmRmZTZhZDhkMTVlZjVkMDBlOGExY2ZhZDVjYjJiYjFlZDg5MWY1MTY4Iiw=
ICAgICAgICAgICJtZDUiOiAiNWEwZWQxMmJjOGQwNDNiMzNiYTc4MDBkZmYyZDQxNzEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYmQ0YjMyMWE0ODY3ODYyNzc3YjIyYzQyMjA4ODI1MjEzM2QxNTBhMzE2ODY2OGJhNzNjOTg3MjFhMzhjNGRhOCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1YTBlZDEyYmM4ZDA0M2IzM2JhNzgwMGRmZjJkNDE3MSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDExNjgyOSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wOS0yOVQxMDoyNjo1MyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wOS0yOVQxMDoyNjo1My42MjQ1NDVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hMi81Mi9jYmI5OTJmOGUxZTc3NmMzNjE2ZGZlNmFkOGQxNWVmNWQwMGU4YTFjZmFkNWNiMmJiMWVkODkxZjUxNjgvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjMiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1YjkzNmMwZjI3ODM0ZTg4YzUwMjMwZjBlNmYyOTQ5MDM5MDg2ZTJmZjUzNWVhZmQ5ODI4YzJiNmYzZGY2NmY0Iiw=
ICAgICAgICAgICJtZDUiOiAiMjBlOTAyMjBlNzZmNDE1NzNkY2RkOTlmNDgxMDgzNWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYTFiZGM3ZTRlYzMwOTJkNzM3YmZkNjY1N2JhZDllNDhjN2U1YWFlZGFjMDMwNGViZmJjODVmYWU5NmZlZDE1NSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyMGU5MDIyMGU3NmY0MTU3M2RjZGQ5OWY0ODEwODM1YiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDI3MTI2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMVQwMTowMTowMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMVQwMTowMTowMS40NTU1NzFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81Yi85My82YzBmMjc4MzRlODhjNTAyMzBmMGU2ZjI5NDkwMzkwODZlMmZmNTM1ZWFmZDk4MjhjMmI2ZjNkZjY2ZjQvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjMtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzMzNjYmFiNTY3YWExMmEwODU4ZjZiODQ1M2YwZTA5NzQ5ZTNjMTk4MWZhODgwOTk3ZGU0NjEwN2RhMzQzZDY1Iiw=
ICAgICAgICAgICJtZDUiOiAiZDc1MzExMDdkYzNiYzFmZjVhNTk0MTdhNDkyYjAyZmQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjE2OTMxYTAwYzc1Nzc0MTg2MmM5YzNjNWQ4YWYwM2NlZmE1MWU5ZWIxMzE0OTY3MTc4ZDI2NTY2OWFiOTIzMyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjMudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJkNzUzMTEwN2RjM2JjMWZmNWE1OTQxN2E0OTJiMDJmZCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDk3MDg1LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMVQwMTowMToxMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMVQwMTowMToxMC45NDQ2MjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zMy8zYy9iYWI1NjdhYTEyYTA4NThmNmI4NDUzZjBlMDk3NDllM2MxOTgxZmE4ODA5OTdkZTQ2MTA3ZGEzNDNkNjUvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjMudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjQiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwNzA0MzQyNzQ4YTlmZjI5NjllZmRlOGY0NmJhODkwNDI3NjlmOGFmMWE0ZDQzNTg3MjY0M2I4ZGYxNjMxNGVlIiw=
ICAgICAgICAgICJtZDUiOiAiMWUxMmE2YWJmYWMwYTQ0Nzk5NGY1ZGJlZTJiYzQ2ZWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMWVhZDk1M2Y4Y2UwMzk2YmQ0MjRkYmIzNDUyMmQ1MmI0MTNmOTVmNGRmMTYzY2E2MDQzZWU1OWI2NDJhOTRkNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxZTEyYTZhYmZhYzBhNDQ3OTk0ZjVkYmVlMmJjNDZlYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDI3MTMxLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMVQwMTo1Njo0NiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMVQwMTo1Njo0Ni42Mjg0NThaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNy8wNC8zNDI3NDhhOWZmMjk2OWVmZGU4ZjQ2YmE4OTA0Mjc2OWY4YWYxYTRkNDM1ODcyNjQzYjhkZjE2MzE0ZWUvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1NGVjYTJiNTQ5YmIzZjI5ZGZjY2IzN2ZiMzA0ZGExNjc2YzRmNmVhMTBiOGNhNjY4YjVmYmFlMDNiYWNhOGM5Iiw=
ICAgICAgICAgICJtZDUiOiAiNGE3OThiODQ2NTBlNzk3MTBmODAzYzAwMDQxNGVlODMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYzcyOWZlMjA3MDNhZDQ1MTRlNmM0Y2I4NGJiYjFhN2U0YTlkYmVhN2RmMGIzN2FiZWY3OTIyMjc4M2Y4YTAyMSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI0YTc5OGI4NDY1MGU3OTcxMGY4MDNjMDAwNDE0ZWU4MyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDk3MDg4LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMVQwMTo1Njo1NiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMVQwMTo1Njo1Ni4wNTA3NTFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81NC9lYy9hMmI1NDliYjNmMjlkZmNjYjM3ZmIzMDRkYTE2NzZjNGY2ZWExMGI4Y2E2NjhiNWZiYWUwM2JhY2E4YzkvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjQxIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmMWZkYWI4YWY5YjNjNDJjNzYzZDY2MTQwZjZmOGVlMTAzM2E1MjU4MGU1ZmYzMTlhODQ5NzkwMjdhMzFmMDM3Iiw=
ICAgICAgICAgICJtZDUiOiAiOTc5OTM4YjA1NzQ0NmExNTA5ZDM0MjA5N2UxZDMxYzMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNTQ0YWRlZGZmZGEwYmNkZGQ3YTc5NjljMzg0ZjI3ZDZlMWE4MGM0NTA2ZWQ2ODk3YmFhMTY4NGI0YTI1OTlhZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQxLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5Nzk5MzhiMDU3NDQ2YTE1MDlkMzQyMDk3ZTFkMzFjMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDk1OTYzLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMlQwNDo1NDo1MCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMlQwNDo1NDo1MC43ODcwMzRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mMS9mZC9hYjhhZjliM2M0MmM3NjNkNjYxNDBmNmY4ZWUxMDMzYTUyNTgwZTVmZjMxOWE4NDk3OTAyN2EzMWYwMzcvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQxLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI0Y2JkZTg2NTdmYzIwNjkwZGNiYmE2ZWZlYjc5MTdlZDA3MTQ5MjA2ZjIyOTY4ODllNzRmNzViNjAwYzRiZTU1Iiw=
ICAgICAgICAgICJtZDUiOiAiOTRiYTI0OTY2YTc3ZmZlOGM0ZDM2NmUyYWJhNGVkMTkiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMDIyM2FlYzQxNDI5MzU4ODc5ZWM2OGEwOWZlNTdlNjJlNGZjNzMyNDI2NGU3ODc3NDI4MjgwMWE1NjAyNWM0ZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQxLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5NGJhMjQ5NjZhNzdmZmU4YzRkMzY2ZTJhYmE0ZWQxOSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDE0MjE0NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMlQwNDo1NDo1OSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMlQwNDo1NDo1OS4yMzk2MTRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy80Yy9iZC9lODY1N2ZjMjA2OTBkY2JiYTZlZmViNzkxN2VkMDcxNDkyMDZmMjI5Njg4OWU3NGY3NWI2MDBjNGJlNTUvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQxLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjQyIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI5NWYyYTFmOGQwYjNmYWE4OWYzYjE4YTU0NWU4NDEyNjUxYTMyZTIxZGJmM2Y4MzY0NDY2ZGY5ZDUwNjIwOGNkIiw=
ICAgICAgICAgICJtZDUiOiAiNzYwZDBjZjdlNzE2MzIzNjdmNDFmZTVjOWQ4NjkxNmUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMDJkZTBlMjkyMTE0MjA5ZTk4MjQzYmU1MjQ2MDNhNmU1YmFiNTZjNTVjYzFkYjBmYjc4ZTIyNGExOTE5YmYyYiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQyLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3NjBkMGNmN2U3MTYzMjM2N2Y0MWZlNWM5ZDg2OTE2ZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDk2MDAwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMlQyMzo0NToxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMlQyMzo0NToxNi4xNDY0ODZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy85NS9mMi9hMWY4ZDBiM2ZhYTg5ZjNiMThhNTQ1ZTg0MTI2NTFhMzJlMjFkYmYzZjgzNjQ0NjZkZjlkNTA2MjA4Y2QvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQyLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI2MTZiYTMyNWFlMDMzMmJjOWY5ZDNmNjcyZjBkZDc5MzExOGI3Mjc2ZWZkZDAzZTQ2NzNlNDYyNTcwODYxZWIyIiw=
ICAgICAgICAgICJtZDUiOiAiOTk1N2NmZmI0MzYwMjdmZjFjNmZlMWYyM2IwYjA3ZTgiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjIzNzMzNGEyNzljZjgxZTAyNzJlYjhjOTYwYWM0OTVhOGZjNjQ3NDdlMjQ4NzYwZTJjNmYwZTc0ZDg3NmY1NSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQyLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5OTU3Y2ZmYjQzNjAyN2ZmMWM2ZmUxZjIzYjBiMDdlOCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDE0MjE4NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wMlQyMzo0NToyNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wMlQyMzo0NToyNC4zMzk5MjBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy82MS82Yi9hMzI1YWUwMzMyYmM5ZjlkM2Y2NzJmMGRkNzkzMTE4YjcyNzZlZmRkMDNlNDY3M2U0NjI1NzA4NjFlYjIvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQyLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjQzIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkNDVlMWExZjJiZTk0NWJiMTgyZDJkYzIyYmUxNzI2OGMxNzc0NTU4MmRjZmM4NTc1NmY2MDE0NzAwNGUxNjg0Iiw=
ICAgICAgICAgICJtZDUiOiAiYzgzYzg5YTE3ZTU5NmI4MTY3OTY3ZWQxYTdjYzIxYzUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNDk0OTdjOTQ3OGM0MmEzNDc1NzgyN2UxYjY3ZTU0ZTM1NzJiMmQ5NzIwZmZiNzhhOWYwZGU1NzhlZGQwNGJiNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQzLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJjODNjODlhMTdlNTk2YjgxNjc5NjdlZDFhN2NjMjFjNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDc1NDM2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wNlQwNDozOToxMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wNlQwNDozOToxMC4zOTgzOTVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kNC81ZS8xYTFmMmJlOTQ1YmIxODJkMmRjMjJiZTE3MjY4YzE3NzQ1NTgyZGNmYzg1NzU2ZjYwMTQ3MDA0ZTE2ODQvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQzLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkMWQ2YjVhZTFkNzlkZjc1NTYwZDEzMDIxNjU2ZWEzMzE3M2RmZWUyZDBmZjRlMzJiMjU4NTZkMzQwMTdhMTY5Iiw=
ICAgICAgICAgICJtZDUiOiAiNzRmZTk2ZDI1ZDJkMmIxMWQxMjkyNzAxZGY1ZGNjNzgiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYmIyYmY3YjVlZTNiNDA3MjQ1ZjVjNGI4NDc2YTQ5NDI1ZTViODczYmEzOTk1ZmE1MWMzNDY4MzE1NGExNWFmYyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQzLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3NGZlOTZkMjVkMmQyYjExZDEyOTI3MDFkZjVkY2M3OCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDEyMDk1OSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wNlQwNDozOToxOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wNlQwNDozOToxOS4wMTQ5NDBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kMS9kNi9iNWFlMWQ3OWRmNzU1NjBkMTMwMjE2NTZlYTMzMTczZGZlZTJkMGZmNGUzMmIyNTg1NmQzNDAxN2ExNjkvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQzLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjQ0IjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjZGU0YWVjY2JkODU2NDE1NTU5ZjE0YTdiZjdlOGUyZmViYmJiMTgzNWExOWRlOWMzMGZmNGQ3ZWNjYmZkMzczIiw=
ICAgICAgICAgICJtZDUiOiAiZmJmZjFhMWI2NjI0ZTJiMmVjMTBjZTJiYWVkZjI0MzkiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjBiMTM5OGViMjk3YzE4YmIwMTc4MzViNTczYmU3ZDkzYjA3YjJhMTI3ZTFhNzFjZTViZmIzY2QwYWJhNDQyOCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQ0LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmYmZmMWExYjY2MjRlMmIyZWMxMGNlMmJhZWRmMjQzOSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDc1NDI5LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wOVQwNDoyNToxNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wOVQwNDoyNToxNC45MzQ2NDRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jZC9lNC9hZWNjYmQ4NTY0MTU1NTlmMTRhN2JmN2U4ZTJmZWJiYmIxODM1YTE5ZGU5YzMwZmY0ZDdlY2NiZmQzNzMvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQ0LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI0NTU4OWM3MmJlY2I3ZTRiODBlN2NjYzhkMTU2MDk1NTJmMmY2MjE3M2E1NGZhYmM4ZDMxZTlhN2I2NGY3MTNiIiw=
ICAgICAgICAgICJtZDUiOiAiMDg3NWM5YmI0NTkwMjgzMmFlYzhiMjA0ZDBkOTg0OTYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjZjNmZhZjgzYzNlOTA0M2UzNDgxNzQ0NGQ0MjgyNmRmYmFlNGNmNTFkNTU2ZWFkMDZkZmU3NWZkOWQ5NWM5ZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQ0LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIwODc1YzliYjQ1OTAyODMyYWVjOGIyMDRkMGQ5ODQ5NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDEyMDk1MSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wOVQwNDoyNToyNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wOVQwNDoyNToyNS4wNzE1NjBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy80NS81OC85YzcyYmVjYjdlNGI4MGU3Y2NjOGQxNTYwOTU1MmYyZjYyMTczYTU0ZmFiYzhkMzFlOWE3YjY0ZjcxM2IvYV9wYW5kYXNfZXhfcGxvZGVfdG9vbC0wLjQ0LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiY2RlNGFlY2NiZDg1NjQxNTU1OWYxNGE3YmY3ZThlMmZlYmJiYjE4MzVhMTlkZTljMzBmZjRkN2VjY2JmZDM3MyIs
ICAgICAgICAibWQ1IjogImZiZmYxYTFiNjYyNGUyYjJlYzEwY2UyYmFlZGYyNDM5Iiw=
ICAgICAgICAic2hhMjU2IjogIjIwYjEzOThlYjI5N2MxOGJiMDE3ODM1YjU3M2JlN2Q5M2IwN2IyYTEyN2UxYTcxY2U1YmZiM2NkMGFiYTQ0Mjgi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImFfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wtMC40NC1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiZmJmZjFhMWI2NjI0ZTJiMmVjMTBjZTJiYWVkZjI0MzkiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA3NTQyOSw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMTAtMDlUMDQ6MjU6MTQiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMTAtMDlUMDQ6MjU6MTQuOTM0NjQ0WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvY2QvZTQvYWVjY2JkODU2NDE1NTU5ZjE0YTdiZjdlOGUyZmViYmJiMTgzNWExOWRlOWMzMGZmNGQ3ZWNjYmZkMzczL2FfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wtMC40NC1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNDU1ODljNzJiZWNiN2U0YjgwZTdjY2M4ZDE1NjA5NTUyZjJmNjIxNzNhNTRmYWJjOGQzMWU5YTdiNjRmNzEzYiIs
ICAgICAgICAibWQ1IjogIjA4NzVjOWJiNDU5MDI4MzJhZWM4YjIwNGQwZDk4NDk2Iiw=
ICAgICAgICAic2hhMjU2IjogIjI2YzZmYWY4M2MzZTkwNDNlMzQ4MTc0NDRkNDI4MjZkZmJhZTRjZjUxZDU1NmVhZDA2ZGZlNzVmZDlkOTVjOWYi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImFfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wtMC40NC50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMDg3NWM5YmI0NTkwMjgzMmFlYzhiMjA0ZDBkOTg0OTYiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAxMjA5NTEs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMTAtMDlUMDQ6MjU6MjUiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMTAtMDlUMDQ6MjU6MjUuMDcxNTYwWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNDUvNTgvOWM3MmJlY2I3ZTRiODBlN2NjYzhkMTU2MDk1NTJmMmY2MjE3M2E1NGZhYmM4ZDMxZTlhN2I2NGY3MTNiL2FfcGFuZGFzX2V4X3Bsb2RlX3Rvb2wtMC40NC50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
