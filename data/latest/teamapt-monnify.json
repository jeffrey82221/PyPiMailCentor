ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiU2Ftc29uIElsZW1vYmF5byIs
ICAgICJhdXRob3JfZW1haWwiOiAiaWxlbW9iYXlvc2Ftc29uQGdtYWlsLmNvbSIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlIiw=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTU9OTklGWSBQWVRIT04gTElCUkFSWSBVU0VSIEdVSURFXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlcnNpb24gMS4xLjBcblxuTW9ubmlmeSBpcyBvbmUgb2YgdGhlIHByb2R1Y3RzIG9mIFRlYW1BcHQgPGh0dHBzOi8vd3d3LnRlYW1hcHQuY29tLz4gLiBNb25uaWZ5IGVtcG93ZXJzIGJ1c2luZXNzZXMgaW4gdGhlIGZvcm1hbCAmIGluZm9ybWFsIHNlY3RvcnMgd2l0aCB0aGUgcmlnaHQgdG9vbHMgJiBzb2x1dGlvbnMgdG8gbWFuYWdlIHRoZWlyIGZpbmFuY2VzIGFuZCBncm93IHRoZWlyIGJ1c2luZXNzZXMuIEJ1c2luZXNzZXMgaW4gdGhlIGZvcm1hbCBlY29ub215IGJlbmVmaXQgZnJvbSBvdXIgcGF5bWVudCBpbmZyYXN0cnVjdHVyZSB0aGF0IHNpbXBsaWZpZXMgaG93IHRoZXkgYWNjZXB0LCBtYW5hZ2UgYW5kIG1ha2UgcGF5bWVudHMuIFdoaWxlIHNtYWxsZXItc2NhbGUgYnVzaW5lc3NlcyBhbmQgZW50cmVwcmVuZXVycyBiZW5lZml0IGZyb20gb3VyIG1hcmtldC1jb21tdW5pdHkgZm9jdXNlZCBwcm9kdWN0cyB0aGF0IGdpdmUgdGhlbSBhY2Nlc3NpYmxlLCBhZmZvcmRhYmxlIGFuZCBjb252ZW5pZW50IHNob3J0IHRlcm0gd29ya2luZyBjYXBpdGFsLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTU9OTklGWSBQWVRIT04gTElCUkFSWSBVU0VSIEdVSURFXG5cbkJlZm9yZSB5b3UgY2FuIHN0YXJ0IGludGVncmF0aW5nIHRvIE1vbm5pZnksIHlvdSB3aWxsIG5lZWQgdG8gc2lnbiB1cCBvbiBNb25uaWZ5LiBDbGljayA8aHR0cHM6Ly9hcHAubW9ubmlmeS5jb20vY3JlYXRlLWFjY291bnQ+IHRvIHNpZ24gdXAuIEFmdGVyIHN1Y2Nlc3NmdWwgcmVnaXN0cmF0aW9uLCBsb2dpbiBhbmQgZm9yIHlvdXIgY3JlZGVudGlhbHMuXG5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZFUlNJT04gTk9URVxuXG5UaGUgUHJldmlvdXMgVmVyc2lvbiBvZiB0aGlzIGxpYnJhcnkgdXNlcyBXYWxsZXQgSUQuIHdoaWxlIHRoaXMgVmVyc2lvbiBtYWtlIHVzZSBvZiBXQUxMRVQgQUNDT1VOVCBOdW1iZXIuIEFsc28sIEkgaGF2ZSBhZGQgc29tZSBvdGhlciBmdW5jdGlvbmFsaXR5IHRvIGl0IHNvIHNtb290aCBpbnRlZ3JhdGlvbi5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDUkVERU5USUFMIE5FRURFRFxuXG4xLiBBUEkgS0VZXG4yLiBTRUNSRVQgS0VZXG4zLiBDT05UUkFDVFxuNC4gV0FMTEVUIElEXG5cbkFsbCB0aGlzIGNhbiBiZSBzZWVuIG9uIHRoZSBzZXR0aW5nIGFyZWEgd2hlbiB5b3UgbG9naW4gdG8geW91IGxvZ2dlZCBpbi5cblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFQSSBFTkRQT0lOVCBJTiBUSEUgTElCUkFSWVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbjEuIG1vbm5pZnlDcmVkZW50aWFsXG4yLiB2ZXJpZnlfYWNjb3VudFxuMy4gcmVzZXJ2ZV9hY2NvdW50XG40LiBhZGRfbGlua19hY2NvdW50XG41LiB1cGRhdGVfYnZuX3Jlc2VydmVcbjYuIGRlYWxsb2NhdGVfYWNjb3VudFxuNy4gcmVzZXJ2ZV9hY2NvdW50X3RyYW5zYWN0aW9uc1xuOC4gdHJhbmZlclxuOS4gYXV0aG9yaXplX3RyYW5mZXJcbjEwLiByZXNlbmRfb3RwXG4xMS4gZ2V0X3RyYW5zZmVyX2RldGFpbHNcbjEyLiBnZXRfYWxsX3NpbmdsZV90cmFuc2ZlclxuMTMuIGdldF93YWxsZXRfYmFsYW5jZVxuMTQuIGNyZWF0ZV9pbnZvaWNlXG4xNS4gaW5pdGlhdGVfcmVmdW5kXG4xNi4gZ2V0X3JlZnVuZF9zdGF0dXNcbjE3LiBjcmVhdGVfc3ViX2FjY291bnRcbjE4LiBnZXRfc3ViX2FjY291bnRcbjE5LiB1cGRhdGVfc3ViX2FjY291bnRcbjIwLiBkZWxldGVfc3ViX2FjY291bnRcbjIxLiBvbmVfdGltZV9wYXltZW50XG4yMi4gY2FsbGJhY2soRGphbmdvL0ZsYXNrL0Zhc3RBUEkpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSE9XIFRPIFVTRSBUSEUgTElCUkFSWVxuVG8gdXNlIHRoZSBsaWJyYXJ5LCB3ZSBoYXZlIHRvIHVzZSBwYWNrYWdlIGluc3RhbGxlciAocGlwKSBieSBydW5uaW5nOiBwaXAgaW5zdGFsbCB0ZWFtYXB0LW1vbm5pZnlcblxuQWZ0ZXIgc3VjY2Vzc2Z1bGwgaW5zdGFsbGF0aW9uLCB3ZSBjYW4gbm93IHVzZSB0aGUgcGFja2FnZSBpbiBvdXIgZGV2ZWxvcG1lbnQgYnkgaW1wb3J0aW5nIGl0IGluIG91ciBzY3JpcHRcblxuXG4gICAgICAgICAgICBmcm9tIG1vbm5pZnkubW9ubmlmeSBpbXBvcnQgTW9ubmlmeUNyZWRlbnRpYWwsIE1vbm5pZnlcblxuICAgICAgICAgICAgcmVzZXJ2ZSA9IE1vbm5pZnkoKVxuXG4gICAgICAgICAgICBhcGlfa2V5ID0gXCJNS19URVNUXzhVQlhHS1hYWFhYWFhYXCJcbiAgICAgICAgICAgIHNlY3JldF9rZXkgPSBcIkVOUkM0RkRZWVlFVEtBNTNZUFhCRlhYWFhYWFhYXCJcbiAgICAgICAgICAgIGNvbnRyYWN0Q29kZSA9ICcyOTE3NlhYWFgnXG4gICAgICAgICAgICBXYWxsZXRBY2NvdW50Tm8gPSAnMjI2OTI1WFhYWFgnXG5cbiAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwgPSBNb25uaWZ5Q3JlZGVudGlhbChhcGlfa2V5LCBzZWNyZXRfa2V5LCBjb250cmFjdENvZGUsIFdhbGxldEFjY291bnRObywgaXNfbGl2ZT1GYWxzZSlcblxuTk9URTogSWYgeW91IGFyZSBpbiBzYW5kYm94LCBzZXQgaXNfbGl2ZSA9IEZhbHNlIGFuZCBjYW4gb25seSBiZSBzZXQgdG8gVHJ1ZSB3aGVuIHlvdSBhcmUgaW4gcHJvZHVjdGlvbiBhbmQgbWFrZSBzdXJlIHlvdSBjaGFuZ2UgY3JlZGVudGlhbHMgdG8gbGl2ZSBjcmVkZW50aWFsc1xuXG5cblxuMS4gVkVSSUZZIEJBTksgQUNDT1VOVCAtIFRoaXMgYWxsb3dzIHlvdSBjaGVjayBpZiBhbiBhY2NvdW50IG51bWJlciBpcyBhIHZhbGlkIE5VQkFOLCBnZXQgdGhlIGFjY291bnQgbmFtZSBpZiB2YWxpZC5cblxuICAgICAgICAgICAgYmFuayA9IG1vbm5pZnkudmVyaWZ5X2FjY291bnQoXG4gICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICBhY2NvdW50TnVtYmVyPScyMjEzMzI0MDg3JywgXG4gICAgICAgICAgICAgIGJhbmtDb2RlPScwNTcnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KGJhbmspXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ3JlcXVlc3RTdWNjZXNzZnVsJzogVHJ1ZSwgXG4gICAgICAgICAgICAgICdyZXNwb25zZU1lc3NhZ2UnOiAnc3VjY2VzcycsIFxuICAgICAgICAgICAgICAncmVzcG9uc2VDb2RlJzogJzAnLCBcbiAgICAgICAgICAgICAgJ3Jlc3BvbnNlQm9keSc6IHtcbiAgICAgICAgICAgICAgICAnYWNjb3VudE51bWJlcic6ICcyMjEzMzI0MDg3JywgXG4gICAgICAgICAgICAgICAgJ2FjY291bnROYW1lJzogJ1NBTVNPTiAgIElMRU1PQkFZTycsIFxuICAgICAgICAgICAgICAgICdiYW5rQ29kZSc6ICcwNTcnXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBcbjIuIElOVk9JQ0UgLSBNb25uaWZ5IGludm9pY2luZyBhbGxvd3MgeW91IGdlbmVyYXRlIGludm9pY2VzIHZpYSBBUElzLiBGb3IgZWFjaCBpbnZvaWNlLCBhIHZpcnR1YWwgYWNjb3VudCBudW1iZXIgd2lsbCBiZSBnZW5lcmF0ZWQgYW5kIHRpZWQgdG8gdGhhdCBpbnZvaWNlIHNvIHlvdXIgY3VzdG9tZXJzIGNhbiBzaW1wbHkgdHJhbnNmZXIgdG8gdGhhdCBhY2NvdW50IG51bWJlciB0byBwYXlcblxuICAgICAgICAgICAgY3JlYXRlX2ludm9pY2UgPSBtb25uaWZ5LmNyZWF0ZV9pbnZvaWNlKFxuICAgICAgICAgICAgICBtZXJjaGFudF9jcmVkZW50aWFsLCBcbiAgICAgICAgICAgICAgYW1vdW50PScxMDAwJywgXG4gICAgICAgICAgICAgIGludm9pY2VSZWZlcmVuY2U9J3V1ZXl5d3MnLCBcbiAgICAgICAgICAgICAgZGVzY3JpcHRpb249J3Rlc3QgaW52b2ljZScsIFxuICAgICAgICAgICAgICBjdXN0b21lckVtYWlsPSd0ZXN0QGdtYWlsLmNvbScsIFxuICAgICAgICAgICAgICBjdXN0b21lck5hbWU9J1NhbXNvbicsIFxuICAgICAgICAgICAgICBleHBpcnlEYXRlPScyMDIxLTA0LTMwIDEyOjAwOjAwJywgXG4gICAgICAgICAgICAgIHBheW1lbnRNZXRob2RzPVsnQ0FSRCcsICdBQ0NPVU5UX1RSQU5TRkVSJ10sIFxuICAgICAgICAgICAgICByZWRpcmVjdFVybD0naHR0cDovL2FiYy5jb20nXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KGNyZWF0ZV9pbnZvaWNlKVxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdyZXF1ZXN0U3VjY2Vzc2Z1bCc6IFRydWUsIFxuICAgICAgICAgICAgICAncmVzcG9uc2VNZXNzYWdlJzogJ3N1Y2Nlc3MnLCBcbiAgICAgICAgICAgICAgJ3Jlc3BvbnNlQ29kZSc6ICcwJywgXG4gICAgICAgICAgICAgICdyZXNwb25zZUJvZHknOiB7XG4gICAgICAgICAgICAgICAgJ2Ftb3VudCc6IDEwMDAsIFxuICAgICAgICAgICAgICAgICdpbnZvaWNlUmVmZXJlbmNlJzogJ3V1ZXl5d3MnLCBcbiAgICAgICAgICAgICAgICAnaW52b2ljZVN0YXR1cyc6ICdQRU5ESU5HJywgXG4gICAgICAgICAgICAgICAgJ2Rlc2NyaXB0aW9uJzogJ3Rlc3QgaW52b2ljZScsIFxuICAgICAgICAgICAgICAgICdjb250cmFjdENvZGUnOiAnMjkxNzYzNDg4MycsIFxuICAgICAgICAgICAgICAgICdjdXN0b21lckVtYWlsJzogJ3Rlc3RAZ21haWwuY29tJywgXG4gICAgICAgICAgICAgICAgJ2N1c3RvbWVyTmFtZSc6ICdTYW1zb24nLCBcbiAgICAgICAgICAgICAgICAnZXhwaXJ5RGF0ZSc6ICcyMDIxLTA0LTMwIDEyOjAwOjAwJywgXG4gICAgICAgICAgICAgICAgJ2NyZWF0ZWRCeSc6ICdNS19URVNUXzhVQlhHS1RGU0InLCBcbiAgICAgICAgICAgICAgICAnY3JlYXRlZE9uJzogJzIwMjEtMDQtMTQgMTU6MTg6MzEnLCBcbiAgICAgICAgICAgICAgICAnY2hlY2tvdXRVcmwnOiAnaHR0cHM6Ly9zYW5kYm94LnNkay5tb25uaWZ5LmNvbS9jaGVja291dC9NTkZZfDYzfDIwMjEwNDE0MTUxODEzfDAwMDE5NycsIFxuICAgICAgICAgICAgICAgICdhY2NvdW50TnVtYmVyJzogJzMwMDAwNDE3ODgnLCBcbiAgICAgICAgICAgICAgICAnYWNjb3VudE5hbWUnOiAndGVzJywgXG4gICAgICAgICAgICAgICAgJ2JhbmtOYW1lJzogJ1dlbWEgYmFuaycsIFxuICAgICAgICAgICAgICAgICdiYW5rQ29kZSc6ICcwMzUnLCBcbiAgICAgICAgICAgICAgICAncmVkaXJlY3RVcmwnOiAnaHR0cDovL2FiYy5jb20nXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuMy4gUkVTRVJWRSBBQ0NPVU5UIC0gUmVzZXJ2ZWQgYWNjb3VudCBBUElzIGVuYWJsZSBtZXJjaGFudHMgY3JlYXRlIGFjY291bnRzIHRoYXQgY2FuIGJlIGRlZGljYXRlZCB0byBlYWNoIG9mIHRoZWlyIGN1c3RvbWVycy4gT25jZSBhbnkgcGF5bWVudCBpcyBkb25lIHRvIHRoYXQgYWNjb3VudCwgd2Ugbm90aWZ5IHlvdXIgd2ViaG9vayB3aXRoIHRoZSBwYXltZW50IGluZm9ybWF0aW9uXG5cblxuICAgICAgICAgICAgcmVzZXJ2ZV9hY2NvdW50ID0gbW9ubmlmeS5yZXNlcnZlX2FjY291bnQoXG4gICAgICAgICAgICAgIHRva2VuLCBcbiAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgIGFjY291bnRSZWZlcmVuY2U9J3R3NjYzNTUycHB3JywgXG4gICAgICAgICAgICAgIGFjY291bnROYW1lPSdUZXN0IEFjY291bnQnLCBcbiAgICAgICAgICAgICAgY3VzdG9tZXJFbWFpbD0ndGVzdDJAZ21haWwuY29tJywgXG4gICAgICAgICAgICAgIGN1c3RvbWVyTmFtZT1cIlRlc3QgQWNjb3VudFwiLCBcbiAgICAgICAgICAgICAgY3VzdG9tZXJCdm49JzY2Mzc3MjczMjMzJywgXG4gICAgICAgICAgICAgIGF2YWlsYWJsZUJhbms9VHJ1ZVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBwcmludChyZXNlcnZlX2FjY291bnQpXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgJ3JlcXVlc3RTdWNjZXNzZnVsJzogVHJ1ZSwgXG4gICAgICAgICAgICAgICdyZXNwb25zZU1lc3NhZ2UnOiAnc3VjY2VzcycsIFxuICAgICAgICAgICAgICAncmVzcG9uc2VDb2RlJzogJzAnLCBcbiAgICAgICAgICAgICAgJ3Jlc3BvbnNlQm9keSc6IHtcbiAgICAgICAgICAgICAgICAnY29udHJhY3RDb2RlJzogJzI5MTc2MzQ4ODMnLCBcbiAgICAgICAgICAgICAgICAnYWNjb3VudFJlZmVyZW5jZSc6ICd0dzY2MzU1MnBwdycsIFxuICAgICAgICAgICAgICAgICdhY2NvdW50TmFtZSc6ICdUZXMnLCBcbiAgICAgICAgICAgICAgICAnY3VycmVuY3lDb2RlJzogJ05HTicsIFxuICAgICAgICAgICAgICAgICdjdXN0b21lckVtYWlsJzogXG4gICAgICAgICAgICAgICAgJ3Rlc3QyQGdtYWlsLmNvbScsIFxuICAgICAgICAgICAgICAgICdjdXN0b21lck5hbWUnOiAnVGVzdCBBY2NvdW50JywgXG4gICAgICAgICAgICAgICAgJ2FjY291bnROdW1iZXInOiAnMzAwMDA0MTc5OScsIFxuICAgICAgICAgICAgICAgICdiYW5rTmFtZSc6ICdXZW1hIGJhbmsnLCBcbiAgICAgICAgICAgICAgICAnYmFua0NvZGUnOiAnMDM1JywgXG4gICAgICAgICAgICAgICAgJ2NvbGxlY3Rpb25DaGFubmVsJzogJ1JFU0VSVkVEX0FDQ09VTlQnLCBcbiAgICAgICAgICAgICAgICAncmVzZXJ2YXRpb25SZWZlcmVuY2UnOiAnQ0hWUUJOUDNEUlRHVTZDWkZYUVcnLCBcbiAgICAgICAgICAgICAgICAncmVzZXJ2ZWRBY2NvdW50VHlwZSc6ICdHRU5FUkFMJywgXG4gICAgICAgICAgICAgICAgJ3N0YXR1cyc6ICdBQ1RJVkUnLCBcbiAgICAgICAgICAgICAgICAnY3JlYXRlZE9uJzogJzIwMjEtMDQtMTQgMTU6Mjk6NTEuOTc2JywgXG4gICAgICAgICAgICAgICAgJ2luY29tZVNwbGl0Q29uZmlnJzogW10sIFxuICAgICAgICAgICAgICAgICdidm4nOiAnNjYzNzcyNzMyMzMnLCBcbiAgICAgICAgICAgICAgICAncmVzdHJpY3RQYXltZW50U291cmNlJzogRmFsc2VcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG5OT1RFOiBXaGVuIHRoZSBhdmFpbGFibGVCYW5rIGlzIHNldCB0byBUcnVlLHJhbmRvbSBhY2NvdW50IG51bWJlciBiZXR3ZWVuIHRoZWlyIHBhcnRuZXIgYmFua3Mgd2lsbCBiZSByZXNlcnZlZCBhbmQgYXNzaWduZWQgdG8geW91ciBjdXN0b21lci4gaWYgeW91IHdhbnQgdG8gcmVzZXJ2ZSB5b3VyIGNob2ljZSBvZiBiYW5rIGUuZyBXRU1BLCB5b3UgaGF2ZSB0byBzZXQgdGhlIGF2YWlsYWJsZUJhbmsgdG8gdGhlIGNvZGUgb2YgdGhlIGJhbmsgeW91IHdpc2ggdG8gcmVzZXJ2ZSBpLmUgYXZhaWxhYmxlQmFuaz0nMDM1Jy4gYXZhaWxhYmxlIHBhcnRuZXIgYmFuayBjb2RlcyBhcmUgKFJvbGV6IE1GQiA9IDUwNTE1LCBXZW1hIEJhbmsgPSAwMzUsIFN0ZXJsaW5nIEJhbmsgPSAyMzIpXG5cbiAgICAgICAgICBcbjQuIEFERCBMSU5LIEFDQ09VTlQgLSBUaGlzIEFQSSBhbGxvd3MgeW91IHRvIGFkZCBhY2NvdW50cyB3aXRoIGFub3RoZXIgcGFydG5lciBiYW5rIGFuZCBsaW5rIHRvIGFuIGV4aXN0aW5nIGN1c3RvbWVyIHdpdGggdGhlIGN1c3RvbWVyJ3MgYWNjb3VudCByZWZlcmVuY2UuXG5cblxuICAgICAgICAgICAgbGlua19hY2NvdW50ID0gbW9ubmlmeS5hZGRfbGlua19hY2NvdW50KCBcbiAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgIGFjY291bnRSZWZlcmVuY2U9J3R3NjYzNTUyJywgXG4gICAgICAgICAgICAgIGdldEFsbEF2YWlsYWJsZUJhbmtzPVRydWUsIFxuICAgICAgICAgICAgICBwcmVmZXJyZWRCYW5rcz1bJzAzNSddXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KGxpbmtfYWNjb3VudClcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInJlcXVlc3RTdWNjZXNzZnVsXCI6IHRydWUsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlQ29kZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJyZXNwb25zZUJvZHlcIjoge1xuICAgICAgICAgICAgICAgICAgXCJjb250cmFjdENvZGVcIjogXCI5MTU0ODM3Mjc1MTFcIixcbiAgICAgICAgICAgICAgICAgIFwiYWNjb3VudFJlZmVyZW5jZVwiOiBcIjEyMTYxNTM4NjAwNTg2MlwiLFxuICAgICAgICAgICAgICAgICAgXCJhY2NvdW50TmFtZVwiOiBcInJlc2VydmVkQWNjb3VudE5hbWVcIixcbiAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICBcImN1c3RvbWVyRW1haWxcIjogXCJubmFlbWVrYXBhc2NoYWxAZ21haWwuY29tXCIsXG4gICAgICAgICAgICAgICAgICBcImN1c3RvbWVyTmFtZVwiOiBcIlBhc2Nvb2xcIixcbiAgICAgICAgICAgICAgICAgIFwiYWNjb3VudHNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwMzVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJXRU1BIEJhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWNjb3VudE51bWJlclwiOiBcIlhYWFgxMjM0NTZcIlxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJiYW5rQ29kZVwiOiBcIjUwNTE1XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJhbmtOYW1lXCI6IFwiUk9MRVogTUZCXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROdW1iZXJcIjogXCJYWFhYMTIzNDU2XCJcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIxMjNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJCYW5rIDNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWNjb3VudE51bWJlclwiOiBcIlhYWFgxMjM0NTZcIlxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICBcImNvbGxlY3Rpb25DaGFubmVsXCI6IFwiUkVTRVJWRURfQUNDT1VOVFwiLFxuICAgICAgICAgICAgICAgICAgXCJyZXNlcnZhdGlvblJlZmVyZW5jZVwiOiBcIjhNSEtYWlM4R0NFUFZYQjU5TUw2XCIsXG4gICAgICAgICAgICAgICAgICBcInJlc2VydmVkQWNjb3VudFR5cGVcIjogXCJHRU5FUkFMXCIsXG4gICAgICAgICAgICAgICAgICBcInN0YXR1c1wiOiBcIkFDVElWRVwiLFxuICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkT25cIjogXCIyMDIxLTAzLTEwIDE1OjIwOjA3LjBcIixcbiAgICAgICAgICAgICAgICAgIFwicmVzdHJpY3RQYXltZW50U291cmNlXCI6IGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuTk9URTogSWYgZ2V0QWxsQXZhaWxhYmxlQmFua3MgaXMgc2V0IHRvIHRydWUsIHRoZW4gYW4gYWNjb3VudCB3aXRoIGFsbCBhdmFpbGFibGUgYmFua3Mgbm90IHlldCBsaW5rZWQgd2lsbCBiZSBhZGRlZC4gU2V0IGdldEFsbEF2YWlsYWJsZUJhbmtzIHRvIGZhbHNlIGlmIHlvdSB3YW50IHRvIHNwZWNpZnkgcHJlZmVycmVkIGJhbmtzIHRvIHJlc2VydmUgYWNjb3VudHMgd2l0aC4gc2V0IHRvIHRydWUgaWYgeW91IHdhbnQgdG8gYWRkIGFsbCBvdGhlciBhdmFpbGFibGUgcGFydG5lciBiYW5rIGFjY291bnRzIHRvIHlvdXIgcmVzZXJ2ZWQgYWNjb3VudC5cblxuNS4gVVBEQVRFIEJWTiBGT1IgUkVTRVJWRSBBQ0NPVU5UIC0gVGhpcyBGdW5jdGlvbiBpcyB1c2VkIHRvIHVwZGF0ZSBhIGN1c3RvbWVyJ3MgQlZOIG1hcHBlZCB0byBhIFJlc2VydmVkIEFjY291bnQuXG5cbiAgICAgICAgICAgIHVwZGF0ZV9idm4gPSBtb25uaWZ5LnVwZGF0ZV9idm5fcmVzZXJ2ZSggXG4gICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICBidm49JzY2Mzc3MjgzODg0JywgXG4gICAgICAgICAgICAgIGFjY291bnRSZWZlcmVuY2U9JzYzNTUyNTY2MzYyMydcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgcHJpbnQodXBkYXRlX2J2bilcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInJlcXVlc3RTdWNjZXNzZnVsXCI6IHRydWUsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlQ29kZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJyZXNwb25zZUJvZHlcIjoge1xuICAgICAgICAgICAgICAgIFwiY29udHJhY3RDb2RlXCI6IFwiMjkxNzYzNDg4M1wiLFxuICAgICAgICAgICAgICAgIFwiYWNjb3VudFJlZmVyZW5jZVwiOiBcIjYzNTUyNTY2MzYyM1wiLFxuICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgXCJjdXN0b21lckVtYWlsXCI6IFwidGVzdHVzZXJAdGVzdC5jb21cIixcbiAgICAgICAgICAgICAgICBcImN1c3RvbWVyTmFtZVwiOiBcIlRlc3QgT2pcIixcbiAgICAgICAgICAgICAgICBcImFjY291bnROdW1iZXJcIjogXCI0MjkwNzMzNTcyXCIsXG4gICAgICAgICAgICAgICAgXCJiYW5rTmFtZVwiOiBcIldlbWEgQmFua1wiLFxuICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwMzVcIixcbiAgICAgICAgICAgICAgICBcImNvbGxlY3Rpb25DaGFubmVsXCI6IFwiUkVTRVJWRURfQUNDT1VOVFwiLFxuICAgICAgICAgICAgICAgIFwicmVzZXJ2YXRpb25SZWZlcmVuY2VcIjogXCJSOEo0TENXM1A4MldONFg2TFFDV1wiLFxuICAgICAgICAgICAgICAgIFwicmVzZXJ2ZWRBY2NvdW50VHlwZVwiOiBcIkdFTkVSQUxcIixcbiAgICAgICAgICAgICAgICBcInN0YXR1c1wiOiBcIkFDVElWRVwiLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlZE9uXCI6IFwiMjAyMS0wMi0wMSAyMTo0MDo1NS4wXCIsXG4gICAgICAgICAgICAgICAgXCJidm5cIjogXCI2NjM3NzI4Mzg4NFwiLFxuICAgICAgICAgICAgICAgIFwicmVzdHJpY3RQYXltZW50U291cmNlXCI6IGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgfVxuICAgICAgICAgIFxuNi4gREVBTExPQ0FURSBSRVNFUlZFIEFDQ09VTlQ6IFRoaXMgRW5kcG9pbnQgaXMgdXNlZCB0byBkZWFsbG9jYXRlL2RlbGV0ZSByZXNlcnZlZCBhY2NvdW50LlxuXG4gICAgICAgICAgICBkZWxldGVfYWNjb3VudCA9IG1vbm5pZnkuZGVhbGxvY2F0ZV9hY2NvdW50KCBcbiAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgIGFjY291bnROdW1iZXI9JzMwMDAwNFhYWFgnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KGRlbGV0ZV9hY2NvdW50KVxuXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlTWVzc2FnZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgXCJyZXNwb25zZUNvZGVcIjogXCIwXCIsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VCb2R5XCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiY29udHJhY3RDb2RlXCI6IFwiNzk3ODU0NTI5NDM0XCIsXG4gICAgICAgICAgICAgICAgICBcImFjY291bnRSZWZlcmVuY2VcIjogXCJyZWZlcmVuY2UxMjM0NSNcIixcbiAgICAgICAgICAgICAgICAgIFwiYWNjb3VudE5hbWVcIjogXCJUZXN0IFJlc2VydmVkIEFjY291bnRcIixcbiAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICBcImN1c3RvbWVyRW1haWxcIjogXCJ0ZXN0QHRlc3Rlci5jb21cIixcbiAgICAgICAgICAgICAgICAgIFwiYWNjb3VudE51bWJlclwiOiBcIjMwMDAwNDE3OTlcIixcbiAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJXZW1hIGJhbmtcIixcbiAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwMzVcIixcbiAgICAgICAgICAgICAgICAgIFwicmVzZXJ2YXRpb25SZWZlcmVuY2VcIjogXCJOUkY3MkVNRUJDR05ONldVS0QzNVwiLFxuICAgICAgICAgICAgICAgICAgXCJzdGF0dXNcIjogXCJBQ1RJVkVcIixcbiAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZE9uXCI6IFwiMjAyMS0wNC0xNCAxNzowNTo1MC4wXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbk5PVEU6IEtpbmRseSBub3RlIHRoYXQgYW55IEFjY291bnQgZGVhbGxvY2F0ZWQvZGVsZXRlIGNhbiBub3QgYmUgcmV2ZXJzZWQuXG4gICAgICAgICAgXG43LiBUUkFOU0ZFUjogVGhpcyBpcyB1c2UgdG8gaW5pdGlhdGUgdHJhbnNmZXIgdG8gYmFuay5cblxuICAgICAgICAgICAgdHJhbnNmZXIgPSBtb25uaWZ5LnRyYW5mZXIoXG4gICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICBhbW91bnQ9JzEwMDAnLCBcbiAgICAgICAgICAgICAgcmVmZXJlbmNlPSc2NjYzNTUyNScsIFxuICAgICAgICAgICAgICBuYXJyYXRpb249J1Rlc3QgVHJhbnNmZXInLCBcbiAgICAgICAgICAgICAgYmFua0NvZGU9JzA0NCcsIFxuICAgICAgICAgICAgICBhY2NvdW50TnVtYmVyPScwMDIwNjU3NjU5J1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBwcmludCh0cmFuc2ZlcilcblxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwiYW1vdW50XCI6IDEwMDAsXG4gICAgICAgICAgICAgIFwicmVmZXJlbmNlXCI6XCI2NjYzNTUyNVwiLFxuICAgICAgICAgICAgICBcIm5hcnJhdGlvblwiOlwiVGVzdCBUcmFuc2ZlclwiLFxuICAgICAgICAgICAgICBcImRlc3RpbmF0aW9uQmFua0NvZGVcIjogXCIwNDRcIixcbiAgICAgICAgICAgICAgXCJkZXN0aW5hdGlvbkFjY291bnROdW1iZXJcIjogXCIwMDIwNjU3NjU5XCIsXG4gICAgICAgICAgICAgIFwiY3VycmVuY3lcIjogXCJOR05cIixcbiAgICAgICAgICAgICAgXCJzb3VyY2VBY2NvdW50TnVtYmVyXCI6IFwiOTYyNDkzNzM3MlwiXG4gICAgICAgICAgICB9XG5OT1RFOiBJZiB5b3UgaGF2ZSAyRkEgYWN0aXZhdGVkIG9uIHlvdXIgQWNjb3VudCwgeW91IHdpbGwgbmVlZCB0byBjYWxsIGF1dGhvcml6ZSB0cmFuc2ZlciBlbmRwb2ludCB0byBhdXRob3JpemUgdGhlIHRyYW5zYWN0aW9uIGJlZm9yZSBpdCBjYW4gYmUgc3VjY2Vzc2Z1bGwuXG5cblxuOC4gQVVUSE9SSVpFIFRSQU5TRkVSOiBUbyBhdXRob3JpemUgYSB0cmFuc2ZlciwgeW91IHdpbGwgbmVlZCB0byBjYWxsIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24uIG9uY2UgdGhlIHRyYW5zYWN0aW9uIGlzIGluaXRpYXRlZCwgYSBtYWlsIHdpbGwgYmUgc2VudCB0byB0aGUgbWVyY2hhbnRlIHJlZ2lzdGVyZWQgZW1haWwgY29udGFpbmluZyB0aGUgT1RQIHdoaWNoIHRoZSBtZXJjaGFudCBjYW4gbm93IHVzZSB0byBhdXRob3JpemUgdGhlIHRyYW5zYWN0aW9uIGJ5IGNhbGxpbmcgdGhpcyBlbmRwb2ludCBhbmQgcGFzcyBpbiB0aGUgT1RQIGFuZCB0cmFuc2FjdGlvbiByZWYgTm8uICBJZiB0aGUgbWVyY2hhbnQgZGlkIG5vdCBoYXZlIFR3byBGYWN0b3IgQXV0aGVudGljYXRpb24gKDJGQSkgZW5hYmxlZCwgdGhlcmUgaXMgbm8gbmVlZCB0byB1c2UgdGhpcyBlbmRwb2ludC4gXG5cbiAgICAgICAgICAgIGF1dGhvcml6ZSA9IG1vbm5pZnkuYXV0aG9yaXplX3RyYW5mZXIoXG4gICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICByZWZlcmVuY2U9JzY2NjM1NTI1JywgXG4gICAgICAgICAgICAgIGF1dGhvcml6YXRpb25Db2RlPSc3MjUwMDYnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KGF1dGhvcml6ZSlcblxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwicmVxdWVzdFN1Y2Nlc3NmdWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJyZXNwb25zZU1lc3NhZ2VcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VDb2RlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlQm9keVwiOiB7XG4gICAgICAgICAgICAgICAgICBcImFtb3VudFwiOiAxMCxcbiAgICAgICAgICAgICAgICAgIFwicmVmZXJlbmNlXCI6IFwiNjY2MzU1MjVcIixcbiAgICAgICAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiU1VDQ0VTU1wiLFxuICAgICAgICAgICAgICAgICAgXCJkYXRlQ3JlYXRlZFwiOiBcIjE1LzA0LzIwMjEgMDk6MzQ6MzIgUE1cIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuOS4gUkVTRU5EIE9UUDogVGhpcyBmdW5jdGlvbiBjYW4gYmUgdXNlZCB0byByZXNlbmQgT1RQIGlmIDJGQSBpcyBlbmFibGUgZm9yIHRyYW5zZmVyXG5cbiAgICAgICAgICAgIHJlc2VuZE90cCA9IG1vbm5pZnkucmVzZW5kX290cChcbiAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgIHJlZmVyZW5jZT0nNjY2MzU1MjUnXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIHByaW50KHJlc2VuZE90cClcblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBcInJlcXVlc3RTdWNjZXNzZnVsXCI6IHRydWUsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlQ29kZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgXCJyZXNwb25zZUJvZHlcIjoge1xuICAgICAgICAgICAgICAgIFwibWVzc2FnZVwiOiBcIkF1dGhvcml6YXRpb24gY29kZSB3aWxsIGJlIHByb2Nlc3NlZCBhbmQgc2VudCB0byBwcmVkZWZpbmVkIGVtYWlsIGFkZHJlc3NlcyhzKVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuMTAuIEdFVCBUUkFOU0ZFUiBERVRBSUxTOiBJdCdzIGFkdmlzYWJsZSB0byB2ZXJpZnkgdGhlIHN0YXR1cyBvZiB5b3VyIHRyYW5zYWN0aW9uIGJlZm9yZSBhd2FyZGluZyB2YWx1ZS4gdGhpcyB3aWxsIGFsbG93IHlvdSB0byBiZSBzdXJlIHRoYXQgdHJhbnNhY3Rpb24gaXMgc3VjY2Vzc2Z1bCBvciBub3QuICBUbyBnZXQgdGhlIGRldGFpbHMgb2YgYSBzaW5nbGUgdHJhbnNmZXIsICB5b3Ugd2lsbCBuZWVkIHRvIGNhbGwgdGhlIGVuZHBvaW50IGJlbG93OlxuXG4gICAgICAgICAgICBnZXRfdHJhbnNmZXIgPSBtb25uaWZ5LmdldF90cmFuc2Zlcl9kZXRhaWxzKFxuICAgICAgICAgICAgICBtZXJjaGFudF9jcmVkZW50aWFsLCBcbiAgICAgICAgICAgICAgcmVmZXJlbmNlPSc2NjYzNTUyNSdcbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgcHJpbnQoZ2V0X3RyYW5zZmVyKVxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIFwicmVxdWVzdFN1Y2Nlc3NmdWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgXCJyZXNwb25zZU1lc3NhZ2VcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgIFwicmVzcG9uc2VDb2RlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlQm9keVwiOiB7XG4gICAgICAgICAgICAgICAgXCJhbW91bnRcIjogMTAwMC4wMCxcbiAgICAgICAgICAgICAgICBcInJlZmVyZW5jZVwiOiBcIjY2NjM1NTI1XCIsXG4gICAgICAgICAgICAgICAgXCJuYXJyYXRpb25cIjogXCJUZXN0IFBheW1lbnRcIixcbiAgICAgICAgICAgICAgICBcImN1cnJlbmN5XCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgXCJmZWVcIjogMjAuMDAsXG4gICAgICAgICAgICAgICAgXCJ0d29GYUVuYWJsZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgXCJzdGF0dXNcIjogXCJTVUNDRVNTXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvbkRlc2NyaXB0aW9uXCI6IFwiQXBwcm92ZWQgb3IgY29tcGxldGVkIHN1Y2Nlc3NmdWxseVwiLFxuICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25SZWZlcmVuY2VcIjogXCJNRkRTMjAyMDA4MDUyM1wiXG4gICAgICAgICAgICAgICAgXCJkZXN0aW5hdGlvbkJhbmtDb2RlXCI6IFwiMDU4XCIsXG4gICAgICAgICAgICAgICAgXCJkZXN0aW5hdGlvbkFjY291bnROdW1iZXJcIjogXCIwMTExOTQ2NzY4XCIsXG4gICAgICAgICAgICAgICAgXCJkZXN0aW5hdGlvbkFjY291bnROYW1lXCI6IFwiTUVLSUxJVVdBLCBTTUFSVCBDSElOT05TT1wiLFxuICAgICAgICAgICAgICAgIFwiZGVzdGluYXRpb25CYW5rTmFtZVwiOiBcIkdUQmFua1wiLFxuICAgICAgICAgICAgICAgIFwiY3JlYXRlZE9uXCI6IFwiMTUvMDQvMjAyMSAwOTozNDozMiBQTVwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuMTEuIEdFVCBBTEwgU0lOR0xFIFRSQU5TRkVSXG5cbiAgICAgICAgICAgIGdldF9hbGxfc2luZ2xlID0gbW9ubmlmeS5nZXRfYWxsX3NpbmdsZV90cmFuc2ZlcihcbiAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgIHBhZ2VTaXplPTUsIFxuICAgICAgICAgICAgICBwYWdlTm89MVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBwcmludChnZXRfYWxsX3NpbmdsZSlcblxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICdyZXF1ZXN0U3VjY2Vzc2Z1bCc6IFRydWUsIFxuICAgICAgICAgICAgICAncmVzcG9uc2VNZXNzYWdlJzogJ3N1Y2Nlc3MnLCBcbiAgICAgICAgICAgICAgJ3Jlc3BvbnNlQ29kZSc6ICcwJywgXG4gICAgICAgICAgICAgICdyZXNwb25zZUJvZHknOiB7XG4gICAgICAgICAgICAgICAgJ2NvbnRlbnQnOiBbXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdhbW91bnQnOiA0MC4wLCBcbiAgICAgICAgICAgICAgICAgICAgJ3JlZmVyZW5jZSc6ICdUWDYzNDYzNicsIFxuICAgICAgICAgICAgICAgICAgICAnbmFycmF0aW9uJzogJ1VTU0QnLCBcbiAgICAgICAgICAgICAgICAgICAgJ2JhbmtDb2RlJzogJzA0NCcsIFxuICAgICAgICAgICAgICAgICAgICAnYWNjb3VudE51bWJlcic6ICcwMDIwOTAzODc5JywgXG4gICAgICAgICAgICAgICAgICAgICdjdXJyZW5jeSc6ICdOR04nLCBcbiAgICAgICAgICAgICAgICAgICAgJ2FjY291bnROYW1lJzogJ1RFU1QgQUNDT1VOVCcsIFxuICAgICAgICAgICAgICAgICAgICAnYmFua05hbWUnOiAnQWNjZXNzIGJhbmsnLCBcbiAgICAgICAgICAgICAgICAgICAgJ2ZlZSc6IDM1LjAsIFxuICAgICAgICAgICAgICAgICAgICAndHdvRmFFbmFibGVkJzogRmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICAnc3RhdHVzJzogJ1NVQ0NFU1MnLCBcbiAgICAgICAgICAgICAgICAgICAgJ3dhbGxldElkJzogJzY1NENBQjI2NjI1NTM0NDc2MEE2NTlDNzg3QjJBQTM4RTgnLCBcbiAgICAgICAgICAgICAgICAgICAgJ3RyYW5zYWN0aW9uRGVzY3JpcHRpb24nOiAnU3VjY2VzcycsIFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25SZWZlcmVuY2UnOiAnTUZEU3wyMDIxMDMxMDE1MDExMHwwMDAwMzcnLCBcbiAgICAgICAgICAgICAgICAgICAgJ2NyZWF0ZWRPbic6ICcyMDIxLTAzLTEwVDE0OjAxOjEwLjAwMCswMDAwJ1xuICAgICAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICdhbW91bnQnOiAxMDAwLjAsIFxuICAgICAgICAgICAgICAgICAgICAncmVmZXJlbmNlJzogJ1RYNjczMTM3JywgXG4gICAgICAgICAgICAgICAgICAgICduYXJyYXRpb24nOiAnVVNTRCcsIFxuICAgICAgICAgICAgICAgICAgICAnYmFua0NvZGUnOiAnMDQ0JywgXG4gICAgICAgICAgICAgICAgICAgICdhY2NvdW50TnVtYmVyJzogJzAwMjA5MDM4NzknLCBcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnJlbmN5JzogJ05HTicsIFxuICAgICAgICAgICAgICAgICAgICAnYWNjb3VudE5hbWUnOiAnVEVTVCBBQ0NPVU5UJywgXG4gICAgICAgICAgICAgICAgICAgICdiYW5rTmFtZSc6ICdBY2Nlc3MgYmFuaycsIFxuICAgICAgICAgICAgICAgICAgICAnZmVlJzogMzUuMCwgXG4gICAgICAgICAgICAgICAgICAgICd0d29GYUVuYWJsZWQnOiBGYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICdzdGF0dXMnOiAnU1VDQ0VTUycsIFxuICAgICAgICAgICAgICAgICAgICAnd2FsbGV0SWQnOiAnNjU0Q0FCMjY2MjU1MzQ0NzYwQTY1OUM3ODdCMkFBMzhFOCcsIFxuICAgICAgICAgICAgICAgICAgICAndHJhbnNhY3Rpb25EZXNjcmlwdGlvbic6ICdTdWNjZXNzJywgXG4gICAgICAgICAgICAgICAgICAgICd0cmFuc2FjdGlvblJlZmVyZW5jZSc6ICdNRkRTfDIwMjEwMjI1MDQzNTQ0fDAwMDA2OScsIFxuICAgICAgICAgICAgICAgICAgICAnY3JlYXRlZE9uJzogJzIwMjEtMDItMjVUMDM6MzU6NDUuMDAwKzAwMDAnXG4gICAgICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBdLCBcbiAgICAgICAgICAgICAgICAncGFnZWFibGUnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICdzb3J0Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzb3J0ZWQnOiBUcnVlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndW5zb3J0ZWQnOiBGYWxzZSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2VtcHR5JzogRmFsc2V9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFnZVNpemUnOiA1LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFnZU51bWJlcic6IDEsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdvZmZzZXQnOiA1LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAncGFnZWQnOiBUcnVlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAndW5wYWdlZCc6IEZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAndG90YWxFbGVtZW50cyc6IDExMywgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICd0b3RhbFBhZ2VzJzogMjMsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnbGFzdCc6IEZhbHNlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcnQnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NvcnRlZCc6IFRydWUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICd1bnNvcnRlZCc6IEZhbHNlLCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZW1wdHknOiBGYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ2ZpcnN0JzogRmFsc2UsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtYmVyT2ZFbGVtZW50cyc6IDUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZSc6IDUsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnbnVtYmVyJzogMSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdlbXB0eSc6IEZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4xMi4gR0VUIFdBTExFVCBCQUxBTkNFOiBUaGlzIGFsbG93cyB5b3UgdG8gZ2V0IHRoZSBhdmFpbGFibGUgYmFsYW5jZSBpbiB5b3VyIG1vbm5pZnkgd2FsbGV0LlxuXG4gICAgICAgICAgICAgIHdhbGxldEJhbCA9IG1vbm5pZnkuZ2V0X3dhbGxldF9iYWxhbmNlKG1lcmNoYW50X2NyZWRlbnRpYWwpXG4gICAgICAgICAgICAgIHByaW50KHdhbGxldEJhbClcblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VDb2RlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VCb2R5XCI6IHtcbiAgICAgICAgICAgICAgICAgIFwiYXZhaWxhYmxlQmFsYW5jZVwiOiAzNzguOTMsXG4gICAgICAgICAgICAgICAgICBcImxlZGdlckJhbGFuY2VcIjogMzc4LjkzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbjEzLiBJTklUSUFURSBSRUZVTkQ6IFRoaXMgZnVuY3Rpb24gZW5hYmxlcyB5b3UgcHJvY2VzcyByZWZ1bmQgdG8gYSBjdXN0b21lciBmb3IgYSB0cmFuc2FjdGlvbi5cblxuICAgICAgICAgICAgICAgIHJlZnVuZF9tb25leSA9IG1vbm5pZnkuaW5pdGlhdGVfcmVmdW5kKCBcbiAgICAgICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICAgICAgcmVmdW5kUmVmZXJlbmNlPSc2NjM3d2hoaHdlJywgXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblJlZmVyZW5jZT0nTU5GWXw2M3wyMDIxMDQxMzEzNDIwNXwwMDAxMTMnLCBcbiAgICAgICAgICAgICAgICAgIHJlZnVuZEFtb3VudD0nMTAwMC4wJywgXG4gICAgICAgICAgICAgICAgICByZWZ1bmRSZWFzb249J09yZGVyIGNhbmNlbGxlZCEnLCBcbiAgICAgICAgICAgICAgICAgIGN1c3RvbWVyTm90ZT0nQ2FuY2VsZWQnLCBcbiAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uQWNjb3VudE51bWJlcj0nMjIxMVhYWFhYWCcsIFxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb25BY2NvdW50QmFua0NvZGU9JzA1NydcbiAgICAgICAgICAgICAgICAgIClcblxuICAgICAgICAgICAgICAgIHByaW50KHJlZnVuZF9tb25leSlcblxuXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgXCJyZXNwb25zZU1lc3NhZ2VcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgICBcInJlc3BvbnNlQ29kZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICAgIFwicmVzcG9uc2VCb2R5XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvblJlZmVyZW5jZVwiOiBcIk1ORll8NjN8MjAyMTA0MTMxMzQyMDV8MDAwMTEzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicGF5bWVudFJlZmVyZW5jZVwiOlwiSl8xMjMxMl8xMjJcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvbkFtb3VudFwiOiA1MDAwLFxuICAgICAgICAgICAgICAgICAgICBcInJlZnVuZEFtb3VudFwiOiAxMjAwLFxuICAgICAgICAgICAgICAgICAgICBcInJlZnVuZFN0YXR1c1wiOiBcIklOX1BST0dSRVNTXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVmdW5kUmVhc29uXCI6IFwiT3JkZXIgd2FzIGNhbmNlbGxlZFwiLFxuICAgICAgICAgICAgICAgICAgICBcImN1c3RvbWVyTm90ZVwiOiBcIlJlZnVuZCBmb3Igb3JkZXIgSjExMTBcIixcbiAgICAgICAgICAgICAgICAgICAgXCJyZWZ1bmRUeXBlXCI6IFwiRlVMTF9SRUZVTkRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjcmVhdGVkT25cIjogXCIxNS8xMi8yMDIwIDA5OjM4OjEzIEFNXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29tcGxldGVkT25cIjogXCIxNS8xMi8yMDIwIDEyOjIwOjIzIFBNXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY29tbWVudFwiOiBcIlJlZnVuZCBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LlwiXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4xNC4gR0VUIFJFRlVORCBTVEFUVVM6IFRoaXMgZnVuY3Rpb24gY2FuIGJlIHVzZWQgdG8gZ2V0IHN0YXR1cyBvZiBhbiBpbml0aWF0ZWQgcmVmdW5kLlxuXG4gICAgICAgICAgICAgICAgZ2V0X3JlZnVuZF9zdGF0dXMgPSBtb25uaWZ5LmdldF9yZWZ1bmRfc3RhdHVzKFxuICAgICAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvblJlZmVyZW5jZT0nTU5GWXw2M3wyMDIxMDQxMzEzNDIwNXwwMDAxMTMnXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcHJpbnQoZ2V0X3JlZnVuZF9zdGF0dXMpXG5cblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwicmVxdWVzdFN1Y2Nlc3NmdWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgXCJyZXNwb25zZUNvZGVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICBcInJlc3BvbnNlQm9keVwiOiB7XG4gICAgICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25SZWZlcmVuY2VcIjogXCJNTkZZfDYzfDIwMjEwNDEzMTM0MjA1fDAwMDExM1wiLFxuICAgICAgICAgICAgICAgICAgICBcInBheW1lbnRSZWZlcmVuY2VcIjpcIkpfMTIzMTJfMTIyXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25BbW91bnRcIjogNTAwMCxcbiAgICAgICAgICAgICAgICAgICAgXCJyZWZ1bmRBbW91bnRcIjogMTIwMCxcbiAgICAgICAgICAgICAgICAgICAgXCJyZWZ1bmRTdGF0dXNcIjogXCJJTl9QUk9HUkVTU1wiLFxuICAgICAgICAgICAgICAgICAgICBcInJlZnVuZFJlYXNvblwiOiBcIk9yZGVyIHdhcyBjYW5jZWxsZWRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJjdXN0b21lck5vdGVcIjogXCJSZWZ1bmQgZm9yIG9yZGVyIEoxMTEwXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicmVmdW5kVHlwZVwiOiBcIkZVTExfUkVGVU5EXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZE9uXCI6IFwiMTUvMTIvMjAyMCAwOTozODoxMyBBTVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbXBsZXRlZE9uXCI6IFwiMTUvMTIvMjAyMCAxMjoyMDoyMyBQTVwiLFxuICAgICAgICAgICAgICAgICAgICBcImNvbW1lbnRcIjogXCJSZWZ1bmQgcHJvY2Vzc2VkIHN1Y2Nlc3NmdWxseS5cIlxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuXG4xNS4gQ1JFQVRFIFNVQi1BQ0NPVU5UOiBDcmVhdGVzIGEgc3ViIGFjY291bnQgZm9yIGEgbWVyY2hhbnQuIEFsbG93aW5nIHRoZSBtZXJjaGFudCBzcGxpdCB0cmFuc2FjdGlvbiBzZXR0bGVtZW50IGJldHdlZW4gdGhlIG1haW4gYWNjb3VudCBhbmQgb25lIG9yIG1vcmUgc3ViIGFjY291bnQocylcblxuICAgICAgICAgICAgICBjcmVhdGVfc3ViX2FjY291bnQgPSBtb25uaWZ5LmNyZWF0ZV9zdWJfYWNjb3VudChcbiAgICAgICAgICAgICAgICBtZXJjaGFudF9jcmVkZW50aWFsLCBcbiAgICAgICAgICAgICAgICBiYW5rQ29kZT0nMDQ0JywgXG4gICAgICAgICAgICAgICAgYWNjb3VudE51bWJlcj0nMDAyMDY3NzM2MicsIFxuICAgICAgICAgICAgICAgIGVtYWlsPSd0ZXN0QGdtYWlsLmNvbScsIFxuICAgICAgICAgICAgICAgIHNwbGl0UGVyY2VudGFnZT0nMjAnXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBwcmludChjcmVhdGVfc3ViX2FjY291bnQpXG5cblxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VDb2RlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VCb2R5XCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJBY2NvdW50Q29kZVwiOiBcIk1GWV9TVUJfMzE5NDUyODgzMzI4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROdW1iZXJcIjogXCIwMTIzNDU2Nzg5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROYW1lXCI6IFwiSk9ITiwgRE9FIFNOT1dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsXCI6IFwidGFtaXJhMUBnbWFpbC5jb21cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwNThcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJHVEJhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFNwbGl0UGVyY2VudGFnZVwiOiAyMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgIH1cblxuMTYuIERFTEVURSBTVUItQUNDT1VOVDogRGVsZXRlcyBhIG1lcmNoYW50J3Mgc3ViIGFjY291bnQuXG5cbiAgICAgICAgICAgIGRlbGV0ZV9zdWJfYWNjb3VudCA9IG1vbm5pZnkuZGVsZXRlX3N1Yl9hY2NvdW50KFxuICAgICAgICAgICAgICBtZXJjaGFudF9jcmVkZW50aWFsLCBcbiAgICAgICAgICAgICAgc3ViQWNjb3VudENvZGU9J01GWV9TVUJfMjQ4NzMxOTQxNTYzJ1xuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBwcmludChkZWxldGVfc3ViX2FjY291bnQpXG5cbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICBcInJlc3BvbnNlTWVzc2FnZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgXCJyZXNwb25zZUNvZGVcIjogXCIwXCJcbiAgICAgICAgICAgIH1cblxuMTcuIEdFVCBBTEwgU1VCLUFDQ09VTlRTOiBSZXR1cm5zIGEgbGlzdCBvZiBzdWIgYWNjb3VudHMgcHJldmlvdXNseSBjcmVhdGVkIGJ5IHRoZSBtZXJjaGFudC5cblxuICAgICAgICAgICAgZ2V0X3N1Yl9hY2NvdW50ID0gbW9ubmlmeS5nZXRfc3ViX2FjY291bnQobWVyY2hhbnRfY3JlZGVudGlhbClcbiAgICAgICAgICAgIHByaW50KGdldF9zdWJfYWNjb3VudClcblxuXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZXF1ZXN0U3VjY2Vzc2Z1bFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VDb2RlXCI6IFwiMFwiLFxuICAgICAgICAgICAgICAgIFwicmVzcG9uc2VCb2R5XCI6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzdWJBY2NvdW50Q29kZVwiOiBcIk1GWV9TVUJfMzE5NDUyODgzMjE5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROdW1iZXJcIjogXCIwMTIzNDU2Nzg5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROYW1lXCI6IFwiSk9ITiwgRE9FIFNOT1dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsXCI6IFwidGFtaXJhMUBnbWFpbC5jb21cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwNThcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJHVEJhbmtcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZGVmYXVsdFNwbGl0UGVyY2VudGFnZVwiOiAyMC4wMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInN1YkFjY291bnRDb2RlXCI6IFwiTUZZX1NVQl84ODM4NjU2NzIyMzkxXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROdW1iZXJcIjogXCI5ODc2NTQzMjEwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY291bnROYW1lXCI6IFwiSkFORSwgRE9FIFNOT1dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImVtYWlsXCI6IFwidGFtaXJhMkBnbWFpbC5jb21cIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua0NvZGVcIjogXCIwNTdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYmFua05hbWVcIjogXCJaZW5pdGggYmFua1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0U3BsaXRQZXJjZW50YWdlXCI6IDIwLjAwPVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuXG4xOC4gVVBEQVRFIFNVQi1BQ0NPVU5UOiBVcGRhdGVzIHRoZSBpbmZvcm1hdGlvbiBvbiBhbiBleGlzdGluZyBzdWIgYWNjb3VudCBmb3IgYSBtZXJjaGFudC5cblxuICAgICAgICAgICAgIHVwZGF0ZV9zdWJfYWNjb3VudCA9IG1vbm5pZnkudXBkYXRlX3N1Yl9hY2NvdW50KFxuICAgICAgICAgICAgICAgbWVyY2hhbnRfY3JlZGVudGlhbCwgXG4gICAgICAgICAgICAgICBzdWJBY2NvdW50Q29kZT0nTUZZX1NVQl8yNDg3MzE5NDE1NjMnLCBcbiAgICAgICAgICAgICAgIGJhbmtDb2RlPScwNTcnLCBhY2NvdW50TnVtYmVyPScyMjExMzMzNDcxJywgXG4gICAgICAgICAgICAgICBlbWFpbD0nVEVTVEBnbWFpbC5jb20nLCBcbiAgICAgICAgICAgICAgIHNwbGl0UGVyY2VudGFnZT0nMjMnXG4gICAgICAgICAgICAgICApXG4gICAgICAgICAgICBwcmludCh1cGRhdGVfc3ViX2FjY291bnQpXG5cblxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVxdWVzdFN1Y2Nlc3NmdWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInJlc3BvbnNlTWVzc2FnZVwiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICBcInJlc3BvbnNlQ29kZVwiOiBcIjBcIixcbiAgICAgICAgICAgICAgICBcInJlc3BvbnNlQm9keVwiOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3ViQWNjb3VudENvZGVcIjogXCJNRllfU1VCXzMxOTQ1Mjg4MzMyOFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhY2NvdW50TnVtYmVyXCI6IFwiMDEyMzQ1Njc4OVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhY2NvdW50TmFtZVwiOiBcIkpPSE4sIERPRSBTTk9XXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImN1cnJlbmN5Q29kZVwiOiBcIk5HTlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbFwiOiBcInRhbWlyYTFAZ21haWwuY29tXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJhbmtDb2RlXCI6IFwiMDU4XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJhbmtOYW1lXCI6IFwiR1RCYW5rXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRlZmF1bHRTcGxpdFBlcmNlbnRhZ2VcIjogMjBcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cblxuXG4xOS4gT05FIFRJTUUgUEFZTUVOVDogQWxsb3dzIHlvdSBpbml0aWFsaXplIGEgdHJhbnNhY3Rpb24gb24gTW9ubmlmeSBhbmQgcmV0dXJucyBhIGNoZWNrb3V0IFVSTCB3aGljaCB5b3UgY2FuIGxvYWQgd2l0aGluIGEgYnJvd3NlciB0byBkaXNwbGF5IHRoZSBwYXltZW50IGZvcm0gdG8geW91ciBjdXN0b21lci5cblxuICAgICAgICAgICAgICBvbmVfdGltZV9wYXltZW50ID0gbW9ubmlmeS5vbmVfdGltZV9wYXltZW50KFxuICAgICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICAgIGFtb3VudD0nMTAwMCcsIFxuICAgICAgICAgICAgICAgIGN1c3RvbWVyTmFtZT0nVGVzdCBQYXltZW50JywgXG4gICAgICAgICAgICAgICAgY3VzdG9tZXJFbWFpbD0ndGVzdEBnbWFpbC5jb20nLCBcbiAgICAgICAgICAgICAgICBwYXltZW50UmVmZXJlbmNlPSc3N3V1dXd5eXEnLCBcbiAgICAgICAgICAgICAgICBwYXltZW50RGVzY3JpcHRpb249J1Rlc3QgUGF5bWVudCcsIFxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VXJsPSdodHRwOi8vdGVzdC5jb20nLCBcbiAgICAgICAgICAgICAgICBwYXltZW50TWV0aG9kcz1bJ0FDQ09VTlRfVFJBTlNGRVInLCAnQ0FSRCddXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICBwcmludChvbmVfdGltZV9wYXltZW50KVxuXG5cbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiYW1vdW50XCI6IDEwMDAuMDAsXG4gICAgICAgICAgICAgICAgXCJjdXN0b21lck5hbWVcIjogXCJUZXN0IFBheW1lbnRcIixcbiAgICAgICAgICAgICAgICBcImN1c3RvbWVyRW1haWxcIjogXCJ0ZXN0QGdtYWlsLmNvbVwiLFxuICAgICAgICAgICAgICAgIFwicGF5bWVudFJlZmVyZW5jZVwiOiBcIjc3dXV1d3l5cVwiLFxuICAgICAgICAgICAgICAgIFwicGF5bWVudERlc2NyaXB0aW9uXCI6IFwiVGVzdCBQYXltZW50XCIsXG4gICAgICAgICAgICAgICAgXCJjdXJyZW5jeUNvZGVcIjogXCJOR05cIixcbiAgICAgICAgICAgICAgICBcImNvbnRyYWN0Q29kZVwiOlwiMzI5MDQ4Mjc3MzhcIixcbiAgICAgICAgICAgICAgICBcInJlZGlyZWN0VXJsXCI6IFwiaHR0cDovL3Rlc3QuY29tXCIsXG4gICAgICAgICAgICAgICAgXCJwYXltZW50TWV0aG9kc1wiOltcIkNBUkRcIixcIkFDQ09VTlRfVFJBTlNGRVJcIl1cbiAgICAgICAgICAgICAgfVxuTk9URTogSWYgcGF5bWVudE1ldGhvZHMgaXMgc2V0IHRvIENBUkQsIFlvdXIgY3VzdG9tZXIgY2FuIG9ubHkgdXNlIGNhcmQgZm9yIHBheW1lbnQgYW5kIGlmIHNldCB0byBBQ0NPVU5UX1RSQU5TRkVSLCBpdCB3aWxsIG9ubHkgYWNjZXB0IEFjb291bnQgVHJhbnNmZXIgYXMgdGhlIG9ubHkgbW9kZSBvZiBwYXltZW50LiBJZiBib3RoIGlzIHNldCwgdGhlIGN1c3RvbWVyIHdpbGwgYmUgYWJsZSB0byB1c2UgYm90aCBDQVJEIGFuZCBUUkFOU0ZFUiB0byBtYWtlIHBheW1lbnQuXG5cblxuXG4yMC4gR0VUIFJFU0VSVkUgQUNDT1VOVCBUUkFOU0FDVElPTlM6IFlvdSBjYW4gZ2V0IGEgcGFnaW5hdGVkIGxpc3Qgb2YgdHJhbnNhY3Rpb25zIHByb2Nlc3NlZCB0byBhIHJlc2VydmVkIGFjY291bnQgYnkgY2FsbGluZyB0aGUgZW5kcG9pbnQgYmVsb3cgYW5kIGJ5IHNwZWNpZnlpbmcgdGhlIGFjY291bnRSZWZlcmVuY2UgYXMgYSBxdWVyeSBwYXJhbWV0ZXIuIFlvdSBjYW4gYWxzbyBzcGVjaWZ5IHRoZSBwYWdlIG51bWJlciBhbmQgc2l6ZSAobnVtYmVyIG9mIHRyYW5zYWN0aW9ucykgeW91IHdhbnQgcmV0dXJuZWQgcGVyIHBhZ2UuXG5cblxuICAgICAgICAgICAgICAgIGFsbHRyYW5zID0gbW9ubmlmeS5yZXNlcnZlX2FjY291bnRfdHJhbnNhY3Rpb25zKCBcbiAgICAgICAgICAgICAgICAgIG1lcmNoYW50X2NyZWRlbnRpYWwsIFxuICAgICAgICAgICAgICAgICAgYWNjb3VudFJlZmVyZW5jZT0nNzczNzc2MmgnLCBcbiAgICAgICAgICAgICAgICAgIHBhZ2U9MCwgc2l6ZT0xMClcbiAgICAgICAgICAgICAgICBwcmludChhbGx0cmFucylcblxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIFwicmVxdWVzdFN1Y2Nlc3NmdWxcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgIFwicmVzcG9uc2VNZXNzYWdlXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgXCJyZXNwb25zZUNvZGVcIjogXCIwXCIsXG4gICAgICAgICAgICAgICAgICBcInJlc3BvbnNlQm9keVwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgXCJjb250ZW50XCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjdXN0b21lckRUT1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbWFpbFwiOiBcInRlc3RAdGVzdGVyLmNvbVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcIlRlc3QgUmVzZXJ2ZWQgQWNjb3VudFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWVyY2hhbnRDb2RlXCI6IFwiQUxKS0hEQUxBU0RcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicHJvdmlkZXJBbW91bnRcIjogMC4yMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF5bWVudE1ldGhvZFwiOiBcIkFDQ09VTlRfVFJBTlNGRVJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3JlYXRlZE9uXCI6IFwiMjAxOS0wNy0yNFQxNDoxMjoyNy4wMDArMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbW91bnRcIjogMTAwLjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmbGFnZ2VkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwcm92aWRlckNvZGVcIjogXCI5ODI3MVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJmZWVcIjogMC43OSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY3VycmVuY3lDb2RlXCI6IFwiTkdOXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNvbXBsZXRlZE9uXCI6IFwiMjAxOS0wNy0yNFQxNDoxMjoyOC4wMDArMDAwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXltZW50RGVzY3JpcHRpb25cIjogXCJUZXN0IFJlc2VydmVkIEFjY291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF5bWVudFN0YXR1c1wiOiBcIlBBSURcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidHJhbnNhY3Rpb25SZWZlcmVuY2VcIjogXCJNTkZZfDIwMTkwNzI0MTQxMjI3fDAwMzM3NFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXltZW50UmVmZXJlbmNlXCI6IFwiTU5GWXwyMDE5MDcyNDE0MTIyN3wwMDMzNzRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWVyY2hhbnRDb2RlXCI6IFwiQUxKS0hEQUxBU0RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibWVyY2hhbnROYW1lXCI6IFwiVGVzdCBMaW1pdGVkXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwicGF5YWJsZUFtb3VudFwiOiAxMDAuMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFtb3VudFBhaWRcIjogMTAwLjAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjb21wbGV0ZWRcIjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICBcInBhZ2VhYmxlXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzb3J0XCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic29ydGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInVuc29ydGVkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbXB0eVwiOiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZ2VTaXplXCI6IDEwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZ2VOdW1iZXJcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvZmZzZXRcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ1bnBhZ2VkXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBcInBhZ2VkXCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwidG90YWxFbGVtZW50c1wiOiAyLFxuICAgICAgICAgICAgICAgICAgICAgIFwidG90YWxQYWdlc1wiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgIFwibGFzdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgIFwic29ydFwiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwic29ydGVkXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwidW5zb3J0ZWRcIjogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiZW1wdHlcIjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIFwiZmlyc3RcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICBcIm51bWJlck9mRWxlbWVudHNcIjogMixcbiAgICAgICAgICAgICAgICAgICAgICBcInNpemVcIjogMTAsXG4gICAgICAgICAgICAgICAgICAgICAgXCJudW1iZXJcIjogMCxcbiAgICAgICAgICAgICAgICAgICAgICBcImVtcHR5XCI6IGZhbHNlXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuXG5UaGVzZSBhcmUgdGhlIGVuZHBvaW50IGZvciBjYXN1YWwgdHJhbnNhY3Rpb25zIGFuZCBzb21lIG9mIGVuZG5wb2ludCBhcmUgeWV0IHRvIGRldmVsb3BlZCB3aGljaCBpIHdpbGwgaW5jbHVkZWQgaW4gbmV4dCB2ZXJzaW9uLiBpIHdpbGwgYWxzbyBiZSBpbmNsdWRpbmcgc29tZSBuZXcgZW5oYW5jZW1lbnQgdG8gdGhlIGxpYnJhcnkgZm9yIHNtb290aCBmaW5hbmNpYWwgdHJhbnNhY3Rpb25zLlxuXG5cblxuMjEuIENBTExCQUNLOiBUaGlzIGVuZHBvaW50IGFsbG93IG1lcmNoYW50IHRvIHJlY2lldmUgZXZlcnkgc3VjY2Vzc2Z1bCBvciBmYWlsIHRyYW5zYWN0aW9uIHBheWxvYWQgdGhhdCBoYXBwZW4gb24gdGhlIG1lcmNoYW50IHBsYXRmb3JtIGluIHJlYWx0aW1lLiBUbyB1c2UgdGhpcywgbWVyY2hhbnQgbmVlZCB0byBhZGQgY2FsbGJhY2sgdXJsIHRvIGhpcyBkYXNoYm9hcmQgYW5kIGZvbGxvdyB0aGUgYmVsb3cgcHJvY2Vzcy5cblxuICAgICAgICAgICAgICAgIEZPUiBESkFOR08gYW5kIEZMQVNLXG5cblxuICAgICAgICAgICAgICAgIGRlZiBjYWxsYmFjayhyZXF1ZXN0KTpcbiAgICAgICAgICAgICAgICAgICAgYm9keSA9IG1vbm5pZnkud2ViaG9vayhyZXF1ZXN0KVxuXG4gICAgICAgICAgICAgICAgICAgICcnJycnJycnJycnJ1xuICAgICAgICAgICAgICAgICAgICBEbyBTb21ldGhpbmcgd2l0aCB0aGUgYm9keS4uLi4uLi4uLlxuICAgICAgICAgICAgICAgICAgICAnJycnJycnJycnJydcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvZHlcblxuICAgICAgICAgICAgICAgIFNldCB5b3VyIHVybCBwYXRoIHRvIGNhbGwgdGhlIGZ1bmN0aW9uLiBJZiB5b3UgcHJpbnQgdGhlIGJvZHksIHlvdSB3aWxsIGdldCB0aGUgYmVsb3cgcmVzcG9uc2UgZm9yIGV2ZXJ5IHN1Y2Nlc3NmdWwgdHJhbnNhY3Rpb25cblxuXG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvblJlZmVyZW5jZVwiIDogXCJNTkZZfDIwMjAwOTAwMDAzMTQ5fDAwMDAwMFwiLCBcbiAgICAgICAgICAgICAgICAgICAgXCJwYXltZW50UmVmZXJlbmNlXCIgOiBcIk1ORll8MjAyMDA5MDAwMDMxNDl8MDAwMDAwXCIsIFxuICAgICAgICAgICAgICAgICAgICBcImFtb3VudFBhaWRcIiA6IFwiMTgwMDAwLjAwXCIsIFxuICAgICAgICAgICAgICAgICAgICBcInRvdGFsUGF5YWJsZVwiIDogXCIxODAwMDAuMDBcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwic2V0dGxlbWVudEFtb3VudFwiIDogXCIxNzk5ODkuMjVcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwicGFpZE9uXCIgOiBcIjA5LzA5LzIwMjAgMTE6MzE6NTYgQU1cIiwgXG4gICAgICAgICAgICAgICAgICAgIFwicGF5bWVudFN0YXR1c1wiIDogXCJQQUlEXCIsIFxuICAgICAgICAgICAgICAgICAgICBcInBheW1lbnREZXNjcmlwdGlvblwiIDogXCJPamluYWthIERhbmllbFwiLCBcbiAgICAgICAgICAgICAgICAgICAgXCJ0cmFuc2FjdGlvbkhhc2hcIiA6IFwiYTI5NGEwYmZ4eHh4eHh4eHh4eHh4eHh4eHh4eDBiMzk5Y2YwNzdlMzBjZjJhZDU0YTdkYTllMTc1ODNkZWI1MTMwMjg2ZTZiYjVkeHh4eDM1M2YwMjc3MjViODNmY2FmYWMwMmQyZTE4MWY1M2VkZDVmXCIsIFxuICAgICAgICAgICAgICAgICAgICBcImN1cnJlbmN5XCIgOiBcIk5HTlwiLCBcbiAgICAgICAgICAgICAgICAgICAgXCJwYXltZW50TWV0aG9kXCIgOiBcIkFDQ09VTlRfVFJBTlNGRVJcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwicHJvZHVjdFwiIDogeyBcblx0XHQgICAgICAgICAgICAgICAgICAgIFwidHlwZVwiIDogXCJSRVNFUlZFRF9BQ0NPVU5UXCIsIFxuXHRcdCAgICAgICAgICAgICAgICAgICAgXCJyZWZlcmVuY2VcIiA6IFwiN2IzeHh4eDA3MmE0NGF4eHh4eHh4MmI2YzIzNzQ0NThcIiBcblx0XHRcdCAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgIFwiY2FyZERldGFpbHNcIiA6IG51bGwsIFxuICAgICAgICAgICAgICAgICAgICBcImFjY291bnREZXRhaWxzXCIgOiB7IFxuXHRcdCAgICAgICAgICAgICAgICBcImFjY291bnROYW1lXCIgOiBcIkpvaG4gQ2lyb21hIEFidWhcIiwgXG5cdFx0ICAgICAgICAgICAgICAgIFwiYWNjb3VudE51bWJlclwiIDogXCIqKioqKio0ODcyXCIsIFxuXHRcdCAgICAgICAgICAgICAgICBcImJhbmtDb2RlXCIgOiBcIjAwMDAxNVwiLCBcblx0XHQgICAgICAgICAgICAgICAgXCJhbW91bnRQYWlkXCIgOiBcIjE4MDAwMC4wMFwiIFxuXHRcdFx0ICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICBcImFjY291bnRQYXltZW50c1wiIDogWyB7IFxuXHRcdCAgICAgICAgICAgICAgICAgICAgXCJhY2NvdW50TmFtZVwiIDogXCJKb2huIENpcm9tYSBBYnVoXCIsIFxuXHRcdCAgICAgICAgICAgICAgICAgICAgXCJhY2NvdW50TnVtYmVyXCIgOiBcIioqKioqKjQ4NzJcIiwgXG5cdFx0ICAgICAgICAgICAgICAgICAgICBcImJhbmtDb2RlXCIgOiBcIjAwMDAxNVwiLCBcblx0XHQgICAgICAgICAgICAgICAgICAgIFwiYW1vdW50UGFpZFwiIDogXCIxODAwMDAuMDBcIiBcblx0XHRcdCAgICAgICAgICAgICAgfSBdLCBcbiAgICAgICAgICAgICAgICAgICAgXCJjdXN0b21lclwiIDogeyBcblx0XHQgICAgICAgICAgICAgICAgICAgIFwiZW1haWxcIiA6IFwiZG9qaW5ha2FAbW9ubmlmeS5jb21cIiwgXG5cdFx0ICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIiA6IFwiRGFuaWVsIE9qaW5ha2FcIiBcblx0XHRcdCAgICAgICAgICAgICAgfSwgXG4gICAgICAgICAgICAgICAgICAgIFwibWV0YURhdGFcIiA6IHsgfSBcbiAgICAgICAgICAgICAgICB9XG5cbk5PVEU6IFRoaXMgZW5kcG9pbnQgaXMgdGVzdGVkIHdpdGggRGphbmdvIGFuZCBGbGFzay5cblxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL3NhbWtheXovdGVhbWFwdC1tb25uaWZ5LmdpdCIs
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogInRlYW1hcHQtbW9ubmlmeSIs
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvdGVhbWFwdC1tb25uaWZ5LyIs
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvdGVhbWFwdC1tb25uaWZ5LyIs
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9zYW1rYXl6L3RlYW1hcHQtbW9ubmlmeS5naXQi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvdGVhbWFwdC1tb25uaWZ5LzEuMS4xLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLngiLA==
ICAgICJzdW1tYXJ5IjogIlRlYW1BcHQgTW9ubmlmeSBQeXRob24gTGlicmFyeSIs
ICAgICJ2ZXJzaW9uIjogIjEuMS4xIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxMjYxNzQ2Niw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxMjk4YWQ5ZDc2MWFjY2JjNzY3NTkwZTAwNzA0MjQxNmQ0MmVlN2JiNmI5NjEwZTQwYzY3YmNhYmEwMWU1YTNmIiw=
ICAgICAgICAgICJtZDUiOiAiMTQ4ZmVmZTBkNjA4NDAxYWYwNDg4ODdkODk2ZjI0YTgiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjg3ZWY2OWI0YjI1YmI5NDcyY2M5N2ZiY2YxZDE3MGVmNmYyODllNDg3NjM1NGM4NmM2YmUyNGYyOGE3MmEyYiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAidGVhbWFwdC1tb25uaWZ5LTEuMC4wLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxNDhmZWZlMGQ2MDg0MDFhZjA0ODg4N2Q4OTZmMjRhOCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My42Iiw=
ICAgICAgICAic2l6ZSI6IDIzMTcyLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNC0xNVQxMzoyMDoyMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNC0xNVQxMzoyMDoyMS43MjA4OTlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xMi85OC9hZDlkNzYxYWNjYmM3Njc1OTBlMDA3MDQyNDE2ZDQyZWU3YmI2Yjk2MTBlNDBjNjdiY2FiYTAxZTVhM2YvdGVhbWFwdC1tb25uaWZ5LTEuMC4wLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI4YTQzNzdmODdmMmQ5NmFjMTkzYjUyYWFhZDZiOWUyNWEzYWZkNGE1ZmZkZThjYmU3ZTYzMmU4OTA2YjcyNjU5Iiw=
ICAgICAgICAgICJtZDUiOiAiYWU0NmU1MTI4YjcwMDI3ZThlYWNlOWNmMWExYjNlODgiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMTlmNGQwZGE3NDY5ZDEwYTc2ZGMwY2QyMmViMDc1MjY1MGEzMWEzMWY3NzcyMmE4NzlkMDVmYTNlNGJmNzllOSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAidGVhbWFwdC1tb25uaWZ5LTEuMS4wLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhZTQ2ZTUxMjhiNzAwMjdlOGVhY2U5Y2YxYTFiM2U4OCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My5YIiw=
ICAgICAgICAic2l6ZSI6IDM3NzUxLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMC0wM1QwNjo1NDozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMC0wM1QwNjo1NDozNy41MDUwNjlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy84YS80My83N2Y4N2YyZDk2YWMxOTNiNTJhYWFkNmI5ZTI1YTNhZmQ0YTVmZmRlOGNiZTdlNjMyZTg5MDZiNzI2NTkvdGVhbWFwdC1tb25uaWZ5LTEuMS4wLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEuMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1MWJkZjk5ZjMzODU0NzAzZDI4ZDg0NTEwMmMxMDRhOWI1YWM5ZmY0MGQzMmYwMzYwZGRjYmM5ZmE5N2YzZGIxIiw=
ICAgICAgICAgICJtZDUiOiAiN2U0OWUxMmUyOTNhMjJmNjk2ZDgyMDZmNDExMjQ4NTgiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOWVjOWMxOGQzMzdjYmFkM2I1YWM0OTZlMzQyZmMxYWI3ODVkYTkxZDJjZTc5YTUzZTU3YTNjOTQxNDAwODc2ZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAidGVhbWFwdC1tb25uaWZ5LTEuMS4xLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3ZTQ5ZTEyZTI5M2EyMmY2OTZkODIwNmY0MTEyNDg1OCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My54Iiw=
ICAgICAgICAic2l6ZSI6IDM3NzQyLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMS0xOVQxMDowNToxMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMS0xOVQxMDowNToxMi41NjI5NDJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81MS9iZC9mOTlmMzM4NTQ3MDNkMjhkODQ1MTAyYzEwNGE5YjVhYzlmZjQwZDMyZjAzNjBkZGNiYzlmYTk3ZjNkYjEvdGVhbWFwdC1tb25uaWZ5LTEuMS4xLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiNTFiZGY5OWYzMzg1NDcwM2QyOGQ4NDUxMDJjMTA0YTliNWFjOWZmNDBkMzJmMDM2MGRkY2JjOWZhOTdmM2RiMSIs
ICAgICAgICAibWQ1IjogIjdlNDllMTJlMjkzYTIyZjY5NmQ4MjA2ZjQxMTI0ODU4Iiw=
ICAgICAgICAic2hhMjU2IjogIjllYzljMThkMzM3Y2JhZDNiNWFjNDk2ZTM0MmZjMWFiNzg1ZGE5MWQyY2U3OWE1M2U1N2EzYzk0MTQwMDg3NmQi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogInRlYW1hcHQtbW9ubmlmeS0xLjEuMS50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiN2U0OWUxMmUyOTNhMjJmNjk2ZDgyMDZmNDExMjQ4NTgiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMueCIs
ICAgICAgInNpemUiOiAzNzc0Miw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDEtMTlUMTA6MDU6MTIiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDEtMTlUMTA6MDU6MTIuNTYyOTQyWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvNTEvYmQvZjk5ZjMzODU0NzAzZDI4ZDg0NTEwMmMxMDRhOWI1YWM5ZmY0MGQzMmYwMzYwZGRjYmM5ZmE5N2YzZGIxL3RlYW1hcHQtbW9ubmlmeS0xLjEuMS50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
