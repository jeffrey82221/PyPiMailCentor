ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiUGhpbGlwIEJhdWVyIChmb3Igc3RhcnplbC5kZSkiLA==
ICAgICJhdXRob3JfZW1haWwiOiAiaW5mb0BzdGFyemVsLmRlIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkVudmlyb25tZW50IDo6IFdlYiBFbnZpcm9ubWVudCIs
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSIs
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiA0LjMiLA==
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiA1LjAiLA==
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiA1LjEiLA==
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiA1LjIiLA==
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiA2LjAiLA==
ICAgICAgIkZyYW1ld29yayA6OiBQbG9uZSA6OiBBZGRvbiIs
ICAgICAgIkludGVuZGVkIEF1ZGllbmNlIDo6IERldmVsb3BlcnMiLA==
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIHYyIChHUEx2MikiLA==
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAyLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjEwIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjExIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjki
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIuLiBUaGlzIFJFQURNRSBpcyBtZWFudCBmb3IgY29uc3VtcHRpb24gYnkgaHVtYW5zIGFuZCBweXBpLiBQeXBpIGNhbiByZW5kZXIgcnN0IGZpbGVzIHNvIHBsZWFzZSBkbyBub3QgdXNlIFNwaGlueCBmZWF0dXJlcy5cbiAgIElmIHlvdSB3YW50IHRvIGxlYXJuIG1vcmUgYWJvdXQgd3JpdGluZyBkb2N1bWVudGF0aW9uLCBwbGVhc2UgY2hlY2sgb3V0OiBodHRwOi8vZG9jcy5wbG9uZS5vcmcvYWJvdXQvZG9jdW1lbnRhdGlvbl9zdHlsZWd1aWRlLmh0bWxcbiAgIFRoaXMgdGV4dCBkb2VzIG5vdCBhcHBlYXIgb24gcHlwaSBvciBnaXRodWIuIEl0IGlzIGEgY29tbWVudC5cblxuLi4gaW1hZ2U6OiBodHRwczovL2ltZy5zaGllbGRzLmlvL3B5cGkvdi9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydC5zdmdcbiAgICA6dGFyZ2V0OiBodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpL2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0L1xuICAgIDphbHQ6IExhdGVzdCBWZXJzaW9uXG5cbi4uIGltYWdlOjogaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9weXBpL3N0YXR1cy9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydC5zdmdcbiAgICA6dGFyZ2V0OiBodHRwczovL3B5cGkucHl0aG9uLm9yZy9weXBpL2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0XG4gICAgOmFsdDogRWdnIFN0YXR1c1xuXG4uLiBpbWFnZTo6IGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vcHlwaS9weXZlcnNpb25zL2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LnN2Zz9zdHlsZT1wbGFzdGljICAgOmFsdDogU3VwcG9ydGVkIC0gUHl0aG9uIFZlcnNpb25zXG5cbi4uIGltYWdlOjogaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9weXBpL2wvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuc3ZnXG4gICAgOnRhcmdldDogaHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydC9cbiAgICA6YWx0OiBMaWNlbnNlXG5cblxuPT09PT09PT09PT09PT09PT09PT09PT1cbmNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0XG49PT09PT09PT09PT09PT09PT09PT09PVxuXG5FeHBvcnQgYW5kIGltcG9ydCBjb250ZW50LCBtZW1iZXJzLCByZWxhdGlvbnMsIHRyYW5zbGF0aW9ucywgbG9jYWxyb2xlcyBhbmQgbXVjaCBtb3JlLlxuXG5FeHBvcnQgYW5kIGltcG9ydCBhbGwga2luZHMgb2YgZGF0YSBmcm9tIGFuZCB0byBQbG9uZSBzaXRlcyB1c2luZyBhIGludGVybWVkaWF0ZSBqc29uLWZvcm1hdC5cblRoZSBtYWluIHVzZS1jYXNlIGlzIG1pZ3JhdGlvbnMgc2luY2UgaXQgZW5hYmxlcyB5b3UgdG8gZm9yIGV4YW1wbGUgbWlncmF0ZSBmcm9tIFBsb25lIDQgd2l0aCBBcmNoZXR5cGVzIGFuZCBQeXRob24gMiB0byBQbG9uZSA2IHdpdGggRGV4dGVyaXR5IGFuZCBQeXRob24gMyBpbiBvbmUgc3RlcC5cbk1vc3QgZmVhdHVyZXMgdXNlIGBwbG9uZS5yZXN0YXBpYCB0byBzZXJpYWxpemUgYW5kIGRlc2VyaWFsaXplIGRhdGEuXG5cblNlZSBhbHNvIHRoZSB0cmFpbmluZyBvbiBtaWdyYXRpbmcgd2l0aCBleHBvcnRpbXBvcnQ6IGh0dHBzOi8vdHJhaW5pbmcucGxvbmUub3JnL21pZ3JhdGlvbnMvZXhwb3J0aW1wb3J0Lmh0bWxcblxuLi4gY29udGVudHM6OiBDb250ZW50c1xuICAgIDpsb2NhbDpcblxuRmVhdHVyZXNcbj09PT09PT09XG5cbiogRXhwb3J0ICYgSW1wb3J0IGNvbnRlbnRcbiogRXhwb3J0ICYgSW1wb3J0IG1lbWJlcnMgYW5kIGdyb3VwcyB3aXRoIHRoZWlyIHJvbGVzXG4qIEV4cG9ydCAmIEltcG9ydCByZWxhdGlvbnNcbiogRXhwb3J0ICYgSW1wb3J0IHRyYW5zbGF0aW9uc1xuKiBFeHBvcnQgJiBJbXBvcnQgbG9jYWwgcm9sZXNcbiogRXhwb3J0ICYgSW1wb3J0IG9yZGVyIChwb3NpdGlvbiBpbiBwYXJlbnQpXG4qIEV4cG9ydCAmIEltcG9ydCBkaXNjdXNzaW9ucy9jb21tZW50c1xuKiBFeHBvcnQgJiBJbXBvcnQgdmVyc2lvbmVkIGNvbnRlbnRcbiogRXhwb3J0ICYgSW1wb3J0IHJlZGlyZWN0c1xuXG5FeHBvcnQgc3VwcG9ydHM6XG5cbiogUGxvbmUgNCwgNSBhbmQgNlxuKiBBcmNoZXR5cGVzIGFuZCBEZXh0ZXJpdHlcbiogUHl0aG9uIDIgYW5kIDNcbiogcGxvbmUuYXBwLm11bHRpbGluZ3VhbCwgUHJvZHVjdHMuTGluZ3VhUGxvbmUsIHJhcHR1cy5tdWx0aWxhbmd1YWdlZmllbGRzXG5cbkltcG9ydCBzdXBwb3J0czpcblxuKiBQbG9uZSA1LjIrLCBEZXh0ZXJpdHksIFB5dGhvbiAyIGFuZCAzLCBwbG9uZS5hcHAubXVsdGlsaW5ndWFsXG5cblVzYWdlXG49PT09PVxuXG5FeHBvcnRcbi0tLS0tLVxuXG5Vc2UgdGhlIGZvcm0gd2l0aCB0aGUgVVJMIGBgL0BAZXhwb3J0X2NvbnRlbnRgYCwgYW5kIHNlbGVjdCB3aGF0IHlvdSB3YW50IHRvIGV4cG9ydDpcblxuLi4gaW1hZ2U6OiAuL2RvY3MvZXhwb3J0LnBuZ1xuXG5Zb3UgY2FuIGV4cG9ydCBvbmUgb3IgbW9yZSB0eXBlcyBhbmQgYSB3aG9sZSBzaXRlIG9yIG9ubHkgYSBzcGVjaWZpYyBwYXRoIGluIGEgc2l0ZS4gU2luY2UgaXRlbXMgYXJlIGV4cG9ydGVkIG9yZGVyZWQgYnkgcGF0aCBpbXBvcnRpbmcgdGhlbSB3aWxsIGNyZWF0ZSB0aGUgc2FtZSBzdHJ1Y3R1cmUgYXMgeW91IGhhZCBvcmlnaW5hbGx5LlxuXG5UaGUgZG93bmxvYWRlZCBqc29uLWZpbGUgd2lsbCBoYXZlIHRoZSBuYW1lIG9mIHRoZSBwYXRoIHlvdSBleHBvcnRlZCBmcm9tLCBlLmcuIGBgUGxvbmUuanNvbmBgLlxuXG5UaGUgZXhwb3J0cyBmb3IgbWVtYmVycywgcmVsYXRpb25zLCBsb2NhbHJvbGVzIGFuZCByZWxhdGlvbnMgYXJlIGxpbmtlZCB0byBpbiB0aGlzIGZvcm0gYnV0IGNhbiBhbHNvIGJlIGNhbGxlZCBpbmRpdmlkdWFsbHk6IGBgL0BAZXhwb3J0X21lbWJlcnNgYCwgYGAvQEBleHBvcnRfcmVsYXRpb25zYGAsIGBgL0BAZXhwb3J0X2xvY2Fscm9sZXNgYCwgYGAvQEBleHBvcnRfdHJhbnNsYXRpb25zYGAsIGBgL0BAZXhwb3J0X29yZGVyaW5nYGAsIGBgL0BAZXhwb3J0X2Rpc2N1c3Npb25gYC5cblxuXG5JbXBvcnRcbi0tLS0tLVxuXG5Vc2UgdGhlIGZvcm0gd2l0aCB0aGUgVVJMIGBgL0BAaW1wb3J0X2NvbnRlbnRgYCwgYW5kIHVwbG9hZCBhIGpzb24tZmlsZSB0aGF0IHlvdSB3YW50IHRvIGltcG9ydDpcblxuLi4gaW1hZ2U6OiAuL2RvY3MvaW1wb3J0LnBuZ1xuXG5cblRoZSBpbXBvcnRzIGZvciBtZW1iZXJzLCByZWxhdGlvbnMsIGxvY2Fscm9sZXMgYW5kIHJlbGF0aW9ucyBhcmUgbGlua2VkIHRvIGluIHRoaXMgZm9ybSBidXQgY2FuIGFsc28gYmUgY2FsbGVkIGluZGl2aWR1YWxseTogYGAvQEBpbXBvcnRfbWVtYmVyc2BgLCBgYC9AQGltcG9ydF9yZWxhdGlvbnNgYCwgYGAvQEBpbXBvcnRfbG9jYWxyb2xlc2BgLCBgYC9AQGltcG9ydF90cmFuc2xhdGlvbnNgYCwgYGAvQEBpbXBvcnRfb3JkZXJpbmdgYCwgYGAvQEBpbXBvcnRfZGlzY3Vzc2lvbmBgLlxuXG5BcyBhIGxhc3Qgc3RlcCBpbiBhIG1pZ3JhdGlvbiB0aGVyZSBpcyBhbm90aGVyIHZpZXcgYGBAQHJlc2V0X2RhdGVzYGAgdGhhdCByZXNldHMgdGhlIG1vZGlmaWVkIGRhdGUgb24gaW1wb3J0ZWQgY29udGVudCB0byB0aGUgZGF0ZSBpbml0aWFsbHkgY29udGFpbmVkIGluIHRoZSBpbXBvcnRlZCBqc29uLWZpbGUuIFRoaXMgaXMgbmVjZXNzYXJ5IHNpbmNlIHZhcm91cyBjaGFuZ2VzIGR1cmluZyBhIG1pZ3JhdGlvbiB3aWxsIGxpa2VseSByZXN1bHQgaW4gYSB1cGRhdGVkIG1vZGlmaWVkLWRhdGUuIER1cmluZyBpbXBvcnQgdGhlIG9yaWdpbmFsIGlzIHN0b3JlZCBhcyBgYG9iai5tb2RpZmljYXRpb25fZGF0ZV9taWdyYXRlZGBgIG9uIGVhY2ggbmV3IG9iamVjdCBhbmQgdGhpcyB2aWV3IHNldHMgdGhpcyBkYXRlLlxuXG5cblVzZS1jYXNlc1xuPT09PT09PT09XG5cbk1pZ3JhdGlvbnNcbi0tLS0tLS0tLS1cblxuV2hlbiBhIGluLXBsYWNlLW1pZ3JhdGlvbiBpcyBub3QgcmVxdWlyZWQgeW91IGNhbiBjaG9vc2UgdGhpcyBhZGRvbiB0byBtaWdyYXRlIHRoZSBtb3N0IGltcG9ydGFudCBwYXJ0cyBvZiB5b3VyIHNpdGUgdG8ganNvbiBhbmQgdGhlbiBpbXBvcnQgaXQgaW50byBhIG5ldyBQbG9uZSBpbnN0YW5jZSBvZiB5b3VyIHRhcmdldGVkIHZlcnNpb246XG5cbiogRXhwb3J0IGNvbnRlbnQgZnJvbSBhIFBsb25lIHNpdGUgKGl0IHN1cHBvcnRzIFBsb25lIDQgYW5kIDUsIEFyY2hldHlwZXMgYW5kIERleHRlcml0eSwgUHl0aG9uIDIgYW5kIDMpLlxuKiBJbXBvcnQgdGhlIGV4cG9ydGVkIGNvbnRlbnQgaW50byBhIG5ldyBzaXRlIChQbG9uZSA1LjIrLCBEZXh0ZXJpdHksIFB5dGhvbiAzKVxuKiBFeHBvcnQgYW5kIGltcG9ydCByZWxhdGlvbnMsIHVzZXJzIGFuZCBncm91cHMgd2l0aCB0aGVpciByb2xlcywgdHJhbnNsYXRpb25zLCBsb2NhbCByb2xlcywgb3JkZXJpbmcsIGRlZGF1bHQtcGFnZXMsIGNvbW1lbnRzLCBwb3J0bGV0cyBhbmQgcmVkaXJlY3RzLlxuXG5Ib3cgdG8gbWlncmF0ZSBhZGRpdGlvbmFsIGZlYXR1cmVzIGxpa2UgQW5ub3RhdGlvbnMgb3IgTWFya2VyIEludGVyZmFjZXMgaXMgZGlzY3Vzc2VkIGluIHRoZSBGQVEgc2VjdGlvbi5cblxuT3RoZXJcbi0tLS0tXG5cbllvdSBjYW4gdXNlIHRoaXMgYWRkb24gdG9cblxuKiBBcmNoaXZlIHlvdXIgY29udGVudCBhcyBqc29uXG4qIEV4cG9ydCBkYXRhIHRvIHByZXBhcmUgYSBtaWdyYXRpb24gdG8gYW5vdGhlciBzeXN0ZW1cbiogQ29tYmluZSBjb250ZW50IGZyb20gbXV0aXBsZSBwbG9uZS1zaXRlcyBpbnRvIG9uZS5cbiogSW1wb3J0IGEgcGxvbmUtc2l0ZSBhcyBhIHN1YnNpdGUgaW50byBhbm90aGVyLlxuKiBJbXBvcnQgY29udGVudCBmcm9tIG90aGVyIHN5c3RlbXMgYXMgbG9uZyBhcyBpdCBmaXRzIHRoZSByZXF1aXJlZCBmb3JtYXQuXG4qIFVwZGF0ZSBvciByZXBsYWNlIGV4aXN0aW5nIGRhdGFcbiogLi4uXG5cbkRldGFpbHNcbj09PT09PT1cblxuRXhwb3J0IGNvbnRlbnRcbi0tLS0tLS0tLS0tLS0tXG5cbkV4cG9ydGluZyBjb250ZW50IGlzIGJhc2ljYWxseSBhIHdyYXBwZXIgZm9yIHRoZSBzZXJpYWxpemVycyBvZiBwbG9uZS5yZXN0YXBpOlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBmcm9tIHBsb25lLnJlc3RhcGkuaW50ZXJmYWNlcyBpbXBvcnQgSVNlcmlhbGl6ZVRvSnNvblxuICAgIGZyb20gem9wZS5jb21wb25lbnQgaW1wb3J0IGdldE11bHRpQWRhcHRlclxuXG4gICAgc2VyaWFsaXplciA9IGdldE11bHRpQWRhcHRlcigob2JqLCByZXF1ZXN0KSwgSVNlcmlhbGl6ZVRvSnNvbilcbiAgICBkYXRhID0gc2VyaWFsaXplcihpbmNsdWRlX2l0ZW1zPUZhbHNlKVxuXG5JbXBvcnQgY29udGVudFxuLS0tLS0tLS0tLS0tLS1cblxuSW1wb3J0aW5nIGNvbnRlbnQgaXMgYSBlbGFib3JhdGUgd3JhcHBlciBmb3IgdGhlIGRlc2VyaWFsaXplcnMgb2YgcGxvbmUucmVzdGFwaTpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBwbG9uZS5yZXN0YXBpLmludGVyZmFjZXMgaW1wb3J0IElEZXNlcmlhbGl6ZUZyb21Kc29uXG4gICAgZnJvbSB6b3BlLmNvbXBvbmVudCBpbXBvcnQgZ2V0TXVsdGlBZGFwdGVyXG5cbiAgICBjb250YWluZXIuaW52b2tlRmFjdG9yeShpdGVtWydAdHlwZSddLCBpdGVtWydpZCddKVxuICAgIGRlc2VyaWFsaXplciA9IGdldE11bHRpQWRhcHRlcigobmV3LCBzZWxmLnJlcXVlc3QpLCBJRGVzZXJpYWxpemVGcm9tSnNvbilcbiAgICBuZXcgPSBkZXNlcmlhbGl6ZXIodmFsaWRhdGVfYWxsPUZhbHNlLCBkYXRhPWl0ZW0pXG5cblxuVXNlIGZvciBtaWdyYXRpb25zXG4tLS0tLS0tLS0tLS0tLS0tLS1cblxuQSBtYWluIHVzZS1jYXNlIG9mIHRoaXMgcGFja2FnZSBpcyBtaWdyYXRpb24gZnJvbSBvbmUgUGxvbmUtVmVyc2lvbiB0byBhbm90aGVyLlxuXG5FeHBvcnRpbmcgQXJjaGV0eXBlcyBjb250ZW50IGFuZCBpbXBvcnRpbmcgdGhhdCBhcyBEZXh0ZXJpdHkgY29udGVudCB3b3JrcyBmaW5lIGJ1dCBkdWUgdG8gY2hhbmdlcyBpbiBmaWVsZC1uYW1lcyBzb21lIHNldHRpbmdzIHdvdWxkIGdldCBsb3N0LlxuRm9yIGV4YW1wbGUgdGhlIHNldHRpbmcgdG8gZXhjbHVkZSBjb250ZW50IGZyb20gdGhlIG5hdmlnYXRpb24gd2FzIHJlbmFtZWQgZnJvbSBgYGV4Y2x1ZGVGcm9tTmF2YGAgdG8gYGBleGNsdWRlX2Zyb21fbmF2YGAuXG5cblRvIGZpeCB0aGlzIHlvdSBjYW4gY2hlY2sgdGhlIGNoZWNrYm94IFwiTW9kaWZ5IGV4cG9ydGVkIGRhdGEgZm9yIG1pZ3JhdGlvbnNcIi5cblRoaXMgd2lsbCBtb2RpZnkgdGhlIGRhdGEgZHVyaW5nIGV4cG9ydDpcblxuKiBEcm9wIHVudXNlZCBkYXRhIChlLmcuIGBuZXh0X2l0ZW1gIGFuZCBgY29tcG9uZW50c2ApXG4qIFJlbW92ZSBhbGwgcmVsYXRpb25maWVsZHNcbiogQ2hhbmdlIHNvbWUgZmllbGRuYW1lcyB0aGF0IGNoYW5nZWQgYmV0d2VlbiBBVCBhbmQgRFhcblxuICAqIGBgZXhjbHVkZUZyb21OYXZgYCDihpIgYGBleGNsdWRlX2Zyb21fbmF2YGBcbiAgKiBgYGFsbG93RGlzY3Vzc2lvbmBgIOKGkiBgYGFsbG93X2Rpc2N1c3Npb25gYFxuICAqIGBgc3ViamVjdGBgIOKGkiBgYHN1YmplY3RzYGBcbiAgKiBgYGV4cGlyYXRpb25EYXRlYGAg4oaSIGBgZXhwaXJlc2BgXG4gICogYGBlZmZlY3RpdmVEYXRlYGAg4oaSIGBgZWZmZWN0aXZlYGBcbiAgKiBgYGNyZWF0aW9uX2RhdGVgYCDihpIgYGBjcmVhdGVkYGBcbiAgKiBgYG1vZGlmaWNhdGlvbl9kYXRlYGAg4oaSIGBgbW9kaWZpZWRgYFxuICAqIGBgc3RhcnREYXRlYGAg4oaSIGBgc3RhcnRgYFxuICAqIGBgZW5kRGF0ZWBgIOKGkiBgYGVuZGBgXG4gICogYGBvcGVuRW5kYGAg4oaSIGBgb3Blbl9lbmRgYFxuICAqIGBgd2hvbGVEYXlgYCDihpIgYGB3aG9sZV9kYXlgYFxuICAqIGBgY29udGFjdEVtYWlsYGAg4oaSIGBgY29udGFjdF9lbWFpbGBgXG4gICogYGBjb250YWN0TmFtZWBgIOKGkiBgYGNvbnRhY3RfbmFtZWBgXG4gICogYGBjb250YWN0UGhvbmVgYCDihpIgYGBjb250YWN0X3Bob25lYGBcblxuKiBVcGRhdGUgdmlldyBuYW1lcyBvbiBGb2xkZXJzIGFuZCBDb2xsZWN0aW9uIHRoZXQgY2hhbmdlZCBzaW5jZSBQbG9uZSA0LlxuKiBFeHBvcnQgQVRUb3BpYyBhbmQgdGhlaXIgY3JpdGVyaWEgdG8gQ29sbGVjdGlvbnMgd2l0aCBxdWVyeXN0cmluZ3MuXG4qIFVwZGF0ZSBDb2xsZWN0aW9uLWNyaXRlcmlhLlxuKiBMaW5rcyBhbmQgaW1hZ2VzIGluIFJpY2h0ZXh0LUZpZWxkcyBvZiBjb250ZW50IGFuZCBwb3J0bGV0cyBoYXZlIGNoYW5nZXMgc2luY2UgUGxvbmUgNC5cbiAgdGhlIHZpZXcgYGAvQEBmaXhfaHRtbGBgIGFsbG93cyB5b3UgdG8gZml4IHRoZXNlLlxuXG5cbkNvbnRyb2wgY3JlYXRpbmcgaW1wb3J0ZWQgY29udGVudFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbllvdSBjYW4gY2hvb3NlIGJldHdlZW4gZm91ciBvcHRpb25zIGhvdyB0byBkZWFsIHdpdGggY29udGVudCB0aGF0IGFscmVhZHkgZXhpc3RzOlxuXG4gICogU2tpcDogRG9uJ3QgaW1wb3J0IGF0IGFsbFxuICAqIFJlcGxhY2U6IERlbGV0ZSBpdGVtIGFuZCBjcmVhdGUgbmV3XG4gICogVXBkYXRlOiBSZXVzZSBhbmQgb25seSBvdmVyd3JpdGUgaW1wb3J0ZWQgZGF0YVxuICAqIElnbm9yZTogQ3JlYXRlIHdpdGggYSBuZXcgaWRcblxuSW1wb3J0ZWQgY29udGVudCBpcyBpbml0aWFsbHkgY3JlYXRlZCB3aXRoIGBgaW52b2tlRmFjdG9yeWBgIHVzaW5nIHBvcnRhbF90eXBlIGFuZCBpZCBvZiB0aGUgZXhwb3J0ZWQgaXRlbSBiZWZvcmUgZGVzZXJpYWxpbmcgdGhlIHJlc3Qgb2YgdGhlIGRhdGEuXG5Zb3UgY2FuIHNldCBhZGRpdGlvbmFsIHZhbHVlcyBieSBzcGVjaWZ5aW5nIGEgZGljdCBgYGZhY3Rvcnlfa3dhcmdzYGAgdGhhdCB3aWxsIGJlIHBhc3NlZCB0byB0aGUgZmFjb3J5LlxuTGlrZSB0aGlzIHlvdSBjYW4gc2V0IHZhbHVlcyBvbiB0aGUgaW1wb3J0ZWQgb2JqZWN0IHRoYXQgYXJlIGV4cGVjdGVkIHRvIGJlIHRoZXJlIGJ5IHN1YnNjcmliZXJzIHRvIElPYmplY3RBZGRlZEV2ZW50LlxuXG5cbkV4cG9ydCB2ZXJzaW9uZWQgY29udGVudFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkV4cG9ydGluZyB2ZXJzaW9ucyBvZiBBcmNoZXR5cGVzIGNvbnRlbnQgd2lsbCBub3Qgd29yayBiZWNhdXNlIG9mIGEgYnVnIGluIHBsb25lLnJlc3RhcGkgKGh0dHBzOi8vZ2l0aHViLmNvbS9wbG9uZS9wbG9uZS5yZXN0YXBpL2lzc3Vlcy8xMzM1KS5cbkZvciBleHBvcnQgdG8gd29yayB5b3UgbmVlZCB0byB1c2UgYSB2ZXJzaW9uIGJldHdlZW4gNy43LjAgYW5kIDguMC4wIChpZiByZWxlYXNlZCkgb3IgYSBzb3VyY2UtY2hlY2tvdXQgb2YgdGhlIGJyYW5jaCA3LngueC5cblxuXG5Ob3RlcyBvbiBzcGVlZCBhbmQgbGFyZ2UgbWlncmF0aW9uc1xuPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuRXhwb3J0aW5nIGFuZCBpbXBvcnRpbmcgbGFyZ2UgYW1vdW50cyBvZiBjb250ZW50IGNhbiB0YWtlIGEgd2hpbGUuIEV4cG9ydCBpcyBwcmV0dHkgZmFzdCBidXQgaW1wb3J0IGlzIGNvbnN0cmFpbmVkIGJ5IHNvbWUgZmVhdHVyZXMgb2YgUGxvbmUsIG1vc3QgaW1wb3J0YW50bHkgdmVyc2lvbmluZzpcblxuKiBJbXBvcnRpbmcgNTAwMCBGb2xkZXJzIHRha2VzIH41IG1pbnV0ZXNcbiogSW1wb3J0aW5nIDUwMDAgRG9jdW1lbnRzIHRha2VzID4yNSBtaW51dGVzIGJlY2F1c2Ugb2YgdmVyc2lvbmluZy5cbiogSW1wb3J0aW5nIDUwMDAgRG9jdW1lbnRzIHdpdGhvdXQgdmVyc2lvbmluZyB0YWtlcyB+NyBtaW51dGVzLlxuXG5EdXJpbmcgaW1wb3J0IHlvdSBjYW4gY29tbWl0IGV2ZXJ5IHggbnVtYmVyIG9mIGl0ZW1zIHdoaWNoIHdpbGwgZnJlZSB1cCBtZW1vcnkgYW5kIGRpc2stc3BhY2UgaW4geW91ciBUTVBESVIgKHdoZXJlIGJsb2JzIGFyZSBhZGRlZCBiZWZvcmUgZWFjaCBjb21taXQpLlxuXG5XaGVuIGV4cG9ydGluZyBsYXJnZSBudW1iZXJzIG9mIGJsb2JzIChiaW5hcnkgZmlsZXMgYW5kIGltYWdlcykgeW91IHdpbGwgZ2V0IGh1Z2UganNvbi1maWxlcyBhbmQgbWF5IHJ1biBvdXQgb2YgbWVtb3J5LlxuWW91IGhhdmUgdmFyaW91cyBvcHRpb25zIHRvIGRlYWwgd2l0aCB0aGlzLlxuVGhlIGJlc3Qgd2F5IGRlcGVuZHMgb24gaG93IHlvdSBhcmUgZ29pbmcgdG8gaW1wb3J0IHRoZSBibG9iczpcblxuLSBFeHBvcnQgYXMgZG93bmxvYWQgdXJsczogc21hbGwgZG93bmxvYWQsIGJ1dCBgYGNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0YGAgY2Fubm90IGltcG9ydCB0aGUgYmxvYnMsIHNvIHlvdSB3aWxsIG5lZWQgYW4gb3duIGltcG9ydCBzY3JpcHQgdG8gZG93bmxvYWQgdGhlbS5cbi0gRXhwb3J0IGFzIGJhc2UtNjQgZW5jb2RlZCBzdHJpbmdzOiBsYXJnZSBkb3dubG9hZCwgYnV0IGBgY29sbGVjdGl2ZS5leHBvcnRpbXBvcnRgYCBjYW4gaGFuZGxlIHRoZSBpbXBvcnQuXG4tIEV4cG9ydCBhcyBibG9iIHBhdGhzOiBzbWFsbCBkb3dubG9hZCBhbmQgYGBjb2xsZWN0aXZlLmV4cG9ydGltcG9ydGBgIGNhbiBoYW5kbGUgdGhlIGltcG9ydCwgYnV0IHlvdSBuZWVkIHRvIGNvcHkgYGB2YXIvYmxvYnN0b3JhZ2VgYCB0byB0aGUgUGxvbmUgU2l0ZSB3aGVyZSB5b3UgZG8gdGhlIGltcG9ydCBvciBzZXQgdGhlIGVudmlyb25tZW50IHZhcmlhYmxlIGBgQ09MTEVDVElWRV9FWFBPUlRJTVBPUlRfQkxPQl9IT01FYGAgdG8gdGhlIG9sZCBibG9ic3RvcmFnZSBwYXRoOiBgYGV4cG9ydCBDT0xMRUNUSVZFX0VYUE9SVElNUE9SVF9CTE9CX0hPTUU9L3BhdGgtdG8tb2xkLWluc3RhbmNlL3Zhci9ibG9ic3RvcmFnZWBgLlxuICBUbyBleHBvcnQgdGhlIGJsb2ItcGF0aCB5b3UgZG8gbm90IG5lZWQgdG8gaGF2ZSBhY2Nlc3MgdG8gdGhlIGJsb2JzIVxuXG5cbkN1c3RvbWl6ZSBleHBvcnQgYW5kIGltcG9ydFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cblRoaXMgYWRkb24gaXMgZGVzaWduZWQgdG8gYmUgYWRhcHRlZCB0byB5b3VyIHJlcXVpcmVtZW50cyBhbmQgaGFzIG11bHRpcGxlIGhvb2tzIHRvIG1ha2UgdGhhdCBlYXN5LlxuXG5UbyBtYWtlIHRoYXQgZWFzaWVyIGhlcmUgYXJlIHBhY2thZ2VzIHlvdSBjYW4gcmV1c2UgdG8gb3ZlcnJpZGUgYW5kIGV4dGVuZCB0aGUgZXhwb3J0IGFuZCBpbXBvcnQuXG5Vc2UgdGhlc2UgdGVtcGxhdGVzIGFuZCBhZGFwdCB0aGVtIHRvIHlvdXIgb3duIHByb2plY3RzOlxuXG4qIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFyemVsL2NvbnRlbnRleHBvcnRcbiogaHR0cHM6Ly9naXRodWIuY29tL3N0YXJ6ZWwvY29udGVudGltcG9ydFxuXG5NYW55IGV4YW1wbGVzIGZvciBjdXN0b21pemluZyB0aGUgZXhwb3J0IGFuZCBpbXBvcnQgYXJlIGNvbGxlY3RlZCBpbiB0aGUgY2hhcHRlciBcIkZBUSwgVGlwcyBhbmQgVHJpY2tzXCIgYmVsb3cuXG5cbi4uIG5vdGU6OlxuXG4gICAgQXMgYSBydWxlIG9mIHRodW1iIHlvdSBzaG91bGQgbWFrZSBjaGFuZ2VzIHRvIHRoZSBkYXRhIGR1cmluZyBpbXBvcnQgdW5sZXNzIHlvdSBuZWVkIGFjY2VzcyB0byB0aGUgb3JpZ2luYWwgb2JqZWN0IGZvciB0aGUgcmVxdWlyZWQgY2hhbmdlcy5cbiAgICBPbmUgcmVhc29uIGlzIHRoYXQgdGhpcyB3YXkgdGhlIHNlcmlhbGl6ZWQgY29udGVudCBpbiB0aGUganNvbi1maWxlIG1vcmUgY2xvc2VseSByZXByZXNlbnRzIHRoZSBvcmlnaW5hbCBkYXRhLlxuICAgIEFub3RoZXIgcmVhc29uIGlzIHRoYXQgaXQgYWxsb3dzIHlvdSB0byBmaXggaXNzdWVzIGR1cmluZyB0aGUgcHJvY2VzcyB5b3UgYXJlIGN1cnJlbnRseSBkZXZlbG9waW5nIChpLmUuIHdpdGhvdXQgaGF2aW5nIHRvIHJlZG8gdGhlIGV4cG9ydCkuXG5cblxuRXhwb3J0IEV4YW1wbGVcbi0tLS0tLS0tLS0tLS0tXG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuZXhwb3J0X2NvbnRlbnQgaW1wb3J0IEV4cG9ydENvbnRlbnRcblxuICAgIGNsYXNzIEN1c3RvbUV4cG9ydENvbnRlbnQoRXhwb3J0Q29udGVudCk6XG5cbiAgICAgICAgUVVFUlkgPSB7XG4gICAgICAgICAgICAnRG9jdW1lbnQnOiB7J3Jldmlld19zdGF0ZSc6IFsncHVibGlzaGVkJywgJ3BlbmRpbmcnXX0sXG4gICAgICAgIH1cblxuICAgICAgICBEUk9QX1BBVEhTID0gW1xuICAgICAgICAgICAgJy9QbG9uZS91c2VycG9ydGFsJyxcbiAgICAgICAgICAgICcvUGxvbmUvZW4vb2Jzb2xldGVfY29udGVudCcsXG4gICAgICAgIF1cblxuICAgICAgICBEUk9QX1VJRFMgPSBbXG4gICAgICAgICAgICAnNzFlM2UwYTZmMDY5NDJmZWEzNjUzNmZiZWQwZjZjNDInLFxuICAgICAgICBdXG5cbiAgICAgICAgZGVmIHVwZGF0ZShzZWxmKTpcbiAgICAgICAgICAgIFwiXCJcIlVzZSB0aGlzIHRvIG92ZXJyaWRlIHN0dWZmIGJlZm9yZSB0aGUgZXhwb3J0IHN0YXJ0c1xuICAgICAgICAgICAgKGUuZy4gZm9yY2UgYSBzcGVjaWZpYyBsYW5ndWFnZSBpbiB0aGUgcmVxdWVzdCkuXCJcIlwiXG5cbiAgICAgICAgZGVmIHN0YXJ0KHNlbGYpOlxuICAgICAgICAgICAgXCJcIlwiSG9vayB0byBkbyBzb21ldGhpbmcgYmVmb3JlIGV4cG9ydC5cIlwiXCJcblxuICAgICAgICBkZWYgZmluaXNoKHNlbGYpOlxuICAgICAgICAgICAgXCJcIlwiSG9vayB0byBkbyBzb21ldGhpbmcgYWZ0ZXIgZXhwb3J0LlwiXCJcIlxuXG4gICAgICAgIGRlZiBnbG9iYWxfb2JqX2hvb2soc2VsZiwgb2JqKTpcbiAgICAgICAgICAgIFwiXCJcIkluc3BlY3QgdGhlIGNvbnRlbnQgaXRlbSBiZWZvcmUgc2VyaWFsaXNhdGlvbiBkYXRhLlxuICAgICAgICAgICAgQmFkOiBDaGFuZ2luZyB0aGUgY29udGVudC1pdGVtIGlzIGEgaG9ycmlibGUgaWRlYS5cbiAgICAgICAgICAgIEdvb2Q6IFJldHVybiBOb25lIGlmIHlvdSB3YW50IHRvIHNraXAgdGhpcyBwYXJ0aWN1bGFyIG9iamVjdC5cbiAgICAgICAgICAgIFwiXCJcIlxuICAgICAgICAgICAgcmV0dXJuIG9ialxuXG4gICAgICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgICAgICBcIlwiXCJVc2UgdGhpcyB0byBtb2RpZnkgb3Igc2tpcCB0aGUgc2VyaWFsaXplZCBkYXRhLlxuICAgICAgICAgICAgUmV0dXJuIE5vbmUgaWYgeW91IHdhbnQgdG8gc2tpcCB0aGlzIHBhcnRpY3VsYXIgb2JqZWN0LlxuICAgICAgICAgICAgXCJcIlwiXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgICAgIGRlZiBkaWN0X2hvb2tfZG9jdW1lbnQoc2VsZiwgaXRlbSwgb2JqKTpcbiAgICAgICAgICAgIFwiXCJcIlVzZSB0aGlzIHRvIG1vZGlmeSBvciBza2lwIHRoZSBzZXJpYWxpemVkIGRhdGEgYnkgdHlwZS5cbiAgICAgICAgICAgIFJldHVybiB0aGUgbW9kaWZpZWQgZGljdCAoaXRlbSkgb3IgTm9uZSBpZiB5b3Ugd2FudCB0byBza2lwIHRoaXMgcGFydGljdWxhciBvYmplY3QuXG4gICAgICAgICAgICBcIlwiXCJcbiAgICAgICAgICAgIHJldHVybiBpdGVtXG5cblxuUmVnaXN0ZXIgaXQgd2l0aCB5b3VyIG93biBicm93c2VybGF5ZXIgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQ6XG5cbi4uIGNvZGUtYmxvY2s6OiB4bWxcblxuICA8YnJvd3NlcjpwYWdlXG4gICAgICBuYW1lPVwiZXhwb3J0X2NvbnRlbnRcIlxuICAgICAgZm9yPVwiem9wZS5pbnRlcmZhY2UuSW50ZXJmYWNlXCJcbiAgICAgIGNsYXNzPVwiLmN1c3RvbV9leHBvcnQuQ3VzdG9tRXhwb3J0Q29udGVudFwiXG4gICAgICBsYXllcj1cIk15LkN1c3RvbS5JQnJvd3NlcmxheWVyXCJcbiAgICAgIHBlcm1pc3Npb249XCJjbWYuTWFuYWdlUG9ydGFsXCJcbiAgICAgIC8+XG5cblxuSW1wb3J0IEV4YW1wbGVcbi0tLS0tLS0tLS0tLS0tXG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuaW1wb3J0X2NvbnRlbnQgaW1wb3J0IEltcG9ydENvbnRlbnRcblxuICAgIGNsYXNzIEN1c3RvbUltcG9ydENvbnRlbnQoSW1wb3J0Q29udGVudCk6XG5cbiAgICAgICAgQ09OVEFJTkVSID0geydFdmVudCc6ICcvaW1wb3J0ZWQtZXZlbnRzJ31cblxuICAgICAgICAjIFRoZXNlIGZpZWxkcyB3aWxsIGJlIGlnbm9yZWRcbiAgICAgICAgRFJPUF9GSUVMRFMgPSBbJ3JlbGF0ZWRJdGVtcyddXG5cbiAgICAgICAgIyBJdGVtcyB3aXRoIHRoZXNlIHVpZCB3aWxsIGJlIGlnbm9yZWRcbiAgICAgICAgRFJPUF9VSURTID0gWycwNGQxNDc3NTgzYzc0NTUyYTdmY2Q4MWE5MDg1YzYyMCddXG5cbiAgICAgICAgIyBUaGVzZSBwYXRocyB3aWxsIGJlIGlnbm9yZWRcbiAgICAgICAgRFJPUF9QQVRIUyA9IFsnL1Bsb25lL2Rvb3JtYXQvJywgJy9QbG9uZS9pbXBvcnRfZmlsZXMvJ11cblxuICAgICAgICAjIERlZmF1bHQgdmFsdWVzIGZvciBzb21lIGZpZWxkc1xuICAgICAgICBERUZBVUxUUyA9IHsnd2hpY2hfcHJpY2UnOiAnbm9ybWFsJ31cblxuICAgICAgICBkZWYgc3RhcnQoc2VsZik6XG4gICAgICAgICAgICBcIlwiXCJIb29rIHRvIGRvIHNvbWV0aGluZyBiZWZvcmUgaW1wb3J0aW5nIG9uZSBmaWxlLlwiXCJcIlxuXG4gICAgICAgIGRlZiBmaW5pc2goc2VsZik6XG4gICAgICAgICAgICBcIlwiXCJIb29rIHRvIGRvIHNvbWV0aGluZyBhZnRlciBpbXBvcnRpbmcgb25lIGZpbGUuXCJcIlwiXG5cbiAgICAgICAgZGVmIGdsb2JhbF9kaWN0X2hvb2soc2VsZiwgaXRlbSk6XG4gICAgICAgICAgICBpZiBpc2luc3RhbmNlKGl0ZW0uZ2V0KCdkZXNjcmlwdGlvbicsIE5vbmUpLCBkaWN0KTpcbiAgICAgICAgICAgICAgICBpdGVtWydkZXNjcmlwdGlvbiddID0gaXRlbVsnZGVzY3JpcHRpb24nXVsnZGF0YSddXG4gICAgICAgICAgICBpZiBpc2luc3RhbmNlKGl0ZW0uZ2V0KCdyaWdodHMnLCBOb25lKSwgZGljdCk6XG4gICAgICAgICAgICAgICAgaXRlbVsncmlnaHRzJ10gPSBpdGVtWydyaWdodHMnXVsnZGF0YSddXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgICAgIGRlZiBkaWN0X2hvb2tfY3VzdG9tdHlwZShzZWxmLCBpdGVtKTpcbiAgICAgICAgICAgICMgY2hhbmdlIHRoZSB0eXBlXG4gICAgICAgICAgICBpdGVtWydAdHlwZSddID0gJ2Fub3RoZXJ0eXBlJ1xuICAgICAgICAgICAgIyBkcm9wIGEgZmllbGRcbiAgICAgICAgICAgIGl0ZW0ucG9wKCdleHBlcmllbmNlcycsIE5vbmUpXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgICAgIGRlZiBoYW5kbGVfZmlsZV9jb250YWluZXIoc2VsZiwgaXRlbSk6XG4gICAgICAgICAgICBcIlwiXCJVc2UgdGhpcyB0byBzcGVjaWZ5IHRoZSBjb250YWluZXIgaW4gd2hpY2ggdG8gY3JlYXRlIHRoZSBpdGVtIGluLlxuICAgICAgICAgICAgUmV0dXJuIHRoZSBjb250YWluZXIgZm9yIHRoaXMgcGFydGljdWxhciBvYmplY3QuXG4gICAgICAgICAgICBcIlwiXCJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm4gc2VsZi5wb3J0YWxbJ2ltcG9ydGVkX2ZpbGVzJ11cblxuUmVnaXN0ZXIgaXQ6XG5cbi4uIGNvZGUtYmxvY2s6OiB4bWxcblxuICA8YnJvd3NlcjpwYWdlXG4gICAgICBuYW1lPVwiaW1wb3J0X2NvbnRlbnRcIlxuICAgICAgZm9yPVwiem9wZS5pbnRlcmZhY2UuSW50ZXJmYWNlXCJcbiAgICAgIGNsYXNzPVwiLmN1c3RvbV9pbXBvcnQuQ3VzdG9tSW1wb3J0Q29udGVudFwiXG4gICAgICBsYXllcj1cIk15LkN1c3RvbS5JQnJvd3NlcmxheWVyXCJcbiAgICAgIHBlcm1pc3Npb249XCJjbWYuTWFuYWdlUG9ydGFsXCJcbiAgICAgIC8+XG5cblxuQXV0b21hdGUgZXhwb3J0IGFuZCBpbXBvcnRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblJ1biBhbGwgZXhwb3J0cyBhbmQgc2F2ZSBhbGwgZGF0YSBpbiBgYHZhci9pbnN0YW5jZS9gYDpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBwbG9uZSBpbXBvcnQgYXBpXG4gICAgZnJvbSBQcm9kdWN0cy5GaXZlIGltcG9ydCBCcm93c2VyVmlld1xuXG4gICAgY2xhc3MgRXhwb3J0QWxsKEJyb3dzZXJWaWV3KTpcblxuICAgICAgICBkZWYgX19jYWxsX18oc2VsZik6XG4gICAgICAgICAgICBleHBvcnRfY29udGVudCA9IGFwaS5jb250ZW50LmdldF92aWV3KFwiZXhwb3J0X2NvbnRlbnRcIiwgc2VsZi5jb250ZXh0LCBzZWxmLnJlcXVlc3QpXG4gICAgICAgICAgICBzZWxmLnJlcXVlc3QuZm9ybVtcImZvcm0uc3VibWl0dGVkXCJdID0gVHJ1ZVxuICAgICAgICAgICAgZXhwb3J0X2NvbnRlbnQoXG4gICAgICAgICAgICAgICAgcG9ydGFsX3R5cGU9W1wiRm9sZGVyXCIsIFwiRG9jdW1lbnRcIiwgXCJOZXdzIEl0ZW1cIiwgXCJGaWxlXCIsIFwiSW1hZ2VcIl0sICAjIG9ubHkgZXhwb3J0IHRoZXNlXG4gICAgICAgICAgICAgICAgaW5jbHVkZV9ibG9icz0yLCAgIyBFeHBvcnQgZmlsZXMgYW5kIGltYWdlcyBhcyBibG9iIHBhdGhzXG4gICAgICAgICAgICAgICAgZG93bmxvYWRfdG9fc2VydmVyPVRydWUpXG5cbiAgICAgICAgICAgIG90aGVyX2V4cG9ydHMgPSBbXG4gICAgICAgICAgICAgICAgXCJleHBvcnRfcmVsYXRpb25zXCIsXG4gICAgICAgICAgICAgICAgXCJleHBvcnRfbWVtYmVyc1wiLFxuICAgICAgICAgICAgICAgIFwiZXhwb3J0X3RyYW5zbGF0aW9uc1wiLFxuICAgICAgICAgICAgICAgIFwiZXhwb3J0X2xvY2Fscm9sZXNcIixcbiAgICAgICAgICAgICAgICBcImV4cG9ydF9vcmRlcmluZ1wiLFxuICAgICAgICAgICAgICAgIFwiZXhwb3J0X2RlZmF1bHRwYWdlc1wiLFxuICAgICAgICAgICAgICAgIFwiZXhwb3J0X2Rpc2N1c3Npb25cIixcbiAgICAgICAgICAgICAgICBcImV4cG9ydF9wb3J0bGV0c1wiLFxuICAgICAgICAgICAgICAgIFwiZXhwb3J0X3JlZGlyZWN0c1wiLFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgZm9yIG5hbWUgaW4gb3RoZXJfZXhwb3J0czpcbiAgICAgICAgICAgICAgICB2aWV3ID0gYXBpLmNvbnRlbnQuZ2V0X3ZpZXcobmFtZSwgcG9ydGFsLCByZXF1ZXN0KVxuICAgICAgICAgICAgICAgICMgVGhpcyBzYXZlcyBlYWNoIGV4cG9ydCBpbiB2YXIvaW5zdGFuY2UvZXhwb3J0X3h4eC5qc29uXG4gICAgICAgICAgICAgICAgdmlldyhkb3dubG9hZF90b19zZXJ2ZXI9VHJ1ZSlcblxuICAgICAgICAgICAgIyBJbXBvcnRhbnQhIFJlZGlyZWN0IHRvIHByZXZlbnQgaW5maW5pdGUgZXhwb3J0IGxvb3AgOilcbiAgICAgICAgICAgIHJldHVybiBzZWxmLnJlcXVlc3QucmVzcG9uc2UucmVkaXJlY3Qoc2VsZi5jb250ZXh0LmFic29sdXRlX3VybCgpKVxuXG5SdW4gYWxsIGltcG9ydHMgdXNpbmcgdGhlIGRhdGEgZXhwb3J0ZWQgaW4gdGhlIGV4YW1wbGUgYWJvdmU6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuZml4X2h0bWwgaW1wb3J0IGZpeF9odG1sX2luX2NvbnRlbnRfZmllbGRzXG4gICAgZnJvbSBjb2xsZWN0aXZlLmV4cG9ydGltcG9ydC5maXhfaHRtbCBpbXBvcnQgZml4X2h0bWxfaW5fcG9ydGxldHNcbiAgICBmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGhcbiAgICBmcm9tIHBsb25lIGltcG9ydCBhcGlcbiAgICBmcm9tIFByb2R1Y3RzLkZpdmUgaW1wb3J0IEJyb3dzZXJWaWV3XG5cblxuICAgIGNsYXNzIEltcG9ydEFsbChCcm93c2VyVmlldyk6XG5cbiAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYpOlxuICAgICAgICAgICAgcG9ydGFsID0gYXBpLnBvcnRhbC5nZXQoKVxuXG4gICAgICAgICAgICAjIEltcG9ydCBjb250ZW50XG4gICAgICAgICAgICB2aWV3ID0gYXBpLmNvbnRlbnQuZ2V0X3ZpZXcoXCJpbXBvcnRfY29udGVudFwiLCBwb3J0YWwsIHJlcXVlc3QpXG4gICAgICAgICAgICByZXF1ZXN0LmZvcm1bXCJmb3JtLnN1Ym1pdHRlZFwiXSA9IFRydWVcbiAgICAgICAgICAgIHJlcXVlc3QuZm9ybVtcImNvbW1pdFwiXSA9IDUwMFxuICAgICAgICAgICAgdmlldyhzZXJ2ZXJfZmlsZT1cIlBsb25lLmpzb25cIiwgcmV0dXJuX2pzb249VHJ1ZSlcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgICMgUnVuIGFsbCBvdGhlciBpbXBvcnRzXG4gICAgICAgICAgICBvdGhlcl9pbXBvcnRzID0gW1xuICAgICAgICAgICAgICAgIFwicmVsYXRpb25zXCIsXG4gICAgICAgICAgICAgICAgXCJtZW1iZXJzXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2xhdGlvbnNcIixcbiAgICAgICAgICAgICAgICBcImxvY2Fscm9sZXNcIixcbiAgICAgICAgICAgICAgICBcIm9yZGVyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0cGFnZXNcIixcbiAgICAgICAgICAgICAgICBcImRpc2N1c3Npb25cIixcbiAgICAgICAgICAgICAgICBcInBvcnRsZXRzXCIsXG4gICAgICAgICAgICAgICAgXCJyZWRpcmVjdHNcIixcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIGNmZyA9IGdldENvbmZpZ3VyYXRpb24oKVxuICAgICAgICAgICAgZGlyZWN0b3J5ID0gUGF0aChjZmcuY2xpZW50aG9tZSkgLyBcImltcG9ydFwiXG4gICAgICAgICAgICBmb3IgbmFtZSBpbiBvdGhlcl9pbXBvcnRzOlxuICAgICAgICAgICAgICAgIHZpZXcgPSBhcGkuY29udGVudC5nZXRfdmlldyhmXCJpbXBvcnRfe25hbWV9XCIsIHBvcnRhbCwgcmVxdWVzdClcbiAgICAgICAgICAgICAgICBwYXRoID0gUGF0aChkaXJlY3RvcnkpIC8gZlwiZXhwb3J0X3tuYW1lfS5qc29uXCJcbiAgICAgICAgICAgICAgICByZXN1bHRzID0gdmlldyhqc29uZmlsZT1wYXRoLnJlYWRfdGV4dCgpLCByZXR1cm5fanNvbj1UcnVlKVxuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHJlc3VsdHMpXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0KClcblxuICAgICAgICAgICAgIyBSdW4gY2xlYW51cCBzdGVwc1xuICAgICAgICAgICAgcmVzdWx0cyA9IGZpeF9odG1sX2luX2NvbnRlbnRfZmllbGRzKClcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiRml4ZWQgaHRtbCBmb3IgJXMgY29udGVudCBpdGVtc1wiLCByZXN1bHRzKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0KClcblxuICAgICAgICAgICAgcmVzdWx0cyA9IGZpeF9odG1sX2luX3BvcnRsZXRzKClcbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiRml4ZWQgaHRtbCBmb3IgJXMgcG9ydGxldHNcIiwgcmVzdWx0cylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgIHJlc2V0X2RhdGVzID0gYXBpLmNvbnRlbnQuZ2V0X3ZpZXcoXCJyZXNldF9kYXRlc1wiLCBwb3J0YWwsIHJlcXVlc3QpXG4gICAgICAgICAgICByZXNldF9kYXRlcygpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jb21taXQoKVxuXG4uLiBub3RlOjpcblxuICAgIFRoZSB2aWV3cyBgYEBAZXhwb3J0X2FsbGBgIGFuZCBgYEBAaW1wb3J0X2FsbGBgIGFyZSBhbHNvIGNvbnRhaW5lZCBpbiB0aGUgaGVscGVyLXBhY2thZ2VzIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFyemVsL2NvbnRlbnRleHBvcnQgYW5kIGh0dHBzOi8vZ2l0aHViLmNvbS9zdGFyemVsL2NvbnRlbnRpbXBvcnRcblxuRkFRLCBUaXBzIGFuZCBUcmlja3Ncbj09PT09PT09PT09PT09PT09PT09XG5cblRoaXMgc2VjdGlvbiBjb3ZlcnMgZnJlcXVlbnQgdXNlLWNhc2VzIGFuZCBleGFtcGxlcyBmb3IgZmVhdHVyZXMgdGhhdCBhcmUgbm90IHJlcXVpcmVkIGZvciBhbGwgbWlncmF0aW9ucy5cblxuVXNpbmcgZ2xvYmFsX29ial9ob29rIGR1cmluZyBleHBvcnRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblVzaW5nIGBgZ2xvYmFsX29ial9ob29rYGAgZHVyaW5nIGV4cG9ydCB0byBpbnNwZWN0IGNvbnRlbnQgYW5kIGRlY2lkZSB0byBza2lwIGl0LlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBkZWYgZ2xvYmFsX29ial9ob29rKHNlbGYsIG9iaik6XG4gICAgICAgICMgRHJvcCBzdWJ0b3BpY3NcbiAgICAgICAgaWYgb2JqLnBvcnRhbF90eXBlID09IFwiVG9waWNcIiBhbmQgb2JqLl9fcGFyZW50X18ucG9ydGFsX3R5cGUgPT0gXCJUb3BpY1wiOlxuICAgICAgICAgICAgcmV0dXJuXG5cbiAgICAgICAgIyBEcm9wIGZpbGVzIGFuZCBpbWFnZXMgZnJvbSBQRkcgZm9ybWZvbGRlcnNcbiAgICAgICAgaWYgb2JqLl9fcGFyZW50X18ucG9ydGFsX3R5cGUgPT0gXCJGb3JtRm9sZGVyXCI6XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgcmV0dXJuIG9ialxuXG5cblVzaW5nIGRpY3QtaG9va3MgZHVyaW5nIGV4cG9ydFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cblVzZSBgYGdsb2JhbF9kaWN0X2hvb2tgYCBkdXJpbmcgZXhwb3J0IHRvIGluc3BlY3QgY29udGVudCBhbmQgbW9kaWZ5IHRoZSBzZXJpYWxpemVkIGpzb24uXG5Zb3UgY2FuIGFsc28gdXNlIGBgZGljdF9ob29rXzxzb21lY29udGVudHR5cGU+YGAgdG8gYmV0dGVyIHN0cnVjdHVyZSB5b3VyIGNvZGUgZm9yIHJlYWRhYmlsaXR5LlxuXG5Tb21ldGltZXMgeW91IG5lZWQgdG8gaGFuZGxlIGRhdGEgdGhhdCB5b3UgYWRkIGluIGBgZ2xvYmFsX2RpY3RfaG9va2BgIGR1cmluZyBleHBvcnQgaW4gY29ycmVzcG9uZGluZyBjb2RlIGluIGBgZ2xvYmFsX29iamVjdF9ob29rYGAgZHVyaW5nIGltcG9ydC5cblxuVGhlIGZvbGxvd2luZyBleGFtcGxlIGFib3V0IHBsYWNlZnVsIHdvcmtmbG93IHBvbGljeSBpcyBhIHBlcmZlY3QgZXhhbXBsZSBmb3IgdGhhdCBwYXR0ZXJuOlxuXG5cbkV4cG9ydC9JbXBvcnQgcGxhY2VmdWwgd29ya2Zsb3cgcG9saWN5XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5FeHBvcnQ6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgIGlmIG9iai5pc1ByaW5jaXBpYUZvbGRlcmlzaCBhbmQgXCIud2ZfcG9saWN5X2NvbmZpZ1wiIGluIG9iai5rZXlzKCk6XG4gICAgICAgICAgICB3Zl9wb2xpY3kgPSBvYmpbXCIud2ZfcG9saWN5X2NvbmZpZ1wiXVxuICAgICAgICAgICAgaXRlbVtcImV4cG9ydGltcG9ydC53b3JrZmxvd19wb2xpY3lcIl0gPSB7XG4gICAgICAgICAgICAgICAgXCJ3b3JrZmxvd19wb2xpY3lfYmVsb3dcIjogd2ZfcG9saWN5LndvcmtmbG93X3BvbGljeV9iZWxvdyxcbiAgICAgICAgICAgICAgICBcIndvcmtmbG93X3BvbGljeV9pblwiOiB3Zl9wb2xpY3kud29ya2Zsb3dfcG9saWN5X2luLFxuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gaXRlbVxuXG5JbXBvcnQ6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiBnbG9iYWxfb2JqX2hvb2soc2VsZiwgb2JqLCBpdGVtKTpcbiAgICAgICAgd2ZfcG9saWN5ID0gaXRlbS5nZXQoXCJleHBvcnRpbXBvcnQud29ya2Zsb3dfcG9saWN5XCIpXG4gICAgICAgIGlmIHdmX3BvbGljeTpcbiAgICAgICAgICAgIG9iai5tYW5hZ2VfYWRkUHJvZHVjdFtcIkNNRlBsYWNlZnVsV29ya2Zsb3dcIl0ubWFuYWdlX2FkZFdvcmtmbG93UG9saWN5Q29uZmlnKClcbiAgICAgICAgICAgIHdmX3BvbGljeV9jb25maWcgPSBvYmpbXCIud2ZfcG9saWN5X2NvbmZpZ1wiXVxuICAgICAgICAgICAgd2ZfcG9saWN5X2NvbmZpZy5zZXRQb2xpY3lJbih3Zl9wb2xpY3lbXCJ3b3JrZmxvd19wb2xpY3lfaW5cIl0sIHVwZGF0ZV9zZWN1cml0eT1UcnVlKVxuICAgICAgICAgICAgd2ZfcG9saWN5X2NvbmZpZy5zZXRQb2xpY3lCZWxvdyh3Zl9wb2xpY3lbXCJ3b3JrZmxvd19wb2xpY3lfYmVsb3dcIl0sIHVwZGF0ZV9zZWN1cml0eT1UcnVlKVxuXG5cblVzaW5nIGRpY3QtaG9va3MgZHVyaW5nIGltcG9ydFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbkEgbG90IG9mIGZpeGVzIGNhbiBiZSBkb25lIGR1cmluZyBpbXBvcnQgdXNpbmcgdGhlIGBgZ2xvYmFsX2RpY3RfaG9va2BgIG9yIGBgZGljdF9ob29rXzxjb250ZW50dHlwZT5gYC5cblxuSGVyZSB3ZSBwcmV2ZW50IHRoZSBleHBpcmUtZGF0ZSB0byBiZSBiZWZvcmUgdGhlIGVmZmVjdGl2ZSBkYXRlIHNpbmNlIHRoYXQgd291bGQgbGVhZCB0byB2YWxpZGF0aW9uLWVycm9ycyBkdXJpbmcgZGVzZXJpYWxpemluZzpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZGVmIGdsb2JhbF9kaWN0X2hvb2soc2VsZiwgaXRlbSk6XG4gICAgICAgIGVmZmVjdGl2ZSA9IGl0ZW0uZ2V0KCdlZmZlY3RpdmUnLCBOb25lKVxuICAgICAgICBleHBpcmVzID0gaXRlbS5nZXQoJ2V4cGlyZXMnLCBOb25lKVxuICAgICAgICBpZiBlZmZlY3RpdmUgYW5kIGV4cGlyZXMgYW5kIGV4cGlyZXMgPD0gZWZmZWN0aXZlOlxuICAgICAgICAgICAgaXRlbS5wb3AoJ2V4cGlyZXMnKVxuICAgICAgICByZXR1cm4gaXRlbVxuXG5IZXJlIHdlIGRyb3AgZW1wdHkgbGluZXMgZnJvbSB0aGUgY3JlYXRvcnM6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0pOlxuICAgICAgICBpdGVtW1wiY3JlYXRvcnNcIl0gPSBbaSBmb3IgaSBpbiBpdGVtLmdldChcImNyZWF0b3JzXCIsIFtdKSBpZiBpXVxuICAgICAgICByZXR1cm4gaXRlbVxuXG5UaGlzIGV4YW1wbGUgbWlncmF0ZXMgYSBQbG9uZUhlbHBDZW50ZXIgdG8gYSBzaW1wbGUgZm9sZGVyL2RvY3VtZW50IHN0cnVjdHVyZSBkdXJpbmcgaW1wb3J0LlxuVGhlcmUgYXJlIGEgY291cGxlIG1vcmUgdHlwZXMgdG8gaGFuZGxlIChhcyBmb2xkZXIgb3IgZG9jdW1lbnQpIGJ1dCB5b3UgZ2V0IHRoZSBpZGVhLCBkb24ndCB5b3U/XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiBkaWN0X2hvb2tfaGVscGNlbnRlcihzZWxmLCBpdGVtKTpcbiAgICAgICAgaXRlbVtcIkB0eXBlXCJdID0gXCJGb2xkZXJcIlxuICAgICAgICBpdGVtW1wibGF5b3V0XCJdID0gXCJsaXN0aW5nX3ZpZXdcIlxuICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgZGVmIGRpY3RfaG9va19oZWxwY2VudGVyZ2xvc3Nhcnkoc2VsZiwgaXRlbSk6XG4gICAgICAgIGl0ZW1bXCJAdHlwZVwiXSA9IFwiRm9sZGVyXCJcbiAgICAgICAgaXRlbVtcImxheW91dFwiXSA9IFwibGlzdGluZ192aWV3XCJcbiAgICAgICAgcmV0dXJuIGl0ZW1cblxuICAgIGRlZiBkaWN0X2hvb2tfaGVscGNlbnRlcmluc3RydWN0aW9uYWx2aWRlbyhzZWxmLCBpdGVtKTpcbiAgICAgICAgaXRlbVtcIkB0eXBlXCJdID0gXCJGaWxlXCJcbiAgICAgICAgaWYgaXRlbS5nZXQoXCJ2aWRlb19maWxlXCIpOlxuICAgICAgICAgICAgaXRlbVtcImZpbGVcIl0gPSBpdGVtW1widmlkZW9fZmlsZVwiXVxuICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgZGVmIGRpY3RfaG9va19oZWxwY2VudGVybGluayhzZWxmLCBpdGVtKTpcbiAgICAgICAgaXRlbVtcIkB0eXBlXCJdID0gXCJMaW5rXCJcbiAgICAgICAgaXRlbVtcInJlbW90ZVVybFwiXSA9IGl0ZW0uZ2V0KFwidXJsXCIsIE5vbmUpXG4gICAgICAgIHJldHVybiBpdGVtXG5cbiAgICBkZWYgZGljdF9ob29rX2hlbHBjZW50ZXJyZWZlcmVuY2VtYW51YWxwYWdlKHNlbGYsIGl0ZW0pOlxuICAgICAgICBpdGVtW1wiQHR5cGVcIl0gPSBcIkRvY3VtZW50XCJcbiAgICAgICAgcmV0dXJuIGl0ZW1cblxuSWYgeW91IGNoYW5nZSB0eXBlcyBkdXJpbmcgaW1wb3J0IHlvdSBuZWVkIHRvIHRha2UgY2FyZSBvZiBvdGhlciBjYXNlcyB3aGVyZSB0eXBlcyBhcmUgcmVmZXJlbmNlZC5cXFxuRXhhbXBsZXMgYXJlIGNvbGxlY3Rpb24tcXVlcmllcyAoc2VlIFwiRml4aW5nIGludmFsaWQgY29sbGVjdGlvbiBxdWVyaWVzXCIgYmVsb3cpIG9yIGNvbnN0cmFpbnMgKHNlZSBoZXJlKTpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgUE9SVEFMX1RZUEVfTUFQUElORyA9IHtcbiAgICAgICAgXCJUb3BpY1wiOiBcIkNvbGxlY3Rpb25cIixcbiAgICAgICAgXCJGb3JtRm9sZGVyXCI6IFwiRWFzeUZvcm1cIixcbiAgICAgICAgXCJIZWxwQ2VudGVyXCI6IFwiRm9sZGVyXCIsXG4gICAgfVxuXG4gICAgZGVmIGdsb2JhbF9kaWN0X2hvb2soc2VsZiwgaXRlbSk6XG4gICAgICAgIGlmIGl0ZW0uZ2V0KFwiZXhwb3J0aW1wb3J0LmNvbnN0cmFpbnNcIik6XG4gICAgICAgICAgICB0eXBlc19maXhlZCA9IFtdXG4gICAgICAgICAgICBmb3IgcG9ydGFsX3R5cGUgaW4gaXRlbVtcImV4cG9ydGltcG9ydC5jb25zdHJhaW5zXCJdW1wibG9jYWxseV9hbGxvd2VkX3R5cGVzXCJdOlxuICAgICAgICAgICAgICAgIGlmIHBvcnRhbF90eXBlIGluIFBPUlRBTF9UWVBFX01BUFBJTkc6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVzX2ZpeGVkLmFwcGVuZChQT1JUQUxfVFlQRV9NQVBQSU5HW3BvcnRhbF90eXBlXSlcbiAgICAgICAgICAgICAgICBlbGlmIHBvcnRhbF90eXBlIGluIEFMTE9XRURfVFlQRVM6XG4gICAgICAgICAgICAgICAgICAgIHR5cGVzX2ZpeGVkLmFwcGVuZChwb3J0YWxfdHlwZSlcbiAgICAgICAgICAgIGl0ZW1bXCJleHBvcnRpbXBvcnQuY29uc3RyYWluc1wiXVtcImxvY2FsbHlfYWxsb3dlZF90eXBlc1wiXSA9IGxpc3Qoc2V0KHR5cGVzX2ZpeGVkKSlcblxuICAgICAgICAgICAgdHlwZXNfZml4ZWQgPSBbXVxuICAgICAgICAgICAgZm9yIHBvcnRhbF90eXBlIGluIGl0ZW1bXCJleHBvcnRpbXBvcnQuY29uc3RyYWluc1wiXVtcImltbWVkaWF0ZWx5X2FkZGFibGVfdHlwZXNcIl06XG4gICAgICAgICAgICAgICAgaWYgcG9ydGFsX3R5cGUgaW4gUE9SVEFMX1RZUEVfTUFQUElORzpcbiAgICAgICAgICAgICAgICAgICAgdHlwZXNfZml4ZWQuYXBwZW5kKFBPUlRBTF9UWVBFX01BUFBJTkdbcG9ydGFsX3R5cGVdKVxuICAgICAgICAgICAgICAgIGVsaWYgcG9ydGFsX3R5cGUgaW4gQUxMT1dFRF9UWVBFUzpcbiAgICAgICAgICAgICAgICAgICAgdHlwZXNfZml4ZWQuYXBwZW5kKHBvcnRhbF90eXBlKVxuICAgICAgICAgICAgaXRlbVtcImV4cG9ydGltcG9ydC5jb25zdHJhaW5zXCJdW1wiaW1tZWRpYXRlbHlfYWRkYWJsZV90eXBlc1wiXSA9IGxpc3Qoc2V0KHR5cGVzX2ZpeGVkKSlcbiAgICAgICAgcmV0dXJuIGl0ZW1cblxuXG5DaGFuZ2Ugd29ya2Zsb3dcbi0tLS0tLS0tLS0tLS0tLVxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBSRVZJRVdfU1RBVEVfTUFQUElORyA9IHtcbiAgICAgICAgXCJpbnRlcm5hbFwiOiBcInB1Ymxpc2hlZFwiLFxuICAgICAgICBcImludGVybmFsbHlfcHVibGlzaGVkXCI6IFwicHVibGlzaGVkXCIsXG4gICAgICAgIFwib2Jzb2xldGVcIjogXCJwcml2YXRlXCIsXG4gICAgICAgIFwiaGlkZGVuXCI6IFwicHJpdmF0ZVwiLFxuICAgIH1cblxuICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0pOlxuICAgICAgICBpZiBpdGVtLmdldChcInJldmlld19zdGF0ZVwiKSBpbiBSRVZJRVdfU1RBVEVfTUFQUElORzpcbiAgICAgICAgICAgIGl0ZW1bXCJyZXZpZXdfc3RhdGVcIl0gPSBSRVZJRVdfU1RBVEVfTUFQUElOR1tpdGVtW1wicmV2aWV3X3N0YXRlXCJdXVxuICAgICAgICByZXR1cm4gaXRlbVxuXG5cbkV4cG9ydC9JbXBvcnQgQW5ub3RhdGlvbnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuU29tZSBjb3JlLWZlYXR1cmVzIG9mIFBsb25lIChlLmcuIGNvbW1lbnRzKSB1c2UgYW5ub3RhdGlvbnMgdG8gc3RvcmUgZGF0YS5cblRoZSBjb3JlIGZlYXR1cmVzIGFyZSBhbHJlYWR5IGNvdmVyZWQgYnV0IHlvdXIgY3VzdG9tIGNvZGUgb3IgY29tbXVuaXR5IGFkZG9ucyBtYXkgdXNlIGFubm90YXRpb25zIGFzIHdlbGwuXG5IZXJlIGlzIGhvdyB5b3UgY2FuIG1pZ3JhdGUgdGhlbS5cblxuKipFeHBvcnQqKjogT25seSBleHBvcnQgdGhvc2UgQW5ub3RhdGlvbnMgdGhhdCB5b3VyIHJlYWxseSBuZWVkLlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBmcm9tIHpvcGUuYW5ub3RhdGlvbi5pbnRlcmZhY2VzIGltcG9ydCBJQW5ub3RhdGlvbnNcbiAgICBBTk5PVEFUSU9OU19UT19FWFBPUlQgPSBbXG4gICAgICAgIFwic3luZGljYXRpb25fc2V0dGluZ3NcIixcbiAgICBdXG4gICAgQU5OT1RBVElPTlNfS0VZID0gJ2V4cG9ydGltcG9ydC5hbm5vdGF0aW9ucydcblxuICAgIGNsYXNzIEN1c3RvbUV4cG9ydENvbnRlbnQoRXhwb3J0Q29udGVudCk6XG5cbiAgICAgICAgZGVmIGdsb2JhbF9kaWN0X2hvb2soc2VsZiwgaXRlbSwgb2JqKTpcbiAgICAgICAgICAgIGl0ZW0gPSBzZWxmLmV4cG9ydF9hbm5vdGF0aW9ucyhpdGVtLCBvYmopXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgICAgIGRlZiBleHBvcnRfYW5ub3RhdGlvbnMoc2VsZiwgaXRlbSwgb2JqKTpcbiAgICAgICAgICAgIHJlc3VsdHMgPSB7fVxuICAgICAgICAgICAgYW5ub3RhdGlvbnMgPSBJQW5ub3RhdGlvbnMob2JqKVxuICAgICAgICAgICAgZm9yIGtleSBpbiBBTk5PVEFUSU9OU19UT19FWFBPUlQ6XG4gICAgICAgICAgICAgICAgZGF0YSA9IGFubm90YXRpb25zLmdldChrZXkpXG4gICAgICAgICAgICAgICAgaWYgZGF0YTpcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0c1trZXldID0gSUpzb25Db21wYXRpYmxlKGRhdGEsIE5vbmUpXG4gICAgICAgICAgICBpZiByZXN1bHRzOlxuICAgICAgICAgICAgICAgIGl0ZW1bQU5OT1RBVElPTlNfS0VZXSA9IHJlc3VsdHNcbiAgICAgICAgICAgIHJldHVybiBpdGVtXG5cbioqSW1wb3J0Kio6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gem9wZS5hbm5vdGF0aW9uLmludGVyZmFjZXMgaW1wb3J0IElBbm5vdGF0aW9uc1xuICAgIEFOTk9UQVRJT05TX0tFWSA9IFwiZXhwb3J0aW1wb3J0LmFubm90YXRpb25zXCJcblxuICAgIGNsYXNzIEN1c3RvbUltcG9ydENvbnRlbnQoSW1wb3J0Q29udGVudCk6XG5cbiAgICAgICAgZGVmIGdsb2JhbF9vYmpfaG9vayhzZWxmLCBvYmosIGl0ZW0pOlxuICAgICAgICAgICAgaXRlbSA9IHNlbGYuaW1wb3J0X2Fubm90YXRpb25zKG9iaiwgaXRlbSlcbiAgICAgICAgICAgIHJldHVybiBpdGVtXG5cbiAgICAgICAgZGVmIGltcG9ydF9hbm5vdGF0aW9ucyhzZWxmLCBvYmosIGl0ZW0pOlxuICAgICAgICAgICAgYW5ub3RhdGlvbnMgPSBJQW5ub3RhdGlvbnMob2JqKVxuICAgICAgICAgICAgZm9yIGtleSBpbiBpdGVtLmdldChBTk5PVEFUSU9OU19LRVksIFtdKTpcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uc1trZXldID0gaXRlbVtBTk5PVEFUSU9OU19LRVldW2tleV1cbiAgICAgICAgICAgIHJldHVybiBpdGVtXG5cblNvbWUgZmVhdHVyZXMgYWxzbyBzdG9yZSBkYXRhIGluIGFubm90YXRpb25zIG9uIHRoZSBwb3J0YWwsIGUuZy4gYHBsb25lLmNvbnRlbnRydWxlcy5sb2NhbGFzc2lnbm1lbnRzYCwgYHBsb25lLnBvcnRsZXRzLmNhdGVnb3J5YmxhY2tsaXN0c3RhdHVzYCwgYHBsb25lLnBvcnRsZXRzLmNvbnRleHRhc3NpZ25tZW50c2AsIGBzeW5kaWNhdGlvbl9zZXR0aW5nc2AuXG5EZXBlbmRpbmcgb24geW91ciByZXF1aXJlbWVudHMgeW91IG1heSB3YW50IHRvIGV4cG9ydCBhbmQgaW1wb3J0IHRob3NlIGFzIHdlbGwuXG5cblxuRXhwb3J0L0ltcG9ydCBNYXJrZXIgSW50ZXJmYWNlc1xuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4qKkV4cG9ydCoqOiBZb3UgbWF5IG9ubHkgd2FudCB0byBleHBvcnQgdGhlIG1hcmtlci1pbnRlcmZhY2VzIHlvdSBuZWVkLlxuSXQgaXMgYSBnb29kIGlkZWEgdG8gaW5zcGVjdCBhIGxpc3Qgb2YgYWxsIHVzZWQgbWFya2VyIGludGVyZmFjZXMgaW4gYSBwb3J0YWwgYmVmb3JlIGRlY2lkaW5nIHdoYXQgdG8gbWlncmF0ZS5cblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSB6b3BlLmludGVyZmFjZSBpbXBvcnQgZGlyZWN0bHlQcm92aWRlZEJ5XG5cbiAgICBNQVJLRVJfSU5URVJGQUNFU19UT19FWFBPUlQgPSBbXG4gICAgICAgIFwiY29sbGVjdGl2ZS5lYXN5c2xpZGVyLmludGVyZmFjZXMuSVNsaWRlclBhZ2VcIixcbiAgICAgICAgXCJwbG9uZS5hcHAubGF5b3V0Lm5hdmlnYXRpb24uaW50ZXJmYWNlcy5JTmF2aWdhdGlvblJvb3RcIixcbiAgICBdXG4gICAgTUFSS0VSX0lOVEVSRkFDRVNfS0VZID0gXCJleHBvcnRpbXBvcnQubWFya2VyX2ludGVyZmFjZXNcIlxuXG4gICAgY2xhc3MgQ3VzdG9tRXhwb3J0Q29udGVudChFeHBvcnRDb250ZW50KVxuXG4gICAgICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgICAgICBpdGVtID0gc2VsZi5leHBvcnRfbWFya2VyX2ludGVyZmFjZXMoaXRlbSwgb2JqKVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1cblxuICAgICAgICBkZWYgZXhwb3J0X21hcmtlcl9pbnRlcmZhY2VzKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgICAgICBpbnRlcmZhY2VzID0gW2kuX19pZGVudGlmaWVyX18gZm9yIGkgaW4gZGlyZWN0bHlQcm92aWRlZEJ5KG9iaildXG4gICAgICAgICAgICBpbnRlcmZhY2VzID0gW2kgZm9yIGkgaW4gaW50ZXJmYWNlcyBpZiBpIGluIE1BUktFUl9JTlRFUkZBQ0VTX1RPX0VYUE9SVF1cbiAgICAgICAgICAgIGlmIGludGVyZmFjZXM6XG4gICAgICAgICAgICAgICAgaXRlbVtNQVJLRVJfSU5URVJGQUNFU19LRVldID0gaW50ZXJmYWNlc1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1cblxuKipJbXBvcnQqKjpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBwbG9uZS5kZXh0ZXJpdHkudXRpbHMgaW1wb3J0IHJlc29sdmVEb3R0ZWROYW1lXG4gICAgZnJvbSB6b3BlLmludGVyZmFjZSBpbXBvcnQgYWxzb1Byb3ZpZGVzXG5cbiAgICBNQVJLRVJfSU5URVJGQUNFU19LRVkgPSBcImV4cG9ydGltcG9ydC5tYXJrZXJfaW50ZXJmYWNlc1wiXG5cbiAgICBjbGFzcyBDdXN0b21JbXBvcnRDb250ZW50KEltcG9ydENvbnRlbnQpOlxuXG4gICAgICAgIGRlZiBnbG9iYWxfb2JqX2hvb2tfYmVmb3JlX2Rlc2VyaWFsaXppbmcoc2VsZiwgb2JqLCBpdGVtKTpcbiAgICAgICAgICAgIFwiXCJcIkFwcGx5IG1hcmtlciBpbnRlcmZhY2VzIGJlZm9yZSBkZXNlcmlhbGl6aW5nLlwiXCJcIlxuICAgICAgICAgICAgZm9yIGlmYWNlX25hbWUgaW4gaXRlbS5wb3AoTUFSS0VSX0lOVEVSRkFDRVNfS0VZLCBbXSk6XG4gICAgICAgICAgICAgICAgdHJ5OlxuICAgICAgICAgICAgICAgICAgICBpZmFjZSA9IHJlc29sdmVEb3R0ZWROYW1lKGlmYWNlX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGlmIG5vdCBpZmFjZS5wcm92aWRlZEJ5KG9iaik6XG4gICAgICAgICAgICAgICAgICAgICAgICBhbHNvUHJvdmlkZXMob2JqLCBpZmFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiQXBwbGllZCBtYXJrZXIgaW50ZXJmYWNlICVzIHRvICVzXCIsIGlmYWNlX25hbWUsIG9iai5hYnNvbHV0ZV91cmwoKSlcbiAgICAgICAgICAgICAgICBleGNlcHQgTW9kdWxlTm90Rm91bmRFcnJvcjpcbiAgICAgICAgICAgICAgICAgICAgcGFzc1xuICAgICAgICAgICAgcmV0dXJuIG9iaiwgaXRlbVxuXG5Ta2lwIHZlcnNpb25pbmcgZHVyaW5nIGltcG9ydFxuLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuVGhlIGV2ZW50LWhhbmRsZXJzIG9mIHZlcnNpb25pbmcgY2FuIHNlcmlvdXNseSBzbG93IGRvd24geW91ciBpbXBvcnRzLlxuSXQgaXMgYSBnb29kIGlkZWEgdG8gc2tpcCBpdCBiZWZvcmUgdGhlIGltcG9ydDpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgVkVSU0lPTkVEX1RZUEVTID0gW1xuICAgICAgICBcIkRvY3VtZW50XCIsXG4gICAgICAgIFwiTmV3cyBJdGVtXCIsXG4gICAgICAgIFwiRXZlbnRcIixcbiAgICAgICAgXCJMaW5rXCIsXG4gICAgXVxuXG4gICAgZGVmIHN0YXJ0KHNlbGYpOlxuICAgICAgICBzZWxmLml0ZW1zX3dpdGhvdXRfcGFyZW50ID0gW11cbiAgICAgICAgcG9ydGFsX3R5cGVzID0gYXBpLnBvcnRhbC5nZXRfdG9vbChcInBvcnRhbF90eXBlc1wiKVxuICAgICAgICBmb3IgcG9ydGFsX3R5cGUgaW4gVkVSU0lPTkVEX1RZUEVTOlxuICAgICAgICAgICAgZnRpID0gcG9ydGFsX3R5cGVzLmdldChwb3J0YWxfdHlwZSlcbiAgICAgICAgICAgIGJlaGF2aW9ycyA9IGxpc3QoZnRpLmJlaGF2aW9ycylcbiAgICAgICAgICAgIGlmICdwbG9uZS52ZXJzaW9uaW5nJyBpbiBiZWhhdmlvcnM6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZlwiRGlzYWJsZSB2ZXJzaW9uaW5nIGZvciB7cG9ydGFsX3R5cGV9XCIpXG4gICAgICAgICAgICAgICAgYmVoYXZpb3JzLnJlbW92ZSgncGxvbmUudmVyc2lvbmluZycpXG4gICAgICAgICAgICBmdGkuYmVoYXZpb3JzID0gYmVoYXZpb3JzXG5cblJlLWVuYWJsZSB2ZXJzaW9uaW5nIGFuZCBjcmVhdGUgaW5pdGlhbCB2ZXJzaW9ucyBhZnRlciBhbGwgaW1wb3J0cyBhbmQgZml4ZXMgYXJlIGRvbmUsIGUuZyBpbiB0aGUgdmlldyBgYEBAaW1wb3J0X2FsbGBgLlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBmcm9tIFByb2R1Y3RzLkNNRkVkaXRpb25zLmludGVyZmFjZXMuSU1vZGlmaWVyIGltcG9ydCBGaWxlVG9vTGFyZ2VUb1ZlcnNpb25FcnJvclxuXG4gICAgVkVSU0lPTkVEX1RZUEVTID0gW1xuICAgICAgICBcIkRvY3VtZW50XCIsXG4gICAgICAgIFwiTmV3cyBJdGVtXCIsXG4gICAgICAgIFwiRXZlbnRcIixcbiAgICAgICAgXCJMaW5rXCIsXG4gICAgXVxuXG4gICAgY2xhc3MgSW1wb3J0QWxsKEJyb3dzZXJWaWV3KTpcblxuICAgICAgICAjIHJlLWVuYWJsZSB2ZXJzaW9uaW5nXG4gICAgICAgIHBvcnRhbF90eXBlcyA9IGFwaS5wb3J0YWwuZ2V0X3Rvb2woXCJwb3J0YWxfdHlwZXNcIilcbiAgICAgICAgZm9yIHBvcnRhbF90eXBlIGluIFZFUlNJT05FRF9UWVBFUzpcbiAgICAgICAgICAgIGZ0aSA9IHBvcnRhbF90eXBlcy5nZXQocG9ydGFsX3R5cGUpXG4gICAgICAgICAgICBiZWhhdmlvcnMgPSBsaXN0KGZ0aS5iZWhhdmlvcnMpXG4gICAgICAgICAgICBpZiBcInBsb25lLnZlcnNpb25pbmdcIiBub3QgaW4gYmVoYXZpb3JzOlxuICAgICAgICAgICAgICAgIGJlaGF2aW9ycy5hcHBlbmQoXCJwbG9uZS52ZXJzaW9uaW5nXCIpXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZlwiRW5hYmxlIHZlcnNpb25pbmcgZm9yIHtwb3J0YWxfdHlwZX1cIilcbiAgICAgICAgICAgIGlmIFwicGxvbmUubG9ja2luZ1wiIG5vdCBpbiBiZWhhdmlvcnM6XG4gICAgICAgICAgICAgICAgYmVoYXZpb3JzLmFwcGVuZChcInBsb25lLmxvY2tpbmdcIilcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmXCJFbmFibGUgbG9ja2luZyBmb3Ige3BvcnRhbF90eXBlfVwiKVxuICAgICAgICAgICAgZnRpLmJlaGF2aW9ycyA9IGJlaGF2aW9yc1xuICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKFwiUmUtZW5hYmxlZCB2ZXJzaW9uaW5nXCIpXG4gICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgIyBjcmVhdGUgaW5pdGlhbCB2ZXJzaW9uIGZvciBhbGwgdmVyc2lvbmVkIHR5cGVzXG4gICAgICAgIGxvZ2dlci5pbmZvKFwiQ3JlYXRpbmcgaW5pdGlhbCB2ZXJzaW9uc1wiKVxuICAgICAgICBwb3J0YWxfcmVwb3NpdG9yeSA9IGFwaS5wb3J0YWwuZ2V0X3Rvb2woXCJwb3J0YWxfcmVwb3NpdG9yeVwiKVxuICAgICAgICBicmFpbnMgPSBhcGkuY29udGVudC5maW5kKHBvcnRhbF90eXBlPVZFUlNJT05FRF9UWVBFUylcbiAgICAgICAgdG90YWwgPSBsZW4oYnJhaW5zKVxuICAgICAgICBmb3IgaW5kZXgsIGJyYWluIGluIGVudW1lcmF0ZShicmFpbnMpOlxuICAgICAgICAgICAgb2JqID0gYnJhaW4uZ2V0T2JqZWN0KClcbiAgICAgICAgICAgIHRyeTpcbiAgICAgICAgICAgICAgICBwb3J0YWxfcmVwb3NpdG9yeS5zYXZlKG9iaj1vYmosIGNvbW1lbnQ9XCJJbXBvcnRlZCBWZXJzaW9uXCIpXG4gICAgICAgICAgICBleGNlcHQgRmlsZVRvb0xhcmdlVG9WZXJzaW9uRXJyb3I6XG4gICAgICAgICAgICAgICAgcGFzc1xuICAgICAgICAgICAgaWYgbm90IGluZGV4ICUgMTAwMDpcbiAgICAgICAgICAgICAgICBtc2cgPSBmXCJDcmVhdGVkIHZlcnNpb25zIGZvciB7aW5kZXh9IG9mIHt0b3RhbH0gaXRlbXMuXCJcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhtc2cpXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0KCkubm90ZShtc2cpXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0KClcbiAgICAgICAgbXNnID0gXCJDcmVhdGVkIGluaXRpYWwgdmVyc2lvbnNcIlxuICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0KClcblxuXG5EZWFsaW5nIHdpdGggdmFsaWRhdGlvbiBlcnJvcnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Tb21ldGltZXMgeW91IGdldCB2YWxpZGF0aW9uLWVycm9ycyBkdXJpbmcgaW1wb3J0IGJlY2F1c2UgdGhlIGRhdGEgY2Fubm90IGJlIHZhbGlkYXRlZC5cblRoYXQgY2FuIGhhcHBlbiB3aGVuIG9wdGlvbnMgaW4gYSBmaWVsZCBhcmUgZ2VuZXJhdGVkIGZyb20gY29udGVudCBpbiB0aGUgc2l0ZS5cbkluIHRoZXNlIGNhc2VzIHlvdSBjYW5ub3QgYmUgc3VyZSB0aGF0IGFsbCBvcHRpb25zIGFscmVhZHkgZXhpc3QgaW4gdGhlIHBvcnRhbCB3aGlsZSBpbXBvcnRpbmcgdGhlIGNvbnRlbnQuXG5cbkl0IG1heSBhbHNvIGhhcHBlbiwgd2hlbiB5b3UgaGF2ZSB2YWxpZGF0b3JzIHRoYXQgcmVseSBvbiBjb250ZW50IG9yIGNvbmZpZ3VyYXRpb24gdGhhdCBkb2VzIG5vdCBleGlzdCBvbiBpbXBvcnQuXG5cbi4uIG5vdGU6OlxuXG4gICAgRm9yIHJlbGF0aW9uZmllbGRzIHRoaXMgaXMgbm90IG5lY2Vzc2FyeSBzaW5jZSByZWxhdGlvbnMgYXJlIGltcG9ydGVkIGFmdGVyIGNvbnRlbnQgYW55d2F5IVxuXG5UaGVyZSBhcmUgdHdvIHdheXMgdG8gaGFuZGxlIHRoZXNlIGlzc3VlczpcblxuKiBVc2UgYSBzaW1wbGUgc2V0dGVyIGJ5cGFzc2luZyB0aGUgdmFsaWRhdGlvbiB1c2VkIGJ5IHRoZSByZXN0YXBpXG4qIERlZmVyIHRoZSBpbXBvcnQgdW50aWwgYWxsIG90aGVyIGltcG9ydHMgd2VyZSBydW5cblxuXG5Vc2UgYSBzaW1wbGUgc2V0dGVyXG4qKioqKioqKioqKioqKioqKioqXG5cbllvdSBuZWVkIHRvIHNwZWNpZnkgd2hpY2ggY29udGVudC10eXBlcyBhbmQgZmllbGRzIHlvdSB3YW50IHRvIGhhbmRsZSB0aGF0IHdheS5cblxuSXQgaXMgcHV0IGluIGEga2V5LCB0aGF0IHRoZSBub3JtYWwgaW1wb3J0IHdpbGwgaWdub3JlIGFuZCBzZXQgdXNpbmcgYGBzZXRhdHRyKClgYCBiZWZvcmUgZGVzZXJpYWxpemluZyB0aGUgcmVzdCBvZiB0aGUgZGF0YS5cblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgU0lNUExFX1NFVFRFUl9GSUVMRFMgPSB7XG4gICAgICAgIFwiQUxMXCI6IFtcInNvbWVfc2hhcmVkX2ZpZWxkXCJdLFxuICAgICAgICBcIkNvbGxhYm9yYXRpb25Gb2xkZXJcIjogW1wiYWxsb3dlZFBhcnRuZXJEb2NUeXBlc1wiXSxcbiAgICAgICAgXCJEb2NUeXBlXCI6IFtcImF1dG9tYXRpY1RyYW5zZmVyVGFyZ2V0c1wiXSxcbiAgICAgICAgXCJEUERvY3VtZW50XCI6IFtcInNjZW5hcmlvc1wiXSxcbiAgICAgICAgXCJEUEV2ZW50XCIgOiBbXCJTdGF0dXNcIl0sXG4gICAgfVxuXG4gICAgY2xhc3MgQ3VzdG9tSW1wb3J0Q29udGVudChJbXBvcnRDb250ZW50KTpcblxuICAgICAgICBkZWYgZ2xvYmFsX2RpY3RfaG9vayhzZWxmLCBpdGVtKTpcbiAgICAgICAgICAgIHNpbXBsZSA9IHt9XG4gICAgICAgICAgICBmb3IgZmllbGRuYW1lIGluIFNJTVBMRV9TRVRURVJfRklFTERTLmdldChcIkFMTFwiLCBbXSk6XG4gICAgICAgICAgICAgICAgaWYgZmllbGRuYW1lIGluIGl0ZW06XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRlbS5wb3AoZmllbGRuYW1lKVxuICAgICAgICAgICAgICAgICAgICBpZiB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpbXBsZVtmaWVsZG5hbWVdID0gdmFsdWVcbiAgICAgICAgICAgIGZvciBmaWVsZG5hbWUgaW4gU0lNUExFX1NFVFRFUl9GSUVMRFMuZ2V0KGl0ZW1bXCJAdHlwZVwiXSwgW10pOlxuICAgICAgICAgICAgICAgIGlmIGZpZWxkbmFtZSBpbiBpdGVtOlxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGl0ZW0ucG9wKGZpZWxkbmFtZSlcbiAgICAgICAgICAgICAgICAgICAgaWYgdmFsdWU6XG4gICAgICAgICAgICAgICAgICAgICAgICBzaW1wbGVbZmllbGRuYW1lXSA9IHZhbHVlXG4gICAgICAgICAgICBpZiBzaW1wbGU6XG4gICAgICAgICAgICAgICAgaXRlbVtcImV4cG9ydGltcG9ydC5zaW1wbGVzZXR0ZXJcIl0gPSBzaW1wbGVcblxuICAgICAgICBkZWYgZ2xvYmFsX29ial9ob29rX2JlZm9yZV9kZXNlcmlhbGl6aW5nKHNlbGYsIG9iaiwgaXRlbSk6XG4gICAgICAgICAgICBcIlwiXCJIb29rIHRvIG1vZGlmeSB0aGUgY3JlYXRlZCBvYmogYmVmb3JlIGRlc2VyaWFsaXppbmcgdGhlIGRhdGEuXG4gICAgICAgICAgICBcIlwiXCJcbiAgICAgICAgICAgICMgaW1wb3J0IHNpbXBsZXNldHRlciBkYXRhIGJlZm9yZSB0aGUgcmVzdFxuICAgICAgICAgICAgZm9yIGZpZWxkbmFtZSwgdmFsdWUgaW4gaXRlbS5nZXQoXCJleHBvcnRpbXBvcnQuc2ltcGxlc2V0dGVyXCIsIHt9KS5pdGVtcygpOlxuICAgICAgICAgICAgICAgIHNldGF0dHIob2JqLCBmaWVsZG5hbWUsIHZhbHVlKVxuXG4uLiBub3RlOjpcblxuICAgIFVzaW5nIGBgZ2xvYmFsX29ial9ob29rX2JlZm9yZV9kZXNlcmlhbGl6aW5nYGAgbWFrZXMgc3VyZSB0aGF0IGRhdGEgaXMgdGhlcmUgd2hlbiB0aGUgZXZlbnQtaGFuZGxlcnMgYXJlIHJ1biBhZnRlciBpbXBvcnQuXG5cbkRlZmVyIGltcG9ydFxuKioqKioqKioqKioqXG5cbllvdSBjYW4gYWxzbyB3YWl0IHVudGlsIGFsbCBjb250ZW50IGlzIGltcG9ydGVkIGJlZm9yZSBzZXR0aW5nIHRoZSB2YWx1ZXMgb24gdGhlc2UgZmllbGRzLlxuQWdhaW4geW91IG5lZWQgdG8gZmluZCBvdXQgd2hpY2ggZmllbGRzIGZvciB3aGljaCB0eXBlcyB5b3Ugd2FudCB0byBoYW5kbGUgdGhhdCB3YXkuXG5cbkhlcmUgdGhlIGRhdGEgaXMgc3RvcmVkIGluIGFuIGFubm90YXRpb24gb24gdGhlIGltcG9ydGVkIG9iamVjdCBmcm9tIHdoaWNoIGl0IGlzIGxhdGVyIHJlYWQuXG5UaGlzIGV4YW1wbGUgYWxzbyBzdXBwb3J0cyBzZXR0aW5nIHNvbWUgZGF0YSB3aXRoIGBgc2V0YXR0cmBgIHdpdGhvdXQgdmFsaWRhdGluZyBpdDpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBwbG9uZS5yZXN0YXBpLmludGVyZmFjZXMgaW1wb3J0IElEZXNlcmlhbGl6ZUZyb21Kc29uXG4gICAgZnJvbSB6b3BlLmFubm90YXRpb24uaW50ZXJmYWNlcyBpbXBvcnQgSUFubm90YXRpb25zXG4gICAgZnJvbSB6b3BlLmNvbXBvbmVudCBpbXBvcnQgZ2V0TXVsdGlBZGFwdGVyXG5cbiAgICBERUZFUlJFRF9LRVkgPSBcImV4cG9ydGltcG9ydC5kZWZlcnJlZFwiXG4gICAgREVGRVJSRURfRklFTERfTUFQUElORyA9IHtcbiAgICAgICAgXCJ0YWxrXCI6IFtcInNvbWVmaWVsZFwiXSxcbiAgICAgICAgXCJzcGVha2VyXCI6IFtcbiAgICAgICAgICAgIFwiY3VzdG9tX2ZpZWxkXCIsXG4gICAgICAgICAgICBcImFub3RoZXJfZmllbGRcIixcbiAgICAgICAgXVxuICAgIH1cbiAgICBTSU1QTEVfU0VUVEVSX0ZJRUxEUyA9IHtcImN1c3RvbV90eXBlXCI6IFtcImFub3RoZXJfZmllbGRcIl19XG5cbiAgICBjbGFzcyBDdXN0b21JbXBvcnRDb250ZW50KEltcG9ydENvbnRlbnQpOlxuXG4gICAgICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0pOlxuICAgICAgICAgICAgIyBNb3ZlIGRlZmVycmVkIHZhbHVlcyB0byBhIGRpZmZlcmVudCBrZXkgdG8gbm90IGRlc2VyaWFsaXplLlxuICAgICAgICAgICAgIyBUaGlzIGNvdWxkIGFsc28gYmUgZG9uZSBkdXJpbmcgZXhwb3J0LlxuICAgICAgICAgICAgaXRlbVtERUZFUlJFRF9LRVldID0ge31cbiAgICAgICAgICAgIGZvciBmaWVsZG5hbWUgaW4gREVGRVJSRURfRklFTERfTUFQUElORy5nZXQoaXRlbVtcIkB0eXBlXCJdLCBbXSk6XG4gICAgICAgICAgICAgICAgaWYgaXRlbS5nZXQoZmllbGRuYW1lKTpcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtERUZFUlJFRF9LRVldW2ZpZWxkbmFtZV0gPSBpdGVtLnBvcChmaWVsZG5hbWUpXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG4gICAgICAgIGRlZiBnbG9iYWxfb2JqX2hvb2soc2VsZiwgb2JqLCBpdGVtKTpcbiAgICAgICAgICAgICMgU3RvcmUgZGVmZXJyZWQgZGF0YSBpbiBhbiBhbm5vdGF0aW9uLlxuICAgICAgICAgICAgZGVmZXJyZWQgPSBpdGVtLmdldChERUZFUlJFRF9LRVksIHt9KVxuICAgICAgICAgICAgaWYgZGVmZXJyZWQ6XG4gICAgICAgICAgICAgICAgYW5ub3RhdGlvbnMgPSBJQW5ub3RhdGlvbnMob2JqKVxuICAgICAgICAgICAgICAgIGFubm90YXRpb25zW0RFRkVSUkVEX0tFWV0gPSB7fVxuICAgICAgICAgICAgICAgIGZvciBrZXksIHZhbHVlIGluIGRlZmVycmVkLml0ZW1zKCk6XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25zW0RFRkVSUkVEX0tFWV1ba2V5XSA9IHZhbHVlXG5cbllvdSB0aGVuIG5lZWQgYSBuZXcgc3RlcCBpbiB0aGUgbWlncmF0aW9uIHRvIG1vdmUgdGhlIGRlZmVycmVkIHZhbHVlcyBmcm9tIHRoZSBhbm5vdGF0aW9uIHRvIHRoZSBmaWVsZDpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgY2xhc3MgSW1wb3J0RGVmZXJyZWQoQnJvd3NlclZpZXcpOlxuXG4gICAgICAgIGRlZiBfX2NhbGxfXyhzZWxmKTpcbiAgICAgICAgICAgICMgVGhpcyBleGFtcGxlIHJldXNlcyB0aGUgZm9ybSBleHBvcnRfb3RoZXIucHQgZnJvbSBjb2xsZWN0aXZlLmV4cG9ydGltcG9ydFxuICAgICAgICAgICAgc2VsZi50aXRsZSA9IFwiSW1wb3J0IGRlZmVycmVkIGRhdGFcIlxuICAgICAgICAgICAgaWYgbm90IHNlbGYucmVxdWVzdC5mb3JtLmdldChcImZvcm0uc3VibWl0dGVkXCIsIEZhbHNlKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleCgpXG4gICAgICAgICAgICBwb3J0YWwgPSBhcGkucG9ydGFsLmdldCgpXG4gICAgICAgICAgICBzZWxmLnJlc3VsdHMgPSBbXVxuICAgICAgICAgICAgZm9yIGJyYWluIGluIGFwaS5jb250ZW50LmZpbmQoREVGRVJSRURfRklFTERfTUFQUElORy5rZXlzKCkpOlxuICAgICAgICAgICAgICAgIG9iaiA9IGJyYWluLmdldE9iamVjdCgpXG4gICAgICAgICAgICAgICAgc2VsZi5pbXBvcnRfZGVmZXJyZWQob2JqKVxuICAgICAgICAgICAgYXBpLnBvcnRhbC5zaG93X21lc3NhZ2UoZlwiSW1wb3J0ZWQgZGVmZXJyZWQgZGF0YSBmb3Ige2xlbihzZWxmLnJlc3VsdHMpfSBpdGVtcyFcIiwgc2VsZi5yZXF1ZXN0KVxuXG4gICAgICAgIGRlZiBpbXBvcnRfZGVmZXJyZWQoc2VsZiwgb2JqKTpcbiAgICAgICAgICAgIGFubm90YXRpb25zID0gSUFubm90YXRpb25zKG9iaiwge30pXG4gICAgICAgICAgICBkZWZlcnJlZCA9IGFubm90YXRpb25zLmdldChERUZFUlJFRF9LRVksIE5vbmUpXG4gICAgICAgICAgICBpZiBub3QgZGVmZXJyZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAjIFNob3J0Y3V0IGZvciBzaW1wbGUgZmllbGRzIChlLmcuIHN0b3Jpbmcgc3RyaW5ncywgdXVpZHMgZXRjLilcbiAgICAgICAgICAgIGZvciBmaWVsZG5hbWUgaW4gU0lNUExFX1NFVFRFUl9GSUVMRFMuZ2V0KG9iai5wb3J0YWxfdHlwZSwgW10pOlxuICAgICAgICAgICAgICAgIHZhbHVlID0gZGVmZXJyZWQucG9wKGZpZWxkbmFtZSwgTm9uZSlcbiAgICAgICAgICAgICAgICBpZiB2YWx1ZTpcbiAgICAgICAgICAgICAgICAgICAgc2V0YXR0cihvYmosIGZpZWxkbmFtZSwgdmFsdWUpXG4gICAgICAgICAgICBpZiBub3QgZGVmZXJyZWQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAjIFRoaXMgYXBwcm9hY2ggdmFsaWRhdGVzIHRoZSB2YWx1ZXMgYW5kIGNvbnZlcnRzIG1vcmUgY29tcGxleCBkYXRhXG4gICAgICAgICAgICBkZXNlcmlhbGl6ZXIgPSBnZXRNdWx0aUFkYXB0ZXIoKG9iaiwgc2VsZi5yZXF1ZXN0KSwgSURlc2VyaWFsaXplRnJvbUpzb24pXG4gICAgICAgICAgICB0cnk6XG4gICAgICAgICAgICAgICAgb2JqID0gZGVzZXJpYWxpemVyKHZhbGlkYXRlX2FsbD1GYWxzZSwgZGF0YT1kZWZlcnJlZClcbiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhcIkVycm9yIHdoaWxlIGltcG9ydGluZyBkZWZlcnJlZCBkYXRhIGZvciAlc1wiLCBvYmouYWJzb2x1dGVfdXJsKCksIGV4Y19pbmZvPVRydWUpXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJEYXRhOiAlc1wiLCBkZWZlcnJlZClcbiAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgc2VsZi5yZXN1bHRzLmFwcGVuZChvYmouYWJzb2x1dGVfdXJsKCkpXG4gICAgICAgICAgICAjIGNsZWFudXBcbiAgICAgICAgICAgIGRlbCBhbm5vdGF0aW9uc1tERUZFUlJFRF9LRVldXG5cblRoaXMgYWRkaXRpb25hbCB2aWV3IG9idmlvdXNseSBuZWVkcyB0byBiZSByZWdpc3RlcmVkOlxuXG4uLiBjb2RlLWJsb2NrOjogeG1sXG5cbiAgICA8YnJvd3NlcjpwYWdlXG4gICAgICAgIG5hbWU9XCJpbXBvcnRfZGVmZXJyZWRcIlxuICAgICAgICBmb3I9XCJ6b3BlLmludGVyZmFjZS5JbnRlcmZhY2VcIlxuICAgICAgICBjbGFzcz1cIi5pbXBvcnRfY29udGVudC5JbXBvcnREZWZlcnJlZFwiXG4gICAgICAgIHRlbXBsYXRlPVwiZXhwb3J0X290aGVyLnB0XCJcbiAgICAgICAgcGVybWlzc2lvbj1cImNtZi5NYW5hZ2VQb3J0YWxcIlxuICAgICAgICAvPlxuXG5cbkhhbmRsZSBMaW5ndWFQbG9uZSBjb250ZW50XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5FeHBvcnQ6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgICMgRmluZCBsYW5ndWFnZSBvZiB0aGUgbmVhcmVzdCBwYXJlbnQgd2l0aCBhIGxhbmd1YWdlXG4gICAgICAgICMgVXNlZnVsbCBmb3IgTGluZ3VhUGxvbmUgc2l0ZXMgd2hlcmUgc29tZSBjb250ZW50IGlzIGxhbmd1YWdlaW5kZXBlbmRlbnRcbiAgICAgICAgcGFyZW50ID0gb2JqLl9fcGFyZW50X19cbiAgICAgICAgZm9yIGFuY2VzdG9yIGluIHBhcmVudC5hcV9jaGFpbjpcbiAgICAgICAgICAgIGlmIElQbG9uZVNpdGVSb290LnByb3ZpZGVkQnkoYW5jZXN0b3IpOlxuICAgICAgICAgICAgICAgICMga2VlcCBsYW5ndWFnZSBmb3Igcm9vdCBjb250ZW50XG4gICAgICAgICAgICAgICAgbmVhcmVzdF9hbmNlc3Rvcl9sYW5nID0gaXRlbVtcImxhbmd1YWdlXCJdXG4gICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGlmIGdldGF0dHIoYW5jZXN0b3IsIFwiZ2V0TGFuZ3VhZ2VcIiwgTm9uZSkgYW5kIGFuY2VzdG9yLmdldExhbmd1YWdlKCk6XG4gICAgICAgICAgICAgICAgbmVhcmVzdF9hbmNlc3Rvcl9sYW5nID0gYW5jZXN0b3IuZ2V0TGFuZ3VhZ2UoKVxuICAgICAgICAgICAgICAgIGl0ZW1bXCJwYXJlbnRcIl1bXCJsYW5ndWFnZVwiXSA9IG5lYXJlc3RfYW5jZXN0b3JfbGFuZ1xuICAgICAgICAgICAgICAgIGJyZWFrXG5cbiAgICAgICAgIyBUaGlzIGZvcmNlcyBcIndyb25nXCIgbGFuZ3VhZ2VzIHRvIHRoZSBuZWFyZXN0IHBhcmVudHMgbGFuZ3VhZ2VcbiAgICAgICAgaWYgXCJsYW5ndWFnZVwiIGluIGl0ZW0gYW5kIGl0ZW1bXCJsYW5ndWFnZVwiXSAhPSBuZWFyZXN0X2FuY2VzdG9yX2xhbmc6XG4gICAgICAgICAgICBsb2dnZXIuaW5mbyh1XCJGb3JjaW5nICVzICh3YXMgJXMpIGZvciAlcyAlcyBcIiwgbmVhcmVzdF9hbmNlc3Rvcl9sYW5nLCBpdGVtW1wibGFuZ3VhZ2VcIl0sIGl0ZW1bXCJAdHlwZVwiXSwgaXRlbVtcIkBpZFwiXSlcbiAgICAgICAgICAgIGl0ZW1bXCJsYW5ndWFnZVwiXSA9IG5lYXJlc3RfYW5jZXN0b3JfbGFuZ1xuXG4gICAgICAgICMgc2V0IG1pc3NpbmcgbGFuZ3VhZ2VcbiAgICAgICAgaWYgbm90IGl0ZW0uZ2V0KFwibGFuZ3VhZ2VcIik6XG4gICAgICAgICAgICBpdGVtW1wibGFuZ3VhZ2VcIl0gPSBuZWFyZXN0X2FuY2VzdG9yX2xhbmdcblxuICAgICAgICAjIGFkZCBpbmZvIG9uIHRyYW5zbGF0aW9ucyB0byBoZWxwIGZpbmQgdGhlIHJpZ2h0IGNvbnRhaW5lclxuICAgICAgICAjIHVzdWFsbHkgdGhpcyBpZG9uZSBieSBleHBvcnRfdHJhbnNsYXRpb25zXG4gICAgICAgICMgYnV0IHdoZW4gbWlncmF0aW5nIGZyb20gTFAgdG8gcGFtIHlvdSBzb21ldGltZXMgd2FudCB0byBjaGVjayB0aGVcbiAgICAgICAgIyB0cmFubGF0aW9uIGluZm8gZHVyaW5nIGltcG9ydFxuICAgICAgICBpZiBnZXRhdHRyKG9iai5hcV9iYXNlLCBcImdldFRyYW5zbGF0aW9uc1wiLCBOb25lKSBpcyBub3QgTm9uZTpcbiAgICAgICAgICAgIHRyYW5zbGF0aW9ucyA9IG9iai5nZXRUcmFuc2xhdGlvbnMoKVxuICAgICAgICAgICAgaWYgdHJhbnNsYXRpb25zOlxuICAgICAgICAgICAgICAgIGl0ZW1bXCJ0cmFuc2xhdGlvblwiXSA9IHt9XG4gICAgICAgICAgICAgICAgZm9yIGxhbmcgaW4gdHJhbnNsYXRpb25zOlxuICAgICAgICAgICAgICAgICAgICB1dWlkID0gSVVVSUQodHJhbnNsYXRpb25zW2xhbmddWzBdLCBOb25lKVxuICAgICAgICAgICAgICAgICAgICBpZiB1dWlkID09IGl0ZW1bXCJVSURcIl06XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgICAgICB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uc1tsYW5nXVswXVxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgbGFuZzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhbmcgPSBcIm5vX2xhbmd1YWdlXCJcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtcInRyYW5zbGF0aW9uXCJdW2xhbmddID0gdHJhbnNsYXRpb24uYWJzb2x1dGVfdXJsKClcblxuSW1wb3J0OlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBkZWYgZ2xvYmFsX2RpY3RfaG9vayhzZWxmLCBpdGVtKTpcblxuICAgICAgICAjIEFkYXB0IHRoaXMgdG8geW91ciBzaXRlXG4gICAgICAgIGxhbmd1YWdlcyA9IFtcImVuXCIsIFwiZnJcIiwgXCJkZVwiXVxuICAgICAgICBkZWZhdWx0X2xhbmd1YWdlID0gXCJlblwiXG4gICAgICAgIHBvcnRhbF9pZCA9IFwiUGxvbmVcIlxuXG4gICAgICAgICMgTm8gbGFuZ3VhZ2UgPT4gbGFuZyBvZiBwYXJlbnQgb3IgZGVmYXVsdFxuICAgICAgICBpZiBpdGVtLmdldChcImxhbmd1YWdlXCIpIG5vdCBpbiBsYW5ndWFnZXM6XG4gICAgICAgICAgICBpZiBpdGVtW1wicGFyZW50XCJdLmdldChcImxhbmd1YWdlXCIpOlxuICAgICAgICAgICAgICAgIGl0ZW1bXCJsYW5ndWFnZVwiXSA9IGl0ZW1bXCJwYXJlbnRcIl1bXCJsYW5ndWFnZVwiXVxuICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICBpdGVtW1wibGFuZ3VhZ2VcIl0gPSBkZWZhdWx0X2xhbmd1YWdlXG5cbiAgICAgICAgbGFuZyA9IGl0ZW1bXCJsYW5ndWFnZVwiXVxuXG4gICAgICAgIGlmIGl0ZW1bXCJwYXJlbnRcIl0uZ2V0KFwibGFuZ3VhZ2VcIikgIT0gaXRlbVtcImxhbmd1YWdlXCJdOlxuICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKGZcIkluY29uc2lzdGVudCBsYW5nOiBpdGVtIGlzIHtsYW5nfSwgcGFyZW50IGlzIHtpdGVtWydwYXJlbnQnXS5nZXQoJ2xhbmd1YWdlJyl9IGZvciB7aXRlbVsnQGlkJ119XCIpXG5cbiAgICAgICAgIyBNb3ZlIGl0ZW0gdG8gdGhlIGNvcnJlY3QgbGFuZ3VhZ2Utcm9vdC1mb2xkZXJcbiAgICAgICAgIyBUaGlzIGlzIG9ubHkgcmVsZXZhbnQgZm9yIGl0ZW1zIGluIHRoZSBzaXRlLXJvb3QuXG4gICAgICAgICMgTW9zdCBpdGVtcyBjb250YWluZXJzIGFyZSB1c3VhbGx5IGxvb2tlZCB1cCBieSB0aGUgdXVpZCBvZiB0aGUgb2xkIHBhcmVudFxuICAgICAgICB1cmwgPSBpdGVtW1wiQGlkXCJdXG4gICAgICAgIHBhcmVudF91cmwgPSBpdGVtW1wicGFyZW50XCJdW1wiQGlkXCJdXG5cbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoZlwiL3twb3J0YWxfaWR9L1wiLCBmXCIve3BvcnRhbF9pZH0ve2xhbmd9L1wiLCAxKVxuICAgICAgICBwYXJlbnRfdXJsID0gcGFyZW50X3VybC5yZXBsYWNlKGZcIi97cG9ydGFsX2lkfVwiLCBmXCIve3BvcnRhbF9pZH0ve2xhbmd9XCIsIDEpXG5cbiAgICAgICAgaXRlbVtcIkBpZFwiXSA9IHVybFxuICAgICAgICBpdGVtW1wicGFyZW50XCJdW1wiQGlkXCJdID0gcGFyZW50X3VybFxuXG4gICAgICAgIHJldHVybiBpdGVtXG5cbkFsdGVybmF0aXZlIHdheXMgdG8gaGFuZGxlIGl0ZW1zIHdpdGhvdXQgcGFyZW50XG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5PZnRlbiBpdCBpcyBiZXR0ZXIgdG8gZXhwb3J0IGFuZCBsb2cgaXRlbXMgZm9yIHdoaWNoIG5vIGNvbnRhaW5lciBjb3VsZCBiZSBmb3VuZCBpbnN0ZWFkIG9mIHJlLWNyZWF0aW5nIHRoZSBvcmlnaW5hbCBzdHJ1Y3R1cmUuXG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGRlZiB1cGRhdGUoc2VsZik6XG4gICAgICAgIHNlbGYuaXRlbXNfd2l0aG91dF9wYXJlbnQgPSBbXVxuXG4gICAgZGVmIGNyZWF0ZV9jb250YWluZXIoc2VsZiwgaXRlbSk6XG4gICAgICAgICMgT3ZlcnJpZGUgY3JlYXRlX2NvbnRhaW5lciB0byBuZXZlciBjcmVhdGUgcGFyZW50c1xuICAgICAgICBzZWxmLml0ZW1zX3dpdGhvdXRfcGFyZW50LmFwcGVuZChpdGVtKVxuXG4gICAgZGVmIGZpbmlzaChzZWxmKTpcbiAgICAgICAgIyBleHBvcnQgY29udGVudCB3aXRob3V0IHBhcmVudHNcbiAgICAgICAgaWYgc2VsZi5pdGVtc193aXRob3V0X3BhcmVudDpcbiAgICAgICAgICAgIGRhdGEgPSBqc29uLmR1bXBzKHNlbGYuaXRlbXNfd2l0aG91dF9wYXJlbnQsIHNvcnRfa2V5cz1UcnVlLCBpbmRlbnQ9NClcbiAgICAgICAgICAgIG51bWJlciA9IGxlbihzZWxmLml0ZW1zX3dpdGhvdXRfcGFyZW50KVxuICAgICAgICAgICAgY2ZnID0gZ2V0Q29uZmlndXJhdGlvbigpXG4gICAgICAgICAgICBmaWxlbmFtZSA9ICdjb250ZW50X3dpdGhvdXRfcGFyZW50Lmpzb24nXG4gICAgICAgICAgICBmaWxlcGF0aCA9IG9zLnBhdGguam9pbihjZmcuY2xpZW50aG9tZSwgZmlsZW5hbWUpXG4gICAgICAgICAgICB3aXRoIG9wZW4oZmlsZXBhdGgsICd3JykgYXMgZjpcbiAgICAgICAgICAgICAgICBmLndyaXRlKGRhdGEpXG4gICAgICAgICAgICBtc2cgPSB1XCJTYXZlZCB7fSBpdGVtcyB3aXRob3V0IHBhcmVudCB0byB7fVwiLmZvcm1hdChudW1iZXIsIGZpbGVwYXRoKVxuICAgICAgICAgICAgbG9nZ2VyLmluZm8obXNnKVxuICAgICAgICAgICAgYXBpLnBvcnRhbC5zaG93X21lc3NhZ2UobXNnLCBzZWxmLnJlcXVlc3QpXG5cblxuRXhwb3J0L0ltcG9ydCBab3BlIFVzZXJzXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuQnkgZGVmYXVsdCBvbmx5IHVzZXJzIGFuZCBncm91cHMgc3RvcmVzIGluIFBsb25lIGFyZSBleHBvcnRlZC9pbXBvcnRlZC5cbllvdSBjYW4gZXhwb3J0L2ltcG9ydCBab3BlIHVzZXIgbGlrZSB0aGlzLlxuXG4qKkV4cG9ydCoqXG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuZXhwb3J0X290aGVyIGltcG9ydCBCYXNlRXhwb3J0XG4gICAgZnJvbSBwbG9uZSBpbXBvcnQgYXBpXG5cbiAgICBpbXBvcnQgc2l4XG5cbiAgICBjbGFzcyBFeHBvcnRab3BlVXNlcnMoQmFzZUV4cG9ydCk6XG5cbiAgICAgICAgQVVUT19ST0xFUyA9IFtcIkF1dGhlbnRpY2F0ZWRcIl1cblxuICAgICAgICBkZWYgX19jYWxsX18oc2VsZiwgZG93bmxvYWRfdG9fc2VydmVyPUZhbHNlKTpcbiAgICAgICAgICAgIHNlbGYudGl0bGUgPSBcIkV4cG9ydCBab3BlIHVzZXJzXCJcbiAgICAgICAgICAgIHNlbGYuZG93bmxvYWRfdG9fc2VydmVyID0gZG93bmxvYWRfdG9fc2VydmVyXG4gICAgICAgICAgICBwb3J0YWwgPSBhcGkucG9ydGFsLmdldCgpXG4gICAgICAgICAgICBhcHAgPSBwb3J0YWwuX19wYXJlbnRfX1xuICAgICAgICAgICAgc2VsZi5hY2wgPSBhcHAuYWNsX3VzZXJzXG4gICAgICAgICAgICBzZWxmLnBtcyA9IGFwaS5wb3J0YWwuZ2V0X3Rvb2woXCJwb3J0YWxfbWVtYmVyc2hpcFwiKVxuICAgICAgICAgICAgZGF0YSA9IHNlbGYuYWxsX3pvcGVfdXNlcnMoKVxuICAgICAgICAgICAgc2VsZi5kb3dubG9hZChkYXRhKVxuXG4gICAgICAgIGRlZiBhbGxfem9wZV91c2VycyhzZWxmKTpcbiAgICAgICAgICAgIHJlc3VsdHMgPSBbXVxuICAgICAgICAgICAgZm9yIHVzZXIgaW4gc2VsZi5hY2wuc2VhcmNoVXNlcnMoKTpcbiAgICAgICAgICAgICAgICBkYXRhID0gc2VsZi5fZ2V0VXNlckRhdGEodXNlcltcInVzZXJpZFwiXSlcbiAgICAgICAgICAgICAgICBkYXRhWyd0aXRsZSddID0gdXNlclsndGl0bGUnXVxuICAgICAgICAgICAgICAgIHJlc3VsdHMuYXBwZW5kKGRhdGEpXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0c1xuXG4gICAgICAgIGRlZiBfZ2V0VXNlckRhdGEoc2VsZiwgdXNlcklkKTpcbiAgICAgICAgICAgIG1lbWJlciA9IHNlbGYucG1zLmdldE1lbWJlckJ5SWQodXNlcklkKVxuICAgICAgICAgICAgcm9sZXMgPSBbXG4gICAgICAgICAgICAgICAgcm9sZVxuICAgICAgICAgICAgICAgIGZvciByb2xlIGluIG1lbWJlci5nZXRSb2xlcygpXG4gICAgICAgICAgICAgICAgaWYgcm9sZSBub3QgaW4gc2VsZi5BVVRPX1JPTEVTXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICAjIHVzZXJpZCwgcGFzc3dvcmQsIHJvbGVzXG4gICAgICAgICAgICBwcm9wcyA9IHtcbiAgICAgICAgICAgICAgICBcInVzZXJuYW1lXCI6IHVzZXJJZCxcbiAgICAgICAgICAgICAgICBcInBhc3N3b3JkXCI6IGpzb25fY29tcGF0aWJsZShzZWxmLl9nZXRVc2VyUGFzc3dvcmQodXNlcklkKSksXG4gICAgICAgICAgICAgICAgXCJyb2xlc1wiOiBqc29uX2NvbXBhdGlibGUocm9sZXMpLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByb3BzXG5cbiAgICAgICAgZGVmIF9nZXRVc2VyUGFzc3dvcmQoc2VsZiwgdXNlcklkKTpcbiAgICAgICAgICAgIHVzZXJzID0gc2VsZi5hY2wudXNlcnNcbiAgICAgICAgICAgIHBhc3N3b3JkcyA9IHVzZXJzLl91c2VyX3Bhc3N3b3Jkc1xuICAgICAgICAgICAgcGFzc3dvcmQgPSBwYXNzd29yZHMuZ2V0KHVzZXJJZCwgXCJcIilcbiAgICAgICAgICAgIHJldHVybiBwYXNzd29yZFxuXG4qKkltcG9ydCoqOlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBjbGFzcyBJbXBvcnRab3BlVXNlcnMoQnJvd3NlclZpZXcpOlxuXG4gICAgICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBqc29uZmlsZT1Ob25lLCByZXR1cm5fanNvbj1GYWxzZSk6XG4gICAgICAgICAgICBpZiBqc29uZmlsZTpcbiAgICAgICAgICAgICAgICBzZWxmLnBvcnRhbCA9IGFwaS5wb3J0YWwuZ2V0KClcbiAgICAgICAgICAgICAgICBzdGF0dXMgPSBcInN1Y2Nlc3NcIlxuICAgICAgICAgICAgICAgIHRyeTpcbiAgICAgICAgICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShqc29uZmlsZSwgc3RyKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybl9qc29uID0gVHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGpzb24ubG9hZHMoanNvbmZpbGUpXG4gICAgICAgICAgICAgICAgICAgIGVsaWYgaXNpbnN0YW5jZShqc29uZmlsZSwgRmlsZVVwbG9hZCk6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ganNvbi5sb2Fkcyhqc29uZmlsZS5yZWFkKCkpXG4gICAgICAgICAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgICAgICAgICByYWlzZSAoXCJEYXRhIGlzIG5laXRoZXIgdGV4dCBub3IgdXBsb2FkLlwiKVxuICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZTpcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzID0gXCJlcnJvclwiXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKVxuICAgICAgICAgICAgICAgICAgICBhcGkucG9ydGFsLnNob3dfbWVzc2FnZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHVcIkZhaWx1cmUgd2hpbGUgdXBsb2FkaW5nOiB7fVwiLmZvcm1hdChlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q9c2VsZi5yZXF1ZXN0LFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVycyA9IHNlbGYuaW1wb3J0X21lbWJlcnMoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgbXNnID0gdVwiSW1wb3J0ZWQge30gbWVtYmVyc1wiLmZvcm1hdChtZW1iZXJzKVxuICAgICAgICAgICAgICAgICAgICBhcGkucG9ydGFsLnNob3dfbWVzc2FnZShtc2csIHNlbGYucmVxdWVzdClcbiAgICAgICAgICAgICAgICBpZiByZXR1cm5fanNvbjpcbiAgICAgICAgICAgICAgICAgICAgbXNnID0ge1wic3RhdGVcIjogc3RhdHVzLCBcIm1zZ1wiOiBtc2d9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBqc29uLmR1bXBzKG1zZylcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXgoKVxuXG4gICAgICAgIGRlZiBpbXBvcnRfbWVtYmVycyhzZWxmLCBkYXRhKTpcbiAgICAgICAgICAgIGFwcCA9IHNlbGYucG9ydGFsLl9fcGFyZW50X19cbiAgICAgICAgICAgIGFjbCA9IGFwcC5hY2xfdXNlcnNcbiAgICAgICAgICAgIGNvdW50ZXIgPSAwXG4gICAgICAgICAgICBmb3IgaXRlbSBpbiBkYXRhOlxuICAgICAgICAgICAgICAgIHVzZXJuYW1lID0gaXRlbVtcInVzZXJuYW1lXCJdXG4gICAgICAgICAgICAgICAgcGFzc3dvcmQgPSBpdGVtLnBvcChcInBhc3N3b3JkXCIpXG4gICAgICAgICAgICAgICAgcm9sZXMgPSBpdGVtLnBvcChcInJvbGVzXCIsIFtdKVxuICAgICAgICAgICAgICAgIGlmIG5vdCB1c2VybmFtZSBvciBub3QgcGFzc3dvcmQgb3Igbm90IHJvbGVzOlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIHRpdGxlID0gaXRlbS5wb3AoXCJ0aXRsZVwiLCBOb25lKVxuICAgICAgICAgICAgICAgIGFjbC51c2Vycy5hZGRVc2VyKHVzZXJuYW1lLCB0aXRsZSwgcGFzc3dvcmQpXG4gICAgICAgICAgICAgICAgZm9yIHJvbGUgaW4gcm9sZXM6XG4gICAgICAgICAgICAgICAgICAgIGFjbC5yb2xlcy5hc3NpZ25Sb2xlVG9QcmluY2lwYWwocm9sZSwgdXNlcm5hbWUpXG4gICAgICAgICAgICAgICAgY291bnRlciArPSAxXG4gICAgICAgICAgICByZXR1cm4gY291bnRlclxuXG5cbkV4cG9ydC9JbXBvcnQgcHJvcGVydGllcywgcmVnaXN0cnktc2V0dGluZ3MgYW5kIGluc3RhbGxlZCBhZGRvbnNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuV2hlbiB5b3UgbWlncmF0ZSBtdWx0aXBsZSBzaW1pbGFyIHNpdGVzIHRoYXQgYXJlIGNvbmZpZ3VyZWQgbWFudWFsbHkgaXQgY2FuIGJlIHVzZWZ1bCB0byBleHBvcnQgYW5kIGltcG9ydCBjb25maWd1cmF0aW9uIHRoYXQgd2FzIHNldCBieSBoYW5kLlxuXG5FeHBvcnQvSW1wb3J0IGluc3RhbGxlZCBzZXR0aW5ncyBhbmQgYWRkLW9uc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblxuVGhpcyBjdXN0b20gZXhwb3J0IGV4cG9ydHMgYW5kIGltcG9ydHMgc29tZSBzZWxlY3RlZCBzZXR0aW5ncyBhbmQgYWRkb25zIGZyb20gYSBQbG9uZSA0LjMgc2l0ZS5cblxuKipFeHBvcnQ6KipcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBjb2xsZWN0aXZlLmV4cG9ydGltcG9ydC5leHBvcnRfb3RoZXIgaW1wb3J0IEJhc2VFeHBvcnRcbiAgICBmcm9tIGxvZ2dpbmcgaW1wb3J0IGdldExvZ2dlclxuICAgIGZyb20gcGxvbmUgaW1wb3J0IGFwaVxuICAgIGZyb20gcGxvbmUucmVzdGFwaS5zZXJpYWxpemVyLmNvbnZlcnRlcnMgaW1wb3J0IGpzb25fY29tcGF0aWJsZVxuXG4gICAgbG9nZ2VyID0gZ2V0TG9nZ2VyKF9fbmFtZV9fKVxuXG5cbiAgICBjbGFzcyBFeHBvcnRTZXR0aW5ncyhCYXNlRXhwb3J0KTpcbiAgICAgICAgXCJcIlwiRXhwb3J0IHZhcmlvdXMgc2V0dGluZ3MgZm9yIGhhaWt1IHNpdGVzXG4gICAgICAgIFwiXCJcIlxuXG4gICAgICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBkb3dubG9hZF90b19zZXJ2ZXI9RmFsc2UpOlxuICAgICAgICAgICAgc2VsZi50aXRsZSA9IFwiRXhwb3J0IGluc3RhbGxlZCBhZGRvbnMgdmFyaW91cyBzZXR0aW5nc1wiXG4gICAgICAgICAgICBzZWxmLmRvd25sb2FkX3RvX3NlcnZlciA9IGRvd25sb2FkX3RvX3NlcnZlclxuICAgICAgICAgICAgaWYgbm90IHNlbGYucmVxdWVzdC5mb3JtLmdldChcImZvcm0uc3VibWl0dGVkXCIsIEZhbHNlKTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleCgpXG5cbiAgICAgICAgICAgIGRhdGEgPSBzZWxmLmV4cG9ydF9zZXR0aW5ncygpXG4gICAgICAgICAgICBzZWxmLmRvd25sb2FkKGRhdGEpXG5cbiAgICAgICAgZGVmIGV4cG9ydF9zZXR0aW5ncyhzZWxmKTpcbiAgICAgICAgICAgIHJlc3VsdHMgPSB7fVxuICAgICAgICAgICAgYWRkb25zID0gW11cbiAgICAgICAgICAgIHFpID0gYXBpLnBvcnRhbC5nZXRfdG9vbChcInBvcnRhbF9xdWlja2luc3RhbGxlclwiKVxuICAgICAgICAgICAgZm9yIHByb2R1Y3QgaW4gcWkubGlzdEluc3RhbGxlZFByb2R1Y3RzKCk6XG4gICAgICAgICAgICAgICAgaWYgcHJvZHVjdFtcImlkXCJdLnN0YXJ0c3dpdGgoXCJteXByb2plY3QuXCIpOlxuICAgICAgICAgICAgICAgICAgICBhZGRvbnMuYXBwZW5kKHByb2R1Y3RbXCJpZFwiXSlcbiAgICAgICAgICAgIHJlc3VsdHNbXCJhZGRvbnNcIl0gPSBhZGRvbnNcblxuICAgICAgICAgICAgcG9ydGFsID0gYXBpLnBvcnRhbC5nZXQoKVxuICAgICAgICAgICAgcmVnaXN0cnkgPSB7fVxuICAgICAgICAgICAgcmVnaXN0cnlbXCJwbG9uZS5lbWFpbF9mcm9tX25hbWVcIl0gPSBwb3J0YWwuZ2V0UHJvcGVydHkoJ2VtYWlsX2Zyb21fbmFtZScsICcnKVxuICAgICAgICAgICAgcmVnaXN0cnlbXCJwbG9uZS5lbWFpbF9mcm9tX2FkZHJlc3NcIl0gPSBwb3J0YWwuZ2V0UHJvcGVydHkoJ2VtYWlsX2Zyb21fYWRkcmVzcycsICcnKVxuICAgICAgICAgICAgcmVnaXN0cnlbXCJwbG9uZS5zbXRwX2hvc3RcIl0gPSBnZXRhdHRyKHBvcnRhbC5NYWlsSG9zdCwgJ3NtdHBfaG9zdCcsICcnKVxuICAgICAgICAgICAgcmVnaXN0cnlbXCJwbG9uZS5zbXRwX3BvcnRcIl0gPSBpbnQoZ2V0YXR0cihwb3J0YWwuTWFpbEhvc3QsICdzbXRwX3BvcnQnLCAyNSkpXG4gICAgICAgICAgICByZWdpc3RyeVtcInBsb25lLnNtdHBfdXNlcmlkXCJdID0gcG9ydGFsLk1haWxIb3N0LmdldCgnc210cF91c2VyX2lkJylcbiAgICAgICAgICAgIHJlZ2lzdHJ5W1wicGxvbmUuc210cF9wYXNzXCJdID0gcG9ydGFsLk1haWxIb3N0LmdldCgnc210cF9wYXNzJylcbiAgICAgICAgICAgIHJlZ2lzdHJ5W1wicGxvbmUuc2l0ZV90aXRsZVwiXSA9IHBvcnRhbC50aXRsZVxuXG4gICAgICAgICAgICBwb3J0YWxfcHJvcGVydGllcyA9IGFwaS5wb3J0YWwuZ2V0X3Rvb2woXCJwb3J0YWxfcHJvcGVydGllc1wiKVxuICAgICAgICAgICAgaXByb3BzID0gcG9ydGFsX3Byb3BlcnRpZXMuaW1hZ2luZ19wcm9wZXJ0aWVzXG4gICAgICAgICAgICByZWdpc3RyeVtcInBsb25lLmFsbG93ZWRfc2l6ZXNcIl0gPSBpcHJvcHMuZ2V0UHJvcGVydHkoJ2FsbG93ZWRfc2l6ZXMnKVxuICAgICAgICAgICAgcmVnaXN0cnlbXCJwbG9uZS5xdWFsaXR5XCJdID0gaXByb3BzLmdldFByb3BlcnR5KCdxdWFsaXR5JylcbiAgICAgICAgICAgIHNpdGVfcHJvcHMgPSBwb3J0YWxfcHJvcGVydGllcy5zaXRlX3Byb3BlcnRpZXNcbiAgICAgICAgICAgIGlmIHNpdGVfcHJvcHMuaGFzUHJvcGVydHkoXCJ3ZWJzdGF0c19qc1wiKTpcbiAgICAgICAgICAgICAgICByZWdpc3RyeVtcInBsb25lLndlYnN0YXRzX2pzXCJdID0gc2l0ZV9wcm9wcy53ZWJzdGF0c19qc1xuICAgICAgICAgICAgcmVzdWx0c1tcInJlZ2lzdHJ5XCJdID0ganNvbl9jb21wYXRpYmxlKHJlZ2lzdHJ5KVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHNcblxuXG4qKkltcG9ydDoqKlxuXG5UaGUgaW1wb3J0IGluc3RhbGxzIHRoZSBhZGRvbnMgYW5kIGxvYWQgdGhlIHNldHRpbmdzIGluIHRoZSByZWdpc3RyeS5cblNpbmNlIFBsb25lIDUgcG9ydGFsX3Byb3BlcnRpZXMgaXMgbm8gbG9uZ2VyIHVzZWQuXG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gbG9nZ2luZyBpbXBvcnQgZ2V0TG9nZ2VyXG4gICAgZnJvbSBwbG9uZSBpbXBvcnQgYXBpXG4gICAgZnJvbSBwbG9uZS5yZWdpc3RyeS5pbnRlcmZhY2VzIGltcG9ydCBJUmVnaXN0cnlcbiAgICBmcm9tIFByb2R1Y3RzLkNNRlBsb25lLnV0aWxzIGltcG9ydCBnZXRfaW5zdGFsbGVyXG4gICAgZnJvbSBQcm9kdWN0cy5GaXZlIGltcG9ydCBCcm93c2VyVmlld1xuICAgIGZyb20gem9wZS5jb21wb25lbnQgaW1wb3J0IGdldFV0aWxpdHlcbiAgICBmcm9tIFpQdWJsaXNoZXIuSFRUUFJlcXVlc3QgaW1wb3J0IEZpbGVVcGxvYWRcblxuICAgIGltcG9ydCBqc29uXG5cbiAgICBsb2dnZXIgPSBnZXRMb2dnZXIoX19uYW1lX18pXG5cbiAgICBjbGFzcyBJbXBvcnRTZXR0aW5ncyhCcm93c2VyVmlldyk6XG4gICAgICAgIFwiXCJcIkltcG9ydCB2YXJpb3VzIHNldHRpbmdzXCJcIlwiXG5cbiAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYsIGpzb25maWxlPU5vbmUsIHJldHVybl9qc29uPUZhbHNlKTpcbiAgICAgICAgICAgIGlmIGpzb25maWxlOlxuICAgICAgICAgICAgICAgIHNlbGYucG9ydGFsID0gYXBpLnBvcnRhbC5nZXQoKVxuICAgICAgICAgICAgICAgIHN0YXR1cyA9IFwic3VjY2Vzc1wiXG4gICAgICAgICAgICAgICAgdHJ5OlxuICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKGpzb25maWxlLCBzdHIpOlxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuX2pzb24gPSBUcnVlXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0ganNvbi5sb2Fkcyhqc29uZmlsZSlcbiAgICAgICAgICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKGpzb25maWxlLCBGaWxlVXBsb2FkKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBqc29uLmxvYWRzKGpzb25maWxlLnJlYWQoKSlcbiAgICAgICAgICAgICAgICAgICAgZWxzZTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhaXNlIChcIkRhdGEgaXMgbmVpdGhlciB0ZXh0IG5vciB1cGxvYWQuXCIpXG4gICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOlxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgPSBcImVycm9yXCJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGUpXG4gICAgICAgICAgICAgICAgICAgIGFwaS5wb3J0YWwuc2hvd19tZXNzYWdlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJGYWlsdXJlIHdoaWxlIHVwbG9hZGluZzoge31cIi5mb3JtYXQoZSksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0PXNlbGYucmVxdWVzdCxcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuaW1wb3J0X3NldHRpbmdzKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIG1zZyA9IFwiSW1wb3J0ZWQgYWRkb25zIGFuZCBzZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgICAgIGFwaS5wb3J0YWwuc2hvd19tZXNzYWdlKG1zZywgc2VsZi5yZXF1ZXN0KVxuICAgICAgICAgICAgICAgIGlmIHJldHVybl9qc29uOlxuICAgICAgICAgICAgICAgICAgICBtc2cgPSB7XCJzdGF0ZVwiOiBzdGF0dXMsIFwibXNnXCI6IG1zZ31cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGpzb24uZHVtcHMobXNnKVxuXG4gICAgICAgICAgICByZXR1cm4gc2VsZi5pbmRleCgpXG5cbiAgICAgICAgZGVmIGltcG9ydF9zZXR0aW5ncyhzZWxmLCBkYXRhKTpcbiAgICAgICAgICAgIGluc3RhbGxlciA9IGdldF9pbnN0YWxsZXIoc2VsZi5jb250ZXh0KVxuICAgICAgICAgICAgZm9yIGFkZG9uIGluIGRhdGFbXCJhZGRvbnNcIl06XG4gICAgICAgICAgICAgICAgaWYgbm90IGluc3RhbGxlci5pc19wcm9kdWN0X2luc3RhbGxlZChhZGRvbikgYW5kIGluc3RhbGxlci5pc19wcm9kdWN0X2luc3RhbGxhYmxlKGFkZG9uKTpcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFsbGVyLmluc3RhbGxfcHJvZHVjdChhZGRvbilcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oZlwiSW5zdGFsbGVkIGFkZG9uIHthZGRvbn1cIilcbiAgICAgICAgICAgIHJlZ2lzdHJ5ID0gZ2V0VXRpbGl0eShJUmVnaXN0cnkpXG4gICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkYXRhW1wicmVnaXN0cnlcIl0uaXRlbXMoKTpcbiAgICAgICAgICAgICAgICByZWdpc3RyeVtrZXldID0gdmFsdWVcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhmXCJJbXBvcnRlZCByZWNvcmQge2tleX06IHt2YWx1ZX1cIilcblxuXG5FeHBvcnQvSW1wb3J0IHJlZ2lzdHJ5IHNldHRpbmdzXG4qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5cblRoZSBwdWxsLXJlcXVlc3QgaHR0cHM6Ly9naXRodWIuY29tL2NvbGxlY3RpdmUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvcHVsbC8xMzAgaGFzIHZpZXdzIGBgQEBleHBvcnRfcmVnaXN0cnlgYCBhbmQgYGBAQGltcG9ydF9yZWdpc3RyeWBgLlxuVGhlc2Ugdmlld3MgZXhwb3J0IGFuZCBpbXBvcnQgcmVnaXN0cnkgcmVjb3JkcyB0aGF0IGRvIG5vdCB1c2UgdGhlIGRlZmF1bHQtc2V0dGluZyBzcGVjaWZpZWQgaW4gdGhlIHNjaGVtYSBmb3IgdGhhdCByZWdpc3RyeSByZWNvcmQuXG5UaGUgZXhwb3J0IGFsb25lIGNvdWxkIGFsc28gYmUgdXNlZnVsbCB0byBmaWd1cmUgb3V0IHdoaWNoIHNldHRpbmdzIHdlcmUgbW9kaWZpZWQgZm9yIGEgc2l0ZS5cblxuVGhhdCBjb2RlIHdpbGwgcHJvYmFibHkgbm90IGJlIG1lcmdlZCBidXQgeW91IGNhbiB1c2UgaXQgaW4geW91ciBvd24gcHJvamVjdHMuXG5cbk1pZ3JhdGUgUGxvbmVGb3JtR2VuIHRvIEVhc3lmb3JtXG4tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5UbyBiZSBhYmxlIHRvIGV4cG9ydCBQRkcgYXMgZWFzeWZvcm0geW91IHNob3VsZCB1c2UgdGhlIGJyYW5jaCBgYG1pZ3JhdGlvbl9mZWF0dXJlc18xLnhgYCBvZiBgYGNvbGxlY3RpdmUuZWFzeWZvcm1gYCBpbiB5b3VyIG9sZCBzaXRlLlxuRWFzeWZvcm0gZG9lcyBub3QgbmVlZCB0byBiZSBpbnN0YWxsZWQsIHdlIG9ubHkgbmVlZCB0aGUgbWV0aG9kcyBgYGZpZWxkc19tb2RlbGBgIGFuZCBgYGFjdGlvbnNfbW9kZWxgYC5cblxuRXhwb3J0OlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBkZWYgZGljdF9ob29rX2Zvcm1mb2xkZXIoc2VsZiwgaXRlbSwgb2JqKTpcbiAgICAgICAgaXRlbVtcIkB0eXBlXCJdID0gXCJFYXN5Rm9ybVwiXG4gICAgICAgIGl0ZW1bXCJpc19mb2xkZXJpc2hcIl0gPSBGYWxzZVxuXG4gICAgICAgIGZyb20gY29sbGVjdGl2ZS5lYXN5Zm9ybS5taWdyYXRpb24uZmllbGRzIGltcG9ydCBmaWVsZHNfbW9kZWxcbiAgICAgICAgZnJvbSBjb2xsZWN0aXZlLmVhc3lmb3JtLm1pZ3JhdGlvbi5hY3Rpb25zIGltcG9ydCBhY3Rpb25zX21vZGVsXG5cbiAgICAgICAgIyB0aGlzIGRvZXMgbW9zdCBvZiB0aGUgaGVhdnkgbGlmdGluZy4uLlxuICAgICAgICBpdGVtW1wiZmllbGRzX21vZGVsXCJdID0gZmllbGRzX21vZGVsKG9iailcbiAgICAgICAgaXRlbVtcImFjdGlvbnNfbW9kZWxcIl0gPSBhY3Rpb25zX21vZGVsKG9iailcblxuICAgICAgICAjIGhhbmRsZSB0aGFua3NwYWdlXG4gICAgICAgIHBmZ190aGFua3NwYWdlID0gb2JqLmdldChvYmouZ2V0VGhhbmtzUGFnZSgpLCBOb25lKVxuICAgICAgICBpZiBwZmdfdGhhbmtzcGFnZTpcbiAgICAgICAgICAgIGl0ZW1bXCJ0aGFua3N0aXRsZVwiXSA9IHBmZ190aGFua3NwYWdlLnRpdGxlXG4gICAgICAgICAgICBpdGVtW1widGhhbmtzZGVzY3JpcHRpb25cIl0gPSBwZmdfdGhhbmtzcGFnZS5EZXNjcmlwdGlvbigpXG4gICAgICAgICAgICBpdGVtW1wic2hvd0FsbFwiXSA9IHBmZ190aGFua3NwYWdlLnNob3dBbGxcbiAgICAgICAgICAgIGl0ZW1bXCJzaG93RmllbGRzXCJdID0gcGZnX3RoYW5rc3BhZ2Uuc2hvd0ZpZWxkc1xuICAgICAgICAgICAgaXRlbVtcImluY2x1ZGVFbXB0aWVzXCJdID0gcGZnX3RoYW5rc3BhZ2UuaW5jbHVkZUVtcHRpZXNcbiAgICAgICAgICAgIGl0ZW1bXCJ0aGFua3NQcm9sb2d1ZVwiXSA9IGpzb25fY29tcGF0aWJsZShwZmdfdGhhbmtzcGFnZS50aGFua3NQcm9sb2d1ZS5yYXcpXG4gICAgICAgICAgICBpdGVtW1widGhhbmtzRXBpbG9ndWVcIl0gPSBqc29uX2NvbXBhdGlibGUocGZnX3RoYW5rc3BhZ2UudGhhbmtzRXBpbG9ndWUucmF3KVxuXG4gICAgICAgICMgb3B0aW9uYWxcbiAgICAgICAgaXRlbVtcImV4cG9ydGltcG9ydC5faW5wdXRTdG9yYWdlXCJdID0gc2VsZi5leHBvcnRfc2F2ZWRfZGF0YShvYmopXG5cbiAgICAgICAgIyBEcm9wIHNvbWUgUEZHIGZpZWxkcyBubyBsb25nZXIgbmVlZGVkXG4gICAgICAgIG9ic29sZXRlX2ZpZWxkcyA9IFtcbiAgICAgICAgICAgIFwibGF5b3V0XCIsXG4gICAgICAgICAgICBcImFjdGlvbkFkYXB0ZXJcIixcbiAgICAgICAgICAgIFwiY2hlY2tBdXRoZW50aWNhdG9yXCIsXG4gICAgICAgICAgICBcImNvbnN0cmFpblR5cGVzTW9kZVwiLFxuICAgICAgICAgICAgXCJsb2NhdGlvblwiLFxuICAgICAgICAgICAgXCJ0aGFua3NQYWdlXCIsXG4gICAgICAgIF1cbiAgICAgICAgZm9yIGtleSBpbiBvYnNvbGV0ZV9maWVsZHM6XG4gICAgICAgICAgICBpdGVtLnBvcChrZXksIE5vbmUpXG5cbiAgICAgICAgIyBvcHRpb25hbDogZGlzYWJsZSB0YWJzIGZvciBpbXBvcnRlZCBmb3Jtc1xuICAgICAgICBpdGVtW1wiZm9ybV90YWJiaW5nXCJdID0gRmFsc2VcblxuICAgICAgICAjIGZpeCBzb21lIGN1c3RvbSB2YWxpZGF0b3JzXG4gICAgICAgIHJlcGxhY2VfbWFwcGluZyA9IHtcbiAgICAgICAgICAgIFwicmVxdWVzdC5mb3JtWydcIjogXCJyZXF1ZXN0LmZvcm1bJ2Zvcm0ud2lkZ2V0cy5cIixcbiAgICAgICAgICAgIFwicmVxdWVzdC5mb3JtLmdldCgnXCI6IFwicmVxdWVzdC5mb3JtLmdldCgnZm9ybS53aWRnZXRzLlwiLFxuICAgICAgICAgICAgXCJtZW1iZXIgYW5kIG1lbWJlci5pZCBvciAnJ1wiOiBcIm1lbWJlciBhbmQgbWVtYmVyLmdldFByb3BlcnR5KCdpZCcsICcnKSBvciAnJ1wiLFxuICAgICAgICB9XG5cbiAgICAgICAgIyBmaXggb3ZlcnJpZGVzIGluIGFjdGlvbnMgYW5kIGZpZWxkcyB0byB1c2UgZm9ybS53aWRnZXRzLnh5eiBpbnN0ZWFkIG9mIHh5elxuICAgICAgICBmb3Igc2NoZW1hIGluIFtcImFjdGlvbnNfbW9kZWxcIiwgXCJmaWVsZHNfbW9kZWxcIl06XG4gICAgICAgICAgICBmb3Igb2xkLCBuZXcgaW4gcmVwbGFjZV9tYXBwaW5nLml0ZW1zKCk6XG4gICAgICAgICAgICAgICAgaWYgb2xkIGluIGl0ZW1bc2NoZW1hXTpcbiAgICAgICAgICAgICAgICAgICAgaXRlbVtzY2hlbWFdID0gaXRlbVtzY2hlbWFdLnJlcGxhY2Uob2xkLCBuZXcpXG5cbiAgICAgICAgICAgICMgYWRkIHlvdXIgb3duIGZpZWxkcyBpZiB5b3UgaGF2ZSB0aGVzZSBpc3N1ZXMuLi5cbiAgICAgICAgICAgIGZvciBmaWVsZG5hbWUgaW4gW1xuICAgICAgICAgICAgICAgIFwiZW1haWxcIixcbiAgICAgICAgICAgICAgICBcInJlcGx5dG9cIixcbiAgICAgICAgICAgIF06XG4gICAgICAgICAgICAgICAgaWYgXCJyZXF1ZXN0L2Zvcm0ve31cIi5mb3JtYXQoZmllbGRuYW1lKSBpbiBpdGVtW3NjaGVtYV06XG4gICAgICAgICAgICAgICAgICAgIGl0ZW1bc2NoZW1hXSA9IGl0ZW1bc2NoZW1hXS5yZXBsYWNlKFwicmVxdWVzdC9mb3JtL3t9XCIuZm9ybWF0KGZpZWxkbmFtZSksIFwicHl0aG9uOiByZXF1ZXN0LmZvcm0uZ2V0KCdmb3JtLndpZGdldHMue30nKVwiLmZvcm1hdChmaWVsZG5hbWUpKVxuXG4gICAgICAgIHJldHVybiBpdGVtXG5cbiAgICBkZWYgZXhwb3J0X3NhdmVkX2RhdGEoc2VsZiwgb2JqKTpcbiAgICAgICAgYWN0aW9ucyA9IHt9XG4gICAgICAgIGZvciBkYXRhX2FkYXB0ZXIgaW4gb2JqLm9iamVjdFZhbHVlcyhcIkZvcm1TYXZlRGF0YUFkYXB0ZXJcIik6XG4gICAgICAgICAgICBkYXRhX2FkYXB0ZXJfbmFtZSA9IGRhdGFfYWRhcHRlci5nZXRJZCgpXG4gICAgICAgICAgICBhY3Rpb25zW2RhdGFfYWRhcHRlcl9uYW1lXSA9IHt9XG4gICAgICAgICAgICBjb2xzID0gZGF0YV9hZGFwdGVyLmdldENvbHVtbk5hbWVzKClcbiAgICAgICAgICAgIGNvbHVtbl9jb3VudF9taXNtYXRjaCA9IEZhbHNlXG4gICAgICAgICAgICBmb3IgaWR4LCByb3cgaW4gZW51bWVyYXRlKGRhdGFfYWRhcHRlci5nZXRTYXZlZEZvcm1JbnB1dCgpKTpcbiAgICAgICAgICAgICAgICBpZiBsZW4ocm93KSAhPSBsZW4oY29scyk6XG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbl9jb3VudF9taXNtYXRjaCA9IFRydWVcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmRlYnVnKFwiQ29sdW1uIGNvdW50IG1pc21hdGNoIGF0IHJvdyAlc1wiLCBpZHgpXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgZGF0YSA9IHt9XG4gICAgICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gemlwKGNvbHMsIHJvdyk6XG4gICAgICAgICAgICAgICAgICAgIGRhdGFba2V5XSA9IGpzb25fY29tcGF0aWJsZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICBpZF8gPSBpbnQodGltZSgpICogMTAwMClcbiAgICAgICAgICAgICAgICB3aGlsZSBpZF8gaW4gYWN0aW9uc1tkYXRhX2FkYXB0ZXJfbmFtZV06ICAjIGF2b2lkIGNvbGxpc2lvbnMgZHVyaW5nIGV4cG9ydFxuICAgICAgICAgICAgICAgICAgICBpZF8gKz0gMVxuICAgICAgICAgICAgICAgIGRhdGFbXCJpZFwiXSA9IGlkX1xuICAgICAgICAgICAgICAgIGFjdGlvbnNbZGF0YV9hZGFwdGVyX25hbWVdW2lkX10gPSBkYXRhXG4gICAgICAgICAgICBpZiBjb2x1bW5fY291bnRfbWlzbWF0Y2g6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXG4gICAgICAgICAgICAgICAgICAgIFwiTnVtYmVyIG9mIGNvbHVtbnMgZG9lcyBub3QgbWF0Y2ggZm9yIGFsbCByb3dzLiBTb21lIGRhdGEgd2VyZSBza2lwcGVkIGluIFwiXG4gICAgICAgICAgICAgICAgICAgIFwiZGF0YSBhZGFwdGVyICVzLyVzXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiL1wiLmpvaW4ob2JqLmdldFBoeXNpY2FsUGF0aCgpKSxcbiAgICAgICAgICAgICAgICAgICAgZGF0YV9hZGFwdGVyX25hbWUsXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICByZXR1cm4gYWN0aW9uc1xuXG5JbXBvcnQgZXhwb3J0ZWQgUGxvbmVGb3JtR2VuIGRhdGEgaW50byBFYXN5Zm9ybTpcblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZGVmIG9ial9ob29rX2Vhc3lmb3JtKHNlbGYsIG9iaiwgaXRlbSk6XG4gICAgICAgIGlmIG5vdCBpdGVtLmdldChcImV4cG9ydGltcG9ydC5faW5wdXRTdG9yYWdlXCIpOlxuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIGZyb20gY29sbGVjdGl2ZS5lYXN5Zm9ybS5hY3Rpb25zIGltcG9ydCBTYXZlZERhdGFCVHJlZVxuICAgICAgICBmcm9tIHBlcnNpc3RlbnQubWFwcGluZyBpbXBvcnQgUGVyc2lzdGVudE1hcHBpbmdcbiAgICAgICAgaWYgbm90IGhhc2F0dHIob2JqLCAnX2lucHV0U3RvcmFnZScpOlxuICAgICAgICAgICAgb2JqLl9pbnB1dFN0b3JhZ2UgPSBQZXJzaXN0ZW50TWFwcGluZygpXG4gICAgICAgIGZvciBuYW1lLCBkYXRhIGluIGl0ZW1bXCJleHBvcnRpbXBvcnQuX2lucHV0U3RvcmFnZVwiXS5pdGVtcygpOlxuICAgICAgICAgICAgb2JqLl9pbnB1dFN0b3JhZ2VbbmFtZV0gPSBTYXZlZERhdGFCVHJlZSgpXG4gICAgICAgICAgICBmb3Iga2V5LCByb3cgaW4gZGF0YS5pdGVtcygpOlxuICAgICAgICAgICAgICAgICBvYmouX2lucHV0U3RvcmFnZVtuYW1lXVtpbnQoa2V5KV0gPSByb3dcblxuXG5FeHBvcnQgYW5kIGltcG9ydCBjb2xsZWN0aXZlLmNvdmVyIGNvbnRlbnRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5FeHBvcnQ6XG5cbi4uIGNvZGUtYmxvY2s6OiBweXRob25cblxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuc2VyaWFsaXplciBpbXBvcnQgZ2V0X2R4X2Jsb2JfcGF0aFxuICAgIGZyb20gcGxvbmUuYXBwLnRleHRmaWVsZC52YWx1ZSBpbXBvcnQgUmljaFRleHRWYWx1ZVxuICAgIGZyb20gcGxvbmUubmFtZWRmaWxlLmZpbGUgaW1wb3J0IE5hbWVkQmxvYkltYWdlXG4gICAgZnJvbSBwbG9uZS5yZXN0YXBpLmludGVyZmFjZXMgaW1wb3J0IElKc29uQ29tcGF0aWJsZVxuICAgIGZyb20gejNjLnJlbGF0aW9uZmllbGQgaW1wb3J0IFJlbGF0aW9uVmFsdWVcbiAgICBmcm9tIHpvcGUuYW5ub3RhdGlvbi5pbnRlcmZhY2VzIGltcG9ydCBJQW5ub3RhdGlvbnNcblxuICAgIGRlZiBnbG9iYWxfZGljdF9ob29rKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgIGl0ZW0gPSBzZWxmLmhhbmRsZV9jb3ZlcihpdGVtLCBvYmopXG4gICAgICAgIHJldHVybiBpdGVtXG5cbiAgICBkZWYgaGFuZGxlX2NvdmVyKHNlbGYsIGl0ZW0sIG9iaik6XG4gICAgICAgIGlmIElDb3Zlci5wcm92aWRlZEJ5KG9iaik6XG4gICAgICAgICAgICBpdGVtWyd0aWxlcyddID0ge31cbiAgICAgICAgICAgIGFubm90YXRpb25zID0gSUFubm90YXRpb25zKG9iailcbiAgICAgICAgICAgIGZvciB0aWxlIGluIG9iai5nZXRfdGlsZXMoKTpcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uX2tleSA9ICdwbG9uZS50aWxlcy5kYXRhLnt9Jy5mb3JtYXQodGlsZVsnaWQnXSlcbiAgICAgICAgICAgICAgICBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbnMuZ2V0KGFubm90YXRpb25fa2V5LCBOb25lKVxuICAgICAgICAgICAgICAgIGlmIGFubm90YXRpb24gaXMgTm9uZTpcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgICAgICB0aWxlX2RhdGEgPSBzZWxmLnNlcmlhbGl6ZV90aWxlKGFubm90YXRpb24pXG4gICAgICAgICAgICAgICAgdGlsZV9kYXRhWyd0eXBlJ10gPSB0aWxlWyd0eXBlJ11cbiAgICAgICAgICAgICAgICBpdGVtWyd0aWxlcyddW3RpbGVbJ2lkJ11dID0gdGlsZV9kYXRhXG4gICAgICAgIHJldHVybiBpdGVtXG5cbiAgICBkZWYgc2VyaWFsaXplX3RpbGUoc2VsZiwgYW5ub3RhdGlvbik6XG4gICAgICAgIGRhdGEgPSB7fVxuICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBhbm5vdGF0aW9uLml0ZW1zKCk6XG4gICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBSaWNoVGV4dFZhbHVlKTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJhd1xuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBSZWxhdGlvblZhbHVlKTpcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvX29iamVjdC5VSUQoKVxuICAgICAgICAgICAgZWxpZiBpc2luc3RhbmNlKHZhbHVlLCBOYW1lZEJsb2JJbWFnZSk6XG4gICAgICAgICAgICAgICAgYmxvYmZpbGVwYXRoID0gZ2V0X2R4X2Jsb2JfcGF0aCh2YWx1ZSlcbiAgICAgICAgICAgICAgICBpZiBub3QgYmxvYmZpbGVwYXRoOlxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgICAgICAgIHZhbHVlID0ge1xuICAgICAgICAgICAgICAgICAgICBcImZpbGVuYW1lXCI6IHZhbHVlLmZpbGVuYW1lLFxuICAgICAgICAgICAgICAgICAgICBcImNvbnRlbnQtdHlwZVwiOiB2YWx1ZS5jb250ZW50VHlwZSxcbiAgICAgICAgICAgICAgICAgICAgXCJzaXplXCI6IHZhbHVlLmdldFNpemUoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJibG9iX3BhdGhcIjogYmxvYmZpbGVwYXRoLFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGFba2V5XSA9IElKc29uQ29tcGF0aWJsZSh2YWx1ZSwgTm9uZSlcbiAgICAgICAgcmV0dXJuIGRhdGFcblxuSW1wb3J0OlxuXG4uLiBjb2RlLWJsb2NrOjogcHl0aG9uXG5cbiAgICBmcm9tIGNvbGxlY3Rpb25zIGltcG9ydCBkZWZhdWx0ZGljdFxuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuaW1wb3J0X2NvbnRlbnQgaW1wb3J0IGdldF9hYnNvbHV0ZV9ibG9iX3BhdGhcbiAgICBmcm9tIHBsb25lLmFwcC50ZXh0ZmllbGQuaW50ZXJmYWNlcyBpbXBvcnQgSVJpY2hUZXh0XG4gICAgZnJvbSBwbG9uZS5hcHAudGV4dGZpZWxkLmludGVyZmFjZXMgaW1wb3J0IElSaWNoVGV4dFZhbHVlXG4gICAgZnJvbSBwbG9uZS5uYW1lZGZpbGUuZmlsZSBpbXBvcnQgTmFtZWRCbG9iSW1hZ2VcbiAgICBmcm9tIHBsb25lLm5hbWVkZmlsZS5pbnRlcmZhY2VzIGltcG9ydCBJTmFtZWRCbG9iSW1hZ2VGaWVsZFxuICAgIGZyb20gcGxvbmUudGlsZXMuaW50ZXJmYWNlcyBpbXBvcnQgSVRpbGVUeXBlXG4gICAgZnJvbSB6b3BlLmFubm90YXRpb24uaW50ZXJmYWNlcyBpbXBvcnQgSUFubm90YXRpb25zXG4gICAgZnJvbSB6b3BlLmNvbXBvbmVudCBpbXBvcnQgZ2V0VXRpbGl0aWVzRm9yXG4gICAgZnJvbSB6b3BlLnNjaGVtYSBpbXBvcnQgZ2V0RmllbGRzSW5PcmRlclxuXG4gICAgQ09WRVJfQ09OVEVOVCA9IFtcbiAgICAgICAgXCJjb2xsZWN0aXZlLmNvdmVyLmNvbnRlbnRcIixcbiAgICBdXG5cbiAgICBkZWYgZ2xvYmFsX29ial9ob29rKHNlbGYsIG9iaiwgaXRlbSk6XG4gICAgICAgIGlmIGl0ZW1bXCJAdHlwZVwiXSBpbiBDT1ZFUl9DT05URU5UIGFuZCBcInRpbGVzXCIgaW4gaXRlbTpcbiAgICAgICAgICAgIGl0ZW0gPSBzZWxmLmltcG9ydF90aWxlcyhvYmosIGl0ZW0pXG5cbiAgICBkZWYgaW1wb3J0X3RpbGVzKHNlbGYsIG9iaiwgaXRlbSk6XG4gICAgICAgIFJJQ0hURVhUX1RJTEVTID0gZGVmYXVsdGRpY3QobGlzdClcbiAgICAgICAgSU1BR0VfVElMRVMgPSBkZWZhdWx0ZGljdChsaXN0KVxuICAgICAgICBmb3IgdGlsZV9uYW1lLCB0aWxlX3R5cGUgaW4gZ2V0VXRpbGl0aWVzRm9yKElUaWxlVHlwZSk6XG4gICAgICAgICAgICBmb3IgZmllbGRuYW1lLCBmaWVsZCBpbiBnZXRGaWVsZHNJbk9yZGVyKHRpbGVfdHlwZS5zY2hlbWEpOlxuICAgICAgICAgICAgICAgIGlmIElSaWNoVGV4dC5wcm92aWRlZEJ5KGZpZWxkKTpcbiAgICAgICAgICAgICAgICAgICAgUklDSFRFWFRfVElMRVNbdGlsZV9uYW1lXS5hcHBlbmQoZmllbGRuYW1lKVxuICAgICAgICAgICAgICAgIGlmIElOYW1lZEJsb2JJbWFnZUZpZWxkLnByb3ZpZGVkQnkoZmllbGQpOlxuICAgICAgICAgICAgICAgICAgICBJTUFHRV9USUxFU1t0aWxlX25hbWVdLmFwcGVuZChmaWVsZG5hbWUpXG5cbiAgICAgICAgYW5ub3RhdGlvbnMgPSBJQW5ub3RhdGlvbnMob2JqKVxuICAgICAgICBwcmVmaXggPSBcInBsb25lLnRpbGVzLmRhdGEuXCJcbiAgICAgICAgZm9yIHVpZCwgdGlsZSBpbiBpdGVtW1widGlsZXNcIl0uaXRlbXMoKTpcbiAgICAgICAgICAgICMgVE9ETzogTWF5YmUgY3JlYXRlIGFsbCB0aWxlcyB0aGF0IGRvIG5vdCBuZWVkIHRvIGJlIGRlZmZlcnJlZD9cbiAgICAgICAgICAgIGtleSA9IHByZWZpeCArIHVpZFxuICAgICAgICAgICAgdGlsZV9uYW1lID0gdGlsZS5wb3AoXCJ0eXBlXCIsIE5vbmUpXG4gICAgICAgICAgICAjIGZpcnN0IHNldCByYXcgZGF0YVxuICAgICAgICAgICAgYW5ub3RhdGlvbnNba2V5XSA9IGl0ZW1bXCJ0aWxlc1wiXVt1aWRdXG4gICAgICAgICAgICBmb3IgZmllbGRuYW1lIGluIFJJQ0hURVhUX1RJTEVTLmdldCh0aWxlX25hbWUsIFtdKTpcbiAgICAgICAgICAgICAgICByYXcgPSBhbm5vdGF0aW9uc1trZXldW2ZpZWxkbmFtZV1cbiAgICAgICAgICAgICAgICBpZiByYXcgaXMgbm90IE5vbmUgYW5kIG5vdCBJUmljaFRleHRWYWx1ZS5wcm92aWRlZEJ5KHJhdyk6XG4gICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25zW2tleV1bZmllbGRuYW1lXSA9IFJpY2hUZXh0VmFsdWUocmF3LCBcInRleHQvaHRtbFwiLCBcInRleHQveC1odG1sLXNhZmVcIilcbiAgICAgICAgICAgIGZvciBmaWVsZG5hbWUgaW4gSU1BR0VfVElMRVMuZ2V0KHRpbGVfbmFtZSwgW10pOlxuICAgICAgICAgICAgICAgIGRhdGEgPSBhbm5vdGF0aW9uc1trZXldW2ZpZWxkbmFtZV1cbiAgICAgICAgICAgICAgICBpZiBkYXRhIGlzIG5vdCBOb25lOlxuICAgICAgICAgICAgICAgICAgICBibG9iX3BhdGggPSBkYXRhLmdldChcImJsb2JfcGF0aFwiKVxuICAgICAgICAgICAgICAgICAgICBpZiBub3QgYmxvYl9wYXRoOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgICAgICAgICBhYnNfYmxvYl9wYXRoID0gZ2V0X2Fic29sdXRlX2Jsb2JfcGF0aChvYmosIGJsb2JfcGF0aClcbiAgICAgICAgICAgICAgICAgICAgaWYgbm90IGFic19ibG9iX3BhdGg6XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhcIkJsb2IgcGF0aCAlcyBmb3IgdGlsZSAlcyBvZiAlcyAlcyBkb2VzIG5vdCBleGlzdCFcIiwgYmxvYl9wYXRoLCB0aWxlLCBvYmoucG9ydGFsX3R5cGUsIG9iai5hYnNvbHV0ZV91cmwoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICAgICAgICAgICMgRGV0ZXJtaW5lIHRoZSBjbGFzcyB0byB1c2U6IGZpbGUgb3IgaW1hZ2UuXG4gICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lID0gZGF0YVtcImZpbGVuYW1lXCJdXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZSA9IGRhdGFbXCJjb250ZW50LXR5cGVcIl1cblxuICAgICAgICAgICAgICAgICAgICAjIFdyaXRlIHRoZSBmaWVsZC5cbiAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKGFic19ibG9iX3BhdGgsIFwicmJcIikgYXMgbXlmaWxlOlxuICAgICAgICAgICAgICAgICAgICAgICAgYmxvYmRhdGEgPSBteWZpbGUucmVhZCgpXG4gICAgICAgICAgICAgICAgICAgIGltYWdlID0gTmFtZWRCbG9iSW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhPWJsb2JkYXRhLFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFR5cGU9Y29udGVudF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU9ZmlsZW5hbWUsXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbnNba2V5XVtmaWVsZG5hbWVdID0gaW1hZ2VcbiAgICAgICAgcmV0dXJuIGl0ZW1cblxuXG5GaXhpbmcgaW52YWxpZCBjb2xsZWN0aW9uIHF1ZXJpZXNcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5Tb21lIHF1ZXJpZXMgY2hhbmdlcyBiZXR3ZWVuIFBsb25lIDQgYW5kIDUuXG5UaGlzIGZpeGVzIHRoZSBpc3N1ZXMuXG5cblRoZSBhY3R1YWwgbWlncmF0aW9uIG9mIHRvcGljcyB0byBjb2xsZWN0aW9ucyBpbiBgYGNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LnNlcmlhbGl6ZXIuU2VyaWFsaXplVG9waWNUb0pzb25gYCBkb2VzIG5vdCAoeWV0KSB0YWtlIGNhcmUgb2YgdGhhdC5cblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgY2xhc3MgQ3VzdG9tSW1wb3J0Q29udGVudChJbXBvcnRDb250ZW50KTpcblxuICAgICAgICBkZWYgZ2xvYmFsX2RpY3RfaG9vayhzZWxmLCBpdGVtKTpcbiAgICAgICAgICAgIGlmIGl0ZW1bXCJAdHlwZVwiXSBpbiBbXCJDb2xsZWN0aW9uXCIsIFwiVG9waWNcIl06XG4gICAgICAgICAgICAgICAgaXRlbSA9IHNlbGYuZml4X3F1ZXJ5KGl0ZW0pXG5cbiAgICAgICAgZGVmIGZpeF9xdWVyeShzZWxmLCBpdGVtKTpcbiAgICAgICAgICAgIGl0ZW1bXCJAdHlwZVwiXSA9IFwiQ29sbGVjdGlvblwiXG4gICAgICAgICAgICBxdWVyeSA9IGl0ZW0ucG9wKFwicXVlcnlcIiwgW10pXG4gICAgICAgICAgICBpZiBub3QgcXVlcnk6XG4gICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJEcm9wIGl0ZW0gd2l0aG91dCBxdWVyeTogJXNcIiwgaXRlbVtcIkBpZFwiXSlcbiAgICAgICAgICAgICAgICByZXR1cm5cblxuICAgICAgICAgICAgZml4ZWRfcXVlcnkgPSBbXVxuICAgICAgICAgICAgaW5kZXhlc190b19maXggPSBbXG4gICAgICAgICAgICAgICAgXCJwb3J0YWxfdHlwZVwiLFxuICAgICAgICAgICAgICAgIFwicmV2aWV3X3N0YXRlXCIsXG4gICAgICAgICAgICAgICAgXCJDcmVhdG9yXCIsXG4gICAgICAgICAgICAgICAgXCJTdWJqZWN0XCIsXG4gICAgICAgICAgICBdXG4gICAgICAgICAgICBvcGVyYXRvcl9tYXBwaW5nID0ge1xuICAgICAgICAgICAgICAgICMgb2xkIC0+IG5ld1xuICAgICAgICAgICAgICAgIFwicGxvbmUuYXBwLnF1ZXJ5c3RyaW5nLm9wZXJhdGlvbi5zZWxlY3Rpb24uaXNcIjpcbiAgICAgICAgICAgICAgICAgICAgXCJwbG9uZS5hcHAucXVlcnlzdHJpbmcub3BlcmF0aW9uLnNlbGVjdGlvbi5hbnlcIixcbiAgICAgICAgICAgICAgICBcInBsb25lLmFwcC5xdWVyeXN0cmluZy5vcGVyYXRpb24uc3RyaW5nLmlzXCI6XG4gICAgICAgICAgICAgICAgICAgIFwicGxvbmUuYXBwLnF1ZXJ5c3RyaW5nLm9wZXJhdGlvbi5zZWxlY3Rpb24uYW55XCIsXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciBjcml0IGluIHF1ZXJ5OlxuICAgICAgICAgICAgICAgIGlmIGNyaXRbXCJpXCJdID09IFwicG9ydGFsX3R5cGVcIiBhbmQgbGVuKGNyaXRbXCJ2XCJdKSA+IDMwOlxuICAgICAgICAgICAgICAgICAgICAjIENyaXRlcmlvbiBpcyBhbGwgdHlwZXNcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcblxuICAgICAgICAgICAgICAgIGlmIGNyaXRbXCJvXCJdLmVuZHN3aXRoKFwicmVsYXRpdmVQYXRoXCIpIGFuZCBjcml0W1widlwiXSA9PSBcIi4uXCI6XG4gICAgICAgICAgICAgICAgICAgICMgcmVsYXRpdmVQYXRoIG5vIGxvbmdlciBhY2NlcHRzIC4uXG4gICAgICAgICAgICAgICAgICAgIGNyaXRbXCJ2XCJdID0gXCIuLjo6MVwiXG5cbiAgICAgICAgICAgICAgICBpZiBjcml0W1wiaVwiXSBpbiBpbmRleGVzX3RvX2ZpeDpcbiAgICAgICAgICAgICAgICAgICAgZm9yIG9sZF9vcGVyYXRvciwgbmV3X29wZXJhdG9yIGluIG9wZXJhdG9yX21hcHBpbmcuaXRlbXMoKTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGNyaXRbXCJvXCJdID09IG9sZF9vcGVyYXRvcjpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcml0W1wib1wiXSA9IG5ld19vcGVyYXRvclxuXG4gICAgICAgICAgICAgICAgaWYgY3JpdFtcImlcIl0gPT0gXCJwb3J0YWxfdHlwZVwiOlxuICAgICAgICAgICAgICAgICAgICAjIFNvbWUgdHlwZXMgbWF5IGhhdmUgY2hhbmdlZCB0aGVpciBuYW1lc1xuICAgICAgICAgICAgICAgICAgICBmaXhlZF90eXBlcyA9IFtdXG4gICAgICAgICAgICAgICAgICAgIGZvciBwb3J0YWxfdHlwZSBpbiBjcml0W1widlwiXTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkX3R5cGUgPSBQT1JUQUxfVFlQRV9NQVBQSU5HLmdldChwb3J0YWxfdHlwZSwgcG9ydGFsX3R5cGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZF90eXBlcy5hcHBlbmQoZml4ZWRfdHlwZSlcbiAgICAgICAgICAgICAgICAgICAgY3JpdFtcInZcIl0gPSBsaXN0KHNldChmaXhlZF90eXBlcykpXG5cbiAgICAgICAgICAgICAgICBpZiBjcml0W1wiaVwiXSA9PSBcInJldmlld19zdGF0ZVwiOlxuICAgICAgICAgICAgICAgICAgICAjIFJldmlldyBzdGF0ZXMgbWF5IGhhdmUgY2hhbmdlZCB0aGVpciBuYW1lc1xuICAgICAgICAgICAgICAgICAgICBmaXhlZF9zdGF0ZXMgPSBbXVxuICAgICAgICAgICAgICAgICAgICBmb3IgcmV2aWV3X3N0YXRlIGluIGNyaXRbXCJ2XCJdOlxuICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRfc3RhdGUgPSBSRVZJRVdfU1RBVEVfTUFQUElORy5nZXQocmV2aWV3X3N0YXRlLCByZXZpZXdfc3RhdGUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZF9zdGF0ZXMuYXBwZW5kKGZpeGVkX3N0YXRlKVxuICAgICAgICAgICAgICAgICAgICBjcml0W1widlwiXSA9IGxpc3Qoc2V0KGZpeGVkX3N0YXRlcykpXG5cbiAgICAgICAgICAgICAgICBpZiBjcml0W1wib1wiXSA9PSBcInBsb25lLmFwcC5xdWVyeXN0cmluZy5vcGVyYXRpb24uc3RyaW5nLmN1cnJlbnRVc2VyXCI6XG4gICAgICAgICAgICAgICAgICAgIGNyaXRbXCJ2XCJdID0gXCJcIlxuXG4gICAgICAgICAgICAgICAgZml4ZWRfcXVlcnkuYXBwZW5kKGNyaXQpXG4gICAgICAgICAgICBpdGVtW1wicXVlcnlcIl0gPSBmaXhlZF9xdWVyeVxuXG4gICAgICAgICAgICBpZiBub3QgaXRlbVtcInF1ZXJ5XCJdOlxuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiRHJvcCBjb2xsZWN0aW9uIHdpdGhvdXQgcXVlcnk6ICVzXCIsIGl0ZW1bXCJAaWRcIl0pXG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICByZXR1cm4gaXRlbVxuXG5cbk1pZ3JhdGUgdG8gVm9sdG9cbi0tLS0tLS0tLS0tLS0tLS1cblxuWW91IGNhbiByZXVzZSB0aGUgbWlncmF0aW9uLWNvZGUgcHJvdmlkZWQgYnkgYGBAQG1pZ3JhdGVfdG9fdm9sdG9gYCBpbiBgYHBsb25lLnZvbHRvYGAgaW4gYSBtaWdyYXRpb24uXG5UaGUgZm9sbG93aW5nIGV4YW1wbGUgKHVzZWQgZm9yIG1pZ3JhdGluZyBodHRwczovL3Bsb25lLm9yZyB0byBWb2x0bykgY2FuIGJlIHVzZWQgdG8gbWlncmF0ZSBhIHNpdGUgZnJvbSBhbnkgb2xkZXIgdmVyc2lvbiB0byBQbG9uZSA2IHdpdGggVm9sdG8uXG5cbllvdSBuZWVkIHRvIGhhdmUgdGhlIEJsb2NrcyBDb252ZXJzaW9uIFRvb2wgKGh0dHBzOi8vZ2l0aHViLmNvbS9wbG9uZS9ibG9ja3MtY29udmVyc2lvbi10b29sKSBydW5uaW5nIHRoYXQgdGFrZXMgY2FyZSBvZiBtaWdyYXRpbmcgcmljaHRleHQtdmFsdWVzIHRvIFZvbHRvLWJsb2Nrcy5cblxuU2VlIGh0dHBzOi8vNi5kb2NzLnBsb25lLm9yZy9iYWNrZW5kL3VwZ3JhZGluZy92ZXJzaW9uLXNwZWNpZmljLW1pZ3JhdGlvbi9taWdyYXRlLXRvLXZvbHRvLmh0bWwgZm9yIG1vcmUgZGV0YWlscyBvbiB0aGUgY2hhbmdlcyB0aGUgbWlncmF0aW9uIHRvIFZvbHRvIGRvZXMuXG5cblxuLi4gY29kZS1ibG9jazo6IHB5dGhvblxuXG4gICAgZnJvbSBBcHAuY29uZmlnIGltcG9ydCBnZXRDb25maWd1cmF0aW9uXG4gICAgZnJvbSBiczQgaW1wb3J0IEJlYXV0aWZ1bFNvdXBcbiAgICBmcm9tIGNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LmZpeF9odG1sIGltcG9ydCBmaXhfaHRtbF9pbl9jb250ZW50X2ZpZWxkc1xuICAgIGZyb20gY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQuZml4X2h0bWwgaW1wb3J0IGZpeF9odG1sX2luX3BvcnRsZXRzXG4gICAgZnJvbSBjb250ZW50aW1wb3J0LmludGVyZmFjZXMgaW1wb3J0IElDb250ZW50aW1wb3J0TGF5ZXJcbiAgICBmcm9tIGxvZ2dpbmcgaW1wb3J0IGdldExvZ2dlclxuICAgIGZyb20gcGF0aGxpYiBpbXBvcnQgUGF0aFxuICAgIGZyb20gcGxvbmUgaW1wb3J0IGFwaVxuICAgIGZyb20gcGxvbmUudm9sdG8uYnJvd3Nlci5taWdyYXRlX3RvX3ZvbHRvIGltcG9ydCBtaWdyYXRlX3JpY2h0ZXh0X3RvX2Jsb2Nrc1xuICAgIGZyb20gcGxvbmUudm9sdG8uc2V0dXBoYW5kbGVycyBpbXBvcnQgYWRkX2JlaGF2aW9yXG4gICAgZnJvbSBwbG9uZS52b2x0by5zZXR1cGhhbmRsZXJzIGltcG9ydCByZW1vdmVfYmVoYXZpb3JcbiAgICBmcm9tIFByb2R1Y3RzLkNNRlBsb25lLnV0aWxzIGltcG9ydCBnZXRfaW5zdGFsbGVyXG4gICAgZnJvbSBQcm9kdWN0cy5GaXZlIGltcG9ydCBCcm93c2VyVmlld1xuICAgIGZyb20gem9wZS5pbnRlcmZhY2UgaW1wb3J0IGFsc29Qcm92aWRlc1xuXG4gICAgaW1wb3J0IHJlcXVlc3RzXG4gICAgaW1wb3J0IHRyYW5zYWN0aW9uXG5cbiAgICBsb2dnZXIgPSBnZXRMb2dnZXIoX19uYW1lX18pXG5cbiAgICBERUZBVUxUX0FERE9OUyA9IFtdXG5cblxuICAgIGNsYXNzIEltcG9ydEFsbChCcm93c2VyVmlldyk6XG5cbiAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYpOlxuXG4gICAgICAgICAgICByZXF1ZXN0ID0gc2VsZi5yZXF1ZXN0XG5cbiAgICAgICAgICAgICMgQ2hlY2sgaWYgQmxvY2tzLWNvbnZlcnNpb24tdG9vbCBpcyBydW5uaW5nXG4gICAgICAgICAgICBoZWFkZXJzID0ge1xuICAgICAgICAgICAgICAgIFwiQWNjZXB0XCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3QoXG4gICAgICAgICAgICAgICAgXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvaHRtbFwiLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249e1wiaHRtbFwiOiBcIjxwPnRleHQ8L3A+XCJ9XG4gICAgICAgICAgICApXG4gICAgICAgICAgICByLnJhaXNlX2Zvcl9zdGF0dXMoKVxuXG4gICAgICAgICAgICAjIFN1Ym1pdCBhIHNpbXBsZSBmb3JtIHRlbXBsYXRlIHRvIHRyaWdnZXIgdGhlIGltcG9ydFxuICAgICAgICAgICAgaWYgbm90IHJlcXVlc3QuZm9ybS5nZXQoXCJmb3JtLnN1Ym1pdHRlZFwiLCBGYWxzZSk6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbGYuaW5kZXgoKVxuXG4gICAgICAgICAgICBwb3J0YWwgPSBhcGkucG9ydGFsLmdldCgpXG4gICAgICAgICAgICBhbHNvUHJvdmlkZXMocmVxdWVzdCwgSUNvbnRlbnRpbXBvcnRMYXllcilcblxuICAgICAgICAgICAgaW5zdGFsbGVyID0gZ2V0X2luc3RhbGxlcihwb3J0YWwpXG4gICAgICAgICAgICBpZiBub3QgaW5zdGFsbGVyLmlzX3Byb2R1Y3RfaW5zdGFsbGVkKFwiY29udGVudGltcG9ydFwiKTpcbiAgICAgICAgICAgICAgICBpbnN0YWxsZXIuaW5zdGFsbF9wcm9kdWN0KFwiY29udGVudGltcG9ydFwiKVxuXG4gICAgICAgICAgICAjIGluc3RhbGwgcmVxdWlyZWQgYWRkb25zXG4gICAgICAgICAgICBmb3IgYWRkb24gaW4gREVGQVVMVF9BRERPTlM6XG4gICAgICAgICAgICAgICAgaWYgbm90IGluc3RhbGxlci5pc19wcm9kdWN0X2luc3RhbGxlZChhZGRvbik6XG4gICAgICAgICAgICAgICAgICAgIGluc3RhbGxlci5pbnN0YWxsX3Byb2R1Y3QoYWRkb24pXG5cbiAgICAgICAgICAgICMgRmFrZSB0aGUgdGFyZ2V0IGJlaW5nIGEgY2xhc3NpYyBzaXRlIGV2ZW4gdGhvdWdoIHBsb25lLnZvbHRvIGlzIGluc3RhbGxlZC4uLlxuICAgICAgICAgICAgIyAxLiBBbGxvdyBGb2xkZXJzIGFuZCBDb2xsZWN0aW9ucyAodGhleSBhcmUgZGlzYWJsZWQgaW4gVm9sdG8gYnkgZGVmYXVsdClcbiAgICAgICAgICAgIHBvcnRhbF90eXBlcyA9IGFwaS5wb3J0YWwuZ2V0X3Rvb2woXCJwb3J0YWxfdHlwZXNcIilcbiAgICAgICAgICAgIHBvcnRhbF90eXBlc1tcIkNvbGxlY3Rpb25cIl0uZ2xvYmFsX2FsbG93ID0gVHJ1ZVxuICAgICAgICAgICAgcG9ydGFsX3R5cGVzW1wiRm9sZGVyXCJdLmdsb2JhbF9hbGxvdyA9IFRydWVcbiAgICAgICAgICAgICMgMi4gRW5hYmxlIHJpY2h0ZXh0IGJlaGF2aW9yIChvdGhlcndpc2Ugbm8gdGV4dCB3aWxsIGJlIGltcG9ydGVkKVxuICAgICAgICAgICAgZm9yIHR5cGVfIGluIFtcIkRvY3VtZW50XCIsIFwiTmV3cyBJdGVtXCIsIFwiRXZlbnRcIl06XG4gICAgICAgICAgICAgICAgYWRkX2JlaGF2aW9yKHR5cGVfLCBcInBsb25lLnJpY2h0ZXh0XCIpXG5cbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG4gICAgICAgICAgICBjZmcgPSBnZXRDb25maWd1cmF0aW9uKClcbiAgICAgICAgICAgIGRpcmVjdG9yeSA9IFBhdGgoY2ZnLmNsaWVudGhvbWUpIC8gXCJpbXBvcnRcIlxuXG4gICAgICAgICAgICAjIEltcG9ydCBjb250ZW50XG4gICAgICAgICAgICB2aWV3ID0gYXBpLmNvbnRlbnQuZ2V0X3ZpZXcoXCJpbXBvcnRfY29udGVudFwiLCBwb3J0YWwsIHJlcXVlc3QpXG4gICAgICAgICAgICByZXF1ZXN0LmZvcm1bXCJmb3JtLnN1Ym1pdHRlZFwiXSA9IFRydWVcbiAgICAgICAgICAgIHJlcXVlc3QuZm9ybVtcImNvbW1pdFwiXSA9IDUwMFxuICAgICAgICAgICAgdmlldyhzZXJ2ZXJfZmlsZT1cIlBsb25lLmpzb25cIiwgcmV0dXJuX2pzb249VHJ1ZSlcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgICMgUnVuIGFsbCBvdGhlciBpbXBvcnRzXG4gICAgICAgICAgICBvdGhlcl9pbXBvcnRzID0gW1xuICAgICAgICAgICAgICAgIFwicmVsYXRpb25zXCIsXG4gICAgICAgICAgICAgICAgXCJtZW1iZXJzXCIsXG4gICAgICAgICAgICAgICAgXCJ0cmFuc2xhdGlvbnNcIixcbiAgICAgICAgICAgICAgICBcImxvY2Fscm9sZXNcIixcbiAgICAgICAgICAgICAgICBcIm9yZGVyaW5nXCIsXG4gICAgICAgICAgICAgICAgXCJkZWZhdWx0cGFnZXNcIixcbiAgICAgICAgICAgICAgICBcImRpc2N1c3Npb25cIixcbiAgICAgICAgICAgICAgICBcInBvcnRsZXRzXCIsICAjIG5vdCByZWFsbHkgdXNlZnVsIGluIFZvbHRvXG4gICAgICAgICAgICAgICAgXCJyZWRpcmVjdHNcIixcbiAgICAgICAgICAgIF1cbiAgICAgICAgICAgIGZvciBuYW1lIGluIG90aGVyX2ltcG9ydHM6XG4gICAgICAgICAgICAgICAgdmlldyA9IGFwaS5jb250ZW50LmdldF92aWV3KGZcImltcG9ydF97bmFtZX1cIiwgcG9ydGFsLCByZXF1ZXN0KVxuICAgICAgICAgICAgICAgIHBhdGggPSBQYXRoKGRpcmVjdG9yeSkgLyBmXCJleHBvcnRfe25hbWV9Lmpzb25cIlxuICAgICAgICAgICAgICAgIGlmIHBhdGguZXhpc3RzKCk6XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMgPSB2aWV3KGpzb25maWxlPXBhdGgucmVhZF90ZXh0KCksIHJldHVybl9qc29uPVRydWUpXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHJlc3VsdHMpXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zYWN0aW9uLmdldCgpLm5vdGUoZlwiRmluaXNoZWQgaW1wb3J0X3tuYW1lfVwiKVxuICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbi5jb21taXQoKVxuICAgICAgICAgICAgICAgIGVsc2U6XG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGZcIk1pc3NpbmcgZmlsZToge3BhdGh9XCIpXG5cbiAgICAgICAgICAgICMgT3B0aW9uYWw6IFJ1biBodG1sLWZpeGVycyBvbiByaWNodGV4dFxuICAgICAgICAgICAgZml4ZXJzID0gW2FuY2hvcl9maXhlcl1cbiAgICAgICAgICAgIHJlc3VsdHMgPSBmaXhfaHRtbF9pbl9jb250ZW50X2ZpZWxkcyhmaXhlcnM9Zml4ZXJzKVxuICAgICAgICAgICAgbXNnID0gXCJGaXhlZCBodG1sIGZvciB7fSBjb250ZW50IGl0ZW1zXCIuZm9ybWF0KHJlc3VsdHMpXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhtc2cpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgIHJlc3VsdHMgPSBmaXhfaHRtbF9pbl9wb3J0bGV0cygpXG4gICAgICAgICAgICBtc2cgPSBcIkZpeGVkIGh0bWwgZm9yIHt9IHBvcnRsZXRzXCIuZm9ybWF0KHJlc3VsdHMpXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhtc2cpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgIHZpZXcgPSBhcGkuY29udGVudC5nZXRfdmlldyhcInVwZGF0ZUxpbmtJbnRlZ3JpdHlJbmZvcm1hdGlvblwiLCBwb3J0YWwsIHJlcXVlc3QpXG4gICAgICAgICAgICByZXN1bHRzID0gdmlldy51cGRhdGUoKVxuICAgICAgICAgICAgbXNnID0gZlwiVXBkYXRlZCBsaW5raW50ZWdyaXR5IGZvciB7cmVzdWx0c30gaXRlbXNcIlxuICAgICAgICAgICAgbG9nZ2VyLmluZm8obXNnKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0KCkubm90ZShtc2cpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jb21taXQoKVxuXG4gICAgICAgICAgICAjIFJlYnVpbGRpbmcgdGhlIGNhdGFsb2cgaXMgbmVjZXNzYXJ5IHRvIHByZXZlbnQgaXNzdWVzIGxhdGVyIG9uXG4gICAgICAgICAgICBjYXRhbG9nID0gYXBpLnBvcnRhbC5nZXRfdG9vbChcInBvcnRhbF9jYXRhbG9nXCIpXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhcIlJlYnVpbGRpbmcgY2F0YWxvZy4uLlwiKVxuICAgICAgICAgICAgY2F0YWxvZy5jbGVhckZpbmRBbmRSZWJ1aWxkKClcbiAgICAgICAgICAgIG1zZyA9IFwiRmluaXNoZWQgcmVidWlsZGluZyBjYXRhbG9nIVwiXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhtc2cpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgICMgVGhpcyB1c2VzIHRoZSBibG9ja3MtY29udmVyc2lvbi10b29sIHRvIG1pZ3JhdGUgdG8gYmxvY2tzXG4gICAgICAgICAgICBsb2dnZXIuaW5mbyhcIlN0YXJ0IG1pZ3JhdGluZyByaWNodGV4dCB0byBibG9ja3MuLi5cIilcbiAgICAgICAgICAgIG1pZ3JhdGVfcmljaHRleHRfdG9fYmxvY2tzKClcbiAgICAgICAgICAgIG1zZyA9IFwiRmluaXNoZWQgbWlncmF0aW5nIHJpY2h0ZXh0IHRvIGJsb2Nrc1wiXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgICMgUmV1c2UgdGhlIG1pZ3JhdGlvbi1mb3JtIGZyb20gcGxvbi52b2x0byB0byBkbyBzb21lIG1vcmUgdGFza3NcbiAgICAgICAgICAgIHZpZXcgPSBhcGkuY29udGVudC5nZXRfdmlldyhcIm1pZ3JhdGVfdG9fdm9sdG9cIiwgcG9ydGFsLCByZXF1ZXN0KVxuICAgICAgICAgICAgIyBZZXMsIHdlbiB3YW50IHRvIG1pZ3JhdGUgZGVmYXVsdCBwYWdlc1xuICAgICAgICAgICAgdmlldy5taWdyYXRlX2RlZmF1bHRfcGFnZXMgPSBUcnVlXG4gICAgICAgICAgICB2aWV3LnNsYXRlID0gVHJ1ZVxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oXCJTdGFydCBtaWdyYXRpbmcgRm9sZGVycyB0byBEb2N1bWVudHMuLi5cIilcbiAgICAgICAgICAgIHZpZXcuZG9fbWlncmF0ZV9mb2xkZXJzKClcbiAgICAgICAgICAgIG1zZyA9IFwiRmluaXNoZWQgbWlncmF0aW5nIEZvbGRlcnMgdG8gRG9jdW1lbnRzIVwiXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5nZXQoKS5ub3RlKG1zZylcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uLmNvbW1pdCgpXG5cbiAgICAgICAgICAgIGxvZ2dlci5pbmZvKFwiU3RhcnQgbWlncmF0aW5nIENvbGxlY3Rpb25zIHRvIERvY3VtZW50cy4uLlwiKVxuICAgICAgICAgICAgdmlldy5taWdyYXRlX2NvbGxlY3Rpb25zKClcbiAgICAgICAgICAgIG1zZyA9IFwiRmluaXNoZWQgbWlncmF0aW5nIENvbGxlY3Rpb25zIHRvIERvY3VtZW50cyFcIlxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uZ2V0KCkubm90ZShtc2cpXG4gICAgICAgICAgICB0cmFuc2FjdGlvbi5jb21taXQoKVxuXG4gICAgICAgICAgICByZXNldF9kYXRlcyA9IGFwaS5jb250ZW50LmdldF92aWV3KFwicmVzZXRfZGF0ZXNcIiwgcG9ydGFsLCByZXF1ZXN0KVxuICAgICAgICAgICAgcmVzZXRfZGF0ZXMoKVxuICAgICAgICAgICAgdHJhbnNhY3Rpb24uY29tbWl0KClcblxuICAgICAgICAgICAgIyBEaXNhbGxvdyBmb2xkZXJzIGFuZCBjb2xsZWN0aW9ucyBhZ2FpblxuICAgICAgICAgICAgcG9ydGFsX3R5cGVzW1wiQ29sbGVjdGlvblwiXS5nbG9iYWxfYWxsb3cgPSBGYWxzZVxuICAgICAgICAgICAgcG9ydGFsX3R5cGVzW1wiRm9sZGVyXCJdLmdsb2JhbF9hbGxvdyA9IEZhbHNlXG5cbiAgICAgICAgICAgICMgRGlzYWJsZSByaWNodGV4dCBiZWhhdmlvciBhZ2FpblxuICAgICAgICAgICAgZm9yIHR5cGVfIGluIFtcIkRvY3VtZW50XCIsIFwiTmV3cyBJdGVtXCIsIFwiRXZlbnRcIl06XG4gICAgICAgICAgICAgICAgcmVtb3ZlX2JlaGF2aW9yKHR5cGVfLCBcInBsb25lLnJpY2h0ZXh0XCIpXG5cbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0LnJlc3BvbnNlLnJlZGlyZWN0KHBvcnRhbC5hYnNvbHV0ZV91cmwoKSlcblxuXG4gICAgZGVmIGFuY2hvcl9maXhlcih0ZXh0LCBvYmo9Tm9uZSk6XG4gICAgICAgIFwiXCJcIlJlbW92ZSBhbmNob3JzIHNpbmNlIHRoZXkgYXJlIG5vdCBzdXBwb3J0ZWQgYnkgVm9sdG8geWV0XCJcIlwiXG4gICAgICAgIHNvdXAgPSBCZWF1dGlmdWxTb3VwKHRleHQsIFwiaHRtbC5wYXJzZXJcIilcbiAgICAgICAgZm9yIGxpbmsgaW4gc291cC5maW5kX2FsbChcImFcIik6XG4gICAgICAgICAgICBpZiBub3QgbGluay5nZXQoXCJocmVmXCIpIGFuZCBub3QgbGluay50ZXh0OlxuICAgICAgICAgICAgICAgICMgZHJvcCBlbXB0eSBsaW5rcyAoZS5nLiBhbmNob3JzKVxuICAgICAgICAgICAgICAgIGxpbmsuZGVjb21wb3NlKClcbiAgICAgICAgICAgIGVsaWYgbm90IGxpbmsuZ2V0KFwiaHJlZlwiKSBhbmQgbGluay50ZXh0OlxuICAgICAgICAgICAgICAgICMgZHJvcCBsaW5rcyB3aXRob3V0IGEgaHJlZiBidXQga2VlcCB0aGUgdGV4dFxuICAgICAgICAgICAgICAgIGxpbmsudW53cmFwKClcbiAgICAgICAgcmV0dXJuIHNvdXAuZGVjb2RlKClcblxuXG5Xcml0dGVuIGJ5XG49PT09PT09PT09XG5cbi4uIGltYWdlOjogLi9kb2NzL3N0YXJ6ZWwucG5nXG4gICAgOnRhcmdldDogaHR0cHM6Ly93d3cuc3RhcnplbC5kZVxuICAgIDphbHQ6IFN0YXJ6ZWwuZGVcblxuXG5cbkluc3RhbGxhdGlvblxuPT09PT09PT09PT09XG5cbkluc3RhbGwgY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQgYnkgYWRkaW5nIGl0IHRvIHlvdXIgYnVpbGRvdXQ6OlxuXG4gICAgW2J1aWxkb3V0XVxuXG4gICAgLi4uXG5cbiAgICBlZ2dzID1cbiAgICAgICAgY29sbGVjdGl2ZS5leHBvcnRpbXBvcnRcblxuXG5hbmQgdGhlbiBydW5uaW5nIGBgYmluL2J1aWxkb3V0YGBcblxuWW91IGRvbid0IG5lZWQgdG8gYWN0aXZhdGUgdGhlIGFkZC1vbiBpbiB0aGUgU2l0ZSBTZXR1cCBBZGQtb25zIGNvbnRyb2wgcGFuZWwgdG8gYmUgYWJsZSB0byB1c2UgdGhlIGZvcm1zIEBAZXhwb3J0X2NvbnRlbnQgYW5kIEBAaW1wb3J0X2NvbnRlbnQgaW4geW91ciBzaXRlLlxuXG5Zb3UgZG8gbmVlZCB0byBhZGQgaXQgdG8geW91ciBidWlsZG91dCBjb25maWd1cmF0aW9uIGFuZCBydW4gYnVpbGRvdXQgdG8gbWFrZSB0aGVzZSBmZWF0dXJlcyBhdmFpbGFibGUgYXQgYWxsLiBTZWUgaHR0cHM6Ly9kb2NzLnBsb25lLm9yZy9tYW5hZ2UvaW5zdGFsbGluZy9pbnN0YWxsaW5nX2FkZG9ucy5odG1sIGZvciBkZXRhaWxzLlxuXG5JbnN0YWxsaW5nIGluIFBsb25lIDRcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG5jb2xsZWN0aXZlLmV4cG9ydGltcG9ydCBkZXBlbmRzIG9uIHBsb25lLnJlc3RhcGkgLiBGb3IgUGxvbmUgNCwgeW91IG5lZWQgdG8gcGluIHBsb25lLnJlc3RhcGkgdG8gNy54IC4gV2hlbiBpbnN0YWxsaW5nIHBsb25lLnJlc3RhcGkgdmVyc2lvbiA3LngueCBpbiBQbG9uZSA0IHlvdSBtYXkgbmVlZCB0byBhZGQgdGhlIGZvbGxvd2luZyB2ZXJzaW9uIHBpbnMgdG8geW91ciBidWlsZG91dDo6XG5cbiAgICBbdmVyc2lvbnNdXG4gICAgUHlKV1QgPSAxLjcuMVxuXG4gICAgc2l4ID0gMS4xMS4wXG4gICAgYXR0cnMgPSAyMS4yLjBcbiAgICBwbG9uZS5yZXN0ID0gMS42LjJcbiAgICBwbG9uZS5zY2hlbWEgPSAxLjMuMFxuICAgICMgTGFzdCBweXJzaXN0ZW50IHZlcnNpb24gdGhhdCBpcyBweXRob24gMiBjb21wYXRpYmxlOlxuICAgIHB5cnNpc3RlbnQgPSAwLjE1LjdcblxuICAgICMgUmVxdWlyZWQgYnk6XG4gICAgIyBqc29uc2NoZW1hPT0zLjIuMFxuICAgIGZ1bmN0b29sczMyID0gMy4yLjMucG9zdDJcblxuICAgICMgUmVxdWlyZWQgYnk6XG4gICAgIyBwbG9uZS5zY2hlbWE9PTEuMy4wXG4gICAganNvbnNjaGVtYSA9IDMuMi4wXG5cbiAgICAjIFJlcXVpcmVkIGJ5OlxuICAgICMgaW1wb3J0bGliLW1ldGFkYXRhPT0xLjMuMFxuICAgIHBhdGhsaWIyID0gMi4zLjVcblxuICAgICMgUmVxdWlyZWQgYnk6XG4gICAgIyBwYXRobGliMj09Mi4zLjVcbiAgICBzY2FuZGlyID0gMS4xMC4wXG5cbiAgICAjIHBsb25lLmFwcC5jb250ZW50dHlwZXMgPiAxLjBcbiAgICBwbG9uZS5hcHAuY29udGVudHR5cGVzID0gMS4xLjlcblxuICAgIGltcG9ydGxpYi1tZXRhZGF0YSA9IDIuMS4zXG4gICAgemlwcCA9IDEuMi4wXG4gICAgY29uZmlncGFyc2VyID0gNC4wLjJcbiAgICBjb250ZXh0bGliMiA9IDAuNi4wLnBvc3QxXG5cblxuVGhlc2UgdmVyc2lvbnMgYXJlIHRha2VuIGZyb20gdGhlIHBsb25lLnJlc3RhcGkgNy54IFJFQURNRTogaHR0cHM6Ly9weXBpLm9yZy9wcm9qZWN0L3Bsb25lLnJlc3RhcGkvNy44LjEvXG5cblxuXG5Db250cmlidXRlXG49PT09PT09PT09XG5cbi0gSXNzdWUgVHJhY2tlcjogaHR0cHM6Ly9naXRodWIuY29tL2NvbGxlY3RpdmUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvaXNzdWVzXG4tIFNvdXJjZSBDb2RlOiBodHRwczovL2dpdGh1Yi5jb20vY29sbGVjdGl2ZS9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydFxuXG5cblN1cHBvcnRcbi0tLS0tLS1cblxuSWYgeW91IGFyZSBoYXZpbmcgaXNzdWVzLCBwbGVhc2UgbGV0IHVzIGtub3cuXG5cblxuTGljZW5zZVxuLS0tLS0tLVxuXG5UaGUgcHJvamVjdCBpcyBsaWNlbnNlZCB1bmRlciB0aGUgR1BMdjIuXG5cblxuQ29udHJpYnV0b3JzXG49PT09PT09PT09PT1cblxuLSBQaGlsaXAgQmF1ZXIsIGJhdWVyQHN0YXJ6ZWwuZGVcblxuLSBNYXVyaXRzIHZhbiBSZWVzLCBtLnZhbi5yZWVzQHplc3Rzb2Z0d2FyZS5ubFxuXG4tIEZyZWQgdmFuIERpamssIGYudmFuLmRpamtAemVzdHNvZnR3YXJlLm5sXG5cbkNoYW5nZWxvZ1xuPT09PT09PT09XG5cblxuMS43ICgyMDIzLTAxLTIwKVxuLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEZpbHRlciBvdXQgJ0Rpc2N1c3Npb24gSXRlbScgaW4gY29udGVudCB0eXBlIGV4cG9ydCBsaXN0LiBDb21tZW50cyBoYXZlIHRoZWlyIG93biBleHBvcnQgYW5kXG4gIGltcG9ydCB2aWV3cy4gQSBub3JtYWwgY29udGVudCB0eXBlIGV4cG9ydCBmb3IgY29tbWVudHMgd2lsbCByYWlzZSBhIEtleUVycm9yIHdoZW4gdHJ5aW5nIHRvIGZpbmRcbiAgdGhlIHBhcmVudC4gKCMxMTIpXG4gIFtmcmVkdmRdXG5cbi0gQmUgbW9yZSBzcGVjaWZpYyBpbiB0aGUgaW1wb3J0X3RyYW5zbGF0aW9uIGVuZHBvaW50IGNvbmRpdGlvbiB0byBpbnN0YWxsIGluIGEgc2l0ZSB3aXRoIHAuYS5tdWx0aWxpbmd1YWwgMS54XG4gIFtlcnJhbF1cblxuLSBGaXggaW1wb3J0aW5nIGhpZGRlbiBwb3J0bGV0cyBhcyB2aXNpYmxlLiAoIzE1MilcbiAgW3BiYXVlcl1cblxuLSBVc2UgYGBMYW5ndWFnZT1hbGxgYCB3aGVuIHF1ZXJ5aW5nIFRyYW5zbGF0aW9uR3JvdXAgaXRlbXNcbiAgW2VycmFsXVxuXG4tIEZpeCBtZW1iZXJzIGltcG9ydCwgYnkgaGFuZGxpbmcgbWVtYmVycyB0aGF0IGFscmVhZHkgZXhpc3QuXG4gIFtzdW5ld11cblxuLSBEb24ndCB1c2UgbmV3X2lkIGJlY2F1c2UgYSBob29rIGNhbiBjaGFuZ2UgYGBpdGVtW1wiaWRcIl1gYFxuICBbcGJhdWVyXVxuXG4tIFN1cHBvcnQgZXhwb3J0aW5nIHRoZSBibG9iLXBhdGggd2l0aG91dCBoYXZpbmcgYWNjZXNzIHRvIHRoZSBibG9icy5cbiAgW3BiYXVlcl1cblxuLSBTZXQgaW1hZ2UtdmFyaWFudHMgaW4gaHRtbC1maWVsZHMgd2hlbiBydW5uaW5nIEBAZml4X2h0bWwgdGFyZ2V0aW5nIGluIFBsb25lIDYuXG4gIFtwYmF1ZXJdXG5cblxuMS42ICgyMDIyLTEwLTA3KVxuLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEV4cG9ydCBhbmQgaW1wb3J0IGFsbCBncm91cC1tZW1iZXJzIChpbmNsdWRpbmcgbGRhcC11c2VycyBhbmQgLWdyb3VwcykuXG4gIFByZXZpb3VzbHkgaXQgb25seSBleHBvcnRlZCB1c2VycyBhbmQgZ3JvdXBzIGNyZWF0ZWQgaW4gUGxvbmUuXG4gIFtwYmF1ZXJdXG5cbi0gU3VwcG9ydCBpbXBvcnRpbmcgY29udGVudCB3aXRob3V0IGEgVVVJRCAoZS5nLiBmb3IgaW1wb3J0aW5nIGZyb20gYW4gZXh0ZXJuYWwgc291cmNlKS5cbiAgVGhlIG1pbmltYWwgcmVxdWlyZWQgZGF0YSBpcyBAaWQsIEB0eXBlLCBpZCwgYW5kIEBwYXJlbnRbXCJAaWRcIl0uXG4gIFtwYmF1ZXJdXG5cbi0gRXhwb3J0IG9ubHkgdmFsdWUgd2hlbiBzZXJpYWxpemluZyB2b2NhYnVsYXJ5LWJhc2VkIGZpZWxkcyBpbnN0ZWFkIG9mIHRva2VuL3RpdGxlLlxuICBbcGJhdWVyXVxuXG4tIEltcHJvdmUgbG9nZ2luZyBvZiBlcnJvcnMgZHVyaW5nIGltcG9ydC5cbiAgW3BiYXVlcl1cblxuLSBBZGQgSU5DTFVERV9QQVRIUyB0byBzcGVjaWZ5IHdoaWNoIHBhdGhzIG9ubHkgc2hvdWxkIGJlIGltcG9ydGVkLlxuICBbcGJhdWVyXVxuXG4tIEFkZCBpbXBvcnRfcmV2aWV3X3N0YXRlIHRvIGFsbG93IG92ZXJyaWRpbmcgc2V0dGluZyB0aGUgcmV2aWV3X3N0YXRlIGR1cmluZyBpbXBvcnQuXG4gIFtwYmF1ZXJdXG5cbi0gRXhwb3J0IHBhcmVudCBVSUQgYW5kIHVzZSBpdCB0byBmaW5kIHRoZSBjb250YWluZXIgdG8gaW1wb3J0LlxuICBbcGJhdWVyXVxuXG4tIE1vdmUgdGhlIHZhcmlvdXMgZXhwb3J0LWhvb2tzIGludG8gdXBkYXRlX2V4cG9ydF9kYXRhIGZvciByZWFkYWJpbGl0eS5cbiAgW3BiYXVlcl1cblxuLSBTdXBwb3J0IGV4cG9ydCB0byBzZXJ2ZXIgYnkgcGFzc2luZyBgYGRvd25sb2FkX3RvX3NlcnZlcj1UcnVlYGAgZm9yIGFsbCBleHBvcnRzICgjMTE1KS5cbiAgW3BiYXVlcl1cblxuLSBBZGQgc3VwcG9ydCBmb3IgYWRkaW5nIGN1c3RvbSBodG1sLWZpeGVycyB0byBmaXhfaHRtbF9pbl9jb250ZW50X2ZpZWxkcy5cbiAgW3BiYXVlcl1cblxuXG4xLjUgKDIwMjItMDQtMjYpXG4tLS0tLS0tLS0tLS0tLS0tXG5cbi0gRml4IEF0dHJpYnV0ZUVycm9yIGZvciBnZXRQaHlzaWNhbFBhdGggd2hlbiBjaGVja2luZyBwYXJlbnQsIGlzc3VlIDEyMy5cbiAgW21hdXJpdHNdXG5cbi0gRXhwb3J0IGFuZCBpbXBvcnQgcmVkaXJlY3Rpb24gdG9vbCBkYXRhLlxuICBbZ290Y2hhLCBNaWNoYWVsIFBlbm5pbmNrXVxuXG4tIFNlcmlhbGl6ZSBQcm9kdWN0cy5UQUxFU0ZpZWxkIGZpZWxkcyBhcyByYXcgaW5zdGVhZCBvZiBldmFsdWF0ZWQgZXhwcmVzc2lvbi5cbiAgKHVzZWZ1bCB0byBleHBvcnQgUEZHIG92ZXJyaWRlcylcbiAgW3NhdXpoZXJdXG5cbi0gTWFrZSBzdXJlIHdlIG5ldmVyIGNoYW5nZSBhIGFjcXVpcmVkIG1vZGlmaWNhdGlvbl9kYXRlIG9yIGNyZWF0aW9uX2RhdGUuXG4gIFtwYmF1ZXJdXG5cbi0gRXhwb3J0IGFuZCBpbXBvcnQgd29ya2Zsb3dfaGlzdG9yeS5cbiAgW3BiYXVlcl1cblxuLSBGYWlsIGdyYWNlZnVsbHkgb24gZXJyb3JzIGR1cmluZyBpbXBvcnRpbmcgcG9ydGxldHMuXG4gIFtwYmF1ZXJdXG5cbi0gSWdub3JlIGNvbnRhaW5lcnMgd2hlcmUgY29udGVudCBzaG91bGQgYmUgaW1wb3J0ZWQgdG8gdGhhdCBhcmUgbm9uLWZvbGRlcmlzaC5cbiAgW3BiYXVlcl1cblxuLSBVc2UgY2F0YWxvZyBpbnN0ZWFkIG9mIFpvcGVGaW5kQW5kQXBwbHkgYW5kIGJldHRlciBsb2dnaW5nIGZvciBleHBvcnRfZGlzY3Vzc2lvbi5cbiAgW3BiYXVlcl1cblxuLSBBZGQgY29udmVydGVyIGZvciBsb25nIGludHMgKHB5MiBvbmx5KS5cbiAgW3BiYXVlcl1cblxuLSBCeSBkZWZhdWx0IG5vIG5vdCBleHBvcnQgbGlua2ludGVncml0eSByZWxhdGlvbnMuXG4gIFtwYmF1ZXJdXG5cbi0gTG9nIGRldGFpbGVkIGV4Y2VwdGlvbiB3aGVuIGV4cG9ydGluZyBjb250ZW50IGZhaWxzLlxuICBbcGJhdWVyXVxuXG4tIEFkZCBzdGFydCBhbmQgZmluaXNoIGhvb2tzIGZvciBleHBvcnQgb2YgY29udGVudC5cbiAgW3BiYXVlcl1cblxuLSBSZXdyaXRlIGV4cG9ydC9pbXBvcnQgb2YgZGVmYXVsdCBwYWdlczogVXNlIHV1aWQgb2YgZGVmYXVsdC1wYWdlIGluc3RlYWQgb2YgaWQuXG4gIFJld3JpdGUgZ2V0dGluZyBkZWZhdWx0X3BhZ2UgdG8gZml4IHZhcmlvdXMgaXNzdWVzIHdpdGggdHJhbnNsYXRlZCBjb250ZW50LlxuICBbcGJhdWVyXVxuXG4tIEFkZCBleHBvcnQgYW5kIGltcG9ydCBvZiB2ZXJzaW9ucy9yZXZpc2lvbnMgb2YgY29udGVudCAoIzEwNSkuXG4gIFtwYmF1ZXJdXG5cblxuMS40ICgyMDIyLTAxLTA3KVxuLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEZpeCBgYGRlYnVnYGAgZmxhZyBpbiBgYEV4cG9ydFJlbGF0aW9uc2BgXG4gIFtwZXRzY2hraV1cblxuLSBEZXNlcmlhbGl6ZSBwb3J0bGV0LWRhdGEgdXNpbmcgcmVzdGFwaSB0byBmaXggaW1wb3J0aW5nIFJpY2hUZXh0LlxuICBbcGJhdWVyXVxuXG4tIEZpeCBpbXBvcnRpbmcgcmljaHRleHQgd2l0aCBodG1sLWVudGl0aWVzLiBGaXhlcyAjOTlcbiAgW3BiYXVlcl1cblxuLSBQcmVzZXJ2ZSBsaW5rcyB0byBicm93c2VyLXZpZXdzIGJ5IHVzaW5nIGEgY3VzdG9tIGZpbmRfb2JqZWN0LiBGaXhlcyAjOTdcbiAgW3BiYXVlcl1cblxuLSBJZ25vcmUgbGlua2ludGVncml0eSB3aGVuIGltcG9ydGluZyBpdGVtcyB3aXRoIHJlcGxhY2Utc3RyYXRlZ3kuXG4gIFtwYmF1ZXJdXG5cbi0gQWRkIHRlc3RzIGZvciBmaXhfaHRtbC5cbiAgW3BiYXVlcl1cblxuXG4xLjMgKDIwMjEtMTItMDgpXG4tLS0tLS0tLS0tLS0tLS0tXG5cbi0gSGFuZGxlIGRlZmF1bHQgcGFnZSBvZiB0aGUgc2l0ZSByb290IG9iamVjdC5cbiAgW2Z1bHZdXG5cbi0gT3B0aW9uYWxseSAoY2hlY2tib3gpIHNraXAgZXhpc3RpbmcgY29udGVudCBvbiBpbXBvcnQgaW5zdGVhZCBvZiBnZW5lcmF0aW5nIGl0IG5ldyB3aXRoIGEgcmFuZG9taXplZCBpZC5cbiAgW3BldHNjaGtpXVxuXG4tIEZpeCBgVW5ib3VuZExvY2FsRXJyb3JgIHdoZW4gY2FsbGluZyBgaW1wb3J0X2NvbnRlbnRgIHdpdGggYHJldHVybl9qc29uYCBhbmQgYHNlcnZlcl9maWxlYC5cbiAgW3BldHNjaGtpXVxuXG4tIEFkZCBvcHRpb24gdG8gbWFrZSBhIGNvbW1pdCBldmVyeSB4IGl0ZW1zLlxuICBbcGJhdWVyXVxuXG4tIEltcHJvdmUgbG9nZ2luZyBkdXJpbmcgaW1wb3J0IGluIHZhaXJvdXMgY2FzZXMuXG4gIFtwYmF1ZXJdXG5cbi0gV29yayBhcm91bmQgY2FzZSB3aGVyZSBhcGkuY29udGVudC5nZXQocGF0aD1wYXJlbnRfcGF0aCkgcmFpc2VzIE5vdEZvdW5kIGluc3RlYWQgb2YgcmV0dXJuaW5nIE5vbmUuXG4gIFtwYmF1ZXJdXG5cbi0gS2VlcCB2YWx1ZSBvZiBpbXBvcnRfdG9fY3VycmVudF9mb2xkZXIuXG4gIFtwYmF1ZXJdXG5cbi0gRml4IGh0bWwgdW5lc2NhcGUgaW4gcHkzLlxuICBbcGJhdWVyXVxuXG4tIEZpeCBzZXJpYWxpemluZyBBVE5ld3NJdGVtIGltYWdlIGZpZWxkIGNvbnRlbnQuXG4gIFtnb3RjaGFdXG5cbi0gTWlncmF0ZSBldmVudFVybCB0byBldmVudF91cmwgKEFUIHRvIERYKS5cbiAgW1RoaWJhdXRCb3JuXVxuXG4tIExvZyBpdGVtcyB0aGF0IGNhbm5vdCBiZSBzZXJpYWxpemVkIGluc3RlYWQgb2YgYWJvcnRpbmcgdGhlIGV4cG9ydC5cbiAgW1RoaWJhdXRCb3JuXVxuXG4tIEFkZCBhIGl0ZW1faG9vayB0byBleHBvcnRfbG9jYWxyb2xlcy5cbiAgW1RoaWJhdXRCb3JuXVxuXG4tIEZpeCBoYW5kbGluZyBvZiBjaGVja2JveGVzIGZvciBza2lwX2V4aXN0aW5nX2NvbnRlbnQgYW5kIGltcG9ydF90b19jdXJyZW50X2ZvbGRlci5cbiAgW3BiYXVlcl1cblxuLSBNb3ZlIGludGVybWVkaWFyeSBjb21taXQgY29kZSBpbnRvIGNvbW1pdF9ob29rIG1ldGhvZCB0byBhbGxvdyBvdmVycmlkaW5nLlxuICBbcGJhdWVyXVxuXG4tIEFkZCBob29rIGdsb2JhbF9vYmpfaG9va19iZWZvcmVfZGVzZXJpYWxpemluZyB0byBtb2RpZnkgdGhlIGNyZWF0ZWQgb2JqIGJlZm9yZSBkZXNlcmlhbGl6aW5nIHRoZSBkYXRhLlxuICBbcGJhdWVyXVxuXG4tIEFkZCBzdXBwb3J0IHRvIHVwZGF0ZSBhbmQgdG8gcmVwbGFjZSBleGlzdGluZyBjb250ZW50IGR1cmluZyBpbXBvcnQgKCM3NilcbiAgW3BiYXVlcl1cblxuLSBSZWluZGV4IHBlcm1pc3Npb25zIGFmdGVyIGltcG9ydGluZyBsb2NhbCByb2xlcy5cbiAgW3BiYXVlcl1cblxuLSBBZGQgZXhwb3J0L2ltcG9ydCBmb3IgY29uc3RyYWlucyBidXQgaW1wb3J0IGNvbnRlbnQgd2l0aG91dCBjaGVja2luZyBjb25zdHJhaW5zIG9yIHBlcm1pc3Npb25zICgjNzEpLlxuICBbcGJhdWVyXVxuXG5cbjEuMiAoMjAyMS0xMC0xMSlcbi0tLS0tLS0tLS0tLS0tLS1cblxuLSBQcmV2ZW50IGNyZWF0aW5nIGNvbnRlbnQgaW4gYSBkaWZmZXJlbnQgUGxvbmUgU2l0ZSBpbiB0aGUgc2FtZSBkYXRhYmFzZSAoIzUyKS5cbiAgSW4gZ2VuZXJhbCwgY2xlYW51cCBwYXJlbnQgcGF0aHMgd2hlbiBpbiBkZXZlbG9wbWVudCBvbiBsb2NhbGhvc3QuXG4gIFttYXVyaXRzXVxuXG4tIFJlYWQgZW52aXJvbm1lbnQgdmFyaWFibGUgYGBDT0xMRUNUSVZFX0VYUE9SVElNUE9SVF9DRU5UUkFMX0RJUkVDVE9SWWBgICgjNTEpLlxuICBXaGVuIHNldCwgdGhpcyBpcyB1c2VkIGZvciBzdG9yaW5nIGFuIGV4cG9ydCBmaWxlIGFuZCBnZXR0aW5nIGFuIGltcG9ydCBmaWxlLlxuICBUaGlzIGlzIHVzZWZ1bCBmb3Igc2hhcmluZyBjb250ZW50IGJldHdlZW4gbXVsdGlwbGUgUGxvbmUgU2l0ZXMgb24gdGhlIHNhbWUgc2VydmVyLlxuICBbbWF1cml0c11cblxuLSBVbmVzY2FwZSBodG1sIGVudGl0aWVzIGFuZCBsaW5lLWJyZWFrcyB3aGVuIGltcG9ydGluZyBjb21tZW50cyAoIzQzKS5cbiAgW3BiYXVlcl1cblxuLSBFeHBvcnQgYW5kIGltcG9ydCBjb21wbGV0ZSBzaXRlcyBvciBjb250ZW50IHRyZWVzIHdpdGggY29uZmlndXJhYmxlIHR5cGVzLCBkZXB0aCBhbmQgcGF0aCAoIzQwKS5cbiAgW3BiYXVlcl1cblxuLSBBZGRlZCBvcHRpb24gdG8gZXhwb3J0IGJsb2JzIGFzIGJsb2IgcGF0aHMgKCM1MCkuXG4gIFtwYmF1ZXIsIG1hdXJpdHNdXG5cbi0gRml4ZWQgY3JlYXRpbmcgbWlzc2luZyBmb2xkZXIgc3RydWN0dXJlICgjNDUpLlxuICBbbWF1cml0c11cblxuLSBFeHBvcnQgYW5kIGltcG9ydCBwb3J0bGV0cyAoIzM5KS5cbiAgW3BiYXVlcl1cblxuLSBFeHBvcnQgY29udGVudCBhbmQgd3JpdGUgdG8gZmlsZSB1c2luZyBhIGdlbmVyYXRvci95aWVsZC4gVGhpcyBhdm9pZHMgbWVtb3J5IGJhbGxvb25pbmcgdG8gdGhlIHNpemUgb2YgdGhlIGV4cG9ydGVkIGZpbGUgKCM0MSkuXG4gIFtmcmVkdmRdXG5cblxuMS4xICgyMDIxLTA4LTAyKVxuLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEFkZCBvcHRpb24gdG8gaW1wb3J0IGZpbGUgZnJvbSBzZXJ2ZXIuXG4gIFttYXVyaXRzXVxuXG4tIE1pc3NpbmcgYGA8L2Zvcm0+YGAgY2xvc2luZyB0YWcgaW4gYGBleHBvcnRfY29udGVudC5wdGBgXG4gIFtwZXRzY2hraV1cblxuLSBTdXBwb3J0IGRpc2FibGVkIGFxdWlzaXRpb24gb2YgbG9jYWwgcm9sZXMgZHVyaW5nIGV4cG9ydC9pbXBvcnQgb2YgbG9jYWwgcm9sZXMuXG4gIFtwYmF1ZXJdXG5cbi0gVXNlIHVucmVzdHJpY3RlZFNlYXJjaFJlc3VsdHMgdG8gYWN0dWFsbHkgZXhwb3J0IGFsbCBjb250ZW50LlxuICBbcGJhdWVyXVxuXG4tIEFkZCBjb21taXQgbWVzc2FnZSBhZnRlciBpbXBvcnRpbmcgb25lIHR5cGUuXG4gIFtwYmF1ZXJdXG5cbi0gRml4IGdldHRpbmcgY29udGFpbmVyIGZvciBzb21lIGNhc2VzLlxuICBbcGJhdWVyXVxuXG4tIEZpeCB1c2UgaW4gUGxvbmUgNC4zIHdpdGhvdXQgZGV4dGVyaXR5LCB6Yy5yZWxhdGlvbiBvciBwbG9uZS5hcHAuY29udGVudHR5cGVzLlxuICBbcGJhdWVyXVxuXG4tIEZpeCBAaWQgb2YgY29sbGVjdGlvbnMgYW5kIHBhcmVudHMgb2Ygc3ViY29sbGVjdGlvbnMuIEZpeCAjMzBcbiAgW3BiYXVlcl1cblxuLSBGaXggdXNlIGluIFBsb25lIDQuMyB3aXRoIGRleHRlcml0eSBidXQgd2l0aG91dCB6M2MucmVsYXRpb25maWVsZC5cbiAgW21hdXJpdHNdXG5cbi0gQWRkIGV4cG9ydCBhbmQgaW1wb3J0IGZvciBkaXNjdXNzaW9ucy9jb21tZW50cy5cbiAgW3BiYXVlcl1cblxuLSBBZGQgb3B0aW9uIHRvIGZpeCBjb2xsZWN0aW9uIHF1ZXJpZXMgYWZ0ZXIgaW1wb3J0LlxuICBbdGhvbWFzbWFzc21hbm5dXG5cbi0gUmVzZXQgQ3JlYXRpb24gRGF0ZS4gRml4ICMyOVxuICBbcGJhdWVyXVxuXG4tIFJlbW92ZSBjdXN0b20gc2VyaWFsaXplciBmb3IgcmVsYXRpb25zIGJlYWN1c2Ugb2YgQ29uZmlndXJhdGlvbkNvbmZsaWN0RXJyb3Igd2l0aCByZXN0YXBpLlxuICBSZWxhdGlvbnMgYXJlIGRyb3BwZWQgYW55d2F5IGluIHVwZGF0ZV9kYXRhX2Zvcl9taWdyYXRpb24gd2hlbiB1c2luZyB0aGUgZGVmYXVsdCBzZXR0aW5nLlxuICBbcGJhdWVyXVxuXG4tIE1pZ3JhdGUgYmF0Y2ggc2l6ZSBmb3IgdG9waWNzLlxuICBbcGJhdWVyXVxuXG4tIEZpeCBpc3N1ZSBvZiByZXVzaW5nIHRoZSBwcmV2aW91cyBjb250YWluZXIgd2hlbiBubyBjb250YWluZXIgZm9yIGEgaXRlbSBjb3VsZCBiZSBmb3VuZC5cbiAgW3BiYXVlcl1cblxuLSBBZGQgaG9vayBzZWxmLmZpbmlzaCgpIHRvIGRvIHRoaW5ncyBhZnRlciBpbXBvcnRpbmcgb25lIGZpbGUuXG4gIFtwYmF1ZXJdXG5cbi0gRml4IGluc3RhbGxhdGlvbiB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIHNldHVwdG9vbHMgKCMzNSlcbiAgW3BiYXVlcl1cblxuLSBGaXggaW5zdGFsbGF0aW9uIHVzaW5nIHBpcCAoIzM2KVxuICBbZXJpY29mXVxuXG4tIERvIG5vdCBjb25zdHJhaW4gZXhwb3J0YWJsZSBGVElzIHRvIGFsbG93IGV4cG9ydCBvZiB0eXBlcyBhcyBDYWxlbmRhclhGb2xkZXIgb3IgQVRUb3BpYyBDcml0ZXJpYS5cbiAgW3BiYXVlcl1cblxuLSBBZGQgaG9vayBzZWxmLnN0YXJ0KCkgdG8gZG8gdGhpbmdzIGFmdGVyIGltcG9ydGluZyBvbmUgZmlsZS5cbiAgW3BiYXVlcl1cblxuXG4xLjAgKDIwMjEtMDQtMjcpXG4tLS0tLS0tLS0tLS0tLS0tXG5cbi0gU3VwcG9ydCBzZXR0aW5nIHZhbHVlcyB3aXRoIGBgZmFjdG9yeV9rd2FyZ3NgYCB3aGVuIGNyZWF0aW5nIGluc3RhbmNlcyBkdXJpbmcgaW1wb3J0LlxuICBUaGlzIGNhbiBiZSB1c2VkIHRvIHNldCB2YWx1ZXMgdGhhdCBuZWVkIHRvIGJlIHRoZXJlIGR1cmluZyBzdWJzY3JpYmVycyB0byBJT2JqZWN0QWRkZWRFdmVudC5cbiAgW3BiYXVlcl1cblxuXG4xLjBiMSAoMjAyMS0wMy0yNilcbi0tLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEFkZCBvcHRpb24gdG8gc2F2ZSBleHBvcnQgb24gc2VydmVyLlxuICBbcGJhdWVyXVxuXG4tIEZpeCBpc3N1ZXMgaW4gaW1wb3J0X3JlbGF0aW9ucyBhbmQgaW1wb3J0X29yZGVyaW5nLlxuICBbcGJhdWVyXVxuXG4tIFVzZSBsaW5rcyB0byBvdGhlciBleHBvcnRzIGluIGV4cG9ydF9jb250ZW50IGZvciBlYXNpZXIgb3ZlcnJpZGUuXG4gIFtwYmF1ZXJdXG5cbi0gQWRkIHN1cHBvcnQgZm9yIGV4cG9ydGluZyBMaW5ndWFQbG9uZSB0cmFuc2xhdGlvbnMuXG4gIFtwYmF1ZXJdXG5cblxuMS4wYTIgKDIwMjEtMDMtMTEpXG4tLS0tLS0tLS0tLS0tLS0tLS1cblxuLSBTaW1wbGlmeSBwYWNrYWdlIHN0cnVjdHVyZSBhbmQgcmVtb3ZlIGFsbCB1bm5lZWRlZCBmaWxlc1xuICBbcGJhdWVyXVxuXG4tIEFkZCBleHBvcnQvaW1wb3J0IGZvciBwb3NpdGlvbiBpbiBwYXJlbnRcbiAgW3BiYXVlcl1cblxuXG4xLjBhMSAoMjAyMS0wMy0xMClcbi0tLS0tLS0tLS0tLS0tLS0tLVxuXG4tIEluaXRpYWwgcmVsZWFzZS5cbiAgW3BiYXVlcl1cbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAiIiw=
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2NvbGxlY3RpdmUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQiLA==
ICAgICJrZXl3b3JkcyI6ICJQeXRob24gUGxvbmUgQ01TIiw=
ICAgICJsaWNlbnNlIjogIkdQTCB2ZXJzaW9uIDIiLA==
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0Iiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkRvY3VtZW50YXRpb24iOiAiaHR0cHM6Ly9naXRodWIuY29tL2NvbGxlY3RpdmUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQjcmVhZG1lIiw=
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9jb2xsZWN0aXZlL2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0Iiw=
ICAgICAgIlB5UEkiOiAiaHR0cHM6Ly9weXBpLnB5dGhvbi5vcmcvcHlwaS9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydCIs
ICAgICAgIlNvdXJjZSI6ICJodHRwczovL2dpdGh1Yi5jb20vY29sbGVjdGl2ZS9jb2xsZWN0aXZlLmV4cG9ydGltcG9ydCIs
ICAgICAgIlRyYWNrZXIiOiAiaHR0cHM6Ly9naXRodWIuY29tL2NvbGxlY3RpdmUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvaXNzdWVzIg==
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQvMS43LyIs
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgInNldHVwdG9vbHMiLA==
ICAgICAgInBsb25lLmFwaSAoPj0xLjguNCkiLA==
ICAgICAgImh1cnJ5LmZpbGVzaXplIiw=
ICAgICAgImlqc29uIiw=
ICAgICAgInNpeCIs
ICAgICAgInBsb25lLnJlc3RhcGkiLA==
ICAgICAgImJlYXV0aWZ1bHNvdXA0Iiw=
ICAgICAgInBsb25lLmFwcC50ZXN0aW5nIDsgZXh0cmEgPT0gJ3Rlc3QnIiw=
ICAgICAgInBsb25lLmFwcC5yb2JvdGZyYW1ld29yayA7IGV4dHJhID09ICd0ZXN0JyIs
ICAgICAgInBsb25lLmFwcC5jb250ZW50dHlwZXMgOyBleHRyYSA9PSAndGVzdCci
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0yLjcsICE9My4wLiosICE9My4xLiosICE9My4yLiosICE9My4zLiosICE9My40LiosICE9My41LioiLA==
ICAgICJzdW1tYXJ5IjogIkFuIGFkZC1vbiBmb3IgUGxvbmUgdG8gRXhwb3J0IGFuZCBpbXBvcnQgY29udGVudCwgbWVtYmVycywgcmVsYXRpb25zLCB0cmFuc2xhdGlvbnMgYW5kIGxvY2Fscm9sZXMuIiw=
ICAgICJ2ZXJzaW9uIjogIjEuNyIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNjUwMjc2MCw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxMDUxMGU3NWMxMjJmNjU5YjhiYzkxYjFmYjgxYWJhZjg0ZTM0MjMwNTZlMWEwNzc1NTA5Y2IxN2NiMzY3NzYxIiw=
ICAgICAgICAgICJtZDUiOiAiNmJlMjRjYTFiYTk4NjlmMmI5OWFmYmNjOWJmYjEzMmUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNjBlZDUwNmJmNjI5MTAyY2U3MzIzNzM2MTkyNDYwNWNhNGUxM2FkOWIzNjk5ZTg4MzQzNTlkNDY0NWU4NmE4OCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI2YmUyNGNhMWJhOTg2OWYyYjk5YWZiY2M5YmZiMTMyZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj09Mi43LCA+PTMuNiIs
ICAgICAgICAic2l6ZSI6IDE2Nzk2NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wNC0yN1QxODowNjoyMCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wNC0yN1QxODowNjoyMC45MDM1NzVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xMC81MS8wZTc1YzEyMmY2NTliOGJjOTFiMWZiODFhYmFmODRlMzQyMzA1NmUxYTA3NzU1MDljYjE3Y2IzNjc3NjEvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjBhMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI4MzNiYjU2MTE3MDdmNWY3YTdkMTI0MDE5YzlhOTljOGQzNDU3YTk1ZDliMmUzMzliMTFjYWE3OGQxOTI2YzNmIiw=
ICAgICAgICAgICJtZDUiOiAiMzI0NzZmNzk0ZjE4ZTJjZGQ0MTA0ZTNhM2M2ZmRjMWIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNGZmNjUyZWYxNGQ2ZjEzZjA5ZTI0YjAzOWFhYjVjYThkNDUwYjVhZTdhYmU1YTZmNDVkYTcyOTg0YTZjNzg0MCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYTEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzMjQ3NmY3OTRmMThlMmNkZDQxMDRlM2EzYzZmZGMxYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj09Mi43LCA+PTMuNiIs
ICAgICAgICAic2l6ZSI6IDYyMTY3NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wMy0xMFQxMDoxMjozNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wMy0xMFQxMDoxMjozNC4yMjQwODdaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy84My8zYi9iNTYxMTcwN2Y1ZjdhN2QxMjQwMTljOWE5OWM4ZDM0NTdhOTVkOWIyZTMzOWIxMWNhYTc4ZDE5MjZjM2YvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYTEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjBhMiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1ZjFmYjVmZWFiMDMyM2U2ODI2YzE2NWY3YWZmMWY5NDY4YzhmYzlkMGY3NWQ4NDJiY2FmNzA1ODk0ZWMyM2UzIiw=
ICAgICAgICAgICJtZDUiOiAiZTNlODFmMWEzMzc5NmQ0ZmMzMjMyNTNjYjBmYTAwNzYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZDllZjI5NzI0ZmI1ZTg0NTlmOTllMjgzNzMwNDgzNzkzYzAxMzBiOWI2ZjQ1ODcyNTdjMDQ3NmE1OTJhZTVkYSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYTIudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlM2U4MWYxYTMzNzk2ZDRmYzMyMzI1M2NiMGZhMDA3NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj09Mi43LCA+PTMuNiIs
ICAgICAgICAic2l6ZSI6IDYxODUyNSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wMy0xMVQxNjowOTowOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wMy0xMVQxNjowOTowOC42NTQwMDhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81Zi8xZi9iNWZlYWIwMzIzZTY4MjZjMTY1ZjdhZmYxZjk0NjhjOGZjOWQwZjc1ZDg0MmJjYWY3MDU4OTRlYzIzZTMvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYTIudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjBiMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJlMDBhMDI1YTA2ZmQ3MTQxZjZhMTMyYWExYzc0YWY0NGJkNTFlNGExM2E4ZmU5MTRjMjMwOTA4ZDhlNTE2NGEzIiw=
ICAgICAgICAgICJtZDUiOiAiMTJkOWM3OGRkZmNhZDgyZmY0M2JjZjkxMDg2MDI4M2YiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMDQzNWQ0NDEyOGViMWU5MmUwYjEwNzlmNjc3YzA1YjkxMDA2YmE1Yzg4NDI0ZDZiNGU5YjhlODU1YjMzNDAyZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYjEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxMmQ5Yzc4ZGRmY2FkODJmZjQzYmNmOTEwODYwMjgzZiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj09Mi43LCA+PTMuNiIs
ICAgICAgICAic2l6ZSI6IDYyMDcxMyw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wMy0yNlQxNzo0NTo0OSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wMy0yNlQxNzo0NTo0OS45OTE4NzJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9lMC8wYS8wMjVhMDZmZDcxNDFmNmExMzJhYTFjNzRhZjQ0YmQ1MWU0YTEzYThmZTkxNGMyMzA5MDhkOGU1MTY0YTMvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4wYjEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjEiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkYWIyMDc3ZDhjNGFlZDBiMDA0ZDMyNGNmZGRmZDEwNmU2Njg0M2E3M2ZjMjhiZjM4MjMyMTZhOWRiN2RiNGJhIiw=
ICAgICAgICAgICJtZDUiOiAiMDg5NzA2MmVkOGE1ZGMzNjc0YzQwZjMzNGJmMDQ5MDAiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYTJkODlmODkwNjRiNzliMDEyNTIxYzkzOTk0NTk0OTdiZmUzZjFkMzYyOWViZDU2ZGEzODdhMjc4ZmY4MjgyNyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4xLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIwODk3MDYyZWQ4YTVkYzM2NzRjNDBmMzM0YmYwNDkwMCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDI0ODE3Myw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0wOC0wMlQxMDozNzoxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0wOC0wMlQxMDozNzoxNi4xMzI1ODlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kYS9iMi8wNzdkOGM0YWVkMGIwMDRkMzI0Y2ZkZGZkMTA2ZTY2ODQzYTczZmMyOGJmMzgyMzIxNmE5ZGI3ZGI0YmEvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4xLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjIiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI5Y2Y2N2I4OGNiMGU4YjY0OWUyZmE1ZDhkOTdiOWFiZjJjZGJiY2I2ODA3OTBlYWExNDAyYjQwNzJlNzg2OTEwIiw=
ICAgICAgICAgICJtZDUiOiAiYWNlYjYwODk0OTUyMTFiZTBmNmVmNjNkZTY5YjM5MDQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzcyMmI2YTNjNDNmNGVmODhhZTQ3MDJiMzU3MTYyZTFmM2JhZGYwZDI4NjQ0MjA3MjI3ZTEzMzgwODc5NTU3MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4yLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhY2ViNjA4OTQ5NTIxMWJlMGY2ZWY2M2RlNjliMzkwNCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDY2NTczLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMC0xMVQwODowOToxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMC0xMVQwODowOToxNi4yMzc4NTNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy85Yy9mNi83Yjg4Y2IwZThiNjQ5ZTJmYTVkOGQ5N2I5YWJmMmNkYmJjYjY4MDc5MGVhYTE0MDJiNDA3MmU3ODY5MTAvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4yLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI3ZjQwNjY1NGZjZDJiZGJhMTMxMTI2ZWJmNjA3YTRkN2EyMmY2NzM1YmI5ZGE1YjY2OWU5ZDgxZWZjZTYwMWVkIiw=
ICAgICAgICAgICJtZDUiOiAiYWM5OTVhYjIzOGRmOTZhOWIwZDdlMzA1Zjc4NWEyYTAiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNjNlODJkMDJmNmE4M2NjZjRiY2I2MTNhYmI1MjUwODczM2QwNWQ3ZjcxMDU3Y2ZlZWQ1YTUyMTJjYTU3MjFiZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4yLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhYzk5NWFiMjM4ZGY5NmE5YjBkN2UzMDVmNzg1YTJhMCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDI5MjI5Niw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMC0xMVQwODowOToxOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMC0xMVQwODowOToxOC40NTAxMTNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy83Zi80MC82NjU0ZmNkMmJkYmExMzExMjZlYmY2MDdhNGQ3YTIyZjY3MzViYjlkYTViNjY5ZTlkODFlZmNlNjAxZWQvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4yLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjMiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjODg5NzA1MGNjZjYxZmYxMzMzMTQ5YmRmYjJhNWYwZDM1MzQ0YWFjMTUwMWM2YmJmY2MwZTkxNTkxODBiNjQwIiw=
ICAgICAgICAgICJtZDUiOiAiZjQ3YzM3ZjZiNDZhZDk3NmU4NmViNzg1NDA1MWVkZWEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjI4MjllZWRmNjUwYmY1ZDFkOGMwMzBmYjk5ZTIxZDliZTFkZmU2NTgzZGRmNzBjYmY1NTJmYzZhMzM0YzM0ZSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4zLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmNDdjMzdmNmI0NmFkOTc2ZTg2ZWI3ODU0MDUxZWRlYSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDc0NjU3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMi0wOFQxMToxMzowOCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMi0wOFQxMToxMzowOC44MDQ4NzVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jOC84OS83MDUwY2NmNjFmZjEzMzMxNDliZGZiMmE1ZjBkMzUzNDRhYWMxNTAxYzZiYmZjYzBlOTE1OTE4MGI2NDAvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4zLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxMjYxOWQ3YjU1ZjBhZjMxZTg2ODJjZTY5MDczYTRkNmZkMGY1NjI4YzM5ZDlkY2ZlZmQ0Y2M2ZGNjZmUzNzFkIiw=
ICAgICAgICAgICJtZDUiOiAiYjcyZDZiMDUxODQyZWRkYTRiM2VhNjRkMmZlMmI3OGIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYWVmNWZkMWExM2U5ZWExODFhOTBiZmNiZTYzZmRlZWViMzg3ZDI3ZTU1NDJiYThlYTUwMjFhZmM0MjZhODJkMyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4zLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiNzJkNmIwNTE4NDJlZGRhNGIzZWE2NGQyZmUyYjc4YiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDMwMDg0MCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMS0xMi0wOFQxMToxMzoxMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMS0xMi0wOFQxMToxMzoxMS4zNDQ4ODBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xMi82MS85ZDdiNTVmMGFmMzFlODY4MmNlNjkwNzNhNGQ2ZmQwZjU2MjhjMzlkOWRjZmVmZDRjYzZkY2NmZTM3MWQvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS4zLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjQiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwNzIyYjdmNmVjMGJmMjc2ODdkZThhNDg2NGE3MDIzODU3NWE0ZWJmYjM5MmJiYjdhNWUxNjQ1OWFmMDhlNDNlIiw=
ICAgICAgICAgICJtZDUiOiAiOTE0YjdmN2Q5ZWFhMzZmNmY3MjI5Nzg2NzQ5MWYxN2MiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMzllMDgxMTgwMWE5MzI3MGRiM2IzZGExNDY1ODFlMDVkMzEyZDA5YTRmMzgyMjYxM2ZhMTA3ZGYxNTg5ZmEyOSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS40LXB5Mi1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5MTRiN2Y3ZDllYWEzNmY2ZjcyMjk3ODY3NDkxZjE3YyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkyIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDc3OTgzLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMS0wN1QxMTowOTozNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMS0wN1QxMTowOTozNS40NjU4NjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNy8yMi9iN2Y2ZWMwYmYyNzY4N2RlOGE0ODY0YTcwMjM4NTc1YTRlYmZiMzkyYmJiN2E1ZTE2NDU5YWYwOGU0M2UvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS40LXB5Mi1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIyZDUwODY3ODcxZjYyZjc2MGFmODM4MThkYjgyZmFiZTdhM2ZhYzI1ZDE4ZWI4NWQ5ZjAyNmQ3NmYzZDExZTlkIiw=
ICAgICAgICAgICJtZDUiOiAiOTJmMzlhMTk5YmZhOTE3ZjI2ZjFkYzlhMTQwYzdhMTciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYzQwYmNlYTY0MjdlYmE1NzQ5OTEyZmU4YTE2ZDU4YmYzNDgwN2E4ZWY2Nzg4MGQ1MTc2Zjc4OGU4YmY3YWU1ZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS40LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5MmYzOWExOTliZmE5MTdmMjZmMWRjOWExNDBjN2ExNyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDMwODA3NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wMS0wN1QxMTowOTozNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wMS0wN1QxMTowOTozNy44NTE5MjFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8yZC81MC84Njc4NzFmNjJmNzYwYWY4MzgxOGRiODJmYWJlN2EzZmFjMjVkMThlYjg1ZDlmMDI2ZDc2ZjNkMTFlOWQvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS40LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjUiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI3NzJmM2M3NzJmN2VlZjdhOWY0MWQzMTYwNjgzMzUzNDhhNTI2YWU0NmZlOGEwOTM2ZDYyZGRiNDNlYmQ4NDA1Iiw=
ICAgICAgICAgICJtZDUiOiAiMjVhZjcyZGY1MzAxZDhlYTZmYTFkYzdmMTAwNWM5ODMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMzI0MTc0MjZkMDdlYzFjNGRmMDIyYmVhMzJjZDc2OTI5Yjc5MmQwNTczMjk5ZDhiNTE2ZmU1MzhhZTM1OTY5MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS41LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyNWFmNzJkZjUzMDFkOGVhNmZhMWRjN2YxMDA1Yzk4MyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDg2MzY5LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNC0yNlQxNTozMzoyOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNC0yNlQxNTozMzoyOS4zODg3MTVaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy83Ny8yZi8zYzc3MmY3ZWVmN2E5ZjQxZDMxNjA2ODMzNTM0OGE1MjZhZTQ2ZmU4YTA5MzZkNjJkZGI0M2ViZDg0MDUvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS41LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIyNDY1M2U1N2ZhZTQ3MDA5ZjM4ZDc2ODk3NzA1MjE1OTUyNzg5Mjg4NDBiOThlMzZlZDNhYWY4ZGU3ODY4ZTI2Iiw=
ICAgICAgICAgICJtZDUiOiAiNWQ2NzBlN2M2ZTk4N2M4ZTM2OTBmM2RiN2E5YzFhMTIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzM1MjcyYjI5MGMyZDk5OTcyMDJlMGU4MTFlZWMyOWI4OTkwM2UxN2ZhN2NhNTljZTYxODNlZjRmYjE5OWMwZSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS41LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1ZDY3MGU3YzZlOTg3YzhlMzY5MGYzZGI3YTljMWExMiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDMxMTExMSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNC0yNlQxNTozMzozMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNC0yNlQxNTozMzozMi40NzY3MDhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8yNC82NS8zZTU3ZmFlNDcwMDlmMzhkNzY4OTc3MDUyMTU5NTI3ODkyODg0MGI5OGUzNmVkM2FhZjhkZTc4NjhlMjYvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS41LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjYiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwN2I0NDQ2M2UyOWJiYzA2ZDdlZjAwOGNlZmQ3NDdmMTM0YmRjZjA4ODMwZTczNGM4NzZiMmZlNDNjYWE0Zjk4Iiw=
ICAgICAgICAgICJtZDUiOiAiZDgwMDc4NWUxNzg1YmE4OWJiNTNkMjZkMGQyNGE0MzkiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZWJkMWZjYzg3MmViYjQ0OGU0MzZjMjdkMTk0ZGIxM2ZjNTdkOTE5ZmEzZDJlMTBkN2EyYzk1ZTA2NzRjYzY3MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS42LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJkODAwNzg1ZTE3ODViYTg5YmI1M2QyNmQwZDI0YTQzOSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDEwMTU4Niw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wN1QxMzozMzowMyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wN1QxMzozMzowMy4wNDQxNjBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNy9iNC80NDYzZTI5YmJjMDZkN2VmMDA4Y2VmZDc0N2YxMzRiZGNmMDg4MzBlNzM0Yzg3NmIyZmU0M2NhYTRmOTgvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS42LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjYTk5YzE5NmVlZDI0MjFlNjZiOWUwZDRkM2MwMjQ2MjY1MjY3NGE4MzQ0ODYwMGJmOGJiNmJhZDJlMjQzMzY4Iiw=
ICAgICAgICAgICJtZDUiOiAiZTRlNTQwZDRlNGQwN2M4NmM0OWEzMDY3NzFhOGE1NjUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTQ1MWEzNjdhOTBjMmRjNmRkYzIzYzhlZjI2ZTMzZGEwMmE5YzE1Mzg5YzE5ODEzOWMzNTJiNmUwZDA1MmViZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS42LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlNGU1NDBkNGU0ZDA3Yzg2YzQ5YTMwNjc3MWE4YTU2NSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDM1NTU1OSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0xMC0wN1QxMzozMzowOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0xMC0wN1QxMzozMzowOS4zMDUyMDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jYS85OS9jMTk2ZWVkMjQyMWU2NmI5ZTBkNGQzYzAyNDYyNjUyNjc0YTgzNDQ4NjAwYmY4YmI2YmFkMmUyNDMzNjgvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS42LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjciOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJlNmI4NzZkZDYxMDY2MDcwN2NkMjc0MDgwNmFjYTI2YjRiMTAyNzgwZjIzNjk4YTU2Y2JjNjAwOGU4YzY4MzhiIiw=
ICAgICAgICAgICJtZDUiOiAiMmI5N2U0YjlhNDg4YTU0YThkZTdhY2Q2NjgwMDI0MDMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMWEzMTQxNWFkODZjOWI4ZDc1ZDllZTc3NDhkNTU0NjYzNGMzMDY0MzI2YzE4MDQ5ZDFmZTFmZmM5NzBkOTk3MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS43LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIyYjk3ZTRiOWE0ODhhNTRhOGRlN2FjZDY2ODAwMjQwMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDExMzkxNSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMS0yMFQxNTo1Mzo1NSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMS0yMFQxNTo1Mzo1NS44NjM5MTlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9lNi9iOC83NmRkNjEwNjYwNzA3Y2QyNzQwODA2YWNhMjZiNGIxMDI3ODBmMjM2OThhNTZjYmM2MDA4ZThjNjgzOGIvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS43LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzYzYzZGQ0NDFlOWNiYWQ3YjhhMjE3ZDI5ZjllOTRiZDNkMTUxYWE0Y2FlNzA2NDFjZWJlNWM1MDJhMTYxZTk5Iiw=
ICAgICAgICAgICJtZDUiOiAiYTBmMTAzMWI1ZGYzYWNjNGQyNjM1YzZkZGFiY2JjODIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjBkYTRkYTlkY2ViYmFkMDJlYWJmZjY1ZDc2ZjBkMTA4NzMyMTNlZmFmOWYyMGIxNDUyNDkzMWZiN2Q4MWQ2NCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS43LnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhMGYxMDMxYjVkZjNhY2M0ZDI2MzVjNmRkYWJjYmM4MiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49Mi43LCAhPTMuMC4qLCAhPTMuMS4qLCAhPTMuMi4qLCAhPTMuMy4qLCAhPTMuNC4qLCAhPTMuNS4qIiw=
ICAgICAgICAic2l6ZSI6IDM3MDI4NSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMS0yMFQxNTo1NDowMiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMS0yMFQxNTo1NDowMi4xNDY4MDJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zYy82My9kZDQ0MWU5Y2JhZDdiOGEyMTdkMjlmOWU5NGJkM2QxNTFhYTRjYWU3MDY0MWNlYmU1YzUwMmExNjFlOTkvY29sbGVjdGl2ZS5leHBvcnRpbXBvcnQtMS43LnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiZTZiODc2ZGQ2MTA2NjA3MDdjZDI3NDA4MDZhY2EyNmI0YjEwMjc4MGYyMzY5OGE1NmNiYzYwMDhlOGM2ODM4YiIs
ICAgICAgICAibWQ1IjogIjJiOTdlNGI5YTQ4OGE1NGE4ZGU3YWNkNjY4MDAyNDAzIiw=
ICAgICAgICAic2hhMjU2IjogIjFhMzE0MTVhZDg2YzliOGQ3NWQ5ZWU3NzQ4ZDU1NDY2MzRjMzA2NDMyNmMxODA0OWQxZmUxZmZjOTcwZDk5NzIi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LTEuNy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMmI5N2U0YjlhNDg4YTU0YThkZTdhY2Q2NjgwMDI0MDMiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTIuNywgIT0zLjAuKiwgIT0zLjEuKiwgIT0zLjIuKiwgIT0zLjMuKiwgIT0zLjQuKiwgIT0zLjUuKiIs
ICAgICAgInNpemUiOiAxMTM5MTUs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDEtMjBUMTU6NTM6NTUiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDEtMjBUMTU6NTM6NTUuODYzOTE5WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvZTYvYjgvNzZkZDYxMDY2MDcwN2NkMjc0MDgwNmFjYTI2YjRiMTAyNzgwZjIzNjk4YTU2Y2JjNjAwOGU4YzY4MzhiL2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LTEuNy1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiM2M2M2RkNDQxZTljYmFkN2I4YTIxN2QyOWY5ZTk0YmQzZDE1MWFhNGNhZTcwNjQxY2ViZTVjNTAyYTE2MWU5OSIs
ICAgICAgICAibWQ1IjogImEwZjEwMzFiNWRmM2FjYzRkMjYzNWM2ZGRhYmNiYzgyIiw=
ICAgICAgICAic2hhMjU2IjogImYwZGE0ZGE5ZGNlYmJhZDAyZWFiZmY2NWQ3NmYwZDEwODczMjEzZWZhZjlmMjBiMTQ1MjQ5MzFmYjdkODFkNjQi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImNvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LTEuNy50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiYTBmMTAzMWI1ZGYzYWNjNGQyNjM1YzZkZGFiY2JjODIiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTIuNywgIT0zLjAuKiwgIT0zLjEuKiwgIT0zLjIuKiwgIT0zLjMuKiwgIT0zLjQuKiwgIT0zLjUuKiIs
ICAgICAgInNpemUiOiAzNzAyODUs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDEtMjBUMTU6NTQ6MDIiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDEtMjBUMTU6NTQ6MDIuMTQ2ODAyWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvM2MvNjMvZGQ0NDFlOWNiYWQ3YjhhMjE3ZDI5ZjllOTRiZDNkMTUxYWE0Y2FlNzA2NDFjZWJlNWM1MDJhMTYxZTk5L2NvbGxlY3RpdmUuZXhwb3J0aW1wb3J0LTEuNy50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
