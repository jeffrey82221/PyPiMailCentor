ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiQVBJTWF0aWMgU0RLIEdlbmVyYXRvciIs
ICAgICJhdXRob3JfZW1haWwiOiAic3VwcG9ydEBhcGltYXRpYy5pbyIs
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFtdLA==
ICAgICJkZXNjcmlwdGlvbiI6ICIjIEdldHRpbmcgc3RhcnRlZFxuXG5UT0RPOiBBZGQgYSBkZXNjcmlwdGlvblxuXG4jIyBIb3cgdG8gQnVpbGRcblxuXG5Zb3UgbXVzdCBoYXZlIFB5dGhvbiBgYGAyID49Mi43LjlgYGAgb3IgUHl0aG9uIGBgYDMgPj0zLjRgYGAgaW5zdGFsbGVkIG9uIHlvdXIgc3lzdGVtIHRvIGluc3RhbGwgYW5kIHJ1biB0aGlzIFNESy4gVGhpcyBTREsgcGFja2FnZSBkZXBlbmRzIG9uIG90aGVyIFB5dGhvbiBwYWNrYWdlcyBsaWtlIG5vc2UsIGpzb25waWNrbGUgZXRjLiBcblRoZXNlIGRlcGVuZGVuY2llcyBhcmUgZGVmaW5lZCBpbiB0aGUgYGBgcmVxdWlyZW1lbnRzLnR4dGBgYCBmaWxlIHRoYXQgY29tZXMgd2l0aCB0aGUgU0RLLlxuVG8gcmVzb2x2ZSB0aGVzZSBkZXBlbmRlbmNpZXMsIHlvdSBjYW4gdXNlIHRoZSBQSVAgRGVwZW5kZW5jeSBtYW5hZ2VyLiBJbnN0YWxsIGl0IGJ5IGZvbGxvd2luZyBzdGVwcyBhdCBbaHR0cHM6Ly9waXAucHlwYS5pby9lbi9zdGFibGUvaW5zdGFsbGluZy9dKGh0dHBzOi8vcGlwLnB5cGEuaW8vZW4vc3RhYmxlL2luc3RhbGxpbmcvKS5cblxuUHl0aG9uIGFuZCBQSVAgZXhlY3V0YWJsZXMgc2hvdWxkIGJlIGRlZmluZWQgaW4geW91ciBQQVRILiBPcGVuIGNvbW1hbmQgcHJvbXB0IGFuZCB0eXBlIGBgYHBpcCAtLXZlcnNpb25gYGAuXG5UaGlzIHNob3VsZCBkaXNwbGF5IHRoZSB2ZXJzaW9uIG9mIHRoZSBQSVAgRGVwZW5kZW5jeSBNYW5hZ2VyIGluc3RhbGxlZCBpZiB5b3VyIGluc3RhbGxhdGlvbiB3YXMgc3VjY2Vzc2Z1bCBhbmQgdGhlIHBhdGhzIGFyZSBwcm9wZXJseSBkZWZpbmVkLlxuXG4qIFVzaW5nIGNvbW1hbmQgbGluZSwgbmF2aWdhdGUgdG8gdGhlIGRpcmVjdG9yeSBjb250YWluaW5nIHRoZSBnZW5lcmF0ZWQgZmlsZXMgKGluY2x1ZGluZyBgYGByZXF1aXJlbWVudHMudHh0YGBgKSBmb3IgdGhlIFNESy5cbiogUnVuIHRoZSBjb21tYW5kIGBgYHBpcCBpbnN0YWxsIC1yIHJlcXVpcmVtZW50cy50eHRgYGAuIFRoaXMgc2hvdWxkIGluc3RhbGwgYWxsIHRoZSByZXF1aXJlZCBkZXBlbmRlbmNpZXMuXG5cbiFbQnVpbGRpbmcgU0RLIC0gU3RlcCAxXShodHRwczovL2FwaWRvY3MuaW8vaWxsdXN0cmF0aW9uL3B5dGhvbj9zdGVwPWluc3RhbGxEZXBlbmRlbmNpZXMmd29ya3NwYWNlRm9sZGVyPU1lc3NhZ2VzLVB5dGhvbilcblxuXG4jIyBIb3cgdG8gVXNlXG5cblRoZSBmb2xsb3dpbmcgc2VjdGlvbiBleHBsYWlucyBob3cgdG8gdXNlIHRoZSBNZXNzYWdlcyBTREsgcGFja2FnZSBpbiBhIG5ldyBwcm9qZWN0LlxuXG4jIyMgMS4gT3BlbiBQcm9qZWN0IGluIGFuIElERVxuXG5PcGVuIHVwIGEgUHl0aG9uIElERSBsaWtlIFB5Q2hhcm0uIFRoZSBiYXNpYyB3b3JrZmxvdyBwcmVzZW50ZWQgaGVyZSBpcyBhbHNvIGFwcGxpY2FibGUgaWYgeW91IHByZWZlciB1c2luZyBhIGRpZmZlcmVudCBlZGl0b3Igb3IgSURFLlxuXG4hW09wZW4gcHJvamVjdCBpbiBQeUNoYXJtIC0gU3RlcCAxXShodHRwczovL2FwaWRvY3MuaW8vaWxsdXN0cmF0aW9uL3B5dGhvbj9zdGVwPXB5Q2hhcm0pXG5cbkNsaWNrIG9uIGBgYE9wZW5gYGAgaW4gUHlDaGFybSB0byBicm93c2UgdG8geW91ciBnZW5lcmF0ZWQgU0RLIGRpcmVjdG9yeSBhbmQgdGhlbiBjbGljayBgYGBPS2BgYC5cblxuIVtPcGVuIHByb2plY3QgaW4gUHlDaGFybSAtIFN0ZXAgMl0oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1vcGVuUHJvamVjdDAmd29ya3NwYWNlRm9sZGVyPU1lc3NhZ2VzLVB5dGhvbikgICAgIFxuXG5UaGUgcHJvamVjdCBmaWxlcyB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgc2lkZSBiYXIgYXMgZm9sbG93czpcblxuIVtPcGVuIHByb2plY3QgaW4gUHlDaGFybSAtIFN0ZXAgM10oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1vcGVuUHJvamVjdDEmd29ya3NwYWNlRm9sZGVyPU1lc3NhZ2VzLVB5dGhvbiZwcm9qZWN0TmFtZT1hcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0KSAgICAgXG5cbiMjIyAyLiBBZGQgYSBuZXcgVGVzdCBQcm9qZWN0XG5cbkNyZWF0ZSBhIG5ldyBkaXJlY3RvcnkgYnkgcmlnaHQgY2xpY2tpbmcgb24gdGhlIHNvbHV0aW9uIG5hbWUgYXMgc2hvd24gYmVsb3c6XG5cbiFbQWRkIGEgbmV3IHByb2plY3QgaW4gUHlDaGFybSAtIFN0ZXAgMV0oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1jcmVhdGVEaXJlY3Rvcnkmd29ya3NwYWNlRm9sZGVyPU1lc3NhZ2VzLVB5dGhvbiZwcm9qZWN0TmFtZT1hcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0KVxuXG5OYW1lIHRoZSBkaXJlY3RvcnkgYXMgXCJ0ZXN0XCJcblxuIVtBZGQgYSBuZXcgcHJvamVjdCBpbiBQeUNoYXJtIC0gU3RlcCAyXShodHRwczovL2FwaWRvY3MuaW8vaWxsdXN0cmF0aW9uL3B5dGhvbj9zdGVwPW5hbWVEaXJlY3RvcnkpXG4gICBcbkFkZCBhIHB5dGhvbiBmaWxlIHRvIHRoaXMgcHJvamVjdCB3aXRoIHRoZSBuYW1lIFwidGVzdHNka1wiXG5cbiFbQWRkIGEgbmV3IHByb2plY3QgaW4gUHlDaGFybSAtIFN0ZXAgM10oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1jcmVhdGVGaWxlJndvcmtzcGFjZUZvbGRlcj1NZXNzYWdlcy1QeXRob24mcHJvamVjdE5hbWU9YXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNClcblxuTmFtZSBpdCBcInRlc3RzZGtcIlxuXG4hW0FkZCBhIG5ldyBwcm9qZWN0IGluIFB5Q2hhcm0gLSBTdGVwIDRdKGh0dHBzOi8vYXBpZG9jcy5pby9pbGx1c3RyYXRpb24vcHl0aG9uP3N0ZXA9bmFtZUZpbGUpXG5cbkluIHlvdXIgcHl0aG9uIGZpbGUgeW91IHdpbGwgYmUgcmVxdWlyZWQgdG8gaW1wb3J0IHRoZSBnZW5lcmF0ZWQgcHl0aG9uIGxpYnJhcnkgdXNpbmcgdGhlIGZvbGxvd2luZyBjb2RlIGxpbmVzXG5cbmBgYFB5dGhvblxuZnJvbSBhcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0LmFwaW1hdGljZGVtb25zdHJhdGlvbl8xMjM0X2NsaWVudCBpbXBvcnQgQXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNENsaWVudFxuYGBgXG5cbiFbQWRkIGEgbmV3IHByb2plY3QgaW4gUHlDaGFybSAtIFN0ZXAgNF0oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1wcm9qZWN0RmlsZXMmd29ya3NwYWNlRm9sZGVyPU1lc3NhZ2VzLVB5dGhvbiZsaWJyYXJ5TmFtZT1hcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0LmFwaW1hdGljZGVtb25zdHJhdGlvbl8xMjM0X2NsaWVudCZwcm9qZWN0TmFtZT1hcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0JmNsYXNzTmFtZT1BcGltYXRpY2RlbW9uc3RyYXRpb24xMjM0Q2xpZW50KVxuXG5BZnRlciB0aGlzIHlvdSBjYW4gd3JpdGUgY29kZSB0byBpbnN0YW50aWF0ZSBhbiBBUEkgY2xpZW50IG9iamVjdCwgZ2V0IGEgY29udHJvbGxlciBvYmplY3QgYW5kICBtYWtlIEFQSSBjYWxscy4gU2FtcGxlIGNvZGUgaXMgZ2l2ZW4gaW4gdGhlIHN1YnNlcXVlbnQgc2VjdGlvbnMuXG5cbiMjIyAzLiBSdW4gdGhlIFRlc3QgUHJvamVjdFxuXG5UbyBydW4gdGhlIGZpbGUgd2l0aGluIHlvdXIgdGVzdCBwcm9qZWN0LCByaWdodCBjbGljayBvbiB5b3VyIFB5dGhvbiBmaWxlIGluc2lkZSB5b3VyIFRlc3QgcHJvamVjdCBhbmQgY2xpY2sgb24gYGBgUnVuYGBgXG5cbiFbUnVuIFRlc3QgUHJvamVjdCAtIFN0ZXAgMV0oaHR0cHM6Ly9hcGlkb2NzLmlvL2lsbHVzdHJhdGlvbi9weXRob24/c3RlcD1ydW5Qcm9qZWN0JndvcmtzcGFjZUZvbGRlcj1NZXNzYWdlcy1QeXRob24mbGlicmFyeU5hbWU9YXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC5hcGltYXRpY2RlbW9uc3RyYXRpb25fMTIzNF9jbGllbnQmcHJvamVjdE5hbWU9YXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNCZjbGFzc05hbWU9QXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNENsaWVudClcblxuXG4jIyBIb3cgdG8gVGVzdFxuXG5Zb3UgY2FuIHRlc3QgdGhlIGdlbmVyYXRlZCBTREsgYW5kIHRoZSBzZXJ2ZXIgd2l0aCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCB0ZXN0XG5jYXNlcy4gdW5pdHRlc3QgaXMgdXNlZCBhcyB0aGUgdGVzdGluZyBmcmFtZXdvcmsgYW5kIG5vc2UgaXMgdXNlZCBhcyB0aGUgdGVzdFxucnVubmVyLiBZb3UgY2FuIHJ1biB0aGUgdGVzdHMgYXMgZm9sbG93czpcblxuICAxLiBGcm9tIHRlcm1pbmFsL2NtZCBuYXZpZ2F0ZSB0byB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhlIFNESy5cbiAgMi4gSW52b2tlIGBgYHBpcCBpbnN0YWxsIC1yIHRlc3QtcmVxdWlyZW1lbnRzLnR4dGBgYFxuICAzLiBJbnZva2UgYGBgbm9zZXRlc3RzYGBgXG5cbiMjIEluaXRpYWxpemF0aW9uXG5cbiMjIyBcblxuQVBJIGNsaWVudCBjYW4gYmUgaW5pdGlhbGl6ZWQgYXMgZm9sbG93aW5nLlxuXG5gYGBweXRob25cblxuY2xpZW50ID0gQXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNENsaWVudCgpXG5gYGBcblxuXG5cbiMgQ2xhc3MgUmVmZXJlbmNlXG5cbiMjIDxhIG5hbWU9XCJsaXN0X29mX2NvbnRyb2xsZXJzXCI+PC9hPkxpc3Qgb2YgQ29udHJvbGxlcnNcblxuKiBbTWVzc2FnZXNDb250cm9sbGVyXSgjbWVzc2FnZXNfY29udHJvbGxlcilcbiogW1JlcGxpZXNDb250cm9sbGVyXSgjcmVwbGllc19jb250cm9sbGVyKVxuKiBbRGVsaXZlcnlSZXBvcnRzQ29udHJvbGxlcl0oI2RlbGl2ZXJ5X3JlcG9ydHNfY29udHJvbGxlcilcblxuIyMgPGEgbmFtZT1cIm1lc3NhZ2VzX2NvbnRyb2xsZXJcIj48L2E+IVtDbGFzczogXShodHRwczovL2FwaWRvY3MuaW8vaW1nL2NsYXNzLnBuZyBcIi5NZXNzYWdlc0NvbnRyb2xsZXJcIikgTWVzc2FnZXNDb250cm9sbGVyXG5cbiMjIyBHZXQgY29udHJvbGxlciBpbnN0YW5jZVxuXG5BbiBpbnN0YW5jZSBvZiB0aGUgYGBgIE1lc3NhZ2VzQ29udHJvbGxlciBgYGAgY2xhc3MgY2FuIGJlIGFjY2Vzc2VkIGZyb20gdGhlIEFQSSBDbGllbnQuXG5cbmBgYHB5dGhvblxuIG1lc3NhZ2VzX2NvbnRyb2xsZXIgPSBjbGllbnQubWVzc2FnZXNcbmBgYFxuXG4jIyMgPGEgbmFtZT1cImNyZWF0ZV9zZW5kX21lc3NhZ2VzXCI+PC9hPiFbTWV0aG9kOiBdKGh0dHBzOi8vYXBpZG9jcy5pby9pbWcvbWV0aG9kLnBuZyBcIi5NZXNzYWdlc0NvbnRyb2xsZXIuY3JlYXRlX3NlbmRfbWVzc2FnZXNcIikgY3JlYXRlX3NlbmRfbWVzc2FnZXNcblxuPiBTdWJtaXQgb25lIG9yIG1vcmUgKHVwIHRvIDEwMCBwZXIgcmVxdWVzdCkgU01TLCBNTVMgb3IgdGV4dCB0byB2b2ljZSBtZXNzYWdlcyBmb3IgZGVsaXZlcnkuXG4+IFRoZSBtb3N0IGJhc2ljIG1lc3NhZ2UgaGFzIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuPiBgYGBqc29uXG4+IHtcbj4gICAgIFwibWVzc2FnZXNcIjogW1xuPiAgICAgICAgIHtcbj4gICAgICAgICAgICAgXCJjb250ZW50XCI6IFwiTXkgZmlyc3QgbWVzc2FnZSFcIixcbj4gICAgICAgICAgICAgXCJkZXN0aW5hdGlvbl9udW1iZXJcIjogXCIrNjE0OTE1NzAxNTZcIlxuPiAgICAgICAgIH1cbj4gICAgIF1cbj4gfVxuPiBgYGBcbj4gTW9yZSBhZHZhbmNlZCBkZWxpdmVyeSBmZWF0dXJlcyBjYW4gYmUgc3BlY2lmaWVkIGJ5IHNldHRpbmcgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIGluIGEgbWVzc2FnZTpcbj4gLSBgYGBjYWxsYmFja191cmxgYGAgQSBVUkwgY2FuIGJlIGluY2x1ZGVkIHdpdGggZWFjaCBtZXNzYWdlIHRvIHdoaWNoIFdlYmhvb2tzIHdpbGwgYmUgcHVzaGVkIHRvXG4+ICAgdmlhIGEgSFRUUCBQT1NUIHJlcXVlc3QuIFdlYmhvb2tzIHdpbGwgYmUgc2VudCBpZiBhbmQgd2hlbiB0aGUgc3RhdHVzIG9mIHRoZSBtZXNzYWdlIGNoYW5nZXMgYXNcbj4gICBpdCBpcyBwcm9jZXNzZWQgKGlmIHRoZSBkZWxpdmVyeSByZXBvcnQgcHJvcGVydHkgb2YgdGhlIHJlcXVlc3QgaXMgc2V0IHRvIGBgYHRydWVgYGApIGFuZCB3aGVuIHJlcGxpZXNcbj4gICBhcmUgcmVjZWl2ZWQuIFNwZWNpZnlpbmcgYSBjYWxsYmFjayBVUkwgaXMgb3B0aW9uYWwuXG4+IC0gYGBgY29udGVudGBgYCBUaGUgY29udGVudCBvZiB0aGUgbWVzc2FnZS4gVGhpcyBjYW4gYmUgYSBVbmljb2RlIHN0cmluZywgdXAgdG8gNSwwMDAgY2hhcmFjdGVycyBsb25nLlxuPiAgIE1lc3NhZ2UgY29udGVudCBpcyByZXF1aXJlZC5cbj4gLSBgYGBkZWxpdmVyeV9yZXBvcnRgYGAgRGVsaXZlcnkgcmVwb3J0cyBjYW4gYmUgcmVxdWVzdGVkIHdpdGggZWFjaCBtZXNzYWdlLiBJZiBkZWxpdmVyeSByZXBvcnRzIGFyZSByZXF1ZXN0ZWQsIGEgd2ViaG9va1xuPiAgIHdpbGwgYmUgc3VibWl0dGVkIHRvIHRoZSBgYGBjYWxsYmFja191cmxgYGAgcHJvcGVydHkgc3BlY2lmaWVkIGZvciB0aGUgbWVzc2FnZSAob3IgdG8gdGhlIHdlYmhvb2tzKVxuPiAgIHNwZWNpZmllZCBmb3IgdGhlIGFjY291bnQgZXZlcnkgdGltZSB0aGUgc3RhdHVzIG9mIHRoZSBtZXNzYWdlIGNoYW5nZXMgYXMgaXQgaXMgcHJvY2Vzc2VkLiBUaGVcbj4gICBjdXJyZW50IHN0YXR1cyBvZiB0aGUgbWVzc2FnZSBjYW4gYWxzbyBiZSByZXRyaWV2ZWQgdmlhIHRoZSBEZWxpdmVyeSBSZXBvcnRzIGVuZHBvaW50IG9mIHRoZVxuPiAgIE1lc3NhZ2VzIEFQSS4gRGVsaXZlcnkgcmVwb3J0cyBhcmUgb3B0aW9uYWwgYW5kIGJ5IGRlZmF1bHQgd2lsbCBub3QgYmUgcmVxdWVzdGVkLlxuPiAtIGBgYGRlc3RpbmF0aW9uX251bWJlcmBgYCBUaGUgZGVzdGluYXRpb24gbnVtYmVyIHRoZSBtZXNzYWdlIHNob3VsZCBiZSBkZWxpdmVyZWQgdG8uIFRoaXMgc2hvdWxkIGJlIHNwZWNpZmllZCBpbiBFLjE2NFxuPiAgIGludGVybmF0aW9uYWwgZm9ybWF0LiBGb3IgaW5mb3JtYXRpb24gb24gRS4xNjQsIHBsZWFzZSByZWZlciB0byBodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0UuMTY0LlxuPiAgIEEgZGVzdGluYXRpb24gbnVtYmVyIGlzIHJlcXVpcmVkLlxuPiAtIGBgYGZvcm1hdGBgYCBUaGUgZm9ybWF0IHNwZWNpZmllcyB3aGljaCBmb3JtYXQgdGhlIG1lc3NhZ2Ugd2lsbCBiZSBzZW50IGFzLCBgYGBTTVNgYGAgKHRleHQgbWVzc2FnZSksIGBgYE1NU2BgYCAobXVsdGltZWRpYSBtZXNzYWdlKVxuPiAgIG9yIGBgYFRUU2BgYCAodGV4dCB0byBzcGVlY2gpLiBXaXRoIGBgYFRUU2BgYCBmb3JtYXQsIHdlIHdpbGwgY2FsbCB0aGUgZGVzdGluYXRpb24gbnVtYmVyIGFuZCByZWFkIG91dCB0aGVcbj4gICBtZXNzYWdlIHVzaW5nIGEgY29tcHV0ZXIgZ2VuZXJhdGVkIHZvaWNlLiBTcGVjaWZ5aW5nIGEgZm9ybWF0IGlzIG9wdGlvbmFsLCBieSBkZWZhdWx0IGBgYFNNU2BgYCB3aWxsIGJlIHVzZWQuXG4+IC0gYGBgc291cmNlX251bWJlcmBgYCBBIHNvdXJjZSBudW1iZXIgbWF5IGJlIHNwZWNpZmllZCBmb3IgdGhlIG1lc3NhZ2UsIHRoaXMgd2lsbCBiZSB0aGUgbnVtYmVyIHRoYXRcbj4gICB0aGUgbWVzc2FnZSBhcHBlYXJzIGZyb20gb24gdGhlIGhhbmRzZXQuIEJ5IGRlZmF1bHQgdGhpcyBmZWF0dXJlIGlzIF9ub3RfIGF2YWlsYWJsZSBhbmQgd2lsbCBiZSBpZ25vcmVkXG4+ICAgaW4gdGhlIHJlcXVlc3QuIFBsZWFzZSBjb250YWN0IDxzdXBwb3J0QG1lc3NhZ2VtZWRpYS5jb20+IGZvciBtb3JlIGluZm9ybWF0aW9uLiBTcGVjaWZ5aW5nIGEgc291cmNlXG4+ICAgbnVtYmVyIGlzIG9wdGlvbmFsIGFuZCBhIGJ5IGRlZmF1bHQgYSBzb3VyY2UgbnVtYmVyIHdpbGwgYmUgYXNzaWduZWQgdG8gdGhlIG1lc3NhZ2UuXG4+IC0gYGBgbWVkaWFgYGAgVGhlIG1lZGlhIGlzIHVzZWQgdG8gc3BlY2lmeSB0aGUgdXJsIG9mIHRoZSBtZWRpYSBmaWxlIHRoYXQgeW91IGFyZSB0cnlpbmcgdG8gc2VuZC4gU3VwcG9ydGVkIGZpbGUgZm9ybWF0cyBpbmNsdWRlIHBuZywganBlZyBhbmQgZ2lmLiBgYGBmb3JtYXRgYGAgcGFyYW1ldGVyIG11c3QgYmUgc2V0IHRvIGBgYE1NU2BgYCBmb3IgdGhpcyB0byB3b3JrLlxuPiAtIGBgYHNvdXJjZV9udW1iZXJfdHlwZWBgYCBJZiBhIHNvdXJjZSBudW1iZXIgaXMgc3BlY2lmaWVkLCB0aGUgdHlwZSBvZiBzb3VyY2UgbnVtYmVyIG1heSBhbHNvIGJlXG4+ICAgc3BlY2lmaWVkLiBUaGlzIGlzIHJlY29tbWVuZGVkIHdoZW4gdXNpbmcgYSBzb3VyY2UgYWRkcmVzcyB0eXBlIHRoYXQgaXMgbm90IGFuIGludGVybmF0aW9uYWxseVxuPiAgIGZvcm1hdHRlZCBudW1iZXIsIGF2YWlsYWJsZSBvcHRpb25zIGFyZSBgYGBJTlRFUk5BVElPTkFMYGBgLCBgYGBBTFBIQU5VTUVSSUNgYGAgb3IgYGBgU0hPUlRDT0RFYGBgLiBTcGVjaWZ5aW5nIGFcbj4gICBzb3VyY2UgbnVtYmVyIHR5cGUgaXMgb25seSB2YWxpZCB3aGVuIHRoZSBgYGBzb3VyY2VfbnVtYmVyYGBgIHBhcmFtZXRlciBpcyBzcGVjaWZpZWQgYW5kIGlzIG9wdGlvbmFsLlxuPiAgIElmIGEgc291cmNlIG51bWJlciBpcyBzcGVjaWZpZWQgYW5kIG5vIHNvdXJjZSBudW1iZXIgdHlwZSBpcyBzcGVjaWZpZWQsIHRoZSBzb3VyY2UgbnVtYmVyIHR5cGUgd2lsbCBiZVxuPiAgIGluZmVycmVkIGZyb20gdGhlIHNvdXJjZSBudW1iZXIsIGhvd2V2ZXIgdGhpcyBtYXkgYmUgaW5hY2N1cmF0ZS5cbj4gLSBgYGBzY2hlZHVsZWRgYGAgQSBtZXNzYWdlIGNhbiBiZSBzY2hlZHVsZWQgZm9yIGRlbGl2ZXJ5IGluIHRoZSBmdXR1cmUgYnkgc2V0dGluZyB0aGUgc2NoZWR1bGVkIHByb3BlcnR5LlxuPiAgIFRoZSBzY2hlZHVsZWQgcHJvcGVydHkgZXhwZWN0cyBhIGRhdGUgdGltZSBzcGVjaWZpZWQgaW4gSVNPIDg2MDEgZm9ybWF0LiBUaGUgc2NoZWR1bGVkIHRpbWUgbXVzdCBiZVxuPiAgIHByb3ZpZGVkIGluIFVUQyBhbmQgaXMgb3B0aW9uYWwuIElmIG5vIHNjaGVkdWxlZCBwcm9wZXJ0eSBpcyBzZXQsIHRoZSBtZXNzYWdlIHdpbGwgYmUgZGVsaXZlcmVkIGltbWVkaWF0ZWx5LlxuPiAtIGBgYG1lc3NhZ2VfZXhwaXJ5X3RpbWVzdGFtcGBgYCBBIG1lc3NhZ2UgZXhwaXJ5IHRpbWVzdGFtcCBjYW4gYmUgcHJvdmlkZWQgdG8gc3BlY2lmeSB0aGUgbGF0ZXN0IHRpbWVcbj4gICBhdCB3aGljaCB0aGUgbWVzc2FnZSBzaG91bGQgYmUgZGVsaXZlcmVkLiBJZiB0aGUgbWVzc2FnZSBjYW5ub3QgYmUgZGVsaXZlcmVkIGJlZm9yZSB0aGUgc3BlY2lmaWVkXG4+ICAgbWVzc2FnZSBleHBpcnkgdGltZXN0YW1wIGVsYXBzZXMsIHRoZSBtZXNzYWdlIHdpbGwgYmUgZGlzY2FyZGVkLiBTcGVjaWZ5aW5nIGEgbWVzc2FnZSBleHBpcnkgXG4+ICAgdGltZXN0YW1wIGlzIG9wdGlvbmFsLlxuPiAtIGBgYG1ldGFkYXRhYGBgIE1ldGFkYXRhIGNhbiBiZSBpbmNsdWRlZCB3aXRoIHRoZSBtZXNzYWdlIHdoaWNoIHdpbGwgdGhlbiBiZSBpbmNsdWRlZCB3aXRoIGFueSBkZWxpdmVyeVxuPiAgIHJlcG9ydHMgb3IgcmVwbGllcyBtYXRjaGVkIHRvIHRoZSBtZXNzYWdlLiBUaGlzIGNhbiBiZSB1c2VkIHRvIGNyZWF0ZSBwb3dlcmZ1bCB0d28td2F5IG1lc3NhZ2luZ1xuPiAgIGFwcGxpY2F0aW9ucyB3aXRob3V0IGhhdmluZyB0byBzdG9yZSBwZXJzaXN0ZW50IGRhdGEgaW4gdGhlIGFwcGxpY2F0aW9uLiBVcCB0byAxMCBrZXkgLyB2YWx1ZSBtZXRhZGF0YSBkYXRhXG4+ICAgcGFpcnMgY2FuIGJlIHNwZWNpZmllZCBpbiBhIG1lc3NhZ2UuIEVhY2gga2V5IGNhbiBiZSB1cCB0byAxMDAgY2hhcmFjdGVycyBsb25nLCBhbmQgZWFjaCB2YWx1ZSB1cCB0byBcbj4gICAyNTYgY2hhcmFjdGVycyBsb25nLiBTcGVjaWZ5aW5nIG1ldGFkYXRhIGZvciBhIG1lc3NhZ2UgaXMgb3B0aW9uYWwuXG4+IFRoZSByZXNwb25zZSBib2R5IG9mIGEgc3VjY2Vzc2Z1bCBQT1NUIHJlcXVlc3QgdG8gdGhlIG1lc3NhZ2VzIGVuZHBvaW50IHdpbGwgaW5jbHVkZSBhIGBgYG1lc3NhZ2VzYGBgXG4+IHByb3BlcnR5IHdoaWNoIGNvbnRhaW5zIGEgbGlzdCBvZiBhbGwgbWVzc2FnZXMgc3VibWl0dGVkLiBUaGUgbGlzdCBvZiBtZXNzYWdlcyBzdWJtaXR0ZWQgd2lsbFxuPiByZWZsZWN0IHRoZSBsaXN0IG9mIG1lc3NhZ2VzIGluY2x1ZGVkIGluIHRoZSByZXF1ZXN0LCBidXQgZWFjaCBtZXNzYWdlIHdpbGwgYWxzbyBjb250YWluIHR3byBuZXdcbj4gcHJvcGVydGllcywgYGBgbWVzc2FnZV9pZGBgYCBhbmQgYGBgc3RhdHVzYGBgLiBUaGUgcmV0dXJuZWQgbWVzc2FnZSBJRCB3aWxsIGJlIGEgMzYgY2hhcmFjdGVyIFVVSURcbj4gd2hpY2ggY2FuIGJlIHVzZWQgdG8gY2hlY2sgdGhlIHN0YXR1cyBvZiB0aGUgbWVzc2FnZSB2aWEgdGhlIEdldCBNZXNzYWdlIFN0YXR1cyBlbmRwb2ludC4gVGhlIHN0YXR1c1xuPiBvZiB0aGUgbWVzc2FnZSB3aGljaCByZWZsZWN0IHRoZSBzdGF0dXMgb2YgdGhlIG1lc3NhZ2UgYXQgc3VibWlzc2lvbiB0aW1lIHdoaWNoIHdpbGwgYWx3YXlzIGJlXG4+IGBgYHF1ZXVlZGBgYC4gU2VlIHRoZSBEZWxpdmVyeSBSZXBvcnRzIHNlY3Rpb24gb2YgdGhpcyBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIG1lc3NhZ2Vcbj4gc3RhdHVlcy5cbj4gKk5vdGU6IHdoZW4gc2VuZGluZyBtdWx0aXBsZSBtZXNzYWdlcyBpbiBhIHJlcXVlc3QsIGFsbCBtZXNzYWdlcyBtdXN0IGJlIHZhbGlkIGZvciB0aGUgcmVxdWVzdCB0byBiZSBzdWNjZXNzZnVsLlxuPiBJZiBhbnkgbWVzc2FnZXMgaW4gdGhlIHJlcXVlc3QgYXJlIGludmFsaWQsIG5vIG1lc3NhZ2VzIHdpbGwgYmUgc2VudC4qXG5cbmBgYHB5dGhvblxuZGVmIGNyZWF0ZV9zZW5kX21lc3NhZ2VzKHNlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5KVxuYGBgXG5cbiMjIyMgUGFyYW1ldGVyc1xuXG58IFBhcmFtZXRlciB8IFRhZ3MgfCBEZXNjcmlwdGlvbiB8XG58LS0tLS0tLS0tLS18LS0tLS0tfC0tLS0tLS0tLS0tLS18XG58IGNvbnRlbnRUeXBlIHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcbnwgYWNjZXB0IHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcbnwgYm9keSB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG5cblxuXG4jIyMjIEV4YW1wbGUgVXNhZ2VcblxuYGBgcHl0aG9uXG5jb250ZW50X3R5cGUgPSAnYXBwbGljYXRpb24vanNvbidcbmFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuYm9keV92YWx1ZSA9IFwieyAgICBcXFwibWVzc2FnZXNcXFwiOiBbICAgICAgICB7ICAgICAgICAgICAgXFxcImNhbGxiYWNrX3VybFxcXCI6IFxcXCJodHRwczovL215LmNhbGxiYWNrLnVybC5jb21cXFwiLCAgICAgICAgICAgIFxcXCJjb250ZW50XFxcIjogXFxcIk15IGZpcnN0IG1lc3NhZ2VcXFwiLCAgICAgICAgICAgIFxcXCJkZXN0aW5hdGlvbl9udW1iZXJcXFwiOiBcXFwiKzYxNDkxNTcwMTU2XFxcIiwgICAgICAgICAgICBcXFwiZGVsaXZlcnlfcmVwb3J0XFxcIjogdHJ1ZSwgICAgICAgICAgICBcXFwiZm9ybWF0XFxcIjogXFxcIlNNU1xcXCIsICAgICAgICAgICAgXFxcIm1lc3NhZ2VfZXhwaXJ5X3RpbWVzdGFtcFxcXCI6IFxcXCIyMDE2LTExLTAzVDExOjQ5OjAyLjgwN1pcXFwiLCAgICAgICAgICAgIFxcXCJtZXRhZGF0YVxcXCI6IHsgICAgICAgICAgICAgICAgXFxcImtleTFcXFwiOiBcXFwidmFsdWUxXFxcIiwgICAgICAgICAgICAgICAgXFxcImtleTJcXFwiOiBcXFwidmFsdWUyXFxcIiAgICAgICAgICAgIH0sICAgICAgICAgICAgXFxcInNjaGVkdWxlZFxcXCI6IFxcXCIyMDE2LTExLTAzVDExOjQ5OjAyLjgwN1pcXFwiLCAgICAgICAgICAgIFxcXCJzb3VyY2VfbnVtYmVyXFxcIjogXFxcIis2MTQ5MTU3MDE1N1xcXCIsICAgICAgICAgICAgXFxcInNvdXJjZV9udW1iZXJfdHlwZVxcXCI6IFxcXCJJTlRFUk5BVElPTkFMXFxcIiAgICAgICAgfSwgICAgICAgIHsgICAgICAgICAgICBcXFwiY2FsbGJhY2tfdXJsXFxcIjogXFxcImh0dHBzOi8vbXkuY2FsbGJhY2sudXJsLmNvbVxcXCIsICAgICAgICAgICAgXFxcImNvbnRlbnRcXFwiOiBcXFwiTXkgc2Vjb25kIG1lc3NhZ2VcXFwiLCAgICAgICAgICAgIFxcXCJkZXN0aW5hdGlvbl9udW1iZXJcXFwiOiBcXFwiKzYxNDkxNTcwMTU4XFxcIiwgICAgICAgICAgICBcXFwiZGVsaXZlcnlfcmVwb3J0XFxcIjogdHJ1ZSwgICAgICAgICAgICBcXFwiZm9ybWF0XFxcIjogXFxcIk1NU1xcXCIsICAgICAgICAgICAgXFxcIm1lZGlhXFxcIjogWyBcXFwiaHR0cHM6Ly9pbWFnZXMucGV4ZWxzLmNvbS9waG90b3MvMTAxODM1MC9wZXhlbHMtcGhvdG8tMTAxODM1MC5qcGVnP2NzPXNyZ2ImZGw9YXJjaGl0ZWN0dXJlLWJ1aWxkaW5ncy1jaXR5LTEwMTgzNTAuanBnXFxcIiBdLCAgICAgICAgICAgIFxcXCJtZXNzYWdlX2V4cGlyeV90aW1lc3RhbXBcXFwiOiBcXFwiMjAxNi0xMS0wM1QxMTo0OTowMi44MDdaXFxcIiwgICAgICAgICAgICBcXFwibWV0YWRhdGFcXFwiOiB7ICAgICAgICAgICAgICAgIFxcXCJrZXkxXFxcIjogXFxcInZhbHVlMVxcXCIsICAgICAgICAgICAgICAgIFxcXCJrZXkyXFxcIjogXFxcInZhbHVlMlxcXCIgICAgICAgICAgICB9LCAgICAgICAgICAgIFxcXCJzY2hlZHVsZWRcXFwiOiBcXFwiMjAxNi0xMS0wM1QxMTo0OTowMi44MDdaXFxcIiwgICAgICAgICAgICBcXFwic291cmNlX251bWJlclxcXCI6IFxcXCIrNjE0OTE1NzAxNTlcXFwiLCAgICAgICAgICAgIFxcXCJzb3VyY2VfbnVtYmVyX3R5cGVcXFwiOiBcXFwiSU5URVJOQVRJT05BTFxcXCIgICAgICAgIH0gICAgXX1cIlxuYm9keSA9IGpzb24ubG9hZHMoYm9keV92YWx1ZSlcblxucmVzdWx0ID0gbWVzc2FnZXNfY29udHJvbGxlci5jcmVhdGVfc2VuZF9tZXNzYWdlcyhjb250ZW50X3R5cGUsIGFjY2VwdCwgYm9keSlcblxuYGBgXG5cbiMjIyMgRXJyb3JzXG5cbnwgRXJyb3IgQ29kZSB8IEVycm9yIERlc2NyaXB0aW9uIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgNDAwIHwgVW5leHBlY3RlZCBlcnJvciBpbiBBUEkgY2FsbC4gU2VlIEhUVFAgcmVzcG9uc2UgYm9keSBmb3IgZGV0YWlscy4gfFxuXG5cblxuXG4jIyMgPGEgbmFtZT1cImdldF9tZXNzYWdlX3N0YXR1c1wiPjwvYT4hW01ldGhvZDogXShodHRwczovL2FwaWRvY3MuaW8vaW1nL21ldGhvZC5wbmcgXCIuTWVzc2FnZXNDb250cm9sbGVyLmdldF9tZXNzYWdlX3N0YXR1c1wiKSBnZXRfbWVzc2FnZV9zdGF0dXNcblxuPiBSZXRyaWV2ZSB0aGUgY3VycmVudCBzdGF0dXMgb2YgYSBtZXNzYWdlIHVzaW5nIHRoZSBtZXNzYWdlIElEIHJldHVybmVkIGluIHRoZSBzZW5kIG1lc3NhZ2VzIGVuZCBwb2ludC5cbj4gQSBzdWNjZXNzZnVsIHJlcXVlc3QgdG8gdGhlIGdldCBtZXNzYWdlIHN0YXR1cyBlbmRwb2ludCB3aWxsIHJldHVybiBhIHJlc3BvbnNlIGJvZHkgYXMgZm9sbG93czpcbj4gYGBganNvblxuPiB7XG4+ICAgICBcImZvcm1hdFwiOiBcIlNNU1wiLFxuPiAgICAgXCJjb250ZW50XCI6IFwiTXkgZmlyc3QgbWVzc2FnZSFcIixcbj4gICAgIFwibWV0YWRhdGFcIjoge1xuPiAgICAgICAgIFwia2V5MVwiOiBcInZhbHVlMVwiLFxuPiAgICAgICAgIFwia2V5MlwiOiBcInZhbHVlMlwiXG4+ICAgICB9LFxuPiAgICAgXCJtZXNzYWdlX2lkXCI6IFwiODc3YzE5ZWYtZmEyZS00Y2VjLTgyN2EtZTFkZjliNTUwOWY3XCIsXG4+ICAgICBcImNhbGxiYWNrX3VybFwiOiBcImh0dHBzOi8vbXkuY2FsbGJhY2sudXJsLmNvbVwiLFxuPiAgICAgXCJkZWxpdmVyeV9yZXBvcnRcIjogdHJ1ZSxcbj4gICAgIFwiZGVzdGluYXRpb25fbnVtYmVyXCI6IFwiKzYxNDAxNzYwNTc1XCIsXG4+ICAgICBcInNjaGVkdWxlZFwiOiBcIjIwMTYtMTEtMDNUMTE6NDk6MDIuODA3WlwiLFxuPiAgICAgXCJzb3VyY2VfbnVtYmVyXCI6IFwiKzYxNDkxNTcwMTU3XCIsXG4+ICAgICBcInNvdXJjZV9udW1iZXJfdHlwZVwiOiBcIklOVEVSTkFUSU9OQUxcIixcbj4gICAgIFwibWVzc2FnZV9leHBpcnlfdGltZXN0YW1wXCI6IFwiMjAxNi0xMS0wM1QxMTo0OTowMi44MDdaXCIsXG4+ICAgICBcInN0YXR1c1wiOiBcImVucm91dGVcIlxuPiB9XG4+IGBgYFxuPiBUaGUgc3RhdHVzIHByb3BlcnR5IG9mIHRoZSByZXNwb25zZSBpbmRpY2F0ZXMgdGhlIGN1cnJlbnQgc3RhdHVzIG9mIHRoZSBtZXNzYWdlLiBTZWUgdGhlIERlbGl2ZXJ5XG4+IFJlcG9ydHMgc2VjdGlvbiBvZiB0aGlzIGRvY3VtZW50YXRpb24gZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gbWVzc2FnZSBzdGF0dWVzLlxuPiAqTm90ZTogSWYgYW4gaW52YWxpZCBvciBub24gZXhpc3RlbnQgbWVzc2FnZSBJRCBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0LCB0aGVuXG4+IGEgSFRUUCA0MDQgTm90IEZvdW5kIHJlc3BvbnNlIHdpbGwgYmUgcmV0dXJuZWQqXG5cbmBgYHB5dGhvblxuZGVmIGdldF9tZXNzYWdlX3N0YXR1cyhzZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdClcbmBgYFxuXG4jIyMjIFBhcmFtZXRlcnNcblxufCBQYXJhbWV0ZXIgfCBUYWdzIHwgRGVzY3JpcHRpb24gfFxufC0tLS0tLS0tLS0tfC0tLS0tLXwtLS0tLS0tLS0tLS0tfFxufCBtZXNzYWdlSWQgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxufCBjb250ZW50VHlwZSB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG58IGFjY2VwdCB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG5cblxuXG4jIyMjIEV4YW1wbGUgVXNhZ2VcblxuYGBgcHl0aG9uXG5tZXNzYWdlX2lkID0gJ21lc3NhZ2VJZCdcbmNvbnRlbnRfdHlwZSA9ICdDb250ZW50LVR5cGUnXG5hY2NlcHQgPSAnQWNjZXB0J1xuXG5yZXN1bHQgPSBtZXNzYWdlc19jb250cm9sbGVyLmdldF9tZXNzYWdlX3N0YXR1cyhtZXNzYWdlX2lkLCBjb250ZW50X3R5cGUsIGFjY2VwdClcblxuYGBgXG5cbiMjIyMgRXJyb3JzXG5cbnwgRXJyb3IgQ29kZSB8IEVycm9yIERlc2NyaXB0aW9uIHxcbnwtLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLXxcbnwgNDA0IHwgVE9ETzogQWRkIGFuIGVycm9yIGRlc2NyaXB0aW9uIHxcblxuXG5cblxuIyMjIDxhIG5hbWU9XCJ1cGRhdGVfY2FuY2VsX3NjaGVkdWxlZF9tZXNzYWdlXCI+PC9hPiFbTWV0aG9kOiBdKGh0dHBzOi8vYXBpZG9jcy5pby9pbWcvbWV0aG9kLnBuZyBcIi5NZXNzYWdlc0NvbnRyb2xsZXIudXBkYXRlX2NhbmNlbF9zY2hlZHVsZWRfbWVzc2FnZVwiKSB1cGRhdGVfY2FuY2VsX3NjaGVkdWxlZF9tZXNzYWdlXG5cbj4gQ2FuY2VsIGEgc2NoZWR1bGVkIG1lc3NhZ2UgdGhhdCBoYXMgbm90IHlldCBiZWVuIGRlbGl2ZXJlZC5cbj4gQSBzY2hlZHVsZWQgbWVzc2FnZSBjYW4gYmUgY2FuY2VsbGVkIGJ5IHVwZGF0aW5nIHRoZSBzdGF0dXMgb2YgYSBtZXNzYWdlIGZyb20gYGBgc2NoZWR1bGVkYGBgXG4+IHRvIGBgYGNhbmNlbGxlZGBgYC4gVGhpcyBpcyBkb25lIGJ5IHN1Ym1pdHRpbmcgYSBQVVQgcmVxdWVzdCB0byB0aGUgbWVzc2FnZXMgZW5kcG9pbnQgdXNpbmdcbj4gdGhlIG1lc3NhZ2UgSUQgYXMgYSBwYXJhbWV0ZXIgKHRoZSBzYW1lIGVuZHBvaW50IHVzZWQgYWJvdmUgdG8gcmV0cmlldmUgdGhlIHN0YXR1cyBvZiBhIG1lc3NhZ2UpLlxuPiBUaGUgYm9keSBvZiB0aGUgcmVxdWVzdCBzaW1wbHkgbmVlZHMgdG8gY29udGFpbiBhIGBgYHN0YXR1c2BgYCBwcm9wZXJ0eSB3aXRoIHRoZSB2YWx1ZSBzZXRcbj4gdG8gYGBgY2FuY2VsbGVkYGBgLlxuPiBgYGBqc29uXG4+IHtcbj4gICAgIFwic3RhdHVzXCI6IFwiY2FuY2VsbGVkXCJcbj4gfVxuPiBgYGBcbj4gKk5vdGU6IE9ubHkgbWVzc2FnZXMgd2l0aCBhIHN0YXR1cyBvZiBzY2hlZHVsZWQgY2FuIGJlIGNhbmNlbGxlZC4gSWYgYW4gaW52YWxpZCBvciBub24gZXhpc3RlbnRcbj4gbWVzc2FnZSBJRCBwYXJhbWV0ZXIgaXMgc3BlY2lmaWVkIGluIHRoZSByZXF1ZXN0LCB0aGVuIGEgSFRUUCA0MDQgTm90IEZvdW5kIHJlc3BvbnNlIHdpbGwgYmUgXG4+IHJldHVybmVkKlxuXG5gYGBweXRob25cbmRlZiB1cGRhdGVfY2FuY2VsX3NjaGVkdWxlZF9tZXNzYWdlKHNlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZV9pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjZXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkpXG5gYGBcblxuIyMjIyBQYXJhbWV0ZXJzXG5cbnwgUGFyYW1ldGVyIHwgVGFncyB8IERlc2NyaXB0aW9uIHxcbnwtLS0tLS0tLS0tLXwtLS0tLS18LS0tLS0tLS0tLS0tLXxcbnwgbWVzc2FnZUlkIHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcbnwgY29udGVudFR5cGUgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxufCBhY2NlcHQgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxufCBib2R5IHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcblxuXG5cbiMjIyMgRXhhbXBsZSBVc2FnZVxuXG5gYGBweXRob25cbm1lc3NhZ2VfaWQgPSAnbWVzc2FnZUlkJ1xuY29udGVudF90eXBlID0gJ0NvbnRlbnQtVHlwZSdcbmFjY2VwdCA9ICdBY2NlcHQnXG5ib2R5ID0gQ2FuY2VsU2NoZWR1bGVkTWVzc2FnZVJlcXVlc3QoKVxuXG5yZXN1bHQgPSBtZXNzYWdlc19jb250cm9sbGVyLnVwZGF0ZV9jYW5jZWxfc2NoZWR1bGVkX21lc3NhZ2UobWVzc2FnZV9pZCwgY29udGVudF90eXBlLCBhY2NlcHQsIGJvZHkpXG5cbmBgYFxuXG4jIyMjIEVycm9yc1xuXG58IEVycm9yIENvZGUgfCBFcnJvciBEZXNjcmlwdGlvbiB8XG58LS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18XG58IDQwMCB8IFRPRE86IEFkZCBhbiBlcnJvciBkZXNjcmlwdGlvbiB8XG58IDQwNCB8IFRPRE86IEFkZCBhbiBlcnJvciBkZXNjcmlwdGlvbiB8XG5cblxuXG5cbltCYWNrIHRvIExpc3Qgb2YgQ29udHJvbGxlcnNdKCNsaXN0X29mX2NvbnRyb2xsZXJzKVxuXG4jIyA8YSBuYW1lPVwicmVwbGllc19jb250cm9sbGVyXCI+PC9hPiFbQ2xhc3M6IF0oaHR0cHM6Ly9hcGlkb2NzLmlvL2ltZy9jbGFzcy5wbmcgXCIuUmVwbGllc0NvbnRyb2xsZXJcIikgUmVwbGllc0NvbnRyb2xsZXJcblxuIyMjIEdldCBjb250cm9sbGVyIGluc3RhbmNlXG5cbkFuIGluc3RhbmNlIG9mIHRoZSBgYGAgUmVwbGllc0NvbnRyb2xsZXIgYGBgIGNsYXNzIGNhbiBiZSBhY2Nlc3NlZCBmcm9tIHRoZSBBUEkgQ2xpZW50LlxuXG5gYGBweXRob25cbiByZXBsaWVzX2NvbnRyb2xsZXIgPSBjbGllbnQucmVwbGllc1xuYGBgXG5cbiMjIyA8YSBuYW1lPVwiZ2V0X2NoZWNrX3JlcGxpZXNcIj48L2E+IVtNZXRob2Q6IF0oaHR0cHM6Ly9hcGlkb2NzLmlvL2ltZy9tZXRob2QucG5nIFwiLlJlcGxpZXNDb250cm9sbGVyLmdldF9jaGVja19yZXBsaWVzXCIpIGdldF9jaGVja19yZXBsaWVzXG5cbj4gQ2hlY2sgZm9yIGFueSByZXBsaWVzIHRoYXQgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuPiBSZXBsaWVzIGFyZSBtZXNzYWdlcyB0aGF0IGhhdmUgYmVlbiBzZW50IGZyb20gYSBoYW5kc2V0IGluIHJlc3BvbnNlIHRvIGEgbWVzc2FnZSBzZW50IGJ5IGFuXG4+IGFwcGxpY2F0aW9uIG9yIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIHNlbnQgZnJvbSBhIGhhbmRzZXQgdG8gYSBpbmJvdW5kIG51bWJlciBhc3NvY2lhdGVkIHdpdGhcbj4gYW4gYWNjb3VudCwga25vd24gYXMgYSBkZWRpY2F0ZWQgaW5ib3VuZCBudW1iZXIgKGNvbnRhY3QgPHN1cHBvcnRAbWVzc2FnZW1lZGlhLmNvbT4gZm9yIG1vcmVcbj4gaW5mb3JtYXRpb24gb24gZGVkaWNhdGVkIGluYm91bmQgbnVtYmVycykuXG4+IEVhY2ggcmVxdWVzdCB0byB0aGUgY2hlY2sgcmVwbGllcyBlbmRwb2ludCB3aWxsIHJldHVybiBhbnkgcmVwbGllcyByZWNlaXZlZCB0aGF0IGhhdmUgbm90IHlldFxuPiBiZWVuIGNvbmZpcm1lZCB1c2luZyB0aGUgY29uZmlybSByZXBsaWVzIGVuZHBvaW50LiBBIHJlc3BvbnNlIGZyb20gdGhlIGNoZWNrIHJlcGxpZXMgZW5kcG9pbnRcbj4gd2lsbCBoYXZlIHRoZSBmb2xsb3dpbmcgc3RydWN0dXJlOlxuPiBgYGBqc29uXG4+IHtcbj4gICAgIFwicmVwbGllc1wiOiBbXG4+ICAgICAgICAge1xuPiAgICAgICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwia2V5MVwiOiBcInZhbHVlMVwiLFxuPiAgICAgICAgICAgICAgICAgXCJrZXkyXCI6IFwidmFsdWUyXCJcbj4gICAgICAgICAgICAgfSxcbj4gICAgICAgICAgICAgXCJtZXNzYWdlX2lkXCI6IFwiODc3YzE5ZWYtZmEyZS00Y2VjLTgyN2EtZTFkZjliNTUwOWY3XCIsXG4+ICAgICAgICAgICAgIFwicmVwbHlfaWRcIjogXCJhMTc1ZTc5Ny0yYjU0LTQ2OGItOTg1MC00MWEzZWFiMzJmNzRcIixcbj4gICAgICAgICAgICAgXCJkYXRlX3JlY2VpdmVkXCI6IFwiMjAxNi0xMi0wN1QwODo0MzowMC44NTBaXCIsXG4+ICAgICAgICAgICAgIFwiY2FsbGJhY2tfdXJsXCI6IFwiaHR0cHM6Ly9teS5jYWxsYmFjay51cmwuY29tXCIsXG4+ICAgICAgICAgICAgIFwiZGVzdGluYXRpb25fbnVtYmVyXCI6IFwiKzYxNDkxNTcwMTU2XCIsXG4+ICAgICAgICAgICAgIFwic291cmNlX251bWJlclwiOiBcIis2MTQ5MTU3MDE1N1wiLFxuPiAgICAgICAgICAgICBcInZlbmRvcl9hY2NvdW50X2lkXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwidmVuZG9yX2lkXCI6IFwiTWVzc2FnZU1lZGlhXCIsXG4+ICAgICAgICAgICAgICAgICBcImFjY291bnRfaWRcIjogXCJNeUFjY291bnRcIlxuPiAgICAgICAgICAgICB9LFxuPiAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCJNeSBmaXJzdCByZXBseSFcIlxuPiAgICAgICAgIH0sXG4+ICAgICAgICAge1xuPiAgICAgICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwia2V5MVwiOiBcInZhbHVlMVwiLFxuPiAgICAgICAgICAgICAgICAgXCJrZXkyXCI6IFwidmFsdWUyXCJcbj4gICAgICAgICAgICAgfSxcbj4gICAgICAgICAgICAgXCJtZXNzYWdlX2lkXCI6IFwiOGYyZjU5MjctMmUxNi00ZjFjLWJkNDMtNDdkYmUyYTc3YWU0XCIsXG4+ICAgICAgICAgICAgIFwicmVwbHlfaWRcIjogXCIzZDhkNTNkOC0wMWQzLTQ1ZGQtOGNmYS00ZGZjODE2MDBmN2ZcIixcbj4gICAgICAgICAgICAgXCJkYXRlX3JlY2VpdmVkXCI6IFwiMjAxNi0xMi0wN1QwODo0MzowMC44NTBaXCIsXG4+ICAgICAgICAgICAgIFwiY2FsbGJhY2tfdXJsXCI6IFwiaHR0cHM6Ly9teS5jYWxsYmFjay51cmwuY29tXCIsXG4+ICAgICAgICAgICAgIFwiZGVzdGluYXRpb25fbnVtYmVyXCI6IFwiKzYxNDkxNTcwMTU3XCIsXG4+ICAgICAgICAgICAgIFwic291cmNlX251bWJlclwiOiBcIis2MTQ5MTU3MDE1OFwiLFxuPiAgICAgICAgICAgICBcInZlbmRvcl9hY2NvdW50X2lkXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwidmVuZG9yX2lkXCI6IFwiTWVzc2FnZU1lZGlhXCIsXG4+ICAgICAgICAgICAgICAgICBcImFjY291bnRfaWRcIjogXCJNeUFjY291bnRcIlxuPiAgICAgICAgICAgICB9LFxuPiAgICAgICAgICAgICBcImNvbnRlbnRcIjogXCJNeSBzZWNvbmQgcmVwbHkhXCJcbj4gICAgICAgICB9XG4+ICAgICBdXG4+IH1cbj4gYGBgXG4+IEVhY2ggcmVwbHkgd2lsbCBjb250YWluIGRldGFpbHMgYWJvdXQgdGhlIHJlcGx5IG1lc3NhZ2UsIGFzIHdlbGwgYXMgZGV0YWlscyBvZiB0aGUgbWVzc2FnZSB0aGUgcmVwbHkgd2FzIHNlbnRcbj4gaW4gcmVzcG9uc2UgdG8sIGluY2x1ZGluZyBhbnkgbWV0YWRhdGEgc3BlY2lmaWVkLiBFdmVyeSByZXBseSB3aWxsIGhhdmUgYSByZXBseSBJRCB0byBiZSB1c2VkIHdpdGggdGhlXG4+IGNvbmZpcm0gcmVwbGllcyBlbmRwb2ludC5cbj4gKk5vdGU6IFRoZSBzb3VyY2UgbnVtYmVyIGFuZCBkZXN0aW5hdGlvbiBudW1iZXIgcHJvcGVydGllcyBpbiBhIHJlcGx5IGFyZSB0aGUgaW52ZXJzZSBvZiB0aG9zZVxuPiBzcGVjaWZpZWQgaW4gdGhlIG1lc3NhZ2UgdGhlIHJlcGx5IGlzIGluIHJlc3BvbnNlIHRvLiBUaGUgc291cmNlIG51bWJlciBvZiB0aGUgcmVwbHkgbWVzc2FnZSBpcyB0aGVcbj4gc2FtZSBhcyB0aGUgZGVzdGluYXRpb24gbnVtYmVyIG9mIHRoZSBvcmlnaW5hbCBtZXNzYWdlLCBhbmQgdGhlIGRlc3RpbmF0aW9uIG51bWJlciBvZiB0aGUgcmVwbHlcbj4gbWVzc2FnZSBpcyB0aGUgc2FtZSBhcyB0aGUgc291cmNlIG51bWJlciBvZiB0aGUgb3JpZ2luYWwgbWVzc2FnZS4gSWYgYSBzb3VyY2UgbnVtYmVyXG4+IHdhc24ndCBzcGVjaWZpZWQgaW4gdGhlIG9yaWdpbmFsIG1lc3NhZ2UsIHRoZW4gdGhlIGRlc3RpbmF0aW9uIG51bWJlciBwcm9wZXJ0eSB3aWxsIG5vdCBiZSBwcmVzZW50XG4+IGluIHRoZSByZXBseSBtZXNzYWdlLipcbj4gU3Vic2VxdWVudCByZXF1ZXN0cyB0byB0aGUgY2hlY2sgcmVwbGllcyBlbmRwb2ludCB3aWxsIHJldHVybiB0aGUgc2FtZSByZXBseSBtZXNzYWdlcyBhbmQgYSBtYXhpbXVtXG4+IG9mIDEwMCByZXBsaWVzIHdpbGwgYmUgcmV0dXJuZWQgaW4gZWFjaCByZXF1ZXN0LiBBcHBsaWNhdGlvbnMgc2hvdWxkIHVzZSB0aGUgY29uZmlybSByZXBsaWVzIGVuZHBvaW50XG4+IGluIHRoZSBmb2xsb3dpbmcgcGF0dGVybiBzbyB0aGF0IHJlcGxpZXMgdGhhdCBoYXZlIGJlZW4gcHJvY2Vzc2VkIGFyZSBubyBsb25nZXIgcmV0dXJuZWQgaW5cbj4gc3Vic2VxdWVudCBjaGVjayByZXBsaWVzIHJlcXVlc3RzLlxuPiAxLiBDYWxsIGNoZWNrIHJlcGxpZXMgZW5kcG9pbnRcbj4gMi4gUHJvY2VzcyBlYWNoIHJlcGx5IG1lc3NhZ2Vcbj4gMy4gQ29uZmlybSBhbGwgcHJvY2Vzc2VkIHJlcGx5IG1lc3NhZ2VzIHVzaW5nIHRoZSBjb25maXJtIHJlcGxpZXMgZW5kcG9pbnRcbj4gKk5vdGU6IEl0IGlzIHJlY29tbWVuZGVkIHRvIHVzZSB0aGUgV2ViaG9va3MgZmVhdHVyZSB0byByZWNlaXZlIHJlcGx5IG1lc3NhZ2VzIHJhdGhlciB0aGFuIHBvbGxpbmdcbj4gdGhlIGNoZWNrIHJlcGxpZXMgZW5kcG9pbnQuKlxuXG5gYGBweXRob25cbmRlZiBnZXRfY2hlY2tfcmVwbGllcyhzZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50X3R5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdClcbmBgYFxuXG4jIyMjIFBhcmFtZXRlcnNcblxufCBQYXJhbWV0ZXIgfCBUYWdzIHwgRGVzY3JpcHRpb24gfFxufC0tLS0tLS0tLS0tfC0tLS0tLXwtLS0tLS0tLS0tLS0tfFxufCBjb250ZW50VHlwZSB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG58IGFjY2VwdCB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG5cblxuXG4jIyMjIEV4YW1wbGUgVXNhZ2VcblxuYGBgcHl0aG9uXG5jb250ZW50X3R5cGUgPSAnYXBwbGljYXRpb24vanNvbidcbmFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuXG5yZXN1bHQgPSByZXBsaWVzX2NvbnRyb2xsZXIuZ2V0X2NoZWNrX3JlcGxpZXMoY29udGVudF90eXBlLCBhY2NlcHQpXG5cbmBgYFxuXG5cbiMjIyA8YSBuYW1lPVwiY3JlYXRlX2NvbmZpcm1fcmVwbGllc19hc19yZWNlaXZlZFwiPjwvYT4hW01ldGhvZDogXShodHRwczovL2FwaWRvY3MuaW8vaW1nL21ldGhvZC5wbmcgXCIuUmVwbGllc0NvbnRyb2xsZXIuY3JlYXRlX2NvbmZpcm1fcmVwbGllc19hc19yZWNlaXZlZFwiKSBjcmVhdGVfY29uZmlybV9yZXBsaWVzX2FzX3JlY2VpdmVkXG5cbj4gTWFyayBhIHJlcGx5IG1lc3NhZ2UgYXMgY29uZmlybWVkIHNvIGl0IGlzIG5vIGxvbmdlciByZXR1cm5lZCBpbiBjaGVjayByZXBsaWVzIHJlcXVlc3RzLlxuPiBUaGUgY29uZmlybSByZXBsaWVzIGVuZHBvaW50IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgY2hlY2sgcmVwbGllcyBlbmRwb2ludFxuPiB0byBhbGxvdyBmb3Igcm9idXN0IHByb2Nlc3Npbmcgb2YgcmVwbHkgbWVzc2FnZXMuIE9uY2Ugb25lIG9yIG1vcmUgcmVwbHkgbWVzc2FnZXMgaGF2ZSBiZWVuIHByb2Nlc3NlZFxuPiB0aGV5IGNhbiB0aGVuIGJlIGNvbmZpcm1lZCB1c2luZyB0aGUgY29uZmlybSByZXBsaWVzIGVuZHBvaW50IHNvIHRoZXkgYXJlIG5vIGxvbmdlciByZXR1cm5lZCBpblxuPiBzdWJzZXF1ZW50IGNoZWNrIHJlcGxpZXMgcmVxdWVzdHMuXG4+IFRoZSBjb25maXJtIHJlcGxpZXMgZW5kcG9pbnQgdGFrZXMgYSBsaXN0IG9mIHJlcGx5IElEcyBhcyBmb2xsb3dzOlxuPiBgYGBqc29uXG4+IHtcbj4gICAgIFwicmVwbHlfaWRzXCI6IFtcbj4gICAgICAgICBcIjAxMWRjZWFkLTY5ODgtNGFkNi1hMWM3LTZiNmM2OGVhNjI4ZFwiLFxuPiAgICAgICAgIFwiMzQ4N2IzZmEtNjU4Ni00OTc5LWEyMzMtMmQxYjA5NWM3NzE4XCIsXG4+ICAgICAgICAgXCJiYTI4ZTk0Yi1jODNkLTQ3NTktOThlNy1mZjljN2VkYjg3YTFcIlxuPiAgICAgXVxuPiB9XG4+IGBgYFxuPiBVcCB0byAxMDAgcmVwbGllcyBjYW4gYmUgY29uZmlybWVkIGluIGEgc2luZ2xlIGNvbmZpcm0gcmVwbGllcyByZXF1ZXN0LlxuXG5gYGBweXRob25cbmRlZiBjcmVhdGVfY29uZmlybV9yZXBsaWVzX2FzX3JlY2VpdmVkKHNlbGYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5KVxuYGBgXG5cbiMjIyMgUGFyYW1ldGVyc1xuXG58IFBhcmFtZXRlciB8IFRhZ3MgfCBEZXNjcmlwdGlvbiB8XG58LS0tLS0tLS0tLS18LS0tLS0tfC0tLS0tLS0tLS0tLS18XG58IGNvbnRlbnRUeXBlIHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcbnwgYWNjZXB0IHwgIGBgYCBSZXF1aXJlZCBgYGAgIHwgVE9ETzogQWRkIGEgcGFyYW1ldGVyIGRlc2NyaXB0aW9uIHxcbnwgYm9keSB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG5cblxuXG4jIyMjIEV4YW1wbGUgVXNhZ2VcblxuYGBgcHl0aG9uXG5jb250ZW50X3R5cGUgPSAnYXBwbGljYXRpb24vanNvbidcbmFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJ1xuYm9keV92YWx1ZSA9IFwieyAgICBcXFwicmVwbHlfaWRzXFxcIjogWyAgICAgICAgXFxcIjAxMWRjZWFkLTY5ODgtNGFkNi1hMWM3LTZiNmM2OGVhNjI4ZFxcXCIsICAgICAgICBcXFwiMzQ4N2IzZmEtNjU4Ni00OTc5LWEyMzMtMmQxYjA5NWM3NzE4XFxcIiwgICAgICAgIFxcXCJiYTI4ZTk0Yi1jODNkLTQ3NTktOThlNy1mZjljN2VkYjg3YTFcXFwiICAgIF19XCJcbmJvZHkgPSBqc29uLmxvYWRzKGJvZHlfdmFsdWUpXG5cbnJlc3VsdCA9IHJlcGxpZXNfY29udHJvbGxlci5jcmVhdGVfY29uZmlybV9yZXBsaWVzX2FzX3JlY2VpdmVkKGNvbnRlbnRfdHlwZSwgYWNjZXB0LCBib2R5KVxuXG5gYGBcblxuIyMjIyBFcnJvcnNcblxufCBFcnJvciBDb2RlIHwgRXJyb3IgRGVzY3JpcHRpb24gfFxufC0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tfFxufCA0MDAgfCBUT0RPOiBBZGQgYW4gZXJyb3IgZGVzY3JpcHRpb24gfFxuXG5cblxuXG5bQmFjayB0byBMaXN0IG9mIENvbnRyb2xsZXJzXSgjbGlzdF9vZl9jb250cm9sbGVycylcblxuIyMgPGEgbmFtZT1cImRlbGl2ZXJ5X3JlcG9ydHNfY29udHJvbGxlclwiPjwvYT4hW0NsYXNzOiBdKGh0dHBzOi8vYXBpZG9jcy5pby9pbWcvY2xhc3MucG5nIFwiLkRlbGl2ZXJ5UmVwb3J0c0NvbnRyb2xsZXJcIikgRGVsaXZlcnlSZXBvcnRzQ29udHJvbGxlclxuXG4jIyMgR2V0IGNvbnRyb2xsZXIgaW5zdGFuY2VcblxuQW4gaW5zdGFuY2Ugb2YgdGhlIGBgYCBEZWxpdmVyeVJlcG9ydHNDb250cm9sbGVyIGBgYCBjbGFzcyBjYW4gYmUgYWNjZXNzZWQgZnJvbSB0aGUgQVBJIENsaWVudC5cblxuYGBgcHl0aG9uXG4gZGVsaXZlcnlfcmVwb3J0c19jb250cm9sbGVyID0gY2xpZW50LmRlbGl2ZXJ5X3JlcG9ydHNcbmBgYFxuXG4jIyMgPGEgbmFtZT1cImdldF9jaGVja19kZWxpdmVyeV9yZXBvcnRzXCI+PC9hPiFbTWV0aG9kOiBdKGh0dHBzOi8vYXBpZG9jcy5pby9pbWcvbWV0aG9kLnBuZyBcIi5EZWxpdmVyeVJlcG9ydHNDb250cm9sbGVyLmdldF9jaGVja19kZWxpdmVyeV9yZXBvcnRzXCIpIGdldF9jaGVja19kZWxpdmVyeV9yZXBvcnRzXG5cbj4gQ2hlY2sgZm9yIGFueSBkZWxpdmVyeSByZXBvcnRzIHRoYXQgaGF2ZSBiZWVuIHJlY2VpdmVkLlxuPiBEZWxpdmVyeSByZXBvcnRzIGFyZSBhIG5vdGlmaWNhdGlvbiBvZiB0aGUgY2hhbmdlIGluIHN0YXR1cyBvZiBhIG1lc3NhZ2UgYXMgaXQgaXMgYmVpbmcgcHJvY2Vzc2VkLlxuPiBFYWNoIHJlcXVlc3QgdG8gdGhlIGNoZWNrIGRlbGl2ZXJ5IHJlcG9ydHMgZW5kcG9pbnQgd2lsbCByZXR1cm4gYW55IGRlbGl2ZXJ5IHJlcG9ydHMgcmVjZWl2ZWQgdGhhdFxuPiBoYXZlIG5vdCB5ZXQgYmVlbiBjb25maXJtZWQgdXNpbmcgdGhlIGNvbmZpcm0gZGVsaXZlcnkgcmVwb3J0cyBlbmRwb2ludC4gQSByZXNwb25zZSBmcm9tIHRoZSBjaGVja1xuPiBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50IHdpbGwgaGF2ZSB0aGUgZm9sbG93aW5nIHN0cnVjdHVyZTpcbj4gYGBganNvblxuPiB7XG4+ICAgICBcImRlbGl2ZXJ5X3JlcG9ydHNcIjogW1xuPiAgICAgICAgIHtcbj4gICAgICAgICAgICAgXCJjYWxsYmFja191cmxcIjogXCJodHRwczovL215LmNhbGxiYWNrLnVybC5jb21cIixcbj4gICAgICAgICAgICAgXCJkZWxpdmVyeV9yZXBvcnRfaWRcIjogXCIwMWUxZmEwYS02ZTI3LTQ5NDUtOWNkYi0xODY0NGI0ZGUwNDNcIixcbj4gICAgICAgICAgICAgXCJzb3VyY2VfbnVtYmVyXCI6IFwiKzYxNDkxNTcwMTU3XCIsXG4+ICAgICAgICAgICAgIFwiZGF0ZV9yZWNlaXZlZFwiOiBcIjIwMTctMDUtMjBUMDY6MzA6MzcuNjQyWlwiLFxuPiAgICAgICAgICAgICBcInN0YXR1c1wiOiBcImVucm91dGVcIixcbj4gICAgICAgICAgICAgXCJkZWxheVwiOiAwLFxuPiAgICAgICAgICAgICBcInN1Ym1pdHRlZF9kYXRlXCI6IFwiMjAxNy0wNS0yMFQwNjozMDozNy42MzlaXCIsXG4+ICAgICAgICAgICAgIFwib3JpZ2luYWxfdGV4dFwiOiBcIk15IGZpcnN0IG1lc3NhZ2UhXCIsXG4+ICAgICAgICAgICAgIFwibWVzc2FnZV9pZFwiOiBcImQ3ODFkY2FiLWQ5ZDgtNGZiMi05ZTAzLTg3MmYwN2FlOTRiYVwiLFxuPiAgICAgICAgICAgICBcInZlbmRvcl9hY2NvdW50X2lkXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwidmVuZG9yX2lkXCI6IFwiTWVzc2FnZU1lZGlhXCIsXG4+ICAgICAgICAgICAgICAgICBcImFjY291bnRfaWRcIjogXCJNeUFjY291bnRcIlxuPiAgICAgICAgICAgICB9LFxuPiAgICAgICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwia2V5MVwiOiBcInZhbHVlMVwiLFxuPiAgICAgICAgICAgICAgICAgXCJrZXkyXCI6IFwidmFsdWUyXCJcbj4gICAgICAgICAgICAgfVxuPiAgICAgICAgIH0sXG4+ICAgICAgICAge1xuPiAgICAgICAgICAgICBcImNhbGxiYWNrX3VybFwiOiBcImh0dHBzOi8vbXkuY2FsbGJhY2sudXJsLmNvbVwiLFxuPiAgICAgICAgICAgICBcImRlbGl2ZXJ5X3JlcG9ydF9pZFwiOiBcIjBlZGY5MDIyLTdjY2MtNDNlNi1hY2FiLTQ4MGU5M2U5OGMxYlwiLFxuPiAgICAgICAgICAgICBcInNvdXJjZV9udW1iZXJcIjogXCIrNjE0OTE1NzAxNThcIixcbj4gICAgICAgICAgICAgXCJkYXRlX3JlY2VpdmVkXCI6IFwiMjAxNy0wNS0yMVQwMTo0Njo0Mi41NzlaXCIsXG4+ICAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiZW5yb3V0ZVwiLFxuPiAgICAgICAgICAgICBcImRlbGF5XCI6IDAsXG4+ICAgICAgICAgICAgIFwic3VibWl0dGVkX2RhdGVcIjogXCIyMDE3LTA1LTIxVDAxOjQ2OjQyLjU3NFpcIixcbj4gICAgICAgICAgICAgXCJvcmlnaW5hbF90ZXh0XCI6IFwiTXkgc2Vjb25kIG1lc3NhZ2UhXCIsXG4+ICAgICAgICAgICAgIFwibWVzc2FnZV9pZFwiOiBcImZiYjNiM2Y1LWI3MDItNGQ4Yi1hYjQ0LTY1YjJlZTM5YTI4MVwiLFxuPiAgICAgICAgICAgICBcInZlbmRvcl9hY2NvdW50X2lkXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwidmVuZG9yX2lkXCI6IFwiTWVzc2FnZU1lZGlhXCIsXG4+ICAgICAgICAgICAgICAgICBcImFjY291bnRfaWRcIjogXCJNeUFjY291bnRcIlxuPiAgICAgICAgICAgICB9LFxuPiAgICAgICAgICAgICBcIm1ldGFkYXRhXCI6IHtcbj4gICAgICAgICAgICAgICAgIFwia2V5MVwiOiBcInZhbHVlMVwiLFxuPiAgICAgICAgICAgICAgICAgXCJrZXkyXCI6IFwidmFsdWUyXCJcbj4gICAgICAgICAgICAgfVxuPiAgICAgICAgIH1cbj4gICAgIF1cbj4gfVxuPiBgYGBcbj4gRWFjaCBkZWxpdmVyeSByZXBvcnQgd2lsbCBjb250YWluIGRldGFpbHMgYWJvdXQgdGhlIG1lc3NhZ2UsIGluY2x1ZGluZyBhbnkgbWV0YWRhdGEgc3BlY2lmaWVkXG4+IGFuZCB0aGUgbmV3IHN0YXR1cyBvZiB0aGUgbWVzc2FnZSAoYXMgZWFjaCBkZWxpdmVyeSByZXBvcnQgaW5kaWNhdGVzIGEgY2hhbmdlIGluIHN0YXR1cyBvZiBhXG4+IG1lc3NhZ2UpIGFuZCB0aGUgdGltZXN0YW1wIGF0IHdoaWNoIHRoZSBzdGF0dXMgY2hhbmdlZC4gRXZlcnkgZGVsaXZlcnkgcmVwb3J0IHdpbGwgaGF2ZSBhIFxuPiB1bmlxdWUgZGVsaXZlcnkgcmVwb3J0IElEIGZvciB1c2Ugd2l0aCB0aGUgY29uZmlybSBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50LlxuPiAqTm90ZTogVGhlIHNvdXJjZSBudW1iZXIgYW5kIGRlc3RpbmF0aW9uIG51bWJlciBwcm9wZXJ0aWVzIGluIGEgZGVsaXZlcnkgcmVwb3J0IGFyZSB0aGUgaW52ZXJzZSBvZlxuPiB0aG9zZSBzcGVjaWZpZWQgaW4gdGhlIG1lc3NhZ2UgdGhhdCB0aGUgZGVsaXZlcnkgcmVwb3J0IHJlbGF0ZXMgdG8uIFRoZSBzb3VyY2UgbnVtYmVyIG9mIHRoZVxuPiBkZWxpdmVyeSByZXBvcnQgaXMgdGhlIGRlc3RpbmF0aW9uIG51bWJlciBvZiB0aGUgb3JpZ2luYWwgbWVzc2FnZS4qXG4+IFN1YnNlcXVlbnQgcmVxdWVzdHMgdG8gdGhlIGNoZWNrIGRlbGl2ZXJ5IHJlcG9ydHMgZW5kcG9pbnQgd2lsbCByZXR1cm4gdGhlIHNhbWUgZGVsaXZlcnkgcmVwb3J0c1xuPiBhbmQgYSBtYXhpbXVtIG9mIDEwMCBkZWxpdmVyeSByZXBvcnRzIHdpbGwgYmUgcmV0dXJuZWQgaW4gZWFjaCByZXF1ZXN0LiBBcHBsaWNhdGlvbnMgc2hvdWxkIHVzZSB0aGVcbj4gY29uZmlybSBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50IGluIHRoZSBmb2xsb3dpbmcgcGF0dGVybiBzbyB0aGF0IGRlbGl2ZXJ5IHJlcG9ydHMgdGhhdCBoYXZlIGJlZW5cbj4gcHJvY2Vzc2VkIGFyZSBubyBsb25nZXIgcmV0dXJuZWQgaW4gc3Vic2VxdWVudCBjaGVjayBkZWxpdmVyeSByZXBvcnRzIHJlcXVlc3RzLlxuPiAxLiBDYWxsIGNoZWNrIGRlbGl2ZXJ5IHJlcG9ydHMgZW5kcG9pbnRcbj4gMi4gUHJvY2VzcyBlYWNoIGRlbGl2ZXJ5IHJlcG9ydFxuPiAzLiBDb25maXJtIGFsbCBwcm9jZXNzZWQgZGVsaXZlcnkgcmVwb3J0cyB1c2luZyB0aGUgY29uZmlybSBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50XG4+ICpOb3RlOiBJdCBpcyByZWNvbW1lbmRlZCB0byB1c2UgdGhlIFdlYmhvb2tzIGZlYXR1cmUgdG8gcmVjZWl2ZSByZXBseSBtZXNzYWdlcyByYXRoZXIgdGhhblxuPiBwb2xsaW5nIHRoZSBjaGVjayBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50LipcblxuYGBgcHl0aG9uXG5kZWYgZ2V0X2NoZWNrX2RlbGl2ZXJ5X3JlcG9ydHMoc2VsZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudF90eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQpXG5gYGBcblxuIyMjIyBQYXJhbWV0ZXJzXG5cbnwgUGFyYW1ldGVyIHwgVGFncyB8IERlc2NyaXB0aW9uIHxcbnwtLS0tLS0tLS0tLXwtLS0tLS18LS0tLS0tLS0tLS0tLXxcbnwgY29udGVudFR5cGUgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxufCBhY2NlcHQgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxuXG5cblxuIyMjIyBFeGFtcGxlIFVzYWdlXG5cbmBgYHB5dGhvblxuY29udGVudF90eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nXG5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbidcblxucmVzdWx0ID0gZGVsaXZlcnlfcmVwb3J0c19jb250cm9sbGVyLmdldF9jaGVja19kZWxpdmVyeV9yZXBvcnRzKGNvbnRlbnRfdHlwZSwgYWNjZXB0KVxuXG5gYGBcblxuXG4jIyMgPGEgbmFtZT1cImNyZWF0ZV9jb25maXJtX2RlbGl2ZXJ5X3JlcG9ydHNfYXNfcmVjZWl2ZWRcIj48L2E+IVtNZXRob2Q6IF0oaHR0cHM6Ly9hcGlkb2NzLmlvL2ltZy9tZXRob2QucG5nIFwiLkRlbGl2ZXJ5UmVwb3J0c0NvbnRyb2xsZXIuY3JlYXRlX2NvbmZpcm1fZGVsaXZlcnlfcmVwb3J0c19hc19yZWNlaXZlZFwiKSBjcmVhdGVfY29uZmlybV9kZWxpdmVyeV9yZXBvcnRzX2FzX3JlY2VpdmVkXG5cbj4gTWFyayBhIGRlbGl2ZXJ5IHJlcG9ydCBhcyBjb25maXJtZWQgc28gaXQgaXMgbm8gbG9uZ2VyIHJldHVybiBpbiBjaGVjayBkZWxpdmVyeSByZXBvcnRzIHJlcXVlc3RzLlxuPiBUaGUgY29uZmlybSBkZWxpdmVyeSByZXBvcnRzIGVuZHBvaW50IGlzIGludGVuZGVkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCB0aGUgY2hlY2sgZGVsaXZlcnlcbj4gcmVwb3J0cyBlbmRwb2ludCB0byBhbGxvdyBmb3Igcm9idXN0IHByb2Nlc3Npbmcgb2YgZGVsaXZlcnkgcmVwb3J0cy4gT25jZSBvbmUgb3IgbW9yZSBkZWxpdmVyeVxuPiByZXBvcnRzIGhhdmUgYmVlbiBwcm9jZXNzZWQsIHRoZXkgY2FuIHRoZW4gYmUgY29uZmlybWVkIHVzaW5nIHRoZSBjb25maXJtIGRlbGl2ZXJ5IHJlcG9ydHMgZW5kcG9pbnQgc28gdGhleVxuPiBhcmUgbm8gbG9uZ2VyIHJldHVybmVkIGluIHN1YnNlcXVlbnQgY2hlY2sgZGVsaXZlcnkgcmVwb3J0cyByZXF1ZXN0cy5cbj4gVGhlIGNvbmZpcm0gZGVsaXZlcnkgcmVwb3J0cyBlbmRwb2ludCB0YWtlcyBhIGxpc3Qgb2YgZGVsaXZlcnkgcmVwb3J0IElEcyBhcyBmb2xsb3dzOlxuPiBgYGBqc29uXG4+IHtcbj4gICAgIFwiZGVsaXZlcnlfcmVwb3J0X2lkc1wiOiBbXG4+ICAgICAgICAgXCIwMTFkY2VhZC02OTg4LTRhZDYtYTFjNy02YjZjNjhlYTYyOGRcIixcbj4gICAgICAgICBcIjM0ODdiM2ZhLTY1ODYtNDk3OS1hMjMzLTJkMWIwOTVjNzcxOFwiLFxuPiAgICAgICAgIFwiYmEyOGU5NGItYzgzZC00NzU5LTk4ZTctZmY5YzdlZGI4N2ExXCJcbj4gICAgIF1cbj4gfVxuPiBgYGBcbj4gVXAgdG8gMTAwIGRlbGl2ZXJ5IHJlcG9ydHMgY2FuIGJlIGNvbmZpcm1lZCBpbiBhIHNpbmdsZSBjb25maXJtIGRlbGl2ZXJ5IHJlcG9ydHMgcmVxdWVzdC5cblxuYGBgcHl0aG9uXG5kZWYgY3JlYXRlX2NvbmZpcm1fZGVsaXZlcnlfcmVwb3J0c19hc19yZWNlaXZlZChzZWxmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRfdHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NlcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keSlcbmBgYFxuXG4jIyMjIFBhcmFtZXRlcnNcblxufCBQYXJhbWV0ZXIgfCBUYWdzIHwgRGVzY3JpcHRpb24gfFxufC0tLS0tLS0tLS0tfC0tLS0tLXwtLS0tLS0tLS0tLS0tfFxufCBjb250ZW50VHlwZSB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG58IGFjY2VwdCB8ICBgYGAgUmVxdWlyZWQgYGBgICB8IFRPRE86IEFkZCBhIHBhcmFtZXRlciBkZXNjcmlwdGlvbiB8XG58IGJvZHkgfCAgYGBgIFJlcXVpcmVkIGBgYCAgfCBUT0RPOiBBZGQgYSBwYXJhbWV0ZXIgZGVzY3JpcHRpb24gfFxuXG5cblxuIyMjIyBFeGFtcGxlIFVzYWdlXG5cbmBgYHB5dGhvblxuY29udGVudF90eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24nXG5hY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbidcbmJvZHlfdmFsdWUgPSBcInsgICAgXFxcImRlbGl2ZXJ5X3JlcG9ydF9pZHNcXFwiOiBbICAgICAgICBcXFwiMDExZGNlYWQtNjk4OC00YWQ2LWExYzctNmI2YzY4ZWE2MjhkXFxcIiwgICAgICAgIFxcXCIzNDg3YjNmYS02NTg2LTQ5NzktYTIzMy0yZDFiMDk1Yzc3MThcXFwiLCAgICAgICAgXFxcImJhMjhlOTRiLWM4M2QtNDc1OS05OGU3LWZmOWM3ZWRiODdhMVxcXCIgICAgXX1cIlxuYm9keSA9IGpzb24ubG9hZHMoYm9keV92YWx1ZSlcblxucmVzdWx0ID0gZGVsaXZlcnlfcmVwb3J0c19jb250cm9sbGVyLmNyZWF0ZV9jb25maXJtX2RlbGl2ZXJ5X3JlcG9ydHNfYXNfcmVjZWl2ZWQoY29udGVudF90eXBlLCBhY2NlcHQsIGJvZHkpXG5cbmBgYFxuXG4jIyMjIEVycm9yc1xuXG58IEVycm9yIENvZGUgfCBFcnJvciBEZXNjcmlwdGlvbiB8XG58LS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS18XG58IDQwMCB8IFRPRE86IEFkZCBhbiBlcnJvciBkZXNjcmlwdGlvbiB8XG5cblxuXG5cbltCYWNrIHRvIExpc3Qgb2YgQ29udHJvbGxlcnNdKCNsaXN0X29mX2NvbnRyb2xsZXJzKVxuXG5cblxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAiIiw=
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9hcGltYXRpYy5pbyIs
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImFwaW1hdGljZGVtb25zdHJhdGlvbjEyMzQiLA==
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC8iLA==
ICAgICJwbGF0Zm9ybSI6ICIiLA==
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC8iLA==
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vYXBpbWF0aWMuaW8i
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvYXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC8xLjAvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIlRPRE86IEFkZCBhIGRlc2NyaXB0aW9uIiw=
ICAgICJ2ZXJzaW9uIjogIjEuMCIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiA0MzgwODIyLA==
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjAiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwOGYxNzY3MDA1YTdmNjIyODQ1MzFhZjFiMTRmMTE0MGU3OWQ0NWZlZGMxZjgzYzY1ZjliNDgyZDZlN2JkNTJlIiw=
ICAgICAgICAgICJtZDUiOiAiZjAxZmM4Zjk3ZWVkNWZiOTQ1YThiNzk3YTdmMTM4OTQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMTZiNmY5ZmE3ZmY4M2RlZTAyNGFkYWYwNDhiODJjMDExMmJiMzI5ZDZkYmVhMTE2NDg4Nzk3MGZlODdhMzBiZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiYXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC0xLjAudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmMDFmYzhmOTdlZWQ1ZmI5NDVhOGI3OTdhN2YxMzg5NCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDQwNDk3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAxOC0xMC0xNlQxMDowMTo1MCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAxOC0xMC0xNlQxMDowMTo1MC4wMTQ5NjZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wOC9mMS83NjcwMDVhN2Y2MjI4NDUzMWFmMWIxNGYxMTQwZTc5ZDQ1ZmVkYzFmODNjNjVmOWI0ODJkNmU3YmQ1MmUvYXBpbWF0aWNkZW1vbnN0cmF0aW9uMTIzNC0xLjAudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMDhmMTc2NzAwNWE3ZjYyMjg0NTMxYWYxYjE0ZjExNDBlNzlkNDVmZWRjMWY4M2M2NWY5YjQ4MmQ2ZTdiZDUyZSIs
ICAgICAgICAibWQ1IjogImYwMWZjOGY5N2VlZDVmYjk0NWE4Yjc5N2E3ZjEzODk0Iiw=
ICAgICAgICAic2hhMjU2IjogIjE2YjZmOWZhN2ZmODNkZWUwMjRhZGFmMDQ4YjgyYzAxMTJiYjMyOWQ2ZGJlYTExNjQ4ODc5NzBmZTg3YTMwYmQi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImFwaW1hdGljZGVtb25zdHJhdGlvbjEyMzQtMS4wLnRhci5neiIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiZjAxZmM4Zjk3ZWVkNWZiOTQ1YThiNzk3YTdmMTM4OTQiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiA0MDQ5Nyw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMTgtMTAtMTZUMTA6MDE6NTAiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMTgtMTAtMTZUMTA6MDE6NTAuMDE0OTY2WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMDgvZjEvNzY3MDA1YTdmNjIyODQ1MzFhZjFiMTRmMTE0MGU3OWQ0NWZlZGMxZjgzYzY1ZjliNDgyZDZlN2JkNTJlL2FwaW1hdGljZGVtb25zdHJhdGlvbjEyMzQtMS4wLnRhci5neiIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
