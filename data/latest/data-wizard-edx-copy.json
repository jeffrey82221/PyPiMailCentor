ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiUy4gQW5kcmV3IFNoZXBwYXJkIiw=
ICAgICJhdXRob3JfZW1haWwiOiAiYW5kcmV3QHdxLmlvIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIkRldmVsb3BtZW50IFN0YXR1cyA6OiA1IC0gUHJvZHVjdGlvbi9TdGFibGUiLA==
ICAgICAgIkVudmlyb25tZW50IDo6IFdlYiBFbnZpcm9ubWVudCIs
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28iLA==
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28gOjogMi4yIiw=
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28gOjogMy4wIiw=
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28gOjogMy4xIiw=
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28gOjogMy4yIiw=
ICAgICAgIkZyYW1ld29yayA6OiBEamFuZ28gOjogNC4wIiw=
ICAgICAgIkxpY2Vuc2UgOjogT1NJIEFwcHJvdmVkIDo6IE1JVCBMaWNlbnNlIiw=
ICAgICAgIk5hdHVyYWwgTGFuZ3VhZ2UgOjogRW5nbGlzaCIs
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IEphdmFTY3JpcHQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjEwIiw=
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjYiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjciLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjgiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzLjkiLA==
ICAgICAgIlRvcGljIDo6IERhdGFiYXNlIDo6IERhdGFiYXNlIEVuZ2luZXMvU2VydmVycyIs
ICAgICAgIlRvcGljIDo6IFNjaWVudGlmaWMvRW5naW5lZXJpbmcgOjogR0lTIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICIqKkRqYW5nbyBEYXRhIFdpemFyZCoqIGlzIGFuIGludGVyYWN0aXZlIHRvb2wgZm9yIG1hcHBpbmcgdGFidWxhciBkYXRhIChlLmcuIEV4Y2VsLCBDU1YsIFhNTCwgSlNPTikgaW50byBhIG5vcm1hbGl6ZWQgZGF0YWJhc2Ugc3RydWN0dXJlIHZpYSBbRGphbmdvIFJFU1QgRnJhbWV3b3JrXSBhbmQgW0l0ZXJUYWJsZV0uICBEamFuZ28gRGF0YSBXaXphcmQgYWxsb3dzIG5vdmljZSB1c2VycyB0byBtYXAgc3ByZWFkc2hlZXQgY29sdW1ucyB0byBzZXJpYWxpemVyIGZpZWxkcyAoYW5kIGNlbGwgdmFsdWVzIHRvIGZvcmVpZ24ga2V5cykgb24tdGhlLWZseSBkdXJpbmcgdGhlIGltcG9ydCBwcm9jZXNzLiAgVGhpcyByZWR1Y2VzIHRoZSBuZWVkIGZvciBwcmVzZXQgc3ByZWFkc2hlZXQgZm9ybWF0cywgd2hpY2ggbW9zdCBkYXRhIGltcG9ydCBzb2x1dGlvbnMgcmVxdWlyZS5cclxuXHJcbjxpbWcgd2lkdGg9XCIzMyVcIlxyXG4gICAgIGFsdD1cIkNvbHVtbiBDaG9pY2VzXCJcclxuICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL21hc3Rlci9pbWFnZXMvMDItY29sdW1ucy5wbmdcIj5cclxuPGltZyB3aWR0aD1cIjMzJVwiXHJcbiAgICAgYWx0PVwiQXV0byBJbXBvcnQgLSBQcm9ncmVzcyBCYXJcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8wOC1kYXRhNzUucG5nXCI+XHJcbjxpbWcgd2lkdGg9XCIzMyVcIlxyXG4gICAgIGFsdD1cIkltcG9ydGVkIFJlY29yZHNcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8xMC1yZWNvcmRzLnBuZ1wiPlxyXG5cclxuVGhlIERhdGEgV2l6YXJkIHN1cHBvcnRzIHN0cmFpZ2h0Zm9yd2FyZCBvbmUtdG8tb25lIG1hcHBpbmdzIGZyb20gc3ByZWFkc2hlZXQgY29sdW1ucyB0byBkYXRhYmFzZSBmaWVsZHMsIGFzIHdlbGwgYXMgbW9yZSBjb21wbGV4IHNjZW5hcmlvcyBsaWtlIFtuYXR1cmFsIGtleXNdIGFuZCBbRW50aXR5LUF0dHJpYnV0ZS1WYWx1ZV0gKG9yIFwid2lkZVwiKSB0YWJsZSBtYXBwaW5ncy4gIEl0IHdhcyBvcmlnaW5hbGx5IGRldmVsb3BlZCBmb3IgdXNlIHdpdGggdGhlIFtFUkFWIGRhdGEgbW9kZWxdW0VSQVZdIHByb3ZpZGVkIGJ5IFt2ZXJhXS5cclxuXHJcblshW0xhdGVzdCBQeVBJIFJlbGVhc2VdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vcHlwaS92L2RhdGEtd2l6YXJkLnN2ZyldKGh0dHBzOi8vcHlwaS5vcmcvcHJvamVjdC9kYXRhLXdpemFyZClcclxuWyFbUmVsZWFzZSBOb3Rlc10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvcmVsZWFzZS93cS9kamFuZ28tZGF0YS13aXphcmQuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9yZWxlYXNlcylcclxuWyFbTGljZW5zZV0oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9weXBpL2wvZGF0YS13aXphcmQuc3ZnKV0oaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21hc3Rlci9MSUNFTlNFKVxyXG5bIVtHaXRIdWIgU3RhcnNdKGh0dHBzOi8vaW1nLnNoaWVsZHMuaW8vZ2l0aHViL3N0YXJzL3dxL2RqYW5nby1kYXRhLXdpemFyZC5zdmcpXShodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL3N0YXJnYXplcnMpXHJcblshW0dpdEh1YiBGb3Jrc10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvZm9ya3Mvd3EvZGphbmdvLWRhdGEtd2l6YXJkLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbmV0d29yaylcclxuWyFbR2l0SHViIElzc3Vlc10oaHR0cHM6Ly9pbWcuc2hpZWxkcy5pby9naXRodWIvaXNzdWVzL3dxL2RqYW5nby1kYXRhLXdpemFyZC5zdmcpXShodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2lzc3VlcylcclxuXHJcblshW1Rlc3RzXShodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2FjdGlvbnMvd29ya2Zsb3dzL3Rlc3QueW1sL2JhZGdlLnN2ZyldKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYWN0aW9ucy93b3JrZmxvd3MvdGVzdC55bWwpXHJcblshW1B5dGhvbiBTdXBwb3J0XShodHRwczovL2ltZy5zaGllbGRzLmlvL3B5cGkvcHl2ZXJzaW9ucy9kYXRhLXdpemFyZC5zdmcpXShodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YS13aXphcmQpXHJcblshW0RqYW5nbyBTdXBwb3J0XShodHRwczovL2ltZy5zaGllbGRzLmlvL3B5cGkvZGp2ZXJzaW9ucy9kYXRhLXdpemFyZC5zdmcpXShodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YS13aXphcmQpXHJcblxyXG4jIFVzYWdlXHJcblxyXG5EamFuZ28gRGF0YSBXaXphcmQgcHJvdmlkZXMgYSBbd2ViIGludGVyZmFjZV0oI2FwaS1kb2N1bWVudGF0aW9uKSwgW0pTT04gQVBJXSgjYXBpLWRvY3VtZW50YXRpb24pLCBhbmQgW0NMSV0oI2NvbW1hbmQtbGluZS1pbnRlcmZhY2UpIGZvciBzcGVjaWZ5aW5nIGEgW2RhdGEgc291cmNlXSgjY3VzdG9tLWRhdGEtc291cmNlcykgdG8gaW1wb3J0IChlLmcuIGEgcHJldmlvdXNseS11cGxvYWRlZCBmaWxlKSwgc2VsZWN0aW5nIGEgW3NlcmlhbGl6ZXJdKCNjdXN0b20tc2VyaWFsaXplcnMpLCBtYXBwaW5nIHRoZSBkYXRhIFtjb2x1bW5zXSgjY29sdW1ucykgYW5kIFtpZGVudGlmaWVyc10oI2lkcyksIGFuZCAoYXN5bmNocm9ub3VzbHkpIGltcG9ydGluZyB0aGUgW2RhdGFdKCNkYXRhKSBpbnRvIGFueSB0YXJnZXQgbW9kZWwgaW4gdGhlIGRhdGFiYXNlLlxyXG5cclxuRGF0YSBXaXphcmQgaXMgZGVzaWduZWQgdG8gYWxsb3cgdXNlcnMgdG8gaXRlcmF0aXZlbHkgcmVmaW5lIHRoZWlyIGRhdGEgaW1wb3J0IGZsb3cuICBGb3IgZXhhbXBsZSwgZGVjaXNpb25zIG1hZGUgZHVyaW5nIGFuIGluaXRpYWwgZGF0YSBpbXBvcnQgYXJlIHByZXNlcnZlZCBmb3IgZnV0dXJlIGltcG9ydHMgb2YgZmlsZXMgd2l0aCB0aGUgc2FtZSBzdHJ1Y3R1cmUuICBUaGUgaW5jbHVkZWQgW2RhdGEgbW9kZWxdKCNkYXRhLW1vZGVsKSBtYWtlcyB0aGlzIHdvcmtmbG93IHBvc3NpYmxlLiBcclxuXHJcbiMjIyBUYWJsZSBPZiBDb250ZW50c1xyXG4gXHJcbiAxLiAqKkdldHRpbmcgU3RhcnRlZCoqXHJcbiAgICAqIFtJbnN0YWxsYXRpb25dKCNpbnN0YWxsYXRpb24pXHJcbiAgICAqIFtJbml0aWFsIENvbmZpZ3VyYXRpb25dKCNpbml0aWFsLWNvbmZpZ3VyYXRpb24pXHJcbiAgICAqIFsqKlRhcmdldCBNb2RlbCBSZWdpc3RyYXRpb24gKHJlcXVpcmVkKSoqXSgjdGFyZ2V0LW1vZGVsLXJlZ2lzdHJhdGlvbilcclxuIDIuICoqQVBJIERvY3VtZW50YXRpb24qKlxyXG4gICAgKiBbUnVuIEFQSSAmIEFkbWluIFNjcmVlbnNdKCNhcGktZG9jdW1lbnRhdGlvbilcclxuICAgICogW0RhdGEgTW9kZWxdKCNkYXRhLW1vZGVsKVxyXG4gICAgKiBbQ29tbWFuZC1MaW5lIEludGVyZmFjZV0oI2NvbW1hbmQtbGluZS1pbnRlcmZhY2UpXHJcbiAzLiAqKkFkdmFuY2VkIEN1c3RvbWl6YXRpb24qKlxyXG4gICAgKiBbQ3VzdG9tIFNlcmlhbGl6ZXJzXSgjY3VzdG9tLXNlcmlhbGl6ZXJzKVxyXG4gICAgKiBbQ3VzdG9tIERhdGEgU291cmNlc10oI2N1c3RvbS1kYXRhLXNvdXJjZXMpXHJcbiAgICAqIFtDdXN0b20gVGFza3NdKCNjdXN0b20tdGFza3MpXHJcbiAgICAqIFtUYXNrIEJhY2tlbmRzXSgjdGFzay1iYWNrZW5kcylcclxuICAgICogW3dxIEZyYW1ld29yayBJbnRlZ3JhdGlvbl0oI3dxLWZyYW1ld29yay1pbnRlZ3JhdGlvbilcclxuXHJcbiMjIEluc3RhbGxhdGlvblxyXG5cclxuYGBgYmFzaFxyXG4jIFJlY29tbWVuZGVkOiBjcmVhdGUgdmlydHVhbCBlbnZpcm9ubWVudFxyXG4jIHB5dGhvbjMgLW0gdmVudiB2ZW52XHJcbiMgLiB2ZW52L2Jpbi9hY3RpdmF0ZVxyXG5cclxucHl0aG9uMyAtbSBwaXAgaW5zdGFsbCBkYXRhLXdpemFyZFxyXG5gYGBcclxuXHJcblNlZSA8aHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZD4gdG8gcmVwb3J0IGFueSBpc3N1ZXMuXHJcblxyXG4jIyBJbml0aWFsIENvbmZpZ3VyYXRpb25cclxuXHJcbldpdGhpbiBhIG5ldyBvciBleGlzdGluZyBEamFuZ28gcHJvamVjdCwgYWRkIGBkYXRhX3dpemFyZGAgdG8geW91ciBgSU5TVEFMTEVEX0FQUFNgOlxyXG5cclxuYGBgcHl0aG9uXHJcbiMgbXlwcm9qZWN0L3NldHRpbmdzLnB5XHJcbklOU1RBTExFRF9BUFBTID0gKFxyXG4gICAjIC4uLlxyXG4gICAnZGF0YV93aXphcmQnLFxyXG4gICAnZGF0YV93aXphcmQuc291cmNlcycsICAjIFJlY29tbWVuZGVkXHJcbilcclxuXHJcbiMgVGhpcyBjYW4gYmUgb21pdHRlZCB0byB1c2UgdGhlIGRlZmF1bHRzXHJcbkRBVEFfV0laQVJEID0ge1xyXG4gICAgJ0JBQ0tFTkQnOiAnZGF0YV93aXphcmQuYmFja2VuZHMudGhyZWFkaW5nJyxcclxuICAgICdMT0FERVInOiAnZGF0YV93aXphcmQubG9hZGVycy5GaWxlTG9hZGVyJyxcclxuICAgICdJRE1BUCc6ICdkYXRhX3dpemFyZC5pZG1hcC5leGlzdGluZycsXHJcbiAgICAnQVVUSEVOVElDQVRJT04nOiAncmVzdF9mcmFtZXdvcmsuYXV0aGVudGljYXRpb24uU2Vzc2lvbkF1dGhlbnRpY2F0aW9uJyxcclxuICAgICdQRVJNSVNTSU9OJzogJ3Jlc3RfZnJhbWV3b3JrLnBlcm1pc3Npb25zLklzQWRtaW5Vc2VyJyxcclxuICAgICdBVVRPX0lNUE9SVF9UQVNLUyc6IChcclxuICAgICAgICAnZGF0YV93aXphcmQudGFza3MuY2hlY2tfc2VyaWFsaXplcicsXHJcbiAgICAgICAgJ2RhdGFfd2l6YXJkLnRhc2tzLmNoZWNrX2l0ZXInLFxyXG4gICAgICAgICdkYXRhX3dpemFyZC50YXNrcy5jaGVja19jb2x1bW5zJyxcclxuICAgICAgICAnZGF0YV93aXphcmQudGFza3MuY2hlY2tfcm93X2lkZW50aWZpZXJzJyxcclxuICAgICAgICAnZGF0YV93aXphcmQudGFza3MuaW1wb3J0X2RhdGEnLFxyXG4gICAgKSxcclxufVxyXG5gYGBcclxuXHJcbklmIHlvdSB3b3VsZCBsaWtlIHRvIHVzZSB0aGUgYnVpbHQtaW4gZGF0YSBzb3VyY2UgdGFibGVzIChgRmlsZVNvdXJjZWAgYW5kIGBVUkxTb3VyY2VgKSwgYWxzbyBpbmNsdWRlIGBkYXRhX3dpemFyZC5zb3VyY2VzYCBpbiB5b3VyIGBJTlNUQUxMRURfQVBQU2AuICBPdGhlcndpc2UsIHlvdSB3aWxsIHdhbnQgdG8gY29uZmlndXJlIG9uZSBvciBtb3JlIFtjdXN0b20gZGF0YSBzb3VyY2VzIChzZWUgYmVsb3cpXSgjY3VzdG9tLWRhdGEtc291cmNlcykuXHJcblxyXG4+IE5vdGU6IEJ5IGRlZmF1bHQsIERqYW5nbyBEYXRhIFdpemFyZCB1c2VzIGEgc2ltcGxlIFt0aHJlYWRpbmcgYmFja2VuZF0oI2RhdGFfd2l6YXJkYmFja2VuZHN0aHJlYWRpbmcpIGZvciBleGVjdXRpbmcgYXN5bmNocm9ub3VzIHRhc2tzLiAgW0NlbGVyeSBhbmQgUmVkaXNdKCNkYXRhX3dpemFyZGJhY2tlbmRzY2VsZXJ5KSBjYW4gYmUgdXNlZCBpbnN0ZWFkLCBidXQgdGhpcyBpcyBub3QgcmVxdWlyZWQuXHJcblxyXG5cclxuTmV4dCwgYWRkIGBcImRhdGFfd2l6YXJkLnVybHNcImAgdG8geW91ciBVUkwgY29uZmlndXJhdGlvbi5cclxuXHJcbmBgYHB5dGhvblxyXG4jIG15cHJvamVjdC91cmxzLnB5XHJcbmZyb20gZGphbmdvLnVybHMgaW1wb3J0IHBhdGgsIGluY2x1ZGVcclxuXHJcbnVybHBhdHRlcm5zID0gW1xyXG4gICAgIyAuLi5cclxuICAgIHBhdGgoJ2RhdGF3aXphcmQvJywgaW5jbHVkZSgnZGF0YV93aXphcmQudXJscycpKSxcclxuXVxyXG5gYGBcclxuXHJcbiMjIyBUYXJnZXQgTW9kZWwgUmVnaXN0cmF0aW9uXHJcblxyXG5JbiBvcmRlciB0byB1c2UgdGhlIHdpemFyZCwgeW91ICoqbXVzdCoqIHJlZ2lzdGVyIG9uZSBvciBtb3JlIHRhcmdldCBtb2RlbHMgYW5kL29yIHNlcmlhbGl6ZXJzLiAgVGFyZ2V0IG1vZGVsIHJlZ2lzdHJhdGlvbiBoZWxwcyB0aGUgd2l6YXJkIGtub3cgd2hlcmUgdG8gcHV0IHRoZSBkYXRhIGl0IGZpbmRzIGluIGVhY2ggcm93IG9mIHRoZSBzb3VyY2Ugc3ByZWFkc2hlZXQuICAoQnkgY29udHJhc3QsICpzb3VyY2UqIG1vZGVsIHJlZ2lzdHJhdGlvbiBpcyBvcHRpb25hbCwgYXMgbG9uZyBhcyB5b3UgYXJlIHVzaW5nIHRoZSBwcm92aWRlZCBgZGF0YV93aXphcmQuc291cmNlc2AgYXBwLilcclxuXHJcblRoZSByZWdpc3RyYXRpb24gQVBJIGlzIG1vZGVsZWQgYWZ0ZXIgdGhlICBEamFuZ28gYWRtaW4gYW5kIGBhZG1pbi5weWAuICBTcGVjaWZpY2FsbHksIERhdGEgV2l6YXJkIHdpbGwgbG9vayBmb3IgYSBgd2l6YXJkLnB5YCBmaWxlIGluIHlvdXIgYXBwIGRpcmVjdG9yeSwgd2hpY2ggc2hvdWxkIGhhdmUgdGhlIGZvbGxvd2luZyBzdHJ1Y3R1cmU6XHJcblxyXG5gYGBweXRob25cclxuIyBteWFwcC93aXphcmQucHlcclxuaW1wb3J0IGRhdGFfd2l6YXJkXHJcbmZyb20gLm1vZGVscyBpbXBvcnQgTXlNb2RlbFxyXG5cclxuZGF0YV93aXphcmQucmVnaXN0ZXIoTXlNb2RlbClcclxuYGBgXHJcblxyXG5JbnRlcm5hbGx5LCB0aGUgd2l6YXJkIHdpbGwgYXV0b21hdGljYWxseSBjcmVhdGUgYSBEamFuZ28gUkVTVCBGcmFtZXdvcmsgc2VyaWFsaXplciBjbGFzcyBjb3JyZXNwb25kaW5nIHRvIHRoZSB0YXJnZXQgbW9kZWwuICBJZiBuZWVkZWQsIHlvdSBjYW4gYWxzbyBzcGVjaWZ5IGEgW2N1c3RvbSBzZXJpYWxpemVyIGNsYXNzXSgjY3VzdG9tLXNlcmlhbGl6ZXJzKSB0byBjb25maWd1cmUgaG93IHRoZSB0YXJnZXQgbW9kZWwgaXMgdmFsaWRhdGVkIGFuZCBwb3B1bGF0ZWQuXHJcblxyXG5PbmNlIGV2ZXJ5dGhpbmcgaXMgY29uZmlndXJlZCwgdXBsb2FkIGEgc291cmNlIGZpbGUgaW4gdGhlIERqYW5nbyBhZG1pbiwgc2VsZWN0IFwiSW1wb3J0IHZpYSBkYXRhIHdpemFyZFwiIGZyb20gdGhlIGFkbWluIGFjdGlvbnMgbWVudSwgYW5kIG5hdmlnYXRlIHRocm91Z2ggdGhlIHNjcmVlbnMgZGVzY3JpYmVkIGJlbG93LlxyXG5cclxuIyMgQVBJIERvY3VtZW50YXRpb25cclxuXHJcbkRqYW5nbyBEYXRhIFdpemFyZCBpcyBpbXBsZW1lbnRlZCBhcyBhIHNlcmllcyBvZiB2aWV3cyB0aGF0IGNhbiBiZSBhY2Nlc3NlZCB2aWEgdGhlIERqYW5nbyBhZG1pbiBhcyB3ZWxsIGFzIHZpYSBhIEpTT04gQVBJLlxyXG5cclxuLS0tXHJcblxyXG48aW1nIGFsaWduPVwicmlnaHRcIiB3aWR0aD0zMjAgaGVpZ2h0PTI0MFxyXG4gICAgIGFsdD1cIlNlbGVjdCBTb3VyY2UgJiBTdGFydCBJbXBvcnRcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy9BMi1zb3VyY2UtbGlzdC5wbmdcIj5cclxuXHJcbiMjIyBOZXcgUnVuXHJcblxyXG4jIyMjIGBQT1NUIC9kYXRhd2l6YXJkL2BcclxuXHJcbkNyZWF0ZXMgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHdpemFyZCAoaS5lLiBhIGBSdW5gKS4gIElmIHlvdSBhcmUgdXNpbmcgdGhlIERqYW5nbyBhZG1pbiBpbnRlZ3JhdGlvbiwgdGhpcyBzdGVwIGlzIGV4ZWN1dGVkIHdoZW4geW91IHNlbGVjdCBcIkltcG9ydCB2aWEgRGF0YSBXaXphcmRcIiBmcm9tIHRoZSBhZG1pbiBhY3Rpb25zIG1lbnUuICBJZiB5b3UgYXJlIHVzaW5nIHRoZSBKU09OIEFQSSwgdGhlIHJldHVybmVkIHJ1biBgaWRgIHNob3VsZCBiZSB1c2VkIGluIGFsbCBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoZSBBUEkuICBFYWNoIGBSdW5gIGlzIHRpZWQgdG8gdGhlIHNvdXJjZSBtb2RlbCB2aWEgYSBbZ2VuZXJpYyBmb3JlaWduIGtleV0uXHJcblxyXG5wYXJhbWV0ZXIgICAgICAgICB8IGRlc2NyaXB0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmBvYmplY3RfaWRgIHwgVGhlIHByaW1hcnkga2V5IG9mIHRoZSAqc291cmNlKiBtb2RlbCBpbnN0YW5jZSBjb250YWluaW5nIHRoZSBkYXRhIHRvIGJlIGltcG9ydGVkLlxyXG5gY29udGVudF90eXBlX2lkYCB8IFRoZSAqc291cmNlKiBtb2RlbCdzIGFwcCBsYWJlbCBhbmQgbW9kZWwgbmFtZSAoaW4gdGhlIGZvcm1hdCBgYXBwX2xhYmVsLm1vZGVsbmFtZWApLlxyXG5gbG9hZGVyYCB8IChPcHRpb25hbCkgVGhlIGNsYXNzIG5hbWUgdG8gdXNlIGZvciBsb2FkaW5nIHRoZSBzb3VyY2UgZGF0YXNldCB2aWEgW0l0ZXJUYWJsZV0uICBUaGUgZGVmYXVsdCBsb2FkZXIgKGBkYXRhX3dpemFyZC5sb2FkZXJzLkZpbGVMb2FkZXJgKSBhc3N1bWVzIHRoYXQgdGhlIHNvdXJjZSBtb2RlbCBjb250YWlucyBhIGBGaWxlRmllbGRgIG5hbWVkIGBmaWxlYC5cclxuYHNlcmlhbGl6ZXJgIHwgKE9wdGlvbmFsKSBUaGUgc2VyaWFsaXplciBjbGFzcyB0byB1c2Ugd2hlbiBwb3B1bGF0aW5nIHRoZSAqdGFyZ2V0KiBtb2RlbC4gIFRoaXMgY2FuIGJlIGxlZnQgdW5zZXQgdG8gYWxsb3cgdGhlIHVzZXIgdG8gc2VsZWN0IHRoZSB0YXJnZXQgZHVyaW5nIHRoZSB3aXphcmQgcnVuLlxyXG5cclxuLS0tXHJcblxyXG48aW1nIGFsaWduPVwicmlnaHRcIiB3aWR0aD0zMjAgaGVpZ2h0PTI0MFxyXG4gICAgIGFsdD1cIkF1dG8gSW1wb3J0IC0gUHJvZ3Jlc3MgQmFyXCJcclxuICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL21hc3Rlci9pbWFnZXMvMDYtZGF0YTI1LnBuZ1wiPlxyXG4gICAgIFxyXG4jIyMgYXV0b1xyXG4jIyMjIGBQT1NUIC9kYXRhd2l6YXJkL1tpZF0vYXV0b2BcclxuXHJcblxyXG5UaGUgYGF1dG9gIHRhc2sgYXR0ZW1wdHMgdG8gcnVuIHRoZSBlbnRpcmUgZGF0YSB3aXphcmQgcHJvY2VzcyBmcm9tIGJlZ2lubmluZyB0byBlbmQuICBJZiBhbnkgaW5wdXQgaXMgbmVlZGVkLCB0aGUgaW1wb3J0IHdpbGwgaGFsdCBhbmQgcmVkaXJlY3QgdG8gdGhlIG5lY2Vzc2FyeSBzY3JlZW4uICBJZiBubyBpbnB1dCBpcyBuZWVkZWQsIHRoZSBgYXV0b2AgdGFzayBpcyBlcXVpdmFsZW50IHRvIHN0YXJ0aW5nIHRoZSBgZGF0YWAgdGFzayBkaXJlY3RseS4gIFRoaXMgaXMgYW4gYXN5bmNocm9ub3VzIG1ldGhvZCwgYW5kIHJldHVybnMgYSBgdGFza19pZGAgdG8gYmUgdXNlZCB3aXRoIHRoZSBzdGF0dXMgQVBJLlxyXG5cclxuVGhlIFtydW5fZGV0YWlsLmh0bWxdIHRlbXBsYXRlIHByb3ZpZGVzIGFuIGV4YW1wbGUgZm9ybSB0aGF0IGluaXRpYXRlcyB0aGUgYGF1dG9gIHRhc2suICBUaGUgYGF1dG9gIHRhc2sgaXRzZWxmIHVzZXMgdGhlIFtydW5fYXV0by5odG1sXSB0ZW1wbGF0ZS5cclxuXHJcblRoZSBkZWZhdWx0IHNlcXVlbmNlIG9mIHRhc2tzIGlzIGRlZmluZWQgYnkgdGhlIFtgQVVUT19JTVBPUlRfVEFTS1NgIHNldHRpbmddKCNpbml0aWFsLWNvbmZpZ3VyYXRpb24pICBOb3RlIHRoYXQgdGhlIGBjaGVja18qYCB0YXNrcyBkbyBub3QgcHJvdmlkZSBhIGRpcmVjdCBVSSBvciBIVFRQIEFQSS4gIEluc3RlYWQsIHRoZXNlIHRhc2tzIHJlZGlyZWN0IHRvIGEgY29ycmVzcG9uZGluZyBVSSB0YXNrIGJ5IHJhaXNpbmcgYGRhdGFfd2l6YXJkLklucHV0TmVlZGVkYCBpZiBuZWNlc3NhcnkuICBGb3IgZXhhbXBsZSwgYGRhdGFfd2l6YXJkLnRhc2tzLmNoZWNrX2NvbHVtbnNgIHJhaXNlcyBgSW5wdXROZWVkZWRgIGFuZCByZWRpcmVjdHMgdG8gdGhlIFtjb2x1bW5zXSgjY29sdW1ucykgdGFzayBpZiB0aGUgc3ByZWFkc2hlZXQgY29udGFpbnMgdW5leHBlY3RlZCBjb2x1bW4gaGVhZGVycy4gIE9uY2UgdGhlIGZvcm0gaXMgc3VibWl0dGVkLCB0aGUgW3VwZGF0ZWNvbHVtbnNdKCN1cGRhdGVjb2x1bW5zKSB0YXNrIHByb2Nlc3NlcyB0aGUgdXNlciBpbnB1dCBhbmQgcnVucyB0aGUgY2hlY2sgYWdhaW4uICBPbmNlIHRoZSBjaGVjayBzdWNjZWVkcyAoaS5lLiBhbGwgY29sdW1ucyBoYXZlIGJlZW4gbWFwcGVkKSwgdGhlIHVzZXIgaXMgYWJsZSB0byByZXN0YXJ0IHRoZSBhdXRvIHRhc2suXHJcblxyXG5IZXJlIGFyZSB0aGUgY29ycmVzcG9uZGluZyBJbnB1dCBhbmQgRm9ybSBQcm9jZXNzaW5nIHRhc2tzIGZvciBlYWNoIG9mIHRoZSB0YXNrcyBpbiB0aGUgZGVmYXVsdCBzZXF1ZW5jZTpcclxuXHJcbkF1dG8gVGFzayB8IElucHV0IFRhc2sgfCBGb3JtIFByb2Nlc3NpbmcgVGFza1xyXG4tLXwtLXwtLVxyXG5gY2hlY2tfc2VyaWFsaXplcmAgfCBbYGxpc3Rfc2VyaWFsaXplcnNgXSgjc2VyaWFsaXplcnMpIHwgW2B1cGRhdGVzZXJpYWxpemVyYF0oI3VwZGF0ZXNlcmlhbGl6ZXIpXHJcbmBjaGVja19pdGVyYCB8ICpOL0EqIHwgKk4vQSpcclxuYGNoZWNrX2NvbHVtbnNgIHwgW2ByZWFkX2NvbHVtbnNgXSgjY29sdW1ucykgfCBbYHVwZGF0ZV9jb2x1bW5zYF0oI3VwZGF0ZWNvbHVtbnMpXHJcbmBjaGVja19yb3dfaWRlbnRpZmllcnNgIHwgW2ByZWFkX3Jvd19pZGVudGlmaWVyc2BdKCNpZHMpIHwgW2B1cGRhdGVfcm93X2lkZW50aWZpZXJzYF0oI3VwZGF0ZWlkcylcclxuW2BpbXBvcnRfZGF0YWBdKCNkYXRhKSB8ICpOL0EqIHwgKk4vQSpcclxuXHJcblNlZSBbQ3VzdG9tIFRhc2tzXSgjY3VzdG9tLXRhc2tzKSBmb3IgZGV0YWlscyBvbiBjdXN0b21pemluZyB0aGUgdGFzayBzZXF1ZW5jZS5cclxuXHJcbj4gU291cmNlOiBbYGRhdGFfd2l6YXJkLnRhc2tzLmF1dG9faW1wb3J0YF0oaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21haW4vZGF0YV93aXphcmQvdGFza3MucHkjTDU4KVxyXG5cclxuLS0tXHJcblxyXG4jIyMgc3RhdHVzXHJcbiMjIyMgYEdFVCAvZGF0YXdpemFyZC9baWRdL3N0YXR1cy5qc29uP3Rhc2s9W3Rhc2tdYFxyXG5cclxuVGhlIGBzdGF0dXNgIEFQSSBpcyB1c2VkIHRvIGNoZWNrIHRoZSBzdGF0dXMgb2YgYW4gYXN5bmNocm9ub3VzIHRhc2sgKG9uZSBvZiBgYXV0b2Agb3IgYGRhdGFgKS4gIFRoZSBBUEkgaXMgdXNlZCBieSB0aGUgcHJvdmlkZWQgW2RhdGFfd2l6YXJkL2pzL3Byb2dyZXNzLmpzXSB0byB1cGRhdGUgdGhlIGA8cHJvZ3Jlc3M+YCBiYXIgaW4gdGhlIFtydW5fYXV0by5odG1sXSBhbmQgW3J1bl9kYXRhLmh0bWxdIHRlbXBsYXRlcy4gIFVubGlrZSB0aGUgb3RoZXIgbWV0aG9kcywgdGhpcyBBUEkgaXMgSlNPTi1vbmx5IGFuZCBoYXMgbm8gSFRNTCBlcXVpdmFsZW50LiAgQW4gb2JqZWN0IG9mIHRoZSBmb2xsb3dpbmcgZm9ybWF0IHdpbGwgYmUgcmV0dXJuZWQ6XHJcblxyXG5gYGBqc1xyXG57XHJcbiAgICAvLyBHZW5lcmFsIHByb3BlcnRpZXNcclxuICAgIFwic3RhdHVzXCI6IFwiUFJPR1JFU1NcIiwgLy8gb3IgXCJTVUNDRVNTXCIsIFwiRkFJTFVSRVwiXHJcbiAgICBcInN0YWdlXCI6IFwibWV0YVwiLCAgICAgIC8vIG9yIFwiZGF0YVwiXHJcbiAgICBcImN1cnJlbnRcIjogMjMsICAgICAgICAvLyBjdXJyZW50bHkgcHJvY2Vzc2luZyByb3dcclxuICAgIFwidG90YWxcIjogMTAwLCAgICAgICAgIC8vIHRvdGFsIG51bWJlciBvZiByb3dzXHJcbiAgICBcclxuICAgIC8vIFwiRkFJTFVSRVwiXHJcbiAgICBcImVycm9yXCI6IFwiRXJyb3IgTWVzc2FnZVwiLFxyXG5cclxuICAgIC8vIFRhc2sgY29tcGxldGUgKFwiU1VDQ0VTU1wiKVxyXG4gICAgXCJhY3Rpb25cIjogXCJyZWNvcmRzXCIsICAgICAgICAvLyBvciBcInNlcmlhbGl6ZXJzXCIsIFwiY29sdW1uc1wiIFwiaWRzXCJcclxuICAgIFwibWVzc2FnZVwiOiBcIklucHV0IE5lZWRlZFwiLCAgLy8gaWYgYWN0aW9uIGlzIG5vdCBcInJlY29yZHNcIlxyXG4gICAgXCJza2lwcGVkXCI6IFsuLi5dLCAgICAgICAgICAgLy8gcm93cyB0aGF0IGNvdWxkIG5vdCBiZSBpbXBvcnRlZFxyXG4gICAgXCJsb2NhdGlvblwiOiBcIi9kYXRhd2l6YXJkL1tpZF0vcmVjb3Jkc1wiLFxyXG59XHJcbmBgYFxyXG5cclxuVGhlIHBvdGVudGlhbCB2YWx1ZXMgZm9yIHRoZSAgYHN0YXR1c2AgZmllbGQgYXJlIHRoZSBzYW1lIGFzIGNvbW1vbiBbQ2VsZXJ5IHRhc2sgc3RhdGVzXSwgZXZlbiB3aGVuIG5vdCB1c2luZyB0aGUgYGNlbGVyeWAgYmFja2VuZC4gIFdoZW4gcnVubmluZyBhbiBgYXV0b2AgdGFzaywgdGhlIHJlc3VsdCBpcyBgU1VDQ0VTU2Agd2hlbmV2ZXIgdGhlIHRhc2sgZW5kcyB3aXRob3V0IGVycm9ycywgZXZlbiBpZiB0aGVyZSBpcyBhZGRpdGlvbmFsIGlucHV0IG5lZWRlZCB0byBmdWxseSBjb21wbGV0ZSB0aGUgcnVuLlxyXG5cclxuVGhlIGRlZmF1bHQgW3J1bl9hdXRvLmh0bWxdIGFuZCBbcnVuX2RhdGEuaHRtbF0gdGVtcGxhdGVzIGluY2x1ZGUgYSBgPHByb2dyZXNzPmAgZWxlbWVudCBmb3IgdXNlIHdpdGggdGhlIHN0YXR1cyB0YXNrLlxyXG5cclxuLS0tXHJcblxyXG48aW1nIGFsaWduPVwicmlnaHRcIiB3aWR0aD0zMjAgaGVpZ2h0PTI0MFxyXG4gICAgIGFsdD1cIlNlcmlhbGl6ZXIgQ2hvaWNlc1wiXHJcbiAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9tYXN0ZXIvaW1hZ2VzLzAwLXNlcmlhbGl6ZXJzLnBuZ1wiPlxyXG5cclxuIyMjIHNlcmlhbGl6ZXJzXHJcbiMjIyMgYEdFVCAvZGF0YXdpemFyZC9baWRdL3NlcmlhbGl6ZXJzYFxyXG4gICAgIFxyXG5UaGUgYHNlcmlhbGl6ZXJzYCB0YXNrIHByb3ZpZGVzIGEgbGlzdCBvZiBhbGwgcmVnaXN0ZXJlZCBzZXJpYWxpemVycyAoaS5lLiB0YXJnZXQgbW9kZWxzKS4gIFRoaXMgc2NyZWVuIGlzIHNob3duIGJ5IHRoZSBgYXV0b2AgdGFzayBpZiBhIHNlcmlhbGl6ZXIgd2FzIG5vdCBzcGVjaWZpZWQgd2hlbiB0aGUgYFJ1bmAgd2FzIGNyZWF0ZWQuICBUaGUgZGVmYXVsdCBbcnVuX3NlcmlhbGl6ZXJzLmh0bWxdIHRlbXBsYXRlIGluY2x1ZGVzIGFuIGludGVyZmFjZSBmb3Igc2VsZWN0aW5nIGEgdGFyZ2V0LiAgSWYgYSBzZXJpYWxpemVyIGlzIGFscmVhZHkgc2VsZWN0ZWQsIHRoZSB0ZW1wbGF0ZSB3aWxsIGRpc3BsYXkgdGhlIGxhYmVsIGFuZCBhIGJ1dHRvbiB0byAocmUpc3RhcnQgdGhlIGBhdXRvYCB0YXNrLlxyXG5cclxuPiBTb3VyY2U6IFtgZGF0YV93aXphcmQudGFza3MubGlzdF9zZXJpYWxpemVyc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYWluL2RhdGFfd2l6YXJkL3Rhc2tzLnB5I0w3OClcclxuXHJcbjxicj5cclxuXHJcbi0tLVxyXG5cclxuPGltZyBhbGlnbj1cInJpZ2h0XCIgd2lkdGg9MzIwIGhlaWdodD0yNDBcclxuICAgICBhbHQ9XCJTZXJpYWxpemVyIFNlbGVjdGVkXCJcclxuICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL21hc3Rlci9pbWFnZXMvMDEtdXBkYXRlc2VyaWFsaXplci5wbmdcIj5cclxuICAgICBcclxuIyMjIHVwZGF0ZXNlcmlhbGl6ZXJcclxuIyMjIyBgUE9TVCAvZGF0YXdpemFyZC9baWRdL3VwZGF0ZXNlcmlhbGl6ZXJgXHJcblxyXG5UaGUgYHVwZGF0ZXNlcmlhbGl6ZXJgIHRhc2sgdXBkYXRlcyB0aGUgc3BlY2lmaWVkIGBSdW5gIHdpdGggdGhlIHNlbGVjdGVkIHRhcmdldCBzZXJpYWxpemVyIG5hbWUuICBUaGlzIGlzIHR5cGljYWxseSBjYWxsZWQgZnJvbSBbdGhlIGZvcm1dW3J1bl9zZXJpYWxpemVycy5odG1sXSBnZW5lcmF0ZWQgYnkgdGhlIGBzZXJpYWxpemVyc2AgdGFzaywgYW5kIHdpbGwgcmVkaXJlY3QgdG8gdGhhdCB0YXNrIHdoZW4gY29tcGxldGUuXHJcblxyXG5wYXJhbWV0ZXIgICAgfCBkZXNjcmlwdGlvblxyXG4tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuYHNlcmlhbGl6ZXJgIHwgVGhlIGNsYXNzIG5hbWUgKG9yIGxhYmVsKSBvZiB0aGUgdGFyZ2V0IHNlcmlhbGl6ZXIgdG8gdXNlIGZvciB0aGlzIHJ1bi5cclxuXHJcbj4gU291cmNlOiBbYGRhdGFfd2l6YXJkLnRhc2tzLnVwZGF0ZXNlcmlhbGl6ZXJgXShodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFpbi9kYXRhX3dpemFyZC90YXNrcy5weSNMOTApXHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiQ29sdW1uIENob2ljZXNcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8wMi1jb2x1bW5zLnBuZ1wiPlxyXG5cclxuIyMjIGNvbHVtbnNcclxuIyMjIyBgR0VUIC9kYXRhd2l6YXJkL1tpZF0vY29sdW1uc2BcclxuXHJcblRoZSBgY29sdW1uc2AgdGFzayBsaXN0cyBhbGwgb2YgdGhlIGNvbHVtbnMgZm91bmQgaW4gdGhlIHNvdXJjZSBkYXRhc2V0IChpLmUuIHNwcmVhZHNoZWV0KSBhbmQgdGhlaXIgbWFwcGluZ3MgdG8gdGFyZ2V0IHNlcmlhbGl6ZXIgZmllbGRzLiAgVGhpcyBzY3JlZW4gaXMgc2hvd24gYnkgdGhlIGBhdXRvYCB0YXNrIGlmIHRoZXJlIGFyZSBhbnkgY29sdW1uIG5hbWVzIHRoYXQgY291bGQgbm90IGJlIGF1dG9tYXRpY2FsbHkgbWFwcGVkLiAgVGhlIHBvdGVudGlhbCBtYXBwaW5ncyBhcmUgb25lIG9mOlxyXG5cclxuICAqIHNpbXBsZSBzZXJpYWxpemVyIGZpZWxkIG5hbWVzIChlLmcuIGBmaWVsZGApXHJcbiAgKiBuZXN0ZWQgZmllbGQgbmFtZXMgKGZvciBbbmF0dXJhbCBrZXlzXSwgZS5nLiBgbmVzdGVkW3JlY29yZF1bZmllbGRdYClcclxuICAqIFtFQVZdW0VudGl0eS1BdHRyaWJ1dGUtVmFsdWVdIGF0dHJpYnV0ZS12YWx1ZSBtYXBwaW5ncyAoZS5nLiBgdmFsdWVzW11bdmFsdWVdO2F0dHJpYnV0ZV9pZD0xYCkuICBOb3RlIHRoYXQgRUFWIHN1cHBvcnQgcmVxdWlyZXMgYSBbY3VzdG9tIHNlcmlhbGl6ZXIgY2xhc3NdKCNjdXN0b20tc2VyaWFsaXplcnMpLlxyXG5cclxuVGhlIGRlZmF1bHQgW3J1bl9jb2x1bW5zLmh0bWxdIHRlbXBsYXRlIGluY2x1ZGVzIGFuIGludGVyZmFjZSBmb3IgbWFwcGluZyBkYXRhIGNvbHVtbnMgdG8gc2VyaWFsaXplciBmaWVsZHMuICBJZiBhbGwgY29sdW1ucyBhcmUgYWxyZWFkeSBtYXBwZWQsIHRoZSB0ZW1wbGF0ZSB3aWxsIGRpc3BsYXkgdGhlIG1hcHBpbmdzIGFuZCBhIGJ1dHRvbiB0byAocmUpc3RhcnQgdGhlIGBhdXRvYCB0YXNrLlxyXG5cclxuPiBTb3VyY2U6IFtgZGF0YV93aXphcmQudGFza3MucmVhZF9jb2x1bW5zYF0oaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21haW4vZGF0YV93aXphcmQvdGFza3MucHkjTDI4NylcclxuXHJcbi0tLVxyXG5cclxuPGltZyBhbGlnbj1cInJpZ2h0XCIgd2lkdGg9MzIwIGhlaWdodD0yNDBcclxuICAgICBhbHQ9XCJDb2x1bW5zIFNlbGVjdGVkXCJcclxuICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL21hc3Rlci9pbWFnZXMvMDMtdXBkYXRlY29sdW1ucy5wbmdcIj5cclxuICAgICBcclxuIyMjIHVwZGF0ZWNvbHVtbnNcclxuIyMjIyBgUE9TVCAvZGF0YXdpemFyZC9baWRdL3VwZGF0ZWNvbHVtbnNgXHJcblxyXG5UaGUgYHVwZGF0ZWNvbHVtbnNgIHRhc2sgc2F2ZXMgdGhlIHNwZWNpZmllZCBtYXBwaW5ncyBmcm9tIHNvdXJjZSBkYXRhIGNvbHVtbnMgdG8gdGFyZ2V0IHNlcmlhbGl6ZXIgZmllbGRzLiAgVGhpcyBpcyB0eXBpY2FsbHkgY2FsbGVkIGZyb20gW3RoZSBmb3JtXVtydW5fY29sdW1ucy5odG1sXSBnZW5lcmF0ZWQgYnkgdGhlIGBjb2x1bW5zYCB0YXNrLCBhbmQgd2lsbCByZWRpcmVjdCB0byB0aGF0IHRhc2sgd2hlbiBjb21wbGV0ZS5cclxuXHJcbnBhcmFtZXRlciAgICAgfCBkZXNjcmlwdGlvblxyXG4tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmByZWxfW3JlbGlkXWAgfCBUaGUgY29sdW1uIHRvIG1hcCB0byB0aGUgc3BlY2lmaWVkIHNlcmlhbGl6ZXIgZmllbGQuICBUaGUgYHJlbGlkYCBhbmQgdGhlIGNvbXBsZXRlIGxpc3Qgb2YgcG9zc2libGUgbWFwcGluZ3Mgd2lsbCBiZSBwcm92aWRlZCBieSB0aGUgYGNvbHVtbnNgIHRhc2suXHJcblxyXG4+IFNvdXJjZTogW2BkYXRhX3dpemFyZC50YXNrcy51cGRhdGVfY29sdW1uc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYWluL2RhdGFfd2l6YXJkL3Rhc2tzLnB5I0w0NTkpXHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiSWRlbnRpZmllciBDaG9pY2VzXCJcclxuICAgICBzcmM9XCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL21hc3Rlci9pbWFnZXMvMDQtaWRzLnBuZ1wiPlxyXG5cclxuIyMjIGlkc1xyXG4jIyMjIGBHRVQgL2RhdGF3aXphcmQvW2lkXS9pZHNgXHJcblxyXG5UaGUgYGlkc2AgdGFzayBsaXN0cyBhbGwgb2YgdGhlIGZvcmVpZ24ga2V5IHZhbHVlcyBmb3VuZCBpbiB0aGUgc291cmNlIGRhdGFzZXQgKGkuZS4gc3ByZWFkc2hlZXQpLiAgSWYgdGhlcmUgYXJlIGFueSB1bm1hcHBlZCBmb3JlaWduIGtleSB2YWx1ZXMsIHRoZSBhdXRvIHRhc2sgd2lsbCBzdG9wIGFuZCByZWRpcmVjdCB0byB0aGUgYGlkc2AgdGFzay4gIFRoZSBkZWZhdWx0IFtydW5faWRzLmh0bWxdIHRlbXBsYXRlIGluY2x1ZGVzIGFuIGludGVyZmFjZSBmb3IgbWFwcGluZyByb3cgaWRlbnRpZmllcnMgdG8gZm9yZWlnbiBrZXkgdmFsdWVzLiAgVGhlIHBvdGVudGlhbCBtYXBwaW5ncyBkZXBlbmQgb24gdGhlIHNlcmlhbGl6ZXIgZmllbGQgdXNlZCB0byByZXByZXNlbnQgdGhlIGZvcmVpZ24ga2V5LlxyXG5cclxuICogRm9yIFtQcmltYXJ5S2V5UmVsYXRlZEZpZWxkXSwgW1NsdWdSZWxhdGVkRmllbGRdLCBhbmQgW05hdHVyYWxLZXlTZXJpYWxpemVyXVtuYXR1cmFsIGtleXNdLCB0aGUgY2hvaWNlcyB3aWxsIGluY2x1ZGUgYWxsIGV4aXN0aW5nIHJlY29yZCBJRCBvciBzbHVncy5cclxuICogRm9yIGBOYXR1cmFsS2V5U2VyaWFsaXplcmAgb25seSwgYWBcIm5ld1wiYCBjaG9pY2Ugd2lsbCBhbHNvIGJlIGluY2x1ZGVkLCBhbGxvd2luZyBmb3IgdGhlIHBvc3NpYmlsaXR5IG9mIGNyZWF0aW5nIG5ldyByZWNvcmRzIGluIHRoZSBmb3JlaWduIHRhYmxlIG9uIHRoZSBmbHkuXHJcbiBcclxuT25jZSBhbGwgaWRzIGFyZSBtYXBwZWQsIHRoZSB0ZW1wbGF0ZSB3aWxsIGRpc3BsYXkgdGhlIG1hcHBpbmdzIGFuZCBhIGJ1dHRvbiB0byAocmUpc3RhcnQgdGhlIGBhdXRvYCB0YXNrLlxyXG5cclxuTm90ZSB0aGF0IHRoZSBgYXV0b2AgdGFzayB3aWxsIHNraXAgdGhlIGBpZHNgIHRhc2sgZW50aXJlbHkgaWYgYW55IG9mIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XHJcbiAgKiBUaGUgZmlsZSBjb250YWlucyBubyBmb3JlaWduIGtleSBjb2x1bW5zXHJcbiAgKiBBbGwgZm9yZWlnbiBrZXkgdmFsdWVzIHdlcmUgYWxyZWFkeSBtYXBwZWQgZHVyaW5nIGEgcHJldmlvdXMgaW1wb3J0IHJ1blxyXG4gICogQWxsIGZvcmVpZ24ga2V5IHZhbHVlcyBjYW4gYmUgYXV0b21hdGljYWxseSBtYXBwZWQgdmlhIHRoZSBgREFUQV9XSVpBUkRbJ0lETUFQJ11gIHNldHRpbmc6XHJcbiAgXHJcbmBEQVRBX1dJWkFSRFsnSURNQVAnXWAgfCBkZXRhaWxcclxuLS18LS1cclxuYFwiZGF0YV93aXphcmQuaWRtYXAuZXhpc3RpbmdcImAgKGRlZmF1bHQpIHwgQXV0b21hdGljYWxseSBtYXAgZXhpc3RpbmcgSURzLCBidXQgcmVxdWlyZSB1c2VyIHRvIG1hcCB1bmtub3duIGlkc1xyXG5gXCJkYXRhX3dpemFyZC5pZG1hcC5uZXZlclwiYCB8IFJlcXVpcmUgdXNlciB0byBtYW51YWxseSBtYXAgYWxsIElEcyB0aGUgZmlyc3QgdGltZSB0aGV5IGFyZSBmb3VuZCBpbiBhIGZpbGVcclxuYFwiZGF0YV93aXphcmQuaWRtYXAuYWx3YXlzXCJgIHwgQWx3YXlzIG1hcCBJRHMgKHNraXAgbWFudWFsIG1hcHBpbmcpLiAgVW5rbm93biBJRHMgd2lsbCBiZSBwYXNzZWQgb24gYXMtaXMgdG8gdGhlIHNlcmlhbGl6ZXIsIHdoaWNoIHdpbGwgY2F1c2UgcGVyLXJvdyBlcnJvcnMgdW5sZXNzIHVzaW5nIG5hdHVyYWwga2V5cy5cclxuKGN1c3RvbSBpbXBvcnQgcGF0aCkgfCBUaGUgZnVuY3Rpb24gc2hvdWxkIGFjY2VwdCBhbiBpZGVudGlmaWVyIGFuZCBhIHNlcmlhbGl6ZXIgZmllbGQsIGFuZCByZXR1cm4gdGhlIG1hcHBlZCB2YWx1ZSAob3IgYE5vbmVgIGlmIG5vIGF1dG9tYXRpYyBtYXBwaW5nIGlzIGF2YWlsYWJsZSkuICBTZWUgdGhlIFtidWlsdC1pbiBmdW5jdGlvbnNdW2lkbWFwLnB5XSBmb3IgZXhhbXBsZXMuXHJcblxyXG5Ob3RlIHRoYXQgdGhlIGNvbmZpZ3VyZWQgYElETUFQYCBmdW5jdGlvbiB3aWxsIG9ubHkgYmUgY2FsbGVkIHRoZSBmaXJzdCB0aW1lIGEgbmV3IGlkZW50aWZpZXIgaXMgZW5jb3VudGVyZWQuICBPbmNlIHRoZSBtYXBwaW5nIGlzIGVzdGFibGlzaGVkIChtYW51YWxseSBvciBhdXRvbWF0aWNhbGx5KSwgaXQgd2lsbCBiZSByZS11c2VkIGluIHN1YnNlcXVlbnQgd2l6YXJkIHJ1bnMuXHJcblxyXG4+IFNvdXJjZTogW2BkYXRhX3dpemFyZC50YXNrcy5yZWFkX3Jvd19pZGVudGlmaWVyc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYWluL2RhdGFfd2l6YXJkL3Rhc2tzLnB5I0w1MjApXHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiSWRlbnRpZmllcnMgU2VsZWN0ZWRcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8wNS11cGRhdGVpZHMucG5nXCI+XHJcbiAgICAgXHJcbiMjIyB1cGRhdGVpZHNcclxuIyMjIyBgUE9TVCAvZGF0YXdpemFyZC9baWRdL3VwZGF0ZWlkc2BcclxuXHJcblRoZSBgdXBkYXRlaWRzYCB0YXNrIHNhdmVzIHRoZSBzcGVjaWZpZWQgbWFwcGluZ3MgZnJvbSByb3cgaWRlbnRpZmllcnMgdG8gZm9yZWlnbiBrZXkgdmFsdWVzLiAgVGhpcyBpcyB0eXBpY2FsbHkgY2FsbGVkIGZyb20gW3RoZSBmb3JtXVtydW5faWRzLmh0bWxdIGdlbmVyYXRlZCBieSB0aGUgYGlkc2AgdGFzaywgYW5kIHdpbGwgcmVkaXJlY3QgdG8gdGhhdCB0YXNrIHdoZW4gY29tcGxldGUuXHJcblxyXG5wYXJhbWV0ZXIgICAgICAgICAgICB8IGRlc2NyaXB0aW9uXHJcbi0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmBpZGVudF9baWRlbnRpZF1faWRgIHwgVGhlIGlkZW50aWZpZXIgdG8gbWFwIHRvIHRoZSBzcGVjaWZpZWQgZm9yZWlnbiBrZXkgdmFsdWUuICBUaGUgYGlkZW50aWRgIGFuZCB0aGUgY29tcGxldGUgbGlzdCBvZiBwb3NzaWJsZSBtYXBwaW5ncyB3aWxsIGJlIHByb3ZpZGVkIGJ5IHRoZSBgaWRzYCB0YXNrLlxyXG5cclxuPiBTb3VyY2U6IFtgZGF0YV93aXphcmQudGFza3MudXBkYXRlX3Jvd19pZGVudGlmaWVyc2BdKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYWluL2RhdGFfd2l6YXJkL3Rhc2tzLnB5I0w2ODYpXHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiQXV0byBJbXBvcnQgLSBQcm9ncmVzcyBCYXJcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8wOC1kYXRhNzUucG5nXCI+XHJcblxyXG4jIyMgZGF0YVxyXG4jIyMjIGBQT1NUIC9kYXRhd2l6YXJkL1tpZF0vZGF0YWBcclxuXHJcblRoZSBgZGF0YWAgdGFzayBzdGFydHMgdGhlIGFjdHVhbCBpbXBvcnQgcHJvY2VzcyAoYW5kIGlzIGNhbGxlZCBieSBgYXV0b2AgYmVoaW5kIHRoZSBzY2VuZXMpLiAgVW5saWtlIGBhdXRvYCwgY2FsbGluZyBgZGF0YWAgZGlyZWN0bHkgd2lsbCBub3QgY2F1c2UgYSByZWRpcmVjdCB0byBvbmUgb2YgdGhlIG90aGVyIHRhc2tzIGlmIGFueSBtZXRhIGlucHV0IGlzIG5lZWRlZC4gIEluc3RlYWQsIGBkYXRhYCB3aWxsIGF0dGVtcHQgdG8gaW1wb3J0IGVhY2ggcmVjb3JkIGFzLWlzLCBhbmQgcmVwb3J0IGFueSBlcnJvcnMgdGhhdCBvY2N1cmVkIGR1ZSB0byBlLmcuIG1pc3NpbmcgZmllbGRzIG9yIHVubWFwcGVkIGZvcmVpZ24ga2V5cy5cclxuXHJcblRoaXMgaXMgYW4gYXN5bmNocm9ub3VzIG1ldGhvZCwgYW5kIHJldHVybnMgYSBgdGFza19pZGAgdG8gYmUgdXNlZCB3aXRoIHRoZSBgc3RhdHVzYCBBUEkuICBUaGUgZGVmYXVsdCBbcnVuX2RhdGEuaHRtbF0gdGVtcGxhdGUgaW5jbHVkZXMgYSBgPHByb2dyZXNzPmAgZWxlbWVudCBmb3IgdXNlIHdpdGggc3RhdHVzIHRhc2suXHJcblxyXG4+IFNvdXJjZTogW2BkYXRhX3dpemFyZC50YXNrcy5pbXBvcnRfZGF0YWBdKGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYWluL2RhdGFfd2l6YXJkL3Rhc2tzLnB5I0w3MzMpXHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiSW1wb3J0ZWQgUmVjb3Jkc1wiXHJcbiAgICAgc3JjPVwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9tYXN0ZXIvaW1hZ2VzLzEwLXJlY29yZHMucG5nXCI+XHJcblxyXG4jIyMgcmVjb3Jkc1xyXG4jIyMjIGBHRVQgL2RhdGF3aXphcmQvW2lkXS9yZWNvcmRzYFxyXG5cclxuVGhlIGByZWNvcmRzYCB0YXNrIHByb3ZpZGVzIGEgbGlzdCBvZiBpbXBvcnRlZCByb3dzIChpbmNsdWRpbmcgZXJyb3JzKS4gIEl0IGlzIHJlZGlyZWN0ZWQgdG8gYnkgdGhlIGBhdXRvYCBhbmQgYGRhdGFgIHRhc2tzIHVwb24gY29tcGxldGlvbi4gIFN1Y2Nlc3NmdWxseSBpbXBvcnRlZCBgUmVjb3JkYCBpbnN0YW5jZXMgd2lsbCBoYXZlIGEgW2dlbmVyaWMgZm9yZWlnbiBrZXldIHBvaW50aW5nIHRvIHRoZSB0YXJnZXQgbW9kZWwuICBUaGUgYHJlY29yZHNgIHRhc2sgd2lsbCBpbmNsdWRlIGxpbmtzIHRvIHRoZSBgZ2V0X2Fic29sdXRlX3VybCgpYCBvciBhZG1pbiBzY3JlZW4gZm9yIGVhY2ggbmV3bHkgaW1wb3J0ZWQgdGFyZ2V0IG1vZGVsIGluc3RhbmNlLiAgVGhlIGRlZmF1bHQgW3J1bl9yZWNvcmRzLmh0bWxdIHRlbXBsYXRlIGluY2x1ZGVzIGFuIGludGVyZmFjZSBmb3IgZGlzcGxheWluZyB0aGUgcmVjb3JkIGRldGFpbHMuXHJcblxyXG48YnI+XHJcblxyXG4tLS1cclxuXHJcbjxpbWcgYWxpZ249XCJyaWdodFwiIHdpZHRoPTMyMCBoZWlnaHQ9MjQwXHJcbiAgICAgYWx0PVwiUnVuIExpc3RcIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy8xMS1ydW4tbGlzdC5wbmdcIj5cclxuXHJcbiMjIyBSdW4gTGlzdFxyXG4jIyMjIGBHRVQgL2RhdGF3aXphcmQvYFxyXG5cclxuRGphbmdvIERhdGEgV2l6YXJkIHByb3ZpZGVzIGEgbGlzdCB2aWV3IHRoYXQgc3VtbWFyaXNlcyBwcmlvciBydW5zIGFuZCB0aGUgbnVtYmVyIG9mIHJlY29yZHMgaW1wb3J0ZWQgYnkgZWFjaC4gIEluY29tcGxldGUgcnVucyBjYW4gYWxzbyBiZSByZXN0YXJ0ZWQgZnJvbSB0aGlzIGxpc3QuXHJcblxyXG48YnI+PGJyPlxyXG5cclxuLS0tXHJcblxyXG48aW1nIGFsaWduPVwicmlnaHRcIiB3aWR0aD0zMjAgaGVpZ2h0PTI0MFxyXG4gICAgIGFsdD1cIklkZW50aWZpZXIgQWRtaW5cIlxyXG4gICAgIHNyYz1cImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvbWFzdGVyL2ltYWdlcy9BMy1pZGVudGlmaWVycy5wbmdcIj5cclxuICAgICBcclxuIyMjIElkZW50aWZpZXIgQWRtaW5cclxuIyMjIyBgR0VUIC9hZG1pbi9kYXRhX3dpemFyZC9pZGVudGlmZXIvYFxyXG5cclxuRGphbmdvIERhdGEgV2l6YXJkIGlkZW50aWZpZXIgbWFwcGluZ3MgY2FuIGJlIHZpZXdlZCBhbmQgZWRpdGVkIHZpYSB0aGUgRGphbmdvIEFkbWluLiAgUnVucyBjYW4gYWxzbyBiZSB2aWV3ZWQgdGhyb3VnaCB0aGUgYWRtaW4gLSB0aG91Z2ggdGhlIFJ1biBMaXN0IGFib3ZlIHdpbGwgZ2VuZXJhbGx5IGJlIG1vcmUgdXNlZnVsLlxyXG5cclxuPGJyPlxyXG5cclxuIyMgRGF0YSBNb2RlbFxyXG5cclxuRGphbmdvIERhdGEgV2l6YXJkIHByb3ZpZGVzIGEgbnVtYmVyIG9mIERqYW5nbyBtb2RlbHMgdGhhdCBoZWxwIHRyYWNrIHRoZSBpbXBvcnQgcHJvY2VzcywgYW5kIHByZXNlcnZlIGRhdGEgbWFwcGluZyBkZWNpc2lvbnMgZm9yIGZ1dHVyZSByZXVzZS4gIFdoaWxlIGEgKnNvdXJjZSogbW9kZWwgaXMgcmVxdWlyZWQsIHlvdXIgKnRhcmdldCogZGF0YSBtb2RlbChzKSBnZW5lcmFsbHkgZG8gbm90IGhhdmUgdG8gYmUgY2hhbmdlZCB0byBzdXBwb3J0IERhdGEgV2l6YXJkIGludGVncmF0aW9uLlxyXG5cclxuc3RlcCB8IGRlc2NyaXB0aW9uIHwgbW9kZWxcclxuLS0tLS18LS0tLS0tLS0tLS0tLXwtLS0tLS0tLVxyXG4wIHwgVXBsb2FkICoqc291cmNlKiogZmlsZSB8IENyZWF0ZSBgRmlsZVNvdXJjZWAgKG9yIGN1c3RvbSBzb3VyY2UgbW9kZWwpXHJcbjEgfCBTdGFydCBkYXRhIHdpemFyZCBydW4gfCBDcmVhdGUgYFJ1bmBcclxuMiB8IFNlbGVjdCBzZXJpYWxpemVyICgmIHRhcmdldCBtb2RlbCkgfCBVcGRhdGUgYFJ1bmBcclxuMyB8IE1hcCBjb2x1bW5zIHRvIGRhdGFiYXNlIGZpZWxkIG5hbWVzIHwgT25lIGBJZGVudGlmaWVyYCBwZXIgY29sdW1uLCBpZiBuZWVkZWRcclxuNCB8IE1hcCBjZWxsIHZhbHVlcyB0byBmb3JlaWduIGtleXMgfCBPbmUgYElkZW50aWZpZXJgIHBlciB1bmlxdWUgdmFsdWVcclxuNSB8IEltcG9ydCBkYXRhIGludG8gKip0YXJnZXQqKiBtb2RlbCB8IE9uZSBgUmVjb3JkYCArIG9uZSB0YXJnZXQgbW9kZWwgaW5zdGFuY2UgcGVyIHJvd1xyXG5cclxuVGhlIGBSdW5gIG1vZGVsIGluY2x1ZGVzIGEgW2dlbmVyaWMgZm9yZWlnbiBrZXldIHBvaW50aW5nIHRvIHRoZSBzb3VyY2UgbW9kZWwgKGUuZy4gYEZpbGVTb3VyY2VgLikgIEVhY2ggcm93IGluIHRoZSBzb3VyY2Ugc3ByZWFkc2hlZXQgd2lsbCBiZSBtYXBwZWQgdG8gYSBgUmVjb3JkYC4gIElmIHRoZSByb3cgd2FzIHN1Y2Nlc3NmdWxseSBpbXBvcnRlZCwgYSBuZXcgaW5zdGFuY2Ugb2YgdGhlIHRhcmdldCBkYXRhIG1vZGVsIHdpbGwgYmUgY3JlYXRlZCwgYW5kIHRoZSBgUmVjb3JkYCB3aWxsIGhhdmUgYSBnZW5lcmljIGZvcmVpZ24ga2V5IHBvaW50aW5nIHRvIGl0LiAgVGhlIGBJZGVudGlmaWVyYCBtb2RlbCBjb250YWlucyBubyBmb3JlaWduIGtleXMsIHNpbmNlIGlkZW50aWZpZXIgbWFwcGluZ3MgYXJlIHJldXNlZCBmb3Igc3Vic2VxdWVudCBpbXBvcnRzLiAgSW5zdGVhZCwgYSBzZXBhcmF0ZSBgUmFuZ2VgIG1vZGVsIHRyYWNrcyB0aGUgbG9jYXRpb24ocykgKHJvd3MvY29sdW1ucykgb2YgZWFjaCBgSWRlbnRpZmllcmAgaW4gZWFjaCBgUnVuYC5cclxuXHJcbk5vdGUgdGhhdCB0aGUgYWJvdmUgd29ya2Zsb3cganVzdCBkZXNjcmliZXMgdGhlIG1vc3QgY29tbW9uIHVzZSBjYXNlLiAgWW91IGNhbiBjcmVhdGUgW2N1c3RvbSBzZXJpYWxpemVyc10oI2N1c3RvbS1zZXJpYWxpemVycykgdGhhdCB1cGRhdGUgbW9yZSB0aGFuIG9uZSB0YXJnZXQgZGF0YSBtb2RlbCBwZXIgc3ByZWFkc2hlZXQgcm93LiAgQW5kIHlvdSBjYW4gc3BlY2lmeSBbY3VzdG9tIGRhdGEgc291cmNlc10oI2N1c3RvbS1kYXRhLXNvdXJjZXMpIHRoYXQgbWlnaHQgbm90IGJlIGEgc3ByZWFkc2hlZXQgb3IgZXZlbiBhIGZpbGUuXHJcblxyXG4jIyBDb21tYW5kLUxpbmUgSW50ZXJmYWNlXHJcblxyXG5EamFuZ28gRGF0YSBXaXphcmQgcHJvdmlkZXMgYSBzaW5nbGUgW21hbmFnZW1lbnQgY29tbWFuZF0sIGBydW53aXphcmRgLCB0aGF0IGNhbiBiZSB1c2VkIHRvIGluaXRpYXRlIHRoZSBgYXV0b2AgdGFzayBmcm9tIHRoZSBjb21tYW5kIGxpbmUuICBUaGlzIGNhbiBiZSB1c2VkIHRvIGZhY2lsaXRhdGUgYXV0b21hdGVkIHByb2Nlc3NpbmcsIGZvciBleGFtcGxlIGFzIHBhcnQgb2YgYSByZWd1bGFyIGNyb24gam9iLiAgTm90ZSB0aGF0IHRoZSBDTEkgZG9lcyBub3QgKGN1cnJlbnRseSkgc3VwcG9ydCBpbnRlcmFjdGl2ZWx5IG1hcHBpbmcgY29sdW1ucyBhbmQgaWRzLCBzbyB0aGVzZSBzaG91bGQgYmUgcHJlLW1hcHBlZCB1c2luZyB0aGUgd2ViIG9yIEpTT04gQVBJLlxyXG5cclxuVXNhZ2U6XHJcblxyXG5gYGBiYXNoXHJcbi4vbWFuYWdlLnB5IHJ1bndpemFyZCBteWFwcC5teW1vZGVsIDEyMyBcXFxyXG4gICAgLS1sb2FkZXIgbXlhcHAubG9hZGVycy5jdXN0b21sb2FkZXIgXFxcclxuICAgIC0tc2VyaWFsaXplciBteWFwcC5zZXJpYWxpemVyLmN1c3RvbXNlcmlhbGl6ZXIgXFxcclxuICAgIC0tdXNlcm5hbWUgbXl1c2VybmFtZVxyXG5gYGBcclxuXHJcblRoZSBiYXNpYyB1c2FnZSBpcyBzaW1pbGFyIHRvIHRoZSBbTmV3IFJ1biBBUEldKCNuZXctcnVuKS4gIE9ubHkgYSBjb250ZW50IHR5cGUgYW5kIG9iamVjdCBpZCBhcmUgcmVxdWlyZWQsIHdoaWxlIHRoZSBvdGhlciBhcmd1bWVudHMgd2lsbCBiZSBhdXRvLWRldGVjdGVkIGlmIHBvc3NpYmxlLiAgSW4gcGFydGljdWxhciwgeW91IG1heSB3YW50IHRvIHVzZSBbc2V0X2xvYWRlcigpXSgjY3VzdG9tLWxvYWRlcikgdG8gcHJlZGVmaW5lIHRoZSBkZWZhdWx0IGBsb2FkZXJgIGFuZCBgc2VyaWFsaXplcmAgZm9yIGFueSBtb2RlbHMgeW91IHBsYW4gdG8gdXNlIHdpdGggdGhlIENMSS5cclxuXHJcblRoZSBgcnVud2l6YXJkYCBjb21tYW5kIHdpbGwgY3JlYXRlIGEgbmV3IGBSdW5gIGFuZCBpbW1lZGlhdGVseSBzdGFydCB0aGUgYGF1dG9gIHRhc2suICBFcnJvcnMgd2lsbCBiZSBzaG93biBvbiB0aGUgY29uc29sZS5cclxuXHJcbiMjIEN1c3RvbSBTZXJpYWxpemVyc1xyXG5cclxuRGF0YSBXaXphcmQgdXNlcyBpbnN0YW5jZXMgb2YgRGphbmdvIFJFU1QgRnJhbWV3b3JrJ3MgW1NlcmlhbGl6ZXIgY2xhc3NdW01vZGVsU2VyaWFsaXplcl0gdG8gZGV0ZXJtaW5lIHRoZSBkZXN0aW5hdGlvbiBmaWVsZHMgb24gdGhlIHRhcmdldCBtb2RlbC4gIFNwZWNpZmljYWxseSwgdGhlIGRlZmF1bHQgc2VyaWFsaXplciBpcyBbTmF0dXJhbEtleU1vZGVsU2VyaWFsaXplcl0sIHdoaWNoIGlzIGJhc2VkIG9uIFtNb2RlbFNlcmlhbGl6ZXJdLlxyXG5cclxuWW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCBzZXJpYWxpemVyIGJ5IGNhbGxpbmcgYGRhdGFfd2l6YXJkLnJlZ2lzdGVyKClgIHdpdGggYSBuYW1lIGFuZCBhIHNlcmlhbGl6ZXIgY2xhc3MgaW5zdGVhZCBvZiBhIG1vZGVsIGNsYXNzLiAgTXVsdGlwbGUgc2VyaWFsaXplcnMgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgd2l6YXJkIHRvIHN1cHBvcnQgbXVsdGlwbGUgaW1wb3J0IGNvbmZpZ3VyYXRpb25zIGFuZCB0YXJnZXQgbW9kZWxzLiAgXHJcblxyXG5gYGBweXRob25cclxuIyBteWFwcC93aXphcmQucHlcclxuZnJvbSByZXN0X2ZyYW1ld29yayBpbXBvcnQgc2VyaWFsaXplcnNcclxuaW1wb3J0IGRhdGFfd2l6YXJkXHJcbmZyb20gLm1vZGVscyBpbXBvcnQgVGltZVNlcmllc1xyXG5cclxuXHJcbmNsYXNzIFRpbWVTZXJpZXNTZXJpYWxpemVyKHNlcmlhbGl6ZXJzLk1vZGVsU2VyaWFsaXplcik6XHJcbiAgICAjIChjdXN0b20gZmllbGRzIGhlcmUpXHJcbiAgICBjbGFzcyBNZXRhOlxyXG4gICAgICAgIG1vZGVsID0gVGltZVNlcmllc1xyXG4gICAgICAgIGZpZWxkcyA9ICdfX2FsbF9fJ1xyXG5cclxuICAgICAgICAjIE9wdGlvbmFsIC0gc2VlIG9wdGlvbnMgYmVsb3dcclxuICAgICAgICBkYXRhX3dpemFyZCA9IHtcclxuICAgICAgICAgICAgJ2hlYWRlcl9yb3cnOiAwLFxyXG4gICAgICAgICAgICAnc3RhcnRfcm93JzogMSxcclxuICAgICAgICAgICAgJ3Nob3dfaW5fbGlzdCc6IFRydWUsXHJcbiAgICAgICAgICAgICdpZG1hcCc6IGRhdGFfd2l6YXJkLmlkbWFwLmV4aXN0aW5nLFxyXG4gICAgICAgICAgICAnYXV0b19pbXBvcnRfdGFza3MnOiBbIGN1c3RvbSB0YXNrIGxpc3QgXSxcclxuICAgICAgICB9XHJcblxyXG4jIFVzZSBkZWZhdWx0IG5hbWUgJiBzZXJpYWxpemVyXHJcbmRhdGFfd2l6YXJkLnJlZ2lzdGVyKFRpbWVTZXJpZXMpXHJcblxyXG4jIFVzZSBjdXN0b20gbmFtZSAmIHNlcmlhbGl6ZXJcclxuZGF0YV93aXphcmQucmVnaXN0ZXIoXCJUaW1lIFNlcmllcyAtIEN1c3RvbSBTZXJpYWxpemVyXCIsIFRpbWVTZXJpZXNTZXJpYWxpemVyKVxyXG5gYGBcclxuXHJcbkF0IGxlYXN0IG9uZSBzZXJpYWxpemVyIG9yIG1vZGVsIHNob3VsZCBiZSByZWdpc3RlcmVkIGluIG9yZGVyIHRvIHVzZSB0aGUgd2l6YXJkLiAgTm90ZSB0aGUgdXNlIG9mIGEgaHVtYW4tZnJpZW5kbHkgc2VyaWFsaXplciBsYWJlbCB3aGVuIHJlZ2lzdGVyaW5nIGEgc2VyaWFsaXplci4gIFRoaXMgbmFtZSBzaG91bGQgYmUgdW5pcXVlIHRocm91Z2hvdXQgdGhlIHByb2plY3QsIGJ1dCBjYW4gYmUgY2hhbmdlZCBsYXRlciBvbiB3aXRob3V0IGJyZWFraW5nIGV4aXN0aW5nIGRhdGEuICAoVGhlIGNsYXNzIHBhdGggaXMgdXNlZCBhcyB0aGUgYWN0dWFsIGlkZW50aWZpZXIgYmVoaW5kIHRoZSBzY2VuZXMuKVxyXG5cclxuIyMjIFNlcmlhbGl6ZXIgT3B0aW9uc1xyXG5cclxuSW4gZ2VuZXJhbCwgY3VzdG9tIHNlcmlhbGl6ZXJzIGhhdmUgYWxsIHRoZSBjYXBhYmlsaXRpZXMgb2YgcmVndWxhciBbRGphbmdvIFJFU1QgRnJhbWV3b3JrIHNlcmlhbGl6ZXJzXVtzZXJpYWxpemVyc10sIGluY2x1ZGluZyBjdXN0b20gdmFsaWRhdGlvbiBydWxlcyBhbmQgdGhlIGFiaWxpdHkgdG8gcG9wdWxhdGUgbXVsdGlwbGUgdGFyZ2V0IG1vZGVscy4gIFdoaWxlIHRoZSBgcmVxdWVzdGAgY29udGV4dCBpcyBub3QgYXZhaWxhYmxlLCBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcnVuIChpbmNsdWRpbmcgdGhlIHVzZXIpIGNhbiBiZSByZXRyaWV2ZWQgdGhyb3VnaCB0aGUgYGRhdGFfd2l6YXJkYCBjb250ZXh0IGluc3RlYWQuXHJcblxyXG5XaGVuIG92ZXJyaWRpbmcgYSBzZXJpYWxpemVyIGZvciBhIFtuYXR1cmFsIGtleSBtb2RlbF1bbmF0dXJhbCBrZXlzXSwgYmUgc3VyZSB0byBleHRlbmQgW05hdHVyYWxLZXlNb2RlbFNlcmlhbGl6ZXJdLCBhcyBpbiBbdGhpcyBleGFtcGxlXVtuYXR1cmFsa2V5X3dpemFyZF0uICBJbiBvdGhlciBjYXNlcywgZXh0ZW5kIFtNb2RlbFNlcmlhbGl6ZXJdIChhcyBpbiB0aGUgZXhhbXBsZSBhYm92ZSkgb3IgdGhlIGJhc2UgW1NlcmlhbGl6ZXJdKHNlcmlhbGl6ZXJzKSBjbGFzcy5cclxuXHJcbkN1c3RvbSBzZXJpYWxpemVycyBjYW4gYmUgdXNlZCB0byBzdXBwb3J0IFtFbnRpdHktQXR0cmlidXRlLVZhbHVlXSBzcHJlYWRzaGVldHMgd2hlcmUgdGhlIGF0dHJpYnV0ZSBuYW1lcyBhcmUgc3BlY2lmaWVkIGFzIGFkZGl0aW9uYWwgY29sdW1ucy4gIFRvIHN1cHBvcnQgdGhpcyBzY2VuYXJpbywgdGhlIGBFbnRpdHlgIHNlcmlhbGl6ZXIgc2hvdWxkIGluY2x1ZGUgYSBuZXN0ZWQgYFZhbHVlYCBzZXJpYWxpemVyIHdpdGggYG1hbnk9VHJ1ZWAsIGFuZCB0aGUgYFZhbHVlYCBzZXJpYWxpemVyIHNob3VsZCBoYXZlIGEgZm9yZWlnbiBrZXkgdG8gdGhlIGBBdHRyaWJ1dGVgIHRhYmxlLCBhcyBpbiBbdGhpcyBleGFtcGxlXVtlYXZfd2l6YXJkXS5cclxuXHJcbkRhdGEgV2l6YXJkIGFsc28gc3VwcG9ydHMgYWRkaXRpb25hbCBjb25maWd1cmF0aW9uIGJ5IHNldHRpbmcgYSBgZGF0YV93aXphcmRgIGF0dHJpYnV0ZSBvbiB0aGUgYE1ldGFgIGNsYXNzIG9mIHRoZSBzZXJpYWxpemVyLiAgVGhlIGZvbGxvd2luZyBvcHRpb25zIGFyZSBzdXBwb3J0ZWQuXHJcblxyXG5uYW1lIHwgZGVmYXVsdCB8IG5vdGVzXHJcbi0tfC0tfC0tXHJcbmBoZWFkZXJfcm93YCB8IDAgfCBTcGVjaWZpZXMgdGhlIGZpcnN0IHJvdyBvZiB0aGUgc3ByZWFkc2hlZXQgdGhhdCBjb250YWlucyBjb2x1bW4gaGVhZGVycy4gIElmIHRoaXMgaXMgZ3JlYXRlciB0aGFuIDAsIHRoZSBzcGFjZSBhYm92ZSB0aGUgY29sdW1uIGhlYWRlcnMgd2lsbCBiZSBzY2FubmVkIGZvciBhbnl0aGluZyB0aGF0IGxvb2tzIGxpa2UgYSBvbmUtb2ZmIFwiZ2xvYmFsXCIgdmFsdWUgaW50ZW5kZWQgdG8gYmUgYXBwbGllZCB0byBldmVyeSByb3cgaW4gdGhlIGltcG9ydGVkIGRhdGEuXHJcbmBzdGFydF9yb3dgIHwgMSB8IFRoZSBmaXJzdCByb3cgb2YgZGF0YS4gIElmIHRoaXMgaXMgZ3JlYXRlciB0aGFuIGBoZWFkZXJfcm93ICsgMWAsIHRoZSBjb2x1bW4gaGVhZGVycyB3aWxsIGJlIGFzc3VtZWQgdG8gc3BhbiBtdWx0aXBsZSByb3dzLiAgQSBjb21tb24gY2FzZSBpcyB3aGVuIEVBViBwYXJhbWV0ZXIgbmFtZXMgYXJlIG9uIHRoZSBmaXJzdCByb3cgYW5kIHVuaXRzIGFyZSBvbiB0aGUgc2Vjb25kLlxyXG5gc2hvd19pbl9saXN0YCB8IGBUcnVlYCB8IElmIHNldCB0byBgRmFsc2VgLCB0aGUgc2VyaWFsaXplciB3aWxsIGJlIGF2YWlsYWJsZSB0aHJvdWdoIHRoZSBBUEkgYnV0IG5vdCBsaXN0ZWQgaW4gdGhlIHdpemFyZCB2aWV3cy4gIFRoaXMgaXMgdXNlZnVsIGlmIHlvdSBoYXZlIGEgc2VyaWFsaXplciB0aGF0IHNob3VsZCBvbmx5IGJlIHVzZWQgZHVyaW5nIGZ1bGx5IGF1dG9tYXRlZCB3b3JrZmxvd3MuXHJcbmBpZG1hcGAgfCBbYElETUFQYCBzZXR0aW5nXSgjaWRzKSB8IENhbiBiZSBhbnkgb2YgYGRhdGFfd2l6YXJkLmlkbWFwLipgIG9yIGEgY3VzdG9tIGZ1bmN0aW9uLiAgVW5saWtlIHRoZSBgSURNQVBgIHNldHRpbmcsIHRoaXMgc2hvdWxkIGFsd2F5cyBiZSBhbiBhY3R1YWwgZnVuY3Rpb24gYW5kIG5vdCBhbiBpbXBvcnQgcGF0aC5cclxuYGF1dG9faW1wb3J0X3Rhc2tzYCB8IFtgQVVUT19JTVBPUlRfVEFTS1NgIHNldHRpbmddKCNhdXRvKSB8IEEgbGlzdCBvZiBpbXBvcnQgcGF0aHMgdG8gZnVuY3Rpb25zIHJlZ2lzdGVyZWQgd2l0aCBgQGRhdGFfd2l6YXJkLndpemFyZF90YXNrYCAoc2VlIFtDdXN0b20gVGFza3NdKCNjdXN0b20tdGFza3MpLlxyXG5cclxuIyMgQ3VzdG9tIERhdGEgU291cmNlc1xyXG5cclxuRGphbmdvIERhdGEgV2l6YXJkIHVzZXMgW0l0ZXJUYWJsZV0gdG8gZGV0ZXJtaW5lIHRoZSBzb3VyY2UgY29sdW1ucyBwcmVzZW50IG9uIHRoZSBzcHJlYWRzaGVldCBvciBvdGhlciBkYXRhIHNvdXJjZS4gIERqYW5nbyBEYXRhIFdpemFyZCBjYW4gdXNlIGFueSBEamFuZ28gbW9kZWwgaW5zdGFuY2UgYXMgYSBzb3VyY2UgZm9yIGl0cyBkYXRhLCBwcm92aWRlZCB0aGVyZSBpcyBhIHJlZ2lzdGVyZWQgbG9hZGVyIHRoYXQgY2FuIGNvbnZlcnQgdGhlIHNvdXJjZSBtb2RlbCBpbnRvIGEgW0l0ZXIgY2xhc3NdW0l0ZXJUYWJsZV0uICBEYXRhIFdpemFyZCBwcm92aWRlcyB0d28gb3V0LW9mLXRoZSB0aGUgYm94IGxvYWRlcnMsIFtGaWxlTG9hZGVyXSBhbmQgW1VSTExvYWRlcl0sIHRoYXQgY2FuIGJlIHVzZWQgd2l0aCB0aGUgcHJvdmlkZWQgbW9kZWxzIGluIGBkYXRhX3dpemFyZC5zb3VyY2VzYCAoYEZpbGVTb3VyY2VgIGFuZCBgVVJMU291cmNlYCwgcmVzcGVjdGl2ZWx5KS5cclxuXHJcbiMjIyBFeHRlbmRpbmcgRmlsZUxvYWRlclxyXG5UaGUgZGVmYXVsdCBgRmlsZUxvYWRlcmAgY2FuIGJlIHVzZWQgd2l0aCBhbnkgRGphbmdvIG1vZGVsIHdpdGggYSBgRmlsZUZpZWxkYCBuYW1lZCBgZmlsZWAuICBZb3UgY2FuIHVzZSBhIG1vZGVsIHdpdGggYSBkaWZmZXJlbnQgYEZpbGVGaWVsZGAgbmFtZSBieSBjcmVhdGluZyBhIHN1YmNsYXNzIG9mIGBkYXRhX3dpemFyZC5sb2FkZXJzLkZpbGVMb2FkZXJgIGFuZCBzZXR0aW5nIGl0IGFzIHRoZSBsb2FkZXIgZm9yIHlvdXIgbW9kZWwuXHJcblxyXG5gYGBweXRob25cclxuIyBteWFwcC9tb2RlbHMucHlcclxuZnJvbSBkamFuZ28uZGIgaW1wb3J0IG1vZGVsc1xyXG5cclxuY2xhc3MgRmlsZU1vZGVsKG1vZGVscy5Nb2RlbCk6XHJcbiAgICBzcHJlYWRzaGVldCA9IG1vZGVscy5GaWxlRmllbGQodXBsb2FkX3RvPSdzcHJlYWRzaGVldHMnKVxyXG5gYGBcclxuXHJcbmBgYHB5dGhvblxyXG4jIG15YXBwL2xvYWRlcnMucHlcclxuZnJvbSBkYXRhX3dpemFyZCBpbXBvcnQgbG9hZGVyc1xyXG5cclxuY2xhc3MgRmlsZUxvYWRlcihsb2FkZXJzLkZpbGVMb2FkZXIpOlxyXG4gICAgZmlsZV9hdHRyID0gJ3NwcmVhZHNoZWV0J1xyXG5gYGBcclxuXHJcbmBgYHB5dGhvblxyXG4jIG15YXBwL3dpemFyZC5weVxyXG5pbXBvcnQgZGF0YV93aXphcmRcclxuZnJvbSAubW9kZWxzIGltcG9ydCBGaWxlTW9kZWxcclxuXHJcbmRhdGFfd2l6YXJkLnNldF9sb2FkZXIoRmlsZU1vZGVsLCBcIm15YXBwLmxvYWRlcnMuRmlsZUxvYWRlclwiKVxyXG5gYGBcclxuXHJcbklmIHlvdSBoYXZlIGEgZ2VuZXJpYyBsb2FkZXIgdGhhdCBjYW4gd29yayB3aXRoIG11bHRpcGxlIHNvdXJjZSBtb2RlbHMsIHlvdSBjYW4gYWxzbyBzZXQgdGhlIGRlZmF1bHQgbG9hZGVyIGdsb2JhbGx5OlxyXG5cclxuYGBgcHl0aG9uXHJcbiMgbXlhcHAvc2V0dGluZ3MucHlcclxuREFUQV9XSVpBUkQgPSB7XHJcbiAgICAnTE9BREVSJzogJ215YXBwLmxvYWRlcnMuRmlsZUxvYWRlcidcclxufVxyXG5gYGBcclxuXHJcbllvdSBzaG91bGQgcmVnaXN0ZXIgYSBjdXN0b20gYE1vZGVsQWRtaW5gIGNsYXNzIHRvIGFkZCB0aGUgSW1wb3J0IGFjdGlvbiBpbiB0aGUgYWRtaW4gcGFuZWwgZm9yIHlvdXIgbW9kZWwuXHJcblxyXG5gYGBweXRob25cclxuIyBteWFwcC9hZG1pbi5weVxyXG5mcm9tIGRqYW5nby5jb250cmliIGltcG9ydCBhZG1pblxyXG5mcm9tIGRhdGFfd2l6YXJkLmFkbWluIGltcG9ydCBJbXBvcnRBY3Rpb25Nb2RlbEFkbWluXHJcblxyXG5mcm9tIC5tb2RlbHMgaW1wb3J0IEZpbGVNb2RlbFxyXG5cclxuXHJcbkBhZG1pbi5yZWdpc3RlcihGaWxlTW9kZWwpXHJcbmNsYXNzIEZpbGVNb2RlbEFkbWluKEltcG9ydEFjdGlvbk1vZGVsQWRtaW4pOlxyXG4gICAgcGFzc1xyXG5gYGBcclxuICAgIFxyXG4jIyMgQ3VzdG9tIExvYWRlclxyXG5UaGUgZGVmYXVsdCBsb2FkZXJzIHN1cHBvcnQgYW55IGZpbGUgZm9ybWF0IHN1cHBvcnRlZCBieSBbSXRlclRhYmxlXSAoRXhjZWwsIENTViwgSlNPTiwgYW5kIFhNTCkuICBBZGRpdGlvbmFsIGZvcm1hdHMgY2FuIGJlIGludGVncmF0aW5nIGJ5IGNyZWF0aW5nIGEgW2N1c3RvbSBJdGVyVGFibGUgY2xhc3NdW2N1c3RvbS1pdGVyXSBhbmQgdGhlbiByZWdpc3RlcmluZyBpdCB3aXRoIHRoZSB3aXphcmQuICBGb3IgZXhhbXBsZSwgdGhlIFtDbGltYXRhIFZpZXdlcl0gdXNlcyBEamFuZ28gRGF0YSBXaXphcmQgdG8gaW1wb3J0IGRhdGEgZnJvbSBbY2xpbWF0YV0ncyBJdGVyVGFibGUtYmFzZWQgd2ViIHNlcnZpY2UgY2xpZW50LiAgVG8gZG8gdGhpcywgZXh0ZW5kIGBkYXRhX3dpemFyZC5sb2FkZXJzLkJhc2VMb2FkZXJgIHdpdGggYSBjdXN0b20gYGxvYWRfaXRlcigpYCBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIGRhdGEgZnJvbSBJdGVyVGFibGUsIGFzIGluIHRoZSBleGFtcGxlIGJlbG93LlxyXG5cclxuSXQgaXMgbGlrZWx5IHRoYXQgeW91IHdpbGwgd2FudCB0byB1c2UgYSBzcGVjaWZpYyBzZXJpYWxpemVyIHdpdGggeW91ciBjdXN0b20gbG9hZGVyLiAgSWYgc28sIG92ZXJyaWRlIGBkZWZhdWx0X3NlcmlhbGl6ZXJgIG9yIGBnZXRfc2VyaWFsaXplcl9uYW1lKClgIG9uIHRoZSBsb2FkZXIuICBCeSBkZWZhdWx0LCB0aGVzZSByZXR1cm4gYE5vbmVgLCB3aGljaCByZXF1aXJlcyB0aGUgdXNlciB0byBzcGVjaWZ5IHRoZSBzZXJpYWxpemVyIHdoZW4gY3JlYXRpbmcgb3IgZXhlY3V0aW5nIHRoZSBgUnVuYC5cclxuXHJcbmBgYHB5dGhvblxyXG4jIG15YXBwL21vZGVscy5weVxyXG5mcm9tIGRqYW5nby5kYiBpbXBvcnQgbW9kZWxzXHJcblxyXG5jbGFzcyBDdXN0b21JdGVyU291cmNlKG1vZGVscy5Nb2RlbCk6XHJcbiAgICBzb21lX29wdGlvbiA9IG1vZGVscy5UZXh0RmllbGQoKVxyXG5gYGBcclxuXHJcbmBgYHB5dGhvblxyXG4jIG15YXBwL2xvYWRlcnMucHlcclxuZnJvbSBkYXRhX3dpemFyZCBpbXBvcnQgbG9hZGVyc1xyXG5mcm9tIC5pdGVyIGltcG9ydCBDdXN0b21JdGVyXHJcblxyXG5jbGFzcyBDdXN0b21JdGVyTG9hZGVyKGxvYWRlcnMuQmFzZUxvYWRlcik6XHJcbiAgICBkZWZhdWx0X3NlcmlhbGl6ZXIgPSAnbXlkYXRhYXBwLndpemFyZC5DdXN0b21TZXJpYWxpemVyJ1xyXG4gICAgZGVmIGxvYWRfaXRlcihzZWxmKTpcclxuICAgICAgICBzb3VyY2UgPSBzZWxmLnJ1bi5jb250ZW50X29iamVjdFxyXG4gICAgICAgIHJldHVybiBDdXN0b21JdGVyKHNvbWVfb3B0aW9uPXNvdXJjZS5zb21lX29wdGlvbilcclxuYGBgXHJcblxyXG5gYGBweXRob25cclxuIyBteWFwcC93aXphcmQucHlcclxuaW1wb3J0IGRhdGFfd2l6YXJkXHJcbmZyb20gLm1vZGVscyBpbXBvcnQgQ3VzdG9tSXRlclNvdXJjZVxyXG5cclxuZGF0YV93aXphcmQuc2V0X2xvYWRlcihDdXN0b21JdGVyU291cmNlLCBcIm15YXBwLmxvYWRlcnMuQ3VzdG9tSXRlckxvYWRlclwiKVxyXG5gYGBcclxuXHJcbiMjIEN1c3RvbSBUYXNrc1xyXG5cclxuSXQgaXMgcG9zc2libGUgdG8gb3ZlcnJpZGUgdGhlIHNlcXVlbmNlIG9mIHRhc2tzIGV4Y2VjdXRlZCBieSB0aGUgW2F1dG9dKCNhdXRvKSB0YXNrLCB0byByZW1vdmUgc3RlcHMgb3IgYWRkIG5ldyBvbmVzLiAgVGhlIGxpc3QgY2FuIGJlIG92ZXJyaWRkZW4gZ2xvYmFsbHkgKGJ5IHNldHRpbmcgYERBVEFfV0laQVJEWydBVVRPX0lNUE9SVF9UQVNLUyddYCksIG9yIG9uIGEgcGVyLXNlcmlhbGl6ZXIgYmFzaXMgKGJ5IHNldHRpbmcgYE1ldGEuZGF0YV93aXphcmRbJ2F1dG9faW1wb3J0X3Rhc2tzJ11gKS5cclxuXHJcbkVhY2ggY3VzdG9tIHRhc2sgZnVuY3Rpb24gc2hvdWxkIGJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgYEBkYXRhX3dpemFyZC53aXphcmRfdGFza2AgZGVjb3JhdG9yIHRvIGNvbmZpZ3VyZSBhIGxhYmVsIGFuZCBvcHRpb25hbGx5IHRoZSBBUEkgcGF0aCByZWxhdGl2ZSB0byBgL2RhdGF3aXphcmQvW2lkXS9gLiAgVGhlIGFyZ3VtZW50cyB0byB0aGUgZGVjb3JhdG9yIGFuZCB0aGUgZnVuY3Rpb24gZGV0ZXJtaW5lIHRoZSB0YXNrIHR5cGUuXHJcblxyXG5cclxuIyMjIENoZWNrIFRhc2tzXHJcblxyXG5gYGBweXRob25cclxuQGRhdGFfd2l6YXJkLndpemFyZF90YXNrKGxhYmVsPVwiQ3VzdG9tIENoZWNrXCIsIHVybF9wYXRoPUZhbHNlKVxyXG5kZWYgY3VzdG9tX2NoZWNrKHJ1bik6XHJcbiAgICBpZiBub3Qgc29tZV9jb25kaXRpb25fc2F0aXNmaWVkKHJ1bik6XHJcbiAgICAgICAgcmFpc2UgZGF0YV93aXphcmQuSW5wdXROZWVkZWQoXCJjdXN0b21pbnB1dFwiKVxyXG5gYGBcclxuXHJcbkNoZWNrIHRhc2tzIHZhbGlkYXRlIHdoZXRoZXIgc29tZSBjb25kaXRpb24gaXMgc2F0aXNmaWVkLCByZWRpcmVjdGluZyB0byBhbiBJbnB1dCB0YXNrIGlmIG5lZWRlZC4gIGB1cmxfcGF0aGAgaXMgdXN1YWxseSBzZXQgdG8gRmFsc2UgdG8gZGlzYWJsZSB0aGUgSFRUUCBlbmRwb2ludC4gIFRoZSB0YXNrIGxhYmVsIHdpbGwgYmUgc2hvd24gaW4gdGhlIHByb2dyZXNzIGJhciAoaWYgdGhlIHRhc2sgdGFrZXMgbW9yZSB0aGFuIGEgY291cGxlIHNlY29uZHMgdG8gcnVuKS5cclxuXHJcbiMjIyBJbnB1dCBUYXNrc1xyXG5cclxuYGBgcHl0aG9uXHJcbkBkYXRhX3dpemFyZC53aXphcmRfdGFzayhsYWJlbD1cIkN1c3RvbSBJbnB1dFwiLCB1cmxfcGF0aD1cImN1c3RvbWlucHV0XCIpXHJcbmRlZiBjdXN0b21faW5wdXQocnVuKTpcclxuICAgcmV0dXJuIHtcInNvbWVfdGVtcGxhdGVfY29udGV4dFwiOiBbXX1cclxuYGBgXHJcblxyXG5JbnB1dCB0YXNrcyBlbmFibGUgdGhlIHVzZXIgdG8gcHJvdmlkZSBmZWVkYmFjayB0byBndWlkZSB0aGUgd2l6YXJkLiAgVGhleSBzaG91bGQgaGF2ZSBhIGB1cmxfcGF0aGAgKHdoaWNoIHdpbGwgZGVmYXVsdCB0byB0aGUgZnVuY3Rpb24gbmFtZSkgYW5kIGEgY29ycmVzcG9uZGluZyB0ZW1wbGF0ZSAoZS5nLiBgZGF0YV93aXphcmQvcnVuX2N1c3RvbWlucHV0Lmh0bWxgKS4gIFRoZSBjb250ZXh0IHJldHVybmVkIGJ5IHRoZSB0YXNrIHdpbGwgYmUgaW4gdGhlIHRlbXBsYXRlIHVuZGVyIHRoZSBgcmVzdWx0YCB2YXJpYWJsZS4gIFRoZSB0ZW1wbGF0ZSB0eXBpY2FsbHkgZWl0aGVyIHJlbmRlcnMgYSBmb3JtIHdpdGggdGhlIG5lZWRlZCBpbnB1dHMsIG9yIChpZiBhbGwgaW5wdXRzIGhhdmUgYmVlbiBlbnRlcmVkKSBhIHN1bW1hcnkgd2l0aCB0aGUgb3B0aW9uIHRvIHJlc3RhcnQgdGhlIGF1dG8gdGFzay5cclxuXHJcbiMjIyBGb3JtIFByb2Nlc3NpbmcgVGFza3NcclxuXHJcbmBgYHB5dGhvblxyXG5AZGF0YV93aXphcmQud2l6YXJkX3Rhc2sobGFiZWw9XCJDdXN0b20gSW5wdXRcIiwgdXJsX3BhdGg9XCJjdXN0b21zYXZlXCIpXHJcbmRlZiBjdXN0b21fc2F2ZShydW4sIHBvc3Q9e30pOlxyXG4gICBzb21lX3NhdmVfbWV0aG9kKHJ1biwgcG9zdClcclxuICAgcmV0dXJuIHtcclxuICAgICAgICoqY3VzdG9tX2lucHV0KHJ1biksXHJcbiAgICAgICBcImN1cnJlbnRfbW9kZVwiOiBcImN1c3RvbWlucHV0XCIsXHJcbiAgIH1cclxuYGBgXHJcblxyXG5Gb3JtIFByb2Nlc3NpbmcgVGFza3MgcHJvY2VzcyB0aGUgZm9ybSBzdWJtaXR0ZWQgZnJvbSBhIHByaW9yIGlucHV0IHRhc2suICBSZWdpc3RyYXRpb24gaXMgc2ltaWxhciB0byBJbnB1dCBUYXNrcyBleGNlcHQgdGhlIGZ1bmN0aW9uIGl0c2VsZiBzaG91bGQgYWNjZXB0IGFuIG9wdGlvbmFsIGBwb3N0YCBrd2FyZy4gIEZvcm0gUHJvY2Vzc2luZyB0YXNrcyBzaG91bGQgYmUgcmVnaXN0ZXJlZCB3aXRoIGB1cmxfcGF0aGAsIGFuZCByZWRpcmVjdCBiYWNrIHRvIHRoZSBpbnB1dCB0YXNrIChieSBzZXR0aW5nIGBjdXJyZW50X21vZGVgIG9uIHRoZSByZXNwb25zZSkuXHJcblxyXG4jIyMgQ3VzdG9tIEF1dG8gVGFza3NcclxuXHJcbkluIHZlcnkgYWR2YW5jZWQgdXNlIGNhc2VzLCBpdCBtaWdodCBiZSBuZWNlc3NhcnkgdG8gZ2VuZXJhdGUgdGhlIGxpc3Qgb2YgdGFza3MgZHluYW1pY2FsbHkgZGVwZW5kaW5nIG9uIGEgbnVtYmVyIG9mIGZhY3RvcnMuICBJbiB0aGF0IGNhc2UsIGl0IGlzIHBvc3NpYmxlIHRvIGRlZmluZSBhIGZ1bGx5IGN1c3RvbSBhdXRvIHRhc2s6XHJcblxyXG5gYGBweXRob25cclxuQGRhdGFfd2l6YXJkLndpemFyZF90YXNrKGxhYmVsPVwiQ3VzdG9tIFdvcmtmbG93XCIsIHVybF9wYXRoPVwiY3VzdG9tYXV0b1wiLCB1c2VfYXN5bmM9VHJ1ZSlcclxuZGVmIGN1c3RvbV9hdXRvKHJ1bik6XHJcbiAgICB0YXNrX2xpc3QgPSBzb21laG93X2RldGVybWluZV90YXNrcyhydW4pXHJcbiAgICByZXR1cm4gcnVuLnJ1bl9hbGwodGFza19saXN0KVxyXG5gYGBcclxuXHJcblJlZ2lzdHJhdGlvbiBpcyBzaW1pbGFyIGFzIHRoYXQgZm9yIG90aGVyIHRhc2tzIHdpdGggdGhlIGFkZGl0aW9uIG9mIHRoZSBgdXNlX2FzeW5jYCBrZXl3b3JkLCB3aGljaCBmYWNpbGl0YXRlcyBiYWNrZ3JvdW5kIHByb2Nlc3NpbmcgdmlhIHRoZSBjb25maWd1cmVkIHRhc2sgYmFja2VuZC5cclxuXHJcbkluIGdlbmVyYWwsIHRoZSB0YXNrcyBpbiBhbiBhdXRvbWF0ZWQgdGFzayBsaXN0IHNob3VsZCBiZSBjaGVjayB0YXNrcyBvciBvdGhlciBhdXRvIHRhc2tzLiAgSW5wdXQgYW5kIEZvcm0gUHJvY2Vzc2luZyB0YXNrcyBzaG91bGQgYmUgZXhlY3V0ZWQgb3V0c2lkZSBvZiB0aGUgYXV0b21hdGVkIGZsb3cuXHJcblxyXG4jIyBUYXNrIEJhY2tlbmRzXHJcblxyXG5Bbnkgb2YgdGhlIGZvbGxvd2luZyBiYWNrZW5kcyBjYW4gYmUgY29uZmlndXJlZCB3aXRoIHZpYSB0aGUgYEJBQ0tFTkRgIHNldHRpbmc6XHJcblxyXG5gYGBweXRob25cclxuIyBteXByb2plY3Qvc2V0dGluZ3MucHlcclxuXHJcbkRBVEFfV0laQVJEID0ge1xyXG4gICBcIkJBQ0tFTkRcIjogXCJkYXRhX3dpemFyZC5iYWNrZW5kcy50aHJlYWRpbmdcIiAgIyBEZWZhdWx0XHJcbiAgICAgICAgICAgICAgXCJkYXRhX3dpemFyZC5iYWNrZW5kcy5pbW1lZGlhdGVcIlxyXG4gICAgICAgICAgICAgIFwiZGF0YV93aXphcmQuYmFja2VuZHMuY2VsZXJ5XCJcclxufVxyXG5gYGBcclxuXHJcbiMjIyBgZGF0YV93aXphcmQuYmFja2VuZHMudGhyZWFkaW5nYFxyXG5cclxuVGhlIGB0aHJlYWRpbmdgIGJhY2tlbmQgY3JlYXRlcyBhIHNlcGFyYXRlIHRocmVhZCBmb3IgbG9uZy1ydW5uaW5nIGFzeW5jaHJvbm91cyB0YXNrcyAoaS5lLiBgYXV0b2AgYW5kIGBkYXRhYCkuICBUaGUgdGhyZWFkaW5nIGJhY2tlbmQgbGV2ZXJhZ2VzIHRoZSBEamFuZ28gY2FjaGUgdG8gcGFzcyByZXN1bHRzIGJhY2sgdG8gdGhlIHN0YXR1cyBBUEkuICBUaGlzIGlzIHRoZSBkZWZhdWx0IGJhY2tlbmQsIGJ1dCBpdCBpcyBzdGlsbCBhIGdvb2QgaWRlYSB0byBzZXQgaXQgZXhwbGljaXRseS5cclxuXHJcbiMjIyBgZGF0YV93aXphcmQuYmFja2VuZHMuaW1tZWRpYXRlYFxyXG5cclxuVGhlIGBpbW1lZGlhdGVgIGJhY2tlbmQgY29tcGxldGVzIGFsbCBwcm9jZXNzaW5nIGJlZm9yZSByZXR1cm5pbmcgYSByZXN1bHQgdG8gdGhlIGNsaWVudCwgZXZlbiBmb3IgdGhlIG90aGVyd2lzZSBcImFzeW5jaHJvbm91c1wiIHRhc2tzIChgYXV0b2AgYW5kIGBkYXRhYCkuICBUaGlzIGJhY2tlbmQgaXMgc3VpdGFibGUgZm9yIHNtYWxsIHNwcmVhZHNoZWV0cywgb3IgZm9yIHdvcmtpbmcgYXJvdW5kIHRocmVhZGluZyBpc3N1ZXMuICBUaGlzIGJhY2tlbmQgbWFpbnRhaW5zIG1pbmltYWwgc3RhdGUsIGFuZCBpcyBub3QgcmVjb21tZW5kZWQgZm9yIHVzZSBjYXNlcyBpbnZvbHZpbmcgbGFyZ2Ugc3ByZWFkc2hlZXRzIG9yIG11bHRpcGxlIHNpbXVsdGFub3VzIGltcG9ydCBwcm9jZXNzZXMuXHJcblxyXG4jIyMgYGRhdGFfd2l6YXJkLmJhY2tlbmRzLmNlbGVyeWBcclxuXHJcblRoZSBgY2VsZXJ5YCBiYWNrZW5kIGxldmVyYWdlcyBbQ2VsZXJ5XSB0byBoYW5kbGUgYXN5bmNocm9ub3VzIHRhc2tzLCBhbmQgaXMgdXN1YWxseSB1c2VkIHdpdGggW1JlZGlzXSBhcyB0aGUgbWVtb3J5IHN0b3JlLlxyXG5UaGVzZSBhZGRpdGlvbmFsIGRlcGVuZGVuY2llcyBhcmUgbm90IGluc3RhbGxlZCB3aXRoIERqYW5nbyBEYXRhIFdpemFyZCBieSBkZWZhdWx0LiAgSWYgeW91IHdhbnQgdG8gdXNlIHRoaXMgYmFja2VuZCwgYmUgc3VyZSB0byBjb25maWd1cmUgdGhlc2UgbGlicmFyaWVzIGZpcnN0IG9yIHRoZSBSRVNUIEFQSSBtYXkgbm90IHdvcmsgYXMgZXhwZWN0ZWQuICBZb3UgY2FuIHVzZSB0aGVzZSBzdGVwcyBvbiBVYnVudHU6XHJcblxyXG5gYGBiYXNoXHJcbiMgSW5zdGFsbCByZWRpcyBhbmQgY2VsZXJ5XHJcbnN1ZG8gYXB0LWdldCBpbnN0YWxsIHJlZGlzLXNlcnZlclxyXG5waXAgaW5zdGFsbCBjZWxlcnkgcmVkaXNcclxuYGBgXHJcblxyXG5PbmNlIFJlZGlzIGlzIGluc3RhbGxlZCwgY29uZmlndXJlIHRoZSBmb2xsb3dpbmcgZmlsZXMgaW4geW91ciBwcm9qZWN0OlxyXG5gYGBweXRob25cclxuIyBteXByb2plY3Qvc2V0dGluZ3MucHlcclxuREFUQV9XSVpBUkQge1xyXG4gICAgJ0JBQ0tFTkQnOiAnZGF0YV93aXphcmQuYmFja2VuZHMuY2VsZXJ5J1xyXG59XHJcbkNFTEVSWV9SRVNVTFRfQkFDS0VORCA9IEJST0tFUl9VUkwgPSAncmVkaXM6Ly9sb2NhbGhvc3Q6NjM3OS8xJ1xyXG5cclxuIyBteXByb2plY3QvY2VsZXJ5LnB5XHJcbmZyb20gX19mdXR1cmVfXyBpbXBvcnQgYWJzb2x1dGVfaW1wb3J0XHJcbmZyb20gY2VsZXJ5IGltcG9ydCBDZWxlcnlcclxuZnJvbSBkamFuZ28uY29uZiBpbXBvcnQgc2V0dGluZ3NcclxuYXBwID0gQ2VsZXJ5KCdteXByb2plY3QnKVxyXG5hcHAuY29uZmlnX2Zyb21fb2JqZWN0KCdkamFuZ28uY29uZjpzZXR0aW5ncycpXHJcbmFwcC5hdXRvZGlzY292ZXJfdGFza3MobGFtYmRhOiBzZXR0aW5ncy5JTlNUQUxMRURfQVBQUylcclxuXHJcbiMgbXlwcm9qZWN0L19faW5pdF9fLnB5XHJcbmZyb20gLmNlbGVyeSBpbXBvcnQgYXBwIGFzIGNlbGVyeV9hcHBcclxuYGBgXHJcblxyXG5GaW5hbGx5LCBydW4gY2VsZXJ5IHdpdGggYGNlbGVyeSAtQSBteXByb2plY3RgLiAgWW91IG1heSB3YW50IHRvIHVzZSBjZWxlcnkncyBbZGFlbW9uaXphdGlvbl0gdG8ga2VlcCB0aGUgcHJvY2VzcyBydW5uaW5nIGluIHRoZSBiYWNrZ3JvdW5kLiAgQW55IHRpbWUgeW91IGNoYW5nZSB5b3VyIHNlcmlhbGl6ZXIgcmVnaXN0cmF0aW9uLCBiZSBzdXJlIHRvIHJlbG9hZCBjZWxlcnkgaW4gYWRkaXRpb24gdG8gcmVzdGFydGluZyB0aGUgRGphbmdvIFdTR0kgaW5zdGFuY2UuXHJcblxyXG4+IE5vdGUgdGhhdCB0aGUgcmVxdWlyZW1lbnQgZm9yIGFuIGV4dHJhIGRhZW1vbiBtZWFucyB0aGlzIGJhY2tlbmQgY2FuIGJyZWFrIG1vcmUgZWFzaWx5IGFmdGVyIGEgc2VydmVyIHJlc3RhcnQuICBFdmVuIHdvcnNlLCB5b3UgbWF5IG5vdCBub3RpY2UgdGhhdCB0aGUgYmFja2VuZCBpcyBkb3duIGZvciBzZXZlcmFsIG1vbnRocyAoZS5nLiB1bnRpbCBhIHVzZXIgdHJpZXMgdG8gaW1wb3J0IGEgc3ByZWFkc2hlZXQpLiAgRm9yIHRoaXMgcmVhc29uLCAqKndlIHJlY29tbWVuZCB1c2luZyBvbmUgb2YgdGhlIG90aGVyIGJhY2tlbmRzKiogdW5sZXNzIHlvdSBhcmUgYWxyZWFkeSB1c2luZyBjZWxlcnkgZm9yIG90aGVyIGJhY2tncm91bmQgcHJvY2Vzc2luZyB0YXNrcy5cclxuXHJcbiMjIHdxIEZyYW1ld29yayBpbnRlZ3JhdGlvblxyXG5cclxuVGhlIERqYW5nbyBEYXRhIFdpemFyZCBoYXMgYnVpbHQtaW4gc3VwcG9ydCBmb3IgaW50ZWdyYXRpb24gd2l0aCB0aGUgW3dxIGZyYW1ld29ya10uICBPbiB0aGUgc2VydmVyLCBjb25maWd1cmF0aW9uIGlzIG1vc3RseSB0aGUgc2FtZSwgZXhjZXB0IHRoYXQgeW91IGRvIG5vdCBuZWVkIHRvIGFkZCBgXCJkYXRhX3dpemFyZC51cmxzXCJgIHRvIHlvdXIgdXJscy5weSBhcyB0aGUgd2l6YXJkIHdpbGwgcmVnaXN0ZXIgaXRzZWxmIHdpdGggW3dxLmRiXSBpbnN0ZWFkLlxyXG5cclxuRGF0YSBXaXphcmQgcHJvdmlkZXMgbXVzdGFjaGUgdGVtcGxhdGVzIGZvciBlYWNoIG9mIHRoZSBhYm92ZSB0YXNrcyB0byBpbnRlZ3JhdGUgd2l0aCB0aGUgd3EuYXBwIFVJLiAgVGhlc2UgYXJlIHJlbmRlcmVkIG9uIHRoZSBzZXJ2ZXIgYW5kIGRvIG5vdCBuZWVkIHRvIGJlIGluY2x1ZGVkIGluIHlvdXIgSmF2YVNjcmlwdCBidWlsZC4gIEhvd2V2ZXIsIHlvdSBzaG91bGQgaW5zdGFsbCB0aGUgW0B3cS9wcm9ncmVzc10gcGx1Z2luIHZpYSBOUE0gYW5kIHJlZ2lzdGVyIGl0IHdpdGggW0B3cS9hcHBdLlxyXG5cclxuYGBgamF2YXNjcmlwdFxyXG4vLyBzcmMvaW5kZXguanNcclxuaW1wb3J0IGFwcCBmcm9tICdAd3EvYXBwJztcclxuaW1wb3J0IHByb2dyZXNzIGZyb20gJ0B3cS9wcm9ncmVzcyc7XHJcblxyXG5hcHAudXNlKHByb2dyZXNzKTtcclxuYXBwLmluaXQoY29uZmlnKS50aGVuKC4uLik7XHJcbmBgYFxyXG5cclxuT25jZSBldmVyeXRoaW5nIGlzIHNldCB1cCwgYWRkIHRoZSBmb2xsb3dpbmcgYDxmb3JtPmAgdG8gdGhlIGRldGFpbCB0ZW1wbGF0ZSB0aGF0IHdxIGdlbmVyYXRlcyBmb3IgeW91ciBzb3VyY2UgbW9kZWwuICBOb3RlIHRoYXQgeW91IHdpbGwgbmVlZCB0byBhZGQgdGhpcyBgPGZvcm0+YCBtYW51YWxseSBldmVuIGlmIHRoZSBzb3VyY2UgbW9kZWwgaXMgb25lIG9mIGBkYXRhX3dpemFyZC5zb3VyY2VzYC4gIEFmdGVyIGFkZGluZyB0aGUgZm9ybSwgYmUgc3VyZSB0byBza2lwIHRlbXBsYXRlIHJlZ2VuZXJhdGlvbiBmb3IgdGhlIHNvdXJjZSBtb2RlbC5cclxuXHJcbmBgYGh0bWxcclxuPCEtLSBmaWxlc291cmNlX2RldGFpbC5odG1sIC0tPlxyXG48aDE+e3tsYWJlbH19PC9oMT5cclxuPGEgaHJlZj1cInt7cnR9fS9tZWRpYS97e2ZpbGV9fVwiIHJlbD1cImV4dGVybmFsXCI+RG93bmxvYWQgRmlsZTwvYT5cclxuXHJcbjxmb3JtIGFjdGlvbj1cInt7cnR9fS9kYXRhd2l6YXJkL1wiIG1ldGhvZD1cInBvc3RcIj5cclxuICB7ez5jc3JmfX1cclxuICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCJjb250ZW50X3R5cGVfaWRcIiB2YWx1ZT1cInNvdXJjZXMuZmlsZXNvdXJjZVwiPlxyXG4gIDxpbnB1dCB0eXBlPVwiaGlkZGVuXCIgbmFtZT1cIm9iamVjdF9pZFwiIHZhbHVlPVwie3tpZH19XCI+XHJcbiAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCI+SW1wb3J0IERhdGEgZnJvbSBUaGlzIEZpbGU8L2J1dHRvbj5cclxuPC9mb3JtPlxyXG5gYGBcclxuXHJcbltJdGVyVGFibGVdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvaXRlcnRhYmxlXHJcbltEamFuZ28gUkVTVCBGcmFtZXdvcmtdOiBodHRwOi8vd3d3LmRqYW5nby1yZXN0LWZyYW1ld29yay5vcmcvXHJcbltuYXR1cmFsIGtleXNdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLW5hdHVyYWwta2V5c1xyXG5bRW50aXR5LUF0dHJpYnV0ZS1WYWx1ZV06IGh0dHBzOi8vd3EuaW8vZG9jcy9lYXYtdnMtcmVsYXRpb25hbFxyXG5bRVJBVl06IGh0dHBzOi8vd3EuaW8vZG9jcy9lcmF2XHJcblt2ZXJhXTogaHR0cHM6Ly93cS5pby92ZXJhXHJcblxyXG5bd3EuZGJdOiBodHRwczovL3dxLmlvL3dxLmRiXHJcbltjdXN0b20taXRlcl06IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9pdGVydGFibGUvYmxvYi9tYXN0ZXIvZG9jcy9hYm91dC5tZFxyXG5bQ2xpbWF0YSBWaWV3ZXJdOiBodHRwczovL2dpdGh1Yi5jb20vaGVpZ2VvL2NsaW1hdGEtdmlld2VyXHJcbltjbGltYXRhXTogaHR0cHM6Ly9naXRodWIuY29tL2hlaWdlby9jbGltYXRhXHJcblt3cSBmcmFtZXdvcmtdOiBodHRwczovL3dxLmlvL1xyXG5bd3EuZGIucmVzdF06IGh0dHBzOi8vd3EuaW8vZG9jcy9hYm91dC1yZXN0XHJcbltNb2RlbFNlcmlhbGl6ZXJdOiBodHRwOi8vd3d3LmRqYW5nby1yZXN0LWZyYW1ld29yay5vcmcvYXBpLWd1aWRlL3NlcmlhbGl6ZXJzLyNtb2RlbHNlcmlhbGl6ZXJcclxuW3NlcmlhbGl6ZXJzXTogaHR0cDovL3d3dy5kamFuZ28tcmVzdC1mcmFtZXdvcmsub3JnL2FwaS1ndWlkZS9zZXJpYWxpemVycy9cclxuW05hdHVyYWxLZXlNb2RlbFNlcmlhbGl6ZXJdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLW5hdHVyYWwta2V5cyNuYXR1cmFsa2V5bW9kZWxzZXJpYWxpemVyXHJcbltGaWxlTG9hZGVyXTogaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21hc3Rlci9kYXRhX3dpemFyZC9sb2FkZXJzLnB5XHJcbltVUkxMb2FkZXJdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFzdGVyL2RhdGFfd2l6YXJkL2xvYWRlcnMucHlcclxuW2dlbmVyaWMgZm9yZWlnbiBrZXldOiBodHRwczovL2RvY3MuZGphbmdvcHJvamVjdC5jb20vZW4vMS4xMS9yZWYvY29udHJpYi9jb250ZW50dHlwZXMvXHJcbltkYXRhX3dpemFyZC9qcy9wcm9ncmVzcy5qc106IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYXN0ZXIvZGF0YV93aXphcmQvc3RhdGljL2RhdGFfd2l6YXJkL2pzL3Byb2dyZXNzLmpzXHJcblt3cS9wcm9ncmVzcy5qc106IGh0dHBzOi8vd3EuaW8vZG9jcy9wcm9ncmVzcy1qc1xyXG5bQ2VsZXJ5XTogaHR0cDovL3d3dy5jZWxlcnlwcm9qZWN0Lm9yZy9cclxuW1JlZGlzXTogaHR0cHM6Ly9yZWRpcy5pby9cclxuW2RhZW1vbml6YXRpb25dOiBodHRwOi8vZG9jcy5jZWxlcnlwcm9qZWN0Lm9yZy9lbi9sYXRlc3QvdXNlcmd1aWRlL2RhZW1vbml6aW5nLmh0bWxcclxuW3dxLmFwcF06IGh0dHBzOi8vd3EuaW8vd3EuYXBwXHJcbltDZWxlcnkgdGFzayBzdGF0ZXNdOiBodHRwOi8vZG9jcy5jZWxlcnlwcm9qZWN0Lm9yZy9lbi9sYXRlc3QvdXNlcmd1aWRlL3Rhc2tzLmh0bWwjdGFzay1zdGF0ZXNcclxuXHJcbltQcmltYXJ5S2V5UmVsYXRlZEZpZWxkXTogaHR0cDovL3d3dy5kamFuZ28tcmVzdC1mcmFtZXdvcmsub3JnL2FwaS1ndWlkZS9yZWxhdGlvbnMvI3ByaW1hcnlrZXlyZWxhdGVkZmllbGRcclxuW1NsdWdSZWxhdGVkRmllbGRdOiBodHRwOi8vd3d3LmRqYW5nby1yZXN0LWZyYW1ld29yay5vcmcvYXBpLWd1aWRlL3JlbGF0aW9ucy8jc2x1Z3JlbGF0ZWRmaWVsZFxyXG5cclxuW3J1bl9kZXRhaWwuaHRtbF06IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYXN0ZXIvZGF0YV93aXphcmQvdGVtcGxhdGVzL2RhdGFfd2l6YXJkL3J1bl9kZXRhaWwuaHRtbFxyXG5bcnVuX2F1dG8uaHRtbF06IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYXN0ZXIvZGF0YV93aXphcmQvdGVtcGxhdGVzL2RhdGFfd2l6YXJkL3J1bl9hdXRvLmh0bWxcclxuW3J1bl9zZXJpYWxpemVycy5odG1sXTogaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21hc3Rlci9kYXRhX3dpemFyZC90ZW1wbGF0ZXMvZGF0YV93aXphcmQvcnVuX3NlcmlhbGl6ZXJzLmh0bWxcclxuW3J1bl9jb2x1bW5zLmh0bWxdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFzdGVyL2RhdGFfd2l6YXJkL3RlbXBsYXRlcy9kYXRhX3dpemFyZC9ydW5fY29sdW1ucy5odG1sXHJcbltydW5faWRzLmh0bWxdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFzdGVyL2RhdGFfd2l6YXJkL3RlbXBsYXRlcy9kYXRhX3dpemFyZC9ydW5faWRzLmh0bWxcclxuW2lkbWFwLnB5XTogaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZC9ibG9iL21hc3Rlci9kYXRhX3dpemFyZC9pZG1hcC5weVxyXG5bcnVuX2RhdGEuaHRtbF06IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYXN0ZXIvZGF0YV93aXphcmQvdGVtcGxhdGVzL2RhdGFfd2l6YXJkL3J1bl9kYXRhLmh0bWxcclxuW3J1bl9yZWNvcmRzLmh0bWxdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFzdGVyL2RhdGFfd2l6YXJkL3RlbXBsYXRlcy9kYXRhX3dpemFyZC9ydW5fcmVjb3Jkcy5odG1sXHJcblxyXG5bbmF0dXJhbGtleV93aXphcmRdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL2Jsb2IvbWFzdGVyL3Rlc3RzL25hdHVyYWxrZXlfYXBwL3dpemFyZC5weVxyXG5bZWF2X3dpemFyZF06IGh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQvYmxvYi9tYXN0ZXIvdGVzdHMvZWF2X2FwcC93aXphcmQucHlcclxuW21hbmFnZW1lbnQgY29tbWFuZF06IGh0dHBzOi8vZG9jcy5kamFuZ29wcm9qZWN0LmNvbS9lbi8yLjEvcmVmL2RqYW5nby1hZG1pbi9cclxuXHJcbltAd3EvcHJvZ3Jlc3NdOiBodHRwczovL2dpdGh1Yi5jb20vd3EvZGphbmdvLWRhdGEtd2l6YXJkL3RyZWUvbWFzdGVyL3BhY2thZ2VzL3Byb2dyZXNzXHJcbltAd3EvYXBwXTogaHR0cHM6Ly93cS5pby9kb2NzL2FwcC1qc1xyXG5cclxuXHJcbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL3dxL2RqYW5nby1kYXRhLXdpemFyZCIs
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIk1JVCIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImRhdGEtd2l6YXJkLWVkeC1jb3B5Iiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YS13aXphcmQtZWR4LWNvcHkvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YS13aXphcmQtZWR4LWNvcHkvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS93cS9kamFuZ28tZGF0YS13aXphcmQi
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZGF0YS13aXphcmQtZWR4LWNvcHkvMS4zLjIvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogbnVsbCw=
ICAgICJyZXF1aXJlc19weXRob24iOiAiIiw=
ICAgICJzdW1tYXJ5IjogIkludGVyYWN0aXZlIHdlYi1iYXNlZCB3aXphcmQgZm9yIGltcG9ydGluZyBzdHJ1Y3R1cmVkIGRhdGEgaW50byBEamFuZ28gbW9kZWxzLiIs
ICAgICJ2ZXJzaW9uIjogIjEuMy4yIiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNDEwNzY4Nyw=
ICAicmVsZWFzZXMiOiB7
ICAgICIxLjMuMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwNmY2ZjJhZjc4NTY0N2Y4NjJhNTlhZGIxMWU5MjRmMjIyMTI0MWE5Mjk3Zjc3OTcwZjk5YjI3NTZjMDQ2N2QwIiw=
ICAgICAgICAgICJtZDUiOiAiMzFkZTYwMWU0MDliM2ZiM2M2MDlmODM2YmEwNjNmNjciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNGIyM2ViYTZmYmE3NzcxMjZmMjRlYTg0ZTc0Njc1ODlhZGU3ZjFjODYxZDdjZjUxMWY2Yzc2NDE5MjVkOGYzMiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YS13aXphcmQtZWR4LWNvcHktMS4zLjEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzMWRlNjAxZTQwOWIzZmIzYzYwOWY4MzZiYTA2M2Y2NyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDEyNzY0MSw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNi0xMlQxMzo0NDo1MyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNi0xMlQxMzo0NDo1My4wOTcwMDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNi9mNi9mMmFmNzg1NjQ3Zjg2MmE1OWFkYjExZTkyNGYyMjIxMjQxYTkyOTdmNzc5NzBmOTliMjc1NmMwNDY3ZDAvZGF0YS13aXphcmQtZWR4LWNvcHktMS4zLjEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIxLjMuMiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjMGI5MDIzODliNTQ3ZDhjZjNmMDRjNTkxMDlkNmY1NWFkNTYzODIxN2Y0M2YwYzM4Yjk2MGFiNDhlMGZkZmJlIiw=
ICAgICAgICAgICJtZDUiOiAiM2IzNTc2ZDA4YTBhOTc4MDk0OGY3MThlMTZjYzUxY2UiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZmE2NmZiZDY2NWU0NzM2ZTY3Yzc0OWQ3ZTczYzZjYzEyNDAzMmJlYjBkMWM4ODA3NTExMGFlZDQ4ZGMyMzQzMCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZGF0YS13aXphcmQtZWR4LWNvcHktMS4zLjIudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIzYjM1NzZkMDhhMGE5NzgwOTQ4ZjcxOGUxNmNjNTFjZSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogbnVsbCw=
ICAgICAgICAic2l6ZSI6IDEyNzY4Nyw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMi0wNi0xMlQxNjoyNTo0MCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMi0wNi0xMlQxNjoyNTo0MC4wMTQzNjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jMC9iOS8wMjM4OWI1NDdkOGNmM2YwNGM1OTEwOWQ2ZjU1YWQ1NjM4MjE3ZjQzZjBjMzhiOTYwYWI0OGUwZmRmYmUvZGF0YS13aXphcmQtZWR4LWNvcHktMS4zLjIudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiYzBiOTAyMzg5YjU0N2Q4Y2YzZjA0YzU5MTA5ZDZmNTVhZDU2MzgyMTdmNDNmMGMzOGI5NjBhYjQ4ZTBmZGZiZSIs
ICAgICAgICAibWQ1IjogIjNiMzU3NmQwOGEwYTk3ODA5NDhmNzE4ZTE2Y2M1MWNlIiw=
ICAgICAgICAic2hhMjU2IjogImZhNjZmYmQ2NjVlNDczNmU2N2M3NDlkN2U3M2M2Y2MxMjQwMzJiZWIwZDFjODgwNzUxMTBhZWQ0OGRjMjM0MzAi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImRhdGEtd2l6YXJkLWVkeC1jb3B5LTEuMy4yLnRhci5neiIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiM2IzNTc2ZDA4YTBhOTc4MDk0OGY3MThlMTZjYzUxY2UiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6IG51bGws
ICAgICAgInNpemUiOiAxMjc2ODcs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjItMDYtMTJUMTY6MjU6NDAiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjItMDYtMTJUMTY6MjU6NDAuMDE0MzYzWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvYzAvYjkvMDIzODliNTQ3ZDhjZjNmMDRjNTkxMDlkNmY1NWFkNTYzODIxN2Y0M2YwYzM4Yjk2MGFiNDhlMGZkZmJlL2RhdGEtd2l6YXJkLWVkeC1jb3B5LTEuMy4yLnRhci5neiIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
