ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiZnRDTEkiLA==
ICAgICJhdXRob3JfZW1haWwiOiAiZnRjbGlAcHJvdG9uLm1lIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICJbIVtDb2RhY3kgQmFkZ2VdKGh0dHBzOi8vYXBwLmNvZGFjeS5jb20vcHJvamVjdC9iYWRnZS9HcmFkZS80MGUzOTliMGE4ZTA0NzEzODQ4YzM0YTU5ZDllODkxNCldKGh0dHBzOi8vYXBwLmNvZGFjeS5jb20vZ2gvZnRDTEkvZnRDTEkvZGFzaGJvYXJkP3V0bV9zb3VyY2U9Z2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD0mdXRtX2NhbXBhaWduPUJhZGdlX2dyYWRlKVxuXG4jIGZ0Q0xJXG5cbmZ0Q0xJIGlzIGEgY29tbWFuZCBsaW5lIGludGVyZmFjZSBidWlsdCB3aXRoIFtjbGlja10oaHR0cHM6Ly9jbGljay5wYWxsZXRzcHJvamVjdHMuY29tL2VuLzguMC54LykgdG8gZWRpdCBmb250cyB1c2luZ1xuW0ZvbnRUb29sc10oaHR0cHM6Ly9naXRodWIuY29tL2ZvbnR0b29scy9mb250dG9vbHMpLlxuXG5QeXRob24gPj0zLjcgPDMuMTEgaXMgcmVxdWlyZWQgdG8gaW5zdGFsbCBmdENMSS5cblxuVGhlIGZvbGxvd2luZyBwYWNrYWdlcyB3aWxsIGJlIGluc3RhbGxlZCBkdXJpbmcgc2V0dXA6XG5cbi0gZm9udHRvb2xzXG4tIGFmZGtvXG4tIGJlemllcnNcbi0gYnJvdGxpXG4tIGNsaWNrXG4tIGNmZnN1YnJcbi0gZGVoaW50ZXJcbi0gcGF0aHZhbGlkYXRlXG4tIHJpY2hcbi0gc2tpYS1wYXRob3BzXG4tIHR0ZmF1dG9oaW50LXB5XG4tIHpvcGZsaVxuXG4jIyBJbnN0YWxsYXRpb25cblxuICAgIHBpcCBpbnN0YWxsIGZvbnQtY2xpXG5cbk9yLCB0byBpbnN0YWxsIGluIGVkaXRhYmxlIG1vZGU6XG5cbiAgICBnaXQgY2xvbmUgaHR0cHM6Ly9naXRodWIuY29tL2Z0Q0xJL2Z0Q0xJLmdpdFxuXG4gICAgY2QgZnRDTElcblxuICAgIHBpcCBpbnN0YWxsIC1lIC5cblxuIyMgdGw7ZHJcblxuVG8gc3RhcnQgdXNpbmcgZnRDTEksIGp1c3QgaW5zdGFsbCwgb3BlbiBhIHNoZWxsIGFuZCB0eXBlIGBmdGNsaSAtLWhlbHBgIHRvIGxpc3QgYWxsIGNvbW1hbmRzLlxuXG4hW2ltYWdlXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS84MzA2MzUwNi8yMjk1Mjk2ODctYzcxMWU4NjAtYzkzYi00OWM4LWExMzctMWU5ZTM3YzZhMGFmLnBuZylcblxuXG5FYWNoIGxldmVsIDEgY29tbWFuZCBoYXMgaXRzIG93biBoZWxwLi4uXG5cbiFbaW1hZ2VdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzgzMDYzNTA2LzIyOTUyOTgyMy04NTFiMjU3ZC02OWMzLTRkYWEtYTcyYy00MmJlOTZkYjIwOWYucG5nKVxuXG4uLi4gYXMgd2VsbCBhcyBlYWNoIGxldmVsIDIgY29tbWFuZC5cblxuIVtpbWFnZV0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODMwNjM1MDYvMjI5NTI5OTU0LWNlZGMwZTFkLTlkMTUtNGM2Yy04MWJlLWQ4OTIzZjhkYzdkNy5wbmcpXG5cblJlbWVtYmVyIHRvIHVzZSBgLS1uby1vdmVyd3JpdGVgIG9yIGAtb3V0YCB0byBhdm9pZCBvdmVyd3JpdGluZyB5b3VyIGZvbnRzIHdoZW4gZXhwZXJpbWVudGluZy5cblxuIyMgQXJndW1lbnRzXG5cbi0gW0lOUFVUX1BBVEhdKCNpbnB1dHBhdGgpXG5cbiMjIENvbW1vbiBvcHRpb25zXG5cbi0gWy1vdXQsIC0tb3V0cHV0LWRpcl0oIy1vdXQtLS1vdXRwdXQtZGlyKVxuLSBbLS1yZWNhbGMtdGltZXN0YW1wXSgjLS1yZWNhbGMtdGltZXN0YW1wKVxuLSBbLS1uby1vdmVyd3JpdGVdKCMtLW5vLW92ZXJ3cml0ZSlcblxuIyMgQ29tbWFuZHMgbGlzdFxuXG4tIFsqKmFzc2lzdGFudCoqXSgjZnRjbGktYXNzaXN0YW50KVxuXG4gIC0gW3VpXSgjZnRjbGktYXNzaXN0YW50LXVpKVxuICAtIFtjb21taXRdKCNmdGNsaS1hc3Npc3RhbnQtY29tbWl0KVxuICAtIFtpbml0LWNvbmZpZ10oI2Z0Y2xpLWFzc2lzdGFudC1pbml0LWNvbmZpZylcbiAgLSBbaW5pdC1kYXRhXSgjZnRjbGktYXNzaXN0YW50LWluaXQtZGF0YSlcblxuLSBbKipjZmYqKl0oI2Z0Y2xpLWNmZilcblxuICAtIFtkZWwtbmFtZXNdKCNmdGNsaS1jZmYtZGVsLW5hbWVzKVxuICAtIFtmaW5kLXJlcGxhY2VdKCNmdGNsaS1jZmYtZmluZC1yZXBsYWNlKVxuICAtIFtmaXgtdmVyc2lvbl0oI2Z0Y2xpLWNmZi1maXgtdmVyc2lvbilcbiAgLSBbc2V0LW5hbWVzXSgjZnRjbGktY2ZmLXNldC1uYW1lcylcblxuLSBbKipjb252ZXJ0ZXIqKl0oI2Z0Y2xpLWNvbnZlcnRlcilcblxuICAtIFtvdGYydHRmXSgjZnRjbGktY29udmVydGVyLW90ZjJ0dGYpXG4gIC0gW3R0ZjJvdGZdKCNmdGNsaS1jb252ZXJ0ZXItdHRmMm90ZilcbiAgLSBbZnQyd2ZdKCNmdGNsaS1jb252ZXJ0ZXItZnQyd2YpXG4gIC0gW3dmMmZ0XSgjZnRjbGktY29udmVydGVyLXdmMmZ0KVxuICAtIFt2YXIyc3RhdGljXSgjZnRjbGktY29udmVydGVyLXZhcjJzdGF0aWMpXG4gIC0gW3R0YzJzZm50XSgjZnRjbGktY29udmVydGVyLXR0YzJzZm50KVxuXG4tIFsqKmZpeCoqXSgjZnRjbGktZml4KVxuXG4gIC0gW2NhcmV0LW9mZnNldF0oI2Z0Y2xpLWZpeC1jYXJldC1vZmZzZXQpXG4gIC0gW2RlY29tcG9zZS10cmFuc2Zvcm1lZF0oI2Z0Y2xpLWZpeC1kZWNvbXBvc2UtdHJhbnNmb3JtZWQpXG4gIC0gW2R1cGxpY2F0ZS1jb21wb25lbnRzXSgjZnRjbGktZml4LWR1cGxpY2F0ZS1jb21wb25lbnRzKVxuICAtIFtpdGFsaWMtYW5nbGVdKCNmdGNsaS1maXgtaXRhbGljLWFuZ2xlKVxuICAtIFtrZXJuLXRhYmxlXSgjZnRjbGktZml4LWtlcm4tdGFibGUpXG4gIC0gW21vbm9zcGFjZV0oI2Z0Y2xpLWZpeC1tb25vc3BhY2UpXG4gIC0gW25ic3AtbWlzc2luZ10oI2Z0Y2xpLWZpeC1uYnNwLW1pc3NpbmcpXG4gIC0gW25ic3Atd2lkdGhdKCNmdGNsaS1maXgtbmJzcC13aWR0aClcbiAgLSBbb3MyLXJhbmdlc10oI2Z0Y2xpLWZpeC1vczItcmFuZ2VzKVxuICAtIFtzdHJpcC1uYW1lc10oI2Z0Y2xpLWZpeC1zdHJpcC1uYW1lcylcblxuLSBbKiptZXRyaWNzKipdKCNmdGNsaS1tZXRyaWNzKVxuXG4gIC0gW2FsaWduXSgjZnRjbGktbWV0cmljcy1hbGlnbilcbiAgLSBbY29weS1tZXRyaWNzXSgjZnRjbGktbWV0cmljcy1jb3B5LW1ldHJpY3MpXG4gIC0gW3NldC1saW5lZ2FwXSgjZnRjbGktbWV0cmljcy1zZXQtbGluZWdhcClcblxuLSBbKipuYW1lKipdKCNmdGNsaS1uYW1lKVxuXG4gIC0gW2FwcGVuZF0oI2Z0Y2xpLW5hbWUtYXBwZW5kKVxuICAtIFtkZWwtbWFjLW5hbWVzXSgjZnRjbGktbmFtZS1kZWwtbWFjLW5hbWVzKVxuICAtIFtkZWwtbmFtZXNdKCNmdGNsaS1uYW1lLWRlbC1uYW1lcylcbiAgLSBbZmluZC1yZXBsYWNlXSgjZnRjbGktbmFtZS1maW5kLXJlcGxhY2UpXG4gIC0gW2ZpbmQtc2V0LW5hbWVdKCNmdGNsaS1uYW1lLXNldC1uYW1lKVxuXG4tIFsqKm9zMioqXSgjZnRjbGktb3MyKVxuXG4tIFsqKnBvc3QqKl0oI2Z0Y2xpLXBvc3QpXG5cbi0gWyoqcHJpbnQqKl0oI2Z0Y2xpLXByaW50KVxuICAtIFtmb250LWluZm9dKCNmdGNsaS1wcmludC1mb250LWluZm8pXG4gIC0gW2ZvbnQtbmFtZXNdKCNmdGNsaS1wcmludC1mb250LW5hbWVzKVxuICAtIFtmb250LWZvbnRzLWxpc3RdKCNmdGNsaS1wcmludC1mb250cy1saXN0KVxuICAtIFtvczItdGFibGVdKCNmdGNsaS1wcmludC1vczItdGFibGUpXG5cbi0gWyoqdXRpbHMqKl0oI2Z0Y2xpLXV0aWxzKVxuICAtIFthZGQtZHNpZ10oI2Z0Y2xpLXV0aWxzLWFkZC1kc2lnKVxuICAtIFtjZmYtYXV0b2hpbnRdKCNmdGNsaS11dGlscy1jZmYtYXV0b2hpbnQpXG4gIC0gW2NmZi1jaGVjay1vdXRsaW5lc10oI2Z0Y2xpLXV0aWxzLWNmZi1jaGVjay1vdXRsaW5lcylcbiAgLSBbY2ZmLWRlaGludF0oI2Z0Y2xpLXV0aWxzLWNmZi1kZWhpbnQpXG4gIC0gW2NmZi1kZXN1YnJdKCNmdGNsaS11dGlscy1jZmYtZGVzdWJyKVxuICAtIFtjZmYtc3Vicl0oI2Z0Y2xpLXV0aWxzLWNmZi1zdWJyKVxuICAtIFtkZWwtdGFibGVdKCNmdGNsaS11dGlscy1kZWwtdGFibGUpXG4gIC0gW2ZvbnQtb3JnYW5pemVyXSgjZnRjbGktdXRpbHMtZm9udC1vcmdhbml6ZXIpXG4gIC0gW2ZvbnQtcmVuYW1lcl0oI2Z0Y2xpLXV0aWxzLWZvbnQtcmVuYW1lcilcbiAgLSBbdHRmLWF1dG9oaW50XSgjZnRjbGktdXRpbHMtdHRmLWF1dG9oaW50KVxuICAtIFt0dGYtZGVoaW50XSgjZnRjbGktdXRpbHMtdHRmLWRlaGludClcbiAgLSBbdHRmLXJlbW92ZS1vdmVybGFwc10oI2Z0Y2xpLXV0aWxzLXR0Zi1yZW1vdmUtb3ZlcmxhcHMpXG5cbiMjIEFyZ3VtZW50c1xuXG4jIyMgSU5QVVRfUEFUSFxuXG5XaXRoIHNvbWUgZXhjZXB0aW9ucywgYWxsIGZ0Q0xJIHN1YmNvbW1hbmRzIHByb2Nlc3MgZmlsZXMgaW4gdGhlIGdpdmVuIHBhdGguIFRoZSBgSU5QVVRfUEFUSGAgYXJndW1lbnQgY2FuIGJlIGdlbmVyYWxseVxuYSBzaW5nbGUgZm9udCBmaWxlIG9yIGEgZm9sZGVyIGNvbnRhaW5pbmcgb25lIG9yIG1vcmUgZm9udHMuIEluIGNhc2UgYSBkaXJlY3RvcnkgaXMgcGFzc2VkIGFzIElOUFVUX1BBVEgsIGFsbCBmb250c1xuc3RvcmVkIGluIGl0IHdpbGwgYmUgcHJvY2Vzc2VkLCB3aXRoIHRoZSBleGNsdXNpb24gb2YgZm9udHMgc3RvcmVkIGluIHN1YmRpcmVjdG9yaWVzLlxuXG4jIyBDb21tb24gb3B0aW9uc1xuXG5UaGUgYC1vdXQsIC1vdXRwdXQtZGlyYCwgYC0tcmVjYWxjLXRpbWVzdGFtcGAgYW5kIGAtLW5vLW92ZXJ3cml0ZWAgb3B0aW9ucyBjYW4gYmUgdXNlZCBpbiBhbGwgc3ViY29tbWFuZHMsIHVubGVzc1xub3RoZXJ3aXNlIHNwZWNpZmllZC5cblxuIyMjIC1vdXQsIC0tb3V0cHV0LWRpclxuXG5UaGUgZGlyZWN0b3J5IHdoZXJlIHRoZSBvdXRwdXQgZmlsZXMgYXJlIHRvIGJlIHNhdmVkLiBJZiBgb3V0cHV0X2RpcmAgaXMgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkIHRvIHRoZSBzYW1lXG5mb2xkZXIuIElmIHRoZSB1c2VyIHBhc3NlcyBhIGRpcmVjdG9yeSB0aGF0IGRvZXNuJ3QgZXhpc3QsIGl0IHdpbGwgYmUgYXV0b21hdGljYWxseSBjcmVhdGVkLlxuXG4jIyMgLS1yZWNhbGMtdGltZXN0YW1wXG5cbkJ5IGRlZmF1bHQsIG9yaWdpbmFsIGBoZWFkLm1vZGlmaWVkYCB2YWx1ZSBpcyBrZXB0IHdoZW4gYSBmb250IGlzIHNhdmVkLiBVc2UgdGhpcyBvcHRpb24gdG8gc2V0IGBoZWFkLm1vZGlmaWVkYFxudGltZXN0YW1wIHRvIGN1cnJlbnQgdGltZS5cblxuIyMjIC0tbm8tb3ZlcndyaXRlXG5cbkJ5IGRlZmF1bHQsIG1vZGlmaWVkIGZpbGVzIGFyZSBvdmVyd3JpdHRlbi4gVXNlIHRoaXMgc3dpdGNoIHRvIHNhdmUgdGhlbSB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG5vZiBmaWxlIG5hbWUsIHNvIHRoYXQgVGltZXMtQm9sZC5vdGYgYmVjb21lcyBUaW1lc0JvbGQjMS5vdGYpLlxuXG4jIyMgVXNhZ2UgZXhhbXBsZXM6XG5cbmBmdGNsaSBtZXRyaWNzIGFsaWduIFwiQzpcXEZvbnRzXCIgLW91dCBcIkM6XFxGb250c1xcQWxpZ25lZFwiYFxuXG5gZnRjbGkgbWV0cmljcyBjb3B5IC1zIFwiQzpcXEZvbnRzXFxTb3VyY2VGb250Lm90ZlwiIC1kIFwiQzpcXEZvbnRzXFxcIiAtLXJlY2FsYy10aW1lc3RhbXBgXG5cbmBmdGNsaSBtZXRyaWNzIGNvcHkgLXMgXCJDOlxcRm9udHNcXFNvdXJjZUZvbnQub3RmXCIgLWQgXCJDOlxcRm9udHNcXFwiIC0tbm8tb3ZlcndyaXRlYFxuXG4jIyBmdGNsaSBhc3Npc3RhbnRcblxuQSBzZXQgb2YgdG9vbHMgdG8gY29ycmVjdGx5IGNvbXBpbGUgdGhlICduYW1lJyB0YWJsZSBhbmQgc2V0IHByb3BlciB2YWx1ZXMgZm9yIHVzV2VpZ2h0Q2xhc3MsIHVzV2lkdGhDbGFzcywgQm9sZCwgSXRhbGljXG5hbmQgT2JsaXF1ZSBiaXRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBhc3Npc3RhbnRcblxuKipDb21tYW5kcyoqOlxuXG4gICAgICBjb21taXRcbiAgICAgIGluaXQtY29uZmlnXG4gICAgICBpbml0LWRhdGFcbiAgICAgIHVpXG5cblRoZSBsb2dpY2FsIHN0ZXBzIGFyZSB0aGUgZm9sbG93aW5nOlxuXG4xLiBDcmVhdGUgYSBDU1YgZmlsZSBjb250YWluaW5nLCBmb3IgZWFjaCBmb250IGluIHRoZSBzb3VyY2UgcGF0aCwgdGhlIGZvbGxvd2luZyBkYXRhOlxuICAgLSBGaWxlIHBhdGhcbiAgIC0gRmFtaWx5IG5hbWVcbiAgIC0gdXNXaWR0aENsYXNzXG4gICAtIHVzV2VpZ2h0Q2xhc3NcbiAgIC0gU2xvcGUgY2xhc3NlcyAoSXRhbGljIGFuZC9vciBPYmxpcXVlKSBhbmQgQm9sZCBmbGFnXG4gICAtIFdlaWdodCwgV2lkdGggYW5kIFNsb3BlIHN0eWxlIG5hbWVzXG4yLiBSZXZpZXcgdGhlIENTViBmaWxlXG4zLiBXcml0ZSBkYXRhIGZyb20gdGhlIENTViBmaWxlIHRvIHRoZSB0YXJnZXQgZm9udHM6IHRoaXMgd2lsbCBjb21waWxlIHRoZSBuYW1lIHRhYmxlIGFuZCBzZXQgdGhlIHByb3BlclxuICAgdXNXaWR0aENsYXNzLCB1c1dlaWdodENsYXNzIFNsb3BlIGNsYXNzIGFuZCBCb2xkIHZhbHVlcy5cblxuKipTdGVwIDEqKiBjYW4gYmUgZXhlY3V0ZWQgd2l0aCBvbmUgb2YgdGhlIGZvbGxvd2luZyBjb21tYW5kczpcblxuLSBgZnRjbGkgYXNzaXN0YW50IGluaXQtZGF0YSBJTlBVVF9QQVRIYFxuLSBgZnRjbGkgYXNzaXN0YW50IHVpIElOUFVUX1BBVEhgXG5cblRoZSBmaXJzdCBjb21tYW5kIHdpbGwgY3JlYXRlIGEgZGlyZWN0b3J5IG5hbWVkIGBmdENMSV9maWxlc2AgY29udGFpbmluZyB0d28gZmlsZXM6IGBmb250c19kYXRhLmNzdmAgYW5kXG5gc3R5bGVzX21hcHBpbmcuanNvbmAuIFRoZSBzZWNvbmQgb25lIHdpbGwgb3BlbiB0aGUgY29tbWFuZCBsaW5lIHVzZXIgaW50ZXJmYWNlIHRoYXQgYWxsb3dzIHRvIGVkaXQgYm90aC5cblxuVGhlIGBzdHlsZXNfbWFwcGluZy5qc29uYCBpcyBjcmVhdGVkIGF0IGZpcnN0LCB1bmxlc3MgaXQgYWxyZWFkeSBleGlzdHMsIGFuZCBjb250YWlucyB0aGUgZGVmYXVsdCBTdHlsZSBOYW1lcyB0byBwYWlyXG53aXRoIHVzV2lkdGhDbGFzcywgdXNXZWlnaHRDbGFzcyBhbmQgU2xvcGUgY2xhc3MuIFRoZSBkZWZhdWx0IHZhbHVlcyBhcmUgdGhlIGZvbGxvd2luZzpcblxuICAgIHtcbiAgICAgICAgXCJpdGFsaWNzXCI6IFtcIkl0XCIsIFwiSXRhbGljXCJdLFxuICAgICAgICBcIm9ibGlxdWVzXCI6IFtcIk9ibFwiLCBcIk9ibGlxdWVcIl0sXG4gICAgICAgIFwid2VpZ2h0c1wiOiB7XG4gICAgICAgICAgICBcIjI1MFwiOiBbXCJUaFwiLCBcIlRoaW5cIiBdLFxuICAgICAgICAgICAgXCIyNzVcIjogW1wiWEx0XCIsIFwiRXh0cmFMaWdodFwiXSxcbiAgICAgICAgICAgIFwiMzAwXCI6IFtcIkx0XCIsIFwiTGlnaHRcIl0sXG4gICAgICAgICAgICBcIjM1MFwiOiBbXCJCa1wiLCBcIkJvb2tcIl0sXG4gICAgICAgICAgICBcIjQwMFwiOiBbXCJSZ1wiLCBcIlJlZ3VsYXJcIl0sXG4gICAgICAgICAgICBcIjUwMFwiOiBbXCJNZFwiLCBcIk1lZGl1bVwiXSxcbiAgICAgICAgICAgIFwiNjAwXCI6IFtcIlNCZFwiLCBcIlNlbWlCb2xkXCJdLFxuICAgICAgICAgICAgXCI3MDBcIjogW1wiQmRcIiwgXCJCb2xkXCJdLFxuICAgICAgICAgICAgXCI4MDBcIjogW1wiWEJkXCIsIFwiRXh0cmFCb2xkXCJdLFxuICAgICAgICAgICAgXCI4NTBcIjogW1wiSHZ5XCIsIFwiSGVhdnlcIl0sXG4gICAgICAgICAgICBcIjkwMFwiOiBbXCJCbGtcIixcIkJsYWNrXCJdLFxuICAgICAgICAgICAgXCI5NTBcIjogW1wiVWx0XCIsIFwiVWx0cmFcIl1cbiAgICAgICAgfSxcbiAgICAgICAgXCJ3aWR0aHNcIjoge1xuICAgICAgICAgICAgXCIxXCI6IFtcIkNtXCIsIFwiQ29tcHJlc3NlZFwiXSxcbiAgICAgICAgICAgIFwiMlwiOiBbXCJYQ25cIiwgXCJFeHRyYUNvbmRlbnNlZFwiXSxcbiAgICAgICAgICAgIFwiM1wiOiBbXCJDblwiLCBcIkNvbmRlbnNlZFwiXSxcbiAgICAgICAgICAgIFwiNFwiOiBbXCJOclwiLCBcIk5hcnJvd1wiXSxcbiAgICAgICAgICAgIFwiNVwiOiBbXCJOb3JcIixcIk5vcm1hbFwiXSxcbiAgICAgICAgICAgIFwiNlwiOiBbXCJXZFwiLCBcIldpZGVcIl0sXG4gICAgICAgICAgICBcIjdcIjogW1wiRXh0XCIsIFwiRXh0ZW5kZWRcIl0sXG4gICAgICAgICAgICBcIjhcIjogW1wiWEV4dFwiLCBcIkV4dHJhRXh0ZW5kZWRcIl0sXG4gICAgICAgICAgICBcIjlcIjogW1wiRXhwXCIsIFwiRXhwYW5kZWRcIl1cbiAgICAgICAgfVxuICAgIH1cblxuQWZ0ZXIgY3JlYXRpb24gb2YgYHN0eWxlc19tYXBwaW5nLmpzb25gLCBhbGwgdmFsaWQgZm9udCBmaWxlcyBmb3VuZCBpbiBgSU5QVVRfUEFUSGAgYXJlIHBhcnNlZCB0byByZXRyaWV2ZSBGYW1pbHkgTmFtZSxcbnVzV2lkdGhDbGFzcywgdXNXZWlnaHRDbGFzcywgU2xvcGUgQ2xhc3MgKFVwcmlnaHQsIEl0YWxpYyBvciBPYmxpcXVlKS4gVGhlIHByb2Nlc3Mgc2VhcmNoZXMgZm9yIG1hdGNoZXMgYmV0d2VlbiB0aGVcbnJldHJpZXZlZCB2YWx1ZXMgYW5kIHRoZSBKU09OIGRhdGEsIHRyeWluZyB0byBkZXRlcm1pbmUgdGhlIHByb3BlciBzdHlsZSBuYW1lcy4gVGhlIHJlc3VsdHMgYXJlIHdyaXR0ZW4gaW50byB0aGVcbmBmb250c19kYXRhLmNzdmAgZmlsZS5cblxuVGhlIGBmb250c19kYXRhLmNzdmAgY29udGFpbnMgdGhlIGZvbGxvd2luZyBjb2x1bW5zOlxuXG4tIGBmaWxlX25hbWVgOiBwYXRoIHRvIHRoZSBmb250IGZpbGVcbi0gYGZhbWlseV9uYW1lYDogdGhlIGZvbnQncyBmYW1pbHkgbmFtZSwgcmV0cmlldmVkIHJlYWRpbmcgdGhlIG5hbWUgdGFibGVcbi0gYGlzX2JvbGRgOiBUcnVlIGlmIHRoZSBib2xkIGJpdHMgYXJlIHNldCwgRmFsc2UgaWYgdGhleSBhcmUgbm90IHNldC4gVGhpcyBjb2x1bW4gaXMgcHJlc2VudCBvbmx5IGZvciBjb21wbGV0ZW5lc3MsXG4gIGJ1dCBpdCdzIHZhbHVlIHdpbGwgYmUgaWdub3JlZC4gQSBmb250IHdpbGwgYmUgc2V0IGFzIGJvbGQgb25seSBhbmQgb25seSBpZiwgd2hpbGUgcnVubmluZyB0aGUgYGZ0Y2xpIGFzc2lzdGFudCBjb21taXRgXG4gIGNvbW1hbmQsIHRoZSB1c2VyIHdpbGwgY2hvb3NlIHRvIHVzZSBsaW5rZWQgc3R5bGVzLlxuICAoLWxzIC8gLS1saW5rZWQgc3R5bGVzKSBvcHRpb24gd2hpbGUgd3JpdGluZyBkYXRhIGZyb20gQ1NWIHRvIGZvbnRzXG4tIGBpc19pdGFsaWNgOiBUcnVlIGlmIHRoZSBpdGFsaWMgYml0cyBhcmUgc2V0LCBGYWxzZSBpZiB0aGV5IGFyZSBub3Qgc2V0XG4tIGBpc19vYmxpcXVlYDogVHJ1ZSBpZiB0aGUgb2JsaXF1ZSBiaXQgaXMgc2V0LCBGYWxzZSBpZiBpdCdzIG5vdCBzZXRcbi0gYHVzX3dpZHRoX2NsYXNzYDogdXNXaWR0aENsYXNzIHZhbHVlXG4tIGB1c193ZWlnaHRfY2xhc3NgOiB1c1dlaWdodENsYXNzIHZhbHVlXG4tIGB3ZHRgOiBzaG9ydCBsaXRlcmFsIGZvciB0aGUgV2lkdGggc3R5bGUgbmFtZVxuLSBgd2lkdGhgOiBsb25nIGxpdGVyYWwgZm9yIHRoZSBXaWR0aCBzdHlsZSBuYW1lXG4tIGB3Z3RgOiBzaG9ydCBsaXRlcmFsIGZvciB0aGUgV2VpZ2h0IHN0eWxlIG5hbWVcbi0gYHdlaWdodGA6IGxvbmcgbGl0ZXJhbCBmb3IgdGhlIFdlaWdodCBzdHlsZSBuYW1lXG4tIGBzbHBgOiBzaG9ydCBsaXRlcmFsIGZvciB0aGUgU2xvcGUgc3R5bGUgbmFtZVxuLSBgc2xvcGVgOiBsb25nIGxpdGVyYWwgZm9yIHRoZSBTbG9wZSBzdHlsZSBuYW1lXG4tIGBzZWxlY3RlZGA6IDAgdG8gZXhjbHVkZSB0aGUgZmlsZSB3aGlsZSB3cml0aW5nIGRhdGEgZnJvbSBDU1YgdG8gZm9udHMsIDEgdG8gaW5jbHVkZSB0aGUgZmlsZVxuXG5Cb3RoIGZpbGVzIGNhbiBiZSBlZGl0ZWQgbWFudWFsbHkgb3IgdXNpbmcgdGhlIGNoYXJhY3RlciBpbnRlcmZhY2UuXG5cbioqU3RlcCAyKiogY2FuIGJlIGV4ZWN1dGVkLCBhZnRlciByZXZpZXdpbmcgYGZvbnRzX2RhdGEuY3N2YCwgcnVubmluZyB0aGUgYGZ0Y2xpIGFzc2lzdGFudCBjb21taXRgIGNvbW1hbmQuXG5cbiMjIyBmdGNsaSBhc3Npc3RhbnQgdWlcblxuT3BlbnMgdGhlIGNoYXJhY3RlciB1c2VyIGludGVyZmFjZSB0byBlZGl0IHRoZSBgc3R5bGVzX21hcHBpbmcuanNvbmAgYW5kIGBmb250c19kYXRhLmNzdmAgZmlsZXMuIElmIG9uZSBvciBib3RoIGZpbGVzXG5kbyBub3QgZXhpc3QsIHRoZXkgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQuXG5cbioqVXNhZ2UqKlxuXG4gICAgZnRjbGkgYXNzaXN0YW50IHVpIElOUFVUX1BBVEhcblxuVGhlIG1haW4gd2luZG93IGRpc3BsYXlzIGEgbGlzdCBvZiBmb250cyBmb3VuZCBpbiBgSU5QVVRfUEFUSGAgYW5kIGFsbG93cyB0byBhY2Nlc3MgdGhlIGVkaXRvcnMgZm9yXG5gc3R5bGVzX21hcHBpbmcuanNvbmAgYW5kIGBmb250c19kYXRhLmNzdmAuXG5cblRoZSBNYWluIFdpbmRvdzpcblxuIVtpbWFnZV0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODMwNjM1MDYvMjI2OTM1NjkzLTUxOTMwOWE0LWM3NmMtNDMyMS04ZjFkLTViYzBlN2EzMmRlNS5wbmcgXCJmdENMSSBhc3Npc3RhbnQgbWFpbiB3aW5kb3dcIilcblxuVGhlIFN0eWxlcyBNYXBwaW5nIEVkaXRvcjpcblxuIVtpbWFnZV0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODMwNjM1MDYvMjI3MTUwMzQ0LTZmZmQ1NzMwLWM3NWMtNDgzNi1hOGE3LWNjYjE1MThkNjQxNC5wbmcgXCJTdHlsZXMgTWFwcGluZyBFZGl0b3JcIilcblxuVGhlIEZvbnRzIERhdGEgRWRpdG9yOlxuXG4hW2ltYWdlXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS84MzA2MzUwNi8yMjcxNTA2OTgtYzdjNWMwYzMtMjM3NC00MjJkLThiZTctYzE5YzhjNDFjNjlkLnBuZyBcIlRoZSBGb250cyBEYXRhIEVkaXRvclwiKVxuXG5XaGVuIHRoZSBgZm9udHNfZGF0YS5jc3ZgIGZpbGUgY29udGFpbnMgdGhlIGRlc2lyZWQgdmFsdWVzLCBkYXRhIGFyZSByZWFkeSB0byBiZSB3cml0dGVuIHRvIGZvbnRzIHVzaW5nIHRoZSBgZnRjbGlcbmFzc2lzdGFudCBjb21taXRgIGNvbW1hbmQuXG5cbiMjIyBmdGNsaSBhc3Npc3RhbnQgY29tbWl0XG5cbldyaXRlcyBkYXRhIGZyb20gQ1NWIHRvIGZvbnRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBhc3Npc3RhbnQgY29tbWl0IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgICAtLXdpZHRoLWVsaWRhYmxlIFRFWFQgICAgICAgICAgIFRoZSB3aWR0aCB3b3JkIHRvIGVsaWRlIHdoZW4gYnVpbGRpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVyZWNvcmRzLiAgW2RlZmF1bHQ6IE5vcm1hbF1cbiAgICAgIC0td2VpZ2h0LWVsaWRhYmxlIFRFWFQgICAgICAgICAgVGhlIHdlaWdodCB3b3JkIHRvIGVsaWRlIHdoZW4gYnVpbGRpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVyZWNvcmRzLiAgW2RlZmF1bHQ6IFJlZ3VsYXJdXG4gICAgICAtbHMsIC0tbGlua2VkLXN0eWxlcyA8SU5URUdFUiBSQU5HRSBJTlRFR0VSIFJBTkdFPi4uLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVc2UgdGhpcyBvcHRpb24gdG8gYWN0aXZhdGUgbGlua2VkIHN0eWxlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhpcyBvcHRpb24gaXMgYWN0aXZlLCBsaW5rZWQgc3R5bGVzIG11c3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgc3BlY2lmaWVkLiBGb3IgZXhhbXBsZTogLWxzIDQwMCA3MDAsIG9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1scyAzMDAgNjAwLlxuICAgICAgLXgsIC0tZXhjbHVkZS1uYW1lcmVjb3JkcyBbMXwyfDN8NHw1fDZ8MTZ8MTd8MThdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgSURzIHRvIHNraXAuIFRoZSBzcGVjaWZpZWQgbmFtZSBJRHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29uJ3QgYmUgcmVjYWxjdWxhdGVkLiBUaGlzIG9wdGlvbiBjYW4gYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwZWF0ZWQgKGZvciBleGFtcGxlOiAteCAzIC14IDUgLXggNi4uLikuXG4gICAgICAtc3dkdCwgLS1zaG9ydGVuLXdpZHRoIFsxfDR8NnwxNnwxN11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSBJRHMgd2hlcmUgdG8gdXNlIHRoZSBzaG9ydCB3b3JkIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCBzdHlsZSBuYW1lIChmb3IgZXhhbXBsZSwgJ0NuJyBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mICdDb25kZW5zZWQnKS4gVGhpcyBvcHRpb24gY2FuIGJlIHJlcGVhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChmb3IgZXhhbXBsZTogLXN3ZHQgMSAtc3dkdCA1LCAtc3dkdCAxNi4uLikuXG4gICAgICAtc3dndCwgLS1zaG9ydGVuLXdlaWdodCBbMXw0fDZ8MTddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgSURzIHdoZXJlIHRvIHVzZSB0aGUgc2hvcnQgd29yZCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0IHN0eWxlIG5hbWUgKGZvciBleGFtcGxlLCAnTWQnIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgJ01lZGl1bScpLiBUaGlzIG9wdGlvbiBjYW4gYmUgcmVwZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvciBleGFtcGxlOiAtc3dndCAxIC1zd2d0IDUgLXN3Z3QgNi4uLikuXG4gICAgICAta3dkdCwgLS1rZWVwLXdpZHRoLWVsaWRhYmxlICAgIERvZXNuJ3QgcmVtb3ZlIHRoZSB3aWR0aCBlbGlkYWJsZSB3b3JkcyAoYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgXCJOb3JcIiBhbmQgXCJOb3JtYWxcIikuXG4gICAgICAta3dndCwgLS1rZWVwLXdlaWdodC1lbGlkYWJsZSAgIERvZXNuJ3QgcmVtb3ZlIHRoZSB3ZWlnaHQgZWxpZGFibGUgd29yZHMgKGJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIFwiUmdcIiBhbmQgXCJSZWd1bGFyXCIpLlxuICAgICAgLXNzbHAsIC0tc2hvcnRlbi1zbG9wZSBbNHw2fDE2fDE3XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lIElEcyB3aGVyZSB0byB1c2UgdGhlIHNob3J0IHdvcmQgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsb3BlIHN0eWxlIG5hbWUgKGZvciBleGFtcGxlLCAnSXQnIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgJ0l0YWxpYycpLiBUaGlzIG9wdGlvbiBjYW4gYmUgcmVwZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvciBleGFtcGxlOiAtc3NscCAzIC1zc2xwIDUgLXNzbHAgNi4uLikuXG4gICAgICAtc2YsIC0tc3VwZXItZmFtaWx5ICAgICAgICAgICAgIFN1cGVyZmFtaWx5IG1vZGUuIFRoaXMgb3B0aW9uIGFmZmVjdHMgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJRHMgMywgNiwgMTYgYW5kIDE3IGluIGNhc2Ugb2YgZmFtaWxpZXMgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aHMgZGlmZmVyZW50IHRoYW4gJ05vcm1hbCcuIElmIHRoaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uIGlzIGFjdGl2ZSwgbmFtZSBJRCA2IHdpbGwgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ0ZhbWlseU5hbWUtV2lkdGhXZWlnaHRTbG9wZScgaW5zdGVhZCBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFtaWx5TmFtZVdpZHRoLVdlaWdodFNsb3BlJy4gTWFjIGFuZCBPVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYW1pbHkvc3ViZmFtaWx5IG5hbWVzIHdpbGwgYmUgRmFtaWx5TmFtZSAvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdpZHRoIFdlaWdodCBTbG9wZScgaW5zdGVhZCBvZiAnRmFtaWx5IE5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGggLyBXZWlnaHQgU2xvcGUnLlxuICAgICAgLWF1aSwgLS1hbHQtdWlkICAgICAgICAgICAgICAgICBVc2UgYWx0ZXJuYXRlIHVuaXF1ZSBpZGVudGlmaWVyLiBCeSBkZWZhdWx0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lSUQgMyAoVW5pcXVlIGlkZW50aWZpZXIpIGlzIGNhbGN1bGF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBmb2xsb3dpbmcgc2NoZW1lOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVmVyc2lvbjtWZW5kb3IgY29kZTtQb3N0c2NyaXB0TmFtZScuIFRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGUgdW5pcXVlIGlkZW50aWZpZXIgaXMgY2FsY3VsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNYW51ZmFjdHVyZXI6IEZ1bGwgRm9udCBOYW1lOiBDcmVhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZZWFyJy5cbiAgICAgIC1vYm5pLCAtLW9ibGlxdWUtbm90LWl0YWxpYyAgICAgQnkgZGVmYXVsdCwgaWYgYSBmb250IGhhcyB0aGUgb2JsaXF1ZSBiaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0LCB0aGUgaXRhbGljIGJpdHMgd2lsbCBiZSBzZXQgdG9vLiBVc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBvcHRpb24gdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVoYXZpb3VyIChmb3IgZXhhbXBsZSwgd2hlbiB0aGUgZmFtaWx5IGhhc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3RoIGl0YWxpYyBhbmQgb2JsaXF1ZSBzdHlsZXMgYW5kIHlvdSBuZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGtlZXAgb2JsaXF1ZSBhbmQgaXRhbGljIHN0eWxlcyBzZXBhcmF0ZSkuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoZSBpdGFsaWMgYml0cyB3aWxsIGJlIGNsZWFyZWQgd2hlbiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JsaXF1ZSBiaXQgaXMgc2V0LlxuICAgICAgLS1uby1hdXRvLXNob3J0ZW4gICAgICAgICAgICAgICBXaGVuIG5hbWUgaWQgMSwgNCBvciA2IGFyZSBsb25nZXIgdGhhblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhpbXVtIGFsbG93ZWQgKDI3IGNoYXJhY3RlcnMgZm9yIG5hbWVJRCAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzMSBmb3IgbmFtZUlEIDQgYW5kIDI5IGZvciBuYW1lSUQgNiksIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQgdHJpZXMgdG8gYXV0byBzaG9ydGVuIHRob3NlIG5hbWVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2luZyBsb25nIHdvcmRzIHdpdGggc2hvcnQgd29yZHMuIFVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIG9wdGlvbiB0byBwcmV2ZW50IHRoZSBzY3JpcHQgZnJvbSBhdXRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3J0ZW5pbmcgbmFtZXMuXG4gICAgICAtY2ZmICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoaXMgb3B0aW9uIGlzIGFjdGl2ZSwgZm9udE5hbWVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGdWxsTmFtZSwgRmFtaWx5TmFtZSBhbmQgV2VpZ2h0IHZhbHVlcyBpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgJ0NGRicgdGFibGUgd2lsbCBiZSByZWNhbGN1bGF0ZWQuXG4gICAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICAgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGFzc2lzdGFudCBpbml0LWNvbmZpZ1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBhc3Npc3RhbnQgaW5pdC1jb25maWcgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKipcblxuICAgIC1xLCAtLXF1aWV0ICBTdXBwcmVzcyB0aGUgb3ZlcndyaXRlIGNvbmZpcm1hdGlvbiBtZXNzYWdlIGlmIHRoZSBjb25maWcuanNvblxuICAgICAgICAgICAgICAgICBmaWxlIGFscmVhZHkgZXhpc3RzLlxuICAgIC0taGVscCAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuSWYsIGZvciBzb21lIHJlYXNvbiwgdGhlIHVzZXIgbmVlZHMgdG8gY3JlYXRlIG9yIHJlc2V0IHRoZSBgc3R5bGVzX21hcHBpbmdzLmpzb25gIGZpbGUgdG8gdGhlIGRlZmF1bHQgdmFsdWVzLCB0aGlzXG5jb21tYW5kIHdpbGwgc2VydmUgdGhlIHB1cnBvc2UuIE5vdCBuZWVkZWQgaWYgYGZ0Y2xpIGFzc2lzdGFudCB1aWAgaXMgdXNlZC5cblxuIyMjIGZ0Y2xpIGFzc2lzdGFudCBpbml0LWRhdGFcblxuQ3JlYXRlcyB0aGUgQ1NWIGRhdGFiYXNlIGZpbGUgYGZvbnRzX2RhdGEuY3N2YCBpbiB0aGUgYGZ0Q0xJX2ZpbGVzYCBzdWJkaXJlY3RvcnkuIE5vdCBuZWVkZWQgaWYgYGZ0Y2xpIGFzc2lzdGFudCB1aWBcbmlzIHVzZWQuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGFzc2lzdGFudCBpbml0LWRhdGEgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtcywgLS1zdHlsZXMtbWFwcGluZy1maWxlIEZJTEUgIFVzZSBhIGN1c3RvbSBzdHlsZXMgbWFwcGluZyBmaWxlIGluc3RlYWQgb2ZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBkZWZhdWx0IHN0eWxlc19tYXBwaW5nLmpzb24gZmlsZSBsb2NhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZnRDTElfZmlsZXMgZm9sZGVyLlxuICAgIC1xLCAtLXF1aWV0ICAgICAgICAgICAgICAgICAgICAgU3VwcHJlc3MgdGhlIG92ZXJ3cml0ZSBjb25maXJtYXRpb24gbWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdGhlIGZvbnRzX2RhdGEuY3N2IGFuZC9vciBzdHlsZXNfbWFwcGluZy5qc29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlcyBhbHJlYWR5IGV4aXN0IGluIHRoZSBmdENMSV9maWxlcyBmb2xkZXIuXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgY2ZmXG5cbmBDRkZgIHRhYmxlIGVkaXRvci5cblxuKipVc2FnZToqKlxuXG4gICAgZnRjbGkgY2ZmIENPTU1BTkQgW0FSR1NdXG5cbioqQ29tbWFuZHM6KipcblxuICAgIGRlbC1uYW1lc1xuICAgIGZpbmQtcmVwbGFjZVxuICAgIGZpeC12ZXJzaW9uXG4gICAgc2V0LW5hbWVzXG5cbiMjIyBmdGNsaSBjZmYgZGVsLW5hbWVzXG5cbkRlbGV0ZXMgQ0ZGIG5hbWVzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjZmYgZGVsLW5hbWVzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1mdWxsLW5hbWUgICAgICAgICAgICAgICAgICAgRGVsZXRlcyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBGdWxsTmFtZVxuICAgIC0tZmFtaWx5LW5hbWUgICAgICAgICAgICAgICAgIERlbGV0ZXMgQ0ZGLmNmZi50b3BEaWN0SW5kZXhbMF0gRmFtaWx5TmFtZVxuICAgIC0td2VpZ2h0ICAgICAgICAgICAgICAgICAgICAgIERlbGV0ZXMgQ0ZGLmNmZi50b3BEaWN0SW5kZXhbMF0gV2VpZ2h0XG4gICAgLS12ZXJzaW9uICAgICAgICAgICAgICAgICAgICAgRGVsZXRlcyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSB2ZXJzaW9uXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGNmZiBmaW5kLXJlcGxhY2VcblxuRmluZHMgYSBzdHJpbmcgaW4gdGhlIGZvbGxvd2luZyBpdGVtcyBvZiBDRkYgdGFibGUgdG9wRGljdCBhbmQgcmVwbGFjZXMgaXQgd2l0aCBhIG5ldyBzdHJpbmc6IGB2ZXJzaW9uYCwgYEZ1bGxOYW1lYCxcbmBGYW1pbHlOYW1lYCwgYFdlaWdodGAsIGBDb3B5cmlnaHRgLCBgTm90aWNlYC5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY2ZmIGZpbmQtcmVwbGFjZSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vcywgLS1vbGQtc3RyaW5nIFRFWFQgICAgICAgIFRoZSBzdHJpbmcgdG8gYmUgcmVwbGFjZWQgIFtyZXF1aXJlZF1cbiAgICAtbnMsIC0tbmV3LXN0cmluZyBURVhUICAgICAgICBUaGUgc3RyaW5nIHRvIHJlcGxhY2UgdGhlIG9sZCBzdHJpbmcgd2l0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZXF1aXJlZF1cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY2ZmIGZpeC12ZXJzaW9uXG5cbkFsaWducyB0b3BEaWN0IHZlcnNpb24gc3RyaW5nIHRvIHRoZSBgaGVhZC5mb250UmV2aXNpb25gIHZhbHVlLlxuXG5Gb3IgZXhhbXBsZSwgaWYgYGhlYWQuZm9udFJldmlzaW9uYCB2YWx1ZSBpcyAyLjAwMSwgQ0ZGIHRvcERpY3QgdmVyc2lvbiB2YWx1ZSB3aWxsIGJlIDIuMS5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY2ZmIGZpeC12ZXJzaW9uIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGNmZiBzZXQtbmFtZXNcblxuU2V0cyBDRkYgbmFtZXMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNmZiBzZXQtbmFtZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWZvbnQtbmFtZXMgVEVYVCAgICAgICAgICAgICBTZXRzIENGRi5jZmYuZm9udE5hbWVzIHZhbHVlXG4gICAgLS1mdWxsLW5hbWUgVEVYVCAgICAgICAgICAgICAgU2V0cyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBGdWxsTmFtZSB2YWx1ZVxuICAgIC0tZmFtaWx5LW5hbWUgVEVYVCAgICAgICAgICAgIFNldHMgQ0ZGLmNmZi50b3BEaWN0SW5kZXhbMF0gRmFtaWx5TmFtZSB2YWx1ZVxuICAgIC0td2VpZ2h0IFRFWFQgICAgICAgICAgICAgICAgIFNldHMgQ0ZGLmNmZi50b3BEaWN0SW5kZXhbMF0gV2VpZ2h0IHZhbHVlXG4gICAgLS12ZXJzaW9uIFRFWFQgICAgICAgICAgICAgICAgU2V0cyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSB2ZXJzaW9uIHZhbHVlXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgY29udmVydGVyXG5cbkZvbnQgY29udmVydGVyLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjb252ZXJ0ZXIgW09QVElPTlNdIENPTU1BTkQgW0FSR1NdLi4uXG5cbioqT3B0aW9ucyoqOlxuLS1oZWxwIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBmdDJ3ZlxuICAgIG90ZjJ0dGZcbiAgICB0dGMyc2ZudFxuICAgIHR0ZjJvdGZcbiAgICB2YXIyc3RhdGljXG4gICAgd2YyZnRcblxuIyMjIGZ0Y2xpIGNvbnZlcnRlciBmdDJ3ZlxuXG5Db252ZXJ0cyBTRk5UIGZvbnRzIChUVEYgb3IgT1RGKSB0byB3ZWIgZm9udHMgKFdPRkYgYW5kL29yIFdPRkYyKVxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjb252ZXJ0ZXIgZnQyd2YgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtZiwgLS1mbGF2b3IgW3dvZmZ8d29mZjJdICAgICBCeSBkZWZhdWx0LCB0aGUgc2NyaXB0IGNvbnZlcnRzIFNGTlQgZm9udHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoVHJ1ZVR5cGUgb3IgT3BlblR5cGUpIGJvdGggdG8gd29mZiBhbmQgd29mZjJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGF2b3JlZCB3ZWIgZm9udHMuIFVzZSB0aGlzIG9wdGlvbiB0byBjcmVhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmx5IHdvZmYgKC0tZmxhdm9yIHdvZmYpIG9yIHdvZmYyICgtLWZsYXZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvZmYyKSBmaWxlcy5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY29udmVydGVyIG90ZjJ0dGZcblxuQ29udmVydHMgZm9udHMgZnJvbSBPVEYgdG8gVFRGIGZvcm1hdC5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY29udmVydGVyIG90ZjJ0dGYgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY29udmVydGVyIHR0YzJzZm50XG5cbkV4dHJhY3RzIGVhY2ggZm9udCBmcm9tIGEgVFRDIGZpbGUsIGFuZCBzYXZlcyBpdCBhcyBhIFRURiBvciBPVEYgZmlsZS5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY29udmVydGVyIHR0YzJzZm50IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGNvbnZlcnRlciB0dGYyb3RmXG5cbkNvbnZlcnRzIFRURiBmb250cyAob3IgVHJ1ZVR5cGUgZmxhdm9yZWQgd29mZi93b2ZmMiB3ZWIgZm9udHMpIHRvIE9URiBmb250cyAob3IgQ0ZGIGZsYXZvcmVkIHdvZmYvd29mZjIgd2ViIGZvbnRzKS5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY29udmVydGVyIHR0ZjJvdGYgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtdCwgLS10b2xlcmFuY2UgRkxPQVQgUkFOR0UgICBDb252ZXJzaW9uIHRvbGVyYW5jZSAoMC0yLjUsIGRlZmF1bHQgMSkuIExvd1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvbGVyYW5jZSBhZGRzIG1vcmUgcG9pbnRzIGJ1dCBrZWVwcyBzaGFwZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSGlnaCB0b2xlcmFuY2UgYWRkcyBmZXcgcG9pbnRzIGJ1dCBtYXkgY2hhbmdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hhcGVzLlxuICAgIC0tc2FmZSAgICAgICAgICAgICAgICAgICAgICAgIFNvbWV0aW1lcyBRdTJDdVBlbiBtYXkgZmFpbCBvciBwcm9kdWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzdG9ydGVkIG91dGxpbmVzLiBNb3N0IG9mIHRpbWVzLCB1c2Ugb2YgJy0tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZScgd2lsbCBwcmV2ZW50IGVycm9ycyBieSBjb252ZXJ0aW5nIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSBUVEYgZm9udCB0byBhIHRlbXBvcmFyeSBPVEYgYnVpbHQgdXNpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUMkNoYXJzdHJpbmdzUGVuLCBhbmQgdGhlbiByZWNvbnZlcnRpbmcgaXQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHRlbXBvcmFyeSBUVEYgZm9udC4gVGhpcyBsYXN0IG9uZSB3aWxsIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlZCBmb3IgVFRGIHRvIE9URiBjb252ZXJzaW9uIGluc3RlYWQgb2YgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlIFRURiBmaWxlLiBUaGlzIGlzIHNsb3dlciwgYnV0IHNhZmVzdC5cbiAgICAtLXNjYWxlLXVwbSAgICAgICAgICAgICAgICAgICBTY2FsZSB1bml0cy1wZXItZW0gb2YgY29udmVydGVkIGZvbnRzIHRvIDEwMDBcbiAgICAtLWtlZXAtZ2x5cGhzICAgICAgICAgICAgICAgICBLZWVwcyBOVUxMIGFuZCBDUiBnbHlwaHMgZnJvbSB0aGUgb3V0cHV0IGZvbnRcbiAgICAtLW5vLXN1YnIgICAgICAgICAgICAgICAgICAgICBEbyBub3Qgc3Vicm91dGluaXplIGNvbnZlcnRlZCBmb250c1xuICAgIC0tY2hlY2stb3V0bGluZXMgICAgICAgICAgICAgIFBlcmZvcm1zIG9wdGlvbmFsIG91dGxpbmUgcXVhbGl0eSBjaGVja3MgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlcyBvdmVybGFwcyB3aXRoIGFmZGtvLmNoZWNrb3V0bGluZXN1Zm9cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY29udmVydGVyIHZhcjJzdGF0aWNcblxuRXhwb3J0cyBzdGF0aWMgaW5zdGFuY2VzIGZyb20gdmFyaWFibGUgZm9udHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNvbnZlcnRlciB2YXIyc3RhdGljIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLXMsIC0tc2VsZWN0LWluc3RhbmNlICAgICAgICAgQnkgZGVmYXVsdCwgdGhlIHNjcmlwdCBleHBvcnRzIGFsbCBuYW1lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlcy4gVXNlIHRoaXMgb3B0aW9uIHRvIHNlbGVjdCBjdXN0b21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBheGlzIHZhbHVlcyBmb3IgYSBzaW5nbGUgaW5zdGFuY2UuXG4gICAgLS1uby1jbGVhbnVwICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgU1RBVCB0YWJsZSBpcyBkcm9wcGVkIGFuZCBheGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZUlEcyBhcmUgZGVsZXRlZCBmcm9tIG5hbWUgdGFibGUuIFVzZSAtLW5vLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXAgdG8ga2VlcCBTVEFUIHRhYmxlIGFuZCBwcmV2ZW50IGF4aXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lSURzIHRvIGJlIGRlbGV0ZWQgZnJvbSBuYW1lIHRhYmxlLlxuICAgIC0tdXBkYXRlLW5hbWUtdGFibGUgICAgICAgICAgIFVwZGF0ZSB0aGUgaW5zdGFudGlhdGVkIGZvbnQncyBgbmFtZWAgdGFibGUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5wdXQgZm9udCBtdXN0IGhhdmUgYSBTVEFUIHRhYmxlIHdpdGggQXhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlIFRhYmxlc1xuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBjb252ZXJ0ZXIgd2YyZnRcblxuQ29udmVydHMgd2ViIGZvbnRzIChXT0ZGIGFuZCBXT0ZGMikgdG8gU0ZOVCBmb250cyAoVFRGIG9yIE9URikuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNvbnZlcnRlciB3ZjJmdCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1mLCAtLWZsYXZvciBbd29mZnx3b2ZmMl0gICAgIEJ5IGRlZmF1bHQsIHRoZSBzY3JpcHQgY29udmVydHMgYm90aCB3b2ZmIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvZmYyIGZsYXZvcmVkIHdlYiBmb250cyB0byBTRk5UIGZvbnRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFRydWVUeXBlIG9yIE9wZW5UeXBlKS4gVXNlIHRoaXMgb3B0aW9uIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udmVydCBvbmx5IHdvZmYgb3Igd29mZjIgZmxhdm9yZWQgd2ViIGZvbnRzLlxuICAgIC1kLCAtLWRlbGV0ZS1zb3VyY2UtZmlsZSAgICAgIERlbGV0ZXMgdGhlIHNvdXJjZSBmaWxlcyBhZnRlciBjb252ZXJzaW9uLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIGZpeFxuXG5BIHNldCBvZiBjb21tYW5kcyB0byBkZXRlY3QgYW5kIGF1dG9tYXRpY2FsbHkgZml4IGZvbnQgZXJyb3JzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggW09QVElPTlNdIENPTU1BTkQgW0FSR1NdLi4uXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1oZWxwICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuKipDb21tYW5kcyoqOlxuXG4gICAgY2FyZXQtb2Zmc2V0XG4gICAgZGVjb21wb3NlLXRyYW5zZm9ybWVkXG4gICAgZHVwbGljYXRlLWNvbXBvbmVudHNcbiAgICBpdGFsaWMtYW5nbGVcbiAgICBrZXJuLXRhYmxlXG4gICAgbmJzcC1taXNzaW5nXG4gICAgbmJzcC13aWR0aFxuICAgIG9zMi1yYW5nZXNcbiAgICBzdHJpcC1uYW1lc1xuXG4jIyMgZnRjbGkgZml4IGNhcmV0LW9mZnNldFxuXG5SZWNhbGN1bGF0ZXMgYGhoZWEuY2FyZXRPZmZzZXRgIHZhbHVlLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggY2FyZXQtb2Zmc2V0IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBkZWNvbXBvc2UtdHJhbnNmb3JtZWRcblxuRGVjb21wb3NlcyBjb21wb3NpdGUgZ2x5cGhzIHRoYXQgaGF2ZSB0cmFuc2Zvcm1lZCBjb21wb25lbnRzLlxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL3RyYW5zZm9ybWVkX2NvbXBvbmVudHNcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgZml4IGRlY29tcG9zZS10cmFuc2Zvcm1lZCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBmaXggZHVwbGljYXRlLWNvbXBvbmVudHNcblxuUmVtb3ZlcyBkdXBsaWNhdGUgY29tcG9uZW50cyB3aGljaCBoYXZlIHRoZSBzYW1lIHgseSBjb29yZGluYXRlcy5cblxuZm9udGJha2VyeSBjaGVjayBpZDogY29tLmdvb2dsZS5mb250cy9jaGVjay9nbHlmX25vbl90cmFuc2Zvcm1lZF9kdXBsaWNhdGVfY29tcG9uZW50c1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggZHVwbGljYXRlLWNvbXBvbmVudHMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IGl0YWxpYy1hbmdsZVxuXG5SZWNhbGN1bGF0ZXMgYHBvc3QuaXRhbGljQW5nbGVgLCBgaGhlYS5jYXJldFNsb3BlUmlzZWAsIGBoaGVhLmNhcmV0U2xvcGVSdW5gIGFuZCBzZXRzL2NsZWFycyB0aGUgaXRhbGljL29ibGlxdWUgYml0c1xuYWNjb3JkaW5nIHRvIHRoZSBjYWxjdWxhdGVkIHZhbHVlcy4gSW4gQ0ZGIGZvbnRzLCBhbHNvIGBDRkYudG9wRGljdEluZGV4WzBdLkl0YWxpY0FuZ2xlYCBpcyByZWNhbGN1bGF0ZWQuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBpdGFsaWMtYW5nbGUgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtbSwgLS1tb2RlIElOVEVHRVIgUkFOR0UgICAgICAxOiBzZXRzIG9ubHkgdGhlIGl0YWxpYyBiaXRzIGFuZCBjbGVhcnMgdGhlIG9ibGlxdWUgYml0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjogc2V0cyBpdGFsaWMgYW5kIG9ibGlxdWUgYml0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM6IHNldHMgb25seSB0aGUgb2JsaXF1ZSBiaXQgYW5kIGNsZWFycyBpdGFsaWMgYml0cyAgWzE8PXg8PTNdXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBrZXJuLXRhYmxlXG5cblNvbWUgYXBwbGljYXRpb25zIHN1Y2ggYXMgTVMgUG93ZXJQb2ludCByZXF1aXJlIGtlcm5pbmcgaW5mbyBvbiB0aGUga2VyblxudGFibGUuIE1vcmUgc3BlY2lmaWNhbGx5LCB0aGV5IHJlcXVpcmUgYSBmb3JtYXQgMCBrZXJuIHN1YnRhYmxlIGZyb20gYSBrZXJuXG50YWJsZSB2ZXJzaW9uIDAgd2l0aCBvbmx5IGdseXBocyBkZWZpbmVkIGluIHRoZSBjbWFwIHRhYmxlLlxuXG5HaXZlbiB0aGlzLCB0aGUgY29tbWFuZCBkZWxldGVzIGFsbCBrZXJuaW5nIHBhaXJzIGZyb20ga2VybiB2MCBzdWJ0YWJsZXNcbndoZXJlIG9uZSBvZiB0aGUgdHdvIGdseXBocyBpcyBub3QgZGVmaW5lZCBpbiB0aGUgY21hcCB0YWJsZS5cblxuZm9udGJha2VyeSBjaGVjayBpZDogY29tLmdvb2dsZS5mb250cy9jaGVjay9rZXJuX3RhYmxlXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBrZXJuLXRhYmxlIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBtb25vc3BhY2VcblxuSWYgdGhlIGZhbWlseSBpcyBtb25vc3BhY2VkOlxuXG4tIHBvc3QuaXNGaXhlZFBpdGNoIG11c3QgYmUgc2V0IHRvIGEgbm9uLXplcm8gdmFsdWVcbi0gT1MvMi5wYW5vc2UuYlByb3BvcnRpb24gbXVzdCBiZSBzZXQgdG8gOVxuLSBDRkYuY2ZmLlRvcERpY3RJbmRleFswXS5pc0ZpeGVkUGl0Y2ggbXVzdCBiZSBzZXQgdG8gVHJ1ZVxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL21vbm9zcGFjZVxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggbW9ub3NwYWNlIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBuYnNwLW1pc3NpbmdcblxuQ2hlY2tzIGlmIHRoZSBmb250IGhhcyBhIG5vbi1icmVha2luZyBzcGFjZSBjaGFyYWN0ZXIsIGFuZCBpZiBpdCBkb2Vzbid0LCBpdCBhZGRzIG9uZSBieSBkb3VibGUgbWFwcGluZyAnc3BhY2UnXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBuYnNwLW1pc3NpbmcgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IG5ic3Atd2lkdGhcblxuQ2hlY2tzIGlmICduYnNwYWNlJyBhbmQgJ3NwYWNlJyBnbHlwaHMgaGF2ZSB0aGUgc2FtZSB3aWR0aC4gSWYgbm90LCBjb3JyZWN0cyAnbmJzcGFjZScgd2lkdGggdG8gbWF0Y2ggJ3NwYWNlJyB3aWR0aC5cblxuZm9udGJha2VyeSBjaGVjayBpZDogY29tLmdvb2dsZS5mb250cy9jaGVjay93aGl0ZXNwYWNlX3dpZHRoc1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggbmJzcC13aWR0aCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBmaXggb3MyLXJhbmdlc1xuXG5HZW5lcmF0ZXMgYSB0ZW1wb3JhcnkgVHlwZSAxIGZyb20gdGhlIGZvbnQgZmlsZSB1c2luZyB0eCwgY29udmVydHMgdGhhdCB0byBhbiBPcGVuVHlwZSBmb250IHVzaW5nIG1ha2VvdGYsIHJlYWRzIHRoZVxuVW5pY29kZSByYW5nZXMgYW5kIGNvZGVwYWdlIHJhbmdlcyBmcm9tIHRoZSB0ZW1wb3JhcnkgT3BlblR5cGUgZm9udCBmaWxlLCBhbmQgdGhlbiB3cml0ZXMgdGhvc2UgcmFuZ2VzIHRvIHRoZVxub3JpZ2luYWwgZm9udCdzIE9TLzIgdGFibGUuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBvczItcmFuZ2VzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBzdHJpcC1uYW1lc1xuXG5SZW1vdmVzIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlcyBmcm9tIGFsbCBuYW1lcmVjb3Jkcy5cblxuZm9udGJha2VyeSBjaGVjayBpZDogY29tLmdvb2dsZS5mb250cy9jaGVjay9uYW1lL3RyYWlsaW5nX3NwYWNlc1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggc3RyaXAtbmFtZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG5cbiMjIyBmdGNsaSBmaXggdXByaWdodHNcblxuQXNzdW1pbmcgdGhhdCB0aGUgZm9udCBpcyBjb3JyZWN0bHkgc2V0IGFzIHVwcmlnaHQgKGkuZS46IGl0YWxpYyBvYmxpcXVlXG5iaXRzIGFyZSBhbGwgY2xlYXIpLCB0aGUgc2NyaXB0IHNldHMgdGhlIGZvbGxvd2luZyB2YWx1ZXM6XG5cbi0gcG9zdC5pdGFsaWNBbmdsZSA9IDAuMFxuLSBoaGVhLmNhcmV0U2xvcGVSaXNlID0gMVxuLSBoaGVhLmNhcmV0U2xvcGVSdW4gPSAwXG4tIGhoZWEuY2FyZXRPZmZzZXQgPSAwXG4tIENGRi5jZmYudG9wRGljdEluZGV4WzBdLkl0YWxpY0FuZ2xlID0gMCAob25seSBpZiB0aGUgZm9udCBoYXMgYSBDRkYgdGFibGUpXG5cblRoZSBmb250IGlzIHNhdmVkIG9ubHkgaWYgYXQgbGVhc3Qgb25lIHRhYmxlIGhhcyBjaGFuZ2VkLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggdXByaWdodHMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBoaGVhXG5cbkNvbW1hbmQgbGluZSBoaGVhIHRhYmxlIGVkaXRvci5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgaGhlYSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0tcmlzZSBJTlRFR0VSICAgICAgICAgICAgICAgIFNldHMgdGhlIGBjYXJldFNsb3BlUmlzZWAgdmFsdWUuXG4gICAgLS1ydW4gSU5URUdFUiAgICAgICAgICAgICAgICAgU2V0cyB0aGUgYGNhcmV0U2xvcGVSdW5gIHZhbHVlLlxuICAgIC0tb2Zmc2V0IElOVEVHRVIgICAgICAgICAgICAgIFNldHMgdGhlIGBjYXJldE9mZnNldGAgdmFsdWUuXG4gICAgLS1hc2NlbnQgSU5URUdFUiAgICAgICAgICAgICAgU2V0cyB0aGUgYGFzY2VudGAgdmFsdWUuXG4gICAgLS1kZXNjZW50IElOVEVHRVIgICAgICAgICAgICAgU2V0cyB0aGUgYGRlc2NlbnRgIHZhbHVlLlxuICAgIC0tbGluZWdhcCBJTlRFR0VSICAgICAgICAgICAgIFNldHMgdGhlIGBsaW5lR2FwYCB2YWx1ZS5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBtZXRyaWNzXG5cblZlcnRpY2FsIG1ldHJpY3MgdG9vbHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG1ldHJpY3MgW09QVElPTlNdIENPTU1BTkQgW0FSR1NdLi4uXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1oZWxwICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuKipDb21tYW5kcyoqOlxuXG4gICAgYWxpZ25cbiAgICBjb3B5XG4gICAgc2V0LWxpbmVnYXBcblxuIyMjIGZ0Y2xpIG1ldHJpY3MgYWxpZ25cblxuQWxpZ25zIGFsbCBmb250cyBzdG9yZWQgaW4gSU5QVVRfUEFUSCBmb2xkZXIgdG8gdGhlIHNhbWUgYmFzZWxpbmUuXG5cblRvIGFjaGlldmUgdGhpcywgdGhlIHNjcmlwdCBmaW5kcyB0aGUgbWF4aW11bSBhc2NlbmRlciBhbmQgdGhlIG1pbmltdW0gZGVzY2VuZGVyIHZhbHVlcyBvZiB0aGUgZm9udHMgc3RvcmVkIGluIHRoZVxuSU5QVVRfUEFUSCBmb2xkZXIgYW5kIGFwcGxpZXMgdGhvc2UgdmFsdWVzIHRvIGFsbCBmb250cy5cblxuVGhpcyBjYW4gcHJvZHVjZSB1bmRlc2lyZWQgZWZmZWN0cyAoYW4gZXhhZ2dlcmF0ZWQgbGluZSBoZWlnaHQpIHdoZW4gb25lIG9yIG1vcmUgZm9udHMgY29udGFpbiBzd2FzaGVzLCBmb3IgZXhhbXBsZS4gSW5cbnN1Y2ggY2FzZXMsIGl0J3MgYmV0dGVyIHRvIGNvcHkgdGhlIHZlcnRpY2FsIG1ldHJpY3MgZnJvbSBhIHRlbXBsYXRlIGZvbnQgdG8gb25lIG9yIG1vcmUgZGVzdGluYXRpb24gZm9udHMgdXNpbmcgdGhlXG5bYGZ0Y2xpIG1ldHJpY3MgY29weWBdKCNmdGNsaS1tZXRyaWNzLWNvcHktbWV0cmljcykgY29tbWFuZC5cblxuU2VlIGh0dHBzOi8va2x0Zi5kZS9kb3dubG9hZC9Gb250TWV0cmljcy1rbHRmLnBkZiBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbWV0cmljcyBhbGlnbiBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuT3B0aW9uczpcblxuICAgIC0td2l0aC1saW5lZ2FwICAgICAgICAgICAgICAgIEJ5IGRlZmF1bHQsIFNJTCBtZXRob2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaHR0cHM6Ly9zaWxucnNpLmdpdGh1Yi5pby9GREJQL2VuLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVTL0xpbmVfTWV0cmljcy5odG1sKSBpcyB1c2VkLiBUaGlzIG1lYW5zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCwgaW4gT1MvMiB0YWJsZSwgc1R5cG9Bc2NlbmRlciBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzVHlwb0Rlc2NlbmRlciB2YWx1ZXMgYXJlIHNldCwgcmVzcGVjdGl2ZWx5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVxdWFsIHRvIG1heGltdW0gcmVhbCBhc2NlbmRlciBhbmQgbWluaW11bVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYWwgZGVzY2VuZGVyLCBhbmQgdGhlIHNUeXBvTGluZUdhcCBpcyBzZXQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6ZXJvLiBVc2UgJy0td2l0aC1saW5lZ2FwJyB0byBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzVHlwb0FzY2VuZGVyIHZhbHVlIHRvIHRoZSBtYXhpbXVtIGlkZWFsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXNjZW5kZXIgKGNhbGN1bGF0ZWQgZnJvbSBsZXR0ZXJzIGIsIGYsIGYsIGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaywgbCBhbmQgdCkgYW5kIHRoZSBzVHlwb0Rlc2NlbmRlciB2YWx1ZSB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBtaW5pbXVtIGlkZWFsIGRlc2NlbmRlciAoY2FsY3VsYXRlZCBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVycyBnLCBqLCBwLCBxIGFuZCB5KS4gVGhlIHNUeXBvTGluZUdhcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY2FsY3VsYXRlZCBhcyBmb2xsb3dzOiAocmVhbCBhc2NlbmRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgYWJzKHJlYWwgZGVzY2VuZGVyKSkgLSAoaWRlYWwgYXNjZW5kZXIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFicyhpZGVhbCBkZXNjZW5kZXIpKS5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgbWV0cmljcyBjb3B5LW1ldHJpY3NcblxuQ29waWVzIHZlcnRpY2FsIG1ldHJpY3MgZnJvbSBhIHNvdXJjZSBmb250IHRvIG9uZSBvciBtb3JlIGRlc3RpbmF0aW9uIGZvbnRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBtZXRyaWNzIGNvcHkgW09QVElPTlNdXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLXMsIC0tc291cmNlLWZpbGUgRklMRSAgICAgIFNvdXJjZSBmaWxlLiBWZXJ0aWNhbCBtZXRyaWNzIGZyb20gdGhpcyBmb250XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgYXBwbGllZCB0byBhbGwgZGVzdGluYXRpb24gZm9udHMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZXF1aXJlZF1cbiAgICAtZCwgLS1kZXN0aW5hdGlvbiBQQVRIICAgICAgRGVzdGluYXRpb24gZmlsZSBvciBkaXJlY3RvcnkuICBbcmVxdWlyZWRdXG4gICAgLW8sIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFRoZSBvdXRwdXQgZGlyZWN0b3J5IHdoZXJlIHRoZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIGNyZWF0ZWQuIElmIGl0IGRvZXNuJ3QgZXhpc3QsIHdpbGwgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgQnkgZGVmYXVsdCwgb3JpZ2luYWwgaGVhZC5tb2RpZmllZCB2YWx1ZSBpcyBrZXB0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYSBmb250IGlzIHNhdmVkLiBVc2UgdGhpcyBzd2l0Y2ggdG8gc2V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQubW9kaWZpZWQgdGltZXN0YW1wIHRvIGN1cnJlbnQgdGltZS5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgbW9kaWZpZWQgZmlsZXMgYXJlIG92ZXJ3cml0dGVuLiBVc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBzd2l0Y2ggdG8gc2F2ZSB0aGVtIHRvIGEgbmV3IGZpbGUgKG51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmQgb2YgZmlsZSBuYW1lKS5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBtZXRyaWNzIHNldC1saW5lZ2FwXG5cbk1vZGlmaWVzIHRoZSBsaW5lIHNwYWNpbmcgbWV0cmljcyBpbiBvbmUgb3IgbW9yZSBmb250cy5cblxuVGhpcyBpcyBhIGZvcmsgb2YgZm9udC1saW5lIGJ5IFNvdXJjZSBGb3VuZHJ5OiBodHRwczovL2dpdGh1Yi5jb20vc291cmNlLWZvdW5kcnkvZm9udC1saW5lXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG1ldHJpY3Mgc2V0LWxpbmVnYXAgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtcCwgLS1wZXJjZW50IElOVEVHRVIgUkFOR0UgICAgIEFkanVzdCBmb250IGxpbmUgc3BhY2luZyB0byAlIG9mIFVQTSB2YWx1ZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsxPD14PD0xMDA7IHJlcXVpcmVkXVxuICAgIC1tZm4sIC0tbW9kaWZ5LWZhbWlseS1uYW1lICAgICAgQWRkcyBMRyUgdG8gdGhlIGZvbnQgZmFtaWx5IHRvIHJlZmxlY3QgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RpZmllZCBsaW5lIGdhcC5cbiAgICAtbywgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgICAgIFRoZSBvdXRwdXQgZGlyZWN0b3J5IHdoZXJlIHRoZSBvdXRwdXQgZmlsZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSB0byBiZSBjcmVhdGVkLiBJZiBpdCBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgLyAtLW5vLXJlY2FsYy10aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEtlZXBzIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ5IGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tb3ZlcndyaXRlIC8gLS1uby1vdmVyd3JpdGUgICAgT3ZlcndyaXRlcyBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlbSB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGVuZCBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIG5hbWVcblxuQ29tbWFuZCBsaW5lIGBuYW1lYCB0YWJsZSBlZGl0b3IuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgW09QVElPTlNdIENPTU1BTkQgW0FSR1NdLi4uXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1oZWxwICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuKipDb21tYW5kcyoqOlxuXG4gICAgYXBwZW5kXG4gICAgZGVsLW1hYy1uYW1lc1xuICAgIGRlbC1uYW1lc1xuICAgIGZpbmQtcmVwbGFjZVxuICAgIHNldC1uYW1lXG5cbiMjIyBmdGNsaSBuYW1lIGFwcGVuZFxuXG5BcHBlbmRzIGEgcHJlZml4LCBvciBhIHN1ZmZpeCB0byB0aGUgc3BlY2lmaWVkIG5hbWVyZWNvcmRzXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgYXBwZW5kIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW4sIC0tbmFtZS1pZCBJTlRFR0VSICAgICAgICAgTmFtZUlEIHdoZXJlIHRvIGFwcGVuZCB0aGUgcHJlZml4L3N1ZmZpeC4gVGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbiBjYW4gYmUgcmVwZWF0ZWQgdG8gcHJlcGVuZC9hcHBlbmQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nIHRvIG11bHRpcGxlIG5hbWVyZWNvcmRzLiBGb3IgZXhhbXBsZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtbiAxIC1uIDIgLW4gMTYgLW4gMTcgIFtyZXF1aXJlZF1cbiAgICAtcCwgLS1wbGF0Zm9ybS1pZCBbMHwxfDNdICAgICBVc2UgdGhpcyBvcHRpb24gdG8gYWRkIHRoZSBwcmVmaXgvc3VmZml4IG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgbmFtZXJlY29yZHMgbWF0Y2hpbmcgdGhlIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm1JRC5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA6IFVuaWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOiBNYWNpbnRvc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOiBXaW5kb3dzXG4gICAgLWwsIC0tbGFuZ3VhZ2Utc3RyaW5nIFRFWFQgICAgVXNlIHRoaXMgb3B0aW9uIHRvIGFwcGVuZCB0aGUgcHJlZml4L3N1ZmZpeFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgdG8gdGhlIG5hbWVyZWNvcmRzIG1hdGNoaW5nIHRoZSBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIHN0cmluZy5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBlcGlsb2cgZm9yIGEgbGlzdCBvZiB2YWxpZCBsYW5ndWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3MuXG4gICAgLS1wcmVmaXggVEVYVCAgICAgICAgICAgICAgICAgVGhlIHN0cmluZyB0byBiZSBwcmVwZW5kZWQgdG8gdGhlIG5hbWVyZWNvcmRzXG4gICAgLS1zdWZmaXggVEVYVCAgICAgICAgICAgICAgICAgVGhlIHN1ZmZpeCB0byBhcHBlbmQgdG8gdGhlIG5hbWVyZWNvcmRzXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIG5hbWUgZGVsLW1hYy1uYW1lc1xuXG5EZWxldGVzIGFsbCB0aGUgTWFjaW50b3NoIG5hbWVyZWNvcmRzIGZyb20gdGhlIG5hbWUgdGFibGUsIGV4Y2VwdCBuYW1lSURzIDEsIDIsIDQsIDUsIGFuZCA2LlxuXG5BY2NvcmRpbmcgdG8gQXBwbGUgKGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9mb250cy9UcnVlVHlwZS1SZWZlcmVuY2UtTWFudWFsL1JNMDYvQ2hhcDZuYW1lLmh0bWwpLCBcIm5hbWVzIHdpdGhcbnBsYXRmb3JtSUQgMSB3ZXJlIHJlcXVpcmVkIGJ5IGVhcmxpZXIgdmVyc2lvbnMgb2YgbWFjT1MuIEl0cyB1c2Ugb24gbW9kZXJuIHBsYXRmb3JtcyBpcyBkaXNjb3VyYWdlZC4gVXNlIG5hbWVzIHdpdGhcbnBsYXRmb3JtSUQgMyBpbnN0ZWFkIGZvciBtYXhpbXVtIGNvbXBhdGliaWxpdHkuIFNvbWUgbGVnYWN5IHNvZnR3YXJlLCBob3dldmVyLCBtYXkgc3RpbGwgcmVxdWlyZSBuYW1lcyB3aXRoXG5wbGF0Zm9ybUlEIDEsIHBsYXRmb3JtU3BlY2lmaWNJRCAwXCIuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgZGVsLW1hYy1uYW1lcyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0tZGVsLWFsbCAgICAgICAgICAgICAgICAgICAgIERlbGV0ZXMgYWxzbyBuYW1lSURzIDEsIDIsIDQsIDUgYW5kIDYuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIG5hbWUgZGVsLW5hbWVzXG5cbkRlbGV0ZXMgb25lIG9yIG1vcmUgbmFtZXJlY29yZHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgZGVsLW5hbWVzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW4sIC0tbmFtZS1pZCBJTlRFR0VSICAgICAgICAgTmFtZUlEKHMpIHRvIGRlbGV0ZS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgb3B0aW9uIGNhbiBiZSByZXBlYXRlZCB0byBkZWxldGUgbXVsdGlwbGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lcmVjb3JkcyBhdCBvbmNlLiBGb3IgZXhhbXBsZTogLW4gMSAtbiAyIC1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNiAgW3JlcXVpcmVkXVxuICAgIC1wLCAtLXBsYXRmb3JtLWlkIFswfDF8M10gICAgIFBsYXRmb3JtSUQgb2YgdGhlIG5hbWVyZWNvcmRzIHRvIGRlbGV0ZTpcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDA6IFVuaWNvZGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOiBNYWNpbnRvc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOiBXaW5kb3dzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBubyBwbGF0Zm9ybSBpcyBzcGVjaWZpZWQsIG5hbWVyZWNvcmRzIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBkZWxldGVkIGZyb20gYWxsIHRhYmxlcy5cbiAgICAtbCwgLS1sYW5ndWFnZS1zdHJpbmcgVEVYVCAgICBVc2UgdGhpcyBvcHRpb24gdG8gZmlsdGVyIHRoZSBuYW1lcmVjb3JkcyB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBieSBsYW5ndWFnZSBzdHJpbmcgKGZvciBleGFtcGxlOiAnaXQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkZScsICdubCcpLiBTZWUgZXBpbG9nIGZvciBhIGxpc3Qgb2YgdmFsaWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5ndWFnZSBzdHJpbmdzLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBuYW1lIGZpbmQtcmVwbGFjZVxuXG5GaW5kcyBhIHN0cmluZyBpbiB0aGUgc3BlY2lmaWVkIG5hbWVyZWNvcmRzIGFuZCByZXBsYWNlcyBpdCB3aXRoIGEgbmV3IHN0cmluZ1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBuYW1lIGZpbmQtcmVwbGFjZSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vcywgLS1vbGQtc3RyaW5nIFRFWFQgICAgICAgICBUaGUgc3RyaW5nIHRvIGJlIHJlcGxhY2VkICBbcmVxdWlyZWRdXG4gICAgLW5zLCAtLW5ldy1zdHJpbmcgVEVYVCAgICAgICAgIFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgb2xkIHN0cmluZyB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZXF1aXJlZF1cbiAgICAtbiwgLS1uYW1lLWlkIElOVEVHRVIgICAgICAgICAgbmFtZUlEcyB3aGVyZSB0byBzZWFyY2ggYW5kIHJlcGxhY2UgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZy4gSWYgbm90IHNwZWNpZmllZCwgdGhlIHN0cmluZyB3aWxsIGJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGxhY2VkIGluIGFsbCBuYW1lcmVjb3Jkcy4gVGhpcyBvcHRpb24gY2FuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIHJlcGVhdGVkIHRvIHBlcmZvcm0gc2VhcmNoIGFuZCByZXBsYWNlIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlIG5hbWVyZWNvcmRzIChlLmcuOiAtbiAxIC1uIDQgLW4gNilcbiAgICAteCwgLS1leGNsdWRlLW5hbWUtaWQgSU5URUdFUiAgTmFtZUlEIHRvIGlnbm9yZS4gVGhlIHNwZWNpZmllZCBuYW1lSUQgd29uJ3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY2hhbmdlZC4gVGhpcyBvcHRpb24gY2FuIGJlIHJlcGVhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxlIHRpbWVzIChlLmcuOiAtZXggMyAtZXggNSAtZXggMTYpLlxuICAgIC1wLCAtLXBsYXRmb3JtLWlkIFsxfDNdICAgICAgICBwbGF0Zm9ybSBpZCBbMTogbWFjaW50b3NoLCAzOiB3aW5kb3dzXS4gSWYgbm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhdGZvcm0gaXMgc3BlY2lmaWVkLCB0aGUgc3RyaW5nIHdpbGwgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWQgaW4gYm90aCB0YWJsZXMuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIG5hbWUgc2V0LW5hbWVcblxuQWRkcyBhIG5hbWVyZWNvcmQgdG8gb25lIG9yIG1vcmUgZm9udCBmaWxlcy5cblxuSWYgdGhlIG5hbWVyZWNvcmQgaXMgYWxyZWFkeSBwcmVzZW50LCBpdCB3aWxsIGJlIG92ZXJ3cml0dGVuLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBuYW1lIHNldC1uYW1lIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW4sIC0tbmFtZS1pZCBJTlRFR0VSIFJBTkdFICAgVGhlIG5hbWVJRCBvZiB0aGUgbmFtZXJlY29yZCB0byBhZGQuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzA8PXg8PTMyNzY3OyByZXF1aXJlZF1cbiAgICAtcywgLS1zdHJpbmcgVEVYVCAgICAgICAgICAgICBTdHJpbmcgdG8gd3JpdGUgaW4gdGhlIG5hbWVyZWNvcmQuICBbcmVxdWlyZWRdXG4gICAgLXAsIC0tcGxhdGZvcm0taWQgWzF8M10gICAgICAgVXNlIHRoaXMgb3B0aW9uIHRvIHdyaXRlIHRoZSBuYW1lcmVjb3JkIG9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgc3BlY2lmaWVkIHRhYmxlOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTogTWFjaW50b3NoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzogV2luZG93c1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgbm90IHNwZWNpZmllZCwgbmFtZXJlY29yZCB3aWxsIGJlIHdyaXR0ZW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiBib3RoIHRhYmxlcy5cbiAgICAtbCwgLS1sYW5ndWFnZS1zdHJpbmcgVEVYVCAgICBVc2UgdGhpcyBvcHRpb24gdG8gd3JpdGUgdGhlIG5hbWVyZWNvcmQgaW4gYVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIGRpZmZlcmVudCB0aGFuICdlbicgKGUuZy46ICdpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ25sJywgJ2RlJykuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWUgZXBpbG9nIGZvciBhIGxpc3Qgb2YgdmFsaWQgbGFuZ3VhZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmdzICBbZGVmYXVsdDogZW5dXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgb3MyXG5cbkNvbW1hbmQgbGluZSBgT1MvMmAgdGFibGUgZWRpdG9yLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBvczIgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtdmVyLCAtLXZlcnNpb24gSU5URUdFUiBSQU5HRSAgIFVwZ3JhZGVzIGBPUy8yYCB0YWJsZSB2ZXJzaW9uLiAgWzE8PXg8PTVdXG4gICAgLXdnaCwgLS13ZWlnaHQgSU5URUdFUiBSQU5HRSAgICBTZXRzIGB1c1dlaWdodENsYXNzYCB2YWx1ZS4gIFsxPD14PD0xMDAwXVxuICAgIC13ZHQsIC0td2lkdGggSU5URUdFUiBSQU5HRSAgICAgU2V0cyBgdXNXaWR0aENsYXNzYCB2YWx1ZS4gIFsxPD14PD05XVxuICAgIC1pdCwgLS1pdGFsaWMgLyAtbm8taXQsIC0tbm8taXRhbGljXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyB0aGUgSVRBTElDIGJpdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgZnNTZWxlY3Rpb25gIGJpdCAwIGFuZCBgaGVhZGAgdGFibGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBtYWNTdHlsZWAgYml0IDEpLlxuICAgIC1iZCwgLS1ib2xkIC8gLW5vLWJkLCAtLW5vLWJvbGRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBCT0xEIGJpdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgT1MvMi5mc1NlbGVjdGlvbmAgYml0IDUgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgaGVhZC5tYWNTdHlsZWAgYml0IDApLlxuICAgIC1yZywgLS1yZWd1bGFyICAgICAgICAgICAgICAgICAgU2V0cyBSRUdVTEFSIChgZnNTZWxlY3Rpb25gIGJpdCkgNiBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFycyBCT0xEIChgZnNTZWxlY3Rpb25gIGJpdCA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGhlYWQubWFjU3R5bGVgIGJpdCAwKSBhbmQgSVRBTElDXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYGZzU2VsZWN0aW9uYCBiaXQgMCwgYGhlYWQubWFjU3R5bGVgIGJpdCAxKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYml0cy4gVGhpcyBpcyBlcXVpdmFsZW50IHRvIGAtLW5vLWJvbGQgLS1uby1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0YWxpY2AuXG4gICAgLW9ibCwgLS1vYmxpcXVlIC8gLW5vLW9ibCwgLS1uby1vYmxpcXVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyB0aGUgT0JMSVFVRSBiaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgZnNTZWxlY3Rpb25gIGJpdCA5KS5cbiAgICAtdXRtLCAtLXVzZS10eXBvLW1ldHJpY3MgLyAtbm8tdXRtLCAtLW5vLXVzZS10eXBvLW1ldHJpY3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBVU0VfVFlQT19NRVRSSUNTIGJpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGBmc1NlbGVjdGlvbmAgYml0IDcpLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBzZXQsIGl0IGlzIHN0cm9uZ2x5IHJlY29tbWVuZGVkIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGxpY2F0aW9ucyB1c2UgYE9TLzIuc1R5cG9Bc2NlbmRlcmAgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYE9TLzIuc1R5cG9EZXNjZW5kZXJgICsgIGBPUy8yLnNUeXBvTGluZUdhcGBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBkZWZhdWx0IGxpbmUgc3BhY2luZyBmb3IgdGhlIGZvbnQuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZTogaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cy90eXBvZ3JhcGh5L29wZW50eXBlL3NwZWMvb3MyI2Zzc2VsZWN0aW9uXG4gICAgLXd3cywgLS13d3MtY29uc2lzdGVudCAvIC1uby13d3MsIC0tbm8td3dzLWNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBXV1MgYml0IChgZnNTZWxlY3Rpb25gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXQgOCkuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHRoZSBgT1MvMi5mc1NlbGVjdGlvbmAgYml0IGlzIHNldCwgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250IGhhcyBgbmFtZWAgdGFibGUgc3RyaW5ncyBjb25zaXN0ZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIGEgd2VpZ2h0L3dpZHRoL3Nsb3BlIGZhbWlseSB3aXRob3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJpbmcgdXNlIG9mIG5hbWUgSURzIDIxIGFuZCAyMi5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzL3R5cG9ncmFwaHkvb3BlbnR5cGUvc3BlYy9vczIjZnNzZWxlY3Rpb25cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQWxzbzogaHR0cHM6Ly90eXBlZHJhd2Vycy5jb20vZGlzY3Vzc2lvbi8zODVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDcvZm9udGxhYi03LXdpbmRvd3MtcmVhZHMtZXhwb3J0ZWQtZm9udC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUtZGlmZmVyZW50bHlcbiAgICAtdmVuZCwgLS1hY2gtdmVuZC1pZCBURVhUICAgICAgIFNldHMgdGhlIGBhY2hWZW5kSURgIHRhZyAodmVuZG9yJ3MgZm91ci1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlciBpZGVudGlmaWVyKS5cbiAgICAtZWwsIC0tZW1iZWQtbGV2ZWwgWzB8Mnw0fDhdICAgIFNldHMvY2xlYXJzIGBmc1R5cGVgIGJpdHMgMC0zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoRU1CRURESU5HX0xFVkVMKS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMDogSW5zdGFsbGFibGUgZW1iZWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOiBSZXN0cmljdGVkIExpY2Vuc2UgZW1iZWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA0OiBQcmV2aWV3ICYgUHJpbnQgZW1iZWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA4OiBFZGl0YWJsZSBlbWJlZGRpbmdcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzL3R5cG9ncmFwaHkvb3BlbnR5cGUvc3BlYy9vczIjZnN0eXBlXG4gICAgLW5zLCAtLW5vLXN1YnNldHRpbmcgLyAtYXMsIC0tYWxsb3ctc3Vic2V0dGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyBvciBjbGVhcnMgYGZzVHlwZWAgYml0IDhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChOT19TVUJTRVRUSU5HKS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGlzIGJpdCBpcyBzZXQsIHRoZSBmb250IG1heSBub3QgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNldHRlZCBwcmlvciB0byBlbWJlZGRpbmcuIE90aGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbWJlZGRpbmcgcmVzdHJpY3Rpb25zIHNwZWNpZmllZCBpbiBiaXRzIDAtM1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIDkgYWxzbyBhcHBseS5cbiAgICAtYmVvLCAtLWJpdG1hcC1lbWJlZGRpbmctb25seSAvIC1uby1iZW8sIC0tbm8tYml0bWFwLWVtYmVkZGluZy1vbmx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyBgZnNUeXBlYCBiaXQgOVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKEJJVE1BUF9FTUJFRERJTkdfT05MWSkuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFdoZW4gdGhpcyBiaXQgaXMgc2V0LCBvbmx5IGJpdG1hcHMgY29udGFpbmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgZm9udCBtYXkgYmUgZW1iZWRkZWQuIE5vIG91dGxpbmUgZGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF5IGJlIGVtYmVkZGVkLiBJZiB0aGVyZSBhcmUgbm8gYml0bWFwc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXZhaWxhYmxlIGluIHRoZSBmb250LCB0aGVuIHRoZSBmb250IGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zaWRlcmVkIHVuZW1iZWRkYWJsZSBhbmQgdGhlIGVtYmVkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZXMgd2lsbCBmYWlsLiBPdGhlciBlbWJlZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RyaWN0aW9ucyBzcGVjaWZpZWQgaW4gYml0cyAwLTMgYW5kIDhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsc28gYXBwbHkuXG4gICAgLS1yZWNhbGMtdW5pY29kZS1yYW5nZXMgICAgICAgICBSZWNhbGN1bGF0ZXMgdGhlIGB1bFVuaWNvZGVSYW5nZSpgIHZhbHVlcy5cbiAgICAtLXJlY2FsYy1jb2RlcGFnZS1yYW5nZXMgICAgICAgIFJlY2FsY3VsYXRlcyBgdWxDb2RlUGFnZVJhbmdlMWAgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgdWxDb2RlUGFnZVJhbmdlMmAgdmFsdWVzLlxuICAgIC0tcmVjYWxjLXgtaGVpZ2h0ICAgICAgICAgICAgICAgUmVjYWxjdWxhdGVzIGBzeEhlaWdodGAgdmFsdWUuXG4gICAgLS1yZWNhbGMtY2FwLWhlaWdodCAgICAgICAgICAgICBSZWNhbGN1bGF0ZXMgYHNDYXBIZWlnaHRgIHZhbHVlLlxuICAgIC0tcmVjYWxjLWl0YWxpYy1iaXRzICAgICAgICAgICAgU2V0cyBvciBjbGVhcnMgdGhlIGl0YWxpYyBiaXRzIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUy8yLmZzU2VsZWN0aW9uIGFuZCBpbiBoZWFkLm1hY1N0eWxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3JkaW5nIHRvIHRoZSBgaXRhbGljQW5nbGVgIHZhbHVlIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcG9zdGAgdGFibGUuIElmIGBpdGFsaWNBbmdsZWAgdmFsdWUgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG90aGVyIHRoYW4gMC4wLCBpdGFsaWMgYml0cyB3aWxsIGJlIHNldC4gSWZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBpdGFsaWNBbmdsZWAgdmFsdWUgaXMgMC4wLCBpdGFsaWMgYml0cyB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjbGVhcmVkLlxuICAgIC0tcmVjYWxjLW1heC1jb250ZXh0ICAgICAgICAgICAgUmVjYWxjdWxhdGVzIGB1c01heENvbnRleHRgIHZhbHVlLlxuICAgIC0taW1wb3J0LXVuaWNvZGVzIEZJTEUgICAgICAgICAgSW1wb3J0cyBgdWxVbmljb2RlUmFuZ2VzKmAgZnJvbSBhIHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udC5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICAgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBwb3N0XG5cbkNvbW1hbmQgbGluZSBgcG9zdGAgdGFibGUgZWRpdG9yLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBwb3N0IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1pdGFsaWMtYW5nbGUgRkxPQVQgUkFOR0UgICAgICBTZXRzIHRoZSBgaXRhbGljQW5nbGVgIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWy05MC4wPD14PD05MC4wXVxuICAgIC0tdWwtcG9zaXRpb24gSU5URUdFUiAgICAgICAgICAgU2V0cyB0aGUgYHVuZGVybGluZVBvc2l0aW9uYCB2YWx1ZS5cbiAgICAtLXVsLXRoaWNrbmVzcyBJTlRFR0VSICAgICAgICAgIFNldHMgdGhlIGB1bmRlcmxpbmVUaGlja25lc3NgIHZhbHVlLlxuICAgIC0tZml4ZWQtcGl0Y2ggLyAtLW5vLWZpeGVkLXBpdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyB0aGUgYGlzRml4ZWRQaXRjaGAgdmFsdWUuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGwgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlZCB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEJ5IGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgcHJpbnRcblxuUHJpbnRzIHZhcmlvdXMgZm9udCdzIGluZm9ybWF0aW9uLlxuXG4qKlVzYWdlKio6XG5mdGNsaSBwcmludCBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBmb250LWluZm9cbiAgICBmb250LW5hbWVzXG4gICAgZm9udHMtbGlzdFxuICAgIG9zMi10YWJsZVxuXG4jIyMgZnRjbGkgcHJpbnQgZm9udC1pbmZvXG5cblByaW50cyBkZXRhaWxlZCBmb250IGluZm9ybWF0aW9uLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBwcmludCBmb250LWluZm8gW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgcHJpbnQgZm9udC1uYW1lc1xuXG5QcmludHMgdGhlIGBuYW1lYCB0YWJsZSBhbmQsIGlmIHRoZSBmb250IGlzIENGRiwgdGhlIG5hbWVzIGluIHRoZSBgQ0ZGYCB0YWJsZSB0b3BEaWN0LlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBwcmludCBmb250LW5hbWVzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW1sLCAtLW1heC1saW5lcyBJTlRFR0VSICBNYXhpbXVtIG51bWJlciBvZiBsaW5lcyB0byBiZSBwcmludGVkIGZvciBlYWNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lcmVjb3JkXG4gICAgLW0sIC0tbWluaW1hbCAgICAgICAgICAgICBQcmludHMgYSBtaW5pbWFsIHNldCBvZiBuYW1lcmVjb3Jkcywgb21pdHRpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmVzIHdpdGggbmFtZUlEIG5vdCBpbiAxLCAyLCAzLCA0LCA1LCA2LCAxNiwgMTcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOCwgIDIxLCAyMiwgMjVcbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgcHJpbnQgZm9udHMtbGlzdFxuXG5QcmludHMgYSBsaXN0IG9mIGZvbnRzIHdpdGggYmFzaWMgaW5mb3JtYXRpb24uXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHByaW50IGZvbnRzLWxpc3QgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgcHJpbnQgb3MyLXRhYmxlXG5cblByaW50cyB0aGUgYE9TLzJgIHRhYmxlLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBwcmludCBvczItdGFibGUgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSB1dGlsc1xuXG5NaXNjZWxsYW5lb3VzIHV0aWxpdGllcy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgW09QVElPTlNdIENPTU1BTkQgW0FSR1NdLi4uXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1oZWxwICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuKipDb21tYW5kcyoqOlxuXG4gICAgYWRkLWRzaWdcbiAgICBjZmYtYXV0b2hpbnRcbiAgICBjZmYtY2hlY2stb3V0bGluZXNcbiAgICBjZmYtZGVoaW50XG4gICAgY2ZmLWRlc3ViclxuICAgIGNmZi1zdWJyXG4gICAgZm9udC1vcmdhbml6ZXJcbiAgICBmb250LXJlbmFtZXJcbiAgICB0dGYtYXV0b2hpbnRcbiAgICB0dGYtZGVoaW50XG4gICAgdHRmLXJlbW92ZS1vdmVybGFwc1xuXG4jIyMgZnRjbGkgdXRpbHMgYWRkLWRzaWdcblxuQWRkcyBhIGR1bW15IERTSUcgdGFibGUgdG8gZm9udHMsIHVubGVzcyB0aGUgdGFibGUgaXMgYWxyZWFkeSBwcmVzZW50LiBXT0ZGMiBmbGF2b3JlZCBmb250cyBhcmUgaWdub3JlZCwgc2luY2UgZW5jb2RlcnNcbm11c3QgcmVtb3ZlIHRoZSBEU0lHIHRhYmxlIGZyb20gd29mZjIgZm9udCBkYXRhLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBhZGQtZHNpZyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBjZmYtYXV0b2hpbnRcblxuQXV0b2hpbnRzIENGRiBmb250cyB3aXRoIHBzYXV0b2hpbnQuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGNmZi1hdXRvaGludCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0tb3B0aW1pemUgLyAtLW5vLW9wdGltaXplICAgIE9wdGltaXplIHRoZSBoaW50ZWQgZm9udCBieSBzcGVjaWFsaXppbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcnN0cmluZ3MgYW5kIGFwcGx5aW5nIHN1YnJvdXRpbmVzLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBjZmYtY2hlY2stb3V0bGluZXNcblxuUGVyZm9ybXMgYGFmZGtvLmNoZWNrb3V0bGluZXN1Zm9gIG91dGxpbmUgcXVhbGl0eSBjaGVja3MgYW5kIG92ZXJsYXBzIHJlbW92YWwuIFN1cHBvcnRzIENGRiBmb250cyBvbmx5LlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBjZmYtY2hlY2stb3V0bGluZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgdXRpbHMgY2ZmLWRlaGludFxuXG5Ecm9wcyBoaW50aW5nIGZyb20gQ0ZGIGZvbnRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBjZmYtZGVoaW50IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGNmZi1kZXN1YnJcblxuRGVzb3Vicm91dGluaXplIENGRiBmb250cy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgY2ZmLWRlc3ViciBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBjZmYtc3ViclxuXG5TdWJyb3V0aW5pemUgQ0ZGIGZvbnRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBjZmYtc3ViciBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBkZWwtdGFibGVcblxuRGVsZXRlcyB0aGUgdGFibGVzIHNwZWNpZmllZCBpbiB0aGUgdGFibGVfdGFnIGFyZ3VtZW50KHMpLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBkZWwtdGFibGUgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtdCwgLS10YWJsZS10YWcgVEVYVCAgICAgICAgICBUYWJsZVRhZyBvZiB0aGUgdGFibGUocykgdG8gZGVsZXRlLiBDYW4gYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZCB0byBkZWxldGUgbXVsdGlwbGUgdGFibGVzIGF0IG9uY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcmVxdWlyZWRdXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGZvbnQtb3JnYW5pemVyXG5cbk9yZ2FuaXplcyBmb250cyBieSBtb3ZpbmcgdGhlbSBpbnRvIGEgc3ViZGlyZWN0b3J5IG5hbWVkIGFmdGVyIHRoZSBmb250J3MgZmFtaWx5IG5hbWUsIGFuZCBldmVudHVhbGx5IGEgc3ViZGlyZWN0b3J5XG5uYW1lZCBhZnRlciB0aGUgZm9udCdzIGV4dGVuc2lvbiBhbmQgdmVyc2lvbi5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgZm9udC1vcmdhbml6ZXIgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLXJlbmFtZS1zb3VyY2UgWzF8MnwzfDR8NV0gIFJlbmFtZXMgdGhlIGZvbnQgZmlsZXMgYWNjb3JkaW5nIHRvIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZWQgc291cmNlIHN0cmluZyhzKS4gU2VlIGZ0Y2xpIHV0aWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LXJlbmFtZXIuXG4gICAgLWV4dCwgLS1leHRlbnNpb24gICAgICAgICAgICBTb3J0cyBmb250cyBieSBleHRlbnNpb24uXG4gICAgLXZlciwgLS12ZXJzaW9uICAgICAgICAgICAgICBTb3J0cyBmb250cyBieSB2ZXJzaW9uLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBmb250LXJlbmFtZXJcblxuVGFrZXMgYSBwYXRoIHRvIGEgc2luZ2xlIGZvbnQgZmlsZSBvciBkaXJlY3Rvcnkgb2YgZm9udCBmaWxlcywgZXh0cmFjdHMgZWFjaCBmb250J3MgbWV0YWRhdGEgYWNjb3JkaW5nIHRvIHRoZVxuYC0tc291cmNlYCBwYXJhbWV0ZXIgcGFzc2VkIGJ5IHRoZSB1c2VyLCBhbmQgcmVuYW1lcyB0aGUgZm9udCBmaWxlIHRvIG1hdGNoIHRoZSBtZXRhZGF0YSwgYWRkaW5nIHRoZSBjb3JyZWN0XG5leHRlbnNpb24uXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGZvbnQtcmVuYW1lciBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1zLCAtLXNvdXJjZSBbMXwyfDN8NHw1XSAgVGhlIHNvdXJjZSBzdHJpbmcocykgZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBuZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGUgbmFtZS4gRGVmYXVsdCBpcyAxIChGYW1pbHlOYW1lLVN0eWxlTmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGFsc28gYXMgZmFsbGJhY2sgbmFtZSB3aGVuIDQgb3IgNSBhcmUgcGFzc2VkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXQgdGhlIGZvbnQgaXMgVHJ1ZVR5cGVcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMTogRmFtaWx5TmFtZS1TdHlsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI6IFBvc3RTY3JpcHQgTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzogRnVsbCBGb250IE5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ6IENGRiBUb3BEaWN0IGZvbnROYW1lcyAoQ0ZGIGZvbnRzIG9ubHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1OiBDRkYgVG9wRGljdCBGdWxsTmFtZSAoQ0ZGIGZvbnRzIG9ubHkpXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuXG4jIyMgZnRjbGkgdXRpbHMgc2NhbGUtdXBtXG5cbkNoYW5nZSB0aGUgdW5pdHMtcGVyLUVNIG9mIGZvbnRzLlxuXG5IaW50aW5nIGlzIHJlbW92ZWQgZnJvbSBzY2FsZWQgVHJ1ZVR5cGUgZm9udHMgdG8gYXZvaWQgYmFkIHJlc3VsdHMuIFlvdSBtYXlcbmNvbnNpZGVyIHRvIHVzZSBgZnRjbGkgdXRpbHMgdHRmLWF1dG9oaW50YCB0byBoaW50IHRoZSBzY2FsZWQgZm9udHMuIEluXG5hZGRpdGlvbiwgQ0ZGIHNjYWxlZCBmb250cyBhcmUgbm90IHN1YnJvdXRpbml6ZWQuIFN1YnJvdXRpbmVzIGNhbiBiZSBhcHBsaWVkXG51c2luZyB0aGUgYGZ0Y2xpIHV0aWxzIGNmZi1zdWJyYCBjb21tYW5kLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBzY2FsZS11cG0gW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtdXBtIElOVEVHRVIgICAgICAgICAgICAgICAgICBOZXcgVVBNIHZhbHVlICBbZGVmYXVsdDogMTAwMF1cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG5cbiMjIyBmdGNsaSB1dGlscyB0dGYtYXV0b2hpbnRcblxuQXV0b2hpbnRzIFRydWVUeXBlIGZvbnRzIHVzaW5nIHR0ZmF1dG9oaW50LXB5LlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyB0dGYtYXV0b2hpbnQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgdXRpbHMgdHRmLWRlaGludFxuXG5Ecm9wcyBoaW50aW5nIGZyb20gVHJ1ZVR5cGUgZm9udHMuXG5cblRoaXMgaXMgYSBDTEkgZm9yIGRlaGludGVyIGJ5IFNvdXJjZSBGb3VuZHJ5OiBodHRwczovL2dpdGh1Yi5jb20vc291cmNlLWZvdW5kcnkvZGVoaW50ZXJcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgdHRmLWRlaGludCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0ta2VlcC1jdmFyICAgICAgICAgICAgICAgICAgIGtlZXAgY3ZhciB0YWJsZVxuICAgIC0ta2VlcC1jdnQgICAgICAgICAgICAgICAgICAgIGtlZXAgY3Z0IHRhYmxlXG4gICAgLS1rZWVwLWZwZ20gICAgICAgICAgICAgICAgICAga2VlcCBmcGdtIHRhYmxlXG4gICAgLS1rZWVwLWhkbXggICAgICAgICAgICAgICAgICAga2VlcCBoZG14IHRhYmxlXG4gICAgLS1rZWVwLWx0c2ggICAgICAgICAgICAgICAgICAga2VlcCBMVFNIIHRhYmxlXG4gICAgLS1rZWVwLXByZXAgICAgICAgICAgICAgICAgICAga2VlcCBwcmVwIHRhYmxlXG4gICAgLS1rZWVwLXR0ZmEgICAgICAgICAgICAgICAgICAga2VlcCB0dGZhIHRhYmxlXG4gICAgLS1rZWVwLXZkbXggICAgICAgICAgICAgICAgICAga2VlcCB2ZG14IHRhYmxlXG4gICAgLS1rZWVwLWdseWYgICAgICAgICAgICAgICAgICAgZG8gbm90IG1vZGlmeSBnbHlmIHRhYmxlXG4gICAgLS1rZWVwLWdhc3AgICAgICAgICAgICAgICAgICAgZG8gbm90IG1vZGlmeSBnYXNwIHRhYmxlXG4gICAgLS1rZWVwLW1heHAgICAgICAgICAgICAgICAgICAgZG8gbm90IG1vZGlmeSBtYXhwIHRhYmxlXG4gICAgLS1rZWVwLWhlYWQgICAgICAgICAgICAgICAgICAgZG8gbm90IG1vZGlmeSBoZWFkIHRhYmxlXG4gICAgLS12ZXJib3NlICAgICAgICAgICAgICAgICAgICAgZGlzcGxheSBzdGFuZGFyZCBvdXRwdXRcbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgdXRpbHMgdHRmLXJlbW92ZS1vdmVybGFwc1xuXG5TaW1wbGlmeSBnbHlwaHMgaW4gVHJ1ZVR5cGUgZm9udHMgYnkgbWVyZ2luZyBvdmVybGFwcGluZyBjb250b3Vycy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgdHRmLXJlbW92ZS1vdmVybGFwcyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0taWdub3JlLWVycm9ycyAgICAgICAgICAgICAgIElnbm9yZSBlcnJvcnMgd2hpbGUgcmVtb3Zpbmcgb3ZlcmxhcHMuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuKipUbyBTZXJnaWV2LiBNYXkgeW91IHJlc3QgaW4gcGVhY2UuKipcbiIs
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2Z0Q0xJL2Z0Q0xJIiw=
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImZvbnQtQ0xJIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9mdENMSS9mdENMSSI=
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvMC45LjEyLyIs
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgImZvbnR0b29scyAoPj00LjM5LjMpIiw=
ICAgICAgImFmZGtvICg9PTMuOS41KSIs
ICAgICAgImJlemllcnMgKD09MC41LjApIiw=
ICAgICAgImJyb3RsaSAoPT0xLjAuOSkiLA==
ICAgICAgImNsaWNrICg9PTguMS4zKSIs
ICAgICAgImNmZnN1YnIgKD09MC4yLjkucG9zdDEpIiw=
ICAgICAgImRlaGludGVyICg9PTQuMC4wKSIs
ICAgICAgInBhdGh2YWxpZGF0ZSAoPT0yLjUuMikiLA==
ICAgICAgInJpY2ggKD49MTMuMy41KSIs
ICAgICAgInNraWEtcGF0aG9wcyAoPT0wLjcuNCkiLA==
ICAgICAgInR0ZmF1dG9oaW50LXB5ICg9PTAuNS4xKSIs
ICAgICAgInpvcGZsaSAoPT0wLjIuMiki
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjcsIDwzLjExIiw=
ICAgICJzdW1tYXJ5IjogIkEgc2V0IG9mIGNvbW1hbmQgbGluZSB0b29scyB0byBlZGl0IGZvbnRzIHdpdGggRm9udFRvb2xzIiw=
ICAgICJ2ZXJzaW9uIjogIjAuOS4xMiIs
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxODAyODE1Nyw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjkuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjNDQ4MjcyODBhOWE2NDU1MWFlZDlmZDBjZTE2NmFjMDQ1ZTQxOTJlOTU3MzU4MGQ3OGUwZWY3ZjQ0NjJlYWQ3Iiw=
ICAgICAgICAgICJtZDUiOiAiOTgwMThmZTE0MGQ1NTEwZWI3N2YwMzBkMmIzYTM2MDciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMWI0ZGJlYzE1Y2FlZWQ1MGIxMGFmMDA2NzIyNzZiZDkyOTY3ODNkNGFkYjk1NWViY2YwZGFhYjI0OWJlNTgyYSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjAudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5ODAxOGZlMTQwZDU1MTBlYjc3ZjAzMGQyYjNhMzYwNyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0MDAyLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yM1QxMjoxNToxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yM1QxMjoxNToxNi4zNTM1NzNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jNC80OC8yNzI4MGE5YTY0NTUxYWVkOWZkMGNlMTY2YWMwNDVlNDE5MmU5NTczNTgwZDc4ZTBlZjdmNDQ2MmVhZDcvZm9udC1DTEktMC45LjAudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzMDM2MzczNTJlYzIyNzRhMzEwYzRmODcwMDFhMjBhN2YyMjI1ZTRiNGFjNGJmOGE0ZGVlNTk3OTQwMGZmMmE4Iiw=
ICAgICAgICAgICJtZDUiOiAiYTZiYmJjM2M1YmMxMjQxODQ3YWQxMjZlOWFmNmU0ZDQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjY2YjYyNGMzMDc4NzkzNDMwYjgwMzA4NmI3ZGYzZWYzYmQzYmNkOGQ1MmI5MzM1ZTFiZjBmNmZhMTA2Yzc3OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhNmJiYmMzYzViYzEyNDE4NDdhZDEyNmU5YWY2ZTRkNCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0ODY1LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yNFQxODoyNDowNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yNFQxODoyNDowNy4xMTI4NDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zMC8zNi8zNzM1MmVjMjI3NGEzMTBjNGY4NzAwMWEyMGE3ZjIyMjVlNGI0YWM0YmY4YTRkZWU1OTc5NDAwZmYyYTgvZm9udC1DTEktMC45LjEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMTAiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI0MDc5MDEzN2MxMGIzNDc1YTRiYjQ3MTZjMzgxNzdlM2M5Y2IyOGRjYmQ3ODQzYzg5ODYyZTYzNWMxYmMwYzljIiw=
ICAgICAgICAgICJtZDUiOiAiZjg5YTM3MzE1ZDNlZGEzNDBiNTM3YmEyYzZiY2E3NGYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZTA2MWVlMTc2N2ViNjE5N2RhZGUyZmM4NmY5ZGRhZjcwZDFmZmVhOWJjMGY0ZWRkZjg2NGViNDhkNWViZDRhMyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjEwLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmODlhMzczMTVkM2VkYTM0MGI1MzdiYTJjNmJjYTc0ZiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg2MDQ3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wM1QwNjoyMzo1MCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wM1QwNjoyMzo1MC42ODMzNDlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy80MC83OS8wMTM3YzEwYjM0NzVhNGJiNDcxNmMzODE3N2UzYzljYjI4ZGNiZDc4NDNjODk4NjJlNjM1YzFiYzBjOWMvZm9udF9DTEktMC45LjEwLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIyMjJjMTg1N2M4ZmY1ZTdmODExMmFjOGZhNDc1M2Y0ZTYzN2I3NzA5M2M3NjA1OTAyNWNjMzNhNGJmMjgyOTA1Iiw=
ICAgICAgICAgICJtZDUiOiAiYmI2ZDllZTA2MWMxZDQ5MjFlMTVmYjE5ZjhhZWRkZTYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiM2I5YjM1MDNiYmMxNTE3ZWI3NTE0ZDBhZDU1NjM1NzBmZGU1ZmIxNTU3MTMxYjZlYTNiZDIyNWFmMzhiYjlhOCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjEwLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiYjZkOWVlMDYxYzFkNDkyMWUxNWZiMTlmOGFlZGRlNiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4ODY0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wM1QwNjoyMzo1MSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wM1QwNjoyMzo1MS45OTI1NTlaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8yMi8yYy8xODU3YzhmZjVlN2Y4MTEyYWM4ZmE0NzUzZjRlNjM3Yjc3MDkzYzc2MDU5MDI1Y2MzM2E0YmYyODI5MDUvZm9udC1DTEktMC45LjEwLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMTEiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1NGE3YmE0ODMzYTVmNmY0Y2EyNTA2Nzk1OGFjZGQxYmQ0NmJiNmZiNjhkZWUxMWNkNDQzMDZkYTk2NjdjYzk2Iiw=
ICAgICAgICAgICJtZDUiOiAiNmQ2NDE1MTYwMGI5YWFjOTk2ZjlkYjJiMzA2NDBmZGMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNDM3YTZhYmM3YjhkZTc0ZjA2OTU5NTU3YTY4ZjkwNjU0ZDM3MDliY2NlNzdkOTdlMjRiNjI0MzVjNTFmZGZkMSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjExLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI2ZDY0MTUxNjAwYjlhYWM5OTZmOWRiMmIzMDY0MGZkYyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg2ODI3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wNVQwNjoyNTowNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wNVQwNjoyNTowNy40NDQ3ODJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81NC9hNy9iYTQ4MzNhNWY2ZjRjYTI1MDY3OTU4YWNkZDFiZDQ2YmI2ZmI2OGRlZTExY2Q0NDMwNmRhOTY2N2NjOTYvZm9udF9DTEktMC45LjExLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIyYzI1MzY3MTI1YmIxNDgxZDJmMDFhYzE1OGExMjkwMzcxYzk5Yjc4ZDc0YjhjYjg5YzM1M2VkYjg0MmZhZWI3Iiw=
ICAgICAgICAgICJtZDUiOiAiMTkxN2Y0MjQyOTc2NTZkODkwZWEwNjNlNzAyOGE1NjYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiY2I5ZTVmYjdhYzgxZDUxY2IxMGZjNmI0NmZjODgzNzNjZDY0NDczNjNiY2U3MzlmMTIyMTZiOThiNGI3NDVmZSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjExLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxOTE3ZjQyNDI5NzY1NmQ4OTBlYTA2M2U3MDI4YTU2NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk5NjQwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wNVQwNjoyNTowOSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wNVQwNjoyNTowOS4zNTkxMjZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8yYy8yNS8zNjcxMjViYjE0ODFkMmYwMWFjMTU4YTEyOTAzNzFjOTliNzhkNzRiOGNiODljMzUzZWRiODQyZmFlYjcvZm9udC1DTEktMC45LjExLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMTIiOiBb
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzY2E3ZDFhYTVjMTk0OGFlMDBmMGUxODA3YTg1MmJhNmIxNTEzNGM5NjhiM2U3MjVmYzI2NWZlYjc0OGI3Yjk1Iiw=
ICAgICAgICAgICJtZDUiOiAiODhhY2JhZDczMzcwYmIwZDIyN2RlOGE0ODFlNDhhOTYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZWVhMDQyYzQ4YTI4MzQ3Yzg3OTYyNzczZGQ5MjRjZTJiMzEzYWU2OWFlNzdkNWRjM2Q3NmQxOTBmZGVmZGQ0ZCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjEyLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI4OGFjYmFkNzMzNzBiYjBkMjI3ZGU4YTQ4MWU0OGE5NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg4MzU0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wOVQwNjoxODo0NyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wOVQwNjoxODo0Ny42OTQzNjdaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zYy9hNy9kMWFhNWMxOTQ4YWUwMGYwZTE4MDdhODUyYmE2YjE1MTM0Yzk2OGIzZTcyNWZjMjY1ZmViNzQ4YjdiOTUvZm9udF9DTEktMC45LjEyLXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJmZWM1MjU1ZmVlZjY5NmE0Njg5NzQxZmQzYTlmNzkyY2IwZGE3MDY4OTEzOWY5OTk0MTJjZWNjYWJmZTBkMmExIiw=
ICAgICAgICAgICJtZDUiOiAiNDcyZWI4NWI4YTk2OWY0Y2NkMWRiMGYxNzI2NDBhZTMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiOTAxYmVjYzY4NmRkNDIxODIxNmU1N2Y3NjNmMTA5YjExODAzOTJiYWI2YzEwYjgyZmYzMmM4Mzk4NzM4NzYwZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjEyLnRhci5neiIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI0NzJlYjg1YjhhOTY5ZjRjY2QxZGIwZjE3MjY0MGFlMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDEwMTIzOCw=
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNS0wOVQwNjoxODo1MCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNS0wOVQwNjoxODo1MC42NDgyMDJaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9mZS9jNS8yNTVmZWVmNjk2YTQ2ODk3NDFmZDNhOWY3OTJjYjBkYTcwNjg5MTM5Zjk5OTQxMmNlY2NhYmZlMGQyYTEvZm9udC1DTEktMC45LjEyLnRhci5neiIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMi4xIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiOTNmMjVkYWI4MzIxYTYyY2NlM2NkZmViMWIyMTdlOGI1NDcwOTFjOGRlMzQ1Y2IyNzdkMTRlMjhlMmJlZTlkIiw=
ICAgICAgICAgICJtZDUiOiAiNzA4ZDRhNTgyNDljZTNiN2Q1NGMzYjIyYWRjMDc0NjQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMGQwYTVmNTYzYjhhZTA5ZDY4OTUyMmU0N2UyYzA3NjU4ODlkMzQ3NGYyNThjZjAxODUwNDA4ZjNjYmRkYzU4OCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjIuMS50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3MDhkNGE1ODI0OWNlM2I3ZDU0YzNiMjJhZGMwNzQ2NCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0NDc2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yNVQwOToyMjoyNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yNVQwOToyMjoyNi42NjQ4MjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iOS8zZi8yNWRhYjgzMjFhNjJjY2UzY2RmZWIxYjIxN2U4YjU0NzA5MWM4ZGUzNDVjYjI3N2QxNGUyOGUyYmVlOWQvZm9udC1DTEktMC45LjIuMS50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiZWMxOTJiYzE4NzM2MWRhZGU2ZTlhZTRhNDc0MzY4ZmM1MWY5NjJiMzJiOWRlYWFjODQzZjcyOTNhN2U1MmE0Iiw=
ICAgICAgICAgICJtZDUiOiAiNzk4MTA0OTYyZWVkOWE3ZWQyNTM1OGM2MzdlZmQ1ZTUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYjg4ZWZkNzkyNjA1YzMyN2FmYjAwZGM1YjIzNWQ0NWI3Y2UxMzY0MWY5NTFkYjZlN2Q5YjhiNDFlNWQ5OGQwMiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjMudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3OTgxMDQ5NjJlZWQ5YTdlZDI1MzU4YzYzN2VmZDVlNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk1MjExLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yOFQxNTo1MDo1NiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yOFQxNTo1MDo1Ni42NzQ5MDhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iZS9jMS85MmJjMTg3MzYxZGFkZTZlOWFlNGE0NzQzNjhmYzUxZjk2MmIzMmI5ZGVhYWM4NDNmNzI5M2E3ZTUyYTQvZm9udC1DTEktMC45LjMudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1Njc4OTI1Yjk4MzI2ZDhiYWEzMzMwZDdjNmEwNzBkODNiOTQyZjMyYTBlYTJiMWRkY2NkMDliZTJhY2I1N2FmIiw=
ICAgICAgICAgICJtZDUiOiAiMWU1MzgxZWFmMzI1YWRjNmQ2MThkMWMyYTE1NTQyODMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjgyMGY0YTBiYzRmMmRmM2IyODEzMTBjMDJlM2RhMzg0M2JhMTRmZTZhNzJlYTg3ZjhjODQ0N2FiNDRmODQzZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjQudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxZTUzODFlYWYzMjVhZGM2ZDYxOGQxYzJhMTU1NDI4MyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk2MzYwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wMlQxMTo0NDozNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wMlQxMTo0NDozNC40Mjg5OTZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81Ni83OC85MjViOTgzMjZkOGJhYTMzMzBkN2M2YTA3MGQ4M2I5NDJmMzJhMGVhMmIxZGRjY2QwOWJlMmFjYjU3YWYvZm9udC1DTEktMC45LjQudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI4YzQzYjBjMTI2YzhkYzI2YWE2NmIyZGQ2MWNkZjY2NTc1YmJmYTA4ZmIzM2RlMDRmOGQ1MjQ2ZTAxNTc1MzQwIiw=
ICAgICAgICAgICJtZDUiOiAiMTg0YTQ0ZWMwN2M1YTA4MjhiNzEzOWQ3MTk4MWNiOGEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYzFjYWFkOGZlODE3MGY0NmFhZDVhNzVkZDliZTUzMDY2NmVlMDA2OGRkMjdlOGFhMzc0ZGIzMTExMmZmYzg3MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjUudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxODRhNDRlYzA3YzVhMDgyOGI3MTM5ZDcxOTgxY2I4YSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk3NjU3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wM1QwOTowMDozMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wM1QwOTowMDozMS41NjI1ODFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy84Yy80My9iMGMxMjZjOGRjMjZhYTY2YjJkZDYxY2RmNjY1NzViYmZhMDhmYjMzZGUwNGY4ZDUyNDZlMDE1NzUzNDAvZm9udC1DTEktMC45LjUudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhZTdmODcwYzRmY2VlN2FiYzM2Y2UyNGMzNzk1NTQ1YzY3YThkMzNiMjg4ZDFiMjYyNGM5Yzg0NmI1MzA0YTUyIiw=
ICAgICAgICAgICJtZDUiOiAiZjA4MzQzMWM0YTdiY2VkMjA1OGY4YjkzOTI1NDU1M2IiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZWI2YTVjMzNkODQwNzU4YTMxMDNiMjZmYWNlNDEwNTJkNzYzY2M5NTkwMGFiM2Y4MjM3YTQ1NDFkM2ViNjk1OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjYtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmMDgzNDMxYzRhN2JjZWQyMDU4ZjhiOTM5MjU0NTUzYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg0NDA3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wNVQwNjoxNDo1NyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wNVQwNjoxNDo1Ny42Mzk2MjZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hZS83Zi84NzBjNGZjZWU3YWJjMzZjZTI0YzM3OTU1NDVjNjdhOGQzM2IyODhkMWIyNjI0YzljODQ2YjUzMDRhNTIvZm9udF9DTEktMC45LjYtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkNzM1YTkxMjFmYjBmMzI1ZjhmYmEyZWZhNzlkYjRkNmZkZWExMWZhODQ1Y2IxZDhhZTU0YjkxYThmZGNjMzljIiw=
ICAgICAgICAgICJtZDUiOiAiZTRmZjRlZjU0NTZlNjIxNzlhZDBiMmMwYjU0ZGFlYTciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZTNiMWUzODBiM2ZhYmU0NDE0OTMzZThiZWI2ODJmNGQyYjlkMWQyNGM1NTdlN2NlMzJjZmVmMTMzOGZmNDVmMSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjYudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlNGZmNGVmNTQ1NmU2MjE3OWFkMGIyYzBiNTRkYWVhNyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4MzAwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wNVQwNjoxNDo1OCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wNVQwNjoxNDo1OC45MjU4NTBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kNy8zNS9hOTEyMWZiMGYzMjVmOGZiYTJlZmE3OWRiNGQ2ZmRlYTExZmE4NDVjYjFkOGFlNTRiOTFhOGZkY2MzOWMvZm9udC1DTEktMC45LjYudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxYjJmNGJkMzM4ZWIwMTQ4ZDBkNGRmY2Q1MTAwMmI1NzdjYTFiNmNlYjdhYTgwODc5YmVkNDcyODdhNzc4MDdkIiw=
ICAgICAgICAgICJtZDUiOiAiYmVmMTE4YmVhMmVhNmIwNzJmY2JjMzE2ZGM2NTQwYzMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNTMzY2IzNjMyN2VmOGFmZGE2MDUwOTFmOTZhOTJmNTczY2YwMWRkOWMyN2QwMmE0NDlmMGU0MWM5ZDI2OWI5YSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjctcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiZWYxMThiZWEyZWE2YjA3MmZjYmMzMTZkYzY1NDBjMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg0NDk4LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xMlQxMDo1MjozNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xMlQxMDo1MjozNC41NDY1MTRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xYi8yZi80YmQzMzhlYjAxNDhkMGQ0ZGZjZDUxMDAyYjU3N2NhMWI2Y2ViN2FhODA4NzliZWQ0NzI4N2E3NzgwN2QvZm9udF9DTEktMC45LjctcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwMzYwMzIzM2U1ZGNhZjUwMjQ3ZTEwNDNlMzI5MTJjZTIyMjM5N2E2NGUyNzVhMzkzNjZmYzk4ZjNkYWYwN2U2Iiw=
ICAgICAgICAgICJtZDUiOiAiMTg3NzhjYTZlZDRhZWNlMDI3OTg4NWMwYjc0Yzg3NDYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjJjMzZiNTY4MzE1NWI0NWUzMTBmMTdhY2IxNDlkNzUxYjcyNzE1MGFlNGYxNzM1YmQ5ZTQyZTMxZmIzNTQ3OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjcudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxODc3OGNhNmVkNGFlY2UwMjc5ODg1YzBiNzRjODc0NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4MzY0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xMlQxMDo1MjozNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xMlQxMDo1MjozNS43ODM4OTZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wMy82MC8zMjMzZTVkY2FmNTAyNDdlMTA0M2UzMjkxMmNlMjIyMzk3YTY0ZTI3NWEzOTM2NmZjOThmM2RhZjA3ZTYvZm9udC1DTEktMC45LjcudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuOCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI4MzQ1NTQxMjQwNGY3YjQzNmUyYzc3ZDk5ZDkyOWVmNDU1YzJkOGMxNDlkNGYyMmRjMWI4YTRjN2JkODgyODYyIiw=
ICAgICAgICAgICJtZDUiOiAiYzU3NjA0MTY0N2RiMDUyZjMxNTA5YzY3YWIzNDViZTYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjQ2M2JmNTA3N2Y0MDcyN2MwYzllODI3NTE3YjJjMzc5MGMwZDE5YTgwNWE0NGMzYTVlYzliOWU5Zjc4OTU3MyI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjgtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJjNTc2MDQxNjQ3ZGIwNTJmMzE1MDljNjdhYjM0NWJlNiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg1ODYxLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xN1QwNToxODoyMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xN1QwNToxODoyMS43MjMzMDRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy84My80NS81NDEyNDA0ZjdiNDM2ZTJjNzdkOTlkOTI5ZWY0NTVjMmQ4YzE0OWQ0ZjIyZGMxYjhhNGM3YmQ4ODI4NjIvZm9udF9DTEktMC45LjgtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwNjYwOWE0ZTU2Mzc5NGRhYTkzMTM0ZDhjNTQyN2RmNmJmM2EzZDRiNTJiMWQyZjY0MDczOGI2Y2Y3YjAzZWE2Iiw=
ICAgICAgICAgICJtZDUiOiAiNTlkMzI1ODlkNzk3YjRmYWY0NGQ1MmVlNjlkNmRhOTIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZWRiODU2ODhkYmExMTc1ZWNlZWQzYTkwYTJjNTE0MDM4MDkwZGI1OWFmOThhODE1ZjUzMjExZjIxNjkzZDlmMCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjgudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI1OWQzMjU4OWQ3OTdiNGZhZjQ0ZDUyZWU2OWQ2ZGE5MiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4OTI0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xN1QwNToxODoyMyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xN1QwNToxODoyMy4xMDYxNjBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wNi82MC85YTRlNTYzNzk0ZGFhOTMxMzRkOGM1NDI3ZGY2YmYzYTNkNGI1MmIxZDJmNjQwNzM4YjZjZjdiMDNlYTYvZm9udC1DTEktMC45LjgudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuOSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkZTdhOTA3MzQ0MzRkMWIxYjI0NjIxMjljMzQzMzM3ZGI4YWE1YjZjY2YyMzljODM0MGMwNDY1YzYxMjhjYTE2Iiw=
ICAgICAgICAgICJtZDUiOiAiYjRkNGJjYjA0NWM0N2JiYjNiMGU2N2Q3ZjMyNWMxOTQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNzZiZDYyMDI3YzVmNGJkZGM4YTUzNWVkODBlNmI0NzUxNTVmNGEzMjRjZWIwZWJhZWEyNzk3NTAyZTU1MmVmOSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjktcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiNGQ0YmNiMDQ1YzQ3YmJiM2IwZTY3ZDdmMzI1YzE5NCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg2MDgwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xOVQxNjo0MDo1MyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xOVQxNjo0MDo1My4xNjk1NTBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kZS83YS85MDczNDQzNGQxYjFiMjQ2MjEyOWMzNDMzMzdkYjhhYTViNmNjZjIzOWM4MzQwYzA0NjVjNjEyOGNhMTYvZm9udF9DTEktMC45LjktcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzMmEyOTJkODI3OWNmMGVjNzkwZDAxZTU1YTBiMDAyNGZlNTE4MTI4ZTE3MjhkNDJkZmJiYjU1ZTE3ZjhhNGM5Iiw=
ICAgICAgICAgICJtZDUiOiAiZWYyNTE5MTUwYmY0YzU3Y2U3MWJlM2RkMjg1MzBkMDIiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiODg1MmNiOGU4ZGE5YmUwNmFkYjQ4N2M5MjgwN2ZkNjlmZWZjYjVjNzkzNmM2NDQ4MWI2ZTNmNDlkNzdiMDM0ZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjkudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlZjI1MTkxNTBiZjRjNTdjZTcxYmUzZGQyODUzMGQwMiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4OTM1LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xOVQxNjo0MDo1NSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xOVQxNjo0MDo1NS4zMTY1MzZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zMi9hMi85MmQ4Mjc5Y2YwZWM3OTBkMDFlNTVhMGIwMDI0ZmU1MTgxMjhlMTcyOGQ0MmRmYmJiNTVlMTdmOGE0YzkvZm9udC1DTEktMC45LjkudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiM2NhN2QxYWE1YzE5NDhhZTAwZjBlMTgwN2E4NTJiYTZiMTUxMzRjOTY4YjNlNzI1ZmMyNjVmZWI3NDhiN2I5NSIs
ICAgICAgICAibWQ1IjogIjg4YWNiYWQ3MzM3MGJiMGQyMjdkZThhNDgxZTQ4YTk2Iiw=
ICAgICAgICAic2hhMjU2IjogImVlYTA0MmM0OGEyODM0N2M4Nzk2Mjc3M2RkOTI0Y2UyYjMxM2FlNjlhZTc3ZDVkYzNkNzZkMTkwZmRlZmRkNGQi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImZvbnRfQ0xJLTAuOS4xMi1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiODhhY2JhZDczMzcwYmIwZDIyN2RlOGE0ODFlNDhhOTYiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNywgPDMuMTEiLA==
ICAgICAgInNpemUiOiA4ODM1NCw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDUtMDlUMDY6MTg6NDciLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDUtMDlUMDY6MTg6NDcuNjk0MzY3WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvM2MvYTcvZDFhYTVjMTk0OGFlMDBmMGUxODA3YTg1MmJhNmIxNTEzNGM5NjhiM2U3MjVmYzI2NWZlYjc0OGI3Yjk1L2ZvbnRfQ0xJLTAuOS4xMi1weTMtbm9uZS1hbnkud2hsIiw=
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiZmVjNTI1NWZlZWY2OTZhNDY4OTc0MWZkM2E5Zjc5MmNiMGRhNzA2ODkxMzlmOTk5NDEyY2VjY2FiZmUwZDJhMSIs
ICAgICAgICAibWQ1IjogIjQ3MmViODViOGE5NjlmNGNjZDFkYjBmMTcyNjQwYWUzIiw=
ICAgICAgICAic2hhMjU2IjogIjkwMWJlY2M2ODZkZDQyMTgyMTZlNTdmNzYzZjEwOWIxMTgwMzkyYmFiNmMxMGI4MmZmMzJjODM5ODczODc2MGYi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImZvbnQtQ0xJLTAuOS4xMi50YXIuZ3oiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiNDcyZWI4NWI4YTk2OWY0Y2NkMWRiMGYxNzI2NDBhZTMiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNywgPDMuMTEiLA==
ICAgICAgInNpemUiOiAxMDEyMzgs
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDUtMDlUMDY6MTg6NTAiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDUtMDlUMDY6MTg6NTAuNjQ4MjAyWiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvZmUvYzUvMjU1ZmVlZjY5NmE0Njg5NzQxZmQzYTlmNzkyY2IwZGE3MDY4OTEzOWY5OTk0MTJjZWNjYWJmZTBkMmExL2ZvbnQtQ0xJLTAuOS4xMi50YXIuZ3oiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
