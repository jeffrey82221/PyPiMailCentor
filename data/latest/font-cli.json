ew==
ICAiaW5mbyI6IHs=
ICAgICJhdXRob3IiOiAiZnRDTEkiLA==
ICAgICJhdXRob3JfZW1haWwiOiAiZnRjbGlAcHJvdG9uLm1lIiw=
ICAgICJidWd0cmFja191cmwiOiBudWxsLA==
ICAgICJjbGFzc2lmaWVycyI6IFs=
ICAgICAgIk9wZXJhdGluZyBTeXN0ZW0gOjogT1MgSW5kZXBlbmRlbnQiLA==
ICAgICAgIlByb2dyYW1taW5nIExhbmd1YWdlIDo6IFB5dGhvbiA6OiAzIg==
ICAgIF0s
ICAgICJkZXNjcmlwdGlvbiI6ICJbIVtDb2RhY3kgQmFkZ2VdKGh0dHBzOi8vYXBwLmNvZGFjeS5jb20vcHJvamVjdC9iYWRnZS9HcmFkZS80MGUzOTliMGE4ZTA0NzEzODQ4YzM0YTU5ZDllODkxNCldKGh0dHBzOi8vYXBwLmNvZGFjeS5jb20vZ2gvZnRDTEkvZnRDTEkvZGFzaGJvYXJkP3V0bV9zb3VyY2U9Z2gmdXRtX21lZGl1bT1yZWZlcnJhbCZ1dG1fY29udGVudD0mdXRtX2NhbXBhaWduPUJhZGdlX2dyYWRlKVxuXG4jIGZ0Q0xJXG5cbmZ0Q0xJIGlzIGEgY29tbWFuZCBsaW5lIGludGVyZmFjZSBidWlsdCB3aXRoIFtjbGlja10oaHR0cHM6Ly9jbGljay5wYWxsZXRzcHJvamVjdHMuY29tL2VuLzguMC54LykgdG8gZWRpdCBmb250cyB1c2luZ1xuW0ZvbnRUb29sc10oaHR0cHM6Ly9naXRodWIuY29tL2ZvbnR0b29scy9mb250dG9vbHMpLlxuXG5QeXRob24gPj0zLjcgPDMuMTEgaXMgcmVxdWlyZWQgdG8gaW5zdGFsbCBmdENMSS5cblxuVGhlIGZvbGxvd2luZyBwYWNrYWdlcyB3aWxsIGJlIGluc3RhbGxlZCBkdXJpbmcgc2V0dXA6XG5cbi0gZm9udHRvb2xzXG4tIGFmZGtvXG4tIGJlemllcnNcbi0gYnJvdGxpXG4tIGNsaWNrXG4tIGRlaGludGVyXG4tIHBhdGh2YWxpZGF0ZVxuLSByaWNoXG4tIHNraWEtcGF0aG9wc1xuLSB0dGZhdXRvaGludC1weVxuLSB1Zm8yZnRcbi0gem9wZmxpXG5cbiMjIEluc3RhbGxhdGlvblxuXG4gICAgcGlwIGluc3RhbGwgZm9udC1jbGlcblxuT3IsIHRvIGluc3RhbGwgaW4gZWRpdGFibGUgbW9kZTpcblxuICAgIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vZnRDTEkvZnRDTEkuZ2l0XG5cbiAgICBjZCBmdENMSVxuXG4gICAgcGlwIGluc3RhbGwgLWUgLlxuXG4jIyB0bDtkclxuXG5UbyBzdGFydCB1c2luZyBmdENMSSwganVzdCBpbnN0YWxsLCBvcGVuIGEgc2hlbGwgYW5kIHR5cGUgYGZ0Y2xpIC0taGVscGAgdG8gbGlzdCBhbGwgY29tbWFuZHMuXG5cbiFbaW1hZ2VdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzgzMDYzNTA2LzIyOTUyOTY4Ny1jNzExZTg2MC1jOTNiLTQ5YzgtYTEzNy0xZTllMzdjNmEwYWYucG5nKVxuXG5cbkVhY2ggbGV2ZWwgMSBjb21tYW5kIGhhcyBpdHMgb3duIGhlbHAuLi5cblxuIVtpbWFnZV0oaHR0cHM6Ly91c2VyLWltYWdlcy5naXRodWJ1c2VyY29udGVudC5jb20vODMwNjM1MDYvMjI5NTI5ODIzLTg1MWIyNTdkLTY5YzMtNGRhYS1hNzJjLTQyYmU5NmRiMjA5Zi5wbmcpXG5cbi4uLiBhcyB3ZWxsIGFzIGVhY2ggbGV2ZWwgMiBjb21tYW5kLlxuXG4hW2ltYWdlXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS84MzA2MzUwNi8yMjk1Mjk5NTQtY2VkYzBlMWQtOWQxNS00YzZjLTgxYmUtZDg5MjNmOGRjN2Q3LnBuZylcblxuUmVtZW1iZXIgdG8gdXNlIGAtLW5vLW92ZXJ3cml0ZWAgb3IgYC1vdXRgIHRvIGF2b2lkIG92ZXJ3cml0aW5nIHlvdXIgZm9udHMgd2hlbiBleHBlcmltZW50aW5nLlxuXG4jIyBBcmd1bWVudHNcblxuLSBbSU5QVVRfUEFUSF0oI2lucHV0cGF0aClcblxuIyMgQ29tbW9uIG9wdGlvbnNcblxuLSBbLW91dCwgLS1vdXRwdXQtZGlyXSgjLW91dC0tLW91dHB1dC1kaXIpXG4tIFstLXJlY2FsYy10aW1lc3RhbXBdKCMtLXJlY2FsYy10aW1lc3RhbXApXG4tIFstLW5vLW92ZXJ3cml0ZV0oIy0tbm8tb3ZlcndyaXRlKVxuXG4jIyBDb21tYW5kcyBsaXN0XG5cbi0gWyoqYXNzaXN0YW50KipdKCNmdGNsaS1hc3Npc3RhbnQpXG5cbiAgLSBbdWldKCNmdGNsaS1hc3Npc3RhbnQtdWkpXG4gIC0gW2NvbW1pdF0oI2Z0Y2xpLWFzc2lzdGFudC1jb21taXQpXG4gIC0gW2luaXQtY29uZmlnXSgjZnRjbGktYXNzaXN0YW50LWluaXQtY29uZmlnKVxuICAtIFtpbml0LWRhdGFdKCNmdGNsaS1hc3Npc3RhbnQtaW5pdC1kYXRhKVxuXG4tIFsqKmNmZioqXSgjZnRjbGktY2ZmKVxuXG4gIC0gW2RlbC1uYW1lc10oI2Z0Y2xpLWNmZi1kZWwtbmFtZXMpXG4gIC0gW2ZpbmQtcmVwbGFjZV0oI2Z0Y2xpLWNmZi1maW5kLXJlcGxhY2UpXG4gIC0gW2ZpeC12ZXJzaW9uXSgjZnRjbGktY2ZmLWZpeC12ZXJzaW9uKVxuICAtIFtzZXQtbmFtZXNdKCNmdGNsaS1jZmYtc2V0LW5hbWVzKVxuXG4tIFsqKmNvbnZlcnRlcioqXSgjZnRjbGktY29udmVydGVyKVxuXG4gIC0gW290ZjJ0dGZdKCNmdGNsaS1jb252ZXJ0ZXItb3RmMnR0ZilcbiAgLSBbdHRmMm90Zl0oI2Z0Y2xpLWNvbnZlcnRlci10dGYyb3RmKVxuICAtIFtmdDJ3Zl0oI2Z0Y2xpLWNvbnZlcnRlci1mdDJ3ZilcbiAgLSBbd2YyZnRdKCNmdGNsaS1jb252ZXJ0ZXItd2YyZnQpXG4gIC0gW3ZhcjJzdGF0aWNdKCNmdGNsaS1jb252ZXJ0ZXItdmFyMnN0YXRpYylcbiAgLSBbdHRjMnNmbnRdKCNmdGNsaS1jb252ZXJ0ZXItdHRjMnNmbnQpXG5cbi0gWyoqZml4KipdKCNmdGNsaS1maXgpXG5cbiAgLSBbY2FyZXQtb2Zmc2V0XSgjZnRjbGktZml4LWNhcmV0LW9mZnNldClcbiAgLSBbZGVjb21wb3NlLXRyYW5zZm9ybWVkXSgjZnRjbGktZml4LWRlY29tcG9zZS10cmFuc2Zvcm1lZClcbiAgLSBbZHVwbGljYXRlLWNvbXBvbmVudHNdKCNmdGNsaS1maXgtZHVwbGljYXRlLWNvbXBvbmVudHMpXG4gIC0gW2l0YWxpYy1hbmdsZV0oI2Z0Y2xpLWZpeC1pdGFsaWMtYW5nbGUpXG4gIC0gW2tlcm4tdGFibGVdKCNmdGNsaS1maXgta2Vybi10YWJsZSlcbiAgLSBbbW9ub3NwYWNlXSgjZnRjbGktZml4LW1vbm9zcGFjZSlcbiAgLSBbbmJzcC1taXNzaW5nXSgjZnRjbGktZml4LW5ic3AtbWlzc2luZylcbiAgLSBbbmJzcC13aWR0aF0oI2Z0Y2xpLWZpeC1uYnNwLXdpZHRoKVxuICAtIFtvczItcmFuZ2VzXSgjZnRjbGktZml4LW9zMi1yYW5nZXMpXG4gIC0gW3N0cmlwLW5hbWVzXSgjZnRjbGktZml4LXN0cmlwLW5hbWVzKVxuXG4tIFsqKm1ldHJpY3MqKl0oI2Z0Y2xpLW1ldHJpY3MpXG5cbiAgLSBbYWxpZ25dKCNmdGNsaS1tZXRyaWNzLWFsaWduKVxuICAtIFtjb3B5LW1ldHJpY3NdKCNmdGNsaS1tZXRyaWNzLWNvcHktbWV0cmljcylcbiAgLSBbc2V0LWxpbmVnYXBdKCNmdGNsaS1tZXRyaWNzLXNldC1saW5lZ2FwKVxuXG4tIFsqKm5hbWUqKl0oI2Z0Y2xpLW5hbWUpXG5cbiAgLSBbYXBwZW5kXSgjZnRjbGktbmFtZS1hcHBlbmQpXG4gIC0gW2RlbC1tYWMtbmFtZXNdKCNmdGNsaS1uYW1lLWRlbC1tYWMtbmFtZXMpXG4gIC0gW2RlbC1uYW1lc10oI2Z0Y2xpLW5hbWUtZGVsLW5hbWVzKVxuICAtIFtmaW5kLXJlcGxhY2VdKCNmdGNsaS1uYW1lLWZpbmQtcmVwbGFjZSlcbiAgLSBbZmluZC1zZXQtbmFtZV0oI2Z0Y2xpLW5hbWUtc2V0LW5hbWUpXG5cbi0gWyoqb3MyKipdKCNmdGNsaS1vczIpXG5cbi0gWyoqcG9zdCoqXSgjZnRjbGktcG9zdClcblxuLSBbKipwcmludCoqXSgjZnRjbGktcHJpbnQpXG4gIC0gW2ZvbnQtaW5mb10oI2Z0Y2xpLXByaW50LWZvbnQtaW5mbylcbiAgLSBbZm9udC1uYW1lc10oI2Z0Y2xpLXByaW50LWZvbnQtbmFtZXMpXG4gIC0gW2ZvbnQtZm9udHMtbGlzdF0oI2Z0Y2xpLXByaW50LWZvbnRzLWxpc3QpXG4gIC0gW29zMi10YWJsZV0oI2Z0Y2xpLXByaW50LW9zMi10YWJsZSlcblxuLSBbKip1dGlscyoqXSgjZnRjbGktdXRpbHMpXG4gIC0gW2FkZC1kc2lnXSgjZnRjbGktdXRpbHMtYWRkLWRzaWcpXG4gIC0gW2NmZi1hdXRvaGludF0oI2Z0Y2xpLXV0aWxzLWNmZi1hdXRvaGludClcbiAgLSBbY2ZmLWNoZWNrLW91dGxpbmVzXSgjZnRjbGktdXRpbHMtY2ZmLWNoZWNrLW91dGxpbmVzKVxuICAtIFtjZmYtZGVoaW50XSgjZnRjbGktdXRpbHMtY2ZmLWRlaGludClcbiAgLSBbY2ZmLWRlc3Vicl0oI2Z0Y2xpLXV0aWxzLWNmZi1kZXN1YnIpXG4gIC0gW2NmZi1zdWJyXSgjZnRjbGktdXRpbHMtY2ZmLXN1YnIpXG4gIC0gW2RlbC10YWJsZV0oI2Z0Y2xpLXV0aWxzLWRlbC10YWJsZSlcbiAgLSBbZm9udC1vcmdhbml6ZXJdKCNmdGNsaS11dGlscy1mb250LW9yZ2FuaXplcilcbiAgLSBbZm9udC1yZW5hbWVyXSgjZnRjbGktdXRpbHMtZm9udC1yZW5hbWVyKVxuICAtIFt0dGYtYXV0b2hpbnRdKCNmdGNsaS11dGlscy10dGYtYXV0b2hpbnQpXG4gIC0gW3R0Zi1kZWhpbnRdKCNmdGNsaS11dGlscy10dGYtZGVoaW50KVxuICAtIFt0dGYtcmVtb3ZlLW92ZXJsYXBzXSgjZnRjbGktdXRpbHMtdHRmLXJlbW92ZS1vdmVybGFwcylcblxuIyMgQXJndW1lbnRzXG5cbiMjIyBJTlBVVF9QQVRIXG5cbldpdGggc29tZSBleGNlcHRpb25zLCBhbGwgZnRDTEkgc3ViY29tbWFuZHMgcHJvY2VzcyBmaWxlcyBpbiB0aGUgZ2l2ZW4gcGF0aC4gVGhlIGBJTlBVVF9QQVRIYCBhcmd1bWVudCBjYW4gYmUgZ2VuZXJhbGx5XG5hIHNpbmdsZSBmb250IGZpbGUgb3IgYSBmb2xkZXIgY29udGFpbmluZyBvbmUgb3IgbW9yZSBmb250cy4gSW4gY2FzZSBhIGRpcmVjdG9yeSBpcyBwYXNzZWQgYXMgSU5QVVRfUEFUSCwgYWxsIGZvbnRzXG5zdG9yZWQgaW4gaXQgd2lsbCBiZSBwcm9jZXNzZWQsIHdpdGggdGhlIGV4Y2x1c2lvbiBvZiBmb250cyBzdG9yZWQgaW4gc3ViZGlyZWN0b3JpZXMuXG5cbiMjIENvbW1vbiBvcHRpb25zXG5cblRoZSBgLW91dCwgLW91dHB1dC1kaXJgLCBgLS1yZWNhbGMtdGltZXN0YW1wYCBhbmQgYC0tbm8tb3ZlcndyaXRlYCBvcHRpb25zIGNhbiBiZSB1c2VkIGluIGFsbCBzdWJjb21tYW5kcywgdW5sZXNzXG5vdGhlcndpc2Ugc3BlY2lmaWVkLlxuXG4jIyMgLW91dCwgLS1vdXRwdXQtZGlyXG5cblRoZSBkaXJlY3Rvcnkgd2hlcmUgdGhlIG91dHB1dCBmaWxlcyBhcmUgdG8gYmUgc2F2ZWQuIElmIGBvdXRwdXRfZGlyYCBpcyBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWQgdG8gdGhlIHNhbWVcbmZvbGRlci4gSWYgdGhlIHVzZXIgcGFzc2VzIGEgZGlyZWN0b3J5IHRoYXQgZG9lc24ndCBleGlzdCwgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IGNyZWF0ZWQuXG5cbiMjIyAtLXJlY2FsYy10aW1lc3RhbXBcblxuQnkgZGVmYXVsdCwgb3JpZ2luYWwgYGhlYWQubW9kaWZpZWRgIHZhbHVlIGlzIGtlcHQgd2hlbiBhIGZvbnQgaXMgc2F2ZWQuIFVzZSB0aGlzIG9wdGlvbiB0byBzZXQgYGhlYWQubW9kaWZpZWRgXG50aW1lc3RhbXAgdG8gY3VycmVudCB0aW1lLlxuXG4jIyMgLS1uby1vdmVyd3JpdGVcblxuQnkgZGVmYXVsdCwgbW9kaWZpZWQgZmlsZXMgYXJlIG92ZXJ3cml0dGVuLiBVc2UgdGhpcyBzd2l0Y2ggdG8gc2F2ZSB0aGVtIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbm9mIGZpbGUgbmFtZSwgc28gdGhhdCBUaW1lcy1Cb2xkLm90ZiBiZWNvbWVzIFRpbWVzQm9sZCMxLm90ZikuXG5cbiMjIyBVc2FnZSBleGFtcGxlczpcblxuYGZ0Y2xpIG1ldHJpY3MgYWxpZ24gXCJDOlxcRm9udHNcIiAtb3V0IFwiQzpcXEZvbnRzXFxBbGlnbmVkXCJgXG5cbmBmdGNsaSBtZXRyaWNzIGNvcHkgLXMgXCJDOlxcRm9udHNcXFNvdXJjZUZvbnQub3RmXCIgLWQgXCJDOlxcRm9udHNcXFwiIC0tcmVjYWxjLXRpbWVzdGFtcGBcblxuYGZ0Y2xpIG1ldHJpY3MgY29weSAtcyBcIkM6XFxGb250c1xcU291cmNlRm9udC5vdGZcIiAtZCBcIkM6XFxGb250c1xcXCIgLS1uby1vdmVyd3JpdGVgXG5cbiMjIGZ0Y2xpIGFzc2lzdGFudFxuXG5BIHNldCBvZiB0b29scyB0byBjb3JyZWN0bHkgY29tcGlsZSB0aGUgJ25hbWUnIHRhYmxlIGFuZCBzZXQgcHJvcGVyIHZhbHVlcyBmb3IgdXNXZWlnaHRDbGFzcywgdXNXaWR0aENsYXNzLCBCb2xkLCBJdGFsaWNcbmFuZCBPYmxpcXVlIGJpdHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGFzc2lzdGFudFxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICAgIGNvbW1pdFxuICAgICAgaW5pdC1jb25maWdcbiAgICAgIGluaXQtZGF0YVxuICAgICAgdWlcblxuVGhlIGxvZ2ljYWwgc3RlcHMgYXJlIHRoZSBmb2xsb3dpbmc6XG5cbjEuIENyZWF0ZSBhIENTViBmaWxlIGNvbnRhaW5pbmcsIGZvciBlYWNoIGZvbnQgaW4gdGhlIHNvdXJjZSBwYXRoLCB0aGUgZm9sbG93aW5nIGRhdGE6XG4gICAtIEZpbGUgcGF0aFxuICAgLSBGYW1pbHkgbmFtZVxuICAgLSB1c1dpZHRoQ2xhc3NcbiAgIC0gdXNXZWlnaHRDbGFzc1xuICAgLSBTbG9wZSBjbGFzc2VzIChJdGFsaWMgYW5kL29yIE9ibGlxdWUpIGFuZCBCb2xkIGZsYWdcbiAgIC0gV2VpZ2h0LCBXaWR0aCBhbmQgU2xvcGUgc3R5bGUgbmFtZXNcbjIuIFJldmlldyB0aGUgQ1NWIGZpbGVcbjMuIFdyaXRlIGRhdGEgZnJvbSB0aGUgQ1NWIGZpbGUgdG8gdGhlIHRhcmdldCBmb250czogdGhpcyB3aWxsIGNvbXBpbGUgdGhlIG5hbWUgdGFibGUgYW5kIHNldCB0aGUgcHJvcGVyXG4gICB1c1dpZHRoQ2xhc3MsIHVzV2VpZ2h0Q2xhc3MgU2xvcGUgY2xhc3MgYW5kIEJvbGQgdmFsdWVzLlxuXG4qKlN0ZXAgMSoqIGNhbiBiZSBleGVjdXRlZCB3aXRoIG9uZSBvZiB0aGUgZm9sbG93aW5nIGNvbW1hbmRzOlxuXG4tIGBmdGNsaSBhc3Npc3RhbnQgaW5pdC1kYXRhIElOUFVUX1BBVEhgXG4tIGBmdGNsaSBhc3Npc3RhbnQgdWkgSU5QVVRfUEFUSGBcblxuVGhlIGZpcnN0IGNvbW1hbmQgd2lsbCBjcmVhdGUgYSBkaXJlY3RvcnkgbmFtZWQgYGZ0Q0xJX2ZpbGVzYCBjb250YWluaW5nIHR3byBmaWxlczogYGZvbnRzX2RhdGEuY3N2YCBhbmRcbmBzdHlsZXNfbWFwcGluZy5qc29uYC4gVGhlIHNlY29uZCBvbmUgd2lsbCBvcGVuIHRoZSBjb21tYW5kIGxpbmUgdXNlciBpbnRlcmZhY2UgdGhhdCBhbGxvd3MgdG8gZWRpdCBib3RoLlxuXG5UaGUgYHN0eWxlc19tYXBwaW5nLmpzb25gIGlzIGNyZWF0ZWQgYXQgZmlyc3QsIHVubGVzcyBpdCBhbHJlYWR5IGV4aXN0cywgYW5kIGNvbnRhaW5zIHRoZSBkZWZhdWx0IFN0eWxlIE5hbWVzIHRvIHBhaXJcbndpdGggdXNXaWR0aENsYXNzLCB1c1dlaWdodENsYXNzIGFuZCBTbG9wZSBjbGFzcy4gVGhlIGRlZmF1bHQgdmFsdWVzIGFyZSB0aGUgZm9sbG93aW5nOlxuXG4gICAge1xuICAgICAgICBcIml0YWxpY3NcIjogW1wiSXRcIiwgXCJJdGFsaWNcIl0sXG4gICAgICAgIFwib2JsaXF1ZXNcIjogW1wiT2JsXCIsIFwiT2JsaXF1ZVwiXSxcbiAgICAgICAgXCJ3ZWlnaHRzXCI6IHtcbiAgICAgICAgICAgIFwiMjUwXCI6IFtcIlRoXCIsIFwiVGhpblwiIF0sXG4gICAgICAgICAgICBcIjI3NVwiOiBbXCJYTHRcIiwgXCJFeHRyYUxpZ2h0XCJdLFxuICAgICAgICAgICAgXCIzMDBcIjogW1wiTHRcIiwgXCJMaWdodFwiXSxcbiAgICAgICAgICAgIFwiMzUwXCI6IFtcIkJrXCIsIFwiQm9va1wiXSxcbiAgICAgICAgICAgIFwiNDAwXCI6IFtcIlJnXCIsIFwiUmVndWxhclwiXSxcbiAgICAgICAgICAgIFwiNTAwXCI6IFtcIk1kXCIsIFwiTWVkaXVtXCJdLFxuICAgICAgICAgICAgXCI2MDBcIjogW1wiU0JkXCIsIFwiU2VtaUJvbGRcIl0sXG4gICAgICAgICAgICBcIjcwMFwiOiBbXCJCZFwiLCBcIkJvbGRcIl0sXG4gICAgICAgICAgICBcIjgwMFwiOiBbXCJYQmRcIiwgXCJFeHRyYUJvbGRcIl0sXG4gICAgICAgICAgICBcIjg1MFwiOiBbXCJIdnlcIiwgXCJIZWF2eVwiXSxcbiAgICAgICAgICAgIFwiOTAwXCI6IFtcIkJsa1wiLFwiQmxhY2tcIl0sXG4gICAgICAgICAgICBcIjk1MFwiOiBbXCJVbHRcIiwgXCJVbHRyYVwiXVxuICAgICAgICB9LFxuICAgICAgICBcIndpZHRoc1wiOiB7XG4gICAgICAgICAgICBcIjFcIjogW1wiQ21cIiwgXCJDb21wcmVzc2VkXCJdLFxuICAgICAgICAgICAgXCIyXCI6IFtcIlhDblwiLCBcIkV4dHJhQ29uZGVuc2VkXCJdLFxuICAgICAgICAgICAgXCIzXCI6IFtcIkNuXCIsIFwiQ29uZGVuc2VkXCJdLFxuICAgICAgICAgICAgXCI0XCI6IFtcIk5yXCIsIFwiTmFycm93XCJdLFxuICAgICAgICAgICAgXCI1XCI6IFtcIk5vclwiLFwiTm9ybWFsXCJdLFxuICAgICAgICAgICAgXCI2XCI6IFtcIldkXCIsIFwiV2lkZVwiXSxcbiAgICAgICAgICAgIFwiN1wiOiBbXCJFeHRcIiwgXCJFeHRlbmRlZFwiXSxcbiAgICAgICAgICAgIFwiOFwiOiBbXCJYRXh0XCIsIFwiRXh0cmFFeHRlbmRlZFwiXSxcbiAgICAgICAgICAgIFwiOVwiOiBbXCJFeHBcIiwgXCJFeHBhbmRlZFwiXVxuICAgICAgICB9XG4gICAgfVxuXG5BZnRlciBjcmVhdGlvbiBvZiBgc3R5bGVzX21hcHBpbmcuanNvbmAsIGFsbCB2YWxpZCBmb250IGZpbGVzIGZvdW5kIGluIGBJTlBVVF9QQVRIYCBhcmUgcGFyc2VkIHRvIHJldHJpZXZlIEZhbWlseSBOYW1lLFxudXNXaWR0aENsYXNzLCB1c1dlaWdodENsYXNzLCBTbG9wZSBDbGFzcyAoVXByaWdodCwgSXRhbGljIG9yIE9ibGlxdWUpLiBUaGUgcHJvY2VzcyBzZWFyY2hlcyBmb3IgbWF0Y2hlcyBiZXR3ZWVuIHRoZVxucmV0cmlldmVkIHZhbHVlcyBhbmQgdGhlIEpTT04gZGF0YSwgdHJ5aW5nIHRvIGRldGVybWluZSB0aGUgcHJvcGVyIHN0eWxlIG5hbWVzLiBUaGUgcmVzdWx0cyBhcmUgd3JpdHRlbiBpbnRvIHRoZVxuYGZvbnRzX2RhdGEuY3N2YCBmaWxlLlxuXG5UaGUgYGZvbnRzX2RhdGEuY3N2YCBjb250YWlucyB0aGUgZm9sbG93aW5nIGNvbHVtbnM6XG5cbi0gYGZpbGVfbmFtZWA6IHBhdGggdG8gdGhlIGZvbnQgZmlsZVxuLSBgZmFtaWx5X25hbWVgOiB0aGUgZm9udCdzIGZhbWlseSBuYW1lLCByZXRyaWV2ZWQgcmVhZGluZyB0aGUgbmFtZSB0YWJsZVxuLSBgaXNfYm9sZGA6IFRydWUgaWYgdGhlIGJvbGQgYml0cyBhcmUgc2V0LCBGYWxzZSBpZiB0aGV5IGFyZSBub3Qgc2V0LiBUaGlzIGNvbHVtbiBpcyBwcmVzZW50IG9ubHkgZm9yIGNvbXBsZXRlbmVzcyxcbiAgYnV0IGl0J3MgdmFsdWUgd2lsbCBiZSBpZ25vcmVkLiBBIGZvbnQgd2lsbCBiZSBzZXQgYXMgYm9sZCBvbmx5IGFuZCBvbmx5IGlmLCB3aGlsZSBydW5uaW5nIHRoZSBgZnRjbGkgYXNzaXN0YW50IGNvbW1pdGBcbiAgY29tbWFuZCwgdGhlIHVzZXIgd2lsbCBjaG9vc2UgdG8gdXNlIGxpbmtlZCBzdHlsZXMuXG4gICgtbHMgLyAtLWxpbmtlZCBzdHlsZXMpIG9wdGlvbiB3aGlsZSB3cml0aW5nIGRhdGEgZnJvbSBDU1YgdG8gZm9udHNcbi0gYGlzX2l0YWxpY2A6IFRydWUgaWYgdGhlIGl0YWxpYyBiaXRzIGFyZSBzZXQsIEZhbHNlIGlmIHRoZXkgYXJlIG5vdCBzZXRcbi0gYGlzX29ibGlxdWVgOiBUcnVlIGlmIHRoZSBvYmxpcXVlIGJpdCBpcyBzZXQsIEZhbHNlIGlmIGl0J3Mgbm90IHNldFxuLSBgdXNfd2lkdGhfY2xhc3NgOiB1c1dpZHRoQ2xhc3MgdmFsdWVcbi0gYHVzX3dlaWdodF9jbGFzc2A6IHVzV2VpZ2h0Q2xhc3MgdmFsdWVcbi0gYHdkdGA6IHNob3J0IGxpdGVyYWwgZm9yIHRoZSBXaWR0aCBzdHlsZSBuYW1lXG4tIGB3aWR0aGA6IGxvbmcgbGl0ZXJhbCBmb3IgdGhlIFdpZHRoIHN0eWxlIG5hbWVcbi0gYHdndGA6IHNob3J0IGxpdGVyYWwgZm9yIHRoZSBXZWlnaHQgc3R5bGUgbmFtZVxuLSBgd2VpZ2h0YDogbG9uZyBsaXRlcmFsIGZvciB0aGUgV2VpZ2h0IHN0eWxlIG5hbWVcbi0gYHNscGA6IHNob3J0IGxpdGVyYWwgZm9yIHRoZSBTbG9wZSBzdHlsZSBuYW1lXG4tIGBzbG9wZWA6IGxvbmcgbGl0ZXJhbCBmb3IgdGhlIFNsb3BlIHN0eWxlIG5hbWVcbi0gYHNlbGVjdGVkYDogMCB0byBleGNsdWRlIHRoZSBmaWxlIHdoaWxlIHdyaXRpbmcgZGF0YSBmcm9tIENTViB0byBmb250cywgMSB0byBpbmNsdWRlIHRoZSBmaWxlXG5cbkJvdGggZmlsZXMgY2FuIGJlIGVkaXRlZCBtYW51YWxseSBvciB1c2luZyB0aGUgY2hhcmFjdGVyIGludGVyZmFjZS5cblxuKipTdGVwIDIqKiBjYW4gYmUgZXhlY3V0ZWQsIGFmdGVyIHJldmlld2luZyBgZm9udHNfZGF0YS5jc3ZgLCBydW5uaW5nIHRoZSBgZnRjbGkgYXNzaXN0YW50IGNvbW1pdGAgY29tbWFuZC5cblxuIyMjIGZ0Y2xpIGFzc2lzdGFudCB1aVxuXG5PcGVucyB0aGUgY2hhcmFjdGVyIHVzZXIgaW50ZXJmYWNlIHRvIGVkaXQgdGhlIGBzdHlsZXNfbWFwcGluZy5qc29uYCBhbmQgYGZvbnRzX2RhdGEuY3N2YCBmaWxlcy4gSWYgb25lIG9yIGJvdGggZmlsZXNcbmRvIG5vdCBleGlzdCwgdGhleSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY3JlYXRlZC5cblxuKipVc2FnZSoqXG5cbiAgICBmdGNsaSBhc3Npc3RhbnQgdWkgSU5QVVRfUEFUSFxuXG5UaGUgbWFpbiB3aW5kb3cgZGlzcGxheXMgYSBsaXN0IG9mIGZvbnRzIGZvdW5kIGluIGBJTlBVVF9QQVRIYCBhbmQgYWxsb3dzIHRvIGFjY2VzcyB0aGUgZWRpdG9ycyBmb3JcbmBzdHlsZXNfbWFwcGluZy5qc29uYCBhbmQgYGZvbnRzX2RhdGEuY3N2YC5cblxuVGhlIE1haW4gV2luZG93OlxuXG4hW2ltYWdlXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS84MzA2MzUwNi8yMjY5MzU2OTMtNTE5MzA5YTQtYzc2Yy00MzIxLThmMWQtNWJjMGU3YTMyZGU1LnBuZyBcImZ0Q0xJIGFzc2lzdGFudCBtYWluIHdpbmRvd1wiKVxuXG5UaGUgU3R5bGVzIE1hcHBpbmcgRWRpdG9yOlxuXG4hW2ltYWdlXShodHRwczovL3VzZXItaW1hZ2VzLmdpdGh1YnVzZXJjb250ZW50LmNvbS84MzA2MzUwNi8yMjcxNTAzNDQtNmZmZDU3MzAtYzc1Yy00ODM2LWE4YTctY2NiMTUxOGQ2NDE0LnBuZyBcIlN0eWxlcyBNYXBwaW5nIEVkaXRvclwiKVxuXG5UaGUgRm9udHMgRGF0YSBFZGl0b3I6XG5cbiFbaW1hZ2VdKGh0dHBzOi8vdXNlci1pbWFnZXMuZ2l0aHVidXNlcmNvbnRlbnQuY29tLzgzMDYzNTA2LzIyNzE1MDY5OC1jN2M1YzBjMy0yMzc0LTQyMmQtOGJlNy1jMTljOGM0MWM2OWQucG5nIFwiVGhlIEZvbnRzIERhdGEgRWRpdG9yXCIpXG5cbldoZW4gdGhlIGBmb250c19kYXRhLmNzdmAgZmlsZSBjb250YWlucyB0aGUgZGVzaXJlZCB2YWx1ZXMsIGRhdGEgYXJlIHJlYWR5IHRvIGJlIHdyaXR0ZW4gdG8gZm9udHMgdXNpbmcgdGhlIGBmdGNsaVxuYXNzaXN0YW50IGNvbW1pdGAgY29tbWFuZC5cblxuIyMjIGZ0Y2xpIGFzc2lzdGFudCBjb21taXRcblxuV3JpdGVzIGRhdGEgZnJvbSBDU1YgdG8gZm9udHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGFzc2lzdGFudCBjb21taXQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAgIC0td2lkdGgtZWxpZGFibGUgVEVYVCAgICAgICAgICAgVGhlIHdpZHRoIHdvcmQgdG8gZWxpZGUgd2hlbiBidWlsZGluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXJlY29yZHMuICBbZGVmYXVsdDogTm9ybWFsXVxuICAgICAgLS13ZWlnaHQtZWxpZGFibGUgVEVYVCAgICAgICAgICBUaGUgd2VpZ2h0IHdvcmQgdG8gZWxpZGUgd2hlbiBidWlsZGluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXJlY29yZHMuICBbZGVmYXVsdDogUmVndWxhcl1cbiAgICAgIC1scywgLS1saW5rZWQtc3R5bGVzIDxJTlRFR0VSIFJBTkdFIElOVEVHRVIgUkFOR0U+Li4uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVzZSB0aGlzIG9wdGlvbiB0byBhY3RpdmF0ZSBsaW5rZWQgc3R5bGVzLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiB0aGlzIG9wdGlvbiBpcyBhY3RpdmUsIGxpbmtlZCBzdHlsZXMgbXVzdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBzcGVjaWZpZWQuIEZvciBleGFtcGxlOiAtbHMgNDAwIDcwMCwgb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLWxzIDMwMCA2MDAuXG4gICAgICAteCwgLS1leGNsdWRlLW5hbWVyZWNvcmRzIFsxfDJ8M3w0fDV8NnwxNnwxN3wxOF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSBJRHMgdG8gc2tpcC4gVGhlIHNwZWNpZmllZCBuYW1lIElEc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b24ndCBiZSByZWNhbGN1bGF0ZWQuIFRoaXMgb3B0aW9uIGNhbiBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBlYXRlZCAoZm9yIGV4YW1wbGU6IC14IDMgLXggNSAteCA2Li4uKS5cbiAgICAgIC1zd2R0LCAtLXNob3J0ZW4td2lkdGggWzF8NHw2fDE2fDE3XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lIElEcyB3aGVyZSB0byB1c2UgdGhlIHNob3J0IHdvcmQgZm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoIHN0eWxlIG5hbWUgKGZvciBleGFtcGxlLCAnQ24nIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgJ0NvbmRlbnNlZCcpLiBUaGlzIG9wdGlvbiBjYW4gYmUgcmVwZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvciBleGFtcGxlOiAtc3dkdCAxIC1zd2R0IDUsIC1zd2R0IDE2Li4uKS5cbiAgICAgIC1zd2d0LCAtLXNob3J0ZW4td2VpZ2h0IFsxfDR8NnwxN11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZSBJRHMgd2hlcmUgdG8gdXNlIHRoZSBzaG9ydCB3b3JkIGZvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQgc3R5bGUgbmFtZSAoZm9yIGV4YW1wbGUsICdNZCcgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiAnTWVkaXVtJykuIFRoaXMgb3B0aW9uIGNhbiBiZSByZXBlYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZm9yIGV4YW1wbGU6IC1zd2d0IDEgLXN3Z3QgNSAtc3dndCA2Li4uKS5cbiAgICAgIC1rd2R0LCAtLWtlZXAtd2lkdGgtZWxpZGFibGUgICAgRG9lc24ndCByZW1vdmUgdGhlIHdpZHRoIGVsaWRhYmxlIHdvcmRzIChieVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBcIk5vclwiIGFuZCBcIk5vcm1hbFwiKS5cbiAgICAgIC1rd2d0LCAtLWtlZXAtd2VpZ2h0LWVsaWRhYmxlICAgRG9lc24ndCByZW1vdmUgdGhlIHdlaWdodCBlbGlkYWJsZSB3b3JkcyAoYnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgXCJSZ1wiIGFuZCBcIlJlZ3VsYXJcIikuXG4gICAgICAtc3NscCwgLS1zaG9ydGVuLXNsb3BlIFs0fDZ8MTZ8MTddXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWUgSURzIHdoZXJlIHRvIHVzZSB0aGUgc2hvcnQgd29yZCBmb3JcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2xvcGUgc3R5bGUgbmFtZSAoZm9yIGV4YW1wbGUsICdJdCcgaW5zdGVhZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiAnSXRhbGljJykuIFRoaXMgb3B0aW9uIGNhbiBiZSByZXBlYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZm9yIGV4YW1wbGU6IC1zc2xwIDMgLXNzbHAgNSAtc3NscCA2Li4uKS5cbiAgICAgIC1zZiwgLS1zdXBlci1mYW1pbHkgICAgICAgICAgICAgU3VwZXJmYW1pbHkgbW9kZS4gVGhpcyBvcHRpb24gYWZmZWN0cyBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElEcyAzLCA2LCAxNiBhbmQgMTcgaW4gY2FzZSBvZiBmYW1pbGllcyB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRocyBkaWZmZXJlbnQgdGhhbiAnTm9ybWFsJy4gSWYgdGhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb24gaXMgYWN0aXZlLCBuYW1lIElEIDYgd2lsbCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnRmFtaWx5TmFtZS1XaWR0aFdlaWdodFNsb3BlJyBpbnN0ZWFkIG9mXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdGYW1pbHlOYW1lV2lkdGgtV2VpZ2h0U2xvcGUnLiBNYWMgYW5kIE9UXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZhbWlseS9zdWJmYW1pbHkgbmFtZXMgd2lsbCBiZSBGYW1pbHlOYW1lIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2lkdGggV2VpZ2h0IFNsb3BlJyBpbnN0ZWFkIG9mICdGYW1pbHkgTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaWR0aCAvIFdlaWdodCBTbG9wZScuXG4gICAgICAtYXVpLCAtLWFsdC11aWQgICAgICAgICAgICAgICAgIFVzZSBhbHRlcm5hdGUgdW5pcXVlIGlkZW50aWZpZXIuIEJ5IGRlZmF1bHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVJRCAzIChVbmlxdWUgaWRlbnRpZmllcikgaXMgY2FsY3VsYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGZvbGxvd2luZyBzY2hlbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdWZXJzaW9uO1ZlbmRvciBjb2RlO1Bvc3RzY3JpcHROYW1lJy4gVGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0ZSB1bmlxdWUgaWRlbnRpZmllciBpcyBjYWxjdWxhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY29yZGluZyB0byB0aGUgZm9sbG93aW5nIHNjaGVtZTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hbnVmYWN0dXJlcjogRnVsbCBGb250IE5hbWU6IENyZWF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFllYXInLlxuICAgICAgLW9ibmksIC0tb2JsaXF1ZS1ub3QtaXRhbGljICAgICBCeSBkZWZhdWx0LCBpZiBhIGZvbnQgaGFzIHRoZSBvYmxpcXVlIGJpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXQsIHRoZSBpdGFsaWMgYml0cyB3aWxsIGJlIHNldCB0b28uIFVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIG9wdGlvbiB0byBvdmVycmlkZSB0aGUgZGVmYXVsdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWhhdmlvdXIgKGZvciBleGFtcGxlLCB3aGVuIHRoZSBmYW1pbHkgaGFzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdGggaXRhbGljIGFuZCBvYmxpcXVlIHN0eWxlcyBhbmQgeW91IG5lZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8ga2VlcCBvYmxpcXVlIGFuZCBpdGFsaWMgc3R5bGVzIHNlcGFyYXRlKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhlIGl0YWxpYyBiaXRzIHdpbGwgYmUgY2xlYXJlZCB3aGVuIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmxpcXVlIGJpdCBpcyBzZXQuXG4gICAgICAtLW5vLWF1dG8tc2hvcnRlbiAgICAgICAgICAgICAgIFdoZW4gbmFtZSBpZCAxLCA0IG9yIDYgYXJlIGxvbmdlciB0aGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heGltdW0gYWxsb3dlZCAoMjcgY2hhcmFjdGVycyBmb3IgbmFtZUlEIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDMxIGZvciBuYW1lSUQgNCBhbmQgMjkgZm9yIG5hbWVJRCA2KSwgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmlwdCB0cmllcyB0byBhdXRvIHNob3J0ZW4gdGhvc2UgbmFtZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjaW5nIGxvbmcgd29yZHMgd2l0aCBzaG9ydCB3b3Jkcy4gVXNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgb3B0aW9uIHRvIHByZXZlbnQgdGhlIHNjcmlwdCBmcm9tIGF1dG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvcnRlbmluZyBuYW1lcy5cbiAgICAgIC1jZmYgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhpcyBvcHRpb24gaXMgYWN0aXZlLCBmb250TmFtZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZ1bGxOYW1lLCBGYW1pbHlOYW1lIGFuZCBXZWlnaHQgdmFsdWVzIGluXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSAnQ0ZGJyB0YWJsZSB3aWxsIGJlIHJlY2FsY3VsYXRlZC5cbiAgICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgICAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWQgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCeSBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgYXNzaXN0YW50IGluaXQtY29uZmlnXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGFzc2lzdGFudCBpbml0LWNvbmZpZyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKlxuXG4gICAgLXEsIC0tcXVpZXQgIFN1cHByZXNzIHRoZSBvdmVyd3JpdGUgY29uZmlybWF0aW9uIG1lc3NhZ2UgaWYgdGhlIGNvbmZpZy5qc29uXG4gICAgICAgICAgICAgICAgIGZpbGUgYWxyZWFkeSBleGlzdHMuXG4gICAgLS1oZWxwICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG5JZiwgZm9yIHNvbWUgcmVhc29uLCB0aGUgdXNlciBuZWVkcyB0byBjcmVhdGUgb3IgcmVzZXQgdGhlIGBzdHlsZXNfbWFwcGluZ3MuanNvbmAgZmlsZSB0byB0aGUgZGVmYXVsdCB2YWx1ZXMsIHRoaXNcbmNvbW1hbmQgd2lsbCBzZXJ2ZSB0aGUgcHVycG9zZS4gTm90IG5lZWRlZCBpZiBgZnRjbGkgYXNzaXN0YW50IHVpYCBpcyB1c2VkLlxuXG4jIyMgZnRjbGkgYXNzaXN0YW50IGluaXQtZGF0YVxuXG5DcmVhdGVzIHRoZSBDU1YgZGF0YWJhc2UgZmlsZSBgZm9udHNfZGF0YS5jc3ZgIGluIHRoZSBgZnRDTElfZmlsZXNgIHN1YmRpcmVjdG9yeS4gTm90IG5lZWRlZCBpZiBgZnRjbGkgYXNzaXN0YW50IHVpYFxuaXMgdXNlZC5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgYXNzaXN0YW50IGluaXQtZGF0YSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1zLCAtLXN0eWxlcy1tYXBwaW5nLWZpbGUgRklMRSAgVXNlIGEgY3VzdG9tIHN0eWxlcyBtYXBwaW5nIGZpbGUgaW5zdGVhZCBvZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGRlZmF1bHQgc3R5bGVzX21hcHBpbmcuanNvbiBmaWxlIGxvY2F0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBmdENMSV9maWxlcyBmb2xkZXIuXG4gICAgLXEsIC0tcXVpZXQgICAgICAgICAgICAgICAgICAgICBTdXBwcmVzcyB0aGUgb3ZlcndyaXRlIGNvbmZpcm1hdGlvbiBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgZm9udHNfZGF0YS5jc3YgYW5kL29yIHN0eWxlc19tYXBwaW5nLmpzb25cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzIGFscmVhZHkgZXhpc3QgaW4gdGhlIGZ0Q0xJX2ZpbGVzIGZvbGRlci5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBjZmZcblxuYENGRmAgdGFibGUgZWRpdG9yLlxuXG4qKlVzYWdlOioqXG5cbiAgICBmdGNsaSBjZmYgQ09NTUFORCBbQVJHU11cblxuKipDb21tYW5kczoqKlxuXG4gICAgZGVsLW5hbWVzXG4gICAgZmluZC1yZXBsYWNlXG4gICAgZml4LXZlcnNpb25cbiAgICBzZXQtbmFtZXNcblxuIyMjIGZ0Y2xpIGNmZiBkZWwtbmFtZXNcblxuRGVsZXRlcyBDRkYgbmFtZXMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNmZiBkZWwtbmFtZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWZ1bGwtbmFtZSAgICAgICAgICAgICAgICAgICBEZWxldGVzIENGRi5jZmYudG9wRGljdEluZGV4WzBdIEZ1bGxOYW1lXG4gICAgLS1mYW1pbHktbmFtZSAgICAgICAgICAgICAgICAgRGVsZXRlcyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBGYW1pbHlOYW1lXG4gICAgLS13ZWlnaHQgICAgICAgICAgICAgICAgICAgICAgRGVsZXRlcyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBXZWlnaHRcbiAgICAtLXZlcnNpb24gICAgICAgICAgICAgICAgICAgICBEZWxldGVzIENGRi5jZmYudG9wRGljdEluZGV4WzBdIHZlcnNpb25cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY2ZmIGZpbmQtcmVwbGFjZVxuXG5GaW5kcyBhIHN0cmluZyBpbiB0aGUgZm9sbG93aW5nIGl0ZW1zIG9mIENGRiB0YWJsZSB0b3BEaWN0IGFuZCByZXBsYWNlcyBpdCB3aXRoIGEgbmV3IHN0cmluZzogYHZlcnNpb25gLCBgRnVsbE5hbWVgLFxuYEZhbWlseU5hbWVgLCBgV2VpZ2h0YCwgYENvcHlyaWdodGAsIGBOb3RpY2VgLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjZmYgZmluZC1yZXBsYWNlIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW9zLCAtLW9sZC1zdHJpbmcgVEVYVCAgICAgICAgVGhlIHN0cmluZyB0byBiZSByZXBsYWNlZCAgW3JlcXVpcmVkXVxuICAgIC1ucywgLS1uZXctc3RyaW5nIFRFWFQgICAgICAgIFRoZSBzdHJpbmcgdG8gcmVwbGFjZSB0aGUgb2xkIHN0cmluZyB3aXRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3JlcXVpcmVkXVxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBjZmYgZml4LXZlcnNpb25cblxuQWxpZ25zIHRvcERpY3QgdmVyc2lvbiBzdHJpbmcgdG8gdGhlIGBoZWFkLmZvbnRSZXZpc2lvbmAgdmFsdWUuXG5cbkZvciBleGFtcGxlLCBpZiBgaGVhZC5mb250UmV2aXNpb25gIHZhbHVlIGlzIDIuMDAxLCBDRkYgdG9wRGljdCB2ZXJzaW9uIHZhbHVlIHdpbGwgYmUgMi4xLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjZmYgZml4LXZlcnNpb24gW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY2ZmIHNldC1uYW1lc1xuXG5TZXRzIENGRiBuYW1lcy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY2ZmIHNldC1uYW1lcyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0tZm9udC1uYW1lcyBURVhUICAgICAgICAgICAgIFNldHMgQ0ZGLmNmZi5mb250TmFtZXMgdmFsdWVcbiAgICAtLWZ1bGwtbmFtZSBURVhUICAgICAgICAgICAgICBTZXRzIENGRi5jZmYudG9wRGljdEluZGV4WzBdIEZ1bGxOYW1lIHZhbHVlXG4gICAgLS1mYW1pbHktbmFtZSBURVhUICAgICAgICAgICAgU2V0cyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBGYW1pbHlOYW1lIHZhbHVlXG4gICAgLS13ZWlnaHQgVEVYVCAgICAgICAgICAgICAgICAgU2V0cyBDRkYuY2ZmLnRvcERpY3RJbmRleFswXSBXZWlnaHQgdmFsdWVcbiAgICAtLXZlcnNpb24gVEVYVCAgICAgICAgICAgICAgICBTZXRzIENGRi5jZmYudG9wRGljdEluZGV4WzBdIHZlcnNpb24gdmFsdWVcbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBjb252ZXJ0ZXJcblxuRm9udCBjb252ZXJ0ZXIuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNvbnZlcnRlciBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG4tLWhlbHAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbioqQ29tbWFuZHMqKjpcblxuICAgIGZ0MndmXG4gICAgb3RmMnR0ZlxuICAgIHR0YzJzZm50XG4gICAgdHRmMm90ZlxuICAgIHZhcjJzdGF0aWNcbiAgICB3ZjJmdFxuXG4jIyMgZnRjbGkgY29udmVydGVyIGZ0MndmXG5cbkNvbnZlcnRzIFNGTlQgZm9udHMgKFRURiBvciBPVEYpIHRvIHdlYiBmb250cyAoV09GRiBhbmQvb3IgV09GRjIpXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGNvbnZlcnRlciBmdDJ3ZiBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1mLCAtLWZsYXZvciBbd29mZnx3b2ZmMl0gICAgIEJ5IGRlZmF1bHQsIHRoZSBzY3JpcHQgY29udmVydHMgU0ZOVCBmb250c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChUcnVlVHlwZSBvciBPcGVuVHlwZSkgYm90aCB0byB3b2ZmIGFuZCB3b2ZmMlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXZvcmVkIHdlYiBmb250cy4gVXNlIHRoaXMgb3B0aW9uIHRvIGNyZWF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubHkgd29mZiAoLS1mbGF2b3Igd29mZikgb3Igd29mZjIgKC0tZmxhdm9yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29mZjIpIGZpbGVzLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBjb252ZXJ0ZXIgb3RmMnR0ZlxuXG5Db252ZXJ0cyBmb250cyBmcm9tIE9URiB0byBUVEYgZm9ybWF0LlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjb252ZXJ0ZXIgb3RmMnR0ZiBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBjb252ZXJ0ZXIgdHRjMnNmbnRcblxuRXh0cmFjdHMgZWFjaCBmb250IGZyb20gYSBUVEMgZmlsZSwgYW5kIHNhdmVzIGl0IGFzIGEgVFRGIG9yIE9URiBmaWxlLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjb252ZXJ0ZXIgdHRjMnNmbnQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgY29udmVydGVyIHR0ZjJvdGZcblxuQ29udmVydHMgVFRGIGZvbnRzIChvciBUcnVlVHlwZSBmbGF2b3JlZCB3b2ZmL3dvZmYyIHdlYiBmb250cykgdG8gT1RGIGZvbnRzIChvciBDRkYgZmxhdm9yZWQgd29mZi93b2ZmMiB3ZWIgZm9udHMpLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBjb252ZXJ0ZXIgdHRmMm90ZiBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC10LCAtLXRvbGVyYW5jZSBGTE9BVCBSQU5HRSAgIENvbnZlcnNpb24gdG9sZXJhbmNlICgwLTIuNSwgZGVmYXVsdCAxKS4gTG93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9sZXJhbmNlIGFkZHMgbW9yZSBwb2ludHMgYnV0IGtlZXBzIHNoYXBlcy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIaWdoIHRvbGVyYW5jZSBhZGRzIGZldyBwb2ludHMgYnV0IG1heSBjaGFuZ2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaGFwZXMuXG4gICAgLS1zYWZlICAgICAgICAgICAgICAgICAgICAgICAgU29tZXRpbWVzIFF1MkN1UGVuIG1heSBmYWlsIG9yIHByb2R1Y2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXN0b3J0ZWQgb3V0bGluZXMuIE1vc3Qgb2YgdGltZXMsIHVzZSBvZiAnLS1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlJyB3aWxsIHByZXZlbnQgZXJyb3JzIGJ5IGNvbnZlcnRpbmcgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlIFRURiBmb250IHRvIGEgdGVtcG9yYXJ5IE9URiBidWlsdCB1c2luZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFQyQ2hhcnN0cmluZ3NQZW4sIGFuZCB0aGVuIHJlY29udmVydGluZyBpdCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdGVtcG9yYXJ5IFRURiBmb250LiBUaGlzIGxhc3Qgb25lIHdpbGwgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2VkIGZvciBUVEYgdG8gT1RGIGNvbnZlcnNpb24gaW5zdGVhZCBvZiB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgVFRGIGZpbGUuIFRoaXMgaXMgc2xvd2VyLCBidXQgc2FmZXN0LlxuICAgIC0ta2VlcC1nbHlwaHMgICAgICAgICAgICAgICAgIEtlZXBzIE5VTEwgYW5kIENSIGdseXBocyBmcm9tIHRoZSBvdXRwdXQgZm9udFxuICAgIC0tbm8tc3ViciAgICAgICAgICAgICAgICAgICAgIERvIG5vdCBzdWJyb3V0aW5pemUgY29udmVydGVkIGZvbnRzXG4gICAgLS1jaGVjay1vdXRsaW5lcyAgICAgICAgICAgICAgUGVyZm9ybXMgb3B0aW9uYWwgb3V0bGluZSBxdWFsaXR5IGNoZWNrcyBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVzIG92ZXJsYXBzIHdpdGggYWZka28uY2hlY2tvdXRsaW5lc3Vmb1xuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBjb252ZXJ0ZXIgdmFyMnN0YXRpY1xuXG5FeHBvcnRzIHN0YXRpYyBpbnN0YW5jZXMgZnJvbSB2YXJpYWJsZSBmb250cy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY29udmVydGVyIHZhcjJzdGF0aWMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtcywgLS1zZWxlY3QtaW5zdGFuY2UgICAgICAgICBCeSBkZWZhdWx0LCB0aGUgc2NyaXB0IGV4cG9ydHMgYWxsIG5hbWVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2VzLiBVc2UgdGhpcyBvcHRpb24gdG8gc2VsZWN0IGN1c3RvbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF4aXMgdmFsdWVzIGZvciBhIHNpbmdsZSBpbnN0YW5jZS5cbiAgICAtLW5vLWNsZWFudXAgICAgICAgICAgICAgICAgICBCeSBkZWZhdWx0LCBTVEFUIHRhYmxlIGlzIGRyb3BwZWQgYW5kIGF4aXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lSURzIGFyZSBkZWxldGVkIGZyb20gbmFtZSB0YWJsZS4gVXNlIC0tbm8tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYW51cCB0byBrZWVwIFNUQVQgdGFibGUgYW5kIHByZXZlbnQgYXhpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVJRHMgdG8gYmUgZGVsZXRlZCBmcm9tIG5hbWUgdGFibGUuXG4gICAgLS11cGRhdGUtbmFtZS10YWJsZSAgICAgICAgICAgVXBkYXRlIHRoZSBpbnN0YW50aWF0ZWQgZm9udCdzIGBuYW1lYCB0YWJsZS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnB1dCBmb250IG11c3QgaGF2ZSBhIFNUQVQgdGFibGUgd2l0aCBBeGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWUgVGFibGVzXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGNvbnZlcnRlciB3ZjJmdFxuXG5Db252ZXJ0cyB3ZWIgZm9udHMgKFdPRkYgYW5kIFdPRkYyKSB0byBTRk5UIGZvbnRzIChUVEYgb3IgT1RGKS5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgY29udmVydGVyIHdmMmZ0IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLWYsIC0tZmxhdm9yIFt3b2ZmfHdvZmYyXSAgICAgQnkgZGVmYXVsdCwgdGhlIHNjcmlwdCBjb252ZXJ0cyBib3RoIHdvZmYgYW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd29mZjIgZmxhdm9yZWQgd2ViIGZvbnRzIHRvIFNGTlQgZm9udHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoVHJ1ZVR5cGUgb3IgT3BlblR5cGUpLiBVc2UgdGhpcyBvcHRpb24gdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb252ZXJ0IG9ubHkgd29mZiBvciB3b2ZmMiBmbGF2b3JlZCB3ZWIgZm9udHMuXG4gICAgLWQsIC0tZGVsZXRlLXNvdXJjZS1maWxlICAgICAgRGVsZXRlcyB0aGUgc291cmNlIGZpbGVzIGFmdGVyIGNvbnZlcnNpb24uXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgZml4XG5cbkEgc2V0IG9mIGNvbW1hbmRzIHRvIGRldGVjdCBhbmQgYXV0b21hdGljYWxseSBmaXggZm9udCBlcnJvcnMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBjYXJldC1vZmZzZXRcbiAgICBkZWNvbXBvc2UtdHJhbnNmb3JtZWRcbiAgICBkdXBsaWNhdGUtY29tcG9uZW50c1xuICAgIGl0YWxpYy1hbmdsZVxuICAgIGtlcm4tdGFibGVcbiAgICBuYnNwLW1pc3NpbmdcbiAgICBuYnNwLXdpZHRoXG4gICAgb3MyLXJhbmdlc1xuICAgIHN0cmlwLW5hbWVzXG5cbiMjIyBmdGNsaSBmaXggY2FyZXQtb2Zmc2V0XG5cblJlY2FsY3VsYXRlcyBgaGhlYS5jYXJldE9mZnNldGAgdmFsdWUuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBjYXJldC1vZmZzZXQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IGRlY29tcG9zZS10cmFuc2Zvcm1lZFxuXG5EZWNvbXBvc2VzIGNvbXBvc2l0ZSBnbHlwaHMgdGhhdCBoYXZlIHRyYW5zZm9ybWVkIGNvbXBvbmVudHMuXG5cbmZvbnRiYWtlcnkgY2hlY2sgaWQ6IGNvbS5nb29nbGUuZm9udHMvY2hlY2svdHJhbnNmb3JtZWRfY29tcG9uZW50c1xuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBmaXggZGVjb21wb3NlLXRyYW5zZm9ybWVkIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBkdXBsaWNhdGUtY29tcG9uZW50c1xuXG5SZW1vdmVzIGR1cGxpY2F0ZSBjb21wb25lbnRzIHdoaWNoIGhhdmUgdGhlIHNhbWUgeCx5IGNvb3JkaW5hdGVzLlxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL2dseWZfbm9uX3RyYW5zZm9ybWVkX2R1cGxpY2F0ZV9jb21wb25lbnRzXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBkdXBsaWNhdGUtY29tcG9uZW50cyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBmaXggaXRhbGljLWFuZ2xlXG5cblJlY2FsY3VsYXRlcyBgcG9zdC5pdGFsaWNBbmdsZWAsIGBoaGVhLmNhcmV0U2xvcGVSaXNlYCwgYGhoZWEuY2FyZXRTbG9wZVJ1bmAgYW5kIHNldHMvY2xlYXJzIHRoZSBpdGFsaWMvb2JsaXF1ZSBiaXRzXG5hY2NvcmRpbmcgdG8gdGhlIGNhbGN1bGF0ZWQgdmFsdWVzLiBJbiBDRkYgZm9udHMsIGFsc28gYENGRi50b3BEaWN0SW5kZXhbMF0uSXRhbGljQW5nbGVgIGlzIHJlY2FsY3VsYXRlZC5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgZml4IGl0YWxpYy1hbmdsZSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1tLCAtLW1vZGUgSU5URUdFUiBSQU5HRSAgICAgIDE6IHNldHMgb25seSB0aGUgaXRhbGljIGJpdHMgYW5kIGNsZWFycyB0aGUgb2JsaXF1ZSBiaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAyOiBzZXRzIGl0YWxpYyBhbmQgb2JsaXF1ZSBiaXRzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMzogc2V0cyBvbmx5IHRoZSBvYmxpcXVlIGJpdCBhbmQgY2xlYXJzIGl0YWxpYyBiaXRzICBbMTw9eDw9M11cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IGtlcm4tdGFibGVcblxuU29tZSBhcHBsaWNhdGlvbnMgc3VjaCBhcyBNUyBQb3dlclBvaW50IHJlcXVpcmUga2VybmluZyBpbmZvIG9uIHRoZSBrZXJuXG50YWJsZS4gTW9yZSBzcGVjaWZpY2FsbHksIHRoZXkgcmVxdWlyZSBhIGZvcm1hdCAwIGtlcm4gc3VidGFibGUgZnJvbSBhIGtlcm5cbnRhYmxlIHZlcnNpb24gMCB3aXRoIG9ubHkgZ2x5cGhzIGRlZmluZWQgaW4gdGhlIGNtYXAgdGFibGUuXG5cbkdpdmVuIHRoaXMsIHRoZSBjb21tYW5kIGRlbGV0ZXMgYWxsIGtlcm5pbmcgcGFpcnMgZnJvbSBrZXJuIHYwIHN1YnRhYmxlc1xud2hlcmUgb25lIG9mIHRoZSB0d28gZ2x5cGhzIGlzIG5vdCBkZWZpbmVkIGluIHRoZSBjbWFwIHRhYmxlLlxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL2tlcm5fdGFibGVcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgZml4IGtlcm4tdGFibGUgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IG1vbm9zcGFjZVxuXG5JZiB0aGUgZmFtaWx5IGlzIG1vbm9zcGFjZWQ6XG5cbi0gcG9zdC5pc0ZpeGVkUGl0Y2ggbXVzdCBiZSBzZXQgdG8gYSBub24temVybyB2YWx1ZVxuLSBPUy8yLnBhbm9zZS5iUHJvcG9ydGlvbiBtdXN0IGJlIHNldCB0byA5XG4tIENGRi5jZmYuVG9wRGljdEluZGV4WzBdLmlzRml4ZWRQaXRjaCBtdXN0IGJlIHNldCB0byBUcnVlXG5cbmZvbnRiYWtlcnkgY2hlY2sgaWQ6IGNvbS5nb29nbGUuZm9udHMvY2hlY2svbW9ub3NwYWNlXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBtb25vc3BhY2UgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IG5ic3AtbWlzc2luZ1xuXG5DaGVja3MgaWYgdGhlIGZvbnQgaGFzIGEgbm9uLWJyZWFraW5nIHNwYWNlIGNoYXJhY3RlciwgYW5kIGlmIGl0IGRvZXNuJ3QsIGl0IGFkZHMgb25lIGJ5IGRvdWJsZSBtYXBwaW5nICdzcGFjZSdcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgZml4IG5ic3AtbWlzc2luZyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBmaXggbmJzcC13aWR0aFxuXG5DaGVja3MgaWYgJ25ic3BhY2UnIGFuZCAnc3BhY2UnIGdseXBocyBoYXZlIHRoZSBzYW1lIHdpZHRoLiBJZiBub3QsIGNvcnJlY3RzICduYnNwYWNlJyB3aWR0aCB0byBtYXRjaCAnc3BhY2UnIHdpZHRoLlxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL3doaXRlc3BhY2Vfd2lkdGhzXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBuYnNwLXdpZHRoIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIGZpeCBvczItcmFuZ2VzXG5cbkdlbmVyYXRlcyBhIHRlbXBvcmFyeSBUeXBlIDEgZnJvbSB0aGUgZm9udCBmaWxlIHVzaW5nIHR4LCBjb252ZXJ0cyB0aGF0IHRvIGFuIE9wZW5UeXBlIGZvbnQgdXNpbmcgbWFrZW90ZiwgcmVhZHMgdGhlXG5Vbmljb2RlIHJhbmdlcyBhbmQgY29kZXBhZ2UgcmFuZ2VzIGZyb20gdGhlIHRlbXBvcmFyeSBPcGVuVHlwZSBmb250IGZpbGUsIGFuZCB0aGVuIHdyaXRlcyB0aG9zZSByYW5nZXMgdG8gdGhlXG5vcmlnaW5hbCBmb250J3MgT1MvMiB0YWJsZS5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgZml4IG9zMi1yYW5nZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgZml4IHN0cmlwLW5hbWVzXG5cblJlbW92ZXMgbGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGZyb20gYWxsIG5hbWVyZWNvcmRzLlxuXG5mb250YmFrZXJ5IGNoZWNrIGlkOiBjb20uZ29vZ2xlLmZvbnRzL2NoZWNrL25hbWUvdHJhaWxpbmdfc3BhY2VzXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCBzdHJpcC1uYW1lcyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cblxuIyMjIGZ0Y2xpIGZpeCB1cHJpZ2h0c1xuXG5Bc3N1bWluZyB0aGF0IHRoZSBmb250IGlzIGNvcnJlY3RseSBzZXQgYXMgdXByaWdodCAoaS5lLjogaXRhbGljIG9ibGlxdWVcbmJpdHMgYXJlIGFsbCBjbGVhciksIHRoZSBzY3JpcHQgc2V0cyB0aGUgZm9sbG93aW5nIHZhbHVlczpcblxuLSBwb3N0Lml0YWxpY0FuZ2xlID0gMC4wXG4tIGhoZWEuY2FyZXRTbG9wZVJpc2UgPSAxXG4tIGhoZWEuY2FyZXRTbG9wZVJ1biA9IDBcbi0gaGhlYS5jYXJldE9mZnNldCA9IDBcbi0gQ0ZGLmNmZi50b3BEaWN0SW5kZXhbMF0uSXRhbGljQW5nbGUgPSAwIChvbmx5IGlmIHRoZSBmb250IGhhcyBhIENGRiB0YWJsZSlcblxuVGhlIGZvbnQgaXMgc2F2ZWQgb25seSBpZiBhdCBsZWFzdCBvbmUgdGFibGUgaGFzIGNoYW5nZWQuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIGZpeCB1cHJpZ2h0cyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIGhoZWFcblxuQ29tbWFuZCBsaW5lIGhoZWEgdGFibGUgZWRpdG9yLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBoaGVhIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1yaXNlIElOVEVHRVIgICAgICAgICAgICAgICAgU2V0cyB0aGUgYGNhcmV0U2xvcGVSaXNlYCB2YWx1ZS5cbiAgICAtLXJ1biBJTlRFR0VSICAgICAgICAgICAgICAgICBTZXRzIHRoZSBgY2FyZXRTbG9wZVJ1bmAgdmFsdWUuXG4gICAgLS1vZmZzZXQgSU5URUdFUiAgICAgICAgICAgICAgU2V0cyB0aGUgYGNhcmV0T2Zmc2V0YCB2YWx1ZS5cbiAgICAtLWFzY2VudCBJTlRFR0VSICAgICAgICAgICAgICBTZXRzIHRoZSBgYXNjZW50YCB2YWx1ZS5cbiAgICAtLWRlc2NlbnQgSU5URUdFUiAgICAgICAgICAgICBTZXRzIHRoZSBgZGVzY2VudGAgdmFsdWUuXG4gICAgLS1saW5lZ2FwIElOVEVHRVIgICAgICAgICAgICAgU2V0cyB0aGUgYGxpbmVHYXBgIHZhbHVlLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIG1ldHJpY3NcblxuVmVydGljYWwgbWV0cmljcyB0b29scy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbWV0cmljcyBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBhbGlnblxuICAgIGNvcHlcbiAgICBzZXQtbGluZWdhcFxuXG4jIyMgZnRjbGkgbWV0cmljcyBhbGlnblxuXG5BbGlnbnMgYWxsIGZvbnRzIHN0b3JlZCBpbiBJTlBVVF9QQVRIIGZvbGRlciB0byB0aGUgc2FtZSBiYXNlbGluZS5cblxuVG8gYWNoaWV2ZSB0aGlzLCB0aGUgc2NyaXB0IGZpbmRzIHRoZSBtYXhpbXVtIGFzY2VuZGVyIGFuZCB0aGUgbWluaW11bSBkZXNjZW5kZXIgdmFsdWVzIG9mIHRoZSBmb250cyBzdG9yZWQgaW4gdGhlXG5JTlBVVF9QQVRIIGZvbGRlciBhbmQgYXBwbGllcyB0aG9zZSB2YWx1ZXMgdG8gYWxsIGZvbnRzLlxuXG5UaGlzIGNhbiBwcm9kdWNlIHVuZGVzaXJlZCBlZmZlY3RzIChhbiBleGFnZ2VyYXRlZCBsaW5lIGhlaWdodCkgd2hlbiBvbmUgb3IgbW9yZSBmb250cyBjb250YWluIHN3YXNoZXMsIGZvciBleGFtcGxlLiBJblxuc3VjaCBjYXNlcywgaXQncyBiZXR0ZXIgdG8gY29weSB0aGUgdmVydGljYWwgbWV0cmljcyBmcm9tIGEgdGVtcGxhdGUgZm9udCB0byBvbmUgb3IgbW9yZSBkZXN0aW5hdGlvbiBmb250cyB1c2luZyB0aGVcbltgZnRjbGkgbWV0cmljcyBjb3B5YF0oI2Z0Y2xpLW1ldHJpY3MtY29weS1tZXRyaWNzKSBjb21tYW5kLlxuXG5TZWUgaHR0cHM6Ly9rbHRmLmRlL2Rvd25sb2FkL0ZvbnRNZXRyaWNzLWtsdGYucGRmIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSBtZXRyaWNzIGFsaWduIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG5PcHRpb25zOlxuXG4gICAgLS13aXRoLWxpbmVnYXAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgU0lMIG1ldGhvZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChodHRwczovL3NpbG5yc2kuZ2l0aHViLmlvL0ZEQlAvZW4tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVVMvTGluZV9NZXRyaWNzLmh0bWwpIGlzIHVzZWQuIFRoaXMgbWVhbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0LCBpbiBPUy8yIHRhYmxlLCBzVHlwb0FzY2VuZGVyIGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNUeXBvRGVzY2VuZGVyIHZhbHVlcyBhcmUgc2V0LCByZXNwZWN0aXZlbHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXF1YWwgdG8gbWF4aW11bSByZWFsIGFzY2VuZGVyIGFuZCBtaW5pbXVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVhbCBkZXNjZW5kZXIsIGFuZCB0aGUgc1R5cG9MaW5lR2FwIGlzIHNldCB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHplcm8uIFVzZSAnLS13aXRoLWxpbmVnYXAnIHRvIHNldFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNUeXBvQXNjZW5kZXIgdmFsdWUgdG8gdGhlIG1heGltdW0gaWRlYWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc2NlbmRlciAoY2FsY3VsYXRlZCBmcm9tIGxldHRlcnMgYiwgZiwgZiwgaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrLCBsIGFuZCB0KSBhbmQgdGhlIHNUeXBvRGVzY2VuZGVyIHZhbHVlIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG1pbmltdW0gaWRlYWwgZGVzY2VuZGVyIChjYWxjdWxhdGVkIGZyb21cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXJzIGcsIGosIHAsIHEgYW5kIHkpLiBUaGUgc1R5cG9MaW5lR2FwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjYWxjdWxhdGVkIGFzIGZvbGxvd3M6IChyZWFsIGFzY2VuZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhYnMocmVhbCBkZXNjZW5kZXIpKSAtIChpZGVhbCBhc2NlbmRlciArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzKGlkZWFsIGRlc2NlbmRlcikpLlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBtZXRyaWNzIGNvcHktbWV0cmljc1xuXG5Db3BpZXMgdmVydGljYWwgbWV0cmljcyBmcm9tIGEgc291cmNlIGZvbnQgdG8gb25lIG9yIG1vcmUgZGVzdGluYXRpb24gZm9udHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG1ldHJpY3MgY29weSBbT1BUSU9OU11cblxuKipPcHRpb25zKio6XG5cbiAgICAtcywgLS1zb3VyY2UtZmlsZSBGSUxFICAgICAgU291cmNlIGZpbGUuIFZlcnRpY2FsIG1ldHJpY3MgZnJvbSB0aGlzIGZvbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBhcHBsaWVkIHRvIGFsbCBkZXN0aW5hdGlvbiBmb250cy5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3JlcXVpcmVkXVxuICAgIC1kLCAtLWRlc3RpbmF0aW9uIFBBVEggICAgICBEZXN0aW5hdGlvbiBmaWxlIG9yIGRpcmVjdG9yeS4gIFtyZXF1aXJlZF1cbiAgICAtbywgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgVGhlIG91dHB1dCBkaXJlY3Rvcnkgd2hlcmUgdGhlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgY3JlYXRlZC4gSWYgaXQgZG9lc24ndCBleGlzdCwgd2lsbCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWQgdG9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICBCeSBkZWZhdWx0LCBvcmlnaW5hbCBoZWFkLm1vZGlmaWVkIHZhbHVlIGlzIGtlcHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBhIGZvbnQgaXMgc2F2ZWQuIFVzZSB0aGlzIHN3aXRjaCB0byBzZXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZC5tb2RpZmllZCB0aW1lc3RhbXAgdG8gY3VycmVudCB0aW1lLlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICBCeSBkZWZhdWx0LCBtb2RpZmllZCBmaWxlcyBhcmUgb3ZlcndyaXR0ZW4uIFVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzIHN3aXRjaCB0byBzYXZlIHRoZW0gdG8gYSBuZXcgZmlsZSAobnVtYmVyc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZCBvZiBmaWxlIG5hbWUpLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIG1ldHJpY3Mgc2V0LWxpbmVnYXBcblxuTW9kaWZpZXMgdGhlIGxpbmUgc3BhY2luZyBtZXRyaWNzIGluIG9uZSBvciBtb3JlIGZvbnRzLlxuXG5UaGlzIGlzIGEgZm9yayBvZiBmb250LWxpbmUgYnkgU291cmNlIEZvdW5kcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb3VyY2UtZm91bmRyeS9mb250LWxpbmVcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbWV0cmljcyBzZXQtbGluZWdhcCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1wLCAtLXBlcmNlbnQgSU5URUdFUiBSQU5HRSAgICAgQWRqdXN0IGZvbnQgbGluZSBzcGFjaW5nIHRvICUgb2YgVVBNIHZhbHVlLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWzE8PXg8PTEwMDsgcmVxdWlyZWRdXG4gICAgLW1mbiwgLS1tb2RpZnktZmFtaWx5LW5hbWUgICAgICBBZGRzIExHJSB0byB0aGUgZm9udCBmYW1pbHkgdG8gcmVmbGVjdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkIGxpbmUgZ2FwLlxuICAgIC1vLCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICAgICAgVGhlIG91dHB1dCBkaXJlY3Rvcnkgd2hlcmUgdGhlIG91dHB1dCBmaWxlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHRvIGJlIGNyZWF0ZWQuIElmIGl0IGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWQgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAvIC0tbm8tcmVjYWxjLXRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgS2VlcHMgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1vdmVyd3JpdGUgLyAtLW5vLW92ZXJ3cml0ZSAgICBPdmVyd3JpdGVzIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVtIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZW5kIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMgZnRjbGkgbmFtZVxuXG5Db21tYW5kIGxpbmUgYG5hbWVgIHRhYmxlIGVkaXRvci5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbmFtZSBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBhcHBlbmRcbiAgICBkZWwtbWFjLW5hbWVzXG4gICAgZGVsLW5hbWVzXG4gICAgZmluZC1yZXBsYWNlXG4gICAgc2V0LW5hbWVcblxuIyMjIGZ0Y2xpIG5hbWUgYXBwZW5kXG5cbkFwcGVuZHMgYSBwcmVmaXgsIG9yIGEgc3VmZml4IHRvIHRoZSBzcGVjaWZpZWQgbmFtZXJlY29yZHNcblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbmFtZSBhcHBlbmQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtbiwgLS1uYW1lLWlkIElOVEVHRVIgICAgICAgICBOYW1lSUQgd2hlcmUgdG8gYXBwZW5kIHRoZSBwcmVmaXgvc3VmZml4LiBUaGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uIGNhbiBiZSByZXBlYXRlZCB0byBwcmVwZW5kL2FwcGVuZCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgdG8gbXVsdGlwbGUgbmFtZXJlY29yZHMuIEZvciBleGFtcGxlOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC1uIDEgLW4gMiAtbiAxNiAtbiAxNyAgW3JlcXVpcmVkXVxuICAgIC1wLCAtLXBsYXRmb3JtLWlkIFswfDF8M10gICAgIFVzZSB0aGlzIG9wdGlvbiB0byBhZGQgdGhlIHByZWZpeC9zdWZmaXggb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBuYW1lcmVjb3JkcyBtYXRjaGluZyB0aGUgcHJvdmlkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybUlELlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMDogVW5pY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE6IE1hY2ludG9zaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM6IFdpbmRvd3NcbiAgICAtbCwgLS1sYW5ndWFnZS1zdHJpbmcgVEVYVCAgICBVc2UgdGhpcyBvcHRpb24gdG8gYXBwZW5kIHRoZSBwcmVmaXgvc3VmZml4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25seSB0byB0aGUgbmFtZXJlY29yZHMgbWF0Y2hpbmcgdGhlIHByb3ZpZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2Ugc3RyaW5nLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlIGVwaWxvZyBmb3IgYSBsaXN0IG9mIHZhbGlkIGxhbmd1YWdlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5ncy5cbiAgICAtLXByZWZpeCBURVhUICAgICAgICAgICAgICAgICBUaGUgc3RyaW5nIHRvIGJlIHByZXBlbmRlZCB0byB0aGUgbmFtZXJlY29yZHNcbiAgICAtLXN1ZmZpeCBURVhUICAgICAgICAgICAgICAgICBUaGUgc3VmZml4IHRvIGFwcGVuZCB0byB0aGUgbmFtZXJlY29yZHNcbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgbmFtZSBkZWwtbWFjLW5hbWVzXG5cbkRlbGV0ZXMgYWxsIHRoZSBNYWNpbnRvc2ggbmFtZXJlY29yZHMgZnJvbSB0aGUgbmFtZSB0YWJsZSwgZXhjZXB0IG5hbWVJRHMgMSwgMiwgNCwgNSwgYW5kIDYuXG5cbkFjY29yZGluZyB0byBBcHBsZSAoaHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2ZvbnRzL1RydWVUeXBlLVJlZmVyZW5jZS1NYW51YWwvUk0wNi9DaGFwNm5hbWUuaHRtbCksIFwibmFtZXMgd2l0aFxucGxhdGZvcm1JRCAxIHdlcmUgcmVxdWlyZWQgYnkgZWFybGllciB2ZXJzaW9ucyBvZiBtYWNPUy4gSXRzIHVzZSBvbiBtb2Rlcm4gcGxhdGZvcm1zIGlzIGRpc2NvdXJhZ2VkLiBVc2UgbmFtZXMgd2l0aFxucGxhdGZvcm1JRCAzIGluc3RlYWQgZm9yIG1heGltdW0gY29tcGF0aWJpbGl0eS4gU29tZSBsZWdhY3kgc29mdHdhcmUsIGhvd2V2ZXIsIG1heSBzdGlsbCByZXF1aXJlIG5hbWVzIHdpdGhcbnBsYXRmb3JtSUQgMSwgcGxhdGZvcm1TcGVjaWZpY0lEIDBcIi5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbmFtZSBkZWwtbWFjLW5hbWVzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1kZWwtYWxsICAgICAgICAgICAgICAgICAgICAgRGVsZXRlcyBhbHNvIG5hbWVJRHMgMSwgMiwgNCwgNSBhbmQgNi5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgbmFtZSBkZWwtbmFtZXNcblxuRGVsZXRlcyBvbmUgb3IgbW9yZSBuYW1lcmVjb3Jkcy5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgbmFtZSBkZWwtbmFtZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtbiwgLS1uYW1lLWlkIElOVEVHRVIgICAgICAgICBOYW1lSUQocykgdG8gZGVsZXRlLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGhpcyBvcHRpb24gY2FuIGJlIHJlcGVhdGVkIHRvIGRlbGV0ZSBtdWx0aXBsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVyZWNvcmRzIGF0IG9uY2UuIEZvciBleGFtcGxlOiAtbiAxIC1uIDIgLW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA2ICBbcmVxdWlyZWRdXG4gICAgLXAsIC0tcGxhdGZvcm0taWQgWzB8MXwzXSAgICAgUGxhdGZvcm1JRCBvZiB0aGUgbmFtZXJlY29yZHMgdG8gZGVsZXRlOlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMDogVW5pY29kZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE6IE1hY2ludG9zaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDM6IFdpbmRvd3NcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIG5vIHBsYXRmb3JtIGlzIHNwZWNpZmllZCwgbmFtZXJlY29yZHMgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGRlbGV0ZWQgZnJvbSBhbGwgdGFibGVzLlxuICAgIC1sLCAtLWxhbmd1YWdlLXN0cmluZyBURVhUICAgIFVzZSB0aGlzIG9wdGlvbiB0byBmaWx0ZXIgdGhlIG5hbWVyZWNvcmRzIHRvXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGJ5IGxhbmd1YWdlIHN0cmluZyAoZm9yIGV4YW1wbGU6ICdpdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RlJywgJ25sJykuIFNlZSBlcGlsb2cgZm9yIGEgbGlzdCBvZiB2YWxpZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhbmd1YWdlIHN0cmluZ3MuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIG5hbWUgZmluZC1yZXBsYWNlXG5cbkZpbmRzIGEgc3RyaW5nIGluIHRoZSBzcGVjaWZpZWQgbmFtZXJlY29yZHMgYW5kIHJlcGxhY2VzIGl0IHdpdGggYSBuZXcgc3RyaW5nXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgZmluZC1yZXBsYWNlIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW9zLCAtLW9sZC1zdHJpbmcgVEVYVCAgICAgICAgIFRoZSBzdHJpbmcgdG8gYmUgcmVwbGFjZWQgIFtyZXF1aXJlZF1cbiAgICAtbnMsIC0tbmV3LXN0cmluZyBURVhUICAgICAgICAgVGhlIHN0cmluZyB0byByZXBsYWNlIHRoZSBvbGQgc3RyaW5nIHdpdGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3JlcXVpcmVkXVxuICAgIC1uLCAtLW5hbWUtaWQgSU5URUdFUiAgICAgICAgICBuYW1lSURzIHdoZXJlIHRvIHNlYXJjaCBhbmQgcmVwbGFjZSB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nLiBJZiBub3Qgc3BlY2lmaWVkLCB0aGUgc3RyaW5nIHdpbGwgYmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZWQgaW4gYWxsIG5hbWVyZWNvcmRzLiBUaGlzIG9wdGlvbiBjYW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgcmVwZWF0ZWQgdG8gcGVyZm9ybSBzZWFyY2ggYW5kIHJlcGxhY2UgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgbmFtZXJlY29yZHMgKGUuZy46IC1uIDEgLW4gNCAtbiA2KVxuICAgIC14LCAtLWV4Y2x1ZGUtbmFtZS1pZCBJTlRFR0VSICBOYW1lSUQgdG8gaWdub3JlLiBUaGUgc3BlY2lmaWVkIG5hbWVJRCB3b24ndFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjaGFuZ2VkLiBUaGlzIG9wdGlvbiBjYW4gYmUgcmVwZWF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGUgdGltZXMgKGUuZy46IC1leCAzIC1leCA1IC1leCAxNikuXG4gICAgLXAsIC0tcGxhdGZvcm0taWQgWzF8M10gICAgICAgIHBsYXRmb3JtIGlkIFsxOiBtYWNpbnRvc2gsIDM6IHdpbmRvd3NdLiBJZiBub1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF0Zm9ybSBpcyBzcGVjaWZpZWQsIHRoZSBzdHJpbmcgd2lsbCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXBsYWNlZCBpbiBib3RoIHRhYmxlcy5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWQgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgbmFtZSBzZXQtbmFtZVxuXG5BZGRzIGEgbmFtZXJlY29yZCB0byBvbmUgb3IgbW9yZSBmb250IGZpbGVzLlxuXG5JZiB0aGUgbmFtZXJlY29yZCBpcyBhbHJlYWR5IHByZXNlbnQsIGl0IHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG5hbWUgc2V0LW5hbWUgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtbiwgLS1uYW1lLWlkIElOVEVHRVIgUkFOR0UgICBUaGUgbmFtZUlEIG9mIHRoZSBuYW1lcmVjb3JkIHRvIGFkZC5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbMDw9eDw9MzI3Njc7IHJlcXVpcmVkXVxuICAgIC1zLCAtLXN0cmluZyBURVhUICAgICAgICAgICAgIFN0cmluZyB0byB3cml0ZSBpbiB0aGUgbmFtZXJlY29yZC4gIFtyZXF1aXJlZF1cbiAgICAtcCwgLS1wbGF0Zm9ybS1pZCBbMXwzXSAgICAgICBVc2UgdGhpcyBvcHRpb24gdG8gd3JpdGUgdGhlIG5hbWVyZWNvcmQgb25seVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBzcGVjaWZpZWQgdGFibGU6XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOiBNYWNpbnRvc2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOiBXaW5kb3dzXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJZiBub3Qgc3BlY2lmaWVkLCBuYW1lcmVjb3JkIHdpbGwgYmUgd3JpdHRlblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIGJvdGggdGFibGVzLlxuICAgIC1sLCAtLWxhbmd1YWdlLXN0cmluZyBURVhUICAgIFVzZSB0aGlzIG9wdGlvbiB0byB3cml0ZSB0aGUgbmFtZXJlY29yZCBpbiBhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2UgZGlmZmVyZW50IHRoYW4gJ2VuJyAoZS5nLjogJ2l0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbmwnLCAnZGUnKS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlZSBlcGlsb2cgZm9yIGEgbGlzdCBvZiB2YWxpZCBsYW5ndWFnZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmluZ3MgIFtkZWZhdWx0OiBlbl1cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBvczJcblxuQ29tbWFuZCBsaW5lIGBPUy8yYCB0YWJsZSBlZGl0b3IuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIG9zMiBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC12ZXIsIC0tdmVyc2lvbiBJTlRFR0VSIFJBTkdFICAgVXBncmFkZXMgYE9TLzJgIHRhYmxlIHZlcnNpb24uICBbMTw9eDw9NV1cbiAgICAtd2doLCAtLXdlaWdodCBJTlRFR0VSIFJBTkdFICAgIFNldHMgYHVzV2VpZ2h0Q2xhc3NgIHZhbHVlLiAgWzE8PXg8PTEwMDBdXG4gICAgLXdkdCwgLS13aWR0aCBJTlRFR0VSIFJBTkdFICAgICBTZXRzIGB1c1dpZHRoQ2xhc3NgIHZhbHVlLiAgWzE8PXg8PTldXG4gICAgLWl0LCAtLWl0YWxpYyAvIC1uby1pdCwgLS1uby1pdGFsaWNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBJVEFMSUMgYml0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGBmc1NlbGVjdGlvbmAgYml0IDAgYW5kIGBoZWFkYCB0YWJsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYG1hY1N0eWxlYCBiaXQgMSkuXG4gICAgLWJkLCAtLWJvbGQgLyAtbm8tYmQsIC0tbm8tYm9sZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyBvciBjbGVhcnMgdGhlIEJPTEQgYml0c1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGBPUy8yLmZzU2VsZWN0aW9uYCBiaXQgNSBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBoZWFkLm1hY1N0eWxlYCBiaXQgMCkuXG4gICAgLXJnLCAtLXJlZ3VsYXIgICAgICAgICAgICAgICAgICBTZXRzIFJFR1VMQVIgKGBmc1NlbGVjdGlvbmAgYml0KSA2IGFuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJzIEJPTEQgKGBmc1NlbGVjdGlvbmAgYml0IDUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgaGVhZC5tYWNTdHlsZWAgYml0IDApIGFuZCBJVEFMSUNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChgZnNTZWxlY3Rpb25gIGJpdCAwLCBgaGVhZC5tYWNTdHlsZWAgYml0IDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaXRzLiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gYC0tbm8tYm9sZCAtLW5vLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRhbGljYC5cbiAgICAtb2JsLCAtLW9ibGlxdWUgLyAtbm8tb2JsLCAtLW5vLW9ibGlxdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBPQkxJUVVFIGJpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGBmc1NlbGVjdGlvbmAgYml0IDkpLlxuICAgIC11dG0sIC0tdXNlLXR5cG8tbWV0cmljcyAvIC1uby11dG0sIC0tbm8tdXNlLXR5cG8tbWV0cmljc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyBvciBjbGVhcnMgdGhlIFVTRV9UWVBPX01FVFJJQ1MgYml0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYGZzU2VsZWN0aW9uYCBiaXQgNykuXG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIHNldCwgaXQgaXMgc3Ryb25nbHkgcmVjb21tZW5kZWQgdGhhdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbGljYXRpb25zIHVzZSBgT1MvMi5zVHlwb0FzY2VuZGVyYCAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgT1MvMi5zVHlwb0Rlc2NlbmRlcmAgKyAgYE9TLzIuc1R5cG9MaW5lR2FwYFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGRlZmF1bHQgbGluZSBzcGFjaW5nIGZvciB0aGUgZm9udC5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2VlOiBodHRwczovL2RvY3MubWljcm9zb2Z0LmNvbS9lbi1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzL3R5cG9ncmFwaHkvb3BlbnR5cGUvc3BlYy9vczIjZnNzZWxlY3Rpb25cbiAgICAtd3dzLCAtLXd3cy1jb25zaXN0ZW50IC8gLW5vLXd3cywgLS1uby13d3MtY29uc2lzdGVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2V0cyBvciBjbGVhcnMgdGhlIFdXUyBiaXQgKGBmc1NlbGVjdGlvbmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpdCA4KS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSWYgdGhlIGBPUy8yLmZzU2VsZWN0aW9uYCBiaXQgaXMgc2V0LCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQgaGFzIGBuYW1lYCB0YWJsZSBzdHJpbmdzIGNvbnNpc3RlbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggYSB3ZWlnaHQvd2lkdGgvc2xvcGUgZmFtaWx5IHdpdGhvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmluZyB1c2Ugb2YgbmFtZSBJRHMgMjEgYW5kIDIyLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWU6IGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL29zMiNmc3NlbGVjdGlvblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBbHNvOiBodHRwczovL3R5cGVkcmF3ZXJzLmNvbS9kaXNjdXNzaW9uLzM4NVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNy9mb250bGFiLTctd2luZG93cy1yZWFkcy1leHBvcnRlZC1mb250LVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS1kaWZmZXJlbnRseVxuICAgIC12ZW5kLCAtLWFjaC12ZW5kLWlkIFRFWFQgICAgICAgU2V0cyB0aGUgYGFjaFZlbmRJRGAgdGFnICh2ZW5kb3IncyBmb3VyLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyIGlkZW50aWZpZXIpLlxuICAgIC1lbCwgLS1lbWJlZC1sZXZlbCBbMHwyfDR8OF0gICAgU2V0cy9jbGVhcnMgYGZzVHlwZWAgYml0cyAwLTNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChFTUJFRERJTkdfTEVWRUwpLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwOiBJbnN0YWxsYWJsZSBlbWJlZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDI6IFJlc3RyaWN0ZWQgTGljZW5zZSBlbWJlZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDQ6IFByZXZpZXcgJiBQcmludCBlbWJlZGRpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDg6IEVkaXRhYmxlIGVtYmVkZGluZ1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZWU6IGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXMvdHlwb2dyYXBoeS9vcGVudHlwZS9zcGVjL29zMiNmc3R5cGVcbiAgICAtbnMsIC0tbm8tc3Vic2V0dGluZyAvIC1hcywgLS1hbGxvdy1zdWJzZXR0aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyBgZnNUeXBlYCBiaXQgOFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKE5PX1NVQlNFVFRJTkcpLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBXaGVuIHRoaXMgYml0IGlzIHNldCwgdGhlIGZvbnQgbWF5IG5vdCBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2V0dGVkIHByaW9yIHRvIGVtYmVkZGluZy4gT3RoZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVtYmVkZGluZyByZXN0cmljdGlvbnMgc3BlY2lmaWVkIGluIGJpdHMgMC0zXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgOSBhbHNvIGFwcGx5LlxuICAgIC1iZW8sIC0tYml0bWFwLWVtYmVkZGluZy1vbmx5IC8gLW5vLWJlbywgLS1uby1iaXRtYXAtZW1iZWRkaW5nLW9ubHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIGBmc1R5cGVgIGJpdCA5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQklUTUFQX0VNQkVERElOR19PTkxZKS5cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiB0aGlzIGJpdCBpcyBzZXQsIG9ubHkgYml0bWFwcyBjb250YWluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBmb250IG1heSBiZSBlbWJlZGRlZC4gTm8gb3V0bGluZSBkYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXkgYmUgZW1iZWRkZWQuIElmIHRoZXJlIGFyZSBubyBiaXRtYXBzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGUgaW4gdGhlIGZvbnQsIHRoZW4gdGhlIGZvbnQgaXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNpZGVyZWQgdW5lbWJlZGRhYmxlIGFuZCB0aGUgZW1iZWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlcyB3aWxsIGZhaWwuIE90aGVyIGVtYmVkZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdHJpY3Rpb25zIHNwZWNpZmllZCBpbiBiaXRzIDAtMyBhbmQgOFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxzbyBhcHBseS5cbiAgICAtLXJlY2FsYy11bmljb2RlLXJhbmdlcyAgICAgICAgIFJlY2FsY3VsYXRlcyB0aGUgYHVsVW5pY29kZVJhbmdlKmAgdmFsdWVzLlxuICAgIC0tcmVjYWxjLWNvZGVwYWdlLXJhbmdlcyAgICAgICAgUmVjYWxjdWxhdGVzIGB1bENvZGVQYWdlUmFuZ2UxYCBhbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGB1bENvZGVQYWdlUmFuZ2UyYCB2YWx1ZXMuXG4gICAgLS1yZWNhbGMteC1oZWlnaHQgICAgICAgICAgICAgICBSZWNhbGN1bGF0ZXMgYHN4SGVpZ2h0YCB2YWx1ZS5cbiAgICAtLXJlY2FsYy1jYXAtaGVpZ2h0ICAgICAgICAgICAgIFJlY2FsY3VsYXRlcyBgc0NhcEhlaWdodGAgdmFsdWUuXG4gICAgLS1yZWNhbGMtaXRhbGljLWJpdHMgICAgICAgICAgICBTZXRzIG9yIGNsZWFycyB0aGUgaXRhbGljIGJpdHMgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9TLzIuZnNTZWxlY3Rpb24gYW5kIGluIGhlYWQubWFjU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvcmRpbmcgdG8gdGhlIGBpdGFsaWNBbmdsZWAgdmFsdWUgaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBwb3N0YCB0YWJsZS4gSWYgYGl0YWxpY0FuZ2xlYCB2YWx1ZSBpc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXIgdGhhbiAwLjAsIGl0YWxpYyBiaXRzIHdpbGwgYmUgc2V0LiBJZlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGl0YWxpY0FuZ2xlYCB2YWx1ZSBpcyAwLjAsIGl0YWxpYyBiaXRzIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNsZWFyZWQuXG4gICAgLS1yZWNhbGMtbWF4LWNvbnRleHQgICAgICAgICAgICBSZWNhbGN1bGF0ZXMgYHVzTWF4Q29udGV4dGAgdmFsdWUuXG4gICAgLS1pbXBvcnQtdW5pY29kZXMgRklMRSAgICAgICAgICBJbXBvcnRzIGB1bFVuaWNvZGVSYW5nZXMqYCBmcm9tIGEgc291cmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250LlxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgICAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWxsIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWQgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCeSBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZCBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIHBvc3RcblxuQ29tbWFuZCBsaW5lIGBwb3N0YCB0YWJsZSBlZGl0b3IuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHBvc3QgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtLWl0YWxpYy1hbmdsZSBGTE9BVCBSQU5HRSAgICAgIFNldHMgdGhlIGBpdGFsaWNBbmdsZWAgdmFsdWUuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbLTkwLjA8PXg8PTkwLjBdXG4gICAgLS11bC1wb3NpdGlvbiBJTlRFR0VSICAgICAgICAgICBTZXRzIHRoZSBgdW5kZXJsaW5lUG9zaXRpb25gIHZhbHVlLlxuICAgIC0tdWwtdGhpY2tuZXNzIElOVEVHRVIgICAgICAgICAgU2V0cyB0aGUgYHVuZGVybGluZVRoaWNrbmVzc2AgdmFsdWUuXG4gICAgLS1maXhlZC1waXRjaCAvIC0tbm8tZml4ZWQtcGl0Y2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNldHMgb3IgY2xlYXJzIHRoZSBgaXNGaXhlZFBpdGNoYCB2YWx1ZS5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICAgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQnkgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyBmdGNsaSBwcmludFxuXG5QcmludHMgdmFyaW91cyBmb250J3MgaW5mb3JtYXRpb24uXG5cbioqVXNhZ2UqKjpcbmZ0Y2xpIHByaW50IFtPUFRJT05TXSBDT01NQU5EIFtBUkdTXS4uLlxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0taGVscCAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbioqQ29tbWFuZHMqKjpcblxuICAgIGZvbnQtaW5mb1xuICAgIGZvbnQtbmFtZXNcbiAgICBmb250cy1saXN0XG4gICAgb3MyLXRhYmxlXG5cbiMjIyBmdGNsaSBwcmludCBmb250LWluZm9cblxuUHJpbnRzIGRldGFpbGVkIGZvbnQgaW5mb3JtYXRpb24uXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHByaW50IGZvbnQtaW5mbyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0taGVscCAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBwcmludCBmb250LW5hbWVzXG5cblByaW50cyB0aGUgYG5hbWVgIHRhYmxlIGFuZCwgaWYgdGhlIGZvbnQgaXMgQ0ZGLCB0aGUgbmFtZXMgaW4gdGhlIGBDRkZgIHRhYmxlIHRvcERpY3QuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHByaW50IGZvbnQtbmFtZXMgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtbWwsIC0tbWF4LWxpbmVzIElOVEVHRVIgIE1heGltdW0gbnVtYmVyIG9mIGxpbmVzIHRvIGJlIHByaW50ZWQgZm9yIGVhY2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVyZWNvcmRcbiAgICAtbSwgLS1taW5pbWFsICAgICAgICAgICAgIFByaW50cyBhIG1pbmltYWwgc2V0IG9mIG5hbWVyZWNvcmRzLCBvbWl0dGluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZXMgd2l0aCBuYW1lSUQgbm90IGluIDEsIDIsIDMsIDQsIDUsIDYsIDE2LCAxNyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDE4LCAgMjEsIDIyLCAyNVxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBwcmludCBmb250cy1saXN0XG5cblByaW50cyBhIGxpc3Qgb2YgZm9udHMgd2l0aCBiYXNpYyBpbmZvcm1hdGlvbi5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgcHJpbnQgZm9udHMtbGlzdCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0taGVscCAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSBwcmludCBvczItdGFibGVcblxuUHJpbnRzIHRoZSBgT1MvMmAgdGFibGUuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHByaW50IG9zMi10YWJsZSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0taGVscCAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIGZ0Y2xpIHV0aWxzXG5cbk1pc2NlbGxhbmVvdXMgdXRpbGl0aWVzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBbT1BUSU9OU10gQ09NTUFORCBbQVJHU10uLi5cblxuKipPcHRpb25zKio6XG5cbiAgICAtLWhlbHAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKkNvbW1hbmRzKio6XG5cbiAgICBhZGQtZHNpZ1xuICAgIGNmZi1hdXRvaGludFxuICAgIGNmZi1jaGVjay1vdXRsaW5lc1xuICAgIGNmZi1kZWhpbnRcbiAgICBjZmYtZGVzdWJyXG4gICAgY2ZmLXN1YnJcbiAgICBmb250LW9yZ2FuaXplclxuICAgIGZvbnQtcmVuYW1lclxuICAgIHR0Zi1hdXRvaGludFxuICAgIHR0Zi1kZWhpbnRcbiAgICB0dGYtcmVtb3ZlLW92ZXJsYXBzXG5cbiMjIyBmdGNsaSB1dGlscyBhZGQtZHNpZ1xuXG5BZGRzIGEgZHVtbXkgRFNJRyB0YWJsZSB0byBmb250cywgdW5sZXNzIHRoZSB0YWJsZSBpcyBhbHJlYWR5IHByZXNlbnQuIFdPRkYyIGZsYXZvcmVkIGZvbnRzIGFyZSBpZ25vcmVkLCBzaW5jZSBlbmNvZGVyc1xubXVzdCByZW1vdmUgdGhlIERTSUcgdGFibGUgZnJvbSB3b2ZmMiBmb250IGRhdGEuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGFkZC1kc2lnIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGNmZi1hdXRvaGludFxuXG5BdXRvaGludHMgQ0ZGIGZvbnRzIHdpdGggcHNhdXRvaGludC5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgY2ZmLWF1dG9oaW50IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1vcHRpbWl6ZSAvIC0tbm8tb3B0aW1pemUgICAgT3B0aW1pemUgdGhlIGhpbnRlZCBmb250IGJ5IHNwZWNpYWxpemluZyB0aGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFyc3RyaW5ncyBhbmQgYXBwbHlpbmcgc3Vicm91dGluZXMuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGNmZi1jaGVjay1vdXRsaW5lc1xuXG5QZXJmb3JtcyBgYWZka28uY2hlY2tvdXRsaW5lc3Vmb2Agb3V0bGluZSBxdWFsaXR5IGNoZWNrcyBhbmQgb3ZlcmxhcHMgcmVtb3ZhbC4gU3VwcG9ydHMgQ0ZGIGZvbnRzIG9ubHkuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGNmZi1jaGVjay1vdXRsaW5lcyBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyBjZmYtZGVoaW50XG5cbkRyb3BzIGhpbnRpbmcgZnJvbSBDRkYgZm9udHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGNmZi1kZWhpbnQgW09QVElPTlNdIElOUFVUX1BBVEhcblxuKipPcHRpb25zKio6XG5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgdXRpbHMgY2ZmLWRlc3ViclxuXG5EZXNvdWJyb3V0aW5pemUgQ0ZGIGZvbnRzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBjZmYtZGVzdWJyIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGNmZi1zdWJyXG5cblN1YnJvdXRpbml6ZSBDRkYgZm9udHMuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGNmZi1zdWJyIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLW91dCwgLS1vdXRwdXQtZGlyIERJUkVDVE9SWSAgU3BlY2lmeSB0aGUgZGlyZWN0b3J5IHdoZXJlIG91dHB1dCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzYXZlZC4gSWYgb3V0cHV0X2RpciBkb2Vzbid0IGV4aXN0LCB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgY3JlYXRlZC4gSWYgbm90IHNwZWNpZmllZCwgZmlsZXMgYXJlIHNhdmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gdGhlIHNhbWUgZm9sZGVyLlxuICAgIC0tcmVjYWxjLXRpbWVzdGFtcCAgICAgICAgICAgIEtlZXAgdGhlIG9yaWdpbmFsIGZvbnQgJ21vZGlmaWVkJyB0aW1lc3RhbXBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaGVhZC5tb2RpZmllZCkgb3Igc2V0IGl0IHRvIGN1cnJlbnQgdGltZS4gQnlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0LCBvcmlnaW5hbCB0aW1lc3RhbXAgaXMga2VwdC5cbiAgICAtLW5vLW92ZXJ3cml0ZSAgICAgICAgICAgICAgICBPdmVyd3JpdGUgZXhpc3Rpbmcgb3V0cHV0IGZpbGVzIG9yIHNhdmUgdGhlbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGEgbmV3IGZpbGUgKG51bWJlcnMgYXJlIGFwcGVuZGVkIGF0IHRoZSBlbmRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBmaWxlIG5hbWUpLiBCeSBkZWZhdWx0LCBmaWxlcyBhcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdmVyd3JpdHRlbi5cbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGRlbC10YWJsZVxuXG5EZWxldGVzIHRoZSB0YWJsZXMgc3BlY2lmaWVkIGluIHRoZSB0YWJsZV90YWcgYXJndW1lbnQocykuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIGRlbC10YWJsZSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC10LCAtLXRhYmxlLXRhZyBURVhUICAgICAgICAgIFRhYmxlVGFnIG9mIHRoZSB0YWJsZShzKSB0byBkZWxldGUuIENhbiBiZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcGVhdGVkIHRvIGRlbGV0ZSBtdWx0aXBsZSB0YWJsZXMgYXQgb25jZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtyZXF1aXJlZF1cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4jIyMgZnRjbGkgdXRpbHMgZm9udC1vcmdhbml6ZXJcblxuT3JnYW5pemVzIGZvbnRzIGJ5IG1vdmluZyB0aGVtIGludG8gYSBzdWJkaXJlY3RvcnkgbmFtZWQgYWZ0ZXIgdGhlIGZvbnQncyBmYW1pbHkgbmFtZSwgYW5kIGV2ZW50dWFsbHkgYSBzdWJkaXJlY3Rvcnlcbm5hbWVkIGFmdGVyIHRoZSBmb250J3MgZXh0ZW5zaW9uIGFuZCB2ZXJzaW9uLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyBmb250LW9yZ2FuaXplciBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC0tcmVuYW1lLXNvdXJjZSBbMXwyfDN8NHw1XSAgUmVuYW1lcyB0aGUgZm9udCBmaWxlcyBhY2NvcmRpbmcgdG8gdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZCBzb3VyY2Ugc3RyaW5nKHMpLiBTZWUgZnRjbGkgdXRpbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnQtcmVuYW1lci5cbiAgICAtZXh0LCAtLWV4dGVuc2lvbiAgICAgICAgICAgIFNvcnRzIGZvbnRzIGJ5IGV4dGVuc2lvbi5cbiAgICAtdmVyLCAtLXZlcnNpb24gICAgICAgICAgICAgIFNvcnRzIGZvbnRzIGJ5IHZlcnNpb24uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICBTaG93IHRoaXMgbWVzc2FnZSBhbmQgZXhpdC5cblxuIyMjIGZ0Y2xpIHV0aWxzIGZvbnQtcmVuYW1lclxuXG5UYWtlcyBhIHBhdGggdG8gYSBzaW5nbGUgZm9udCBmaWxlIG9yIGRpcmVjdG9yeSBvZiBmb250IGZpbGVzLCBleHRyYWN0cyBlYWNoIGZvbnQncyBtZXRhZGF0YSBhY2NvcmRpbmcgdG8gdGhlXG5gLS1zb3VyY2VgIHBhcmFtZXRlciBwYXNzZWQgYnkgdGhlIHVzZXIsIGFuZCByZW5hbWVzIHRoZSBmb250IGZpbGUgdG8gbWF0Y2ggdGhlIG1ldGFkYXRhLCBhZGRpbmcgdGhlIGNvcnJlY3RcbmV4dGVuc2lvbi5cblxuKipVc2FnZSoqOlxuXG4gICAgZnRjbGkgdXRpbHMgZm9udC1yZW5hbWVyIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLXMsIC0tc291cmNlIFsxfDJ8M3w0fDVdICBUaGUgc291cmNlIHN0cmluZyhzKSBmcm9tIHdoaWNoIHRvIGV4dHJhY3QgdGhlIG5ld1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZSBuYW1lLiBEZWZhdWx0IGlzIDEgKEZhbWlseU5hbWUtU3R5bGVOYW1lKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZWQgYWxzbyBhcyBmYWxsYmFjayBuYW1lIHdoZW4gNCBvciA1IGFyZSBwYXNzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dCB0aGUgZm9udCBpcyBUcnVlVHlwZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxOiBGYW1pbHlOYW1lLVN0eWxlTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMjogUG9zdFNjcmlwdCBOYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAzOiBGdWxsIEZvbnQgTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgNDogQ0ZGIFRvcERpY3QgZm9udE5hbWVzIChDRkYgZm9udHMgb25seSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDU6IENGRiBUb3BEaWN0IEZ1bGxOYW1lIChDRkYgZm9udHMgb25seSlcbiAgICAtLWhlbHAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG5cbiMjIyBmdGNsaSB1dGlscyBzY2FsZS11cG1cblxuQ2hhbmdlIHRoZSB1bml0cy1wZXItRU0gb2YgZm9udHMuXG5cbkhpbnRpbmcgaXMgcmVtb3ZlZCBmcm9tIHNjYWxlZCBUcnVlVHlwZSBmb250cyB0byBhdm9pZCBiYWQgcmVzdWx0cy4gWW91IG1heVxuY29uc2lkZXIgdG8gdXNlIGBmdGNsaSB1dGlscyB0dGYtYXV0b2hpbnRgIHRvIGhpbnQgdGhlIHNjYWxlZCBmb250cy4gSW5cbmFkZGl0aW9uLCBDRkYgc2NhbGVkIGZvbnRzIGFyZSBub3Qgc3Vicm91dGluaXplZC4gU3Vicm91dGluZXMgY2FuIGJlIGFwcGxpZWRcbnVzaW5nIHRoZSBgZnRjbGkgdXRpbHMgY2ZmLXN1YnJgIGNvbW1hbmQuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIHNjYWxlLXVwbSBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC11cG0gSU5URUdFUiAgICAgICAgICAgICAgICAgIE5ldyBVUE0gdmFsdWUgIFtkZWZhdWx0OiAxMDAwXVxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cblxuIyMjIGZ0Y2xpIHV0aWxzIHR0Zi1hdXRvaGludFxuXG5BdXRvaGludHMgVHJ1ZVR5cGUgZm9udHMgdXNpbmcgdHRmYXV0b2hpbnQtcHkuXG5cbioqVXNhZ2UqKjpcblxuICAgIGZ0Y2xpIHV0aWxzIHR0Zi1hdXRvaGludCBbT1BUSU9OU10gSU5QVVRfUEFUSFxuXG4qKk9wdGlvbnMqKjpcblxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyB0dGYtZGVoaW50XG5cbkRyb3BzIGhpbnRpbmcgZnJvbSBUcnVlVHlwZSBmb250cy5cblxuVGhpcyBpcyBhIENMSSBmb3IgZGVoaW50ZXIgYnkgU291cmNlIEZvdW5kcnk6IGh0dHBzOi8vZ2l0aHViLmNvbS9zb3VyY2UtZm91bmRyeS9kZWhpbnRlclxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyB0dGYtZGVoaW50IFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1rZWVwLWN2YXIgICAgICAgICAgICAgICAgICAga2VlcCBjdmFyIHRhYmxlXG4gICAgLS1rZWVwLWN2dCAgICAgICAgICAgICAgICAgICAga2VlcCBjdnQgdGFibGVcbiAgICAtLWtlZXAtZnBnbSAgICAgICAgICAgICAgICAgICBrZWVwIGZwZ20gdGFibGVcbiAgICAtLWtlZXAtaGRteCAgICAgICAgICAgICAgICAgICBrZWVwIGhkbXggdGFibGVcbiAgICAtLWtlZXAtbHRzaCAgICAgICAgICAgICAgICAgICBrZWVwIExUU0ggdGFibGVcbiAgICAtLWtlZXAtcHJlcCAgICAgICAgICAgICAgICAgICBrZWVwIHByZXAgdGFibGVcbiAgICAtLWtlZXAtdHRmYSAgICAgICAgICAgICAgICAgICBrZWVwIHR0ZmEgdGFibGVcbiAgICAtLWtlZXAtdmRteCAgICAgICAgICAgICAgICAgICBrZWVwIHZkbXggdGFibGVcbiAgICAtLWtlZXAtZ2x5ZiAgICAgICAgICAgICAgICAgICBkbyBub3QgbW9kaWZ5IGdseWYgdGFibGVcbiAgICAtLWtlZXAtZ2FzcCAgICAgICAgICAgICAgICAgICBkbyBub3QgbW9kaWZ5IGdhc3AgdGFibGVcbiAgICAtLWtlZXAtbWF4cCAgICAgICAgICAgICAgICAgICBkbyBub3QgbW9kaWZ5IG1heHAgdGFibGVcbiAgICAtLWtlZXAtaGVhZCAgICAgICAgICAgICAgICAgICBkbyBub3QgbW9kaWZ5IGhlYWQgdGFibGVcbiAgICAtLXZlcmJvc2UgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5IHN0YW5kYXJkIG91dHB1dFxuICAgIC1vdXQsIC0tb3V0cHV0LWRpciBESVJFQ1RPUlkgIFNwZWNpZnkgdGhlIGRpcmVjdG9yeSB3aGVyZSBvdXRwdXQgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2F2ZWQuIElmIG91dHB1dF9kaXIgZG9lc24ndCBleGlzdCwgd2lsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGNyZWF0ZWQuIElmIG5vdCBzcGVjaWZpZWQsIGZpbGVzIGFyZSBzYXZlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIHRoZSBzYW1lIGZvbGRlci5cbiAgICAtLXJlY2FsYy10aW1lc3RhbXAgICAgICAgICAgICBLZWVwIHRoZSBvcmlnaW5hbCBmb250ICdtb2RpZmllZCcgdGltZXN0YW1wXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGhlYWQubW9kaWZpZWQpIG9yIHNldCBpdCB0byBjdXJyZW50IHRpbWUuIEJ5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdCwgb3JpZ2luYWwgdGltZXN0YW1wIGlzIGtlcHQuXG4gICAgLS1uby1vdmVyd3JpdGUgICAgICAgICAgICAgICAgT3ZlcndyaXRlIGV4aXN0aW5nIG91dHB1dCBmaWxlcyBvciBzYXZlIHRoZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBhIG5ldyBmaWxlIChudW1iZXJzIGFyZSBhcHBlbmRlZCBhdCB0aGUgZW5kXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgZmlsZSBuYW1lKS4gQnkgZGVmYXVsdCwgZmlsZXMgYXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcndyaXR0ZW4uXG4gICAgLS1oZWxwICAgICAgICAgICAgICAgICAgICAgICAgU2hvdyB0aGlzIG1lc3NhZ2UgYW5kIGV4aXQuXG5cbiMjIyBmdGNsaSB1dGlscyB0dGYtcmVtb3ZlLW92ZXJsYXBzXG5cblNpbXBsaWZ5IGdseXBocyBpbiBUcnVlVHlwZSBmb250cyBieSBtZXJnaW5nIG92ZXJsYXBwaW5nIGNvbnRvdXJzLlxuXG4qKlVzYWdlKio6XG5cbiAgICBmdGNsaSB1dGlscyB0dGYtcmVtb3ZlLW92ZXJsYXBzIFtPUFRJT05TXSBJTlBVVF9QQVRIXG5cbioqT3B0aW9ucyoqOlxuXG4gICAgLS1pZ25vcmUtZXJyb3JzICAgICAgICAgICAgICAgSWdub3JlIGVycm9ycyB3aGlsZSByZW1vdmluZyBvdmVybGFwcy5cbiAgICAtb3V0LCAtLW91dHB1dC1kaXIgRElSRUNUT1JZICBTcGVjaWZ5IHRoZSBkaXJlY3Rvcnkgd2hlcmUgb3V0cHV0IGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNhdmVkLiBJZiBvdXRwdXRfZGlyIGRvZXNuJ3QgZXhpc3QsIHdpbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBjcmVhdGVkLiBJZiBub3Qgc3BlY2lmaWVkLCBmaWxlcyBhcmUgc2F2ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byB0aGUgc2FtZSBmb2xkZXIuXG4gICAgLS1yZWNhbGMtdGltZXN0YW1wICAgICAgICAgICAgS2VlcCB0aGUgb3JpZ2luYWwgZm9udCAnbW9kaWZpZWQnIHRpbWVzdGFtcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChoZWFkLm1vZGlmaWVkKSBvciBzZXQgaXQgdG8gY3VycmVudCB0aW1lLiBCeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQsIG9yaWdpbmFsIHRpbWVzdGFtcCBpcyBrZXB0LlxuICAgIC0tbm8tb3ZlcndyaXRlICAgICAgICAgICAgICAgIE92ZXJ3cml0ZSBleGlzdGluZyBvdXRwdXQgZmlsZXMgb3Igc2F2ZSB0aGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYSBuZXcgZmlsZSAobnVtYmVycyBhcmUgYXBwZW5kZWQgYXQgdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIGZpbGUgbmFtZSkuIEJ5IGRlZmF1bHQsIGZpbGVzIGFyZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJ3cml0dGVuLlxuICAgIC0taGVscCAgICAgICAgICAgICAgICAgICAgICAgIFNob3cgdGhpcyBtZXNzYWdlIGFuZCBleGl0LlxuXG4qKlRvIFNlcmdpZXYuIE1heSB5b3UgcmVzdCBpbiBwZWFjZS4qKlxuIiw=
ICAgICJkZXNjcmlwdGlvbl9jb250ZW50X3R5cGUiOiAidGV4dC9tYXJrZG93biIs
ICAgICJkb2NzX3VybCI6IG51bGws
ICAgICJkb3dubG9hZF91cmwiOiAiIiw=
ICAgICJkb3dubG9hZHMiOiB7
ICAgICAgImxhc3RfZGF5IjogLTEs
ICAgICAgImxhc3RfbW9udGgiOiAtMSw=
ICAgICAgImxhc3Rfd2VlayI6IC0x
ICAgIH0s
ICAgICJob21lX3BhZ2UiOiAiaHR0cHM6Ly9naXRodWIuY29tL2Z0Q0xJL2Z0Q0xJIiw=
ICAgICJrZXl3b3JkcyI6ICIiLA==
ICAgICJsaWNlbnNlIjogIiIs
ICAgICJtYWludGFpbmVyIjogIiIs
ICAgICJtYWludGFpbmVyX2VtYWlsIjogIiIs
ICAgICJuYW1lIjogImZvbnQtQ0xJIiw=
ICAgICJwYWNrYWdlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvIiw=
ICAgICJwbGF0Zm9ybSI6IG51bGws
ICAgICJwcm9qZWN0X3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvIiw=
ICAgICJwcm9qZWN0X3VybHMiOiB7
ICAgICAgIkhvbWVwYWdlIjogImh0dHBzOi8vZ2l0aHViLmNvbS9mdENMSS9mdENMSSI=
ICAgIH0s
ICAgICJyZWxlYXNlX3VybCI6ICJodHRwczovL3B5cGkub3JnL3Byb2plY3QvZm9udC1DTEkvMC45LjcvIiw=
ICAgICJyZXF1aXJlc19kaXN0IjogWw==
ICAgICAgImZvbnR0b29scyAoPj00LjM5LjIpIiw=
ICAgICAgImFmZGtvICg9PTMuOS4zKSIs
ICAgICAgImJlemllcnMgKD09MC41LjApIiw=
ICAgICAgImJyb3RsaSAoPT0xLjAuOSkiLA==
ICAgICAgImNsaWNrICg9PTguMS4zKSIs
ICAgICAgImRlaGludGVyICg9PTQuMC4wKSIs
ICAgICAgInBhdGh2YWxpZGF0ZSAoPT0yLjUuMikiLA==
ICAgICAgInJpY2ggKD49MTMuMy4yKSIs
ICAgICAgInNraWEtcGF0aG9wcyAoPT0wLjcuNCkiLA==
ICAgICAgInR0ZmF1dG9oaW50LXB5ICg9PTAuNS4xKSIs
ICAgICAgInVmbzJmdCAoPT0yLjMxLjApIiw=
ICAgICAgInpvcGZsaSAoPT0wLjIuMiki
ICAgIF0s
ICAgICJyZXF1aXJlc19weXRob24iOiAiPj0zLjcsIDwzLjExIiw=
ICAgICJzdW1tYXJ5IjogIkEgc2V0IG9mIGNvbW1hbmQgbGluZSB0b29scyB0byBlZGl0IGZvbnRzIHdpdGggRm9udFRvb2xzIiw=
ICAgICJ2ZXJzaW9uIjogIjAuOS43Iiw=
ICAgICJ5YW5rZWQiOiBmYWxzZSw=
ICAgICJ5YW5rZWRfcmVhc29uIjogbnVsbA==
ICB9LA==
ICAibGFzdF9zZXJpYWwiOiAxNzY3NDgwNiw=
ICAicmVsZWFzZXMiOiB7
ICAgICIwLjkuMCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJjNDQ4MjcyODBhOWE2NDU1MWFlZDlmZDBjZTE2NmFjMDQ1ZTQxOTJlOTU3MzU4MGQ3OGUwZWY3ZjQ0NjJlYWQ3Iiw=
ICAgICAgICAgICJtZDUiOiAiOTgwMThmZTE0MGQ1NTEwZWI3N2YwMzBkMmIzYTM2MDciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMWI0ZGJlYzE1Y2FlZWQ1MGIxMGFmMDA2NzIyNzZiZDkyOTY3ODNkNGFkYjk1NWViY2YwZGFhYjI0OWJlNTgyYSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjAudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI5ODAxOGZlMTQwZDU1MTBlYjc3ZjAzMGQyYjNhMzYwNyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0MDAyLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yM1QxMjoxNToxNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yM1QxMjoxNToxNi4zNTM1NzNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9jNC80OC8yNzI4MGE5YTY0NTUxYWVkOWZkMGNlMTY2YWMwNDVlNDE5MmU5NTczNTgwZDc4ZTBlZjdmNDQ2MmVhZDcvZm9udC1DTEktMC45LjAudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIzMDM2MzczNTJlYzIyNzRhMzEwYzRmODcwMDFhMjBhN2YyMjI1ZTRiNGFjNGJmOGE0ZGVlNTk3OTQwMGZmMmE4Iiw=
ICAgICAgICAgICJtZDUiOiAiYTZiYmJjM2M1YmMxMjQxODQ3YWQxMjZlOWFmNmU0ZDQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMjY2YjYyNGMzMDc4NzkzNDMwYjgwMzA4NmI3ZGYzZWYzYmQzYmNkOGQ1MmI5MzM1ZTFiZjBmNmZhMTA2Yzc3OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjEudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJhNmJiYmMzYzViYzEyNDE4NDdhZDEyNmU5YWY2ZTRkNCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0ODY1LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yNFQxODoyNDowNyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yNFQxODoyNDowNy4xMTI4NDFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8zMC8zNi8zNzM1MmVjMjI3NGEzMTBjNGY4NzAwMWEyMGE3ZjIyMjVlNGI0YWM0YmY4YTRkZWU1OTc5NDAwZmYyYTgvZm9udC1DTEktMC45LjEudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMi4xIjogWw==
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiOTNmMjVkYWI4MzIxYTYyY2NlM2NkZmViMWIyMTdlOGI1NDcwOTFjOGRlMzQ1Y2IyNzdkMTRlMjhlMmJlZTlkIiw=
ICAgICAgICAgICJtZDUiOiAiNzA4ZDRhNTgyNDljZTNiN2Q1NGMzYjIyYWRjMDc0NjQiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiMGQwYTVmNTYzYjhhZTA5ZDY4OTUyMmU0N2UyYzA3NjU4ODlkMzQ3NGYyNThjZjAxODUwNDA4ZjNjYmRkYzU4OCI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjIuMS50YXIuZ3oiLA==
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3MDhkNGE1ODI0OWNlM2I3ZDU0YzNiMjJhZGMwNzQ2NCIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk0NDc2LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yNVQwOToyMjoyNiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yNVQwOToyMjoyNi42NjQ4MjNaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iOS8zZi8yNWRhYjgzMjFhNjJjY2UzY2RmZWIxYjIxN2U4YjU0NzA5MWM4ZGUzNDVjYjI3N2QxNGUyOGUyYmVlOWQvZm9udC1DTEktMC45LjIuMS50YXIuZ3oiLA==
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuMyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJiZWMxOTJiYzE4NzM2MWRhZGU2ZTlhZTRhNDc0MzY4ZmM1MWY5NjJiMzJiOWRlYWFjODQzZjcyOTNhN2U1MmE0Iiw=
ICAgICAgICAgICJtZDUiOiAiNzk4MTA0OTYyZWVkOWE3ZWQyNTM1OGM2MzdlZmQ1ZTUiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYjg4ZWZkNzkyNjA1YzMyN2FmYjAwZGM1YjIzNWQ0NWI3Y2UxMzY0MWY5NTFkYjZlN2Q5YjhiNDFlNWQ5OGQwMiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjMudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICI3OTgxMDQ5NjJlZWQ5YTdlZDI1MzU4YzYzN2VmZDVlNSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk1MjExLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wMy0yOFQxNTo1MDo1NiIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wMy0yOFQxNTo1MDo1Ni42NzQ5MDhaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9iZS9jMS85MmJjMTg3MzYxZGFkZTZlOWFlNGE0NzQzNjhmYzUxZjk2MmIzMmI5ZGVhYWM4NDNmNzI5M2E3ZTUyYTQvZm9udC1DTEktMC45LjMudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNCI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI1Njc4OTI1Yjk4MzI2ZDhiYWEzMzMwZDdjNmEwNzBkODNiOTQyZjMyYTBlYTJiMWRkY2NkMDliZTJhY2I1N2FmIiw=
ICAgICAgICAgICJtZDUiOiAiMWU1MzgxZWFmMzI1YWRjNmQ2MThkMWMyYTE1NTQyODMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjgyMGY0YTBiYzRmMmRmM2IyODEzMTBjMDJlM2RhMzg0M2JhMTRmZTZhNzJlYTg3ZjhjODQ0N2FiNDRmODQzZiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjQudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxZTUzODFlYWYzMjVhZGM2ZDYxOGQxYzJhMTU1NDI4MyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk2MzYwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wMlQxMTo0NDozNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wMlQxMTo0NDozNC40Mjg5OTZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy81Ni83OC85MjViOTgzMjZkOGJhYTMzMzBkN2M2YTA3MGQ4M2I5NDJmMzJhMGVhMmIxZGRjY2QwOWJlMmFjYjU3YWYvZm9udC1DTEktMC45LjQudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNSI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICI4YzQzYjBjMTI2YzhkYzI2YWE2NmIyZGQ2MWNkZjY2NTc1YmJmYTA4ZmIzM2RlMDRmOGQ1MjQ2ZTAxNTc1MzQwIiw=
ICAgICAgICAgICJtZDUiOiAiMTg0YTQ0ZWMwN2M1YTA4MjhiNzEzOWQ3MTk4MWNiOGEiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiYzFjYWFkOGZlODE3MGY0NmFhZDVhNzVkZDliZTUzMDY2NmVlMDA2OGRkMjdlOGFhMzc0ZGIzMTExMmZmYzg3MiI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjUudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxODRhNDRlYzA3YzVhMDgyOGI3MTM5ZDcxOTgxY2I4YSIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk3NjU3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wM1QwOTowMDozMSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wM1QwOTowMDozMS41NjI1ODFaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy84Yy80My9iMGMxMjZjOGRjMjZhYTY2YjJkZDYxY2RmNjY1NzViYmZhMDhmYjMzZGUwNGY4ZDUyNDZlMDE1NzUzNDAvZm9udC1DTEktMC45LjUudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNiI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJhZTdmODcwYzRmY2VlN2FiYzM2Y2UyNGMzNzk1NTQ1YzY3YThkMzNiMjg4ZDFiMjYyNGM5Yzg0NmI1MzA0YTUyIiw=
ICAgICAgICAgICJtZDUiOiAiZjA4MzQzMWM0YTdiY2VkMjA1OGY4YjkzOTI1NDU1M2IiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZWI2YTVjMzNkODQwNzU4YTMxMDNiMjZmYWNlNDEwNTJkNzYzY2M5NTkwMGFiM2Y4MjM3YTQ1NDFkM2ViNjk1OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjYtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJmMDgzNDMxYzRhN2JjZWQyMDU4ZjhiOTM5MjU0NTUzYiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg0NDA3LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wNVQwNjoxNDo1NyIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wNVQwNjoxNDo1Ny42Mzk2MjZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9hZS83Zi84NzBjNGZjZWU3YWJjMzZjZTI0YzM3OTU1NDVjNjdhOGQzM2IyODhkMWIyNjI0YzljODQ2YjUzMDRhNTIvZm9udF9DTEktMC45LjYtcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICJkNzM1YTkxMjFmYjBmMzI1ZjhmYmEyZWZhNzlkYjRkNmZkZWExMWZhODQ1Y2IxZDhhZTU0YjkxYThmZGNjMzljIiw=
ICAgICAgICAgICJtZDUiOiAiZTRmZjRlZjU0NTZlNjIxNzlhZDBiMmMwYjU0ZGFlYTciLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZTNiMWUzODBiM2ZhYmU0NDE0OTMzZThiZWI2ODJmNGQyYjlkMWQyNGM1NTdlN2NlMzJjZmVmMTMzOGZmNDVmMSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjYudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJlNGZmNGVmNTQ1NmU2MjE3OWFkMGIyYzBiNTRkYWVhNyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4MzAwLA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0wNVQwNjoxNDo1OCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0wNVQwNjoxNDo1OC45MjU4NTBaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy9kNy8zNS9hOTEyMWZiMGYzMjVmOGZiYTJlZmE3OWRiNGQ2ZmRlYTExZmE4NDVjYjFkOGFlNTRiOTFhOGZkY2MzOWMvZm9udC1DTEktMC45LjYudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0s
ICAgICIwLjkuNyI6IFs=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIxYjJmNGJkMzM4ZWIwMTQ4ZDBkNGRmY2Q1MTAwMmI1NzdjYTFiNmNlYjdhYTgwODc5YmVkNDcyODdhNzc4MDdkIiw=
ICAgICAgICAgICJtZDUiOiAiYmVmMTE4YmVhMmVhNmIwNzJmY2JjMzE2ZGM2NTQwYzMiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiNTMzY2IzNjMyN2VmOGFmZGE2MDUwOTFmOTZhOTJmNTczY2YwMWRkOWMyN2QwMmE0NDlmMGU0MWM5ZDI2OWI5YSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udF9DTEktMC45LjctcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICJiZWYxMThiZWEyZWE2YjA3MmZjYmMzMTZkYzY1NDBjMyIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAiYmRpc3Rfd2hlZWwiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAicHkzIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDg0NDk4LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xMlQxMDo1MjozNCIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xMlQxMDo1MjozNC41NDY1MTRaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8xYi8yZi80YmQzMzhlYjAxNDhkMGQ0ZGZjZDUxMDAyYjU3N2NhMWI2Y2ViN2FhODA4NzliZWQ0NzI4N2E3NzgwN2QvZm9udF9DTEktMC45LjctcHkzLW5vbmUtYW55LndobCIs
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfSw=
ICAgICAgew==
ICAgICAgICAiY29tbWVudF90ZXh0IjogIiIs
ICAgICAgICAiZGlnZXN0cyI6IHs=
ICAgICAgICAgICJibGFrZTJiXzI1NiI6ICIwMzYwMzIzM2U1ZGNhZjUwMjQ3ZTEwNDNlMzI5MTJjZTIyMjM5N2E2NGUyNzVhMzkzNjZmYzk4ZjNkYWYwN2U2Iiw=
ICAgICAgICAgICJtZDUiOiAiMTg3NzhjYTZlZDRhZWNlMDI3OTg4NWMwYjc0Yzg3NDYiLA==
ICAgICAgICAgICJzaGEyNTYiOiAiZjJjMzZiNTY4MzE1NWI0NWUzMTBmMTdhY2IxNDlkNzUxYjcyNzE1MGFlNGYxNzM1YmQ5ZTQyZTMxZmIzNTQ3OSI=
ICAgICAgICB9LA==
ICAgICAgICAiZG93bmxvYWRzIjogLTEs
ICAgICAgICAiZmlsZW5hbWUiOiAiZm9udC1DTEktMC45LjcudGFyLmd6Iiw=
ICAgICAgICAiaGFzX3NpZyI6IGZhbHNlLA==
ICAgICAgICAibWQ1X2RpZ2VzdCI6ICIxODc3OGNhNmVkNGFlY2UwMjc5ODg1YzBiNzRjODc0NiIs
ICAgICAgICAicGFja2FnZXR5cGUiOiAic2Rpc3QiLA==
ICAgICAgICAicHl0aG9uX3ZlcnNpb24iOiAic291cmNlIiw=
ICAgICAgICAicmVxdWlyZXNfcHl0aG9uIjogIj49My43LCA8My4xMSIs
ICAgICAgICAic2l6ZSI6IDk4MzY0LA==
ICAgICAgICAidXBsb2FkX3RpbWUiOiAiMjAyMy0wNC0xMlQxMDo1MjozNSIs
ICAgICAgICAidXBsb2FkX3RpbWVfaXNvXzg2MDEiOiAiMjAyMy0wNC0xMlQxMDo1MjozNS43ODM4OTZaIiw=
ICAgICAgICAidXJsIjogImh0dHBzOi8vZmlsZXMucHl0aG9uaG9zdGVkLm9yZy9wYWNrYWdlcy8wMy82MC8zMjMzZTVkY2FmNTAyNDdlMTA0M2UzMjkxMmNlMjIyMzk3YTY0ZTI3NWEzOTM2NmZjOThmM2RhZjA3ZTYvZm9udC1DTEktMC45LjcudGFyLmd6Iiw=
ICAgICAgICAieWFua2VkIjogZmFsc2Us
ICAgICAgICAieWFua2VkX3JlYXNvbiI6IG51bGw=
ICAgICAgfQ==
ICAgIF0=
ICB9LA==
ICAidXJscyI6IFs=
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMWIyZjRiZDMzOGViMDE0OGQwZDRkZmNkNTEwMDJiNTc3Y2ExYjZjZWI3YWE4MDg3OWJlZDQ3Mjg3YTc3ODA3ZCIs
ICAgICAgICAibWQ1IjogImJlZjExOGJlYTJlYTZiMDcyZmNiYzMxNmRjNjU0MGMzIiw=
ICAgICAgICAic2hhMjU2IjogIjUzM2NiMzYzMjdlZjhhZmRhNjA1MDkxZjk2YTkyZjU3M2NmMDFkZDljMjdkMDJhNDQ5ZjBlNDFjOWQyNjliOWEi
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImZvbnRfQ0xJLTAuOS43LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiYmVmMTE4YmVhMmVhNmIwNzJmY2JjMzE2ZGM2NTQwYzMiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogImJkaXN0X3doZWVsIiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInB5MyIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNywgPDMuMTEiLA==
ICAgICAgInNpemUiOiA4NDQ5OCw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDQtMTJUMTA6NTI6MzQiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDQtMTJUMTA6NTI6MzQuNTQ2NTE0WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMWIvMmYvNGJkMzM4ZWIwMTQ4ZDBkNGRmY2Q1MTAwMmI1NzdjYTFiNmNlYjdhYTgwODc5YmVkNDcyODdhNzc4MDdkL2ZvbnRfQ0xJLTAuOS43LXB5My1ub25lLWFueS53aGwiLA==
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0s
ICAgIHs=
ICAgICAgImNvbW1lbnRfdGV4dCI6ICIiLA==
ICAgICAgImRpZ2VzdHMiOiB7
ICAgICAgICAiYmxha2UyYl8yNTYiOiAiMDM2MDMyMzNlNWRjYWY1MDI0N2UxMDQzZTMyOTEyY2UyMjIzOTdhNjRlMjc1YTM5MzY2ZmM5OGYzZGFmMDdlNiIs
ICAgICAgICAibWQ1IjogIjE4Nzc4Y2E2ZWQ0YWVjZTAyNzk4ODVjMGI3NGM4NzQ2Iiw=
ICAgICAgICAic2hhMjU2IjogImYyYzM2YjU2ODMxNTViNDVlMzEwZjE3YWNiMTQ5ZDc1MWI3MjcxNTBhZTRmMTczNWJkOWU0MmUzMWZiMzU0Nzki
ICAgICAgfSw=
ICAgICAgImRvd25sb2FkcyI6IC0xLA==
ICAgICAgImZpbGVuYW1lIjogImZvbnQtQ0xJLTAuOS43LnRhci5neiIs
ICAgICAgImhhc19zaWciOiBmYWxzZSw=
ICAgICAgIm1kNV9kaWdlc3QiOiAiMTg3NzhjYTZlZDRhZWNlMDI3OTg4NWMwYjc0Yzg3NDYiLA==
ICAgICAgInBhY2thZ2V0eXBlIjogInNkaXN0Iiw=
ICAgICAgInB5dGhvbl92ZXJzaW9uIjogInNvdXJjZSIs
ICAgICAgInJlcXVpcmVzX3B5dGhvbiI6ICI+PTMuNywgPDMuMTEiLA==
ICAgICAgInNpemUiOiA5ODM2NCw=
ICAgICAgInVwbG9hZF90aW1lIjogIjIwMjMtMDQtMTJUMTA6NTI6MzUiLA==
ICAgICAgInVwbG9hZF90aW1lX2lzb184NjAxIjogIjIwMjMtMDQtMTJUMTA6NTI6MzUuNzgzODk2WiIs
ICAgICAgInVybCI6ICJodHRwczovL2ZpbGVzLnB5dGhvbmhvc3RlZC5vcmcvcGFja2FnZXMvMDMvNjAvMzIzM2U1ZGNhZjUwMjQ3ZTEwNDNlMzI5MTJjZTIyMjM5N2E2NGUyNzVhMzkzNjZmYzk4ZjNkYWYwN2U2L2ZvbnQtQ0xJLTAuOS43LnRhci5neiIs
ICAgICAgInlhbmtlZCI6IGZhbHNlLA==
ICAgICAgInlhbmtlZF9yZWFzb24iOiBudWxs
ICAgIH0=
ICBdLA==
ICAidnVsbmVyYWJpbGl0aWVzIjogW10=
fQ==
